
kernel8.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	1400a67a 	b	a9a70 <sysinit>
   8008c:	00000000 	udf	#0
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	000b1800 	.word	0x000b1800
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	d284bc0c 	mov	x12, #0x25e0                	// #9696
   80804:	cb2c63ff 	sub	sp, sp, x12
   80808:	a9007bfd 	stp	x29, x30, [sp]
   8080c:	910003fd 	mov	x29, sp
   80810:	f9000bf3 	str	x19, [sp, #16]
   80814:	9100a3f3 	add	x19, sp, #0x28
   80818:	aa1303e0 	mov	x0, x19
   8081c:	9400000d 	bl	80850 <CKernel::CKernel()>
   80820:	aa1303e0 	mov	x0, x19
   80824:	9400008b 	bl	80a50 <CKernel::Initialize()>
   80828:	360000a0 	tbz	w0, #0, 8083c <main+0x3c>
   8082c:	aa1303e0 	mov	x0, x19
   80830:	94000128 	bl	80cd0 <CKernel::Run()>
   80834:	7100081f 	cmp	w0, #0x2
   80838:	54000040 	b.eq	80840 <main+0x40>  // b.none
   8083c:	9400a46d 	bl	a99f0 <halt>
   80840:	9400a484 	bl	a9a50 <reboot>
	...

0000000000080850 <CKernel::CKernel()>:
   80850:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80854:	52800001 	mov	w1, #0x0                   	// #0
   80858:	910003fd 	mov	x29, sp
   8085c:	a90153f3 	stp	x19, x20, [sp, #16]
   80860:	aa0003f3 	mov	x19, x0
   80864:	91006274 	add	x20, x19, #0x18
   80868:	a9025bf5 	stp	x21, x22, [sp, #32]
   8086c:	94008519 	bl	a1cd0 <CActLED::CActLED(bool)>
   80870:	aa1403e0 	mov	x0, x20
   80874:	94008b73 	bl	a3640 <CKernelOptions::CKernelOptions()>
   80878:	9122e260 	add	x0, x19, #0x8b8
   8087c:	94008879 	bl	a2a60 <CDeviceNameService::CDeviceNameService()>
   80880:	aa1403e0 	mov	x0, x20
   80884:	94008a6f 	bl	a3240 <CKernelOptions::GetWidth() const>
   80888:	2a0003f5 	mov	w21, w0
   8088c:	aa1403e0 	mov	x0, x20
   80890:	94008a70 	bl	a3250 <CKernelOptions::GetHeight() const>
   80894:	2a0003e2 	mov	w2, w0
   80898:	52800004 	mov	w4, #0x0                   	// #0
   8089c:	2a1503e1 	mov	w1, w21
   808a0:	91232260 	add	x0, x19, #0x8c8
   808a4:	52800003 	mov	w3, #0x0                   	// #0
   808a8:	9400933e 	bl	a55a0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
   808ac:	52800003 	mov	w3, #0x0                   	// #0
   808b0:	52800002 	mov	w2, #0x0                   	// #0
   808b4:	d2800001 	mov	x1, #0x0                   	// #0
   808b8:	91268260 	add	x0, x19, #0x9a0
   808bc:	940099f1 	bl	a7080 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
   808c0:	d2836500 	mov	x0, #0x1b28                	// #6952
   808c4:	8b000260 	add	x0, x19, x0
   808c8:	9400b0f2 	bl	acc90 <CExceptionHandler::CExceptionHandler()>
   808cc:	d2836601 	mov	x1, #0x1b30                	// #6960
   808d0:	8b010275 	add	x21, x19, x1
   808d4:	aa1503e0 	mov	x0, x21
   808d8:	9400b47e 	bl	adad0 <CInterruptSystem::CInterruptSystem()>
   808dc:	aa1503e1 	mov	x1, x21
   808e0:	d2840e02 	mov	x2, #0x2070                	// #8304
   808e4:	8b020276 	add	x22, x19, x2
   808e8:	aa1603e0 	mov	x0, x22
   808ec:	9400a4ad 	bl	a9ba0 <CTimer::CTimer(CInterruptSystem*)>
   808f0:	aa1403e0 	mov	x0, x20
   808f4:	94008a5f 	bl	a3270 <CKernelOptions::GetLogLevel() const>
   808f8:	d2841b03 	mov	x3, #0x20d8                	// #8408
   808fc:	aa1603e2 	mov	x2, x22
   80900:	2a0003e1 	mov	w1, w0
   80904:	8b030260 	add	x0, x19, x3
   80908:	52800023 	mov	w3, #0x1                   	// #1
   8090c:	94008c79 	bl	a3af0 <CLogger::CLogger(unsigned int, CTimer*, bool)>
   80910:	d2845804 	mov	x4, #0x22c0                	// #8896
   80914:	8b040260 	add	x0, x19, x4
   80918:	94000246 	bl	81230 <CScheduler::CScheduler()>
   8091c:	9400916d 	bl	a4ed0 <CMachineInfo::Get()>
   80920:	52800001 	mov	w1, #0x0                   	// #0
   80924:	940090eb 	bl	a4cd0 <CMachineInfo::GetDevice(TDeviceId) const>
   80928:	d2847205 	mov	x5, #0x2390                	// #9104
   8092c:	2a0003e1 	mov	w1, w0
   80930:	52800003 	mov	w3, #0x0                   	// #0
   80934:	8b050260 	add	x0, x19, x5
   80938:	52800022 	mov	w2, #0x1                   	// #1
   8093c:	9400baad 	bl	af3f0 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)>
   80940:	d2848a06 	mov	x6, #0x2450                	// #9296
   80944:	aa1603e2 	mov	x2, x22
   80948:	8b060260 	add	x0, x19, x6
   8094c:	52800003 	mov	w3, #0x0                   	// #0
   80950:	aa1503e1 	mov	x1, x21
   80954:	94001cab 	bl	87c00 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>
   80958:	d284ad07 	mov	x7, #0x2568                	// #9576
   8095c:	f912b27f 	str	xzr, [x19, #9568]
   80960:	8b070274 	add	x20, x19, x7
   80964:	d2800001 	mov	x1, #0x0                   	// #0
   80968:	aa1403e0 	mov	x0, x20
   8096c:	94000181 	bl	80f70 <COscillator::COscillator(CSynthModule*)>
   80970:	d284b208 	mov	x8, #0x2590                	// #9616
   80974:	aa1403e1 	mov	x1, x20
   80978:	8b080260 	add	x0, x19, x8
   8097c:	9400017d 	bl	80f70 <COscillator::COscillator(CSynthModule*)>
   80980:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80984:	aa1303e0 	mov	x0, x19
   80988:	a94153f3 	ldp	x19, x20, [sp, #16]
   8098c:	52803e83 	mov	w3, #0x1f4                 	// #500
   80990:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80994:	52801902 	mov	w2, #0xc8                  	// #200
   80998:	528000a1 	mov	w1, #0x5                   	// #5
   8099c:	14008521 	b	a1e20 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>

00000000000809a0 <CKernel::~CKernel()>:
   809a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   809a4:	910003fd 	mov	x29, sp
   809a8:	f9000bf3 	str	x19, [sp, #16]
   809ac:	aa0003f3 	mov	x19, x0
   809b0:	d284b200 	mov	x0, #0x2590                	// #9616
   809b4:	8b000260 	add	x0, x19, x0
   809b8:	94000162 	bl	80f40 <COscillator::~COscillator()>
   809bc:	d284ad01 	mov	x1, #0x2568                	// #9576
   809c0:	8b010260 	add	x0, x19, x1
   809c4:	9400015f 	bl	80f40 <COscillator::~COscillator()>
   809c8:	d2848a02 	mov	x2, #0x2450                	// #9296
   809cc:	8b020260 	add	x0, x19, x2
   809d0:	940028a0 	bl	8ac50 <CDWHCIDevice::~CDWHCIDevice()>
   809d4:	d2847203 	mov	x3, #0x2390                	// #9104
   809d8:	8b030260 	add	x0, x19, x3
   809dc:	9400bc79 	bl	afbc0 <CI2CMaster::~CI2CMaster()>
   809e0:	d2845804 	mov	x4, #0x22c0                	// #8896
   809e4:	8b040260 	add	x0, x19, x4
   809e8:	94000236 	bl	812c0 <CScheduler::~CScheduler()>
   809ec:	d2841b05 	mov	x5, #0x20d8                	// #8408
   809f0:	8b050260 	add	x0, x19, x5
   809f4:	94008c57 	bl	a3b50 <CLogger::~CLogger()>
   809f8:	d2840e06 	mov	x6, #0x2070                	// #8304
   809fc:	8b060260 	add	x0, x19, x6
   80a00:	9400a488 	bl	a9c20 <CTimer::~CTimer()>
   80a04:	d2836607 	mov	x7, #0x1b30                	// #6960
   80a08:	8b070260 	add	x0, x19, x7
   80a0c:	9400b441 	bl	adb10 <CInterruptSystem::~CInterruptSystem()>
   80a10:	d2836508 	mov	x8, #0x1b28                	// #6952
   80a14:	8b080260 	add	x0, x19, x8
   80a18:	9400affe 	bl	aca10 <CExceptionHandler::~CExceptionHandler()>
   80a1c:	91268260 	add	x0, x19, #0x9a0
   80a20:	94009d4c 	bl	a7f50 <CSerialDevice::~CSerialDevice()>
   80a24:	91232260 	add	x0, x19, #0x8c8
   80a28:	9400925e 	bl	a53a0 <CScreenDevice::~CScreenDevice()>
   80a2c:	9122e260 	add	x0, x19, #0x8b8
   80a30:	9400881c 	bl	a2aa0 <CDeviceNameService::~CDeviceNameService()>
   80a34:	91006260 	add	x0, x19, #0x18
   80a38:	940089ea 	bl	a31e0 <CKernelOptions::~CKernelOptions()>
   80a3c:	aa1303e0 	mov	x0, x19
   80a40:	f9400bf3 	ldr	x19, [sp, #16]
   80a44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80a48:	140084da 	b	a1db0 <CActLED::~CActLED()>
   80a4c:	d503201f 	nop

0000000000080a50 <CKernel::Initialize()>:
   80a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80a54:	910003fd 	mov	x29, sp
   80a58:	a90153f3 	stp	x19, x20, [sp, #16]
   80a5c:	91232014 	add	x20, x0, #0x8c8
   80a60:	aa0003f3 	mov	x19, x0
   80a64:	aa1403e0 	mov	x0, x20
   80a68:	940096de 	bl	a65e0 <CScreenDevice::Initialize()>
   80a6c:	370000a0 	tbnz	w0, #0, 80a80 <CKernel::Initialize()+0x30>
   80a70:	a94153f3 	ldp	x19, x20, [sp, #16]
   80a74:	52800000 	mov	w0, #0x0                   	// #0
   80a78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80a7c:	d65f03c0 	ret
   80a80:	52984001 	mov	w1, #0xc200                	// #49664
   80a84:	72a00021 	movk	w1, #0x1, lsl #16
   80a88:	91268260 	add	x0, x19, #0x9a0
   80a8c:	52800004 	mov	w4, #0x0                   	// #0
   80a90:	52800023 	mov	w3, #0x1                   	// #1
   80a94:	52800102 	mov	w2, #0x8                   	// #8
   80a98:	940099fa 	bl	a7280 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
   80a9c:	3607fea0 	tbz	w0, #0, 80a70 <CKernel::Initialize()+0x20>
   80aa0:	91006260 	add	x0, x19, #0x18
   80aa4:	940089ef 	bl	a3260 <CKernelOptions::GetLogDevice() const>
   80aa8:	aa0003e1 	mov	x1, x0
   80aac:	52800002 	mov	w2, #0x0                   	// #0
   80ab0:	9122e260 	add	x0, x19, #0x8b8
   80ab4:	94008897 	bl	a2d10 <CDeviceNameService::GetDevice(char const*, bool)>
   80ab8:	aa0003e1 	mov	x1, x0
   80abc:	d2841b04 	mov	x4, #0x20d8                	// #8408
   80ac0:	f100003f 	cmp	x1, #0x0
   80ac4:	8b040260 	add	x0, x19, x4
   80ac8:	9a941021 	csel	x1, x1, x20, ne	// ne = any
   80acc:	94008e59 	bl	a4430 <CLogger::Initialize(CDevice*)>
   80ad0:	3607fd00 	tbz	w0, #0, 80a70 <CKernel::Initialize()+0x20>
   80ad4:	d2836603 	mov	x3, #0x1b30                	// #6960
   80ad8:	8b030260 	add	x0, x19, x3
   80adc:	9400b435 	bl	adbb0 <CInterruptSystem::Initialize()>
   80ae0:	3607fc80 	tbz	w0, #0, 80a70 <CKernel::Initialize()+0x20>
   80ae4:	d2840e02 	mov	x2, #0x2070                	// #8304
   80ae8:	8b020260 	add	x0, x19, x2
   80aec:	9400a735 	bl	aa7c0 <CTimer::Initialize()>
   80af0:	3607fc00 	tbz	w0, #0, 80a70 <CKernel::Initialize()+0x20>
   80af4:	d2847201 	mov	x1, #0x2390                	// #9104
   80af8:	8b010260 	add	x0, x19, x1
   80afc:	9400baa5 	bl	af590 <CI2CMaster::Initialize()>
   80b00:	3607fb80 	tbz	w0, #0, 80a70 <CKernel::Initialize()+0x20>
   80b04:	d2848a00 	mov	x0, #0x2450                	// #9296
   80b08:	8b000260 	add	x0, x19, x0
   80b0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80b10:	52800021 	mov	w1, #0x1                   	// #1
   80b14:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80b18:	140028ba 	b	8ae00 <CDWHCIDevice::Initialize(bool)>
   80b1c:	d503201f 	nop

0000000000080b20 <CKernel::GetSoundData(void*, unsigned int)>:
   80b20:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   80b24:	910003fd 	mov	x29, sp
   80b28:	a90363f7 	stp	x23, x24, [sp, #48]
   80b2c:	531f7857 	lsl	w23, w2, #1
   80b30:	340005b7 	cbz	w23, 80be4 <CKernel::GetSoundData(void*, unsigned int)+0xc4>
   80b34:	fd002bea 	str	d10, [sp, #80]
   80b38:	2f00e40a 	movi	d10, #0x0
   80b3c:	d284b202 	mov	x2, #0x2590                	// #9616
   80b40:	a90153f3 	stp	x19, x20, [sp, #16]
   80b44:	aa0103f3 	mov	x19, x1
   80b48:	d284ad01 	mov	x1, #0x2568                	// #9576
   80b4c:	8b010018 	add	x24, x0, x1
   80b50:	a9025bf5 	stp	x21, x22, [sp, #32]
   80b54:	8b020015 	add	x21, x0, x2
   80b58:	9101bbf6 	add	x22, sp, #0x6e
   80b5c:	d2dff800 	mov	x0, #0xffc000000000        	// #281200098803712
   80b60:	52800014 	mov	w20, #0x0                   	// #0
   80b64:	f2e81be0 	movk	x0, #0x40df, lsl #48
   80b68:	6d0427e8 	stp	d8, d9, [sp, #64]
   80b6c:	9e670008 	fmov	d8, x0
   80b70:	1e6c1009 	fmov	d9, #5.000000000000000000e-01
   80b74:	d503201f 	nop
   80b78:	aa1803e0 	mov	x0, x24
   80b7c:	9400012d 	bl	81030 <COscillator::NextSample()>
   80b80:	aa1503e0 	mov	x0, x21
   80b84:	9400012b 	bl	81030 <COscillator::NextSample()>
   80b88:	aa1503e0 	mov	x0, x21
   80b8c:	940000f1 	bl	80f50 <COscillator::GetOutputLevel() const>
   80b90:	1e22c000 	fcvt	d0, s0
   80b94:	aa1603e1 	mov	x1, x22
   80b98:	aa1303e0 	mov	x0, x19
   80b9c:	d2800042 	mov	x2, #0x2                   	// #2
   80ba0:	11000a94 	add	w20, w20, #0x2
   80ba4:	1e690800 	fmul	d0, d0, d9
   80ba8:	1f482800 	fmadd	d0, d0, d8, d10
   80bac:	1e780003 	fcvtzs	w3, d0
   80bb0:	7900dfe3 	strh	w3, [sp, #110]
   80bb4:	9400a985 	bl	ab1c8 <memcpy>
   80bb8:	d2800042 	mov	x2, #0x2                   	// #2
   80bbc:	aa1603e1 	mov	x1, x22
   80bc0:	8b020260 	add	x0, x19, x2
   80bc4:	9400a981 	bl	ab1c8 <memcpy>
   80bc8:	91001273 	add	x19, x19, #0x4
   80bcc:	6b1402ff 	cmp	w23, w20
   80bd0:	54fffd48 	b.hi	80b78 <CKernel::GetSoundData(void*, unsigned int)+0x58>  // b.pmore
   80bd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   80bd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80bdc:	6d4427e8 	ldp	d8, d9, [sp, #64]
   80be0:	fd402bea 	ldr	d10, [sp, #80]
   80be4:	a94363f7 	ldp	x23, x24, [sp, #48]
   80be8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   80bec:	d65f03c0 	ret

0000000000080bf0 <CKernel::WriteSoundData(unsigned int)>:
   80bf0:	340006a1 	cbz	w1, 80cc4 <CKernel::WriteSoundData(unsigned int)+0xd4>
   80bf4:	d14007ff 	sub	sp, sp, #0x1, lsl #12
   80bf8:	a9007bfd 	stp	x29, x30, [sp]
   80bfc:	910003fd 	mov	x29, sp
   80c00:	a90153f3 	stp	x19, x20, [sp, #16]
   80c04:	2a0103f3 	mov	w19, w1
   80c08:	d2845801 	mov	x1, #0x22c0                	// #8896
   80c0c:	a9025bf5 	stp	x21, x22, [sp, #32]
   80c10:	aa0003f6 	mov	x22, x0
   80c14:	a90363f7 	stp	x23, x24, [sp, #48]
   80c18:	910183f7 	add	x23, sp, #0x60
   80c1c:	52807d18 	mov	w24, #0x3e8                 	// #1000
   80c20:	a9046bf9 	stp	x25, x26, [sp, #64]
   80c24:	f00001ba 	adrp	x26, b7000 <_etext+0x49c8>
   80c28:	9107a35a 	add	x26, x26, #0x1e8
   80c2c:	8b010019 	add	x25, x0, x1
   80c30:	f9002bfb 	str	x27, [sp, #80]
   80c34:	d000019b 	adrp	x27, b2000 <SErrorStub+0xc>
   80c38:	9119037b 	add	x27, x27, #0x640
   80c3c:	d503201f 	nop
   80c40:	710fa27f 	cmp	w19, #0x3e8
   80c44:	aa1703e1 	mov	x1, x23
   80c48:	1a989274 	csel	w20, w19, w24, ls	// ls = plast
   80c4c:	aa1603e0 	mov	x0, x22
   80c50:	2a1403e2 	mov	w2, w20
   80c54:	97ffffb3 	bl	80b20 <CKernel::GetSoundData(void*, unsigned int)>
   80c58:	f952b2c0 	ldr	x0, [x22, #9568]
   80c5c:	531e7682 	lsl	w2, w20, #2
   80c60:	aa0203f5 	mov	x21, x2
   80c64:	aa1703e1 	mov	x1, x23
   80c68:	f9400003 	ldr	x3, [x0]
   80c6c:	f9400c63 	ldr	x3, [x3, #24]
   80c70:	d63f0060 	blr	x3
   80c74:	6b0002bf 	cmp	w21, w0
   80c78:	540000e0 	b.eq	80c94 <CKernel::WriteSoundData(unsigned int)+0xa4>  // b.none
   80c7c:	d2841b00 	mov	x0, #0x20d8                	// #8408
   80c80:	aa1b03e3 	mov	x3, x27
   80c84:	aa1a03e1 	mov	x1, x26
   80c88:	8b0002c0 	add	x0, x22, x0
   80c8c:	52800022 	mov	w2, #0x1                   	// #1
   80c90:	94008dcc 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80c94:	4b140273 	sub	w19, w19, w20
   80c98:	aa1903e0 	mov	x0, x25
   80c9c:	94000305 	bl	818b0 <CScheduler::Yield()>
   80ca0:	35fffd13 	cbnz	w19, 80c40 <CKernel::WriteSoundData(unsigned int)+0x50>
   80ca4:	a9407bfd 	ldp	x29, x30, [sp]
   80ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   80cac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80cb0:	a94363f7 	ldp	x23, x24, [sp, #48]
   80cb4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   80cb8:	f9402bfb 	ldr	x27, [sp, #80]
   80cbc:	914007ff 	add	sp, sp, #0x1, lsl #12
   80cc0:	d65f03c0 	ret
   80cc4:	d65f03c0 	ret
   80cc8:	d503201f 	nop
   80ccc:	d503201f 	nop

0000000000080cd0 <CKernel::Run()>:
   80cd0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80cd4:	d2841b07 	mov	x7, #0x20d8                	// #8408
   80cd8:	d0000183 	adrp	x3, b2000 <SErrorStub+0xc>
   80cdc:	910003fd 	mov	x29, sp
   80ce0:	91196063 	add	x3, x3, #0x658
   80ce4:	f9001bf7 	str	x23, [sp, #48]
   80ce8:	f00001b7 	adrp	x23, b7000 <_etext+0x49c8>
   80cec:	9107a2e1 	add	x1, x23, #0x1e8
   80cf0:	52800062 	mov	w2, #0x3                   	// #3
   80cf4:	a9025bf5 	stp	x21, x22, [sp, #32]
   80cf8:	8b070016 	add	x22, x0, x7
   80cfc:	a90153f3 	stp	x19, x20, [sp, #16]
   80d00:	aa0003f3 	mov	x19, x0
   80d04:	aa1603e0 	mov	x0, x22
   80d08:	94008dae 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80d0c:	91006260 	add	x0, x19, #0x18
   80d10:	94008974 	bl	a32e0 <CKernelOptions::GetSoundDevice() const>
   80d14:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   80d18:	911a0021 	add	x1, x1, #0x680
   80d1c:	aa0003f4 	mov	x20, x0
   80d20:	9400a7a8 	bl	aabc0 <strcmp>
   80d24:	34000320 	cbz	w0, 80d88 <CKernel::Run()+0xb8>
   80d28:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   80d2c:	911a2021 	add	x1, x1, #0x688
   80d30:	aa1403e0 	mov	x0, x20
   80d34:	9400a7a3 	bl	aabc0 <strcmp>
   80d38:	350001e0 	cbnz	w0, 80d74 <CKernel::Run()+0xa4>
   80d3c:	d2806b00 	mov	x0, #0x358                 	// #856
   80d40:	9400ab7c 	bl	abb30 <operator new(unsigned long)>
   80d44:	d2836606 	mov	x6, #0x1b30                	// #6960
   80d48:	aa0003f4 	mov	x20, x0
   80d4c:	8b060261 	add	x1, x19, x6
   80d50:	d2847205 	mov	x5, #0x2390                	// #9104
   80d54:	52800007 	mov	w7, #0x0                   	// #0
   80d58:	8b050265 	add	x5, x19, x5
   80d5c:	52800006 	mov	w6, #0x0                   	// #0
   80d60:	52800004 	mov	w4, #0x0                   	// #0
   80d64:	5281e003 	mov	w3, #0xf00                 	// #3840
   80d68:	52977002 	mov	w2, #0xbb80                	// #48000
   80d6c:	94001349 	bl	85a90 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)>
   80d70:	1400000e 	b	80da8 <CKernel::Run()+0xd8>
   80d74:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   80d78:	911a4021 	add	x1, x1, #0x690
   80d7c:	aa1403e0 	mov	x0, x20
   80d80:	9400a790 	bl	aabc0 <strcmp>
   80d84:	34000c60 	cbz	w0, 80f10 <CKernel::Run()+0x240>
   80d88:	d2804600 	mov	x0, #0x230                 	// #560
   80d8c:	9400ab69 	bl	abb30 <operator new(unsigned long)>
   80d90:	d2836603 	mov	x3, #0x1b30                	// #6960
   80d94:	aa0003f4 	mov	x20, x0
   80d98:	8b030261 	add	x1, x19, x3
   80d9c:	52977002 	mov	w2, #0xbb80                	// #48000
   80da0:	5281e003 	mov	w3, #0xf00                 	// #3840
   80da4:	9400168b 	bl	867d0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
   80da8:	f912b274 	str	x20, [x19, #9568]
   80dac:	d284ad00 	mov	x0, #0x2568                	// #9576
   80db0:	8b000274 	add	x20, x19, x0
   80db4:	52800001 	mov	w1, #0x0                   	// #0
   80db8:	aa1403e0 	mov	x0, x20
   80dbc:	94000075 	bl	80f90 <COscillator::SetWaveform(TWaveform)>
   80dc0:	1e249000 	fmov	s0, #1.000000000000000000e+01
   80dc4:	aa1403e0 	mov	x0, x20
   80dc8:	9400007e 	bl	80fc0 <COscillator::SetFrequency(float)>
   80dcc:	d284b201 	mov	x1, #0x2590                	// #9616
   80dd0:	8b010274 	add	x20, x19, x1
   80dd4:	aa1403e0 	mov	x0, x20
   80dd8:	52800001 	mov	w1, #0x0                   	// #0
   80ddc:	9400006d 	bl	80f90 <COscillator::SetWaveform(TWaveform)>
   80de0:	52a87b81 	mov	w1, #0x43dc0000            	// #1138491392
   80de4:	1e270020 	fmov	s0, w1
   80de8:	aa1403e0 	mov	x0, x20
   80dec:	94000075 	bl	80fc0 <COscillator::SetFrequency(float)>
   80df0:	1e2a1000 	fmov	s0, #2.500000000000000000e-01
   80df4:	aa1403e0 	mov	x0, x20
   80df8:	9400007e 	bl	80ff0 <COscillator::SetModulationVolume(float)>
   80dfc:	f952b260 	ldr	x0, [x19, #9568]
   80e00:	52800c81 	mov	w1, #0x64                  	// #100
   80e04:	94000723 	bl	82a90 <CSoundBaseDevice::AllocateQueue(unsigned int)>
   80e08:	36000760 	tbz	w0, #0, 80ef4 <CKernel::Run()+0x224>
   80e0c:	f952b260 	ldr	x0, [x19, #9568]
   80e10:	52800042 	mov	w2, #0x2                   	// #2
   80e14:	52800021 	mov	w1, #0x1                   	// #1
   80e18:	9400076e 	bl	82bd0 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>
   80e1c:	f952b260 	ldr	x0, [x19, #9568]
   80e20:	940007a0 	bl	82ca0 <CSoundBaseDevice::GetQueueSizeFrames()>
   80e24:	2a0003f5 	mov	w21, w0
   80e28:	2a1503e1 	mov	w1, w21
   80e2c:	aa1303e0 	mov	x0, x19
   80e30:	97ffff70 	bl	80bf0 <CKernel::WriteSoundData(unsigned int)>
   80e34:	f952b260 	ldr	x0, [x19, #9568]
   80e38:	f9400001 	ldr	x1, [x0]
   80e3c:	f9402821 	ldr	x1, [x1, #80]
   80e40:	d63f0020 	blr	x1
   80e44:	360004a0 	tbz	w0, #0, 80ed8 <CKernel::Run()+0x208>
   80e48:	9107a2e1 	add	x1, x23, #0x1e8
   80e4c:	aa1603e0 	mov	x0, x22
   80e50:	52800062 	mov	w2, #0x3                   	// #3
   80e54:	d0000183 	adrp	x3, b2000 <SErrorStub+0xc>
   80e58:	911b6063 	add	x3, x3, #0x6d8
   80e5c:	94008d59 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80e60:	d2845802 	mov	x2, #0x22c0                	// #8896
   80e64:	91232277 	add	x23, x19, #0x8c8
   80e68:	8b020276 	add	x22, x19, x2
   80e6c:	52800014 	mov	w20, #0x0                   	// #0
   80e70:	1400000c 	b	80ea0 <CKernel::Run()+0x1d0>
   80e74:	94000383 	bl	81c80 <CScheduler::MsSleep(unsigned int)>
   80e78:	f952b260 	ldr	x0, [x19, #9568]
   80e7c:	9400092d 	bl	83330 <CSoundBaseDevice::GetQueueFramesAvail()>
   80e80:	4b0002a1 	sub	w1, w21, w0
   80e84:	aa1303e0 	mov	x0, x19
   80e88:	97ffff5a 	bl	80bf0 <CKernel::WriteSoundData(unsigned int)>
   80e8c:	2a1403e2 	mov	w2, w20
   80e90:	11000694 	add	w20, w20, #0x1
   80e94:	aa1703e0 	mov	x0, x23
   80e98:	52800001 	mov	w1, #0x0                   	// #0
   80e9c:	94009801 	bl	a6ea0 <CScreenDevice::Rotor(unsigned int, unsigned int)>
   80ea0:	f952b260 	ldr	x0, [x19, #9568]
   80ea4:	f9400001 	ldr	x1, [x0]
   80ea8:	f9403021 	ldr	x1, [x1, #96]
   80eac:	d63f0020 	blr	x1
   80eb0:	2a0003e2 	mov	w2, w0
   80eb4:	52800641 	mov	w1, #0x32                  	// #50
   80eb8:	aa1603e0 	mov	x0, x22
   80ebc:	3707fdc2 	tbnz	w2, #0, 80e74 <CKernel::Run()+0x1a4>
   80ec0:	a94153f3 	ldp	x19, x20, [sp, #16]
   80ec4:	52800020 	mov	w0, #0x1                   	// #1
   80ec8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80ecc:	f9401bf7 	ldr	x23, [sp, #48]
   80ed0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80ed4:	d65f03c0 	ret
   80ed8:	9107a2e1 	add	x1, x23, #0x1e8
   80edc:	aa1603e0 	mov	x0, x22
   80ee0:	d0000183 	adrp	x3, b2000 <SErrorStub+0xc>
   80ee4:	911ae063 	add	x3, x3, #0x6b8
   80ee8:	52800002 	mov	w2, #0x0                   	// #0
   80eec:	94008d35 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80ef0:	17ffffd6 	b	80e48 <CKernel::Run()+0x178>
   80ef4:	9107a2e1 	add	x1, x23, #0x1e8
   80ef8:	aa1603e0 	mov	x0, x22
   80efc:	d0000183 	adrp	x3, b2000 <SErrorStub+0xc>
   80f00:	911a6063 	add	x3, x3, #0x698
   80f04:	52800002 	mov	w2, #0x0                   	// #0
   80f08:	94008d2e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80f0c:	17ffffc0 	b	80e0c <CKernel::Run()+0x13c>
   80f10:	d2803600 	mov	x0, #0x1b0                 	// #432
   80f14:	9400ab07 	bl	abb30 <operator new(unsigned long)>
   80f18:	d2836604 	mov	x4, #0x1b30                	// #6960
   80f1c:	aa0003f4 	mov	x20, x0
   80f20:	8b040261 	add	x1, x19, x4
   80f24:	5281e003 	mov	w3, #0xf00                 	// #3840
   80f28:	52977002 	mov	w2, #0xbb80                	// #48000
   80f2c:	94000eb1 	bl	849f0 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
   80f30:	17ffff9e 	b	80da8 <CKernel::Run()+0xd8>
	...

0000000000080f40 <COscillator::~COscillator()>:
   80f40:	d65f03c0 	ret
   80f44:	d503201f 	nop
   80f48:	d503201f 	nop
   80f4c:	d503201f 	nop

0000000000080f50 <COscillator::GetOutputLevel() const>:
   80f50:	bd402000 	ldr	s0, [x0, #32]
   80f54:	d65f03c0 	ret
   80f58:	d503201f 	nop
   80f5c:	d503201f 	nop

0000000000080f60 <COscillator::~COscillator()>:
   80f60:	d2800501 	mov	x1, #0x28                  	// #40
   80f64:	1400ab13 	b	abbb0 <operator delete(void*, unsigned long)>
   80f68:	d503201f 	nop
   80f6c:	d503201f 	nop

0000000000080f70 <COscillator::COscillator(CSynthModule*)>:
   80f70:	d2e83403 	mov	x3, #0x41a0000000000000    	// #4728779608739020800
   80f74:	90000242 	adrp	x2, c8000 <__exidx_end+0xb458>
   80f78:	913ac042 	add	x2, x2, #0xeb0
   80f7c:	a9000402 	stp	x2, x1, [x0]
   80f80:	a9017c03 	stp	x3, xzr, [x0, #16]
   80f84:	b900201f 	str	wzr, [x0, #32]
   80f88:	d65f03c0 	ret
   80f8c:	d503201f 	nop

0000000000080f90 <COscillator::SetWaveform(TWaveform)>:
   80f90:	7100143f 	cmp	w1, #0x5
   80f94:	5400006c 	b.gt	80fa0 <COscillator::SetWaveform(TWaveform)+0x10>
   80f98:	b9001001 	str	w1, [x0, #16]
   80f9c:	d65f03c0 	ret
   80fa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   80fa4:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   80fa8:	d0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   80fac:	910003fd 	mov	x29, sp
   80fb0:	911be021 	add	x1, x1, #0x6f8
   80fb4:	911c2000 	add	x0, x0, #0x708
   80fb8:	52800b82 	mov	w2, #0x5c                  	// #92
   80fbc:	940083d1 	bl	a1f00 <assertion_failed>

0000000000080fc0 <COscillator::SetFrequency(float)>:
   80fc0:	1e202018 	fcmpe	s0, #0.0
   80fc4:	5400012c 	b.gt	80fe8 <COscillator::SetFrequency(float)+0x28>
   80fc8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   80fcc:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   80fd0:	d0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   80fd4:	910003fd 	mov	x29, sp
   80fd8:	911be021 	add	x1, x1, #0x6f8
   80fdc:	911ca000 	add	x0, x0, #0x728
   80fe0:	52800c42 	mov	w2, #0x62                  	// #98
   80fe4:	940083c7 	bl	a1f00 <assertion_failed>
   80fe8:	bd001400 	str	s0, [x0, #20]
   80fec:	d65f03c0 	ret

0000000000080ff0 <COscillator::SetModulationVolume(float)>:
   80ff0:	1e202018 	fcmpe	s0, #0.0
   80ff4:	5400012a 	b.ge	81018 <COscillator::SetModulationVolume(float)+0x28>  // b.tcont
   80ff8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   80ffc:	d0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81000:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81004:	910003fd 	mov	x29, sp
   81008:	911be021 	add	x1, x1, #0x6f8
   8100c:	911d0000 	add	x0, x0, #0x740
   81010:	52800d02 	mov	w2, #0x68                  	// #104
   81014:	940083bb 	bl	a1f00 <assertion_failed>
   81018:	1e2e1001 	fmov	s1, #1.000000000000000000e+00
   8101c:	1e212010 	fcmpe	s0, s1
   81020:	54000049 	b.ls	81028 <COscillator::SetModulationVolume(float)+0x38>  // b.plast
   81024:	17fffff5 	b	80ff8 <COscillator::SetModulationVolume(float)+0x8>
   81028:	bd001800 	str	s0, [x0, #24]
   8102c:	d65f03c0 	ret

0000000000081030 <COscillator::NextSample()>:
   81030:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81034:	910003fd 	mov	x29, sp
   81038:	f9000bf3 	str	x19, [sp, #16]
   8103c:	aa0003f3 	mov	x19, x0
   81040:	f9400400 	ldr	x0, [x0, #8]
   81044:	fd000fe8 	str	d8, [sp, #24]
   81048:	bd401668 	ldr	s8, [x19, #20]
   8104c:	b4000220 	cbz	x0, 81090 <COscillator::NextSample()+0x60>
   81050:	f9400002 	ldr	x2, [x0]
   81054:	f0ffffe1 	adrp	x1, 80000 <_start>
   81058:	913d4021 	add	x1, x1, #0xf50
   8105c:	f9400842 	ldr	x2, [x2, #16]
   81060:	eb01005f 	cmp	x2, x1
   81064:	54000c61 	b.ne	811f0 <COscillator::NextSample()+0x1c0>  // b.any
   81068:	bd402000 	ldr	s0, [x0, #32]
   8106c:	bd401a62 	ldr	s2, [x19, #24]
   81070:	1e669001 	fmov	d1, #2.000000000000000000e+01
   81074:	1e22c108 	fcvt	d8, s8
   81078:	1e220800 	fmul	s0, s0, s2
   8107c:	1e22c000 	fcvt	d0, s0
   81080:	1f412008 	fmadd	d8, d0, d1, d8
   81084:	1e624108 	fcvt	s8, d8
   81088:	1e202118 	fcmpe	s8, #0.0
   8108c:	54000329 	b.ls	810f0 <COscillator::NextSample()+0xc0>  // b.plast
   81090:	52900000 	mov	w0, #0x8000                	// #32768
   81094:	72a8e760 	movk	w0, #0x473b, lsl #16
   81098:	1e270000 	fmov	s0, w0
   8109c:	1e6c1001 	fmov	d1, #5.000000000000000000e-01
   810a0:	b9401e60 	ldr	w0, [x19, #28]
   810a4:	1e281800 	fdiv	s0, s0, s8
   810a8:	b9401262 	ldr	w2, [x19, #16]
   810ac:	11000400 	add	w0, w0, #0x1
   810b0:	1e22c000 	fcvt	d0, s0
   810b4:	1e612800 	fadd	d0, d0, d1
   810b8:	1e790001 	fcvtzu	w1, d0
   810bc:	6b01001f 	cmp	w0, w1
   810c0:	1a9f3000 	csel	w0, w0, wzr, cc	// cc = lo, ul, last
   810c4:	b9001e60 	str	w0, [x19, #28]
   810c8:	7100085f 	cmp	w2, #0x2
   810cc:	540007a0 	b.eq	811c0 <COscillator::NextSample()+0x190>  // b.none
   810d0:	54000188 	b.hi	81100 <COscillator::NextSample()+0xd0>  // b.pmore
   810d4:	34000602 	cbz	w2, 81194 <COscillator::NextSample()+0x164>
   810d8:	0b000000 	add	w0, w0, w0
   810dc:	1e3e1000 	fmov	s0, #-1.000000000000000000e+00
   810e0:	6b01001f 	cmp	w0, w1
   810e4:	1e2e1001 	fmov	s1, #1.000000000000000000e+00
   810e8:	1e212c00 	fcsel	s0, s0, s1, cs	// cs = hs, nlast
   810ec:	bd002260 	str	s0, [x19, #32]
   810f0:	f9400bf3 	ldr	x19, [sp, #16]
   810f4:	fd400fe8 	ldr	d8, [sp, #24]
   810f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   810fc:	d65f03c0 	ret
   81100:	71000c5f 	cmp	w2, #0x3
   81104:	54000280 	b.eq	81154 <COscillator::NextSample()+0x124>  // b.none
   81108:	51001043 	sub	w3, w2, #0x4
   8110c:	7100047f 	cmp	w3, #0x1
   81110:	54000828 	b.hi	81214 <COscillator::NextSample()+0x1e4>  // b.pmore
   81114:	7100105f 	cmp	w2, #0x4
   81118:	1e2a1004 	fmov	s4, #2.500000000000000000e-01
   8111c:	1e281003 	fmov	s3, #1.250000000000000000e-01
   81120:	1e230021 	ucvtf	s1, w1
   81124:	1e230000 	ucvtf	s0, w0
   81128:	1e2e1002 	fmov	s2, #1.000000000000000000e+00
   8112c:	1e240c63 	fcsel	s3, s3, s4, eq	// eq = none
   81130:	1e3e1004 	fmov	s4, #-1.000000000000000000e+00
   81134:	fd400fe8 	ldr	d8, [sp, #24]
   81138:	1e230821 	fmul	s1, s1, s3
   8113c:	1e212010 	fcmpe	s0, s1
   81140:	1e244c40 	fcsel	s0, s2, s4, mi	// mi = first
   81144:	bd002260 	str	s0, [x19, #32]
   81148:	f9400bf3 	ldr	x19, [sp, #16]
   8114c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81150:	d65f03c0 	ret
   81154:	0b000002 	add	w2, w0, w0
   81158:	1e630022 	ucvtf	d2, w1
   8115c:	6b01005f 	cmp	w2, w1
   81160:	540004c2 	b.cs	811f8 <COscillator::NextSample()+0x1c8>  // b.hs, b.nlast
   81164:	1e630000 	ucvtf	d0, w0
   81168:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
   8116c:	1e602800 	fadd	d0, d0, d0
   81170:	1e602800 	fadd	d0, d0, d0
   81174:	1e621800 	fdiv	d0, d0, d2
   81178:	1e613800 	fsub	d0, d0, d1
   8117c:	1e624000 	fcvt	s0, d0
   81180:	fd400fe8 	ldr	d8, [sp, #24]
   81184:	bd002260 	str	s0, [x19, #32]
   81188:	f9400bf3 	ldr	x19, [sp, #16]
   8118c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81190:	d65f03c0 	ret
   81194:	52802d03 	mov	w3, #0x168                 	// #360
   81198:	f0000222 	adrp	x2, c8000 <__exidx_end+0xb458>
   8119c:	91240042 	add	x2, x2, #0x900
   811a0:	fd400fe8 	ldr	d8, [sp, #24]
   811a4:	1b037c00 	mul	w0, w0, w3
   811a8:	1ac10800 	udiv	w0, w0, w1
   811ac:	bc607840 	ldr	s0, [x2, x0, lsl #2]
   811b0:	bd002260 	str	s0, [x19, #32]
   811b4:	f9400bf3 	ldr	x19, [sp, #16]
   811b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   811bc:	d65f03c0 	ret
   811c0:	1e630000 	ucvtf	d0, w0
   811c4:	1e630022 	ucvtf	d2, w1
   811c8:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
   811cc:	fd400fe8 	ldr	d8, [sp, #24]
   811d0:	1e602800 	fadd	d0, d0, d0
   811d4:	1e621800 	fdiv	d0, d0, d2
   811d8:	1e613800 	fsub	d0, d0, d1
   811dc:	1e624000 	fcvt	s0, d0
   811e0:	bd002260 	str	s0, [x19, #32]
   811e4:	f9400bf3 	ldr	x19, [sp, #16]
   811e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   811ec:	d65f03c0 	ret
   811f0:	d63f0040 	blr	x2
   811f4:	17ffff9e 	b	8106c <COscillator::NextSample()+0x3c>
   811f8:	4b010042 	sub	w2, w2, w1
   811fc:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
   81200:	1e630041 	ucvtf	d1, w2
   81204:	1e612821 	fadd	d1, d1, d1
   81208:	1e621821 	fdiv	d1, d1, d2
   8120c:	1e613800 	fsub	d0, d0, d1
   81210:	17ffffdb 	b	8117c <COscillator::NextSample()+0x14c>
   81214:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81218:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   8121c:	911be021 	add	x1, x1, #0x6f8
   81220:	9135c000 	add	x0, x0, #0xd70
   81224:	52801322 	mov	w2, #0x99                  	// #153
   81228:	94008336 	bl	a1f00 <assertion_failed>
   8122c:	00000000 	udf	#0

0000000000081230 <CScheduler::CScheduler()>:
   81230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81234:	910003fd 	mov	x29, sp
   81238:	a90153f3 	stp	x19, x20, [sp, #16]
   8123c:	aa0003f3 	mov	x19, x0
   81240:	b0000241 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   81244:	f945c022 	ldr	x2, [x1, #2944]
   81248:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
   8124c:	b900a27f 	str	wzr, [x19, #160]
   81250:	f900567f 	str	xzr, [x19, #168]
   81254:	b900b27f 	str	wzr, [x19, #176]
   81258:	a90bfe7f 	stp	xzr, xzr, [x19, #184]
   8125c:	f9006660 	str	x0, [x19, #200]
   81260:	b50001e2 	cbnz	x2, 8129c <CScheduler::CScheduler()+0x6c>
   81264:	f905c033 	str	x19, [x1, #2944]
   81268:	d2802900 	mov	x0, #0x148                 	// #328
   8126c:	9400aa31 	bl	abb30 <operator new(unsigned long)>
   81270:	aa0003f4 	mov	x20, x0
   81274:	52800002 	mov	w2, #0x0                   	// #0
   81278:	52800001 	mov	w1, #0x0                   	// #0
   8127c:	94000361 	bl	82000 <CTask::CTask(unsigned int, bool)>
   81280:	f9005674 	str	x20, [x19, #168]
   81284:	aa1403e0 	mov	x0, x20
   81288:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8128c:	911e2021 	add	x1, x1, #0x788
   81290:	a94153f3 	ldp	x19, x20, [sp, #16]
   81294:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81298:	140003f2 	b	82260 <CTask::SetName(char const*)>
   8129c:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   812a0:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   812a4:	911da021 	add	x1, x1, #0x768
   812a8:	911de000 	add	x0, x0, #0x778
   812ac:	528004e2 	mov	w2, #0x27                  	// #39
   812b0:	94008314 	bl	a1f00 <assertion_failed>
   812b4:	d503201f 	nop
   812b8:	d503201f 	nop
   812bc:	d503201f 	nop

00000000000812c0 <CScheduler::~CScheduler()>:
   812c0:	b0000240 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   812c4:	f905c01f 	str	xzr, [x0, #2944]
   812c8:	d65f03c0 	ret
   812cc:	d503201f 	nop

00000000000812d0 <CScheduler::GetCurrentTask()>:
   812d0:	f9405400 	ldr	x0, [x0, #168]
   812d4:	d65f03c0 	ret
   812d8:	d503201f 	nop
   812dc:	d503201f 	nop

00000000000812e0 <CScheduler::GetTask(char const*)>:
   812e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   812e4:	910003fd 	mov	x29, sp
   812e8:	a90153f3 	stp	x19, x20, [sp, #16]
   812ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   812f0:	b40002e1 	cbz	x1, 8134c <CScheduler::GetTask(char const*)+0x6c>
   812f4:	aa0003f5 	mov	x21, x0
   812f8:	b940a000 	ldr	w0, [x0, #160]
   812fc:	aa0103f6 	mov	x22, x1
   81300:	d2800013 	mov	x19, #0x0                   	// #0
   81304:	34000180 	cbz	w0, 81334 <CScheduler::GetTask(char const*)+0x54>
   81308:	f8737ab4 	ldr	x20, [x21, x19, lsl #3]
   8130c:	b40000f4 	cbz	x20, 81328 <CScheduler::GetTask(char const*)+0x48>
   81310:	aa1403e0 	mov	x0, x20
   81314:	940003d7 	bl	82270 <CTask::GetName() const>
   81318:	aa1603e1 	mov	x1, x22
   8131c:	9400a629 	bl	aabc0 <strcmp>
   81320:	340000c0 	cbz	w0, 81338 <CScheduler::GetTask(char const*)+0x58>
   81324:	b940a2a0 	ldr	w0, [x21, #160]
   81328:	91000673 	add	x19, x19, #0x1
   8132c:	6b13001f 	cmp	w0, w19
   81330:	54fffec8 	b.hi	81308 <CScheduler::GetTask(char const*)+0x28>  // b.pmore
   81334:	d2800014 	mov	x20, #0x0                   	// #0
   81338:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8133c:	aa1403e0 	mov	x0, x20
   81340:	a94153f3 	ldp	x19, x20, [sp, #16]
   81344:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81348:	d65f03c0 	ret
   8134c:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81350:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81354:	911da021 	add	x1, x1, #0x768
   81358:	911e4000 	add	x0, x0, #0x790
   8135c:	52801042 	mov	w2, #0x82                  	// #130
   81360:	940082e8 	bl	a1f00 <assertion_failed>
   81364:	d503201f 	nop
   81368:	d503201f 	nop
   8136c:	d503201f 	nop

0000000000081370 <CScheduler::IsValidTask(CTask*)>:
   81370:	b940a004 	ldr	w4, [x0, #160]
   81374:	aa0003e2 	mov	x2, x0
   81378:	340001c4 	cbz	w4, 813b0 <CScheduler::IsValidTask(CTask*)+0x40>
   8137c:	8b244c04 	add	x4, x0, w4, uxtw #3
   81380:	f9400043 	ldr	x3, [x2]
   81384:	91002042 	add	x2, x2, #0x8
   81388:	eb01007f 	cmp	x3, x1
   8138c:	1a9f17e0 	cset	w0, eq	// eq = none
   81390:	f100007f 	cmp	x3, #0x0
   81394:	1a9f07e3 	cset	w3, ne	// ne = any
   81398:	6a03001f 	tst	w0, w3
   8139c:	0a030000 	and	w0, w0, w3
   813a0:	54000061 	b.ne	813ac <CScheduler::IsValidTask(CTask*)+0x3c>  // b.any
   813a4:	eb04005f 	cmp	x2, x4
   813a8:	54fffec1 	b.ne	81380 <CScheduler::IsValidTask(CTask*)+0x10>  // b.any
   813ac:	d65f03c0 	ret
   813b0:	52800000 	mov	w0, #0x0                   	// #0
   813b4:	d65f03c0 	ret
   813b8:	d503201f 	nop
   813bc:	d503201f 	nop

00000000000813c0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   813c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   813c4:	910003fd 	mov	x29, sp
   813c8:	f9405c02 	ldr	x2, [x0, #184]
   813cc:	b50000a2 	cbnz	x2, 813e0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x20>
   813d0:	f9005c01 	str	x1, [x0, #184]
   813d4:	b4000121 	cbz	x1, 813f8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x38>
   813d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   813dc:	d65f03c0 	ret
   813e0:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   813e4:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   813e8:	911da021 	add	x1, x1, #0x768
   813ec:	911e8000 	add	x0, x0, #0x7a0
   813f0:	52801402 	mov	w2, #0xa0                  	// #160
   813f4:	940082c3 	bl	a1f00 <assertion_failed>
   813f8:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   813fc:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81400:	911da021 	add	x1, x1, #0x768
   81404:	911f0000 	add	x0, x0, #0x7c0
   81408:	52801442 	mov	w2, #0xa2                  	// #162
   8140c:	940082bd 	bl	a1f00 <assertion_failed>

0000000000081410 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   81410:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81414:	910003fd 	mov	x29, sp
   81418:	f9406002 	ldr	x2, [x0, #192]
   8141c:	b50000a2 	cbnz	x2, 81430 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x20>
   81420:	f9006001 	str	x1, [x0, #192]
   81424:	b4000121 	cbz	x1, 81448 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x38>
   81428:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8142c:	d65f03c0 	ret
   81430:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81434:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81438:	911da021 	add	x1, x1, #0x768
   8143c:	911f8000 	add	x0, x0, #0x7e0
   81440:	528014e2 	mov	w2, #0xa7                  	// #167
   81444:	940082af 	bl	a1f00 <assertion_failed>
   81448:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8144c:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81450:	911da021 	add	x1, x1, #0x768
   81454:	91200000 	add	x0, x0, #0x800
   81458:	52801522 	mov	w2, #0xa9                  	// #169
   8145c:	940082a9 	bl	a1f00 <assertion_failed>

0000000000081460 <CScheduler::SuspendNewTasks()>:
   81460:	b940c801 	ldr	w1, [x0, #200]
   81464:	11000421 	add	w1, w1, #0x1
   81468:	b900c801 	str	w1, [x0, #200]
   8146c:	d65f03c0 	ret

0000000000081470 <CScheduler::ResumeNewTasks()>:
   81470:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81474:	910003fd 	mov	x29, sp
   81478:	a90153f3 	stp	x19, x20, [sp, #16]
   8147c:	aa0003f4 	mov	x20, x0
   81480:	b940c800 	ldr	w0, [x0, #200]
   81484:	7100001f 	cmp	w0, #0x0
   81488:	540002ed 	b.le	814e4 <CScheduler::ResumeNewTasks()+0x74>
   8148c:	51000400 	sub	w0, w0, #0x1
   81490:	b900ca80 	str	w0, [x20, #200]
   81494:	35000220 	cbnz	w0, 814d8 <CScheduler::ResumeNewTasks()+0x68>
   81498:	b940a281 	ldr	w1, [x20, #160]
   8149c:	340001e1 	cbz	w1, 814d8 <CScheduler::ResumeNewTasks()+0x68>
   814a0:	d2800013 	mov	x19, #0x0                   	// #0
   814a4:	14000004 	b	814b4 <CScheduler::ResumeNewTasks()+0x44>
   814a8:	91000673 	add	x19, x19, #0x1
   814ac:	6b13003f 	cmp	w1, w19
   814b0:	54000149 	b.ls	814d8 <CScheduler::ResumeNewTasks()+0x68>  // b.plast
   814b4:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   814b8:	b4ffff80 	cbz	x0, 814a8 <CScheduler::ResumeNewTasks()+0x38>
   814bc:	b9400802 	ldr	w2, [x0, #8]
   814c0:	35ffff42 	cbnz	w2, 814a8 <CScheduler::ResumeNewTasks()+0x38>
   814c4:	9400031b 	bl	82130 <CTask::Start()>
   814c8:	91000673 	add	x19, x19, #0x1
   814cc:	b940a281 	ldr	w1, [x20, #160]
   814d0:	6b13003f 	cmp	w1, w19
   814d4:	54ffff08 	b.hi	814b4 <CScheduler::ResumeNewTasks()+0x44>  // b.pmore
   814d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   814dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   814e0:	d65f03c0 	ret
   814e4:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   814e8:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   814ec:	911da021 	add	x1, x1, #0x768
   814f0:	91208000 	add	x0, x0, #0x820
   814f4:	52801662 	mov	w2, #0xb3                  	// #179
   814f8:	94008282 	bl	a1f00 <assertion_failed>
   814fc:	d503201f 	nop

0000000000081500 <CScheduler::AddTask(CTask*)>:
   81500:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81504:	910003fd 	mov	x29, sp
   81508:	a90153f3 	stp	x19, x20, [sp, #16]
   8150c:	b4000501 	cbz	x1, 815ac <CScheduler::AddTask(CTask*)+0xac>
   81510:	aa0003f3 	mov	x19, x0
   81514:	b940c800 	ldr	w0, [x0, #200]
   81518:	aa0103f4 	mov	x20, x1
   8151c:	35000200 	cbnz	w0, 8155c <CScheduler::AddTask(CTask*)+0x5c>
   81520:	b940a261 	ldr	w1, [x19, #160]
   81524:	d2800000 	mov	x0, #0x0                   	// #0
   81528:	34000221 	cbz	w1, 8156c <CScheduler::AddTask(CTask*)+0x6c>
   8152c:	2a0103e0 	mov	w0, w1
   81530:	d2800002 	mov	x2, #0x0                   	// #0
   81534:	14000004 	b	81544 <CScheduler::AddTask(CTask*)+0x44>
   81538:	91000442 	add	x2, x2, #0x1
   8153c:	eb00005f 	cmp	x2, x0
   81540:	54000120 	b.eq	81564 <CScheduler::AddTask(CTask*)+0x64>  // b.none
   81544:	f8627a63 	ldr	x3, [x19, x2, lsl #3]
   81548:	b5ffff83 	cbnz	x3, 81538 <CScheduler::AddTask(CTask*)+0x38>
   8154c:	f8225a74 	str	x20, [x19, w2, uxtw #3]
   81550:	a94153f3 	ldp	x19, x20, [sp, #16]
   81554:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81558:	d65f03c0 	ret
   8155c:	b900083f 	str	wzr, [x1, #8]
   81560:	17fffff0 	b	81520 <CScheduler::AddTask(CTask*)+0x20>
   81564:	7100503f 	cmp	w1, #0x14
   81568:	540000e0 	b.eq	81584 <CScheduler::AddTask(CTask*)+0x84>  // b.none
   8156c:	11000421 	add	w1, w1, #0x1
   81570:	b900a261 	str	w1, [x19, #160]
   81574:	f8207a74 	str	x20, [x19, x0, lsl #3]
   81578:	a94153f3 	ldp	x19, x20, [sp, #16]
   8157c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81580:	d65f03c0 	ret
   81584:	9400899b 	bl	a3bf0 <CLogger::Get()>
   81588:	b0000183 	adrp	x3, b2000 <SErrorStub+0xc>
   8158c:	d00001a1 	adrp	x1, b7000 <_etext+0x49c8>
   81590:	91212063 	add	x3, x3, #0x848
   81594:	9107c021 	add	x1, x1, #0x1f0
   81598:	52800002 	mov	w2, #0x0                   	// #0
   8159c:	94008b89 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   815a0:	b940a261 	ldr	w1, [x19, #160]
   815a4:	2a0103e0 	mov	w0, w1
   815a8:	17fffff1 	b	8156c <CScheduler::AddTask(CTask*)+0x6c>
   815ac:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   815b0:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   815b4:	911da021 	add	x1, x1, #0x768
   815b8:	9120e000 	add	x0, x0, #0x838
   815bc:	52801d02 	mov	w2, #0xe8                  	// #232
   815c0:	94008250 	bl	a1f00 <assertion_failed>
   815c4:	d503201f 	nop
   815c8:	d503201f 	nop
   815cc:	d503201f 	nop

00000000000815d0 <CScheduler::RemoveTask(CTask*)>:
   815d0:	b940a005 	ldr	w5, [x0, #160]
   815d4:	34000225 	cbz	w5, 81618 <CScheduler::RemoveTask(CTask*)+0x48>
   815d8:	2a0503e4 	mov	w4, w5
   815dc:	d2800002 	mov	x2, #0x0                   	// #0
   815e0:	14000004 	b	815f0 <CScheduler::RemoveTask(CTask*)+0x20>
   815e4:	91000442 	add	x2, x2, #0x1
   815e8:	eb04005f 	cmp	x2, x4
   815ec:	54000160 	b.eq	81618 <CScheduler::RemoveTask(CTask*)+0x48>  // b.none
   815f0:	f8627803 	ldr	x3, [x0, x2, lsl #3]
   815f4:	eb01007f 	cmp	x3, x1
   815f8:	54ffff61 	b.ne	815e4 <CScheduler::RemoveTask(CTask*)+0x14>  // b.any
   815fc:	f822581f 	str	xzr, [x0, w2, uxtw #3]
   81600:	510004a5 	sub	w5, w5, #0x1
   81604:	6b0200bf 	cmp	w5, w2
   81608:	54000040 	b.eq	81610 <CScheduler::RemoveTask(CTask*)+0x40>  // b.none
   8160c:	d65f03c0 	ret
   81610:	b900a005 	str	w5, [x0, #160]
   81614:	d65f03c0 	ret
   81618:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8161c:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81620:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   81624:	910003fd 	mov	x29, sp
   81628:	911da021 	add	x1, x1, #0x768
   8162c:	9135c000 	add	x0, x0, #0xd70
   81630:	52802262 	mov	w2, #0x113                 	// #275
   81634:	94008233 	bl	a1f00 <assertion_failed>
   81638:	d503201f 	nop
   8163c:	d503201f 	nop

0000000000081640 <CScheduler::WakeTasks(CTask**)>:
   81640:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81644:	910003fd 	mov	x29, sp
   81648:	a90153f3 	stp	x19, x20, [sp, #16]
   8164c:	b40004a1 	cbz	x1, 816e0 <CScheduler::WakeTasks(CTask**)+0xa0>
   81650:	aa0003f4 	mov	x20, x0
   81654:	b940cc00 	ldr	w0, [x0, #204]
   81658:	aa0103f3 	mov	x19, x1
   8165c:	35000380 	cbnz	w0, 816cc <CScheduler::WakeTasks(CTask**)+0x8c>
   81660:	f9400262 	ldr	x2, [x19]
   81664:	f900027f 	str	xzr, [x19]
   81668:	b4000282 	cbz	x2, 816b8 <CScheduler::WakeTasks(CTask**)+0x78>
   8166c:	52800023 	mov	w3, #0x1                   	// #1
   81670:	14000006 	b	81688 <CScheduler::WakeTasks(CTask**)+0x48>
   81674:	f940a041 	ldr	x1, [x2, #320]
   81678:	b9000843 	str	w3, [x2, #8]
   8167c:	f900a05f 	str	xzr, [x2, #320]
   81680:	b40001c1 	cbz	x1, 816b8 <CScheduler::WakeTasks(CTask**)+0x78>
   81684:	aa0103e2 	mov	x2, x1
   81688:	b9400841 	ldr	w1, [x2, #8]
   8168c:	7100083f 	cmp	w1, #0x2
   81690:	54ffff20 	b.eq	81674 <CScheduler::WakeTasks(CTask**)+0x34>  // b.none
   81694:	b9400840 	ldr	w0, [x2, #8]
   81698:	71000c1f 	cmp	w0, #0x3
   8169c:	54fffec0 	b.eq	81674 <CScheduler::WakeTasks(CTask**)+0x34>  // b.none
   816a0:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   816a4:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   816a8:	911da021 	add	x1, x1, #0x768
   816ac:	91220000 	add	x0, x0, #0x880
   816b0:	52802c62 	mov	w2, #0x163                 	// #355
   816b4:	94008213 	bl	a1f00 <assertion_failed>
   816b8:	b940ce80 	ldr	w0, [x20, #204]
   816bc:	350000c0 	cbnz	w0, 816d4 <CScheduler::WakeTasks(CTask**)+0x94>
   816c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   816c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   816c8:	d65f03c0 	ret
   816cc:	9400ae6d 	bl	ad080 <EnterCritical>
   816d0:	17ffffe4 	b	81660 <CScheduler::WakeTasks(CTask**)+0x20>
   816d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   816d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   816dc:	1400ae99 	b	ad140 <LeaveCritical>
   816e0:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   816e4:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   816e8:	911da021 	add	x1, x1, #0x768
   816ec:	9121a000 	add	x0, x0, #0x868
   816f0:	52802a22 	mov	w2, #0x151                 	// #337
   816f4:	94008203 	bl	a1f00 <assertion_failed>
   816f8:	d503201f 	nop
   816fc:	d503201f 	nop

0000000000081700 <CScheduler::GetNextTask()>:
   81700:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81704:	910003fd 	mov	x29, sp
   81708:	a90153f3 	stp	x19, x20, [sp, #16]
   8170c:	b940b013 	ldr	w19, [x0, #176]
   81710:	f90013f5 	str	x21, [sp, #32]
   81714:	aa0003f5 	mov	x21, x0
   81718:	7100527f 	cmp	w19, #0x14
   8171c:	1a9f3273 	csel	w19, w19, wzr, cc	// cc = lo, ul, last
   81720:	9400a4ec 	bl	aaad0 <CTimer::Get()>
   81724:	9400a1b3 	bl	a9df0 <CTimer::GetClockTicks()>
   81728:	b940a2a2 	ldr	w2, [x21, #160]
   8172c:	34000242 	cbz	w2, 81774 <CScheduler::GetNextTask()+0x74>
   81730:	52800021 	mov	w1, #0x1                   	// #1
   81734:	11000673 	add	w19, w19, #0x1
   81738:	6b02027f 	cmp	w19, w2
   8173c:	1a9f3273 	csel	w19, w19, wzr, cc	// cc = lo, ul, last
   81740:	f8735ab4 	ldr	x20, [x21, w19, uxtw #3]
   81744:	b4000134 	cbz	x20, 81768 <CScheduler::GetNextTask()+0x68>
   81748:	39403283 	ldrb	w3, [x20, #12]
   8174c:	370000e3 	tbnz	w3, #0, 81768 <CScheduler::GetNextTask()+0x68>
   81750:	b9400a83 	ldr	w3, [x20, #8]
   81754:	71000c7f 	cmp	w3, #0x3
   81758:	540006a0 	b.eq	8182c <CScheduler::GetNextTask()+0x12c>  // b.none
   8175c:	54000188 	b.hi	8178c <CScheduler::GetNextTask()+0x8c>  // b.pmore
   81760:	7100047f 	cmp	w3, #0x1
   81764:	540000a0 	b.eq	81778 <CScheduler::GetNextTask()+0x78>  // b.none
   81768:	11000421 	add	w1, w1, #0x1
   8176c:	6b01005f 	cmp	w2, w1
   81770:	54fffe22 	b.cs	81734 <CScheduler::GetNextTask()+0x34>  // b.hs, b.nlast
   81774:	52800293 	mov	w19, #0x14                  	// #20
   81778:	f94013f5 	ldr	x21, [sp, #32]
   8177c:	2a1303e0 	mov	w0, w19
   81780:	a94153f3 	ldp	x19, x20, [sp, #16]
   81784:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81788:	d65f03c0 	ret
   8178c:	7100107f 	cmp	w3, #0x4
   81790:	54000380 	b.eq	81800 <CScheduler::GetNextTask()+0x100>  // b.none
   81794:	7100147f 	cmp	w3, #0x5
   81798:	540007a1 	b.ne	8188c <CScheduler::GetNextTask()+0x18c>  // b.any
   8179c:	f94062a1 	ldr	x1, [x21, #192]
   817a0:	b40000a1 	cbz	x1, 817b4 <CScheduler::GetNextTask()+0xb4>
   817a4:	aa1403e0 	mov	x0, x20
   817a8:	d63f0020 	blr	x1
   817ac:	b940a2a2 	ldr	w2, [x21, #160]
   817b0:	34000622 	cbz	w2, 81874 <CScheduler::GetNextTask()+0x174>
   817b4:	2a0203e3 	mov	w3, w2
   817b8:	d2800001 	mov	x1, #0x0                   	// #0
   817bc:	14000004 	b	817cc <CScheduler::GetNextTask()+0xcc>
   817c0:	91000421 	add	x1, x1, #0x1
   817c4:	eb01007f 	cmp	x3, x1
   817c8:	54000560 	b.eq	81874 <CScheduler::GetNextTask()+0x174>  // b.none
   817cc:	f8617aa0 	ldr	x0, [x21, x1, lsl #3]
   817d0:	eb00029f 	cmp	x20, x0
   817d4:	54ffff61 	b.ne	817c0 <CScheduler::GetNextTask()+0xc0>  // b.any
   817d8:	f8215abf 	str	xzr, [x21, w1, uxtw #3]
   817dc:	51000442 	sub	w2, w2, #0x1
   817e0:	6b02003f 	cmp	w1, w2
   817e4:	540003c0 	b.eq	8185c <CScheduler::GetNextTask()+0x15c>  // b.none
   817e8:	f9400281 	ldr	x1, [x20]
   817ec:	aa1403e0 	mov	x0, x20
   817f0:	f9400421 	ldr	x1, [x1, #8]
   817f4:	d63f0020 	blr	x1
   817f8:	52800293 	mov	w19, #0x14                  	// #20
   817fc:	17ffffdf 	b	81778 <CScheduler::GetNextTask()+0x78>
   81800:	b9401283 	ldr	w3, [x20, #16]
   81804:	4b000063 	sub	w3, w3, w0
   81808:	7100007f 	cmp	w3, #0x0
   8180c:	54fffaec 	b.gt	81768 <CScheduler::GetNextTask()+0x68>
   81810:	52800020 	mov	w0, #0x1                   	// #1
   81814:	b9000a80 	str	w0, [x20, #8]
   81818:	f94013f5 	ldr	x21, [sp, #32]
   8181c:	2a1303e0 	mov	w0, w19
   81820:	a94153f3 	ldp	x19, x20, [sp, #16]
   81824:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81828:	d65f03c0 	ret
   8182c:	b9401283 	ldr	w3, [x20, #16]
   81830:	4b000063 	sub	w3, w3, w0
   81834:	7100007f 	cmp	w3, #0x0
   81838:	54fff98c 	b.gt	81768 <CScheduler::GetNextTask()+0x68>
   8183c:	52800020 	mov	w0, #0x1                   	// #1
   81840:	b9000a80 	str	w0, [x20, #8]
   81844:	b900129f 	str	wzr, [x20, #16]
   81848:	2a1303e0 	mov	w0, w19
   8184c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81850:	f94013f5 	ldr	x21, [sp, #32]
   81854:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81858:	d65f03c0 	ret
   8185c:	b900a2a1 	str	w1, [x21, #160]
   81860:	aa1403e0 	mov	x0, x20
   81864:	f9400281 	ldr	x1, [x20]
   81868:	f9400421 	ldr	x1, [x1, #8]
   8186c:	d63f0020 	blr	x1
   81870:	17ffffe2 	b	817f8 <CScheduler::GetNextTask()+0xf8>
   81874:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81878:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   8187c:	911da021 	add	x1, x1, #0x768
   81880:	9135c000 	add	x0, x0, #0xd70
   81884:	52802262 	mov	w2, #0x113                 	// #275
   81888:	9400819e 	bl	a1f00 <assertion_failed>
   8188c:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81890:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   81894:	911da021 	add	x1, x1, #0x768
   81898:	9135c000 	add	x0, x0, #0xd70
   8189c:	528035c2 	mov	w2, #0x1ae                 	// #430
   818a0:	94008198 	bl	a1f00 <assertion_failed>
   818a4:	d503201f 	nop
   818a8:	d503201f 	nop
   818ac:	d503201f 	nop

00000000000818b0 <CScheduler::Yield()>:
   818b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   818b4:	910003fd 	mov	x29, sp
   818b8:	a90153f3 	stp	x19, x20, [sp, #16]
   818bc:	aa0003f3 	mov	x19, x0
   818c0:	aa1303e0 	mov	x0, x19
   818c4:	97ffff8f 	bl	81700 <CScheduler::GetNextTask()>
   818c8:	b900b260 	str	w0, [x19, #176]
   818cc:	7100501f 	cmp	w0, #0x14
   818d0:	54000121 	b.ne	818f4 <CScheduler::Yield()+0x44>  // b.any
   818d4:	b940a260 	ldr	w0, [x19, #160]
   818d8:	35ffff40 	cbnz	w0, 818c0 <CScheduler::Yield()+0x10>
   818dc:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   818e0:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   818e4:	911da021 	add	x1, x1, #0x768
   818e8:	91238000 	add	x0, x0, #0x8e0
   818ec:	52800762 	mov	w2, #0x3b                  	// #59
   818f0:	94008184 	bl	a1f00 <assertion_failed>
   818f4:	71004c1f 	cmp	w0, #0x13
   818f8:	54000288 	b.hi	81948 <CScheduler::Yield()+0x98>  // b.pmore
   818fc:	f8605a60 	ldr	x0, [x19, w0, uxtw #3]
   81900:	b4000300 	cbz	x0, 81960 <CScheduler::Yield()+0xb0>
   81904:	f9405661 	ldr	x1, [x19, #168]
   81908:	eb00003f 	cmp	x1, x0
   8190c:	54000180 	b.eq	8193c <CScheduler::Yield()+0x8c>  // b.none
   81910:	f9405e62 	ldr	x2, [x19, #184]
   81914:	f9005660 	str	x0, [x19, #168]
   81918:	91005014 	add	x20, x0, #0x14
   8191c:	91005033 	add	x19, x1, #0x14
   81920:	b4000042 	cbz	x2, 81928 <CScheduler::Yield()+0x78>
   81924:	d63f0040 	blr	x2
   81928:	aa1403e1 	mov	x1, x20
   8192c:	aa1303e0 	mov	x0, x19
   81930:	a94153f3 	ldp	x19, x20, [sp, #16]
   81934:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81938:	1400016b 	b	81ee4 <TaskSwitch>
   8193c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81940:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81944:	d65f03c0 	ret
   81948:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8194c:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81950:	911da021 	add	x1, x1, #0x768
   81954:	9123c000 	add	x0, x0, #0x8f0
   81958:	528007c2 	mov	w2, #0x3e                  	// #62
   8195c:	94008169 	bl	a1f00 <assertion_failed>
   81960:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81964:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81968:	911da021 	add	x1, x1, #0x768
   8196c:	91242000 	add	x0, x0, #0x908
   81970:	52800802 	mov	w2, #0x40                  	// #64
   81974:	94008163 	bl	a1f00 <assertion_failed>
   81978:	d503201f 	nop
   8197c:	d503201f 	nop

0000000000081980 <CScheduler::usSleep(unsigned int)>:
   81980:	35000041 	cbnz	w1, 81988 <CScheduler::usSleep(unsigned int)+0x8>
   81984:	d65f03c0 	ret
   81988:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8198c:	910003fd 	mov	x29, sp
   81990:	a90153f3 	stp	x19, x20, [sp, #16]
   81994:	aa0003f4 	mov	x20, x0
   81998:	2a0103f3 	mov	w19, w1
   8199c:	9400a44d 	bl	aaad0 <CTimer::Get()>
   819a0:	9400a114 	bl	a9df0 <CTimer::GetClockTicks()>
   819a4:	f9405681 	ldr	x1, [x20, #168]
   819a8:	b4000181 	cbz	x1, 819d8 <CScheduler::usSleep(unsigned int)+0x58>
   819ac:	b9400822 	ldr	w2, [x1, #8]
   819b0:	7100045f 	cmp	w2, #0x1
   819b4:	540001e1 	b.ne	819f0 <CScheduler::usSleep(unsigned int)+0x70>  // b.any
   819b8:	0b000273 	add	w19, w19, w0
   819bc:	52800080 	mov	w0, #0x4                   	// #4
   819c0:	b9000820 	str	w0, [x1, #8]
   819c4:	aa1403e0 	mov	x0, x20
   819c8:	b9001033 	str	w19, [x1, #16]
   819cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   819d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   819d4:	17ffffb7 	b	818b0 <CScheduler::Yield()>
   819d8:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   819dc:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   819e0:	911da021 	add	x1, x1, #0x768
   819e4:	91246000 	add	x0, x0, #0x918
   819e8:	52800e42 	mov	w2, #0x72                  	// #114
   819ec:	94008145 	bl	a1f00 <assertion_failed>
   819f0:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   819f4:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   819f8:	911da021 	add	x1, x1, #0x768
   819fc:	9124a000 	add	x0, x0, #0x928
   81a00:	52800e62 	mov	w2, #0x73                  	// #115
   81a04:	9400813f 	bl	a1f00 <assertion_failed>
   81a08:	d503201f 	nop
   81a0c:	d503201f 	nop

0000000000081a10 <CScheduler::BlockTask(CTask**, unsigned int)>:
   81a10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81a14:	910003fd 	mov	x29, sp
   81a18:	a90153f3 	stp	x19, x20, [sp, #16]
   81a1c:	f90013f5 	str	x21, [sp, #32]
   81a20:	b4000a21 	cbz	x1, 81b64 <CScheduler::BlockTask(CTask**, unsigned int)+0x154>
   81a24:	aa0103f4 	mov	x20, x1
   81a28:	aa0003f3 	mov	x19, x0
   81a2c:	f9405401 	ldr	x1, [x0, #168]
   81a30:	f940a020 	ldr	x0, [x1, #320]
   81a34:	b5000a40 	cbnz	x0, 81b7c <CScheduler::BlockTask(CTask**, unsigned int)+0x16c>
   81a38:	b9400820 	ldr	w0, [x1, #8]
   81a3c:	7100041f 	cmp	w0, #0x1
   81a40:	54000aa1 	b.ne	81b94 <CScheduler::BlockTask(CTask**, unsigned int)+0x184>  // b.any
   81a44:	b940ce60 	ldr	w0, [x19, #204]
   81a48:	2a0203f5 	mov	w21, w2
   81a4c:	35000580 	cbnz	w0, 81afc <CScheduler::BlockTask(CTask**, unsigned int)+0xec>
   81a50:	f9400280 	ldr	x0, [x20]
   81a54:	f900a020 	str	x0, [x1, #320]
   81a58:	f9000281 	str	x1, [x20]
   81a5c:	350005d5 	cbnz	w21, 81b14 <CScheduler::BlockTask(CTask**, unsigned int)+0x104>
   81a60:	f9405660 	ldr	x0, [x19, #168]
   81a64:	52800041 	mov	w1, #0x2                   	// #2
   81a68:	b9000801 	str	w1, [x0, #8]
   81a6c:	b940ce60 	ldr	w0, [x19, #204]
   81a70:	35000640 	cbnz	w0, 81b38 <CScheduler::BlockTask(CTask**, unsigned int)+0x128>
   81a74:	aa1303e0 	mov	x0, x19
   81a78:	97ffff8e 	bl	818b0 <CScheduler::Yield()>
   81a7c:	b940ce60 	ldr	w0, [x19, #204]
   81a80:	35000660 	cbnz	w0, 81b4c <CScheduler::BlockTask(CTask**, unsigned int)+0x13c>
   81a84:	f9400282 	ldr	x2, [x20]
   81a88:	f9405663 	ldr	x3, [x19, #168]
   81a8c:	b4000902 	cbz	x2, 81bac <CScheduler::BlockTask(CTask**, unsigned int)+0x19c>
   81a90:	eb02007f 	cmp	x3, x2
   81a94:	54000081 	b.ne	81aa4 <CScheduler::BlockTask(CTask**, unsigned int)+0x94>  // b.any
   81a98:	f940a061 	ldr	x1, [x3, #320]
   81a9c:	f9000281 	str	x1, [x20]
   81aa0:	f9405663 	ldr	x3, [x19, #168]
   81aa4:	f940a041 	ldr	x1, [x2, #320]
   81aa8:	b40000c1 	cbz	x1, 81ac0 <CScheduler::BlockTask(CTask**, unsigned int)+0xb0>
   81aac:	eb03003f 	cmp	x1, x3
   81ab0:	540001e0 	b.eq	81aec <CScheduler::BlockTask(CTask**, unsigned int)+0xdc>  // b.none
   81ab4:	aa0103e2 	mov	x2, x1
   81ab8:	f940a041 	ldr	x1, [x2, #320]
   81abc:	b5ffff81 	cbnz	x1, 81aac <CScheduler::BlockTask(CTask**, unsigned int)+0x9c>
   81ac0:	f900a07f 	str	xzr, [x3, #320]
   81ac4:	34000060 	cbz	w0, 81ad0 <CScheduler::BlockTask(CTask**, unsigned int)+0xc0>
   81ac8:	9400ad9e 	bl	ad140 <LeaveCritical>
   81acc:	f9405663 	ldr	x3, [x19, #168]
   81ad0:	b9401060 	ldr	w0, [x3, #16]
   81ad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   81ad8:	7100001f 	cmp	w0, #0x0
   81adc:	f94013f5 	ldr	x21, [sp, #32]
   81ae0:	1a9f17e0 	cset	w0, eq	// eq = none
   81ae4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81ae8:	d65f03c0 	ret
   81aec:	f940a064 	ldr	x4, [x3, #320]
   81af0:	f900a044 	str	x4, [x2, #320]
   81af4:	aa0103e2 	mov	x2, x1
   81af8:	17fffff0 	b	81ab8 <CScheduler::BlockTask(CTask**, unsigned int)+0xa8>
   81afc:	9400ad61 	bl	ad080 <EnterCritical>
   81b00:	f9405661 	ldr	x1, [x19, #168]
   81b04:	f9400280 	ldr	x0, [x20]
   81b08:	f900a020 	str	x0, [x1, #320]
   81b0c:	f9000281 	str	x1, [x20]
   81b10:	34fffa95 	cbz	w21, 81a60 <CScheduler::BlockTask(CTask**, unsigned int)+0x50>
   81b14:	9400a3ef 	bl	aaad0 <CTimer::Get()>
   81b18:	9400a0b6 	bl	a9df0 <CTimer::GetClockTicks()>
   81b1c:	0b0002a2 	add	w2, w21, w0
   81b20:	f9405661 	ldr	x1, [x19, #168]
   81b24:	52800060 	mov	w0, #0x3                   	// #3
   81b28:	b9000820 	str	w0, [x1, #8]
   81b2c:	b940ce60 	ldr	w0, [x19, #204]
   81b30:	b9001022 	str	w2, [x1, #16]
   81b34:	34fffa00 	cbz	w0, 81a74 <CScheduler::BlockTask(CTask**, unsigned int)+0x64>
   81b38:	9400ad82 	bl	ad140 <LeaveCritical>
   81b3c:	aa1303e0 	mov	x0, x19
   81b40:	97ffff5c 	bl	818b0 <CScheduler::Yield()>
   81b44:	b940ce60 	ldr	w0, [x19, #204]
   81b48:	34fff9e0 	cbz	w0, 81a84 <CScheduler::BlockTask(CTask**, unsigned int)+0x74>
   81b4c:	9400ad4d 	bl	ad080 <EnterCritical>
   81b50:	f9400282 	ldr	x2, [x20]
   81b54:	f9405663 	ldr	x3, [x19, #168]
   81b58:	b940ce60 	ldr	w0, [x19, #204]
   81b5c:	b5fff9a2 	cbnz	x2, 81a90 <CScheduler::BlockTask(CTask**, unsigned int)+0x80>
   81b60:	17ffffd8 	b	81ac0 <CScheduler::BlockTask(CTask**, unsigned int)+0xb0>
   81b64:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81b68:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81b6c:	911da021 	add	x1, x1, #0x768
   81b70:	9121a000 	add	x0, x0, #0x868
   81b74:	52802302 	mov	w2, #0x118                 	// #280
   81b78:	940080e2 	bl	a1f00 <assertion_failed>
   81b7c:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81b80:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81b84:	911da021 	add	x1, x1, #0x768
   81b88:	91256000 	add	x0, x0, #0x958
   81b8c:	52802322 	mov	w2, #0x119                 	// #281
   81b90:	940080dc 	bl	a1f00 <assertion_failed>
   81b94:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81b98:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81b9c:	911da021 	add	x1, x1, #0x768
   81ba0:	9124a000 	add	x0, x0, #0x928
   81ba4:	52802362 	mov	w2, #0x11b                 	// #283
   81ba8:	940080d6 	bl	a1f00 <assertion_failed>
   81bac:	f900a07f 	str	xzr, [x3, #320]
   81bb0:	17ffffc8 	b	81ad0 <CScheduler::BlockTask(CTask**, unsigned int)+0xc0>
   81bb4:	d503201f 	nop
   81bb8:	d503201f 	nop
   81bbc:	d503201f 	nop

0000000000081bc0 <CScheduler::Sleep(unsigned int)>:
   81bc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81bc4:	711c203f 	cmp	w1, #0x708
   81bc8:	910003fd 	mov	x29, sp
   81bcc:	a90153f3 	stp	x19, x20, [sp, #16]
   81bd0:	2a0103f3 	mov	w19, w1
   81bd4:	aa0003f4 	mov	x20, x0
   81bd8:	540002a9 	b.ls	81c2c <CScheduler::Sleep(unsigned int)+0x6c>  // b.plast
   81bdc:	a9025bf5 	stp	x21, x22, [sp, #32]
   81be0:	529a4016 	mov	w22, #0xd200                	// #53760
   81be4:	72ad6936 	movk	w22, #0x6b49, lsl #16
   81be8:	52800095 	mov	w21, #0x4                   	// #4
   81bec:	9400a3b9 	bl	aaad0 <CTimer::Get()>
   81bf0:	9400a080 	bl	a9df0 <CTimer::GetClockTicks()>
   81bf4:	f9405682 	ldr	x2, [x20, #168]
   81bf8:	b4000282 	cbz	x2, 81c48 <CScheduler::Sleep(unsigned int)+0x88>
   81bfc:	b9400841 	ldr	w1, [x2, #8]
   81c00:	7100043f 	cmp	w1, #0x1
   81c04:	540002e1 	b.ne	81c60 <CScheduler::Sleep(unsigned int)+0xa0>  // b.any
   81c08:	0b160000 	add	w0, w0, w22
   81c0c:	b9000855 	str	w21, [x2, #8]
   81c10:	b9001040 	str	w0, [x2, #16]
   81c14:	511c2273 	sub	w19, w19, #0x708
   81c18:	aa1403e0 	mov	x0, x20
   81c1c:	97ffff25 	bl	818b0 <CScheduler::Yield()>
   81c20:	711c227f 	cmp	w19, #0x708
   81c24:	54fffe48 	b.hi	81bec <CScheduler::Sleep(unsigned int)+0x2c>  // b.pmore
   81c28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81c2c:	52884801 	mov	w1, #0x4240                	// #16960
   81c30:	72a001e1 	movk	w1, #0xf, lsl #16
   81c34:	aa1403e0 	mov	x0, x20
   81c38:	1b017e61 	mul	w1, w19, w1
   81c3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81c40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81c44:	17ffff4f 	b	81980 <CScheduler::usSleep(unsigned int)>
   81c48:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81c4c:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81c50:	911da021 	add	x1, x1, #0x768
   81c54:	91246000 	add	x0, x0, #0x918
   81c58:	52800e42 	mov	w2, #0x72                  	// #114
   81c5c:	940080a9 	bl	a1f00 <assertion_failed>
   81c60:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81c64:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81c68:	911da021 	add	x1, x1, #0x768
   81c6c:	9124a000 	add	x0, x0, #0x928
   81c70:	52800e62 	mov	w2, #0x73                  	// #115
   81c74:	940080a3 	bl	a1f00 <assertion_failed>
   81c78:	d503201f 	nop
   81c7c:	d503201f 	nop

0000000000081c80 <CScheduler::MsSleep(unsigned int)>:
   81c80:	35000041 	cbnz	w1, 81c88 <CScheduler::MsSleep(unsigned int)+0x8>
   81c84:	d65f03c0 	ret
   81c88:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81c8c:	910003fd 	mov	x29, sp
   81c90:	a90153f3 	stp	x19, x20, [sp, #16]
   81c94:	aa0003f4 	mov	x20, x0
   81c98:	52807d00 	mov	w0, #0x3e8                 	// #1000
   81c9c:	1b007c33 	mul	w19, w1, w0
   81ca0:	35000093 	cbnz	w19, 81cb0 <CScheduler::MsSleep(unsigned int)+0x30>
   81ca4:	a94153f3 	ldp	x19, x20, [sp, #16]
   81ca8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81cac:	d65f03c0 	ret
   81cb0:	9400a388 	bl	aaad0 <CTimer::Get()>
   81cb4:	9400a04f 	bl	a9df0 <CTimer::GetClockTicks()>
   81cb8:	f9405682 	ldr	x2, [x20, #168]
   81cbc:	b4000182 	cbz	x2, 81cec <CScheduler::MsSleep(unsigned int)+0x6c>
   81cc0:	b9400841 	ldr	w1, [x2, #8]
   81cc4:	7100043f 	cmp	w1, #0x1
   81cc8:	540001e1 	b.ne	81d04 <CScheduler::MsSleep(unsigned int)+0x84>  // b.any
   81ccc:	0b000261 	add	w1, w19, w0
   81cd0:	52800080 	mov	w0, #0x4                   	// #4
   81cd4:	b9000840 	str	w0, [x2, #8]
   81cd8:	aa1403e0 	mov	x0, x20
   81cdc:	b9001041 	str	w1, [x2, #16]
   81ce0:	a94153f3 	ldp	x19, x20, [sp, #16]
   81ce4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ce8:	17fffef2 	b	818b0 <CScheduler::Yield()>
   81cec:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81cf0:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81cf4:	911da021 	add	x1, x1, #0x768
   81cf8:	91246000 	add	x0, x0, #0x918
   81cfc:	52800e42 	mov	w2, #0x72                  	// #114
   81d00:	94008080 	bl	a1f00 <assertion_failed>
   81d04:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81d08:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81d0c:	911da021 	add	x1, x1, #0x768
   81d10:	9124a000 	add	x0, x0, #0x928
   81d14:	52800e62 	mov	w2, #0x73                  	// #115
   81d18:	9400807a 	bl	a1f00 <assertion_failed>
   81d1c:	d503201f 	nop

0000000000081d20 <CScheduler::Get()>:
   81d20:	b0000240 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   81d24:	f945c000 	ldr	x0, [x0, #2944]
   81d28:	b4000040 	cbz	x0, 81d30 <CScheduler::Get()+0x10>
   81d2c:	d65f03c0 	ret
   81d30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81d34:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81d38:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81d3c:	910003fd 	mov	x29, sp
   81d40:	911da021 	add	x1, x1, #0x768
   81d44:	91260000 	add	x0, x0, #0x980
   81d48:	52803702 	mov	w2, #0x1b8                 	// #440
   81d4c:	9400806d 	bl	a1f00 <assertion_failed>

0000000000081d50 <CScheduler::ListTasks(CDevice*)>:
   81d50:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   81d54:	910003fd 	mov	x29, sp
   81d58:	b4000b01 	cbz	x1, 81eb8 <CScheduler::ListTasks(CDevice*)+0x168>
   81d5c:	a90363f7 	stp	x23, x24, [sp, #48]
   81d60:	aa0103f8 	mov	x24, x1
   81d64:	aa0003f7 	mov	x23, x0
   81d68:	d00001a1 	adrp	x1, b7000 <_etext+0x49c8>
   81d6c:	9107c021 	add	x1, x1, #0x1f0
   81d70:	f9400303 	ldr	x3, [x24]
   81d74:	91004021 	add	x1, x1, #0x10
   81d78:	aa1803e0 	mov	x0, x24
   81d7c:	d2800342 	mov	x2, #0x1a                  	// #26
   81d80:	f9400c63 	ldr	x3, [x3, #24]
   81d84:	d63f0060 	blr	x3
   81d88:	b940a2e0 	ldr	w0, [x23, #160]
   81d8c:	34000900 	cbz	w0, 81eac <CScheduler::ListTasks(CDevice*)+0x15c>
   81d90:	a90153f3 	stp	x19, x20, [sp, #16]
   81d94:	d2800014 	mov	x20, #0x0                   	// #0
   81d98:	a9025bf5 	stp	x21, x22, [sp, #32]
   81d9c:	910183f5 	add	x21, sp, #0x60
   81da0:	a9046bf9 	stp	x25, x26, [sp, #64]
   81da4:	b000019a 	adrp	x26, b2000 <SErrorStub+0xc>
   81da8:	9127235a 	add	x26, x26, #0x9c8
   81dac:	b0000199 	adrp	x25, b2000 <SErrorStub+0xc>
   81db0:	91264339 	add	x25, x25, #0x990
   81db4:	a90573fb 	stp	x27, x28, [sp, #80]
   81db8:	1400002e 	b	81e70 <CScheduler::ListTasks(CDevice*)+0x120>
   81dbc:	aa1503e0 	mov	x0, x21
   81dc0:	940098d8 	bl	a8120 <CString::CString()>
   81dc4:	f94056e0 	ldr	x0, [x23, #168]
   81dc8:	aa1903fc 	mov	x28, x25
   81dcc:	eb13001f 	cmp	x0, x19
   81dd0:	54000080 	b.eq	81de0 <CScheduler::ListTasks(CDevice*)+0x90>  // b.none
   81dd4:	f0000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   81dd8:	913b4000 	add	x0, x0, #0xed0
   81ddc:	f876d81c 	ldr	x28, [x0, w22, sxtw #3]
   81de0:	52800406 	mov	w6, #0x20                  	// #32
   81de4:	39403261 	ldrb	w1, [x19, #12]
   81de8:	52800a7b 	mov	w27, #0x53                  	// #83
   81dec:	52800a82 	mov	w2, #0x54                  	// #84
   81df0:	aa1303e0 	mov	x0, x19
   81df4:	72000021 	ands	w1, w1, #0x1
   81df8:	1a9b00db 	csel	w27, w6, w27, eq	// eq = none
   81dfc:	71000edf 	cmp	w22, #0x3
   81e00:	1a8210d6 	csel	w22, w6, w2, ne	// ne = any
   81e04:	9400011b 	bl	82270 <CTask::GetName() const>
   81e08:	aa0003e7 	mov	x7, x0
   81e0c:	2a1603e6 	mov	w6, w22
   81e10:	aa1303e3 	mov	x3, x19
   81e14:	2a1b03e5 	mov	w5, w27
   81e18:	aa1c03e4 	mov	x4, x28
   81e1c:	2a1403e2 	mov	w2, w20
   81e20:	aa1a03e1 	mov	x1, x26
   81e24:	aa1503e0 	mov	x0, x21
   81e28:	94009ec6 	bl	a9940 <CString::Format(char const*, ...)>
   81e2c:	f9400301 	ldr	x1, [x24]
   81e30:	aa1503e0 	mov	x0, x21
   81e34:	f9400c36 	ldr	x22, [x1, #24]
   81e38:	940098fe 	bl	a8230 <CString::operator char const*() const>
   81e3c:	aa0003f3 	mov	x19, x0
   81e40:	aa1503e0 	mov	x0, x21
   81e44:	94009947 	bl	a8360 <CString::GetLength() const>
   81e48:	aa0003e2 	mov	x2, x0
   81e4c:	aa1303e1 	mov	x1, x19
   81e50:	aa1803e0 	mov	x0, x24
   81e54:	d63f02c0 	blr	x22
   81e58:	aa1503e0 	mov	x0, x21
   81e5c:	94009875 	bl	a8030 <CString::~CString()>
   81e60:	b940a2e0 	ldr	w0, [x23, #160]
   81e64:	91000694 	add	x20, x20, #0x1
   81e68:	6b14001f 	cmp	w0, w20
   81e6c:	54000189 	b.ls	81e9c <CScheduler::ListTasks(CDevice*)+0x14c>  // b.plast
   81e70:	f8747af3 	ldr	x19, [x23, x20, lsl #3]
   81e74:	b4ffff93 	cbz	x19, 81e64 <CScheduler::ListTasks(CDevice*)+0x114>
   81e78:	b9400a76 	ldr	w22, [x19, #8]
   81e7c:	710016df 	cmp	w22, #0x5
   81e80:	54fff9ed 	b.le	81dbc <CScheduler::ListTasks(CDevice*)+0x6c>
   81e84:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81e88:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81e8c:	911da021 	add	x1, x1, #0x768
   81e90:	9126a000 	add	x0, x0, #0x9a8
   81e94:	52801a82 	mov	w2, #0xd4                  	// #212
   81e98:	9400801a 	bl	a1f00 <assertion_failed>
   81e9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81ea0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81ea4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   81ea8:	a94573fb 	ldp	x27, x28, [sp, #80]
   81eac:	a94363f7 	ldp	x23, x24, [sp, #48]
   81eb0:	a8c87bfd 	ldp	x29, x30, [sp], #128
   81eb4:	d65f03c0 	ret
   81eb8:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81ebc:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81ec0:	911da021 	add	x1, x1, #0x768
   81ec4:	91266000 	add	x0, x0, #0x998
   81ec8:	528018c2 	mov	w2, #0xc6                  	// #198
   81ecc:	a90153f3 	stp	x19, x20, [sp, #16]
   81ed0:	a9025bf5 	stp	x21, x22, [sp, #32]
   81ed4:	a90363f7 	stp	x23, x24, [sp, #48]
   81ed8:	a9046bf9 	stp	x25, x26, [sp, #64]
   81edc:	a90573fb 	stp	x27, x28, [sp, #80]
   81ee0:	94008008 	bl	a1f00 <assertion_failed>

0000000000081ee4 <TaskSwitch>:
   81ee4:	91002000 	add	x0, x0, #0x8
   81ee8:	a8814410 	stp	x16, x17, [x0], #16
   81eec:	a8814c12 	stp	x18, x19, [x0], #16
   81ef0:	a8815414 	stp	x20, x21, [x0], #16
   81ef4:	a8815c16 	stp	x22, x23, [x0], #16
   81ef8:	a8816418 	stp	x24, x25, [x0], #16
   81efc:	a8816c1a 	stp	x26, x27, [x0], #16
   81f00:	a881741c 	stp	x28, x29, [x0], #16
   81f04:	910003e2 	mov	x2, sp
   81f08:	a881081e 	stp	x30, x2, [x0], #16
   81f0c:	6c812408 	stp	d8, d9, [x0], #16
   81f10:	6c812c0a 	stp	d10, d11, [x0], #16
   81f14:	6c81340c 	stp	d12, d13, [x0], #16
   81f18:	6c813c0e 	stp	d14, d15, [x0], #16
   81f1c:	d53b4402 	mrs	x2, fpcr
   81f20:	d53b4423 	mrs	x3, fpsr
   81f24:	a8810c02 	stp	x2, x3, [x0], #16
   81f28:	f8408420 	ldr	x0, [x1], #8
   81f2c:	a8c14430 	ldp	x16, x17, [x1], #16
   81f30:	a8c14c32 	ldp	x18, x19, [x1], #16
   81f34:	a8c15434 	ldp	x20, x21, [x1], #16
   81f38:	a8c15c36 	ldp	x22, x23, [x1], #16
   81f3c:	a8c16438 	ldp	x24, x25, [x1], #16
   81f40:	a8c16c3a 	ldp	x26, x27, [x1], #16
   81f44:	a8c1743c 	ldp	x28, x29, [x1], #16
   81f48:	a8c1083e 	ldp	x30, x2, [x1], #16
   81f4c:	9100005f 	mov	sp, x2
   81f50:	6cc12428 	ldp	d8, d9, [x1], #16
   81f54:	6cc12c2a 	ldp	d10, d11, [x1], #16
   81f58:	6cc1342c 	ldp	d12, d13, [x1], #16
   81f5c:	6cc13c2e 	ldp	d14, d15, [x1], #16
   81f60:	a8c10c22 	ldp	x2, x3, [x1], #16
   81f64:	d51b4402 	msr	fpcr, x2
   81f68:	d51b4423 	msr	fpsr, x3
   81f6c:	d65f03c0 	ret

0000000000081f70 <CTask::Run()>:
   81f70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81f74:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81f78:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   81f7c:	910003fd 	mov	x29, sp
   81f80:	91284021 	add	x1, x1, #0xa10
   81f84:	9135c000 	add	x0, x0, #0xd70
   81f88:	52800ae2 	mov	w2, #0x57                  	// #87
   81f8c:	94007fdd 	bl	a1f00 <assertion_failed>

0000000000081f90 <CTask::TaskEntry(void*)>:
   81f90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f94:	910003fd 	mov	x29, sp
   81f98:	f9000bf3 	str	x19, [sp, #16]
   81f9c:	b4000220 	cbz	x0, 81fe0 <CTask::TaskEntry(void*)+0x50>
   81fa0:	f9400001 	ldr	x1, [x0]
   81fa4:	aa0003f3 	mov	x19, x0
   81fa8:	f9400821 	ldr	x1, [x1, #16]
   81fac:	d63f0020 	blr	x1
   81fb0:	528000a1 	mov	w1, #0x5                   	// #5
   81fb4:	9104c260 	add	x0, x19, #0x130
   81fb8:	b9000a61 	str	w1, [x19, #8]
   81fbc:	94000115 	bl	82410 <CSynchronizationEvent::Set()>
   81fc0:	97ffff58 	bl	81d20 <CScheduler::Get()>
   81fc4:	97fffe3b 	bl	818b0 <CScheduler::Yield()>
   81fc8:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81fcc:	d0000180 	adrp	x0, b3000 <_etext+0x9c8>
   81fd0:	91284021 	add	x1, x1, #0xa10
   81fd4:	9135c000 	add	x0, x0, #0xd70
   81fd8:	528016c2 	mov	w2, #0xb6                  	// #182
   81fdc:	94007fc9 	bl	a1f00 <assertion_failed>
   81fe0:	b0000181 	adrp	x1, b2000 <SErrorStub+0xc>
   81fe4:	b0000180 	adrp	x0, b2000 <SErrorStub+0xc>
   81fe8:	91284021 	add	x1, x1, #0xa10
   81fec:	91288000 	add	x0, x0, #0xa20
   81ff0:	528015c2 	mov	w2, #0xae                  	// #174
   81ff4:	94007fc3 	bl	a1f00 <assertion_failed>
   81ff8:	d503201f 	nop
   81ffc:	d503201f 	nop

0000000000082000 <CTask::CTask(unsigned int, bool)>:
   82000:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82004:	12001c42 	and	w2, w2, #0xff
   82008:	52000042 	eor	w2, w2, #0x1
   8200c:	910003fd 	mov	x29, sp
   82010:	a90153f3 	stp	x19, x20, [sp, #16]
   82014:	aa0003f3 	mov	x19, x0
   82018:	d0000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   8201c:	913c4000 	add	x0, x0, #0xf10
   82020:	9103e274 	add	x20, x19, #0xf8
   82024:	f9000260 	str	x0, [x19]
   82028:	aa1403e0 	mov	x0, x20
   8202c:	b9000a62 	str	w2, [x19, #8]
   82030:	3900327f 	strb	wzr, [x19, #12]
   82034:	b900ee61 	str	w1, [x19, #236]
   82038:	f9007a7f 	str	xzr, [x19, #240]
   8203c:	94009839 	bl	a8120 <CString::CString()>
   82040:	9104c260 	add	x0, x19, #0x130
   82044:	52800001 	mov	w1, #0x0                   	// #0
   82048:	940000da 	bl	823b0 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   8204c:	f900a27f 	str	xzr, [x19, #320]
   82050:	91080261 	add	x1, x19, #0x200
   82054:	b940ee60 	ldr	w0, [x19, #236]
   82058:	a931fc3f 	stp	xzr, xzr, [x1, #-232]
   8205c:	f900967f 	str	xzr, [x19, #296]
   82060:	340002e0 	cbz	w0, 820bc <CTask::CTask(unsigned int, bool)+0xbc>
   82064:	710ffc1f 	cmp	w0, #0x3ff
   82068:	540004a9 	b.ls	820fc <CTask::CTask(unsigned int, bool)+0xfc>  // b.plast
   8206c:	12000c01 	and	w1, w0, #0xf
   82070:	35000521 	cbnz	w1, 82114 <CTask::CTask(unsigned int, bool)+0x114>
   82074:	2a0003e0 	mov	w0, w0
   82078:	9400a6b6 	bl	abb50 <operator new[](unsigned long)>
   8207c:	f9007a60 	str	x0, [x19, #240]
   82080:	d2801b02 	mov	x2, #0xd8                  	// #216
   82084:	91005260 	add	x0, x19, #0x14
   82088:	52800001 	mov	w1, #0x0                   	// #0
   8208c:	9400a437 	bl	ab168 <memset>
   82090:	f8014273 	stur	x19, [x19, #20]
   82094:	f9407a60 	ldr	x0, [x19, #240]
   82098:	b4000260 	cbz	x0, 820e4 <CTask::CTask(unsigned int, bool)+0xe4>
   8209c:	b940ee62 	ldr	w2, [x19, #236]
   820a0:	f0ffffe1 	adrp	x1, 81000 <COscillator::SetModulationVolume(float)+0x10>
   820a4:	913e4021 	add	x1, x1, #0xf90
   820a8:	f808c261 	stur	x1, [x19, #140]
   820ac:	8b020000 	add	x0, x0, x2
   820b0:	f8094260 	stur	x0, [x19, #148]
   820b4:	d53b4400 	mrs	x0, fpcr
   820b8:	f80dc260 	stur	x0, [x19, #220]
   820bc:	aa1303e2 	mov	x2, x19
   820c0:	aa1403e0 	mov	x0, x20
   820c4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   820c8:	9129e021 	add	x1, x1, #0xa78
   820cc:	94009e1d 	bl	a9940 <CString::Format(char const*, ...)>
   820d0:	97ffff14 	bl	81d20 <CScheduler::Get()>
   820d4:	aa1303e1 	mov	x1, x19
   820d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   820dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   820e0:	17fffd08 	b	81500 <CScheduler::AddTask(CTask*)>
   820e4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   820e8:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   820ec:	91284021 	add	x1, x1, #0xa10
   820f0:	9129a000 	add	x0, x0, #0xa68
   820f4:	528013e2 	mov	w2, #0x9f                  	// #159
   820f8:	94007f82 	bl	a1f00 <assertion_failed>
   820fc:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82100:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82104:	91284021 	add	x1, x1, #0xa10
   82108:	9128c000 	add	x0, x0, #0xa30
   8210c:	528004e2 	mov	w2, #0x27                  	// #39
   82110:	94007f7c 	bl	a1f00 <assertion_failed>
   82114:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82118:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   8211c:	91284021 	add	x1, x1, #0xa10
   82120:	91292000 	add	x0, x0, #0xa48
   82124:	52800562 	mov	w2, #0x2b                  	// #43
   82128:	94007f76 	bl	a1f00 <assertion_failed>
   8212c:	d503201f 	nop

0000000000082130 <CTask::Start()>:
   82130:	b9400801 	ldr	w1, [x0, #8]
   82134:	35000081 	cbnz	w1, 82144 <CTask::Start()+0x14>
   82138:	52800021 	mov	w1, #0x1                   	// #1
   8213c:	b9000801 	str	w1, [x0, #8]
   82140:	d65f03c0 	ret
   82144:	39403001 	ldrb	w1, [x0, #12]
   82148:	36000061 	tbz	w1, #0, 82154 <CTask::Start()+0x24>
   8214c:	3900301f 	strb	wzr, [x0, #12]
   82150:	d65f03c0 	ret
   82154:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82158:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8215c:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82160:	910003fd 	mov	x29, sp
   82164:	91284021 	add	x1, x1, #0xa10
   82168:	912a0000 	add	x0, x0, #0xa80
   8216c:	52800922 	mov	w2, #0x49                  	// #73
   82170:	94007f64 	bl	a1f00 <assertion_failed>
   82174:	d503201f 	nop
   82178:	d503201f 	nop
   8217c:	d503201f 	nop

0000000000082180 <CTask::Suspend()>:
   82180:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82184:	910003fd 	mov	x29, sp
   82188:	b9400801 	ldr	w1, [x0, #8]
   8218c:	340000e1 	cbz	w1, 821a8 <CTask::Suspend()+0x28>
   82190:	39403001 	ldrb	w1, [x0, #12]
   82194:	37000161 	tbnz	w1, #0, 821c0 <CTask::Suspend()+0x40>
   82198:	52800021 	mov	w1, #0x1                   	// #1
   8219c:	39003001 	strb	w1, [x0, #12]
   821a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   821a4:	d65f03c0 	ret
   821a8:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   821ac:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   821b0:	91284021 	add	x1, x1, #0xa10
   821b4:	912a4000 	add	x0, x0, #0xa90
   821b8:	52800a02 	mov	w2, #0x50                  	// #80
   821bc:	94007f51 	bl	a1f00 <assertion_failed>
   821c0:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   821c4:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   821c8:	91284021 	add	x1, x1, #0xa10
   821cc:	912aa000 	add	x0, x0, #0xaa8
   821d0:	52800a22 	mov	w2, #0x51                  	// #81
   821d4:	94007f4b 	bl	a1f00 <assertion_failed>
   821d8:	d503201f 	nop
   821dc:	d503201f 	nop

00000000000821e0 <CTask::Terminate()>:
   821e0:	aa0003e1 	mov	x1, x0
   821e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   821e8:	528000a2 	mov	w2, #0x5                   	// #5
   821ec:	910003fd 	mov	x29, sp
   821f0:	9104c000 	add	x0, x0, #0x130
   821f4:	b9000822 	str	w2, [x1, #8]
   821f8:	94000086 	bl	82410 <CSynchronizationEvent::Set()>
   821fc:	97fffec9 	bl	81d20 <CScheduler::Get()>
   82200:	97fffdac 	bl	818b0 <CScheduler::Yield()>
   82204:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82208:	b0000180 	adrp	x0, b3000 <_etext+0x9c8>
   8220c:	91284021 	add	x1, x1, #0xa10
   82210:	9135c000 	add	x0, x0, #0xd70
   82214:	52800c02 	mov	w2, #0x60                  	// #96
   82218:	94007f3a 	bl	a1f00 <assertion_failed>
   8221c:	d503201f 	nop

0000000000082220 <CTask::WaitForTermination()>:
   82220:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82224:	910003fd 	mov	x29, sp
   82228:	f9000bf3 	str	x19, [sp, #16]
   8222c:	aa0003f3 	mov	x19, x0
   82230:	97fffebc 	bl	81d20 <CScheduler::Get()>
   82234:	aa1303e1 	mov	x1, x19
   82238:	97fffc4e 	bl	81370 <CScheduler::IsValidTask(CTask*)>
   8223c:	37000080 	tbnz	w0, #0, 8224c <CTask::WaitForTermination()+0x2c>
   82240:	f9400bf3 	ldr	x19, [sp, #16]
   82244:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82248:	d65f03c0 	ret
   8224c:	9104c260 	add	x0, x19, #0x130
   82250:	f9400bf3 	ldr	x19, [sp, #16]
   82254:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82258:	1400008a 	b	82480 <CSynchronizationEvent::Wait()>
   8225c:	d503201f 	nop

0000000000082260 <CTask::SetName(char const*)>:
   82260:	9103e000 	add	x0, x0, #0xf8
   82264:	140097fb 	b	a8250 <CString::operator=(char const*)>
   82268:	d503201f 	nop
   8226c:	d503201f 	nop

0000000000082270 <CTask::GetName() const>:
   82270:	9103e000 	add	x0, x0, #0xf8
   82274:	140097ef 	b	a8230 <CString::operator char const*() const>
   82278:	d503201f 	nop
   8227c:	d503201f 	nop

0000000000082280 <CTask::SetUserData(void*, unsigned int)>:
   82280:	8b224c02 	add	x2, x0, w2, uxtw #3
   82284:	f9008c41 	str	x1, [x2, #280]
   82288:	d65f03c0 	ret
   8228c:	d503201f 	nop

0000000000082290 <CTask::GetUserData(unsigned int)>:
   82290:	8b214c01 	add	x1, x0, w1, uxtw #3
   82294:	f9408c20 	ldr	x0, [x1, #280]
   82298:	d65f03c0 	ret
   8229c:	d503201f 	nop

00000000000822a0 <CTask::InitializeRegs()>:
   822a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   822a4:	d2801b02 	mov	x2, #0xd8                  	// #216
   822a8:	52800001 	mov	w1, #0x0                   	// #0
   822ac:	910003fd 	mov	x29, sp
   822b0:	f9000bf3 	str	x19, [sp, #16]
   822b4:	aa0003f3 	mov	x19, x0
   822b8:	91005000 	add	x0, x0, #0x14
   822bc:	9400a3ab 	bl	ab168 <memset>
   822c0:	f9407a60 	ldr	x0, [x19, #240]
   822c4:	f8014273 	stur	x19, [x19, #20]
   822c8:	b4000180 	cbz	x0, 822f8 <CTask::InitializeRegs()+0x58>
   822cc:	b940ee62 	ldr	w2, [x19, #236]
   822d0:	f0ffffe1 	adrp	x1, 81000 <COscillator::SetModulationVolume(float)+0x10>
   822d4:	913e4021 	add	x1, x1, #0xf90
   822d8:	f808c261 	stur	x1, [x19, #140]
   822dc:	8b020000 	add	x0, x0, x2
   822e0:	f8094260 	stur	x0, [x19, #148]
   822e4:	d53b4400 	mrs	x0, fpcr
   822e8:	f80dc260 	stur	x0, [x19, #220]
   822ec:	f9400bf3 	ldr	x19, [sp, #16]
   822f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   822f4:	d65f03c0 	ret
   822f8:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   822fc:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82300:	91284021 	add	x1, x1, #0xa10
   82304:	9129a000 	add	x0, x0, #0xa68
   82308:	528013e2 	mov	w2, #0x9f                  	// #159
   8230c:	94007efd 	bl	a1f00 <assertion_failed>

0000000000082310 <CTask::~CTask()>:
   82310:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82314:	d0000221 	adrp	x1, c8000 <__exidx_end+0xb458>
   82318:	913c4021 	add	x1, x1, #0xf10
   8231c:	910003fd 	mov	x29, sp
   82320:	f9000bf3 	str	x19, [sp, #16]
   82324:	aa0003f3 	mov	x19, x0
   82328:	b9400800 	ldr	w0, [x0, #8]
   8232c:	f9000261 	str	x1, [x19]
   82330:	7100141f 	cmp	w0, #0x5
   82334:	540001a1 	b.ne	82368 <CTask::~CTask()+0x58>  // b.any
   82338:	f9407a60 	ldr	x0, [x19, #240]
   8233c:	528000c1 	mov	w1, #0x6                   	// #6
   82340:	b9000a61 	str	w1, [x19, #8]
   82344:	b4000040 	cbz	x0, 8234c <CTask::~CTask()+0x3c>
   82348:	9400a612 	bl	abb90 <operator delete[](void*)>
   8234c:	f9007a7f 	str	xzr, [x19, #240]
   82350:	9104c260 	add	x0, x19, #0x130
   82354:	9400001b 	bl	823c0 <CSynchronizationEvent::~CSynchronizationEvent()>
   82358:	9103e260 	add	x0, x19, #0xf8
   8235c:	f9400bf3 	ldr	x19, [sp, #16]
   82360:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82364:	14009733 	b	a8030 <CString::~CString()>
   82368:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8236c:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82370:	91284021 	add	x1, x1, #0xa10
   82374:	912ae000 	add	x0, x0, #0xab8
   82378:	52800742 	mov	w2, #0x3a                  	// #58
   8237c:	94007ee1 	bl	a1f00 <assertion_failed>

0000000000082380 <CTask::~CTask()>:
   82380:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82384:	910003fd 	mov	x29, sp
   82388:	f9000bf3 	str	x19, [sp, #16]
   8238c:	aa0003f3 	mov	x19, x0
   82390:	97ffffe0 	bl	82310 <CTask::~CTask()>
   82394:	aa1303e0 	mov	x0, x19
   82398:	d2802901 	mov	x1, #0x148                 	// #328
   8239c:	f9400bf3 	ldr	x19, [sp, #16]
   823a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   823a4:	1400a603 	b	abbb0 <operator delete(void*, unsigned long)>
	...

00000000000823b0 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   823b0:	12001c21 	and	w1, w1, #0xff
   823b4:	39000001 	strb	w1, [x0]
   823b8:	f900041f 	str	xzr, [x0, #8]
   823bc:	d65f03c0 	ret

00000000000823c0 <CSynchronizationEvent::~CSynchronizationEvent()>:
   823c0:	f9400400 	ldr	x0, [x0, #8]
   823c4:	b5000040 	cbnz	x0, 823cc <CSynchronizationEvent::~CSynchronizationEvent()+0xc>
   823c8:	d65f03c0 	ret
   823cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   823d0:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   823d4:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   823d8:	910003fd 	mov	x29, sp
   823dc:	912b6021 	add	x1, x1, #0xad8
   823e0:	912be000 	add	x0, x0, #0xaf8
   823e4:	52800462 	mov	w2, #0x23                  	// #35
   823e8:	94007ec6 	bl	a1f00 <assertion_failed>
   823ec:	d503201f 	nop

00000000000823f0 <CSynchronizationEvent::GetState()>:
   823f0:	39400000 	ldrb	w0, [x0]
   823f4:	d65f03c0 	ret
   823f8:	d503201f 	nop
   823fc:	d503201f 	nop

0000000000082400 <CSynchronizationEvent::Clear()>:
   82400:	3900001f 	strb	wzr, [x0]
   82404:	d65f03c0 	ret
   82408:	d503201f 	nop
   8240c:	d503201f 	nop

0000000000082410 <CSynchronizationEvent::Set()>:
   82410:	39400001 	ldrb	w1, [x0]
   82414:	36000041 	tbz	w1, #0, 8241c <CSynchronizationEvent::Set()+0xc>
   82418:	d65f03c0 	ret
   8241c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82420:	910003fd 	mov	x29, sp
   82424:	f9000bf3 	str	x19, [sp, #16]
   82428:	aa0003f3 	mov	x19, x0
   8242c:	52800020 	mov	w0, #0x1                   	// #1
   82430:	38008660 	strb	w0, [x19], #8
   82434:	97fffe3b 	bl	81d20 <CScheduler::Get()>
   82438:	aa1303e1 	mov	x1, x19
   8243c:	f9400bf3 	ldr	x19, [sp, #16]
   82440:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82444:	17fffc7f 	b	81640 <CScheduler::WakeTasks(CTask**)>
   82448:	d503201f 	nop
   8244c:	d503201f 	nop

0000000000082450 <CSynchronizationEvent::Pulse()>:
   82450:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82454:	910003fd 	mov	x29, sp
   82458:	f9000bf3 	str	x19, [sp, #16]
   8245c:	aa0003f3 	mov	x19, x0
   82460:	3800867f 	strb	wzr, [x19], #8
   82464:	97fffe2f 	bl	81d20 <CScheduler::Get()>
   82468:	aa1303e1 	mov	x1, x19
   8246c:	f9400bf3 	ldr	x19, [sp, #16]
   82470:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82474:	17fffc73 	b	81640 <CScheduler::WakeTasks(CTask**)>
   82478:	d503201f 	nop
   8247c:	d503201f 	nop

0000000000082480 <CSynchronizationEvent::Wait()>:
   82480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82484:	910003fd 	mov	x29, sp
   82488:	f9000bf3 	str	x19, [sp, #16]
   8248c:	aa0003f3 	mov	x19, x0
   82490:	39400000 	ldrb	w0, [x0]
   82494:	36000080 	tbz	w0, #0, 824a4 <CSynchronizationEvent::Wait()+0x24>
   82498:	f9400bf3 	ldr	x19, [sp, #16]
   8249c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824a0:	d65f03c0 	ret
   824a4:	97fffe1f 	bl	81d20 <CScheduler::Get()>
   824a8:	91002261 	add	x1, x19, #0x8
   824ac:	52800002 	mov	w2, #0x0                   	// #0
   824b0:	f9400bf3 	ldr	x19, [sp, #16]
   824b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824b8:	17fffd56 	b	81a10 <CScheduler::BlockTask(CTask**, unsigned int)>
   824bc:	d503201f 	nop

00000000000824c0 <CSynchronizationEvent::WaitWithTimeout(unsigned int)>:
   824c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   824c4:	910003fd 	mov	x29, sp
   824c8:	a90153f3 	stp	x19, x20, [sp, #16]
   824cc:	aa0003f3 	mov	x19, x0
   824d0:	39400000 	ldrb	w0, [x0]
   824d4:	2a0103f4 	mov	w20, w1
   824d8:	360000c0 	tbz	w0, #0, 824f0 <CSynchronizationEvent::WaitWithTimeout(unsigned int)+0x30>
   824dc:	7100003f 	cmp	w1, #0x0
   824e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   824e4:	1a9f17e0 	cset	w0, eq	// eq = none
   824e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824ec:	d65f03c0 	ret
   824f0:	97fffe0c 	bl	81d20 <CScheduler::Get()>
   824f4:	2a1403e2 	mov	w2, w20
   824f8:	91002261 	add	x1, x19, #0x8
   824fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   82500:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82504:	17fffd43 	b	81a10 <CScheduler::BlockTask(CTask**, unsigned int)>
	...

0000000000082510 <CSoundBaseDevice::GetRangeMin() const>:
   82510:	b9403800 	ldr	w0, [x0, #56]
   82514:	d65f03c0 	ret
   82518:	d503201f 	nop
   8251c:	d503201f 	nop

0000000000082520 <CSoundBaseDevice::GetRangeMax() const>:
   82520:	b9403c00 	ldr	w0, [x0, #60]
   82524:	d65f03c0 	ret
   82528:	d503201f 	nop
   8252c:	d503201f 	nop

0000000000082530 <CSoundBaseDevice::CSoundBaseDevice()>:
   82530:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82534:	910003fd 	mov	x29, sp
   82538:	f9000bf3 	str	x19, [sp, #16]
   8253c:	aa0003f3 	mov	x19, x0
   82540:	940080fc 	bl	a2930 <CDevice::CDevice()>
   82544:	b00001a0 	adrp	x0, b7000 <_etext+0x49c8>
   82548:	3dc08800 	ldr	q0, [x0, #544]
   8254c:	b00001a1 	adrp	x1, b7000 <_etext+0x49c8>
   82550:	fd411421 	ldr	d1, [x1, #552]
   82554:	528000c2 	mov	w2, #0x6                   	// #6
   82558:	52800021 	mov	w1, #0x1                   	// #1
   8255c:	d0000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   82560:	913ce000 	add	x0, x0, #0xf38
   82564:	f9000260 	str	x0, [x19]
   82568:	b9001262 	str	w2, [x19, #16]
   8256c:	f9001a7f 	str	xzr, [x19, #48]
   82570:	f9006a7f 	str	xzr, [x19, #208]
   82574:	f9006e7f 	str	xzr, [x19, #216]
   82578:	f900727f 	str	xzr, [x19, #224]
   8257c:	b900f261 	str	w1, [x19, #240]
   82580:	f9008e7f 	str	xzr, [x19, #280]
   82584:	f900927f 	str	xzr, [x19, #288]
   82588:	a912fe7f 	stp	xzr, xzr, [x19, #296]
   8258c:	b9013a61 	str	w1, [x19, #312]
   82590:	fd006261 	str	d1, [x19, #192]
   82594:	3c8fc260 	stur	q0, [x19, #252]
   82598:	f9400bf3 	ldr	x19, [sp, #16]
   8259c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   825a0:	d65f03c0 	ret
   825a4:	d503201f 	nop
   825a8:	d503201f 	nop
   825ac:	d503201f 	nop

00000000000825b0 <CSoundBaseDevice::~CSoundBaseDevice()>:
   825b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   825b4:	d0000221 	adrp	x1, c8000 <__exidx_end+0xb458>
   825b8:	913ce021 	add	x1, x1, #0xf38
   825bc:	910003fd 	mov	x29, sp
   825c0:	f9000bf3 	str	x19, [sp, #16]
   825c4:	aa0003f3 	mov	x19, x0
   825c8:	f9406800 	ldr	x0, [x0, #208]
   825cc:	f9000261 	str	x1, [x19]
   825d0:	f900727f 	str	xzr, [x19, #224]
   825d4:	f900967f 	str	xzr, [x19, #296]
   825d8:	b4000040 	cbz	x0, 825e0 <CSoundBaseDevice::~CSoundBaseDevice()+0x30>
   825dc:	9400a56d 	bl	abb90 <operator delete[](void*)>
   825e0:	f9408e60 	ldr	x0, [x19, #280]
   825e4:	f9006a7f 	str	xzr, [x19, #208]
   825e8:	b4000040 	cbz	x0, 825f0 <CSoundBaseDevice::~CSoundBaseDevice()+0x40>
   825ec:	9400a569 	bl	abb90 <operator delete[](void*)>
   825f0:	f9008e7f 	str	xzr, [x19, #280]
   825f4:	aa1303e0 	mov	x0, x19
   825f8:	f9400bf3 	ldr	x19, [sp, #16]
   825fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82600:	14008098 	b	a2860 <CDevice::~CDevice()>
   82604:	d503201f 	nop
   82608:	d503201f 	nop
   8260c:	d503201f 	nop

0000000000082610 <CSoundBaseDevice::~CSoundBaseDevice()>:
   82610:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82614:	d0000221 	adrp	x1, c8000 <__exidx_end+0xb458>
   82618:	913ce021 	add	x1, x1, #0xf38
   8261c:	910003fd 	mov	x29, sp
   82620:	f9000bf3 	str	x19, [sp, #16]
   82624:	aa0003f3 	mov	x19, x0
   82628:	f9406800 	ldr	x0, [x0, #208]
   8262c:	f9000261 	str	x1, [x19]
   82630:	f900727f 	str	xzr, [x19, #224]
   82634:	f900967f 	str	xzr, [x19, #296]
   82638:	b4000040 	cbz	x0, 82640 <CSoundBaseDevice::~CSoundBaseDevice()+0x30>
   8263c:	9400a555 	bl	abb90 <operator delete[](void*)>
   82640:	f9408e60 	ldr	x0, [x19, #280]
   82644:	f9006a7f 	str	xzr, [x19, #208]
   82648:	b4000040 	cbz	x0, 82650 <CSoundBaseDevice::~CSoundBaseDevice()+0x40>
   8264c:	9400a551 	bl	abb90 <operator delete[](void*)>
   82650:	f9008e7f 	str	xzr, [x19, #280]
   82654:	aa1303e0 	mov	x0, x19
   82658:	94008082 	bl	a2860 <CDevice::~CDevice()>
   8265c:	aa1303e0 	mov	x0, x19
   82660:	d2802801 	mov	x1, #0x140                 	// #320
   82664:	f9400bf3 	ldr	x19, [sp, #16]
   82668:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8266c:	1400a551 	b	abbb0 <operator delete(void*, unsigned long)>

0000000000082670 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   82670:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82674:	7100809f 	cmp	w4, #0x20
   82678:	910003fd 	mov	x29, sp
   8267c:	a90153f3 	stp	x19, x20, [sp, #16]
   82680:	f90013f5 	str	x21, [sp, #32]
   82684:	29020c01 	stp	w1, w3, [x0, #16]
   82688:	29031404 	stp	w4, w5, [x0, #24]
   8268c:	54001008 	b.hi	8288c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x21c>  // b.pmore
   82690:	710080bf 	cmp	w5, #0x20
   82694:	54001088 	b.hi	828a4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x234>  // b.pmore
   82698:	7100089f 	cmp	w4, #0x2
   8269c:	12001cc6 	and	w6, w6, #0xff
   826a0:	39008006 	strb	w6, [x0, #32]
   826a4:	aa0003f3 	mov	x19, x0
   826a8:	520000c6 	eor	w6, w6, #0x1
   826ac:	1a9f17e0 	cset	w0, eq	// eq = none
   826b0:	2a060000 	orr	w0, w0, w6
   826b4:	36001680 	tbz	w0, #0, 82984 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x314>
   826b8:	91010275 	add	x21, x19, #0x40
   826bc:	2a0203f4 	mov	w20, w2
   826c0:	aa1503e0 	mov	x0, x21
   826c4:	d2801002 	mov	x2, #0x80                  	// #128
   826c8:	52800001 	mov	w1, #0x0                   	// #0
   826cc:	9400a2a7 	bl	ab168 <memset>
   826d0:	b9401260 	ldr	w0, [x19, #16]
   826d4:	71000c1f 	cmp	w0, #0x3
   826d8:	540006a0 	b.eq	827ac <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x13c>  // b.none
   826dc:	54000248 	b.hi	82724 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb4>  // b.pmore
   826e0:	7100041f 	cmp	w0, #0x1
   826e4:	540009e0 	b.eq	82820 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1b0>  // b.none
   826e8:	7100081f 	cmp	w0, #0x2
   826ec:	540010e1 	b.ne	82908 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x298>  // b.any
   826f0:	29430261 	ldp	w1, w0, [x19, #24]
   826f4:	b00001a3 	adrp	x3, b7000 <_etext+0x49c8>
   826f8:	fd412460 	ldr	d0, [x3, #584]
   826fc:	52800062 	mov	w2, #0x3                   	// #3
   82700:	0b010421 	add	w1, w1, w1, lsl #1
   82704:	0b000400 	add	w0, w0, w0, lsl #1
   82708:	29048662 	stp	w2, w1, [x19, #36]
   8270c:	b9002e60 	str	w0, [x19, #44]
   82710:	fd001e60 	str	d0, [x19, #56]
   82714:	a94153f3 	ldp	x19, x20, [sp, #16]
   82718:	f94013f5 	ldr	x21, [sp, #32]
   8271c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82720:	d65f03c0 	ret
   82724:	7100101f 	cmp	w0, #0x4
   82728:	540003e1 	b.ne	827a4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x134>  // b.any
   8272c:	51000682 	sub	w2, w20, #0x1
   82730:	b9002660 	str	w0, [x19, #36]
   82734:	29070a7f 	stp	wzr, w2, [x19, #56]
   82738:	7100005f 	cmp	w2, #0x0
   8273c:	54000dad 	b.le	828f0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x280>
   82740:	b9401a60 	ldr	w0, [x19, #24]
   82744:	34001180 	cbz	w0, 82974 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x304>
   82748:	13017c42 	asr	w2, w2, #1
   8274c:	b9004262 	str	w2, [x19, #64]
   82750:	7100041f 	cmp	w0, #0x1
   82754:	54000160 	b.eq	82780 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x110>  // b.none
   82758:	52800021 	mov	w1, #0x1                   	// #1
   8275c:	d503201f 	nop
   82760:	b9403e60 	ldr	w0, [x19, #60]
   82764:	0b407c00 	add	w0, w0, w0, lsr #31
   82768:	13017c00 	asr	w0, w0, #1
   8276c:	b8215aa0 	str	w0, [x21, w1, uxtw #2]
   82770:	11000421 	add	w1, w1, #0x1
   82774:	b9401a60 	ldr	w0, [x19, #24]
   82778:	6b01001f 	cmp	w0, w1
   8277c:	54ffff28 	b.hi	82760 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xf0>  // b.pmore
   82780:	b9402662 	ldr	w2, [x19, #36]
   82784:	b9401e61 	ldr	w1, [x19, #28]
   82788:	f94013f5 	ldr	x21, [sp, #32]
   8278c:	1b027c00 	mul	w0, w0, w2
   82790:	1b027c21 	mul	w1, w1, w2
   82794:	29050660 	stp	w0, w1, [x19, #40]
   82798:	a94153f3 	ldp	x19, x20, [sp, #16]
   8279c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   827a0:	d65f03c0 	ret
   827a4:	7100141f 	cmp	w0, #0x5
   827a8:	54000b01 	b.ne	82908 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x298>  // b.any
   827ac:	29430662 	ldp	w2, w1, [x19, #24]
   827b0:	7100141f 	cmp	w0, #0x5
   827b4:	b00001a0 	adrp	x0, b7000 <_etext+0x49c8>
   827b8:	fd412400 	ldr	d0, [x0, #584]
   827bc:	52800083 	mov	w3, #0x4                   	// #4
   827c0:	531e7442 	lsl	w2, w2, #2
   827c4:	531e7420 	lsl	w0, w1, #2
   827c8:	29048a63 	stp	w3, w2, [x19, #36]
   827cc:	b9002e60 	str	w0, [x19, #44]
   827d0:	fd001e60 	str	d0, [x19, #56]
   827d4:	54fffa01 	b.ne	82714 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>  // b.any
   827d8:	b9401660 	ldr	w0, [x19, #20]
   827dc:	52977001 	mov	w1, #0xbb80                	// #48000
   827e0:	6b01001f 	cmp	w0, w1
   827e4:	54000a40 	b.eq	8292c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2bc>  // b.none
   827e8:	54000368 	b.hi	82854 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1e4>  // b.pmore
   827ec:	528fa001 	mov	w1, #0x7d00                	// #32000
   827f0:	6b01001f 	cmp	w0, w1
   827f4:	54000960 	b.eq	82920 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2b0>  // b.none
   827f8:	54000a08 	b.hi	82938 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2c8>  // b.pmore
   827fc:	528ac441 	mov	w1, #0x5622                	// #22050
   82800:	6b01001f 	cmp	w0, w1
   82804:	540005c0 	b.eq	828bc <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x24c>  // b.none
   82808:	528bb801 	mov	w1, #0x5dc0                	// #24000
   8280c:	6b01001f 	cmp	w0, w1
   82810:	54000c61 	b.ne	8299c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x32c>  // b.any
   82814:	52801360 	mov	w0, #0x9b                  	// #155
   82818:	528000c3 	mov	w3, #0x6                   	// #6
   8281c:	14000029 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   82820:	b00001a0 	adrp	x0, b7000 <_etext+0x49c8>
   82824:	fd412000 	ldr	d0, [x0, #576]
   82828:	29430261 	ldp	w1, w0, [x19, #24]
   8282c:	52800042 	mov	w2, #0x2                   	// #2
   82830:	f94013f5 	ldr	x21, [sp, #32]
   82834:	0b010021 	add	w1, w1, w1
   82838:	0b000000 	add	w0, w0, w0
   8283c:	29048662 	stp	w2, w1, [x19, #36]
   82840:	b9002e60 	str	w0, [x19, #44]
   82844:	fd001e60 	str	d0, [x19, #56]
   82848:	a94153f3 	ldp	x19, x20, [sp, #16]
   8284c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82850:	d65f03c0 	ret
   82854:	52962201 	mov	w1, #0xb110                	// #45328
   82858:	72a00041 	movk	w1, #0x2, lsl #16
   8285c:	6b01001f 	cmp	w0, w1
   82860:	54000840 	b.eq	82968 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2f8>  // b.none
   82864:	54000768 	b.hi	82950 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2e0>  // b.pmore
   82868:	51405401 	sub	w1, w0, #0x15, lsl #12
   8286c:	71222021 	subs	w1, w1, #0x888
   82870:	540003a0 	b.eq	828e4 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x274>  // b.none
   82874:	51405c00 	sub	w0, w0, #0x17, lsl #12
   82878:	711c0000 	subs	w0, w0, #0x700
   8287c:	54000901 	b.ne	8299c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x32c>  // b.any
   82880:	52800b60 	mov	w0, #0x5b                  	// #91
   82884:	52800143 	mov	w3, #0xa                   	// #10
   82888:	1400000e 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   8288c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82890:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82894:	912c4021 	add	x1, x1, #0xb10
   82898:	912ca000 	add	x0, x0, #0xb28
   8289c:	52800b62 	mov	w2, #0x5b                  	// #91
   828a0:	94007d98 	bl	a1f00 <assertion_failed>
   828a4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   828a8:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   828ac:	912c4021 	add	x1, x1, #0xb10
   828b0:	912d4000 	add	x0, x0, #0xb50
   828b4:	52800b82 	mov	w2, #0x5c                  	// #92
   828b8:	94007d92 	bl	a1f00 <assertion_failed>
   828bc:	52801760 	mov	w0, #0xbb                  	// #187
   828c0:	52800081 	mov	w1, #0x4                   	// #4
   828c4:	7901ea61 	strh	w1, [x19, #244]
   828c8:	3903da7f 	strb	wzr, [x19, #246]
   828cc:	3903de63 	strb	w3, [x19, #247]
   828d0:	3903e260 	strb	w0, [x19, #248]
   828d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   828d8:	f94013f5 	ldr	x21, [sp, #32]
   828dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   828e0:	d65f03c0 	ret
   828e4:	52800f60 	mov	w0, #0x7b                  	// #123
   828e8:	52800103 	mov	w3, #0x8                   	// #8
   828ec:	17fffff5 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   828f0:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   828f4:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   828f8:	912c4021 	add	x1, x1, #0xb10
   828fc:	912ea000 	add	x0, x0, #0xba8
   82900:	52800f82 	mov	w2, #0x7c                  	// #124
   82904:	94007d7f 	bl	a1f00 <assertion_failed>
   82908:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   8290c:	b0000180 	adrp	x0, b3000 <_etext+0x9c8>
   82910:	912c4021 	add	x1, x1, #0xb10
   82914:	9135c000 	add	x0, x0, #0xd70
   82918:	528010c2 	mov	w2, #0x86                  	// #134
   8291c:	94007d79 	bl	a1f00 <assertion_failed>
   82920:	52801960 	mov	w0, #0xcb                  	// #203
   82924:	52800063 	mov	w3, #0x3                   	// #3
   82928:	17ffffe6 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   8292c:	52801b60 	mov	w0, #0xdb                  	// #219
   82930:	52800043 	mov	w3, #0x2                   	// #2
   82934:	17ffffe3 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   82938:	52958881 	mov	w1, #0xac44                	// #44100
   8293c:	6b01001f 	cmp	w0, w1
   82940:	540002e1 	b.ne	8299c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x32c>  // b.any
   82944:	52801f60 	mov	w0, #0xfb                  	// #251
   82948:	52800003 	mov	w3, #0x0                   	// #0
   8294c:	17ffffdd 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   82950:	5140b800 	sub	w0, w0, #0x2e, lsl #12
   82954:	71380000 	subs	w0, w0, #0xe00
   82958:	54000221 	b.ne	8299c <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x32c>  // b.any
   8295c:	52800360 	mov	w0, #0x1b                  	// #27
   82960:	528001c3 	mov	w3, #0xe                   	// #14
   82964:	17ffffd7 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   82968:	52800760 	mov	w0, #0x3b                  	// #59
   8296c:	52800183 	mov	w3, #0xc                   	// #12
   82970:	17ffffd4 	b	828c0 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x250>
   82974:	b9401e60 	ldr	w0, [x19, #28]
   82978:	531e7400 	lsl	w0, w0, #2
   8297c:	2905027f 	stp	wzr, w0, [x19, #40]
   82980:	17ffff65 	b	82714 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>
   82984:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82988:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   8298c:	912c4021 	add	x1, x1, #0xb10
   82990:	912de000 	add	x0, x0, #0xb78
   82994:	52800be2 	mov	w2, #0x5f                  	// #95
   82998:	94007d5a 	bl	a1f00 <assertion_failed>
   8299c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   829a0:	b0000180 	adrp	x0, b3000 <_etext+0x9c8>
   829a4:	912c4021 	add	x1, x1, #0xb10
   829a8:	9135c000 	add	x0, x0, #0xd70
   829ac:	528013a2 	mov	w2, #0x9d                  	// #157
   829b0:	94007d54 	bl	a1f00 <assertion_failed>
   829b4:	d503201f 	nop
   829b8:	d503201f 	nop
   829bc:	d503201f 	nop

00000000000829c0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>:
   829c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   829c4:	910003fd 	mov	x29, sp
   829c8:	a90153f3 	stp	x19, x20, [sp, #16]
   829cc:	aa0003f3 	mov	x19, x0
   829d0:	2a0103f4 	mov	w20, w1
   829d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   829d8:	2a0203f5 	mov	w21, w2
   829dc:	2a0303f6 	mov	w22, w3
   829e0:	f9001bf7 	str	x23, [sp, #48]
   829e4:	12001c97 	and	w23, w4, #0xff
   829e8:	94007fd2 	bl	a2930 <CDevice::CDevice()>
   829ec:	f9001a7f 	str	xzr, [x19, #48]
   829f0:	b00001a0 	adrp	x0, b7000 <_etext+0x49c8>
   829f4:	3dc08800 	ldr	q0, [x0, #544]
   829f8:	b00001a1 	adrp	x1, b7000 <_etext+0x49c8>
   829fc:	fd411421 	ldr	d1, [x1, #552]
   82a00:	52800027 	mov	w7, #0x1                   	// #1
   82a04:	528000c1 	mov	w1, #0x6                   	// #6
   82a08:	d0000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   82a0c:	913ce000 	add	x0, x0, #0xf38
   82a10:	f9000260 	str	x0, [x19]
   82a14:	b9001261 	str	w1, [x19, #16]
   82a18:	2a1703e6 	mov	w6, w23
   82a1c:	f9006a7f 	str	xzr, [x19, #208]
   82a20:	2a1603e3 	mov	w3, w22
   82a24:	f9006e7f 	str	xzr, [x19, #216]
   82a28:	2a1503e2 	mov	w2, w21
   82a2c:	f900727f 	str	xzr, [x19, #224]
   82a30:	2a1403e1 	mov	w1, w20
   82a34:	b900f267 	str	w7, [x19, #240]
   82a38:	aa1303e0 	mov	x0, x19
   82a3c:	f9008e7f 	str	xzr, [x19, #280]
   82a40:	52800045 	mov	w5, #0x2                   	// #2
   82a44:	f900927f 	str	xzr, [x19, #288]
   82a48:	2a0503e4 	mov	w4, w5
   82a4c:	a912fe7f 	stp	xzr, xzr, [x19, #296]
   82a50:	b9013a67 	str	w7, [x19, #312]
   82a54:	fd006261 	str	d1, [x19, #192]
   82a58:	3c8fc260 	stur	q0, [x19, #252]
   82a5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82a64:	f9401bf7 	ldr	x23, [sp, #48]
   82a68:	a8c47bfd 	ldp	x29, x30, [sp], #64
   82a6c:	17ffff01 	b	82670 <CSoundBaseDevice::Setup(TSoundFormat, unsigned int, unsigned int, unsigned int, unsigned int, bool)>

0000000000082a70 <CSoundBaseDevice::GetHWTXChannels() const>:
   82a70:	b9401800 	ldr	w0, [x0, #24]
   82a74:	d65f03c0 	ret
   82a78:	d503201f 	nop
   82a7c:	d503201f 	nop

0000000000082a80 <CSoundBaseDevice::GetHWRXChannels() const>:
   82a80:	b9401c00 	ldr	w0, [x0, #28]
   82a84:	d65f03c0 	ret
   82a88:	d503201f 	nop
   82a8c:	d503201f 	nop

0000000000082a90 <CSoundBaseDevice::AllocateQueue(unsigned int)>:
   82a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82a94:	910003fd 	mov	x29, sp
   82a98:	f9000bf3 	str	x19, [sp, #16]
   82a9c:	aa0003f3 	mov	x19, x0
   82aa0:	f9406800 	ldr	x0, [x0, #208]
   82aa4:	b5000340 	cbnz	x0, 82b0c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x7c>
   82aa8:	51000420 	sub	w0, w1, #0x1
   82aac:	710f9c1f 	cmp	w0, #0x3e7
   82ab0:	540003a8 	b.hi	82b24 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x94>  // b.pmore
   82ab4:	b9401663 	ldr	w3, [x19, #20]
   82ab8:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   82abc:	72a20c40 	movk	w0, #0x1062, lsl #16
   82ac0:	b9402a62 	ldr	w2, [x19, #40]
   82ac4:	1b037c42 	mul	w2, w2, w3
   82ac8:	1b017c41 	mul	w1, w2, w1
   82acc:	110f9c21 	add	w1, w1, #0x3e7
   82ad0:	9ba07c21 	umull	x1, w1, w0
   82ad4:	d366fc21 	lsr	x1, x1, #38
   82ad8:	11000421 	add	w1, w1, #0x1
   82adc:	b9003261 	str	w1, [x19, #48]
   82ae0:	92405c20 	and	x0, x1, #0xffffff
   82ae4:	9400a41b 	bl	abb50 <operator new[](unsigned long)>
   82ae8:	aa0003e2 	mov	x2, x0
   82aec:	b9403261 	ldr	w1, [x19, #48]
   82af0:	52800020 	mov	w0, #0x1                   	// #1
   82af4:	f9006a62 	str	x2, [x19, #208]
   82af8:	1ac02421 	lsr	w1, w1, w0
   82afc:	b9003661 	str	w1, [x19, #52]
   82b00:	f9400bf3 	ldr	x19, [sp, #16]
   82b04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82b08:	d65f03c0 	ret
   82b0c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82b10:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82b14:	912c4021 	add	x1, x1, #0xb10
   82b18:	912ee000 	add	x0, x0, #0xbb8
   82b1c:	52801822 	mov	w2, #0xc1                  	// #193
   82b20:	94007cf8 	bl	a1f00 <assertion_failed>
   82b24:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82b28:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82b2c:	912c4021 	add	x1, x1, #0xb10
   82b30:	912f2000 	add	x0, x0, #0xbc8
   82b34:	52801842 	mov	w2, #0xc2                  	// #194
   82b38:	94007cf2 	bl	a1f00 <assertion_failed>
   82b3c:	d503201f 	nop

0000000000082b40 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)>:
   82b40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82b44:	910003fd 	mov	x29, sp
   82b48:	f9000bf3 	str	x19, [sp, #16]
   82b4c:	aa0003f3 	mov	x19, x0
   82b50:	f9406800 	ldr	x0, [x0, #208]
   82b54:	b5000300 	cbnz	x0, 82bb4 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x74>
   82b58:	34000221 	cbz	w1, 82b9c <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x5c>
   82b5c:	b9401660 	ldr	w0, [x19, #20]
   82b60:	6b01001f 	cmp	w0, w1
   82b64:	540001c3 	b.cc	82b9c <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x5c>  // b.lo, b.ul, b.last
   82b68:	b9402a60 	ldr	w0, [x19, #40]
   82b6c:	1b007c21 	mul	w1, w1, w0
   82b70:	11000420 	add	w0, w1, #0x1
   82b74:	b9003260 	str	w0, [x19, #48]
   82b78:	9400a3f6 	bl	abb50 <operator new[](unsigned long)>
   82b7c:	f9006a60 	str	x0, [x19, #208]
   82b80:	b9403261 	ldr	w1, [x19, #48]
   82b84:	52800020 	mov	w0, #0x1                   	// #1
   82b88:	53017c21 	lsr	w1, w1, #1
   82b8c:	b9003661 	str	w1, [x19, #52]
   82b90:	f9400bf3 	ldr	x19, [sp, #16]
   82b94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82b98:	d65f03c0 	ret
   82b9c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82ba0:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82ba4:	912c4021 	add	x1, x1, #0xb10
   82ba8:	912fc000 	add	x0, x0, #0xbf0
   82bac:	52801aa2 	mov	w2, #0xd5                  	// #213
   82bb0:	94007cd4 	bl	a1f00 <assertion_failed>
   82bb4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82bb8:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82bbc:	912c4021 	add	x1, x1, #0xb10
   82bc0:	912ee000 	add	x0, x0, #0xbb8
   82bc4:	52801a82 	mov	w2, #0xd4                  	// #212
   82bc8:	94007cce 	bl	a1f00 <assertion_failed>
   82bcc:	d503201f 	nop

0000000000082bd0 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>:
   82bd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82bd4:	7100143f 	cmp	w1, #0x5
   82bd8:	910003fd 	mov	x29, sp
   82bdc:	5400038c 	b.gt	82c4c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x7c>
   82be0:	b900c001 	str	w1, [x0, #192]
   82be4:	51000443 	sub	w3, w2, #0x1
   82be8:	71007c7f 	cmp	w3, #0x1f
   82bec:	540003c8 	b.hi	82c64 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x94>  // b.pmore
   82bf0:	b900c402 	str	w2, [x0, #196]
   82bf4:	7100083f 	cmp	w1, #0x2
   82bf8:	54000200 	b.eq	82c38 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x68>  // b.none
   82bfc:	54000108 	b.hi	82c1c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x4c>  // b.pmore
   82c00:	52800023 	mov	w3, #0x1                   	// #1
   82c04:	34000061 	cbz	w1, 82c10 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x40>
   82c08:	0b020042 	add	w2, w2, w2
   82c0c:	52800043 	mov	w3, #0x2                   	// #2
   82c10:	29190803 	stp	w3, w2, [x0, #200]
   82c14:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82c18:	d65f03c0 	ret
   82c1c:	71000c3f 	cmp	w1, #0x3
   82c20:	540002e1 	b.ne	82c7c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xac>  // b.any
   82c24:	531e7442 	lsl	w2, w2, #2
   82c28:	52800083 	mov	w3, #0x4                   	// #4
   82c2c:	29190803 	stp	w3, w2, [x0, #200]
   82c30:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82c34:	d65f03c0 	ret
   82c38:	0b020442 	add	w2, w2, w2, lsl #1
   82c3c:	52800063 	mov	w3, #0x3                   	// #3
   82c40:	29190803 	stp	w3, w2, [x0, #200]
   82c44:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82c48:	d65f03c0 	ret
   82c4c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82c50:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82c54:	912c4021 	add	x1, x1, #0xb10
   82c58:	9130a000 	add	x0, x0, #0xc28
   82c5c:	52801ce2 	mov	w2, #0xe7                  	// #231
   82c60:	94007ca8 	bl	a1f00 <assertion_failed>
   82c64:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82c68:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82c6c:	912c4021 	add	x1, x1, #0xb10
   82c70:	91312000 	add	x0, x0, #0xc48
   82c74:	52801d42 	mov	w2, #0xea                  	// #234
   82c78:	94007ca2 	bl	a1f00 <assertion_failed>
   82c7c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82c80:	b0000180 	adrp	x0, b3000 <_etext+0x9c8>
   82c84:	912c4021 	add	x1, x1, #0xb10
   82c88:	9135c000 	add	x0, x0, #0xd70
   82c8c:	52802002 	mov	w2, #0x100                 	// #256
   82c90:	94007c9c 	bl	a1f00 <assertion_failed>
   82c94:	d503201f 	nop
   82c98:	d503201f 	nop
   82c9c:	d503201f 	nop

0000000000082ca0 <CSoundBaseDevice::GetQueueSizeFrames()>:
   82ca0:	b9403001 	ldr	w1, [x0, #48]
   82ca4:	34000081 	cbz	w1, 82cb4 <CSoundBaseDevice::GetQueueSizeFrames()+0x14>
   82ca8:	b9402800 	ldr	w0, [x0, #40]
   82cac:	1ac00820 	udiv	w0, w1, w0
   82cb0:	d65f03c0 	ret
   82cb4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82cb8:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82cbc:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82cc0:	910003fd 	mov	x29, sp
   82cc4:	912c4021 	add	x1, x1, #0xb10
   82cc8:	91320000 	add	x0, x0, #0xc80
   82ccc:	52802fc2 	mov	w2, #0x17e                 	// #382
   82cd0:	94007c8c 	bl	a1f00 <assertion_failed>
   82cd4:	d503201f 	nop
   82cd8:	d503201f 	nop
   82cdc:	d503201f 	nop

0000000000082ce0 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)>:
   82ce0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82ce4:	910003fd 	mov	x29, sp
   82ce8:	f9407003 	ldr	x3, [x0, #224]
   82cec:	b50000c3 	cbnz	x3, 82d04 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x24>
   82cf0:	f9007001 	str	x1, [x0, #224]
   82cf4:	b4000141 	cbz	x1, 82d1c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x3c>
   82cf8:	f9007402 	str	x2, [x0, #232]
   82cfc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82d00:	d65f03c0 	ret
   82d04:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82d08:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82d0c:	912c4021 	add	x1, x1, #0xb10
   82d10:	91326000 	add	x0, x0, #0xc98
   82d14:	52803222 	mov	w2, #0x191                 	// #401
   82d18:	94007c7a 	bl	a1f00 <assertion_failed>
   82d1c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82d20:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82d24:	912c4021 	add	x1, x1, #0xb10
   82d28:	9132c000 	add	x0, x0, #0xcb0
   82d2c:	52803262 	mov	w2, #0x193                 	// #403
   82d30:	94007c74 	bl	a1f00 <assertion_failed>
   82d34:	d503201f 	nop
   82d38:	d503201f 	nop
   82d3c:	d503201f 	nop

0000000000082d40 <CSoundBaseDevice::AreChannelsSwapped() const>:
   82d40:	39408000 	ldrb	w0, [x0, #32]
   82d44:	d65f03c0 	ret
   82d48:	d503201f 	nop
   82d4c:	d503201f 	nop

0000000000082d50 <CSoundBaseDevice::AllocateReadQueue(unsigned int)>:
   82d50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82d54:	910003fd 	mov	x29, sp
   82d58:	f9000bf3 	str	x19, [sp, #16]
   82d5c:	aa0003f3 	mov	x19, x0
   82d60:	f9408c00 	ldr	x0, [x0, #280]
   82d64:	b5000340 	cbnz	x0, 82dcc <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x7c>
   82d68:	51000420 	sub	w0, w1, #0x1
   82d6c:	710f9c1f 	cmp	w0, #0x3e7
   82d70:	540003a8 	b.hi	82de4 <CSoundBaseDevice::AllocateReadQueue(unsigned int)+0x94>  // b.pmore
   82d74:	b9401663 	ldr	w3, [x19, #20]
   82d78:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   82d7c:	72a20c40 	movk	w0, #0x1062, lsl #16
   82d80:	b9402e62 	ldr	w2, [x19, #44]
   82d84:	1b037c42 	mul	w2, w2, w3
   82d88:	1b017c41 	mul	w1, w2, w1
   82d8c:	110f9c21 	add	w1, w1, #0x3e7
   82d90:	9ba07c21 	umull	x1, w1, w0
   82d94:	d366fc21 	lsr	x1, x1, #38
   82d98:	11000421 	add	w1, w1, #0x1
   82d9c:	b900fe61 	str	w1, [x19, #252]
   82da0:	92405c20 	and	x0, x1, #0xffffff
   82da4:	9400a36b 	bl	abb50 <operator new[](unsigned long)>
   82da8:	aa0003e2 	mov	x2, x0
   82dac:	b940fe61 	ldr	w1, [x19, #252]
   82db0:	52800020 	mov	w0, #0x1                   	// #1
   82db4:	f9008e62 	str	x2, [x19, #280]
   82db8:	1ac02421 	lsr	w1, w1, w0
   82dbc:	b9010261 	str	w1, [x19, #256]
   82dc0:	f9400bf3 	ldr	x19, [sp, #16]
   82dc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82dc8:	d65f03c0 	ret
   82dcc:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82dd0:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82dd4:	912c4021 	add	x1, x1, #0xb10
   82dd8:	91332000 	add	x0, x0, #0xcc8
   82ddc:	52803422 	mov	w2, #0x1a1                 	// #417
   82de0:	94007c48 	bl	a1f00 <assertion_failed>
   82de4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82de8:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82dec:	912c4021 	add	x1, x1, #0xb10
   82df0:	912f2000 	add	x0, x0, #0xbc8
   82df4:	52803442 	mov	w2, #0x1a2                 	// #418
   82df8:	94007c42 	bl	a1f00 <assertion_failed>
   82dfc:	d503201f 	nop

0000000000082e00 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)>:
   82e00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82e04:	910003fd 	mov	x29, sp
   82e08:	f9000bf3 	str	x19, [sp, #16]
   82e0c:	aa0003f3 	mov	x19, x0
   82e10:	f9408c00 	ldr	x0, [x0, #280]
   82e14:	b5000300 	cbnz	x0, 82e74 <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x74>
   82e18:	34000221 	cbz	w1, 82e5c <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x5c>
   82e1c:	b9401660 	ldr	w0, [x19, #20]
   82e20:	6b01001f 	cmp	w0, w1
   82e24:	540001c3 	b.cc	82e5c <CSoundBaseDevice::AllocateReadQueueFrames(unsigned int)+0x5c>  // b.lo, b.ul, b.last
   82e28:	b9402e60 	ldr	w0, [x19, #44]
   82e2c:	1b007c21 	mul	w1, w1, w0
   82e30:	11000420 	add	w0, w1, #0x1
   82e34:	b900fe60 	str	w0, [x19, #252]
   82e38:	9400a346 	bl	abb50 <operator new[](unsigned long)>
   82e3c:	f9008e60 	str	x0, [x19, #280]
   82e40:	b940fe61 	ldr	w1, [x19, #252]
   82e44:	52800020 	mov	w0, #0x1                   	// #1
   82e48:	53017c21 	lsr	w1, w1, #1
   82e4c:	b9010261 	str	w1, [x19, #256]
   82e50:	f9400bf3 	ldr	x19, [sp, #16]
   82e54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82e58:	d65f03c0 	ret
   82e5c:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82e60:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82e64:	912c4021 	add	x1, x1, #0xb10
   82e68:	912fc000 	add	x0, x0, #0xbf0
   82e6c:	528036a2 	mov	w2, #0x1b5                 	// #437
   82e70:	94007c24 	bl	a1f00 <assertion_failed>
   82e74:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82e78:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82e7c:	912c4021 	add	x1, x1, #0xb10
   82e80:	91332000 	add	x0, x0, #0xcc8
   82e84:	52803682 	mov	w2, #0x1b4                 	// #436
   82e88:	94007c1e 	bl	a1f00 <assertion_failed>
   82e8c:	d503201f 	nop

0000000000082e90 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)>:
   82e90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82e94:	7100143f 	cmp	w1, #0x5
   82e98:	910003fd 	mov	x29, sp
   82e9c:	5400042c 	b.gt	82f20 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x90>
   82ea0:	b9010401 	str	w1, [x0, #260]
   82ea4:	51000444 	sub	w4, w2, #0x1
   82ea8:	71007c9f 	cmp	w4, #0x1f
   82eac:	54000468 	b.hi	82f38 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xa8>  // b.pmore
   82eb0:	12001c63 	and	w3, w3, #0xff
   82eb4:	b9010802 	str	w2, [x0, #264]
   82eb8:	39043003 	strb	w3, [x0, #268]
   82ebc:	7100083f 	cmp	w1, #0x2
   82ec0:	54000240 	b.eq	82f08 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x78>  // b.none
   82ec4:	54000128 	b.hi	82ee8 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x58>  // b.pmore
   82ec8:	52800023 	mov	w3, #0x1                   	// #1
   82ecc:	34000061 	cbz	w1, 82ed8 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0x48>
   82ed0:	0b020042 	add	w2, w2, w2
   82ed4:	52800043 	mov	w3, #0x2                   	// #2
   82ed8:	b9011003 	str	w3, [x0, #272]
   82edc:	b9011402 	str	w2, [x0, #276]
   82ee0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82ee4:	d65f03c0 	ret
   82ee8:	71000c3f 	cmp	w1, #0x3
   82eec:	54000321 	b.ne	82f50 <CSoundBaseDevice::SetReadFormat(TSoundFormat, unsigned int, bool)+0xc0>  // b.any
   82ef0:	531e7442 	lsl	w2, w2, #2
   82ef4:	52800083 	mov	w3, #0x4                   	// #4
   82ef8:	b9011003 	str	w3, [x0, #272]
   82efc:	b9011402 	str	w2, [x0, #276]
   82f00:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82f04:	d65f03c0 	ret
   82f08:	0b020442 	add	w2, w2, w2, lsl #1
   82f0c:	52800063 	mov	w3, #0x3                   	// #3
   82f10:	b9011003 	str	w3, [x0, #272]
   82f14:	b9011402 	str	w2, [x0, #276]
   82f18:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82f1c:	d65f03c0 	ret
   82f20:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82f24:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82f28:	912c4021 	add	x1, x1, #0xb10
   82f2c:	9130a000 	add	x0, x0, #0xc28
   82f30:	52803902 	mov	w2, #0x1c8                 	// #456
   82f34:	94007bf3 	bl	a1f00 <assertion_failed>
   82f38:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82f3c:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82f40:	912c4021 	add	x1, x1, #0xb10
   82f44:	91312000 	add	x0, x0, #0xc48
   82f48:	52803962 	mov	w2, #0x1cb                 	// #459
   82f4c:	94007bed 	bl	a1f00 <assertion_failed>
   82f50:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82f54:	b0000180 	adrp	x0, b3000 <_etext+0x9c8>
   82f58:	912c4021 	add	x1, x1, #0xb10
   82f5c:	9135c000 	add	x0, x0, #0xd70
   82f60:	52803c42 	mov	w2, #0x1e2                 	// #482
   82f64:	94007be7 	bl	a1f00 <assertion_failed>
   82f68:	d503201f 	nop
   82f6c:	d503201f 	nop

0000000000082f70 <CSoundBaseDevice::GetReadQueueSizeFrames()>:
   82f70:	b940fc01 	ldr	w1, [x0, #252]
   82f74:	34000081 	cbz	w1, 82f84 <CSoundBaseDevice::GetReadQueueSizeFrames()+0x14>
   82f78:	b9402c00 	ldr	w0, [x0, #44]
   82f7c:	1ac00820 	udiv	w0, w1, w0
   82f80:	d65f03c0 	ret
   82f84:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82f88:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82f8c:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82f90:	910003fd 	mov	x29, sp
   82f94:	912c4021 	add	x1, x1, #0xb10
   82f98:	91338000 	add	x0, x0, #0xce0
   82f9c:	52804ba2 	mov	w2, #0x25d                 	// #605
   82fa0:	94007bd8 	bl	a1f00 <assertion_failed>
   82fa4:	d503201f 	nop
   82fa8:	d503201f 	nop
   82fac:	d503201f 	nop

0000000000082fb0 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)>:
   82fb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   82fb4:	910003fd 	mov	x29, sp
   82fb8:	f9409403 	ldr	x3, [x0, #296]
   82fbc:	b50000c3 	cbnz	x3, 82fd4 <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x24>
   82fc0:	f9009401 	str	x1, [x0, #296]
   82fc4:	b4000141 	cbz	x1, 82fec <CSoundBaseDevice::RegisterHaveDataCallback(void (*)(void*), void*)+0x3c>
   82fc8:	f9009802 	str	x2, [x0, #304]
   82fcc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   82fd0:	d65f03c0 	ret
   82fd4:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82fd8:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82fdc:	912c4021 	add	x1, x1, #0xb10
   82fe0:	9133e000 	add	x0, x0, #0xcf8
   82fe4:	52804e02 	mov	w2, #0x270                 	// #624
   82fe8:	94007bc6 	bl	a1f00 <assertion_failed>
   82fec:	90000181 	adrp	x1, b2000 <SErrorStub+0xc>
   82ff0:	90000180 	adrp	x0, b2000 <SErrorStub+0xc>
   82ff4:	912c4021 	add	x1, x1, #0xb10
   82ff8:	91344000 	add	x0, x0, #0xd10
   82ffc:	52804e42 	mov	w2, #0x272                 	// #626
   83000:	94007bc0 	bl	a1f00 <assertion_failed>
   83004:	d503201f 	nop
   83008:	d503201f 	nop
   8300c:	d503201f 	nop

0000000000083010 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)>:
   83010:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83014:	910003fd 	mov	x29, sp
   83018:	b9401003 	ldr	w3, [x0, #16]
   8301c:	7100147f 	cmp	w3, #0x5
   83020:	540003e1 	b.ne	8309c <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0x8c>  // b.any
   83024:	7102fc5f 	cmp	w2, #0xbf
   83028:	54000468 	b.hi	830b4 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0xa4>  // b.pmore
   8302c:	531c5c21 	ubfiz	w1, w1, #4, #24
   83030:	71009c5f 	cmp	w2, #0x27
   83034:	54000109 	b.ls	83054 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)+0x44>  // b.plast
   83038:	1e270020 	fmov	s0, w1
   8303c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83040:	0e205800 	cnt	v0.8b, v0.8b
   83044:	0e31b800 	addv	b0, v0.8b
   83048:	1e260000 	fmov	w0, s0
   8304c:	2a007c20 	orr	w0, w1, w0, lsl #31
   83050:	d65f03c0 	ret
   83054:	53037c44 	lsr	w4, w2, #3
   83058:	12000843 	and	w3, w2, #0x7
   8305c:	8b040000 	add	x0, x0, x4
   83060:	7100005f 	cmp	w2, #0x0
   83064:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83068:	3943d000 	ldrb	w0, [x0, #244]
   8306c:	9ac32400 	lsr	x0, x0, x3
   83070:	13000000 	sbfx	w0, w0, #0, #1
   83074:	12020000 	and	w0, w0, #0x40000000
   83078:	2a010001 	orr	w1, w0, w1
   8307c:	1e270020 	fmov	s0, w1
   83080:	0e205800 	cnt	v0.8b, v0.8b
   83084:	0e31b800 	addv	b0, v0.8b
   83088:	1e260000 	fmov	w0, s0
   8308c:	2a007c20 	orr	w0, w1, w0, lsl #31
   83090:	32000c01 	orr	w1, w0, #0xf
   83094:	1a800020 	csel	w0, w1, w0, eq	// eq = none
   83098:	d65f03c0 	ret
   8309c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   830a0:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   830a4:	912c4021 	add	x1, x1, #0xb10
   830a8:	9134a000 	add	x0, x0, #0xd28
   830ac:	52805182 	mov	w2, #0x28c                 	// #652
   830b0:	94007b94 	bl	a1f00 <assertion_failed>
   830b4:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   830b8:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   830bc:	912c4021 	add	x1, x1, #0xb10
   830c0:	91352000 	add	x0, x0, #0xd48
   830c4:	528051a2 	mov	w2, #0x28d                 	// #653
   830c8:	94007b8e 	bl	a1f00 <assertion_failed>
   830cc:	d503201f 	nop

00000000000830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>:
   830d0:	aa0003e3 	mov	x3, x0
   830d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   830d8:	aa0103e0 	mov	x0, x1
   830dc:	910003fd 	mov	x29, sp
   830e0:	aa0203e1 	mov	x1, x2
   830e4:	b940c062 	ldr	w2, [x3, #192]
   830e8:	71000c5f 	cmp	w2, #0x3
   830ec:	54000428 	b.hi	83170 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xa0>  // b.pmore
   830f0:	7100045f 	cmp	w2, #0x1
   830f4:	54000488 	b.hi	83184 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xb4>  // b.pmore
   830f8:	34000202 	cbz	w2, 83138 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x68>
   830fc:	79c00022 	ldrsh	w2, [x1]
   83100:	53103c42 	lsl	w2, w2, #16
   83104:	b9401061 	ldr	w1, [x3, #16]
   83108:	7100103f 	cmp	w1, #0x4
   8310c:	54000220 	b.eq	83150 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x80>  // b.none
   83110:	54000488 	b.hi	831a0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xd0>  // b.pmore
   83114:	7100043f 	cmp	w1, #0x1
   83118:	540003c0 	b.eq	83190 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xc0>  // b.none
   8311c:	51000821 	sub	w1, w1, #0x2
   83120:	7100043f 	cmp	w1, #0x1
   83124:	54000608 	b.hi	831e4 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x114>  // b.pmore
   83128:	13087c42 	asr	w2, w2, #8
   8312c:	b9000002 	str	w2, [x0]
   83130:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83134:	d65f03c0 	ret
   83138:	39400022 	ldrb	w2, [x1]
   8313c:	b9401061 	ldr	w1, [x3, #16]
   83140:	51020042 	sub	w2, w2, #0x80
   83144:	7100103f 	cmp	w1, #0x4
   83148:	53081c42 	lsl	w2, w2, #24
   8314c:	54fffe21 	b.ne	83110 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x40>  // b.any
   83150:	b9803c61 	ldrsw	x1, [x3, #60]
   83154:	d2b00003 	mov	x3, #0x80000000            	// #2147483648
   83158:	8b22c062 	add	x2, x3, w2, sxtw
   8315c:	9b027c21 	mul	x1, x1, x2
   83160:	9360fc21 	asr	x1, x1, #32
   83164:	b9000001 	str	w1, [x0]
   83168:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8316c:	d65f03c0 	ret
   83170:	7100185f 	cmp	w2, #0x6
   83174:	540002c1 	b.ne	831cc <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xfc>  // b.any
   83178:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8317c:	b940c862 	ldr	w2, [x3, #200]
   83180:	1400a012 	b	ab1c8 <memcpy>
   83184:	b9400022 	ldr	w2, [x1]
   83188:	53185c42 	lsl	w2, w2, #8
   8318c:	17ffffde 	b	83104 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x34>
   83190:	13107c42 	asr	w2, w2, #16
   83194:	79000002 	strh	w2, [x0]
   83198:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8319c:	d65f03c0 	ret
   831a0:	7100143f 	cmp	w1, #0x5
   831a4:	54000201 	b.ne	831e4 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x114>  // b.any
   831a8:	53047c42 	lsr	w2, w2, #4
   831ac:	1e270040 	fmov	s0, w2
   831b0:	0e205800 	cnt	v0.8b, v0.8b
   831b4:	0e31b800 	addv	b0, v0.8b
   831b8:	1e260001 	fmov	w1, s0
   831bc:	2a017c41 	orr	w1, w2, w1, lsl #31
   831c0:	b9000001 	str	w1, [x0]
   831c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   831c8:	d65f03c0 	ret
   831cc:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   831d0:	90000180 	adrp	x0, b3000 <_etext+0x9c8>
   831d4:	912c4021 	add	x1, x1, #0xb10
   831d8:	9135c000 	add	x0, x0, #0xd70
   831dc:	528058a2 	mov	w2, #0x2c5                 	// #709
   831e0:	94007b48 	bl	a1f00 <assertion_failed>
   831e4:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   831e8:	90000180 	adrp	x0, b3000 <_etext+0x9c8>
   831ec:	912c4021 	add	x1, x1, #0xb10
   831f0:	9135c000 	add	x0, x0, #0xd70
   831f4:	52805da2 	mov	w2, #0x2ed                 	// #749
   831f8:	94007b42 	bl	a1f00 <assertion_failed>
   831fc:	d503201f 	nop

0000000000083200 <CSoundBaseDevice::GetQueueBytesFree()>:
   83200:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83204:	910003fd 	mov	x29, sp
   83208:	b9403001 	ldr	w1, [x0, #48]
   8320c:	7100043f 	cmp	w1, #0x1
   83210:	54000209 	b.ls	83250 <CSoundBaseDevice::GetQueueBytesFree()+0x50>  // b.plast
   83214:	b940d802 	ldr	w2, [x0, #216]
   83218:	6b02003f 	cmp	w1, w2
   8321c:	54000269 	b.ls	83268 <CSoundBaseDevice::GetQueueBytesFree()+0x68>  // b.plast
   83220:	b940dc03 	ldr	w3, [x0, #220]
   83224:	6b03003f 	cmp	w1, w3
   83228:	540002c9 	b.ls	83280 <CSoundBaseDevice::GetQueueBytesFree()+0x80>  // b.plast
   8322c:	0b030021 	add	w1, w1, w3
   83230:	51000460 	sub	w0, w3, #0x1
   83234:	4b020021 	sub	w1, w1, w2
   83238:	6b03005f 	cmp	w2, w3
   8323c:	51000421 	sub	w1, w1, #0x1
   83240:	4b020000 	sub	w0, w0, w2
   83244:	1a813000 	csel	w0, w0, w1, cc	// cc = lo, ul, last
   83248:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8324c:	d65f03c0 	ret
   83250:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83254:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83258:	912c4021 	add	x1, x1, #0xb10
   8325c:	9135c000 	add	x0, x0, #0xd70
   83260:	52806902 	mov	w2, #0x348                 	// #840
   83264:	94007b27 	bl	a1f00 <assertion_failed>
   83268:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8326c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83270:	912c4021 	add	x1, x1, #0xb10
   83274:	91362000 	add	x0, x0, #0xd88
   83278:	52806922 	mov	w2, #0x349                 	// #841
   8327c:	94007b21 	bl	a1f00 <assertion_failed>
   83280:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83284:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83288:	912c4021 	add	x1, x1, #0xb10
   8328c:	91368000 	add	x0, x0, #0xda0
   83290:	52806942 	mov	w2, #0x34a                 	// #842
   83294:	94007b1b 	bl	a1f00 <assertion_failed>
   83298:	d503201f 	nop
   8329c:	d503201f 	nop

00000000000832a0 <CSoundBaseDevice::GetQueueBytesAvail()>:
   832a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   832a4:	910003fd 	mov	x29, sp
   832a8:	b9403001 	ldr	w1, [x0, #48]
   832ac:	7100043f 	cmp	w1, #0x1
   832b0:	540001c9 	b.ls	832e8 <CSoundBaseDevice::GetQueueBytesAvail()+0x48>  // b.plast
   832b4:	b940d802 	ldr	w2, [x0, #216]
   832b8:	6b02003f 	cmp	w1, w2
   832bc:	54000229 	b.ls	83300 <CSoundBaseDevice::GetQueueBytesAvail()+0x60>  // b.plast
   832c0:	b940dc00 	ldr	w0, [x0, #220]
   832c4:	6b00003f 	cmp	w1, w0
   832c8:	54000289 	b.ls	83318 <CSoundBaseDevice::GetQueueBytesAvail()+0x78>  // b.plast
   832cc:	0b020021 	add	w1, w1, w2
   832d0:	6b00005f 	cmp	w2, w0
   832d4:	4b000021 	sub	w1, w1, w0
   832d8:	4b000040 	sub	w0, w2, w0
   832dc:	1a812000 	csel	w0, w0, w1, cs	// cs = hs, nlast
   832e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   832e4:	d65f03c0 	ret
   832e8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   832ec:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   832f0:	912c4021 	add	x1, x1, #0xb10
   832f4:	9135c000 	add	x0, x0, #0xd70
   832f8:	52806ac2 	mov	w2, #0x356                 	// #854
   832fc:	94007b01 	bl	a1f00 <assertion_failed>
   83300:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83304:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83308:	912c4021 	add	x1, x1, #0xb10
   8330c:	91362000 	add	x0, x0, #0xd88
   83310:	52806ae2 	mov	w2, #0x357                 	// #855
   83314:	94007afb 	bl	a1f00 <assertion_failed>
   83318:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8331c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83320:	912c4021 	add	x1, x1, #0xb10
   83324:	91368000 	add	x0, x0, #0xda0
   83328:	52806b02 	mov	w2, #0x358                 	// #856
   8332c:	94007af5 	bl	a1f00 <assertion_failed>

0000000000083330 <CSoundBaseDevice::GetQueueFramesAvail()>:
   83330:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83334:	910003fd 	mov	x29, sp
   83338:	b9403001 	ldr	w1, [x0, #48]
   8333c:	a90153f3 	stp	x19, x20, [sp, #16]
   83340:	34000301 	cbz	w1, 833a0 <CSoundBaseDevice::GetQueueFramesAvail()+0x70>
   83344:	b940f001 	ldr	w1, [x0, #240]
   83348:	aa0003f3 	mov	x19, x0
   8334c:	35000101 	cbnz	w1, 8336c <CSoundBaseDevice::GetQueueFramesAvail()+0x3c>
   83350:	97ffffd4 	bl	832a0 <CSoundBaseDevice::GetQueueBytesAvail()>
   83354:	2a0003f4 	mov	w20, w0
   83358:	b9402a60 	ldr	w0, [x19, #40]
   8335c:	1ac00a80 	udiv	w0, w20, w0
   83360:	a94153f3 	ldp	x19, x20, [sp, #16]
   83364:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83368:	d65f03c0 	ret
   8336c:	2a0103e0 	mov	w0, w1
   83370:	9400a744 	bl	ad080 <EnterCritical>
   83374:	aa1303e0 	mov	x0, x19
   83378:	97ffffca 	bl	832a0 <CSoundBaseDevice::GetQueueBytesAvail()>
   8337c:	b940f261 	ldr	w1, [x19, #240]
   83380:	2a0003f4 	mov	w20, w0
   83384:	34fffea1 	cbz	w1, 83358 <CSoundBaseDevice::GetQueueFramesAvail()+0x28>
   83388:	9400a76e 	bl	ad140 <LeaveCritical>
   8338c:	b9402a60 	ldr	w0, [x19, #40]
   83390:	1ac00a80 	udiv	w0, w20, w0
   83394:	a94153f3 	ldp	x19, x20, [sp, #16]
   83398:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8339c:	d65f03c0 	ret
   833a0:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   833a4:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   833a8:	912c4021 	add	x1, x1, #0xb10
   833ac:	91320000 	add	x0, x0, #0xc80
   833b0:	52803082 	mov	w2, #0x184                 	// #388
   833b4:	94007ad3 	bl	a1f00 <assertion_failed>
   833b8:	d503201f 	nop
   833bc:	d503201f 	nop

00000000000833c0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)>:
   833c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   833c4:	910003fd 	mov	x29, sp
   833c8:	b4000281 	cbz	x1, 83418 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x58>
   833cc:	f9406804 	ldr	x4, [x0, #208]
   833d0:	b4000304 	cbz	x4, 83430 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x70>
   833d4:	340003a2 	cbz	w2, 83448 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x88>
   833d8:	b940d803 	ldr	w3, [x0, #216]
   833dc:	8b224025 	add	x5, x1, w2, uxtw
   833e0:	14000002 	b	833e8 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x28>
   833e4:	f9406804 	ldr	x4, [x0, #208]
   833e8:	38401422 	ldrb	w2, [x1], #1
   833ec:	38234882 	strb	w2, [x4, w3, uxtw]
   833f0:	b940d803 	ldr	w3, [x0, #216]
   833f4:	b9403002 	ldr	w2, [x0, #48]
   833f8:	11000463 	add	w3, w3, #0x1
   833fc:	6b02007f 	cmp	w3, w2
   83400:	1a9f1063 	csel	w3, w3, wzr, ne	// ne = any
   83404:	b900d803 	str	w3, [x0, #216]
   83408:	eb0100bf 	cmp	x5, x1
   8340c:	54fffec1 	b.ne	833e4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x24>  // b.any
   83410:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83414:	d65f03c0 	ret
   83418:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8341c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83420:	912c4021 	add	x1, x1, #0xb10
   83424:	91370000 	add	x0, x0, #0xdc0
   83428:	52806ca2 	mov	w2, #0x365                 	// #869
   8342c:	94007ab5 	bl	a1f00 <assertion_failed>
   83430:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83434:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83438:	912c4021 	add	x1, x1, #0xb10
   8343c:	91372000 	add	x0, x0, #0xdc8
   83440:	52806cc2 	mov	w2, #0x366                 	// #870
   83444:	94007aaf 	bl	a1f00 <assertion_failed>
   83448:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8344c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83450:	912c4021 	add	x1, x1, #0xb10
   83454:	91376000 	add	x0, x0, #0xdd8
   83458:	52806d02 	mov	w2, #0x368                 	// #872
   8345c:	94007aa9 	bl	a1f00 <assertion_failed>

0000000000083460 <CSoundBaseDevice::Write(void const*, unsigned long)>:
   83460:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   83464:	910003fd 	mov	x29, sp
   83468:	a90153f3 	stp	x19, x20, [sp, #16]
   8346c:	aa0103f4 	mov	x20, x1
   83470:	b940c001 	ldr	w1, [x0, #192]
   83474:	a9025bf5 	stp	x21, x22, [sp, #32]
   83478:	7100143f 	cmp	w1, #0x5
   8347c:	a90363f7 	stp	x23, x24, [sp, #48]
   83480:	a9046bf9 	stp	x25, x26, [sp, #64]
   83484:	540014ec 	b.gt	83720 <CSoundBaseDevice::Write(void const*, unsigned long)+0x2c0>
   83488:	b40015b4 	cbz	x20, 8373c <CSoundBaseDevice::Write(void const*, unsigned long)+0x2dc>
   8348c:	aa0003f3 	mov	x19, x0
   83490:	b940f000 	ldr	w0, [x0, #240]
   83494:	aa0203f6 	mov	x22, x2
   83498:	350011a0 	cbnz	w0, 836cc <CSoundBaseDevice::Write(void const*, unsigned long)+0x26c>
   8349c:	b9401262 	ldr	w2, [x19, #16]
   834a0:	b9401a75 	ldr	w21, [x19, #24]
   834a4:	b940c660 	ldr	w0, [x19, #196]
   834a8:	6b01005f 	cmp	w2, w1
   834ac:	540007e0 	b.eq	835a8 <CSoundBaseDevice::Write(void const*, unsigned long)+0x148>  // b.none
   834b0:	71000abf 	cmp	w21, #0x2
   834b4:	54000880 	b.eq	835c4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x164>  // b.none
   834b8:	6b0002bf 	cmp	w21, w0
   834bc:	5280001a 	mov	w26, #0x0                   	// #0
   834c0:	540000a9 	b.ls	834d4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x74>  // b.plast
   834c4:	b9402661 	ldr	w1, [x19, #36]
   834c8:	4b0002ba 	sub	w26, w21, w0
   834cc:	2a0003f5 	mov	w21, w0
   834d0:	1b017f5a 	mul	w26, w26, w1
   834d4:	b940ce60 	ldr	w0, [x19, #204]
   834d8:	eb0002df 	cmp	x22, x0
   834dc:	540013e3 	b.cc	83758 <CSoundBaseDevice::Write(void const*, unsigned long)+0x2f8>  // b.lo, b.ul, b.last
   834e0:	2a1a03e0 	mov	w0, w26
   834e4:	9101c3f9 	add	x25, sp, #0x70
   834e8:	52800017 	mov	w23, #0x0                   	// #0
   834ec:	a90573fb 	stp	x27, x28, [sp, #80]
   834f0:	f90033e0 	str	x0, [sp, #96]
   834f4:	91010260 	add	x0, x19, #0x40
   834f8:	f90037e0 	str	x0, [sp, #104]
   834fc:	d503201f 	nop
   83500:	aa1303e0 	mov	x0, x19
   83504:	97ffff3f 	bl	83200 <CSoundBaseDevice::GetQueueBytesFree()>
   83508:	b9402a61 	ldr	w1, [x19, #40]
   8350c:	6b01001f 	cmp	w0, w1
   83510:	54000383 	b.cc	83580 <CSoundBaseDevice::Write(void const*, unsigned long)+0x120>  // b.lo, b.ul, b.last
   83514:	aa1903f8 	mov	x24, x25
   83518:	aa1903fb 	mov	x27, x25
   8351c:	5280001c 	mov	w28, #0x0                   	// #0
   83520:	34000c15 	cbz	w21, 836a0 <CSoundBaseDevice::Write(void const*, unsigned long)+0x240>
   83524:	d503201f 	nop
   83528:	aa1403e2 	mov	x2, x20
   8352c:	aa1b03e1 	mov	x1, x27
   83530:	aa1303e0 	mov	x0, x19
   83534:	97fffee7 	bl	830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   83538:	b9402662 	ldr	w2, [x19, #36]
   8353c:	1100079c 	add	w28, w28, #0x1
   83540:	b940ca60 	ldr	w0, [x19, #200]
   83544:	6b15039f 	cmp	w28, w21
   83548:	8b02037b 	add	x27, x27, x2
   8354c:	8b000294 	add	x20, x20, x0
   83550:	54fffec1 	b.ne	83528 <CSoundBaseDevice::Write(void const*, unsigned long)+0xc8>  // b.any
   83554:	350009fa 	cbnz	w26, 83690 <CSoundBaseDevice::Write(void const*, unsigned long)+0x230>
   83558:	b9402a62 	ldr	w2, [x19, #40]
   8355c:	aa1803e1 	mov	x1, x24
   83560:	aa1303e0 	mov	x0, x19
   83564:	97ffff97 	bl	833c0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
   83568:	b940ce61 	ldr	w1, [x19, #204]
   8356c:	2a0103e0 	mov	w0, w1
   83570:	0b0102f7 	add	w23, w23, w1
   83574:	cb0002d6 	sub	x22, x22, x0
   83578:	eb16001f 	cmp	x0, x22
   8357c:	54fffc29 	b.ls	83500 <CSoundBaseDevice::Write(void const*, unsigned long)+0xa0>  // b.plast
   83580:	a94573fb 	ldp	x27, x28, [sp, #80]
   83584:	b940f260 	ldr	w0, [x19, #240]
   83588:	35000920 	cbnz	w0, 836ac <CSoundBaseDevice::Write(void const*, unsigned long)+0x24c>
   8358c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83590:	2a1703e0 	mov	w0, w23
   83594:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83598:	a94363f7 	ldp	x23, x24, [sp, #48]
   8359c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   835a0:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   835a4:	d65f03c0 	ret
   835a8:	6b0002bf 	cmp	w21, w0
   835ac:	54fff821 	b.ne	834b0 <CSoundBaseDevice::Write(void const*, unsigned long)+0x50>  // b.any
   835b0:	39408261 	ldrb	w1, [x19, #32]
   835b4:	36000d61 	tbz	w1, #0, 83760 <CSoundBaseDevice::Write(void const*, unsigned long)+0x300>
   835b8:	71000abf 	cmp	w21, #0x2
   835bc:	5280001a 	mov	w26, #0x0                   	// #0
   835c0:	54fff8a1 	b.ne	834d4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x74>  // b.any
   835c4:	7100081f 	cmp	w0, #0x2
   835c8:	54000888 	b.hi	836d8 <CSoundBaseDevice::Write(void const*, unsigned long)+0x278>  // b.pmore
   835cc:	b940ce60 	ldr	w0, [x19, #204]
   835d0:	9101c3f5 	add	x21, sp, #0x70
   835d4:	52800017 	mov	w23, #0x0                   	// #0
   835d8:	eb16001f 	cmp	x0, x22
   835dc:	54000309 	b.ls	8363c <CSoundBaseDevice::Write(void const*, unsigned long)+0x1dc>  // b.plast
   835e0:	17ffffe9 	b	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>
   835e4:	aa1403e2 	mov	x2, x20
   835e8:	aa1503e1 	mov	x1, x21
   835ec:	aa1303e0 	mov	x0, x19
   835f0:	97fffeb8 	bl	830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   835f4:	29588261 	ldp	w1, w0, [x19, #196]
   835f8:	7100083f 	cmp	w1, #0x2
   835fc:	8b000294 	add	x20, x20, x0
   83600:	54000720 	b.eq	836e4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x284>  // b.none
   83604:	b9402662 	ldr	w2, [x19, #36]
   83608:	aa1503e1 	mov	x1, x21
   8360c:	8b0202a0 	add	x0, x21, x2
   83610:	94009eee 	bl	ab1c8 <memcpy>
   83614:	b9402a62 	ldr	w2, [x19, #40]
   83618:	aa1503e1 	mov	x1, x21
   8361c:	aa1303e0 	mov	x0, x19
   83620:	97ffff68 	bl	833c0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
   83624:	b940ce61 	ldr	w1, [x19, #204]
   83628:	2a0103e0 	mov	w0, w1
   8362c:	0b0102f7 	add	w23, w23, w1
   83630:	cb0002d6 	sub	x22, x22, x0
   83634:	eb16001f 	cmp	x0, x22
   83638:	54fffa68 	b.hi	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>  // b.pmore
   8363c:	aa1303e0 	mov	x0, x19
   83640:	97fffef0 	bl	83200 <CSoundBaseDevice::GetQueueBytesFree()>
   83644:	b9402a61 	ldr	w1, [x19, #40]
   83648:	6b01001f 	cmp	w0, w1
   8364c:	54fff9c3 	b.cc	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>  // b.lo, b.ul, b.last
   83650:	39408260 	ldrb	w0, [x19, #32]
   83654:	3607fc80 	tbz	w0, #0, 835e4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x184>
   83658:	b9402661 	ldr	w1, [x19, #36]
   8365c:	aa1403e2 	mov	x2, x20
   83660:	aa1303e0 	mov	x0, x19
   83664:	8b0102a1 	add	x1, x21, x1
   83668:	97fffe9a 	bl	830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   8366c:	29588261 	ldp	w1, w0, [x19, #196]
   83670:	7100083f 	cmp	w1, #0x2
   83674:	8b000294 	add	x20, x20, x0
   83678:	54000460 	b.eq	83704 <CSoundBaseDevice::Write(void const*, unsigned long)+0x2a4>  // b.none
   8367c:	b9402662 	ldr	w2, [x19, #36]
   83680:	aa1503e0 	mov	x0, x21
   83684:	8b0202a1 	add	x1, x21, x2
   83688:	94009ed0 	bl	ab1c8 <memcpy>
   8368c:	17ffffe2 	b	83614 <CSoundBaseDevice::Write(void const*, unsigned long)+0x1b4>
   83690:	a94607e2 	ldp	x2, x1, [sp, #96]
   83694:	aa1b03e0 	mov	x0, x27
   83698:	94009ecc 	bl	ab1c8 <memcpy>
   8369c:	17ffffaf 	b	83558 <CSoundBaseDevice::Write(void const*, unsigned long)+0xf8>
   836a0:	9101c3f8 	add	x24, sp, #0x70
   836a4:	aa1803fb 	mov	x27, x24
   836a8:	17ffffab 	b	83554 <CSoundBaseDevice::Write(void const*, unsigned long)+0xf4>
   836ac:	9400a6a5 	bl	ad140 <LeaveCritical>
   836b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   836b4:	2a1703e0 	mov	w0, w23
   836b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   836bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   836c0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   836c4:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   836c8:	d65f03c0 	ret
   836cc:	9400a66d 	bl	ad080 <EnterCritical>
   836d0:	b940c261 	ldr	w1, [x19, #192]
   836d4:	17ffff72 	b	8349c <CSoundBaseDevice::Write(void const*, unsigned long)+0x3c>
   836d8:	5280001a 	mov	w26, #0x0                   	// #0
   836dc:	52800055 	mov	w21, #0x2                   	// #2
   836e0:	17ffff7d 	b	834d4 <CSoundBaseDevice::Write(void const*, unsigned long)+0x74>
   836e4:	b9402661 	ldr	w1, [x19, #36]
   836e8:	aa1403e2 	mov	x2, x20
   836ec:	aa1303e0 	mov	x0, x19
   836f0:	8b0102a1 	add	x1, x21, x1
   836f4:	97fffe77 	bl	830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   836f8:	b940ca60 	ldr	w0, [x19, #200]
   836fc:	8b000294 	add	x20, x20, x0
   83700:	17ffffc5 	b	83614 <CSoundBaseDevice::Write(void const*, unsigned long)+0x1b4>
   83704:	aa1403e2 	mov	x2, x20
   83708:	aa1303e0 	mov	x0, x19
   8370c:	aa1503e1 	mov	x1, x21
   83710:	97fffe70 	bl	830d0 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   83714:	b940ca60 	ldr	w0, [x19, #200]
   83718:	8b000294 	add	x20, x20, x0
   8371c:	17ffffbe 	b	83614 <CSoundBaseDevice::Write(void const*, unsigned long)+0x1b4>
   83720:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83724:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83728:	912c4021 	add	x1, x1, #0xb10
   8372c:	9137a000 	add	x0, x0, #0xde8
   83730:	52802122 	mov	w2, #0x109                 	// #265
   83734:	a90573fb 	stp	x27, x28, [sp, #80]
   83738:	940079f2 	bl	a1f00 <assertion_failed>
   8373c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83740:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83744:	912c4021 	add	x1, x1, #0xb10
   83748:	91384000 	add	x0, x0, #0xe10
   8374c:	52802162 	mov	w2, #0x10b                 	// #267
   83750:	a90573fb 	stp	x27, x28, [sp, #80]
   83754:	940079eb 	bl	a1f00 <assertion_failed>
   83758:	52800017 	mov	w23, #0x0                   	// #0
   8375c:	17ffff8a 	b	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>
   83760:	aa1303e0 	mov	x0, x19
   83764:	97fffea7 	bl	83200 <CSoundBaseDevice::GetQueueBytesFree()>
   83768:	b940ce62 	ldr	w2, [x19, #204]
   8376c:	eb2042df 	cmp	x22, w0, uxtw
   83770:	1a962000 	csel	w0, w0, w22, cs	// cs = hs, nlast
   83774:	52800017 	mov	w23, #0x0                   	// #0
   83778:	1ac20801 	udiv	w1, w0, w2
   8377c:	1b028021 	msub	w1, w1, w2, w0
   83780:	6b010015 	subs	w21, w0, w1
   83784:	54fff000 	b.eq	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>  // b.none
   83788:	aa1403e1 	mov	x1, x20
   8378c:	2a1503e2 	mov	w2, w21
   83790:	aa1303e0 	mov	x0, x19
   83794:	2a1503f7 	mov	w23, w21
   83798:	97ffff0a 	bl	833c0 <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
   8379c:	17ffff7a 	b	83584 <CSoundBaseDevice::Write(void const*, unsigned long)+0x124>

00000000000837a0 <CSoundBaseDevice::Dequeue(void*, unsigned int)>:
   837a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   837a4:	910003fd 	mov	x29, sp
   837a8:	b4000281 	cbz	x1, 837f8 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x58>
   837ac:	f9406804 	ldr	x4, [x0, #208]
   837b0:	b4000304 	cbz	x4, 83810 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x70>
   837b4:	340003a2 	cbz	w2, 83828 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x88>
   837b8:	b940dc03 	ldr	w3, [x0, #220]
   837bc:	8b224025 	add	x5, x1, w2, uxtw
   837c0:	14000002 	b	837c8 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x28>
   837c4:	f9406804 	ldr	x4, [x0, #208]
   837c8:	38634882 	ldrb	w2, [x4, w3, uxtw]
   837cc:	38001422 	strb	w2, [x1], #1
   837d0:	b940dc03 	ldr	w3, [x0, #220]
   837d4:	b9403002 	ldr	w2, [x0, #48]
   837d8:	11000463 	add	w3, w3, #0x1
   837dc:	6b02007f 	cmp	w3, w2
   837e0:	1a9f1063 	csel	w3, w3, wzr, ne	// ne = any
   837e4:	b900dc03 	str	w3, [x0, #220]
   837e8:	eb0100bf 	cmp	x5, x1
   837ec:	54fffec1 	b.ne	837c4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x24>  // b.any
   837f0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   837f4:	d65f03c0 	ret
   837f8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   837fc:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83800:	912c4021 	add	x1, x1, #0xb10
   83804:	91370000 	add	x0, x0, #0xdc0
   83808:	52806ee2 	mov	w2, #0x377                 	// #887
   8380c:	940079bd 	bl	a1f00 <assertion_failed>
   83810:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83814:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83818:	912c4021 	add	x1, x1, #0xb10
   8381c:	91372000 	add	x0, x0, #0xdc8
   83820:	52806f02 	mov	w2, #0x378                 	// #888
   83824:	940079b7 	bl	a1f00 <assertion_failed>
   83828:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8382c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83830:	912c4021 	add	x1, x1, #0xb10
   83834:	91376000 	add	x0, x0, #0xdd8
   83838:	52806f42 	mov	w2, #0x37a                 	// #890
   8383c:	940079b1 	bl	a1f00 <assertion_failed>

0000000000083840 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>:
   83840:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   83844:	910003fd 	mov	x29, sp
   83848:	a90153f3 	stp	x19, x20, [sp, #16]
   8384c:	a9025bf5 	stp	x21, x22, [sp, #32]
   83850:	a90363f7 	stp	x23, x24, [sp, #48]
   83854:	a9046bf9 	stp	x25, x26, [sp, #64]
   83858:	b4000ea1 	cbz	x1, 83a2c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1ec>
   8385c:	2a0203f3 	mov	w19, w2
   83860:	34000f22 	cbz	w2, 83a44 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x204>
   83864:	b9401802 	ldr	w2, [x0, #24]
   83868:	aa0103f6 	mov	x22, x1
   8386c:	aa0003f5 	mov	x21, x0
   83870:	1ac20a61 	udiv	w1, w19, w2
   83874:	1b02cc21 	msub	w1, w1, w2, w19
   83878:	35000f21 	cbnz	w1, 83a5c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x21c>
   8387c:	b9402419 	ldr	w25, [x0, #36]
   83880:	b940f001 	ldr	w1, [x0, #240]
   83884:	1b197e79 	mul	w25, w19, w25
   83888:	350004c1 	cbnz	w1, 83920 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe0>
   8388c:	97fffe85 	bl	832a0 <CSoundBaseDevice::GetQueueBytesAvail()>
   83890:	6b19001f 	cmp	w0, w25
   83894:	2a0003f4 	mov	w20, w0
   83898:	1a999017 	csel	w23, w0, w25, ls	// ls = plast
   8389c:	aa1603f8 	mov	x24, x22
   838a0:	350005b7 	cbnz	w23, 83954 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x114>
   838a4:	6b1902ff 	cmp	w23, w25
   838a8:	540001a2 	b.cs	838dc <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x9c>  // b.hs, b.nlast
   838ac:	b9402aa2 	ldr	w2, [x21, #40]
   838b0:	910102ba 	add	x26, x21, #0x40
   838b4:	d503201f 	nop
   838b8:	aa1803e0 	mov	x0, x24
   838bc:	aa1a03e1 	mov	x1, x26
   838c0:	94009e42 	bl	ab1c8 <memcpy>
   838c4:	b9402aa2 	ldr	w2, [x21, #40]
   838c8:	0b0202f7 	add	w23, w23, w2
   838cc:	2a0203e2 	mov	w2, w2
   838d0:	6b17033f 	cmp	w25, w23
   838d4:	8b020318 	add	x24, x24, x2
   838d8:	54ffff08 	b.hi	838b8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x78>  // b.pmore
   838dc:	b94012a0 	ldr	w0, [x21, #16]
   838e0:	7100141f 	cmp	w0, #0x5
   838e4:	54000460 	b.eq	83970 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x130>  // b.none
   838e8:	f94072a1 	ldr	x1, [x21, #224]
   838ec:	b40000c1 	cbz	x1, 83904 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xc4>
   838f0:	b94036a0 	ldr	w0, [x21, #52]
   838f4:	6b14001f 	cmp	w0, w20
   838f8:	54000069 	b.ls	83904 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xc4>  // b.plast
   838fc:	f94076a0 	ldr	x0, [x21, #232]
   83900:	d63f0020 	blr	x1
   83904:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83908:	2a1303e0 	mov	w0, w19
   8390c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83910:	a94363f7 	ldp	x23, x24, [sp, #48]
   83914:	a9446bf9 	ldp	x25, x26, [sp, #64]
   83918:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8391c:	d65f03c0 	ret
   83920:	2a0103e0 	mov	w0, w1
   83924:	9400a5d7 	bl	ad080 <EnterCritical>
   83928:	aa1503e0 	mov	x0, x21
   8392c:	97fffe5d 	bl	832a0 <CSoundBaseDevice::GetQueueBytesAvail()>
   83930:	6b00033f 	cmp	w25, w0
   83934:	aa1603f8 	mov	x24, x22
   83938:	2a0003f4 	mov	w20, w0
   8393c:	1a809337 	csel	w23, w25, w0, ls	// ls = plast
   83940:	350000b7 	cbnz	w23, 83954 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x114>
   83944:	b940f2a0 	ldr	w0, [x21, #240]
   83948:	34fffae0 	cbz	w0, 838a4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x64>
   8394c:	9400a5fd 	bl	ad140 <LeaveCritical>
   83950:	17ffffd5 	b	838a4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x64>
   83954:	2a1703e2 	mov	w2, w23
   83958:	aa1603e1 	mov	x1, x22
   8395c:	aa1503e0 	mov	x0, x21
   83960:	4b170294 	sub	w20, w20, w23
   83964:	8b3742d8 	add	x24, x22, w23, uxtw
   83968:	97ffff8e 	bl	837a0 <CSoundBaseDevice::Dequeue(void*, unsigned int)>
   8396c:	17fffff6 	b	83944 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x104>
   83970:	b9401aa5 	ldr	w5, [x21, #24]
   83974:	52800001 	mov	w1, #0x0                   	// #0
   83978:	52800508 	mov	w8, #0x28                  	// #40
   8397c:	d503201f 	nop
   83980:	1b087ca0 	mul	w0, w5, w8
   83984:	52800004 	mov	w4, #0x0                   	// #0
   83988:	340003e0 	cbz	w0, 83a04 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1c4>
   8398c:	d503201f 	nop
   83990:	1ac50883 	udiv	w3, w4, w5
   83994:	0b040027 	add	w7, w1, w4
   83998:	53037c62 	lsr	w2, w3, #3
   8399c:	12000863 	and	w3, w3, #0x7
   839a0:	8b0202a2 	add	x2, x21, x2
   839a4:	3943d046 	ldrb	w6, [x2, #244]
   839a8:	9ac324c3 	lsr	x3, x6, x3
   839ac:	36000183 	tbz	w3, #0, 839dc <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x19c>
   839b0:	b8677ac2 	ldr	w2, [x22, x7, lsl #2]
   839b4:	12007842 	and	w2, w2, #0x7fffffff
   839b8:	32020040 	orr	w0, w2, #0x40000000
   839bc:	1e270000 	fmov	s0, w0
   839c0:	32020442 	orr	w2, w2, #0xc0000000
   839c4:	0e205800 	cnt	v0.8b, v0.8b
   839c8:	0e31b800 	addv	b0, v0.8b
   839cc:	1e260003 	fmov	w3, s0
   839d0:	72000063 	ands	w3, w3, #0x1
   839d4:	1a820000 	csel	w0, w0, w2, eq	// eq = none
   839d8:	b8277ac0 	str	w0, [x22, x7, lsl #2]
   839dc:	6b0400bf 	cmp	w5, w4
   839e0:	54000089 	b.ls	839f0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x1b0>  // b.plast
   839e4:	b8677ac0 	ldr	w0, [x22, x7, lsl #2]
   839e8:	32000c00 	orr	w0, w0, #0xf
   839ec:	b8277ac0 	str	w0, [x22, x7, lsl #2]
   839f0:	b9401aa5 	ldr	w5, [x21, #24]
   839f4:	11000484 	add	w4, w4, #0x1
   839f8:	1b087ca0 	mul	w0, w5, w8
   839fc:	6b04001f 	cmp	w0, w4
   83a00:	54fffc88 	b.hi	83990 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x150>  // b.pmore
   83a04:	11060021 	add	w1, w1, #0x180
   83a08:	6b01027f 	cmp	w19, w1
   83a0c:	54fffba8 	b.hi	83980 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x140>  // b.pmore
   83a10:	54fff6c0 	b.eq	838e8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xa8>  // b.none
   83a14:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83a18:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83a1c:	912c4021 	add	x1, x1, #0xb10
   83a20:	9139a000 	add	x0, x0, #0xe68
   83a24:	52806742 	mov	w2, #0x33a                 	// #826
   83a28:	94007936 	bl	a1f00 <assertion_failed>
   83a2c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83a30:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83a34:	912c4021 	add	x1, x1, #0xb10
   83a38:	91388000 	add	x0, x0, #0xe20
   83a3c:	52805ea2 	mov	w2, #0x2f5                 	// #757
   83a40:	94007930 	bl	a1f00 <assertion_failed>
   83a44:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83a48:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83a4c:	912c4021 	add	x1, x1, #0xb10
   83a50:	9138c000 	add	x0, x0, #0xe30
   83a54:	52805ee2 	mov	w2, #0x2f7                 	// #759
   83a58:	9400792a 	bl	a1f00 <assertion_failed>
   83a5c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83a60:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83a64:	912c4021 	add	x1, x1, #0xb10
   83a68:	91390000 	add	x0, x0, #0xe40
   83a6c:	52805f02 	mov	w2, #0x2f8                 	// #760
   83a70:	94007924 	bl	a1f00 <assertion_failed>
   83a74:	d503201f 	nop
   83a78:	d503201f 	nop
   83a7c:	d503201f 	nop

0000000000083a80 <CSoundBaseDevice::GetChunk(short*, unsigned int)>:
   83a80:	b9401003 	ldr	w3, [x0, #16]
   83a84:	7100047f 	cmp	w3, #0x1
   83a88:	54000041 	b.ne	83a90 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x10>  // b.any
   83a8c:	17ffff6d 	b	83840 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
   83a90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83a94:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83a98:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83a9c:	910003fd 	mov	x29, sp
   83aa0:	912c4021 	add	x1, x1, #0xb10
   83aa4:	9139e000 	add	x0, x0, #0xe78
   83aa8:	52804f62 	mov	w2, #0x27b                 	// #635
   83aac:	94007915 	bl	a1f00 <assertion_failed>

0000000000083ab0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)>:
   83ab0:	b9401003 	ldr	w3, [x0, #16]
   83ab4:	51000863 	sub	w3, w3, #0x2
   83ab8:	71000c7f 	cmp	w3, #0x3
   83abc:	54000048 	b.hi	83ac4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x14>  // b.pmore
   83ac0:	17ffff60 	b	83840 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
   83ac4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83ac8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83acc:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83ad0:	910003fd 	mov	x29, sp
   83ad4:	912c4021 	add	x1, x1, #0xb10
   83ad8:	913a8000 	add	x0, x0, #0xea0
   83adc:	52805042 	mov	w2, #0x282                 	// #642
   83ae0:	94007908 	bl	a1f00 <assertion_failed>
   83ae4:	d503201f 	nop
   83ae8:	d503201f 	nop
   83aec:	d503201f 	nop

0000000000083af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>:
   83af0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83af4:	910003fd 	mov	x29, sp
   83af8:	b9401003 	ldr	w3, [x0, #16]
   83afc:	7100087f 	cmp	w3, #0x2
   83b00:	54000320 	b.eq	83b64 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x74>  // b.none
   83b04:	71000c7f 	cmp	w3, #0x3
   83b08:	540001e0 	b.eq	83b44 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x54>  // b.none
   83b0c:	7100047f 	cmp	w3, #0x1
   83b10:	540003a1 	b.ne	83b84 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x94>  // b.any
   83b14:	79c00042 	ldrsh	w2, [x2]
   83b18:	53185c42 	lsl	w2, w2, #8
   83b1c:	b9410400 	ldr	w0, [x0, #260]
   83b20:	7100041f 	cmp	w0, #0x1
   83b24:	54000180 	b.eq	83b54 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x64>  // b.none
   83b28:	54000249 	b.ls	83b70 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x80>  // b.plast
   83b2c:	51000800 	sub	w0, w0, #0x2
   83b30:	7100041f 	cmp	w0, #0x1
   83b34:	54000348 	b.hi	83b9c <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0xac>  // b.pmore
   83b38:	b9000022 	str	w2, [x1]
   83b3c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83b40:	d65f03c0 	ret
   83b44:	b9410400 	ldr	w0, [x0, #260]
   83b48:	b9400042 	ldr	w2, [x2]
   83b4c:	7100041f 	cmp	w0, #0x1
   83b50:	54fffec1 	b.ne	83b28 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x38>  // b.any
   83b54:	53087c42 	lsr	w2, w2, #8
   83b58:	79000022 	strh	w2, [x1]
   83b5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83b60:	d65f03c0 	ret
   83b64:	b9400042 	ldr	w2, [x2]
   83b68:	12005c42 	and	w2, w2, #0xffffff
   83b6c:	17ffffec 	b	83b1c <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)+0x2c>
   83b70:	53107c42 	lsr	w2, w2, #16
   83b74:	51020042 	sub	w2, w2, #0x80
   83b78:	39000022 	strb	w2, [x1]
   83b7c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83b80:	d65f03c0 	ret
   83b84:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83b88:	90000180 	adrp	x0, b3000 <_etext+0x9c8>
   83b8c:	912c4021 	add	x1, x1, #0xb10
   83b90:	9135c000 	add	x0, x0, #0xd70
   83b94:	52807a02 	mov	w2, #0x3d0                 	// #976
   83b98:	940078da 	bl	a1f00 <assertion_failed>
   83b9c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83ba0:	90000180 	adrp	x0, b3000 <_etext+0x9c8>
   83ba4:	912c4021 	add	x1, x1, #0xb10
   83ba8:	9135c000 	add	x0, x0, #0xd70
   83bac:	52807d02 	mov	w2, #0x3e8                 	// #1000
   83bb0:	940078d4 	bl	a1f00 <assertion_failed>
   83bb4:	d503201f 	nop
   83bb8:	d503201f 	nop
   83bbc:	d503201f 	nop

0000000000083bc0 <CSoundBaseDevice::GetReadQueueBytesFree()>:
   83bc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83bc4:	910003fd 	mov	x29, sp
   83bc8:	b940fc01 	ldr	w1, [x0, #252]
   83bcc:	7100043f 	cmp	w1, #0x1
   83bd0:	54000209 	b.ls	83c10 <CSoundBaseDevice::GetReadQueueBytesFree()+0x50>  // b.plast
   83bd4:	b9412002 	ldr	w2, [x0, #288]
   83bd8:	6b02003f 	cmp	w1, w2
   83bdc:	54000269 	b.ls	83c28 <CSoundBaseDevice::GetReadQueueBytesFree()+0x68>  // b.plast
   83be0:	b9412403 	ldr	w3, [x0, #292]
   83be4:	6b03003f 	cmp	w1, w3
   83be8:	540002c9 	b.ls	83c40 <CSoundBaseDevice::GetReadQueueBytesFree()+0x80>  // b.plast
   83bec:	0b030021 	add	w1, w1, w3
   83bf0:	51000460 	sub	w0, w3, #0x1
   83bf4:	4b020021 	sub	w1, w1, w2
   83bf8:	6b03005f 	cmp	w2, w3
   83bfc:	51000421 	sub	w1, w1, #0x1
   83c00:	4b020000 	sub	w0, w0, w2
   83c04:	1a813000 	csel	w0, w0, w1, cc	// cc = lo, ul, last
   83c08:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83c0c:	d65f03c0 	ret
   83c10:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83c14:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83c18:	912c4021 	add	x1, x1, #0xb10
   83c1c:	913ce000 	add	x0, x0, #0xf38
   83c20:	52807de2 	mov	w2, #0x3ef                 	// #1007
   83c24:	940078b7 	bl	a1f00 <assertion_failed>
   83c28:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83c2c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83c30:	912c4021 	add	x1, x1, #0xb10
   83c34:	913d4000 	add	x0, x0, #0xf50
   83c38:	52807e02 	mov	w2, #0x3f0                 	// #1008
   83c3c:	940078b1 	bl	a1f00 <assertion_failed>
   83c40:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83c44:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83c48:	912c4021 	add	x1, x1, #0xb10
   83c4c:	913dc000 	add	x0, x0, #0xf70
   83c50:	52807e22 	mov	w2, #0x3f1                 	// #1009
   83c54:	940078ab 	bl	a1f00 <assertion_failed>
   83c58:	d503201f 	nop
   83c5c:	d503201f 	nop

0000000000083c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>:
   83c60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83c64:	910003fd 	mov	x29, sp
   83c68:	b940fc01 	ldr	w1, [x0, #252]
   83c6c:	7100043f 	cmp	w1, #0x1
   83c70:	540001c9 	b.ls	83ca8 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x48>  // b.plast
   83c74:	b9412002 	ldr	w2, [x0, #288]
   83c78:	6b02003f 	cmp	w1, w2
   83c7c:	54000229 	b.ls	83cc0 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x60>  // b.plast
   83c80:	b9412400 	ldr	w0, [x0, #292]
   83c84:	6b00003f 	cmp	w1, w0
   83c88:	54000289 	b.ls	83cd8 <CSoundBaseDevice::GetReadQueueBytesAvail()+0x78>  // b.plast
   83c8c:	0b020021 	add	w1, w1, w2
   83c90:	6b00005f 	cmp	w2, w0
   83c94:	4b000021 	sub	w1, w1, w0
   83c98:	4b000040 	sub	w0, w2, w0
   83c9c:	1a812000 	csel	w0, w0, w1, cs	// cs = hs, nlast
   83ca0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83ca4:	d65f03c0 	ret
   83ca8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83cac:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83cb0:	912c4021 	add	x1, x1, #0xb10
   83cb4:	913ce000 	add	x0, x0, #0xf38
   83cb8:	52807fa2 	mov	w2, #0x3fd                 	// #1021
   83cbc:	94007891 	bl	a1f00 <assertion_failed>
   83cc0:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83cc4:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83cc8:	912c4021 	add	x1, x1, #0xb10
   83ccc:	913d4000 	add	x0, x0, #0xf50
   83cd0:	52807fc2 	mov	w2, #0x3fe                 	// #1022
   83cd4:	9400788b 	bl	a1f00 <assertion_failed>
   83cd8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83cdc:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83ce0:	912c4021 	add	x1, x1, #0xb10
   83ce4:	913dc000 	add	x0, x0, #0xf70
   83ce8:	52807fe2 	mov	w2, #0x3ff                 	// #1023
   83cec:	94007885 	bl	a1f00 <assertion_failed>

0000000000083cf0 <CSoundBaseDevice::GetReadQueueFramesAvail()>:
   83cf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83cf4:	910003fd 	mov	x29, sp
   83cf8:	b940fc01 	ldr	w1, [x0, #252]
   83cfc:	a90153f3 	stp	x19, x20, [sp, #16]
   83d00:	34000301 	cbz	w1, 83d60 <CSoundBaseDevice::GetReadQueueFramesAvail()+0x70>
   83d04:	b9413801 	ldr	w1, [x0, #312]
   83d08:	aa0003f3 	mov	x19, x0
   83d0c:	35000101 	cbnz	w1, 83d2c <CSoundBaseDevice::GetReadQueueFramesAvail()+0x3c>
   83d10:	97ffffd4 	bl	83c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>
   83d14:	2a0003f4 	mov	w20, w0
   83d18:	b9402e60 	ldr	w0, [x19, #44]
   83d1c:	1ac00a80 	udiv	w0, w20, w0
   83d20:	a94153f3 	ldp	x19, x20, [sp, #16]
   83d24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83d28:	d65f03c0 	ret
   83d2c:	2a0103e0 	mov	w0, w1
   83d30:	9400a4d4 	bl	ad080 <EnterCritical>
   83d34:	aa1303e0 	mov	x0, x19
   83d38:	97ffffca 	bl	83c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>
   83d3c:	b9413a61 	ldr	w1, [x19, #312]
   83d40:	2a0003f4 	mov	w20, w0
   83d44:	34fffea1 	cbz	w1, 83d18 <CSoundBaseDevice::GetReadQueueFramesAvail()+0x28>
   83d48:	9400a4fe 	bl	ad140 <LeaveCritical>
   83d4c:	b9402e60 	ldr	w0, [x19, #44]
   83d50:	1ac00a80 	udiv	w0, w20, w0
   83d54:	a94153f3 	ldp	x19, x20, [sp, #16]
   83d58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83d5c:	d65f03c0 	ret
   83d60:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83d64:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83d68:	912c4021 	add	x1, x1, #0xb10
   83d6c:	91338000 	add	x0, x0, #0xce0
   83d70:	52804c62 	mov	w2, #0x263                 	// #611
   83d74:	94007863 	bl	a1f00 <assertion_failed>
   83d78:	d503201f 	nop
   83d7c:	d503201f 	nop

0000000000083d80 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)>:
   83d80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83d84:	910003fd 	mov	x29, sp
   83d88:	b4000281 	cbz	x1, 83dd8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x58>
   83d8c:	f9408c04 	ldr	x4, [x0, #280]
   83d90:	b4000304 	cbz	x4, 83df0 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x70>
   83d94:	340003a2 	cbz	w2, 83e08 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x88>
   83d98:	b9412003 	ldr	w3, [x0, #288]
   83d9c:	8b224025 	add	x5, x1, w2, uxtw
   83da0:	14000002 	b	83da8 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x28>
   83da4:	f9408c04 	ldr	x4, [x0, #280]
   83da8:	38401422 	ldrb	w2, [x1], #1
   83dac:	38234882 	strb	w2, [x4, w3, uxtw]
   83db0:	b9412003 	ldr	w3, [x0, #288]
   83db4:	b940fc02 	ldr	w2, [x0, #252]
   83db8:	11000463 	add	w3, w3, #0x1
   83dbc:	6b02007f 	cmp	w3, w2
   83dc0:	1a9f1063 	csel	w3, w3, wzr, ne	// ne = any
   83dc4:	b9012003 	str	w3, [x0, #288]
   83dc8:	eb0100bf 	cmp	x5, x1
   83dcc:	54fffec1 	b.ne	83da4 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)+0x24>  // b.any
   83dd0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83dd4:	d65f03c0 	ret
   83dd8:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83ddc:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83de0:	912c4021 	add	x1, x1, #0xb10
   83de4:	91370000 	add	x0, x0, #0xdc0
   83de8:	52808182 	mov	w2, #0x40c                 	// #1036
   83dec:	94007845 	bl	a1f00 <assertion_failed>
   83df0:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83df4:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83df8:	912c4021 	add	x1, x1, #0xb10
   83dfc:	913e6000 	add	x0, x0, #0xf98
   83e00:	528081a2 	mov	w2, #0x40d                 	// #1037
   83e04:	9400783f 	bl	a1f00 <assertion_failed>
   83e08:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83e0c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83e10:	912c4021 	add	x1, x1, #0xb10
   83e14:	91376000 	add	x0, x0, #0xdd8
   83e18:	528081e2 	mov	w2, #0x40f                 	// #1039
   83e1c:	94007839 	bl	a1f00 <assertion_failed>

0000000000083e20 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>:
   83e20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83e24:	910003fd 	mov	x29, sp
   83e28:	a90153f3 	stp	x19, x20, [sp, #16]
   83e2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   83e30:	b4000661 	cbz	x1, 83efc <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xdc>
   83e34:	34000702 	cbz	w2, 83f14 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xf4>
   83e38:	b9401c03 	ldr	w3, [x0, #28]
   83e3c:	aa0103f6 	mov	x22, x1
   83e40:	aa0003f4 	mov	x20, x0
   83e44:	1ac30841 	udiv	w1, w2, w3
   83e48:	1b038821 	msub	w1, w1, w3, w2
   83e4c:	35000701 	cbnz	w1, 83f2c <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x10c>
   83e50:	b9402403 	ldr	w3, [x0, #36]
   83e54:	b9413801 	ldr	w1, [x0, #312]
   83e58:	1b037c53 	mul	w19, w2, w3
   83e5c:	35000221 	cbnz	w1, 83ea0 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x80>
   83e60:	97ffff58 	bl	83bc0 <CSoundBaseDevice::GetReadQueueBytesFree()>
   83e64:	6b13001f 	cmp	w0, w19
   83e68:	2a0003f5 	mov	w21, w0
   83e6c:	1a939013 	csel	w19, w0, w19, ls	// ls = plast
   83e70:	350003b3 	cbnz	w19, 83ee4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xc4>
   83e74:	f9409681 	ldr	x1, [x20, #296]
   83e78:	b40002e1 	cbz	x1, 83ed4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xb4>
   83e7c:	b9410280 	ldr	w0, [x20, #256]
   83e80:	6b0002bf 	cmp	w21, w0
   83e84:	54000282 	b.cs	83ed4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xb4>  // b.hs, b.nlast
   83e88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83e8c:	aa0103f0 	mov	x16, x1
   83e90:	f9409a80 	ldr	x0, [x20, #304]
   83e94:	a94153f3 	ldp	x19, x20, [sp, #16]
   83e98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83e9c:	d61f0200 	br	x16
   83ea0:	2a0103e0 	mov	w0, w1
   83ea4:	9400a477 	bl	ad080 <EnterCritical>
   83ea8:	aa1403e0 	mov	x0, x20
   83eac:	97ffff45 	bl	83bc0 <CSoundBaseDevice::GetReadQueueBytesFree()>
   83eb0:	6b00027f 	cmp	w19, w0
   83eb4:	2a0003f5 	mov	w21, w0
   83eb8:	1a809273 	csel	w19, w19, w0, ls	// ls = plast
   83ebc:	35000153 	cbnz	w19, 83ee4 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xc4>
   83ec0:	b9413a80 	ldr	w0, [x20, #312]
   83ec4:	34fffd80 	cbz	w0, 83e74 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x54>
   83ec8:	9400a49e 	bl	ad140 <LeaveCritical>
   83ecc:	f9409681 	ldr	x1, [x20, #296]
   83ed0:	b5fffd61 	cbnz	x1, 83e7c <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0x5c>
   83ed4:	a94153f3 	ldp	x19, x20, [sp, #16]
   83ed8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83edc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83ee0:	d65f03c0 	ret
   83ee4:	aa1603e1 	mov	x1, x22
   83ee8:	2a1303e2 	mov	w2, w19
   83eec:	aa1403e0 	mov	x0, x20
   83ef0:	4b1302b5 	sub	w21, w21, w19
   83ef4:	97ffffa3 	bl	83d80 <CSoundBaseDevice::ReadEnqueue(void const*, unsigned int)>
   83ef8:	17fffff2 	b	83ec0 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)+0xa0>
   83efc:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83f00:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83f04:	912c4021 	add	x1, x1, #0xb10
   83f08:	91388000 	add	x0, x0, #0xe20
   83f0c:	52807342 	mov	w2, #0x39a                 	// #922
   83f10:	940077fc 	bl	a1f00 <assertion_failed>
   83f14:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83f18:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83f1c:	912c4021 	add	x1, x1, #0xb10
   83f20:	9138c000 	add	x0, x0, #0xe30
   83f24:	52807382 	mov	w2, #0x39c                 	// #924
   83f28:	940077f6 	bl	a1f00 <assertion_failed>
   83f2c:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83f30:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83f34:	912c4021 	add	x1, x1, #0xb10
   83f38:	913ec000 	add	x0, x0, #0xfb0
   83f3c:	528073a2 	mov	w2, #0x39d                 	// #925
   83f40:	940077f0 	bl	a1f00 <assertion_failed>
   83f44:	d503201f 	nop
   83f48:	d503201f 	nop
   83f4c:	d503201f 	nop

0000000000083f50 <CSoundBaseDevice::PutChunk(short const*, unsigned int)>:
   83f50:	b9401003 	ldr	w3, [x0, #16]
   83f54:	7100047f 	cmp	w3, #0x1
   83f58:	54000041 	b.ne	83f60 <CSoundBaseDevice::PutChunk(short const*, unsigned int)+0x10>  // b.any
   83f5c:	17ffffb1 	b	83e20 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>
   83f60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83f64:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83f68:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83f6c:	910003fd 	mov	x29, sp
   83f70:	912c4021 	add	x1, x1, #0xb10
   83f74:	9139e000 	add	x0, x0, #0xe78
   83f78:	52807142 	mov	w2, #0x38a                 	// #906
   83f7c:	940077e1 	bl	a1f00 <assertion_failed>

0000000000083f80 <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)>:
   83f80:	b9401003 	ldr	w3, [x0, #16]
   83f84:	51000863 	sub	w3, w3, #0x2
   83f88:	7100047f 	cmp	w3, #0x1
   83f8c:	54000048 	b.hi	83f94 <CSoundBaseDevice::PutChunk(unsigned int const*, unsigned int)+0x14>  // b.pmore
   83f90:	17ffffa4 	b	83e20 <CSoundBaseDevice::PutChunkInternal(void const*, unsigned int)>
   83f94:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83f98:	f0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   83f9c:	f0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   83fa0:	910003fd 	mov	x29, sp
   83fa4:	912c4021 	add	x1, x1, #0xb10
   83fa8:	913f6000 	add	x0, x0, #0xfd8
   83fac:	52807222 	mov	w2, #0x391                 	// #913
   83fb0:	940077d4 	bl	a1f00 <assertion_failed>
   83fb4:	d503201f 	nop
   83fb8:	d503201f 	nop
   83fbc:	d503201f 	nop

0000000000083fc0 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>:
   83fc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83fc4:	910003fd 	mov	x29, sp
   83fc8:	b4000281 	cbz	x1, 84018 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x58>
   83fcc:	f9408c04 	ldr	x4, [x0, #280]
   83fd0:	b4000304 	cbz	x4, 84030 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x70>
   83fd4:	340003a2 	cbz	w2, 84048 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x88>
   83fd8:	b9412403 	ldr	w3, [x0, #292]
   83fdc:	8b224025 	add	x5, x1, w2, uxtw
   83fe0:	14000002 	b	83fe8 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x28>
   83fe4:	f9408c04 	ldr	x4, [x0, #280]
   83fe8:	38634882 	ldrb	w2, [x4, w3, uxtw]
   83fec:	38001422 	strb	w2, [x1], #1
   83ff0:	b9412403 	ldr	w3, [x0, #292]
   83ff4:	b940fc02 	ldr	w2, [x0, #252]
   83ff8:	11000463 	add	w3, w3, #0x1
   83ffc:	6b02007f 	cmp	w3, w2
   84000:	1a9f1063 	csel	w3, w3, wzr, ne	// ne = any
   84004:	b9012403 	str	w3, [x0, #292]
   84008:	eb0100bf 	cmp	x5, x1
   8400c:	54fffec1 	b.ne	83fe4 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x24>  // b.any
   84010:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84014:	d65f03c0 	ret
   84018:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8401c:	d0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   84020:	912c4021 	add	x1, x1, #0xb10
   84024:	91370000 	add	x0, x0, #0xdc0
   84028:	528083c2 	mov	w2, #0x41e                 	// #1054
   8402c:	940077b5 	bl	a1f00 <assertion_failed>
   84030:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   84034:	d0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   84038:	912c4021 	add	x1, x1, #0xb10
   8403c:	913e6000 	add	x0, x0, #0xf98
   84040:	528083e2 	mov	w2, #0x41f                 	// #1055
   84044:	940077af 	bl	a1f00 <assertion_failed>
   84048:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   8404c:	d0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   84050:	912c4021 	add	x1, x1, #0xb10
   84054:	91376000 	add	x0, x0, #0xdd8
   84058:	52808422 	mov	w2, #0x421                 	// #1057
   8405c:	940077a9 	bl	a1f00 <assertion_failed>

0000000000084060 <CSoundBaseDevice::Read(void*, unsigned long)>:
   84060:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   84064:	910003fd 	mov	x29, sp
   84068:	a90153f3 	stp	x19, x20, [sp, #16]
   8406c:	aa0103f4 	mov	x20, x1
   84070:	b9410401 	ldr	w1, [x0, #260]
   84074:	a9025bf5 	stp	x21, x22, [sp, #32]
   84078:	7100143f 	cmp	w1, #0x5
   8407c:	a90363f7 	stp	x23, x24, [sp, #48]
   84080:	5400186c 	b.gt	8438c <CSoundBaseDevice::Read(void*, unsigned long)+0x32c>
   84084:	b4001934 	cbz	x20, 843a8 <CSoundBaseDevice::Read(void*, unsigned long)+0x348>
   84088:	aa0003f3 	mov	x19, x0
   8408c:	b9413800 	ldr	w0, [x0, #312]
   84090:	aa0203f7 	mov	x23, x2
   84094:	350014c0 	cbnz	w0, 8432c <CSoundBaseDevice::Read(void*, unsigned long)+0x2cc>
   84098:	b9401260 	ldr	w0, [x19, #16]
   8409c:	b9401e76 	ldr	w22, [x19, #28]
   840a0:	b9410a75 	ldr	w21, [x19, #264]
   840a4:	6b01001f 	cmp	w0, w1
   840a8:	540011e0 	b.eq	842e4 <CSoundBaseDevice::Read(void*, unsigned long)+0x284>  // b.none
   840ac:	71000adf 	cmp	w22, #0x2
   840b0:	54000ac0 	b.eq	84208 <CSoundBaseDevice::Read(void*, unsigned long)+0x1a8>  // b.none
   840b4:	6b1602bf 	cmp	w21, w22
   840b8:	54000f62 	b.cs	842a4 <CSoundBaseDevice::Read(void*, unsigned long)+0x244>  // b.hs, b.nlast
   840bc:	b9411660 	ldr	w0, [x19, #276]
   840c0:	eb17001f 	cmp	x0, x23
   840c4:	54001808 	b.hi	843c4 <CSoundBaseDevice::Read(void*, unsigned long)+0x364>  // b.pmore
   840c8:	910163f6 	add	x22, sp, #0x58
   840cc:	a9046bf9 	stp	x25, x26, [sp, #64]
   840d0:	910183f9 	add	x25, sp, #0x60
   840d4:	52800018 	mov	w24, #0x0                   	// #0
   840d8:	aa1303e0 	mov	x0, x19
   840dc:	97fffee1 	bl	83c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>
   840e0:	b9402e62 	ldr	w2, [x19, #44]
   840e4:	6b02001f 	cmp	w0, w2
   840e8:	540007e3 	b.cc	841e4 <CSoundBaseDevice::Read(void*, unsigned long)+0x184>  // b.lo, b.ul, b.last
   840ec:	aa1903e1 	mov	x1, x25
   840f0:	aa1303e0 	mov	x0, x19
   840f4:	97ffffb3 	bl	83fc0 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
   840f8:	5280001a 	mov	w26, #0x0                   	// #0
   840fc:	aa1903e2 	mov	x2, x25
   84100:	52800001 	mov	w1, #0x0                   	// #0
   84104:	350001b5 	cbnz	w21, 84138 <CSoundBaseDevice::Read(void*, unsigned long)+0xd8>
   84108:	14000024 	b	84198 <CSoundBaseDevice::Read(void*, unsigned long)+0x138>
   8410c:	51000863 	sub	w3, w3, #0x2
   84110:	7100047f 	cmp	w3, #0x1
   84114:	54001688 	b.hi	843e4 <CSoundBaseDevice::Read(void*, unsigned long)+0x384>  // b.pmore
   84118:	b9000280 	str	w0, [x20]
   8411c:	b9402660 	ldr	w0, [x19, #36]
   84120:	11000421 	add	w1, w1, #0x1
   84124:	b9411263 	ldr	w3, [x19, #272]
   84128:	6b15003f 	cmp	w1, w21
   8412c:	8b000042 	add	x2, x2, x0
   84130:	8b030294 	add	x20, x20, x3
   84134:	54000300 	b.eq	84194 <CSoundBaseDevice::Read(void*, unsigned long)+0x134>  // b.none
   84138:	b9401260 	ldr	w0, [x19, #16]
   8413c:	7100081f 	cmp	w0, #0x2
   84140:	54000cc0 	b.eq	842d8 <CSoundBaseDevice::Read(void*, unsigned long)+0x278>  // b.none
   84144:	71000c1f 	cmp	w0, #0x3
   84148:	54000ba0 	b.eq	842bc <CSoundBaseDevice::Read(void*, unsigned long)+0x25c>  // b.none
   8414c:	7100041f 	cmp	w0, #0x1
   84150:	540013e1 	b.ne	843cc <CSoundBaseDevice::Read(void*, unsigned long)+0x36c>  // b.any
   84154:	79c00040 	ldrsh	w0, [x2]
   84158:	53185c00 	lsl	w0, w0, #8
   8415c:	b9410663 	ldr	w3, [x19, #260]
   84160:	7100047f 	cmp	w3, #0x1
   84164:	54000b40 	b.eq	842cc <CSoundBaseDevice::Read(void*, unsigned long)+0x26c>  // b.none
   84168:	54fffd28 	b.hi	8410c <CSoundBaseDevice::Read(void*, unsigned long)+0xac>  // b.pmore
   8416c:	53107c00 	lsr	w0, w0, #16
   84170:	11000421 	add	w1, w1, #0x1
   84174:	51020000 	sub	w0, w0, #0x80
   84178:	39000280 	strb	w0, [x20]
   8417c:	6b15003f 	cmp	w1, w21
   84180:	b9402660 	ldr	w0, [x19, #36]
   84184:	b9411263 	ldr	w3, [x19, #272]
   84188:	8b000042 	add	x2, x2, x0
   8418c:	8b030294 	add	x20, x20, x3
   84190:	54fffd41 	b.ne	84138 <CSoundBaseDevice::Read(void*, unsigned long)+0xd8>  // b.any
   84194:	2a1503fa 	mov	w26, w21
   84198:	b9410a60 	ldr	w0, [x19, #264]
   8419c:	6b1a001f 	cmp	w0, w26
   841a0:	54000169 	b.ls	841cc <CSoundBaseDevice::Read(void*, unsigned long)+0x16c>  // b.plast
   841a4:	b9411262 	ldr	w2, [x19, #272]
   841a8:	aa1403e0 	mov	x0, x20
   841ac:	aa1603e1 	mov	x1, x22
   841b0:	94009c06 	bl	ab1c8 <memcpy>
   841b4:	1100075a 	add	w26, w26, #0x1
   841b8:	b9410a60 	ldr	w0, [x19, #264]
   841bc:	b9411262 	ldr	w2, [x19, #272]
   841c0:	6b1a001f 	cmp	w0, w26
   841c4:	8b020294 	add	x20, x20, x2
   841c8:	54ffff08 	b.hi	841a8 <CSoundBaseDevice::Read(void*, unsigned long)+0x148>  // b.pmore
   841cc:	b9411661 	ldr	w1, [x19, #276]
   841d0:	2a0103e0 	mov	w0, w1
   841d4:	0b010318 	add	w24, w24, w1
   841d8:	cb0002f7 	sub	x23, x23, x0
   841dc:	eb17001f 	cmp	x0, x23
   841e0:	54fff7c9 	b.ls	840d8 <CSoundBaseDevice::Read(void*, unsigned long)+0x78>  // b.plast
   841e4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   841e8:	b9413a60 	ldr	w0, [x19, #312]
   841ec:	35000a60 	cbnz	w0, 84338 <CSoundBaseDevice::Read(void*, unsigned long)+0x2d8>
   841f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   841f4:	2a1803e0 	mov	w0, w24
   841f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   841fc:	a94363f7 	ldp	x23, x24, [sp, #48]
   84200:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   84204:	d65f03c0 	ret
   84208:	71000abf 	cmp	w21, #0x2
   8420c:	540004c8 	b.hi	842a4 <CSoundBaseDevice::Read(void*, unsigned long)+0x244>  // b.pmore
   84210:	b9411660 	ldr	w0, [x19, #276]
   84214:	910183f5 	add	x21, sp, #0x60
   84218:	52800018 	mov	w24, #0x0                   	// #0
   8421c:	eb0002ff 	cmp	x23, x0
   84220:	540001c2 	b.cs	84258 <CSoundBaseDevice::Read(void*, unsigned long)+0x1f8>  // b.hs, b.nlast
   84224:	17fffff1 	b	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>
   84228:	aa1503e2 	mov	x2, x21
   8422c:	aa1403e1 	mov	x1, x20
   84230:	aa1303e0 	mov	x0, x19
   84234:	97fffe2f 	bl	83af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
   84238:	b9411260 	ldr	w0, [x19, #272]
   8423c:	8b000294 	add	x20, x20, x0
   84240:	b9411661 	ldr	w1, [x19, #276]
   84244:	2a0103e0 	mov	w0, w1
   84248:	0b010318 	add	w24, w24, w1
   8424c:	cb0002f7 	sub	x23, x23, x0
   84250:	eb17001f 	cmp	x0, x23
   84254:	54fffca8 	b.hi	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>  // b.pmore
   84258:	aa1303e0 	mov	x0, x19
   8425c:	97fffe81 	bl	83c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>
   84260:	b9402e62 	ldr	w2, [x19, #44]
   84264:	6b02001f 	cmp	w0, w2
   84268:	54fffc03 	b.cc	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>  // b.lo, b.ul, b.last
   8426c:	aa1303e0 	mov	x0, x19
   84270:	aa1503e1 	mov	x1, x21
   84274:	97ffff53 	bl	83fc0 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
   84278:	b9410a60 	ldr	w0, [x19, #264]
   8427c:	7100081f 	cmp	w0, #0x2
   84280:	540006a0 	b.eq	84354 <CSoundBaseDevice::Read(void*, unsigned long)+0x2f4>  // b.none
   84284:	39443260 	ldrb	w0, [x19, #268]
   84288:	3707fd00 	tbnz	w0, #0, 84228 <CSoundBaseDevice::Read(void*, unsigned long)+0x1c8>
   8428c:	b9402662 	ldr	w2, [x19, #36]
   84290:	aa1403e1 	mov	x1, x20
   84294:	aa1303e0 	mov	x0, x19
   84298:	8b0202a2 	add	x2, x21, x2
   8429c:	97fffe15 	bl	83af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
   842a0:	17ffffe6 	b	84238 <CSoundBaseDevice::Read(void*, unsigned long)+0x1d8>
   842a4:	91010262 	add	x2, x19, #0x40
   842a8:	910163e1 	add	x1, sp, #0x58
   842ac:	aa1303e0 	mov	x0, x19
   842b0:	2a1603f5 	mov	w21, w22
   842b4:	97fffe0f 	bl	83af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
   842b8:	17ffff81 	b	840bc <CSoundBaseDevice::Read(void*, unsigned long)+0x5c>
   842bc:	b9410663 	ldr	w3, [x19, #260]
   842c0:	b9400040 	ldr	w0, [x2]
   842c4:	7100047f 	cmp	w3, #0x1
   842c8:	54fff501 	b.ne	84168 <CSoundBaseDevice::Read(void*, unsigned long)+0x108>  // b.any
   842cc:	53087c00 	lsr	w0, w0, #8
   842d0:	79000280 	strh	w0, [x20]
   842d4:	17ffff92 	b	8411c <CSoundBaseDevice::Read(void*, unsigned long)+0xbc>
   842d8:	b9400040 	ldr	w0, [x2]
   842dc:	12005c00 	and	w0, w0, #0xffffff
   842e0:	17ffff9f 	b	8415c <CSoundBaseDevice::Read(void*, unsigned long)+0xfc>
   842e4:	6b1602bf 	cmp	w21, w22
   842e8:	54ffee21 	b.ne	840ac <CSoundBaseDevice::Read(void*, unsigned long)+0x4c>  // b.any
   842ec:	aa1303e0 	mov	x0, x19
   842f0:	97fffe5c 	bl	83c60 <CSoundBaseDevice::GetReadQueueBytesAvail()>
   842f4:	b9411662 	ldr	w2, [x19, #276]
   842f8:	eb2042ff 	cmp	x23, w0, uxtw
   842fc:	1a972000 	csel	w0, w0, w23, cs	// cs = hs, nlast
   84300:	52800018 	mov	w24, #0x0                   	// #0
   84304:	1ac20801 	udiv	w1, w0, w2
   84308:	1b028021 	msub	w1, w1, w2, w0
   8430c:	6b010015 	subs	w21, w0, w1
   84310:	54fff6c0 	b.eq	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>  // b.none
   84314:	aa1403e1 	mov	x1, x20
   84318:	2a1503e2 	mov	w2, w21
   8431c:	aa1303e0 	mov	x0, x19
   84320:	2a1503f8 	mov	w24, w21
   84324:	97ffff27 	bl	83fc0 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)>
   84328:	17ffffb0 	b	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>
   8432c:	9400a355 	bl	ad080 <EnterCritical>
   84330:	b9410661 	ldr	w1, [x19, #260]
   84334:	17ffff59 	b	84098 <CSoundBaseDevice::Read(void*, unsigned long)+0x38>
   84338:	9400a382 	bl	ad140 <LeaveCritical>
   8433c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84340:	2a1803e0 	mov	w0, w24
   84344:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84348:	a94363f7 	ldp	x23, x24, [sp, #48]
   8434c:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   84350:	d65f03c0 	ret
   84354:	aa1403e1 	mov	x1, x20
   84358:	aa1503e2 	mov	x2, x21
   8435c:	aa1303e0 	mov	x0, x19
   84360:	97fffde4 	bl	83af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
   84364:	b9411276 	ldr	w22, [x19, #272]
   84368:	aa1303e0 	mov	x0, x19
   8436c:	b9402662 	ldr	w2, [x19, #36]
   84370:	8b160296 	add	x22, x20, x22
   84374:	aa1603e1 	mov	x1, x22
   84378:	8b0202a2 	add	x2, x21, x2
   8437c:	97fffddd 	bl	83af0 <CSoundBaseDevice::ConvertReadSoundFormat(void*, void const*)>
   84380:	b9411274 	ldr	w20, [x19, #272]
   84384:	8b1402d4 	add	x20, x22, x20
   84388:	17ffffae 	b	84240 <CSoundBaseDevice::Read(void*, unsigned long)+0x1e0>
   8438c:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   84390:	f0000160 	adrp	x0, b3000 <_etext+0x9c8>
   84394:	912c4021 	add	x1, x1, #0xb10
   84398:	9100a000 	add	x0, x0, #0x28
   8439c:	52803d62 	mov	w2, #0x1eb                 	// #491
   843a0:	a9046bf9 	stp	x25, x26, [sp, #64]
   843a4:	940076d7 	bl	a1f00 <assertion_failed>
   843a8:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   843ac:	d0000160 	adrp	x0, b2000 <SErrorStub+0xc>
   843b0:	912c4021 	add	x1, x1, #0xb10
   843b4:	91384000 	add	x0, x0, #0xe10
   843b8:	52803da2 	mov	w2, #0x1ed                 	// #493
   843bc:	a9046bf9 	stp	x25, x26, [sp, #64]
   843c0:	940076d0 	bl	a1f00 <assertion_failed>
   843c4:	52800018 	mov	w24, #0x0                   	// #0
   843c8:	17ffff88 	b	841e8 <CSoundBaseDevice::Read(void*, unsigned long)+0x188>
   843cc:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   843d0:	f0000160 	adrp	x0, b3000 <_etext+0x9c8>
   843d4:	912c4021 	add	x1, x1, #0xb10
   843d8:	9135c000 	add	x0, x0, #0xd70
   843dc:	52807a02 	mov	w2, #0x3d0                 	// #976
   843e0:	940076c8 	bl	a1f00 <assertion_failed>
   843e4:	d0000161 	adrp	x1, b2000 <SErrorStub+0xc>
   843e8:	f0000160 	adrp	x0, b3000 <_etext+0x9c8>
   843ec:	912c4021 	add	x1, x1, #0xb10
   843f0:	9135c000 	add	x0, x0, #0xd70
   843f4:	52807d02 	mov	w2, #0x3e8                 	// #1000
   843f8:	940076c2 	bl	a1f00 <assertion_failed>
   843fc:	00000000 	udf	#0

0000000000084400 <CSoundBaseDevice::GetController()>:
   84400:	d2800000 	mov	x0, #0x0                   	// #0
   84404:	d65f03c0 	ret
	...

0000000000084410 <CHDMISoundBaseDevice::IsActive() const>:
   84410:	aa0003e1 	mov	x1, x0
   84414:	b9416c00 	ldr	w0, [x0, #364]
   84418:	7100081f 	cmp	w0, #0x2
   8441c:	54000120 	b.eq	84440 <CHDMISoundBaseDevice::IsActive() const+0x30>  // b.none
   84420:	b9416c22 	ldr	w2, [x1, #364]
   84424:	52800020 	mov	w0, #0x1                   	// #1
   84428:	71000c5f 	cmp	w2, #0x3
   8442c:	54000080 	b.eq	8443c <CHDMISoundBaseDevice::IsActive() const+0x2c>  // b.none
   84430:	b9416c20 	ldr	w0, [x1, #364]
   84434:	7100101f 	cmp	w0, #0x4
   84438:	1a9f17e0 	cset	w0, eq	// eq = none
   8443c:	d65f03c0 	ret
   84440:	52800020 	mov	w0, #0x1                   	// #1
   84444:	d65f03c0 	ret
   84448:	d503201f 	nop
   8444c:	d503201f 	nop

0000000000084450 <CHDMISoundBaseDevice::Cancel()>:
   84450:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84454:	910003fd 	mov	x29, sp
   84458:	f9000bf3 	str	x19, [sp, #16]
   8445c:	aa0003f3 	mov	x19, x0
   84460:	39458000 	ldrb	w0, [x0, #352]
   84464:	37000280 	tbnz	w0, #0, 844b4 <CHDMISoundBaseDevice::Cancel()+0x64>
   84468:	b941ae60 	ldr	w0, [x19, #428]
   8446c:	35000120 	cbnz	w0, 84490 <CHDMISoundBaseDevice::Cancel()+0x40>
   84470:	b9416e60 	ldr	w0, [x19, #364]
   84474:	7100081f 	cmp	w0, #0x2
   84478:	54000061 	b.ne	84484 <CHDMISoundBaseDevice::Cancel()+0x34>  // b.any
   8447c:	52800060 	mov	w0, #0x3                   	// #3
   84480:	b9016e60 	str	w0, [x19, #364]
   84484:	f9400bf3 	ldr	x19, [sp, #16]
   84488:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8448c:	d65f03c0 	ret
   84490:	9400a2fc 	bl	ad080 <EnterCritical>
   84494:	b9416e60 	ldr	w0, [x19, #364]
   84498:	7100081f 	cmp	w0, #0x2
   8449c:	b941ae60 	ldr	w0, [x19, #428]
   844a0:	540002c0 	b.eq	844f8 <CHDMISoundBaseDevice::Cancel()+0xa8>  // b.none
   844a4:	34ffff00 	cbz	w0, 84484 <CHDMISoundBaseDevice::Cancel()+0x34>
   844a8:	f9400bf3 	ldr	x19, [sp, #16]
   844ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   844b0:	1400a324 	b	ad140 <LeaveCritical>
   844b4:	b9416e60 	ldr	w0, [x19, #364]
   844b8:	7100081f 	cmp	w0, #0x2
   844bc:	54fffe41 	b.ne	84484 <CHDMISoundBaseDevice::Cancel()+0x34>  // b.any
   844c0:	d2900280 	mov	x0, #0x8014                	// #32788
   844c4:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   844c8:	529000c3 	mov	w3, #0x8006                	// #32774
   844cc:	d2845881 	mov	x1, #0x22c4                	// #8900
   844d0:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   844d4:	b9000003 	str	w3, [x0]
   844d8:	52800022 	mov	w2, #0x1                   	// #1
   844dc:	b9400020 	ldr	w0, [x1]
   844e0:	32070000 	orr	w0, w0, #0x2000000
   844e4:	b9000020 	str	w0, [x1]
   844e8:	b9016e62 	str	w2, [x19, #364]
   844ec:	f9400bf3 	ldr	x19, [sp, #16]
   844f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   844f4:	d65f03c0 	ret
   844f8:	52800061 	mov	w1, #0x3                   	// #3
   844fc:	b9016e61 	str	w1, [x19, #364]
   84500:	35fffd40 	cbnz	w0, 844a8 <CHDMISoundBaseDevice::Cancel()+0x58>
   84504:	17ffffe0 	b	84484 <CHDMISoundBaseDevice::Cancel()+0x34>
   84508:	d503201f 	nop
   8450c:	d503201f 	nop

0000000000084510 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(unsigned int)>:
   84510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84514:	2a0103e3 	mov	w3, w1
   84518:	52800002 	mov	w2, #0x0                   	// #0
   8451c:	910003fd 	mov	x29, sp
   84520:	a90153f3 	stp	x19, x20, [sp, #16]
   84524:	aa0003f3 	mov	x19, x0
   84528:	2a0103f4 	mov	w20, w1
   8452c:	52800004 	mov	w4, #0x0                   	// #0
   84530:	528000a1 	mov	w1, #0x5                   	// #5
   84534:	97fff923 	bl	829c0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
   84538:	f900a27f 	str	xzr, [x19, #320]
   8453c:	90000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   84540:	913f6000 	add	x0, x0, #0xfd8
   84544:	52800023 	mov	w3, #0x1                   	// #1
   84548:	52800162 	mov	w2, #0xb                   	// #11
   8454c:	52800021 	mov	w1, #0x1                   	// #1
   84550:	f9000260 	str	x0, [x19]
   84554:	b9014a74 	str	w20, [x19, #328]
   84558:	b9014e7f 	str	wzr, [x19, #332]
   8455c:	a9157e7f 	stp	xzr, xzr, [x19, #336]
   84560:	39058263 	strb	w3, [x19, #352]
   84564:	b901667f 	str	wzr, [x19, #356]
   84568:	3905a27f 	strb	wzr, [x19, #360]
   8456c:	b9016e7f 	str	wzr, [x19, #364]
   84570:	b9017262 	str	w2, [x19, #368]
   84574:	b901ae61 	str	w1, [x19, #428]
   84578:	34000154 	cbz	w20, 845a0 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(unsigned int)+0x90>
   8457c:	94007a4d 	bl	a2eb0 <CDeviceNameService::Get()>
   84580:	aa1303e2 	mov	x2, x19
   84584:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84588:	910a4021 	add	x1, x1, #0x290
   8458c:	52800003 	mov	w3, #0x0                   	// #0
   84590:	a94153f3 	ldp	x19, x20, [sp, #16]
   84594:	9100c021 	add	x1, x1, #0x30
   84598:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8459c:	14007955 	b	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   845a0:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   845a4:	910a4021 	add	x1, x1, #0x290
   845a8:	91006020 	add	x0, x1, #0x18
   845ac:	52801482 	mov	w2, #0xa4                  	// #164
   845b0:	94007654 	bl	a1f00 <assertion_failed>
   845b4:	d503201f 	nop
   845b8:	d503201f 	nop
   845bc:	d503201f 	nop

00000000000845c0 <CHDMISoundBaseDevice::IsWritable()>:
   845c0:	39458000 	ldrb	w0, [x0, #352]
   845c4:	360000e0 	tbz	w0, #0, 845e0 <CHDMISoundBaseDevice::IsWritable()+0x20>
   845c8:	d2900280 	mov	x0, #0x8014                	// #32788
   845cc:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   845d0:	b9400000 	ldr	w0, [x0]
   845d4:	d2750000 	eor	x0, x0, #0x800
   845d8:	530b2c00 	ubfx	w0, w0, #11, #1
   845dc:	d65f03c0 	ret
   845e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   845e4:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   845e8:	910a4021 	add	x1, x1, #0x290
   845ec:	910003fd 	mov	x29, sp
   845f0:	9100e020 	add	x0, x1, #0x38
   845f4:	52803602 	mov	w2, #0x1b0                 	// #432
   845f8:	94007642 	bl	a1f00 <assertion_failed>
   845fc:	d503201f 	nop

0000000000084600 <CHDMISoundBaseDevice::WriteSample(int)>:
   84600:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84604:	910003fd 	mov	x29, sp
   84608:	39458002 	ldrb	w2, [x0, #352]
   8460c:	f9000bf3 	str	x19, [sp, #16]
   84610:	360001e2 	tbz	w2, #0, 8464c <CHDMISoundBaseDevice::WriteSample(int)+0x4c>
   84614:	b9416402 	ldr	w2, [x0, #356]
   84618:	aa0003f3 	mov	x19, x0
   8461c:	53017c42 	lsr	w2, w2, #1
   84620:	97fffa7c 	bl	83010 <CSoundBaseDevice::ConvertIEC958Sample(unsigned int, unsigned int)>
   84624:	d2900401 	mov	x1, #0x8020                	// #32800
   84628:	f2a7f001 	movk	x1, #0x3f80, lsl #16
   8462c:	b9000020 	str	w0, [x1]
   84630:	b9416660 	ldr	w0, [x19, #356]
   84634:	7105fc1f 	cmp	w0, #0x17f
   84638:	1a8007e0 	csinc	w0, wzr, w0, eq	// eq = none
   8463c:	b9016660 	str	w0, [x19, #356]
   84640:	f9400bf3 	ldr	x19, [sp, #16]
   84644:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84648:	d65f03c0 	ret
   8464c:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84650:	910a4021 	add	x1, x1, #0x290
   84654:	9100e020 	add	x0, x1, #0x38
   84658:	528037a2 	mov	w2, #0x1bd                 	// #445
   8465c:	94007629 	bl	a1f00 <assertion_failed>

0000000000084660 <CHDMISoundBaseDevice::GetNextChunk()>:
   84660:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84664:	910003fd 	mov	x29, sp
   84668:	b941a801 	ldr	w1, [x0, #424]
   8466c:	8b010c01 	add	x1, x0, x1, lsl #3
   84670:	f940bc21 	ldr	x1, [x1, #376]
   84674:	f9000bf3 	str	x19, [sp, #16]
   84678:	b4000541 	cbz	x1, 84720 <CHDMISoundBaseDevice::GetNextChunk()+0xc0>
   8467c:	f9400003 	ldr	x3, [x0]
   84680:	aa0003f3 	mov	x19, x0
   84684:	b9414c02 	ldr	w2, [x0, #332]
   84688:	f9403c63 	ldr	x3, [x3, #120]
   8468c:	d63f0060 	blr	x3
   84690:	34000360 	cbz	w0, 846fc <CHDMISoundBaseDevice::GetNextChunk()+0x9c>
   84694:	531e7400 	lsl	w0, w0, #2
   84698:	529fffe1 	mov	w1, #0xffff                	// #65535
   8469c:	6b01001f 	cmp	w0, w1
   846a0:	540004a8 	b.hi	84734 <CHDMISoundBaseDevice::GetNextChunk()+0xd4>  // b.pmore
   846a4:	b941aa61 	ldr	w1, [x19, #424]
   846a8:	8b010e61 	add	x1, x19, x1, lsl #3
   846ac:	f940cc21 	ldr	x1, [x1, #408]
   846b0:	b40002e1 	cbz	x1, 8470c <CHDMISoundBaseDevice::GetNextChunk()+0xac>
   846b4:	b9000c20 	str	w0, [x1, #12]
   846b8:	2a0003e1 	mov	w1, w0
   846bc:	b941aa60 	ldr	w0, [x19, #424]
   846c0:	8b000e60 	add	x0, x19, x0, lsl #3
   846c4:	f940bc00 	ldr	x0, [x0, #376]
   846c8:	9400a38e 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   846cc:	b941aa60 	ldr	w0, [x19, #424]
   846d0:	d2800401 	mov	x1, #0x20                  	// #32
   846d4:	8b000e60 	add	x0, x19, x0, lsl #3
   846d8:	f940cc00 	ldr	x0, [x0, #408]
   846dc:	9400a389 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   846e0:	b941aa61 	ldr	w1, [x19, #424]
   846e4:	52800020 	mov	w0, #0x1                   	// #1
   846e8:	4a000021 	eor	w1, w1, w0
   846ec:	b901aa61 	str	w1, [x19, #424]
   846f0:	f9400bf3 	ldr	x19, [sp, #16]
   846f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   846f8:	d65f03c0 	ret
   846fc:	f9400bf3 	ldr	x19, [sp, #16]
   84700:	52800000 	mov	w0, #0x0                   	// #0
   84704:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84708:	d65f03c0 	ret
   8470c:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84710:	910a4021 	add	x1, x1, #0x290
   84714:	91026020 	add	x0, x1, #0x98
   84718:	52803b02 	mov	w2, #0x1d8                 	// #472
   8471c:	940075f9 	bl	a1f00 <assertion_failed>
   84720:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84724:	910a4021 	add	x1, x1, #0x290
   84728:	91012020 	add	x0, x1, #0x48
   8472c:	528039a2 	mov	w2, #0x1cd                 	// #461
   84730:	940075f4 	bl	a1f00 <assertion_failed>
   84734:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84738:	910a4021 	add	x1, x1, #0x290
   8473c:	9101c020 	add	x0, x1, #0x70
   84740:	52803ac2 	mov	w2, #0x1d6                 	// #470
   84744:	940075ef 	bl	a1f00 <assertion_failed>
   84748:	d503201f 	nop
   8474c:	d503201f 	nop

0000000000084750 <CHDMISoundBaseDevice::StopHDMI()>:
   84750:	d2900280 	mov	x0, #0x8014                	// #32788
   84754:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   84758:	529000c2 	mov	w2, #0x8006                	// #32774
   8475c:	d2845881 	mov	x1, #0x22c4                	// #8900
   84760:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   84764:	b9000002 	str	w2, [x0]
   84768:	b9400020 	ldr	w0, [x1]
   8476c:	32070000 	orr	w0, w0, #0x2000000
   84770:	b9000020 	str	w0, [x1]
   84774:	d65f03c0 	ret
   84778:	d503201f 	nop
   8477c:	d503201f 	nop

0000000000084780 <CHDMISoundBaseDevice::InterruptHandler()>:
   84780:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84784:	910003fd 	mov	x29, sp
   84788:	f9000bf3 	str	x19, [sp, #16]
   8478c:	aa0003f3 	mov	x19, x0
   84790:	b9416c00 	ldr	w0, [x0, #364]
   84794:	7100041f 	cmp	w0, #0x1
   84798:	54000900 	b.eq	848b8 <CHDMISoundBaseDevice::InterruptHandler()+0x138>  // b.none
   8479c:	b9417261 	ldr	w1, [x19, #368]
   847a0:	71002c3f 	cmp	w1, #0xb
   847a4:	54000948 	b.hi	848cc <CHDMISoundBaseDevice::InterruptHandler()+0x14c>  // b.pmore
   847a8:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   847ac:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   847b0:	52800020 	mov	w0, #0x1                   	// #1
   847b4:	1ac12000 	lsl	w0, w0, w1
   847b8:	b9400041 	ldr	w1, [x2]
   847bc:	6a01001f 	tst	w0, w1
   847c0:	54000900 	b.eq	848e0 <CHDMISoundBaseDevice::InterruptHandler()+0x160>  // b.none
   847c4:	b9000040 	str	w0, [x2]
   847c8:	b9417260 	ldr	w0, [x19, #368]
   847cc:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   847d0:	1101c000 	add	w0, w0, #0x70
   847d4:	53185c00 	lsl	w0, w0, #8
   847d8:	b9400001 	ldr	w1, [x0]
   847dc:	361008c1 	tbz	w1, #2, 848f4 <CHDMISoundBaseDevice::InterruptHandler()+0x174>
   847e0:	b9000001 	str	w1, [x0]
   847e4:	37400321 	tbnz	w1, #8, 84848 <CHDMISoundBaseDevice::InterruptHandler()+0xc8>
   847e8:	b941ae60 	ldr	w0, [x19, #428]
   847ec:	35000620 	cbnz	w0, 848b0 <CHDMISoundBaseDevice::InterruptHandler()+0x130>
   847f0:	b9416e60 	ldr	w0, [x19, #364]
   847f4:	71000c1f 	cmp	w0, #0x3
   847f8:	54000100 	b.eq	84818 <CHDMISoundBaseDevice::InterruptHandler()+0x98>  // b.none
   847fc:	7100101f 	cmp	w0, #0x4
   84800:	54000400 	b.eq	84880 <CHDMISoundBaseDevice::InterruptHandler()+0x100>  // b.none
   84804:	7100081f 	cmp	w0, #0x2
   84808:	54000801 	b.ne	84908 <CHDMISoundBaseDevice::InterruptHandler()+0x188>  // b.any
   8480c:	aa1303e0 	mov	x0, x19
   84810:	97ffff94 	bl	84660 <CHDMISoundBaseDevice::GetNextChunk()>
   84814:	37000100 	tbnz	w0, #0, 84834 <CHDMISoundBaseDevice::InterruptHandler()+0xb4>
   84818:	b9417260 	ldr	w0, [x19, #368]
   8481c:	528e0382 	mov	w2, #0x701c                	// #28700
   84820:	72a7e002 	movk	w2, #0x3f00, lsl #16
   84824:	52800081 	mov	w1, #0x4                   	// #4
   84828:	0b002040 	add	w0, w2, w0, lsl #8
   8482c:	b900001f 	str	wzr, [x0]
   84830:	b9016e61 	str	w1, [x19, #364]
   84834:	b941ae60 	ldr	w0, [x19, #428]
   84838:	340001e0 	cbz	w0, 84874 <CHDMISoundBaseDevice::InterruptHandler()+0xf4>
   8483c:	f9400bf3 	ldr	x19, [sp, #16]
   84840:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84844:	1400a23f 	b	ad140 <LeaveCritical>
   84848:	d2900280 	mov	x0, #0x8014                	// #32788
   8484c:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   84850:	529000c3 	mov	w3, #0x8006                	// #32774
   84854:	d2845881 	mov	x1, #0x22c4                	// #8900
   84858:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   8485c:	b9000003 	str	w3, [x0]
   84860:	528000a2 	mov	w2, #0x5                   	// #5
   84864:	b9400020 	ldr	w0, [x1]
   84868:	32070000 	orr	w0, w0, #0x2000000
   8486c:	b9000020 	str	w0, [x1]
   84870:	b9016e62 	str	w2, [x19, #364]
   84874:	f9400bf3 	ldr	x19, [sp, #16]
   84878:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8487c:	d65f03c0 	ret
   84880:	d2900280 	mov	x0, #0x8014                	// #32788
   84884:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   84888:	529000c3 	mov	w3, #0x8006                	// #32774
   8488c:	d2845881 	mov	x1, #0x22c4                	// #8900
   84890:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   84894:	b9000003 	str	w3, [x0]
   84898:	52800022 	mov	w2, #0x1                   	// #1
   8489c:	b9400020 	ldr	w0, [x1]
   848a0:	32070000 	orr	w0, w0, #0x2000000
   848a4:	b9000020 	str	w0, [x1]
   848a8:	b9016e62 	str	w2, [x19, #364]
   848ac:	17ffffe2 	b	84834 <CHDMISoundBaseDevice::InterruptHandler()+0xb4>
   848b0:	9400a1f4 	bl	ad080 <EnterCritical>
   848b4:	17ffffcf 	b	847f0 <CHDMISoundBaseDevice::InterruptHandler()+0x70>
   848b8:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   848bc:	910a4021 	add	x1, x1, #0x290
   848c0:	91030020 	add	x0, x1, #0xc0
   848c4:	528047c2 	mov	w2, #0x23e                 	// #574
   848c8:	9400758e 	bl	a1f00 <assertion_failed>
   848cc:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   848d0:	910a4021 	add	x1, x1, #0x290
   848d4:	91038020 	add	x0, x1, #0xe0
   848d8:	528047e2 	mov	w2, #0x23f                 	// #575
   848dc:	94007589 	bl	a1f00 <assertion_failed>
   848e0:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   848e4:	910a4021 	add	x1, x1, #0x290
   848e8:	91042020 	add	x0, x1, #0x108
   848ec:	528048e2 	mov	w2, #0x247                 	// #583
   848f0:	94007584 	bl	a1f00 <assertion_failed>
   848f4:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   848f8:	910a4021 	add	x1, x1, #0x290
   848fc:	91048020 	add	x0, x1, #0x120
   84900:	52804962 	mov	w2, #0x24b                 	// #587
   84904:	9400757f 	bl	a1f00 <assertion_failed>
   84908:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   8490c:	910a4021 	add	x1, x1, #0x290
   84910:	9104c020 	add	x0, x1, #0x130
   84914:	52804e62 	mov	w2, #0x273                 	// #627
   84918:	9400757a 	bl	a1f00 <assertion_failed>
   8491c:	d503201f 	nop

0000000000084920 <CHDMISoundBaseDevice::InterruptStub(void*)>:
   84920:	b4000040 	cbz	x0, 84928 <CHDMISoundBaseDevice::InterruptStub(void*)+0x8>
   84924:	17ffff97 	b	84780 <CHDMISoundBaseDevice::InterruptHandler()>
   84928:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8492c:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84930:	910a4021 	add	x1, x1, #0x290
   84934:	910003fd 	mov	x29, sp
   84938:	9104e020 	add	x0, x1, #0x138
   8493c:	52804fa2 	mov	w2, #0x27d                 	// #637
   84940:	94007570 	bl	a1f00 <assertion_failed>
   84944:	d503201f 	nop
   84948:	d503201f 	nop
   8494c:	d503201f 	nop

0000000000084950 <CHDMISoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   84950:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84954:	7100043f 	cmp	w1, #0x1
   84958:	910003fd 	mov	x29, sp
   8495c:	a90153f3 	stp	x19, x20, [sp, #16]
   84960:	540003a8 	b.hi	849d4 <CHDMISoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x84>  // b.pmore
   84964:	2a0103f3 	mov	w19, w1
   84968:	52800001 	mov	w1, #0x0                   	// #0
   8496c:	8b334c13 	add	x19, x0, w19, uxtw #3
   84970:	b9414c00 	ldr	w0, [x0, #332]
   84974:	d37ef400 	lsl	x0, x0, #2
   84978:	94009c5a 	bl	abae0 <operator new[](unsigned long, int)>
   8497c:	aa0003e2 	mov	x2, x0
   84980:	f900be62 	str	x2, [x19, #376]
   84984:	52800001 	mov	w1, #0x0                   	// #0
   84988:	d28007e0 	mov	x0, #0x3f                  	// #63
   8498c:	94009c55 	bl	abae0 <operator new[](unsigned long, int)>
   84990:	91007c02 	add	x2, x0, #0x1f
   84994:	927be842 	and	x2, x2, #0xffffffffffffffe0
   84998:	f900c660 	str	x0, [x19, #392]
   8499c:	f900ce62 	str	x2, [x19, #408]
   849a0:	5280a120 	mov	w0, #0x509                 	// #1289
   849a4:	72a00220 	movk	w0, #0x11, lsl #16
   849a8:	52900401 	mov	w1, #0x8020                	// #32800
   849ac:	72afd001 	movk	w1, #0x7e80, lsl #16
   849b0:	b9000040 	str	w0, [x2]
   849b4:	f940be60 	ldr	x0, [x19, #376]
   849b8:	f9000c5f 	str	xzr, [x2, #24]
   849bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   849c0:	32020400 	orr	w0, w0, #0xc0000000
   849c4:	29008440 	stp	w0, w1, [x2, #4]
   849c8:	b900105f 	str	wzr, [x2, #16]
   849cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   849d0:	d65f03c0 	ret
   849d4:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   849d8:	910a4021 	add	x1, x1, #0x290
   849dc:	91052020 	add	x0, x1, #0x148
   849e0:	52805082 	mov	w2, #0x284                 	// #644
   849e4:	94007547 	bl	a1f00 <assertion_failed>
   849e8:	d503201f 	nop
   849ec:	d503201f 	nop

00000000000849f0 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   849f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   849f4:	52800004 	mov	w4, #0x0                   	// #0
   849f8:	910003fd 	mov	x29, sp
   849fc:	a90153f3 	stp	x19, x20, [sp, #16]
   84a00:	aa0003f3 	mov	x19, x0
   84a04:	2a0203f4 	mov	w20, w2
   84a08:	a9025bf5 	stp	x21, x22, [sp, #32]
   84a0c:	aa0103f6 	mov	x22, x1
   84a10:	2a0303f5 	mov	w21, w3
   84a14:	528000a1 	mov	w1, #0x5                   	// #5
   84a18:	2a0203e3 	mov	w3, w2
   84a1c:	52800002 	mov	w2, #0x0                   	// #0
   84a20:	97fff7e8 	bl	829c0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
   84a24:	90000220 	adrp	x0, c8000 <__exidx_end+0xb458>
   84a28:	913f6000 	add	x0, x0, #0xfd8
   84a2c:	f9000260 	str	x0, [x19]
   84a30:	f900a276 	str	x22, [x19, #320]
   84a34:	b9014a74 	str	w20, [x19, #328]
   84a38:	52800034 	mov	w20, #0x1                   	// #1
   84a3c:	b9014e75 	str	w21, [x19, #332]
   84a40:	a9157e7f 	stp	xzr, xzr, [x19, #336]
   84a44:	3905827f 	strb	wzr, [x19, #352]
   84a48:	3905a27f 	strb	wzr, [x19, #360]
   84a4c:	b9016e7f 	str	wzr, [x19, #364]
   84a50:	94008120 	bl	a4ed0 <CMachineInfo::Get()>
   84a54:	52801041 	mov	w1, #0x82                  	// #130
   84a58:	940080ba 	bl	a4d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   84a5c:	f940a261 	ldr	x1, [x19, #320]
   84a60:	b9017260 	str	w0, [x19, #368]
   84a64:	b901ae74 	str	w20, [x19, #428]
   84a68:	b4000521 	cbz	x1, 84b0c <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x11c>
   84a6c:	b9414a61 	ldr	w1, [x19, #328]
   84a70:	34000581 	cbz	w1, 84b20 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x130>
   84a74:	b9414e61 	ldr	w1, [x19, #332]
   84a78:	52955563 	mov	w3, #0xaaab                	// #43691
   84a7c:	72b55543 	movk	w3, #0xaaaa, lsl #16
   84a80:	52955542 	mov	w2, #0xaaaa                	// #43690
   84a84:	72a01542 	movk	w2, #0xaa, lsl #16
   84a88:	1b037c21 	mul	w1, w1, w3
   84a8c:	13811c21 	ror	w1, w1, #7
   84a90:	6b02003f 	cmp	w1, w2
   84a94:	54000508 	b.hi	84b34 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x144>  // b.pmore
   84a98:	71002c1f 	cmp	w0, #0xb
   84a9c:	540000e9 	b.ls	84ab8 <CHDMISoundBaseDevice::CHDMISoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0xc8>  // b.plast
   84aa0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84aa4:	528000a0 	mov	w0, #0x5                   	// #5
   84aa8:	b9016e60 	str	w0, [x19, #364]
   84aac:	a94153f3 	ldp	x19, x20, [sp, #16]
   84ab0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84ab4:	d65f03c0 	ret
   84ab8:	aa1303e0 	mov	x0, x19
   84abc:	52800001 	mov	w1, #0x0                   	// #0
   84ac0:	97ffffa4 	bl	84950 <CHDMISoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   84ac4:	2a1403e1 	mov	w1, w20
   84ac8:	aa1303e0 	mov	x0, x19
   84acc:	97ffffa1 	bl	84950 <CHDMISoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   84ad0:	a9598261 	ldp	x1, x0, [x19, #408]
   84ad4:	32020422 	orr	w2, w1, #0xc0000000
   84ad8:	32020403 	orr	w3, w0, #0xc0000000
   84adc:	b9001423 	str	w3, [x1, #20]
   84ae0:	b9001402 	str	w2, [x0, #20]
   84ae4:	940078f3 	bl	a2eb0 <CDeviceNameService::Get()>
   84ae8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84aec:	aa1303e2 	mov	x2, x19
   84af0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84af4:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84af8:	910a4021 	add	x1, x1, #0x290
   84afc:	52800003 	mov	w3, #0x0                   	// #0
   84b00:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84b04:	9100c021 	add	x1, x1, #0x30
   84b08:	140077fa 	b	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   84b0c:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84b10:	910a4021 	add	x1, x1, #0x290
   84b14:	91056020 	add	x0, x1, #0x158
   84b18:	52801062 	mov	w2, #0x83                  	// #131
   84b1c:	940074f9 	bl	a1f00 <assertion_failed>
   84b20:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84b24:	910a4021 	add	x1, x1, #0x290
   84b28:	91006020 	add	x0, x1, #0x18
   84b2c:	52801082 	mov	w2, #0x84                  	// #132
   84b30:	940074f4 	bl	a1f00 <assertion_failed>
   84b34:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84b38:	910a4021 	add	x1, x1, #0x290
   84b3c:	9105c020 	add	x0, x1, #0x170
   84b40:	528010a2 	mov	w2, #0x85                  	// #133
   84b44:	940074ef 	bl	a1f00 <assertion_failed>
   84b48:	d503201f 	nop
   84b4c:	d503201f 	nop

0000000000084b50 <CHDMISoundBaseDevice::ResetHDMI()>:
   84b50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84b54:	d2841400 	mov	x0, #0x20a0                	// #8352
   84b58:	f2a7f200 	movk	x0, #0x3f90, lsl #16
   84b5c:	910003fd 	mov	x29, sp
   84b60:	a90153f3 	stp	x19, x20, [sp, #16]
   84b64:	aa0003f4 	mov	x20, x0
   84b68:	b9400000 	ldr	w0, [x0]
   84b6c:	52800c93 	mov	w19, #0x64                  	// #100
   84b70:	121b7800 	and	w0, w0, #0xffffffef
   84b74:	b8004680 	str	w0, [x20], #4
   84b78:	b9400280 	ldr	w0, [x20]
   84b7c:	37200180 	tbnz	w0, #4, 84bac <CHDMISoundBaseDevice::ResetHDMI()+0x5c>
   84b80:	d2900280 	mov	x0, #0x8014                	// #32788
   84b84:	f2a7f000 	movk	x0, #0x3f80, lsl #16
   84b88:	a94153f3 	ldp	x19, x20, [sp, #16]
   84b8c:	52800023 	mov	w3, #0x1                   	// #1
   84b90:	b9000003 	str	w3, [x0]
   84b94:	52800042 	mov	w2, #0x2                   	// #2
   84b98:	b9000002 	str	w2, [x0]
   84b9c:	52804001 	mov	w1, #0x200                 	// #512
   84ba0:	b9000001 	str	w1, [x0]
   84ba4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84ba8:	d65f03c0 	ret
   84bac:	940097c9 	bl	aaad0 <CTimer::Get()>
   84bb0:	52800020 	mov	w0, #0x1                   	// #1
   84bb4:	9400976b 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   84bb8:	71000673 	subs	w19, w19, #0x1
   84bbc:	54fffde1 	b.ne	84b78 <CHDMISoundBaseDevice::ResetHDMI()+0x28>  // b.any
   84bc0:	94007c0c 	bl	a3bf0 <CLogger::Get()>
   84bc4:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84bc8:	910a4021 	add	x1, x1, #0x290
   84bcc:	91068023 	add	x3, x1, #0x1a0
   84bd0:	52800042 	mov	w2, #0x2                   	// #2
   84bd4:	91070021 	add	x1, x1, #0x1c0
   84bd8:	94007dfa 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84bdc:	17ffffe9 	b	84b80 <CHDMISoundBaseDevice::ResetHDMI()+0x30>

0000000000084be0 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()>:
   84be0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84be4:	90000221 	adrp	x1, c8000 <__exidx_end+0xb458>
   84be8:	913f6021 	add	x1, x1, #0xfd8
   84bec:	910003fd 	mov	x29, sp
   84bf0:	a90153f3 	stp	x19, x20, [sp, #16]
   84bf4:	aa0003f3 	mov	x19, x0
   84bf8:	b9416c00 	ldr	w0, [x0, #364]
   84bfc:	f9000261 	str	x1, [x19]
   84c00:	35000a60 	cbnz	w0, 84d4c <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x16c>
   84c04:	b9417260 	ldr	w0, [x19, #368]
   84c08:	71002c1f 	cmp	w0, #0xb
   84c0c:	54000069 	b.ls	84c18 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x38>  // b.plast
   84c10:	39458260 	ldrb	w0, [x19, #352]
   84c14:	36000840 	tbz	w0, #0, 84d1c <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x13c>
   84c18:	f90013f5 	str	x21, [sp, #32]
   84c1c:	940078a5 	bl	a2eb0 <CDeviceNameService::Get()>
   84c20:	f0000194 	adrp	x20, b7000 <_etext+0x49c8>
   84c24:	910a4295 	add	x21, x20, #0x290
   84c28:	9100c2a1 	add	x1, x21, #0x30
   84c2c:	52800002 	mov	w2, #0x0                   	// #0
   84c30:	940077ec 	bl	a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   84c34:	aa1303e0 	mov	x0, x19
   84c38:	97ffffc6 	bl	84b50 <CHDMISoundBaseDevice::ResetHDMI()>
   84c3c:	39458260 	ldrb	w0, [x19, #352]
   84c40:	370006c0 	tbnz	w0, #0, 84d18 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x138>
   84c44:	b9417260 	ldr	w0, [x19, #368]
   84c48:	71002c1f 	cmp	w0, #0xb
   84c4c:	54000708 	b.hi	84d2c <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x14c>  // b.pmore
   84c50:	52800e01 	mov	w1, #0x70                  	// #112
   84c54:	72a007e1 	movk	w1, #0x3f, lsl #16
   84c58:	0b010000 	add	w0, w0, w1
   84c5c:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   84c60:	53185c00 	lsl	w0, w0, #8
   84c64:	b9000002 	str	w2, [x0]
   84c68:	b9417263 	ldr	w3, [x19, #368]
   84c6c:	0b010061 	add	w1, w3, w1
   84c70:	53185c21 	lsl	w1, w1, #8
   84c74:	d503201f 	nop
   84c78:	b9400020 	ldr	w0, [x1]
   84c7c:	37ffffe0 	tbnz	w0, #31, 84c78 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x98>
   84c80:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   84c84:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   84c88:	52800021 	mov	w1, #0x1                   	// #1
   84c8c:	f940a260 	ldr	x0, [x19, #320]
   84c90:	1ac32021 	lsl	w1, w1, w3
   84c94:	b9400043 	ldr	w3, [x2]
   84c98:	0a210061 	bic	w1, w3, w1
   84c9c:	b9000041 	str	w1, [x2]
   84ca0:	b40006e0 	cbz	x0, 84d7c <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x19c>
   84ca4:	3945a261 	ldrb	w1, [x19, #360]
   84ca8:	370004a1 	tbnz	w1, #0, 84d3c <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x15c>
   84cac:	f900a27f 	str	xzr, [x19, #320]
   84cb0:	94008088 	bl	a4ed0 <CMachineInfo::Get()>
   84cb4:	b9417261 	ldr	w1, [x19, #368]
   84cb8:	9400805e 	bl	a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>
   84cbc:	91080261 	add	x1, x19, #0x200
   84cc0:	f940c660 	ldr	x0, [x19, #392]
   84cc4:	a939fc3f 	stp	xzr, xzr, [x1, #-104]
   84cc8:	b4000040 	cbz	x0, 84cd0 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0xf0>
   84ccc:	94009bb1 	bl	abb90 <operator delete[](void*)>
   84cd0:	f940ca60 	ldr	x0, [x19, #400]
   84cd4:	f900c67f 	str	xzr, [x19, #392]
   84cd8:	b4000040 	cbz	x0, 84ce0 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x100>
   84cdc:	94009bad 	bl	abb90 <operator delete[](void*)>
   84ce0:	f940be60 	ldr	x0, [x19, #376]
   84ce4:	f900ca7f 	str	xzr, [x19, #400]
   84ce8:	b4000040 	cbz	x0, 84cf0 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x110>
   84cec:	94009ba9 	bl	abb90 <operator delete[](void*)>
   84cf0:	f940c260 	ldr	x0, [x19, #384]
   84cf4:	f900be7f 	str	xzr, [x19, #376]
   84cf8:	b4000040 	cbz	x0, 84d00 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x120>
   84cfc:	94009ba5 	bl	abb90 <operator delete[](void*)>
   84d00:	f94013f5 	ldr	x21, [sp, #32]
   84d04:	f900c27f 	str	xzr, [x19, #384]
   84d08:	aa1303e0 	mov	x0, x19
   84d0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84d10:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84d14:	17fff627 	b	825b0 <CSoundBaseDevice::~CSoundBaseDevice()>
   84d18:	f94013f5 	ldr	x21, [sp, #32]
   84d1c:	aa1303e0 	mov	x0, x19
   84d20:	a94153f3 	ldp	x19, x20, [sp, #16]
   84d24:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84d28:	17fff622 	b	825b0 <CSoundBaseDevice::~CSoundBaseDevice()>
   84d2c:	aa1503e1 	mov	x1, x21
   84d30:	910382a0 	add	x0, x21, #0xe0
   84d34:	52801822 	mov	w2, #0xc1                  	// #193
   84d38:	94007472 	bl	a1f00 <assertion_failed>
   84d3c:	b9417261 	ldr	w1, [x19, #368]
   84d40:	11004021 	add	w1, w1, #0x10
   84d44:	9400a4a7 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   84d48:	17ffffd9 	b	84cac <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0xcc>
   84d4c:	b9416e60 	ldr	w0, [x19, #364]
   84d50:	7100041f 	cmp	w0, #0x1
   84d54:	54fff580 	b.eq	84c04 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x24>  // b.none
   84d58:	b9416e60 	ldr	w0, [x19, #364]
   84d5c:	7100141f 	cmp	w0, #0x5
   84d60:	54fff520 	b.eq	84c04 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()+0x24>  // b.none
   84d64:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84d68:	910a4021 	add	x1, x1, #0x290
   84d6c:	91072020 	add	x0, x1, #0x1c8
   84d70:	52801562 	mov	w2, #0xab                  	// #171
   84d74:	f90013f5 	str	x21, [sp, #32]
   84d78:	94007462 	bl	a1f00 <assertion_failed>
   84d7c:	910a4281 	add	x1, x20, #0x290
   84d80:	528019c2 	mov	w2, #0xce                  	// #206
   84d84:	91056020 	add	x0, x1, #0x158
   84d88:	9400745e 	bl	a1f00 <assertion_failed>
   84d8c:	d503201f 	nop

0000000000084d90 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()>:
   84d90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84d94:	910003fd 	mov	x29, sp
   84d98:	f9000bf3 	str	x19, [sp, #16]
   84d9c:	aa0003f3 	mov	x19, x0
   84da0:	97ffff90 	bl	84be0 <CHDMISoundBaseDevice::~CHDMISoundBaseDevice()>
   84da4:	aa1303e0 	mov	x0, x19
   84da8:	d2803601 	mov	x1, #0x1b0                 	// #432
   84dac:	f9400bf3 	ldr	x19, [sp, #16]
   84db0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84db4:	14009b7f 	b	abbb0 <operator delete(void*, unsigned long)>
   84db8:	d503201f 	nop
   84dbc:	d503201f 	nop

0000000000084dc0 <CHDMISoundBaseDevice::SetAudioInfoFrame()>:
   84dc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84dc4:	d2841400 	mov	x0, #0x20a0                	// #8352
   84dc8:	f2a7f200 	movk	x0, #0x3f90, lsl #16
   84dcc:	910003fd 	mov	x29, sp
   84dd0:	b9400001 	ldr	w1, [x0]
   84dd4:	a90153f3 	stp	x19, x20, [sp, #16]
   84dd8:	36800641 	tbz	w1, #16, 84ea0 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0xe0>
   84ddc:	aa0003f4 	mov	x20, x0
   84de0:	b9400000 	ldr	w0, [x0]
   84de4:	52800c93 	mov	w19, #0x64                  	// #100
   84de8:	121b7800 	and	w0, w0, #0xffffffef
   84dec:	b8004680 	str	w0, [x20], #4
   84df0:	b9400280 	ldr	w0, [x20]
   84df4:	37200360 	tbnz	w0, #4, 84e60 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0xa0>
   84df8:	d2849200 	mov	x0, #0x2490                	// #9360
   84dfc:	f2a7f200 	movk	x0, #0x3f90, lsl #16
   84e00:	52803081 	mov	w1, #0x184                 	// #388
   84e04:	72a00141 	movk	w1, #0xa, lsl #16
   84e08:	b903ee81 	str	w1, [x20, #1004]
   84e0c:	52802e01 	mov	w1, #0x170                 	// #368
   84e10:	b9000401 	str	w1, [x0, #4]
   84e14:	d10fc001 	sub	x1, x0, #0x3f0
   84e18:	b900081f 	str	wzr, [x0, #8]
   84e1c:	aa0103f4 	mov	x20, x1
   84e20:	b9000c1f 	str	wzr, [x0, #12]
   84e24:	52800c93 	mov	w19, #0x64                  	// #100
   84e28:	b900101f 	str	wzr, [x0, #16]
   84e2c:	b900141f 	str	wzr, [x0, #20]
   84e30:	b900181f 	str	wzr, [x0, #24]
   84e34:	b9001c1f 	str	wzr, [x0, #28]
   84e38:	b900201f 	str	wzr, [x0, #32]
   84e3c:	b9400020 	ldr	w0, [x1]
   84e40:	321c0000 	orr	w0, w0, #0x10
   84e44:	b8004680 	str	w0, [x20], #4
   84e48:	b9400280 	ldr	w0, [x20]
   84e4c:	362001c0 	tbz	w0, #4, 84e84 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0xc4>
   84e50:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e54:	52800020 	mov	w0, #0x1                   	// #1
   84e58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84e5c:	d65f03c0 	ret
   84e60:	9400971c 	bl	aaad0 <CTimer::Get()>
   84e64:	52800020 	mov	w0, #0x1                   	// #1
   84e68:	940096be 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   84e6c:	71000673 	subs	w19, w19, #0x1
   84e70:	54fffc01 	b.ne	84df0 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0x30>  // b.any
   84e74:	52800000 	mov	w0, #0x0                   	// #0
   84e78:	a94153f3 	ldp	x19, x20, [sp, #16]
   84e7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84e80:	d65f03c0 	ret
   84e84:	94009713 	bl	aaad0 <CTimer::Get()>
   84e88:	52800020 	mov	w0, #0x1                   	// #1
   84e8c:	940096b5 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   84e90:	71000673 	subs	w19, w19, #0x1
   84e94:	54fffda1 	b.ne	84e48 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0x88>  // b.any
   84e98:	52800000 	mov	w0, #0x0                   	// #0
   84e9c:	17fffff7 	b	84e78 <CHDMISoundBaseDevice::SetAudioInfoFrame()+0xb8>
   84ea0:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84ea4:	910a4021 	add	x1, x1, #0x290
   84ea8:	91088020 	add	x0, x1, #0x220
   84eac:	528055c2 	mov	w2, #0x2ae                 	// #686
   84eb0:	94007414 	bl	a1f00 <assertion_failed>
   84eb4:	d503201f 	nop
   84eb8:	d503201f 	nop
   84ebc:	d503201f 	nop

0000000000084ec0 <CHDMISoundBaseDevice::SampleRateToHWFormat(unsigned int)>:
   84ec0:	f0000183 	adrp	x3, b7000 <_etext+0x49c8>
   84ec4:	910a4063 	add	x3, x3, #0x290
   84ec8:	2a0003e4 	mov	w4, w0
   84ecc:	91098063 	add	x3, x3, #0x260
   84ed0:	d2800021 	mov	x1, #0x1                   	// #1
   84ed4:	5283e800 	mov	w0, #0x1f40                	// #8000
   84ed8:	14000005 	b	84eec <CHDMISoundBaseDevice::SampleRateToHWFormat(unsigned int)+0x2c>
   84edc:	91000421 	add	x1, x1, #0x1
   84ee0:	8b010862 	add	x2, x3, x1, lsl #2
   84ee4:	b85fc040 	ldur	w0, [x2, #-4]
   84ee8:	34000080 	cbz	w0, 84ef8 <CHDMISoundBaseDevice::SampleRateToHWFormat(unsigned int)+0x38>
   84eec:	6b00009f 	cmp	w4, w0
   84ef0:	54ffff61 	b.ne	84edc <CHDMISoundBaseDevice::SampleRateToHWFormat(unsigned int)+0x1c>  // b.any
   84ef4:	2a0103e0 	mov	w0, w1
   84ef8:	d65f03c0 	ret
   84efc:	d503201f 	nop

0000000000084f00 <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)>:
   84f00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84f04:	910003fd 	mov	x29, sp
   84f08:	a90153f3 	stp	x19, x20, [sp, #16]
   84f0c:	a9025bf5 	stp	x21, x22, [sp, #32]
   84f10:	f9001bf7 	str	x23, [sp, #48]
   84f14:	340003a1 	cbz	w1, 84f88 <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)+0x88>
   84f18:	2a0303f3 	mov	w19, w3
   84f1c:	34000403 	cbz	w3, 84f9c <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)+0x9c>
   84f20:	12001c56 	and	w22, w2, #0xff
   84f24:	aa0003f5 	mov	x21, x0
   84f28:	2a0103f4 	mov	w20, w1
   84f2c:	520002d7 	eor	w23, w22, #0x1
   84f30:	14000006 	b	84f48 <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)+0x48>
   84f34:	940096e7 	bl	aaad0 <CTimer::Get()>
   84f38:	52800020 	mov	w0, #0x1                   	// #1
   84f3c:	94009689 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   84f40:	71000673 	subs	w19, w19, #0x1
   84f44:	54000160 	b.eq	84f70 <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)+0x70>  // b.none
   84f48:	b94002a2 	ldr	w2, [x21]
   84f4c:	6a02029f 	tst	w20, w2
   84f50:	1a9612e2 	csel	w2, w23, w22, ne	// ne = any
   84f54:	3707ff02 	tbnz	w2, #0, 84f34 <CHDMISoundBaseDevice::WaitForBit(unsigned long, unsigned int, bool, unsigned int)+0x34>
   84f58:	a94153f3 	ldp	x19, x20, [sp, #16]
   84f5c:	52800020 	mov	w0, #0x1                   	// #1
   84f60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84f64:	f9401bf7 	ldr	x23, [sp, #48]
   84f68:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84f6c:	d65f03c0 	ret
   84f70:	a94153f3 	ldp	x19, x20, [sp, #16]
   84f74:	52800000 	mov	w0, #0x0                   	// #0
   84f78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84f7c:	f9401bf7 	ldr	x23, [sp, #48]
   84f80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84f84:	d65f03c0 	ret
   84f88:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84f8c:	910a4021 	add	x1, x1, #0x290
   84f90:	910a8020 	add	x0, x1, #0x2a0
   84f94:	52805c22 	mov	w2, #0x2e1                 	// #737
   84f98:	940073da 	bl	a1f00 <assertion_failed>
   84f9c:	f0000181 	adrp	x1, b7000 <_etext+0x49c8>
   84fa0:	910a4021 	add	x1, x1, #0x290
   84fa4:	910ac020 	add	x0, x1, #0x2b0
   84fa8:	52805c42 	mov	w2, #0x2e2                 	// #738
   84fac:	940073d5 	bl	a1f00 <assertion_failed>

0000000000084fb0 <CHDMISoundBaseDevice::GetHSMClockRate()>:
   84fb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84fb4:	910003fd 	mov	x29, sp
   84fb8:	94007fc6 	bl	a4ed0 <CMachineInfo::Get()>
   84fbc:	528000c1 	mov	w1, #0x6                   	// #6
   84fc0:	94007f2c 	bl	a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   84fc4:	2a0003e1 	mov	w1, w0
   84fc8:	2a0003e0 	mov	w0, w0
   84fcc:	34000121 	cbz	w1, 84ff0 <CHDMISoundBaseDevice::GetHSMClockRate()+0x40>
   84fd0:	d2821181 	mov	x1, #0x108c                	// #4236
   84fd4:	f2a7e201 	movk	x1, #0x3f10, lsl #16
   84fd8:	b9400021 	ldr	w1, [x1]
   84fdc:	d3443c21 	ubfx	x1, x1, #4, #12
   84fe0:	340000c1 	cbz	w1, 84ff8 <CHDMISoundBaseDevice::GetHSMClockRate()+0x48>
   84fe4:	d378dc00 	lsl	x0, x0, #8
   84fe8:	2a0103e1 	mov	w1, w1
   84fec:	9ac10800 	udiv	x0, x0, x1
   84ff0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84ff4:	d65f03c0 	ret
   84ff8:	d2800000 	mov	x0, #0x0                   	// #0
   84ffc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   85000:	d65f03c0 	ret
   85004:	d503201f 	nop
   85008:	d503201f 	nop
   8500c:	d503201f 	nop

0000000000085010 <CHDMISoundBaseDevice::GetPixelClockRate()>:
   85010:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85014:	910003fd 	mov	x29, sp
   85018:	94007fae 	bl	a4ed0 <CMachineInfo::Get()>
   8501c:	52800021 	mov	w1, #0x1                   	// #1
   85020:	94007f14 	bl	a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   85024:	2a0003e2 	mov	w2, w0
   85028:	2a0003e0 	mov	w0, w0
   8502c:	34000302 	cbz	w2, 8508c <CHDMISoundBaseDevice::GetPixelClockRate()+0x7c>
   85030:	d2852c01 	mov	x1, #0x2960                	// #10592
   85034:	f2a7e201 	movk	x1, #0x3f10, lsl #16
   85038:	d123b023 	sub	x3, x1, #0x8ec
   8503c:	b9400020 	ldr	w0, [x1]
   85040:	b9410024 	ldr	w4, [x1, #256]
   85044:	b9400065 	ldr	w5, [x3]
   85048:	12002401 	and	w1, w0, #0x3ff
   8504c:	12004c84 	and	w4, w4, #0xfffff
   85050:	d34c3803 	ubfx	x3, x0, #12, #3
   85054:	36580065 	tbz	w5, #11, 85060 <CHDMISoundBaseDevice::GetPixelClockRate()+0x50>
   85058:	0b010021 	add	w1, w1, w1
   8505c:	0b040084 	add	w4, w4, w4
   85060:	d2800000 	mov	x0, #0x0                   	// #0
   85064:	34000143 	cbz	w3, 8508c <CHDMISoundBaseDevice::GetPixelClockRate()+0x7c>
   85068:	0b015081 	add	w1, w4, w1, lsl #20
   8506c:	2a0303e3 	mov	w3, w3
   85070:	b202e7e4 	mov	x4, #0xcccccccccccccccc    	// #-3689348814741910324
   85074:	f29999a4 	movk	x4, #0xcccd
   85078:	9ba27c20 	umull	x0, w1, w2
   8507c:	9ac30800 	udiv	x0, x0, x3
   85080:	d354fc00 	lsr	x0, x0, #20
   85084:	9bc47c00 	umulh	x0, x0, x4
   85088:	d343fc00 	lsr	x0, x0, #3
   8508c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   85090:	d65f03c0 	ret
   85094:	d503201f 	nop
   85098:	d503201f 	nop
   8509c:	d503201f 	nop

00000000000850a0 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)>:
   850a0:	d2800027 	mov	x7, #0x1                   	// #1
   850a4:	d2800008 	mov	x8, #0x0                   	// #0
   850a8:	aa0703eb 	mov	x11, x7
   850ac:	d280000c 	mov	x12, #0x0                   	// #0
   850b0:	b4000201 	cbz	x1, 850f0 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x50>
   850b4:	d503201f 	nop
   850b8:	9ac10806 	udiv	x6, x0, x1
   850bc:	9b0630ea 	madd	x10, x7, x6, x12
   850c0:	9b062d09 	madd	x9, x8, x6, x11
   850c4:	eb02015f 	cmp	x10, x2
   850c8:	9b0180cd 	msub	x13, x6, x1, x0
   850cc:	fa439122 	ccmp	x9, x3, #0x2, ls	// ls = plast
   850d0:	aa0103e0 	mov	x0, x1
   850d4:	54000148 	b.hi	850fc <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x5c>  // b.pmore
   850d8:	aa0803eb 	mov	x11, x8
   850dc:	aa0703ec 	mov	x12, x7
   850e0:	aa0903e8 	mov	x8, x9
   850e4:	aa0a03e7 	mov	x7, x10
   850e8:	aa0d03e1 	mov	x1, x13
   850ec:	b5fffe61 	cbnz	x1, 850b8 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x18>
   850f0:	f9000087 	str	x7, [x4]
   850f4:	f90000a8 	str	x8, [x5]
   850f8:	d65f03c0 	ret
   850fc:	cb0b0060 	sub	x0, x3, x11
   85100:	cb0c0042 	sub	x2, x2, x12
   85104:	9ac80800 	udiv	x0, x0, x8
   85108:	9ac70842 	udiv	x2, x2, x7
   8510c:	eb02001f 	cmp	x0, x2
   85110:	9a829000 	csel	x0, x0, x2, ls	// ls = plast
   85114:	8b000002 	add	x2, x0, x0
   85118:	eb06005f 	cmp	x2, x6
   8511c:	540000c8 	b.hi	85134 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x94>  // b.pmore
   85120:	54fffe81 	b.ne	850f0 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x50>  // b.any
   85124:	9b0b7c21 	mul	x1, x1, x11
   85128:	9b0d7d0d 	mul	x13, x8, x13
   8512c:	eb0d003f 	cmp	x1, x13
   85130:	54fffe09 	b.ls	850f0 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)+0x50>  // b.plast
   85134:	9b0030e7 	madd	x7, x7, x0, x12
   85138:	9b002d08 	madd	x8, x8, x0, x11
   8513c:	f9000087 	str	x7, [x4]
   85140:	f90000a8 	str	x8, [x5]
   85144:	d65f03c0 	ret
   85148:	d503201f 	nop
   8514c:	d503201f 	nop

0000000000085150 <CHDMISoundBaseDevice::RunHDMI()>:
   85150:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   85154:	910003fd 	mov	x29, sp
   85158:	b941480f 	ldr	w15, [x0, #328]
   8515c:	a90153f3 	stp	x19, x20, [sp, #16]
   85160:	34000def 	cbz	w15, 8531c <CHDMISoundBaseDevice::RunHDMI()+0x1cc>
   85164:	f940ac12 	ldr	x18, [x0, #344]
   85168:	aa0003ee 	mov	x14, x0
   8516c:	b4000e32 	cbz	x18, 85330 <CHDMISoundBaseDevice::RunHDMI()+0x1e0>
   85170:	f940a800 	ldr	x0, [x0, #336]
   85174:	d2802003 	mov	x3, #0x100                 	// #256
   85178:	9100a3e5 	add	x5, sp, #0x28
   8517c:	910083e4 	add	x4, sp, #0x20
   85180:	2a0f03e1 	mov	w1, w15
   85184:	b2405fe2 	mov	x2, #0xffffff              	// #16777215
   85188:	97ffffc6 	bl	850a0 <CHDMISoundBaseDevice::rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long*, unsigned long*)>
   8518c:	9100f3e3 	add	x3, sp, #0x3c
   85190:	531961ea 	lsl	w10, w15, #7
   85194:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   85198:	72a20c40 	movk	w0, #0x1062, lsl #16
   8519c:	d0000184 	adrp	x4, b7000 <_etext+0x49c8>
   851a0:	910a4086 	add	x6, x4, #0x290
   851a4:	3204c3f3 	mov	w19, #0x10101010            	// #269488144
   851a8:	9ba07d41 	umull	x1, w10, w0
   851ac:	910980c4 	add	x4, x6, #0x260
   851b0:	a9420be0 	ldp	x0, x2, [sp, #32]
   851b4:	d2900589 	mov	x9, #0x802c                	// #32812
   851b8:	f2a7f009 	movk	x9, #0x3f80, lsl #16
   851bc:	d366fc27 	lsr	x7, x1, #38
   851c0:	2a0703e5 	mov	w5, w7
   851c4:	529040e1 	mov	w1, #0x8207                	// #33287
   851c8:	4f000400 	movi	v0.4s, #0x0
   851cc:	d1004128 	sub	x8, x9, #0x10
   851d0:	d1005134 	sub	x20, x9, #0x14
   851d4:	d284129e 	mov	x30, #0x2094                	// #8340
   851d8:	f2a7f21e 	movk	x30, #0x3f90, lsl #16
   851dc:	9b127ca5 	mul	x5, x5, x18
   851e0:	51000442 	sub	w2, w2, #0x1
   851e4:	52800072 	mov	w18, #0x3                   	// #3
   851e8:	72a18012 	movk	w18, #0xc00, lsl #16
   851ec:	ad000060 	stp	q0, q0, [x3]
   851f0:	2a002040 	orr	w0, w2, w0, lsl #8
   851f4:	ad010060 	stp	q0, q0, [x3, #32]
   851f8:	d2841211 	mov	x17, #0x2090                	// #8336
   851fc:	f2a7f211 	movk	x17, #0x3f90, lsl #16
   85200:	ad020060 	stp	q0, q0, [x3, #64]
   85204:	52800110 	mov	w16, #0x8                   	// #8
   85208:	d284138d 	mov	x13, #0x209c                	// #8348
   8520c:	f2a7f20d 	movk	x13, #0x3f90, lsl #16
   85210:	ad030060 	stp	q0, q0, [x3, #96]
   85214:	5287806c 	mov	w12, #0x3c03                	// #15363
   85218:	72a4200c 	movk	w12, #0x2100, lsl #16
   8521c:	ad040060 	stp	q0, q0, [x3, #128]
   85220:	d284150b 	mov	x11, #0x20a8                	// #8360
   85224:	f2a7f20b 	movk	x11, #0x3f90, lsl #16
   85228:	d2841606 	mov	x6, #0x20b0                	// #8368
   8522c:	f2a7f206 	movk	x6, #0x3f90, lsl #16
   85230:	5283e802 	mov	w2, #0x1f40                	// #8000
   85234:	9aca08a5 	udiv	x5, x5, x10
   85238:	d284158a 	mov	x10, #0x20ac                	// #8364
   8523c:	f2a7f20a 	movk	x10, #0x3f90, lsl #16
   85240:	b9003be1 	str	w1, [sp, #56]
   85244:	d2800021 	mov	x1, #0x1                   	// #1
   85248:	f90023e9 	str	x9, [sp, #64]
   8524c:	b9004be0 	str	w0, [sp, #72]
   85250:	f9002be8 	str	x8, [sp, #80]
   85254:	f90033f4 	str	x20, [sp, #96]
   85258:	b9006bf3 	str	w19, [sp, #104]
   8525c:	f9003bfe 	str	x30, [sp, #112]
   85260:	b9007bf2 	str	w18, [sp, #120]
   85264:	f90043f1 	str	x17, [sp, #128]
   85268:	b9008bf0 	str	w16, [sp, #136]
   8526c:	f9004bed 	str	x13, [sp, #144]
   85270:	b9009bec 	str	w12, [sp, #152]
   85274:	f90053eb 	str	x11, [sp, #160]
   85278:	b900a07f 	str	wzr, [x3, #160]
   8527c:	f9005bea 	str	x10, [sp, #176]
   85280:	f90063e6 	str	x6, [sp, #192]
   85284:	14000005 	b	85298 <CHDMISoundBaseDevice::RunHDMI()+0x148>
   85288:	91000421 	add	x1, x1, #0x1
   8528c:	8b010882 	add	x2, x4, x1, lsl #2
   85290:	b85fc042 	ldur	w2, [x2, #-4]
   85294:	340002e2 	cbz	w2, 852f0 <CHDMISoundBaseDevice::RunHDMI()+0x1a0>
   85298:	6b0201ff 	cmp	w15, w2
   8529c:	54ffff61 	b.ne	85288 <CHDMISoundBaseDevice::RunHDMI()+0x138>  // b.any
   852a0:	53185c21 	lsl	w1, w1, #8
   852a4:	320f0021 	orr	w1, w1, #0x20000
   852a8:	9100c3e3 	add	x3, sp, #0x30
   852ac:	320800e4 	orr	w4, w7, #0x1000000
   852b0:	d2900282 	mov	x2, #0x8014                	// #32788
   852b4:	f2a7f002 	movk	x2, #0x3f80, lsl #16
   852b8:	b9005be1 	str	w1, [sp, #88]
   852bc:	b900abe4 	str	w4, [sp, #168]
   852c0:	b900bbe5 	str	w5, [sp, #184]
   852c4:	b900cbe5 	str	w5, [sp, #200]
   852c8:	b9400861 	ldr	w1, [x3, #8]
   852cc:	b9000041 	str	w1, [x2]
   852d0:	f8410c62 	ldr	x2, [x3, #16]!
   852d4:	b5ffffa2 	cbnz	x2, 852c8 <CHDMISoundBaseDevice::RunHDMI()+0x178>
   852d8:	aa0e03e0 	mov	x0, x14
   852dc:	97fffeb9 	bl	84dc0 <CHDMISoundBaseDevice::SetAudioInfoFrame()>
   852e0:	360000c0 	tbz	w0, #0, 852f8 <CHDMISoundBaseDevice::RunHDMI()+0x1a8>
   852e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   852e8:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   852ec:	d65f03c0 	ret
   852f0:	52a00041 	mov	w1, #0x20000               	// #131072
   852f4:	17ffffed 	b	852a8 <CHDMISoundBaseDevice::RunHDMI()+0x158>
   852f8:	94007a3e 	bl	a3bf0 <CLogger::Get()>
   852fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85300:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85304:	910a4021 	add	x1, x1, #0x290
   85308:	52800022 	mov	w2, #0x1                   	// #1
   8530c:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   85310:	910b6023 	add	x3, x1, #0x2d8
   85314:	91070021 	add	x1, x1, #0x1c0
   85318:	14007c2a 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8531c:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85320:	910a4021 	add	x1, x1, #0x290
   85324:	91006020 	add	x0, x1, #0x18
   85328:	52803ca2 	mov	w2, #0x1e5                 	// #485
   8532c:	940072f5 	bl	a1f00 <assertion_failed>
   85330:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85334:	910a4021 	add	x1, x1, #0x290
   85338:	910b0020 	add	x0, x1, #0x2c0
   8533c:	52803cc2 	mov	w2, #0x1e6                 	// #486
   85340:	940072f0 	bl	a1f00 <assertion_failed>
   85344:	d503201f 	nop
   85348:	d503201f 	nop
   8534c:	d503201f 	nop

0000000000085350 <CHDMISoundBaseDevice::Start()>:
   85350:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85354:	910003fd 	mov	x29, sp
   85358:	a90153f3 	stp	x19, x20, [sp, #16]
   8535c:	aa0003f3 	mov	x19, x0
   85360:	b9416c00 	ldr	w0, [x0, #364]
   85364:	7100041f 	cmp	w0, #0x1
   85368:	54000b4c 	b.gt	854d0 <CHDMISoundBaseDevice::Start()+0x180>
   8536c:	b9416e60 	ldr	w0, [x19, #364]
   85370:	34000280 	cbz	w0, 853c0 <CHDMISoundBaseDevice::Start()+0x70>
   85374:	b9416e74 	ldr	w20, [x19, #364]
   85378:	7100069f 	cmp	w20, #0x1
   8537c:	540018a1 	b.ne	85690 <CHDMISoundBaseDevice::Start()+0x340>  // b.any
   85380:	39458260 	ldrb	w0, [x19, #352]
   85384:	b901aa7f 	str	wzr, [x19, #424]
   85388:	36000ac0 	tbz	w0, #0, 854e0 <CHDMISoundBaseDevice::Start()+0x190>
   8538c:	52800040 	mov	w0, #0x2                   	// #2
   85390:	d2845881 	mov	x1, #0x22c4                	// #8900
   85394:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   85398:	b9016e60 	str	w0, [x19, #364]
   8539c:	b9400020 	ldr	w0, [x1]
   853a0:	d2900282 	mov	x2, #0x8014                	// #32788
   853a4:	f2a7f002 	movk	x2, #0x3f80, lsl #16
   853a8:	52860503 	mov	w3, #0x3028                	// #12328
   853ac:	12067800 	and	w0, w0, #0xfdffffff
   853b0:	b9000020 	str	w0, [x1]
   853b4:	b9000043 	str	w3, [x2]
   853b8:	52800020 	mov	w0, #0x1                   	// #1
   853bc:	14000046 	b	854d4 <CHDMISoundBaseDevice::Start()+0x184>
   853c0:	d2841400 	mov	x0, #0x20a0                	// #8352
   853c4:	f2a7f200 	movk	x0, #0x3f90, lsl #16
   853c8:	b9400000 	ldr	w0, [x0]
   853cc:	36800700 	tbz	w0, #16, 854ac <CHDMISoundBaseDevice::Start()+0x15c>
   853d0:	94007ec0 	bl	a4ed0 <CMachineInfo::Get()>
   853d4:	528000c1 	mov	w1, #0x6                   	// #6
   853d8:	94007e26 	bl	a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   853dc:	2a0003e1 	mov	w1, w0
   853e0:	340012e0 	cbz	w0, 8563c <CHDMISoundBaseDevice::Start()+0x2ec>
   853e4:	d2821180 	mov	x0, #0x108c                	// #4236
   853e8:	f2a7e200 	movk	x0, #0x3f10, lsl #16
   853ec:	b9400000 	ldr	w0, [x0]
   853f0:	d3443c00 	ubfx	x0, x0, #4, #12
   853f4:	34001240 	cbz	w0, 8563c <CHDMISoundBaseDevice::Start()+0x2ec>
   853f8:	d378dc21 	lsl	x1, x1, #8
   853fc:	2a0003e0 	mov	w0, w0
   85400:	eb00003f 	cmp	x1, x0
   85404:	9ac00821 	udiv	x1, x1, x0
   85408:	f900aa61 	str	x1, [x19, #336]
   8540c:	540011a3 	b.cc	85640 <CHDMISoundBaseDevice::Start()+0x2f0>  // b.lo, b.ul, b.last
   85410:	aa1303e0 	mov	x0, x19
   85414:	97fffeff 	bl	85010 <CHDMISoundBaseDevice::GetPixelClockRate()>
   85418:	f900ae60 	str	x0, [x19, #344]
   8541c:	b4001440 	cbz	x0, 856a4 <CHDMISoundBaseDevice::Start()+0x354>
   85420:	d29d9001 	mov	x1, #0xec80                	// #60544
   85424:	f2a134e1 	movk	x1, #0x9a7, lsl #16
   85428:	eb01001f 	cmp	x0, x1
   8542c:	540017e8 	b.hi	85728 <CHDMISoundBaseDevice::Start()+0x3d8>  // b.pmore
   85430:	39458260 	ldrb	w0, [x19, #352]
   85434:	37000320 	tbnz	w0, #0, 85498 <CHDMISoundBaseDevice::Start()+0x148>
   85438:	b9417260 	ldr	w0, [x19, #368]
   8543c:	71002c1f 	cmp	w0, #0xb
   85440:	54001888 	b.hi	85750 <CHDMISoundBaseDevice::Start()+0x400>  // b.pmore
   85444:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   85448:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   8544c:	52800021 	mov	w1, #0x1                   	// #1
   85450:	b9400043 	ldr	w3, [x2]
   85454:	1ac02021 	lsl	w1, w1, w0
   85458:	52807d00 	mov	w0, #0x3e8                 	// #1000
   8545c:	2a030021 	orr	w1, w1, w3
   85460:	b9000041 	str	w1, [x2]
   85464:	94009557 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   85468:	b9417260 	ldr	w0, [x19, #368]
   8546c:	52800e02 	mov	w2, #0x70                  	// #112
   85470:	72a007e2 	movk	w2, #0x3f, lsl #16
   85474:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   85478:	0b020000 	add	w0, w0, w2
   8547c:	53185c00 	lsl	w0, w0, #8
   85480:	b9000001 	str	w1, [x0]
   85484:	b9417261 	ldr	w1, [x19, #368]
   85488:	0b020021 	add	w1, w1, w2
   8548c:	53185c21 	lsl	w1, w1, #8
   85490:	b9400020 	ldr	w0, [x1]
   85494:	37ffffe0 	tbnz	w0, #31, 85490 <CHDMISoundBaseDevice::Start()+0x140>
   85498:	aa1303e0 	mov	x0, x19
   8549c:	97ffff2d 	bl	85150 <CHDMISoundBaseDevice::RunHDMI()>
   854a0:	52800020 	mov	w0, #0x1                   	// #1
   854a4:	b9016e60 	str	w0, [x19, #364]
   854a8:	17ffffb3 	b	85374 <CHDMISoundBaseDevice::Start()+0x24>
   854ac:	940079d1 	bl	a3bf0 <CLogger::Get()>
   854b0:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   854b4:	910a4021 	add	x1, x1, #0x290
   854b8:	910be023 	add	x3, x1, #0x2f8
   854bc:	91070021 	add	x1, x1, #0x1c0
   854c0:	52800022 	mov	w2, #0x1                   	// #1
   854c4:	94007bbf 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   854c8:	528000a0 	mov	w0, #0x5                   	// #5
   854cc:	b9016e60 	str	w0, [x19, #364]
   854d0:	52800000 	mov	w0, #0x0                   	// #0
   854d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   854d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   854dc:	d65f03c0 	ret
   854e0:	aa1303e0 	mov	x0, x19
   854e4:	97fffc5f 	bl	84660 <CHDMISoundBaseDevice::GetNextChunk()>
   854e8:	3607ff40 	tbz	w0, #0, 854d0 <CHDMISoundBaseDevice::Start()+0x180>
   854ec:	39458260 	ldrb	w0, [x19, #352]
   854f0:	52800041 	mov	w1, #0x2                   	// #2
   854f4:	b9016e61 	str	w1, [x19, #364]
   854f8:	37001120 	tbnz	w0, #0, 8571c <CHDMISoundBaseDevice::Start()+0x3cc>
   854fc:	b9417261 	ldr	w1, [x19, #368]
   85500:	71002c3f 	cmp	w1, #0xb
   85504:	54000f88 	b.hi	856f4 <CHDMISoundBaseDevice::Start()+0x3a4>  // b.pmore
   85508:	3945a260 	ldrb	w0, [x19, #360]
   8550c:	37000a40 	tbnz	w0, #0, 85654 <CHDMISoundBaseDevice::Start()+0x304>
   85510:	f940a260 	ldr	x0, [x19, #320]
   85514:	b4001140 	cbz	x0, 8573c <CHDMISoundBaseDevice::Start()+0x3ec>
   85518:	11004021 	add	w1, w1, #0x10
   8551c:	aa1303e3 	mov	x3, x19
   85520:	f0ffffe2 	adrp	x2, 84000 <CSoundBaseDevice::ReadDequeue(void*, unsigned int)+0x40>
   85524:	91248042 	add	x2, x2, #0x920
   85528:	9400a262 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8552c:	3905a274 	strb	w20, [x19, #360]
   85530:	d2845881 	mov	x1, #0x22c4                	// #8900
   85534:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   85538:	39458262 	ldrb	w2, [x19, #352]
   8553c:	d2900283 	mov	x3, #0x8014                	// #32788
   85540:	f2a7f003 	movk	x3, #0x3f80, lsl #16
   85544:	b9400020 	ldr	w0, [x1]
   85548:	52860504 	mov	w4, #0x3028                	// #12328
   8554c:	12067800 	and	w0, w0, #0xfdffffff
   85550:	b9000020 	str	w0, [x1]
   85554:	b9000064 	str	w4, [x3]
   85558:	3707f302 	tbnz	w2, #0, 853b8 <CHDMISoundBaseDevice::Start()+0x68>
   8555c:	b9417262 	ldr	w2, [x19, #368]
   85560:	52800e03 	mov	w3, #0x70                  	// #112
   85564:	72a007e3 	movk	w3, #0x3f, lsl #16
   85568:	0b030040 	add	w0, w2, w3
   8556c:	53185c01 	lsl	w1, w0, #8
   85570:	aa0103e0 	mov	x0, x1
   85574:	b9400021 	ldr	w1, [x1]
   85578:	37100aa1 	tbnz	w1, #2, 856cc <CHDMISoundBaseDevice::Start()+0x37c>
   8557c:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   85580:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   85584:	52800021 	mov	w1, #0x1                   	// #1
   85588:	1ac22021 	lsl	w1, w1, w2
   8558c:	b9400082 	ldr	w2, [x4]
   85590:	6a02003f 	tst	w1, w2
   85594:	54000a61 	b.ne	856e0 <CHDMISoundBaseDevice::Start()+0x390>  // b.any
   85598:	f940ce61 	ldr	x1, [x19, #408]
   8559c:	b4000b61 	cbz	x1, 85708 <CHDMISoundBaseDevice::Start()+0x3b8>
   855a0:	11001000 	add	w0, w0, #0x4
   855a4:	32020422 	orr	w2, w1, #0xc0000000
   855a8:	2a0003e1 	mov	w1, w0
   855ac:	52800024 	mov	w4, #0x1                   	// #1
   855b0:	72a21e24 	movk	w4, #0x10f1, lsl #16
   855b4:	aa1303e0 	mov	x0, x19
   855b8:	b9000022 	str	w2, [x1]
   855bc:	b9417261 	ldr	w1, [x19, #368]
   855c0:	0b030021 	add	w1, w1, w3
   855c4:	53185c21 	lsl	w1, w1, #8
   855c8:	b9000024 	str	w4, [x1]
   855cc:	97fffc25 	bl	84660 <CHDMISoundBaseDevice::GetNextChunk()>
   855d0:	3707ef40 	tbnz	w0, #0, 853b8 <CHDMISoundBaseDevice::Start()+0x68>
   855d4:	b941ae60 	ldr	w0, [x19, #428]
   855d8:	35000520 	cbnz	w0, 8567c <CHDMISoundBaseDevice::Start()+0x32c>
   855dc:	b9416e60 	ldr	w0, [x19, #364]
   855e0:	7100081f 	cmp	w0, #0x2
   855e4:	54ffeea1 	b.ne	853b8 <CHDMISoundBaseDevice::Start()+0x68>  // b.any
   855e8:	b9417260 	ldr	w0, [x19, #368]
   855ec:	528e0385 	mov	w5, #0x701c                	// #28700
   855f0:	72a7e005 	movk	w5, #0x3f00, lsl #16
   855f4:	d2900283 	mov	x3, #0x8014                	// #32788
   855f8:	f2a7f003 	movk	x3, #0x3f80, lsl #16
   855fc:	529000c4 	mov	w4, #0x8006                	// #32774
   85600:	0b0020a0 	add	w0, w5, w0, lsl #8
   85604:	d2845881 	mov	x1, #0x22c4                	// #8900
   85608:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   8560c:	52800082 	mov	w2, #0x4                   	// #4
   85610:	b900001f 	str	wzr, [x0]
   85614:	b9000064 	str	w4, [x3]
   85618:	b9400020 	ldr	w0, [x1]
   8561c:	32070000 	orr	w0, w0, #0x2000000
   85620:	b9000020 	str	w0, [x1]
   85624:	b9016e62 	str	w2, [x19, #364]
   85628:	b941ae60 	ldr	w0, [x19, #428]
   8562c:	34ffec60 	cbz	w0, 853b8 <CHDMISoundBaseDevice::Start()+0x68>
   85630:	94009ec4 	bl	ad140 <LeaveCritical>
   85634:	52800020 	mov	w0, #0x1                   	// #1
   85638:	17ffffa7 	b	854d4 <CHDMISoundBaseDevice::Start()+0x184>
   8563c:	f900aa7f 	str	xzr, [x19, #336]
   85640:	9400796c 	bl	a3bf0 <CLogger::Get()>
   85644:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85648:	910a4021 	add	x1, x1, #0x290
   8564c:	910ca023 	add	x3, x1, #0x328
   85650:	17ffff9b 	b	854bc <CHDMISoundBaseDevice::Start()+0x16c>
   85654:	d2845881 	mov	x1, #0x22c4                	// #8900
   85658:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   8565c:	d2900282 	mov	x2, #0x8014                	// #32788
   85660:	f2a7f002 	movk	x2, #0x3f80, lsl #16
   85664:	b9400020 	ldr	w0, [x1]
   85668:	52860503 	mov	w3, #0x3028                	// #12328
   8566c:	12067800 	and	w0, w0, #0xfdffffff
   85670:	b9000020 	str	w0, [x1]
   85674:	b9000043 	str	w3, [x2]
   85678:	17ffffb9 	b	8555c <CHDMISoundBaseDevice::Start()+0x20c>
   8567c:	94009e81 	bl	ad080 <EnterCritical>
   85680:	b9416e60 	ldr	w0, [x19, #364]
   85684:	7100081f 	cmp	w0, #0x2
   85688:	54fffd01 	b.ne	85628 <CHDMISoundBaseDevice::Start()+0x2d8>  // b.any
   8568c:	17ffffd7 	b	855e8 <CHDMISoundBaseDevice::Start()+0x298>
   85690:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85694:	910a4021 	add	x1, x1, #0x290
   85698:	910e4020 	add	x0, x1, #0x390
   8569c:	52802702 	mov	w2, #0x138                 	// #312
   856a0:	94007218 	bl	a1f00 <assertion_failed>
   856a4:	94007953 	bl	a3bf0 <CLogger::Get()>
   856a8:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   856ac:	910a4021 	add	x1, x1, #0x290
   856b0:	910d2023 	add	x3, x1, #0x348
   856b4:	52800042 	mov	w2, #0x2                   	// #2
   856b8:	91070021 	add	x1, x1, #0x1c0
   856bc:	94007b41 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   856c0:	528000a0 	mov	w0, #0x5                   	// #5
   856c4:	b9016e60 	str	w0, [x19, #364]
   856c8:	17ffff82 	b	854d0 <CHDMISoundBaseDevice::Start()+0x180>
   856cc:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   856d0:	910a4021 	add	x1, x1, #0x290
   856d4:	910ec020 	add	x0, x1, #0x3b0
   856d8:	52802d82 	mov	w2, #0x16c                 	// #364
   856dc:	94007209 	bl	a1f00 <assertion_failed>
   856e0:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   856e4:	910a4021 	add	x1, x1, #0x290
   856e8:	910fa020 	add	x0, x1, #0x3e8
   856ec:	52802da2 	mov	w2, #0x16d                 	// #365
   856f0:	94007204 	bl	a1f00 <assertion_failed>
   856f4:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   856f8:	910a4021 	add	x1, x1, #0x290
   856fc:	91038020 	add	x0, x1, #0xe0
   85700:	52802902 	mov	w2, #0x148                 	// #328
   85704:	940071ff 	bl	a1f00 <assertion_failed>
   85708:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   8570c:	910a4021 	add	x1, x1, #0x290
   85710:	91108020 	add	x0, x1, #0x420
   85714:	52802de2 	mov	w2, #0x16f                 	// #367
   85718:	940071fa 	bl	a1f00 <assertion_failed>
   8571c:	d2845881 	mov	x1, #0x22c4                	// #8900
   85720:	f2a7f201 	movk	x1, #0x3f90, lsl #16
   85724:	17ffff1e 	b	8539c <CHDMISoundBaseDevice::Start()+0x4c>
   85728:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   8572c:	910a4021 	add	x1, x1, #0x290
   85730:	910da020 	add	x0, x1, #0x368
   85734:	52802242 	mov	w2, #0x112                 	// #274
   85738:	940071f2 	bl	a1f00 <assertion_failed>
   8573c:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85740:	910a4021 	add	x1, x1, #0x290
   85744:	91056020 	add	x0, x1, #0x158
   85748:	52802982 	mov	w2, #0x14c                 	// #332
   8574c:	940071ed 	bl	a1f00 <assertion_failed>
   85750:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85754:	910a4021 	add	x1, x1, #0x290
   85758:	91038020 	add	x0, x1, #0xe0
   8575c:	528024c2 	mov	w2, #0x126                 	// #294
   85760:	940071e8 	bl	a1f00 <assertion_failed>
	...

0000000000085770 <CI2SSoundBaseDevice::GetRangeMin() const>:
   85770:	320927e0 	mov	w0, #0xff800001            	// #-8388607
   85774:	d65f03c0 	ret
   85778:	d503201f 	nop
   8577c:	d503201f 	nop

0000000000085780 <CI2SSoundBaseDevice::GetRangeMax() const>:
   85780:	12bff000 	mov	w0, #0x7fffff              	// #8388607
   85784:	d65f03c0 	ret
   85788:	d503201f 	nop
   8578c:	d503201f 	nop

0000000000085790 <CI2SSoundBaseDevice::GetController()>:
   85790:	f941a800 	ldr	x0, [x0, #848]
   85794:	d65f03c0 	ret
   85798:	d503201f 	nop
   8579c:	d503201f 	nop

00000000000857a0 <CI2SSoundBaseDevice::Cancel()>:
   857a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   857a4:	910003fd 	mov	x29, sp
   857a8:	f9000bf3 	str	x19, [sp, #16]
   857ac:	aa0003f3 	mov	x19, x0
   857b0:	b9415400 	ldr	w0, [x0, #340]
   857b4:	7100041f 	cmp	w0, #0x1
   857b8:	540000a1 	b.ne	857cc <CI2SSoundBaseDevice::Cancel()+0x2c>  // b.any
   857bc:	910ba260 	add	x0, x19, #0x2e8
   857c0:	f9400bf3 	ldr	x19, [sp, #16]
   857c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   857c8:	140006ce 	b	87300 <CDMASoundBuffers::Cancel()>
   857cc:	910a2260 	add	x0, x19, #0x288
   857d0:	940006cc 	bl	87300 <CDMASoundBuffers::Cancel()>
   857d4:	b9415660 	ldr	w0, [x19, #340]
   857d8:	35ffff20 	cbnz	w0, 857bc <CI2SSoundBaseDevice::Cancel()+0x1c>
   857dc:	f9400bf3 	ldr	x19, [sp, #16]
   857e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   857e4:	d65f03c0 	ret
   857e8:	d503201f 	nop
   857ec:	d503201f 	nop

00000000000857f0 <CI2SSoundBaseDevice::IsActive() const>:
   857f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   857f4:	910003fd 	mov	x29, sp
   857f8:	f9000bf3 	str	x19, [sp, #16]
   857fc:	aa0003f3 	mov	x19, x0
   85800:	b9415400 	ldr	w0, [x0, #340]
   85804:	7100041f 	cmp	w0, #0x1
   85808:	540000a1 	b.ne	8581c <CI2SSoundBaseDevice::IsActive() const+0x2c>  // b.any
   8580c:	910ba260 	add	x0, x19, #0x2e8
   85810:	f9400bf3 	ldr	x19, [sp, #16]
   85814:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85818:	140006da 	b	87380 <CDMASoundBuffers::IsActive() const>
   8581c:	910a2260 	add	x0, x19, #0x288
   85820:	940006d8 	bl	87380 <CDMASoundBuffers::IsActive() const>
   85824:	37000060 	tbnz	w0, #0, 85830 <CI2SSoundBaseDevice::IsActive() const+0x40>
   85828:	b9415661 	ldr	w1, [x19, #340]
   8582c:	35ffff01 	cbnz	w1, 8580c <CI2SSoundBaseDevice::IsActive() const+0x1c>
   85830:	f9400bf3 	ldr	x19, [sp, #16]
   85834:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85838:	d65f03c0 	ret
   8583c:	d503201f 	nop

0000000000085840 <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)>:
   85840:	b4000183 	cbz	x3, 85870 <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x30>
   85844:	12001c04 	and	w4, w0, #0xff
   85848:	aa0303e0 	mov	x0, x3
   8584c:	360000a4 	tbz	w4, #0, 85860 <CI2SSoundBaseDevice::TXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x20>
   85850:	f9400063 	ldr	x3, [x3]
   85854:	f9403c63 	ldr	x3, [x3, #120]
   85858:	aa0303f0 	mov	x16, x3
   8585c:	d61f0200 	br	x16
   85860:	52800021 	mov	w1, #0x1                   	// #1
   85864:	52800000 	mov	w0, #0x0                   	// #0
   85868:	390a0061 	strb	w1, [x3, #640]
   8586c:	d65f03c0 	ret
   85870:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85874:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85878:	911b2021 	add	x1, x1, #0x6c8
   8587c:	910003fd 	mov	x29, sp
   85880:	91006020 	add	x0, x1, #0x18
   85884:	528030e2 	mov	w2, #0x187                 	// #391
   85888:	9400719e 	bl	a1f00 <assertion_failed>
   8588c:	d503201f 	nop

0000000000085890 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)>:
   85890:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85894:	910003fd 	mov	x29, sp
   85898:	b40001e3 	cbz	x3, 858d4 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x44>
   8589c:	12001c04 	and	w4, w0, #0xff
   858a0:	aa0303e0 	mov	x0, x3
   858a4:	360000e4 	tbz	w4, #0, 858c0 <CI2SSoundBaseDevice::RXCompletedHandler(bool, unsigned int*, unsigned int, void*)+0x30>
   858a8:	f9400063 	ldr	x3, [x3]
   858ac:	f9404463 	ldr	x3, [x3, #136]
   858b0:	d63f0060 	blr	x3
   858b4:	52800000 	mov	w0, #0x0                   	// #0
   858b8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   858bc:	d65f03c0 	ret
   858c0:	52800021 	mov	w1, #0x1                   	// #1
   858c4:	390a0061 	strb	w1, [x3, #640]
   858c8:	52800000 	mov	w0, #0x0                   	// #0
   858cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   858d0:	d65f03c0 	ret
   858d4:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   858d8:	911b2021 	add	x1, x1, #0x6c8
   858dc:	91006020 	add	x0, x1, #0x18
   858e0:	528032e2 	mov	w2, #0x197                 	// #407
   858e4:	94007187 	bl	a1f00 <assertion_failed>
   858e8:	d503201f 	nop
   858ec:	d503201f 	nop

00000000000858f0 <CI2SSoundBaseDevice::RunI2S()>:
   858f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   858f4:	910003fd 	mov	x29, sp
   858f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   858fc:	d2860015 	mov	x21, #0x3000                	// #12288
   85900:	f2a7e415 	movk	x21, #0x3f20, lsl #16
   85904:	a90153f3 	stp	x19, x20, [sp, #16]
   85908:	aa0003f3 	mov	x19, x0
   8590c:	aa1503f4 	mov	x20, x21
   85910:	f9001bf7 	str	x23, [sp, #48]
   85914:	91056017 	add	x23, x0, #0x158
   85918:	b90002bf 	str	wzr, [x21]
   8591c:	528003b6 	mov	w22, #0x1d                  	// #29
   85920:	9400946c 	bl	aaad0 <CTimer::Get()>
   85924:	52800140 	mov	w0, #0xa                   	// #10
   85928:	94009426 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   8592c:	b94002a0 	ldr	w0, [x21]
   85930:	321d0400 	orr	w0, w0, #0x18
   85934:	b8010680 	str	w0, [x20], #16
   85938:	94009466 	bl	aaad0 <CTimer::Get()>
   8593c:	52800140 	mov	w0, #0xa                   	// #10
   85940:	94009420 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   85944:	39450261 	ldrb	w1, [x19, #320]
   85948:	52984202 	mov	w2, #0xc210                	// #49680
   8594c:	72b80202 	movk	w2, #0xc010, lsl #16
   85950:	529f8400 	mov	w0, #0xfc20                	// #64544
   85954:	72a01e00 	movk	w0, #0xf0, lsl #16
   85958:	72000021 	ands	w1, w1, #0x1
   8595c:	51680001 	sub	w1, w0, #0xa00, lsl #12
   85960:	b90012a2 	str	w2, [x21, #16]
   85964:	1a811000 	csel	w0, w0, w1, ne	// ne = any
   85968:	b81fc282 	stur	w2, [x20, #-4]
   8596c:	b81f8280 	stur	w0, [x20, #-8]
   85970:	52800395 	mov	w21, #0x1c                  	// #28
   85974:	528000d4 	mov	w20, #0x6                   	// #6
   85978:	94007d56 	bl	a4ed0 <CMachineInfo::Get()>
   8597c:	94007c0d 	bl	a49b0 <CMachineInfo::GetMachineModel() const>
   85980:	51000801 	sub	w1, w0, #0x2
   85984:	7100001f 	cmp	w0, #0x0
   85988:	52800082 	mov	w2, #0x4                   	// #4
   8598c:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   85990:	52800241 	mov	w1, #0x12                  	// #18
   85994:	1a9f87e0 	cset	w0, ls	// ls = plast
   85998:	7100001f 	cmp	w0, #0x0
   8599c:	aa1703e0 	mov	x0, x23
   859a0:	1a8112b5 	csel	w21, w21, w1, ne	// ne = any
   859a4:	52800261 	mov	w1, #0x13                  	// #19
   859a8:	1a821294 	csel	w20, w20, w2, ne	// ne = any
   859ac:	1a8112d6 	csel	w22, w22, w1, ne	// ne = any
   859b0:	2a1503e1 	mov	w1, w21
   859b4:	9400a2fb 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   859b8:	52800022 	mov	w2, #0x1                   	// #1
   859bc:	aa1703e0 	mov	x0, x23
   859c0:	2a1403e1 	mov	w1, w20
   859c4:	91068277 	add	x23, x19, #0x1a0
   859c8:	9400a59a 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   859cc:	2a1603e1 	mov	w1, w22
   859d0:	aa1703e0 	mov	x0, x23
   859d4:	9400a2f3 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   859d8:	aa1703e0 	mov	x0, x23
   859dc:	2a1403e1 	mov	w1, w20
   859e0:	52800022 	mov	w2, #0x1                   	// #1
   859e4:	9400a593 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   859e8:	b9415660 	ldr	w0, [x19, #340]
   859ec:	35000360 	cbnz	w0, 85a58 <CI2SSoundBaseDevice::RunI2S()+0x168>
   859f0:	9108c273 	add	x19, x19, #0x230
   859f4:	11000ea1 	add	w1, w21, #0x3
   859f8:	aa1303e0 	mov	x0, x19
   859fc:	9400a2e9 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   85a00:	2a1403e1 	mov	w1, w20
   85a04:	aa1303e0 	mov	x0, x19
   85a08:	52800022 	mov	w2, #0x1                   	// #1
   85a0c:	9400a589 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85a10:	d2860013 	mov	x19, #0x3000                	// #12288
   85a14:	f2a7e413 	movk	x19, #0x3f20, lsl #16
   85a18:	b9400260 	ldr	w0, [x19]
   85a1c:	32070000 	orr	w0, w0, #0x2000000
   85a20:	b9000260 	str	w0, [x19]
   85a24:	9400942b 	bl	aaad0 <CTimer::Get()>
   85a28:	52800640 	mov	w0, #0x32                  	// #50
   85a2c:	940093e5 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   85a30:	b9400260 	ldr	w0, [x19]
   85a34:	32000000 	orr	w0, w0, #0x1
   85a38:	b9000260 	str	w0, [x19]
   85a3c:	94009425 	bl	aaad0 <CTimer::Get()>
   85a40:	a94153f3 	ldp	x19, x20, [sp, #16]
   85a44:	52800140 	mov	w0, #0xa                   	// #10
   85a48:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85a4c:	f9401bf7 	ldr	x23, [sp, #48]
   85a50:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85a54:	140093db 	b	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   85a58:	9107a276 	add	x22, x19, #0x1e8
   85a5c:	11000aa1 	add	w1, w21, #0x2
   85a60:	aa1603e0 	mov	x0, x22
   85a64:	9400a2cf 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   85a68:	aa1603e0 	mov	x0, x22
   85a6c:	2a1403e1 	mov	w1, w20
   85a70:	52800022 	mov	w2, #0x1                   	// #1
   85a74:	9400a56f 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85a78:	b9415660 	ldr	w0, [x19, #340]
   85a7c:	7100041f 	cmp	w0, #0x1
   85a80:	54fffc80 	b.eq	85a10 <CI2SSoundBaseDevice::RunI2S()+0x120>  // b.none
   85a84:	17ffffdb 	b	859f0 <CI2SSoundBaseDevice::RunI2S()+0x100>
   85a88:	d503201f 	nop
   85a8c:	d503201f 	nop

0000000000085a90 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)>:
   85a90:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85a94:	910003fd 	mov	x29, sp
   85a98:	a90153f3 	stp	x19, x20, [sp, #16]
   85a9c:	aa0003f3 	mov	x19, x0
   85aa0:	2a0303f4 	mov	w20, w3
   85aa4:	2a0203e3 	mov	w3, w2
   85aa8:	a9025bf5 	stp	x21, x22, [sp, #32]
   85aac:	aa0103f6 	mov	x22, x1
   85ab0:	2a0203f5 	mov	w21, w2
   85ab4:	52800061 	mov	w1, #0x3                   	// #3
   85ab8:	52800002 	mov	w2, #0x0                   	// #0
   85abc:	a90363f7 	stp	x23, x24, [sp, #48]
   85ac0:	2a0703f7 	mov	w23, w7
   85ac4:	aa0503f8 	mov	x24, x5
   85ac8:	a9046bf9 	stp	x25, x26, [sp, #64]
   85acc:	12001cd9 	and	w25, w6, #0xff
   85ad0:	12001c9a 	and	w26, w4, #0xff
   85ad4:	52800004 	mov	w4, #0x0                   	// #0
   85ad8:	97fff3ba 	bl	829c0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
   85adc:	b9013e74 	str	w20, [x19, #316]
   85ae0:	90000220 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   85ae4:	9101e000 	add	x0, x0, #0x78
   85ae8:	f9000260 	str	x0, [x19]
   85aec:	91056260 	add	x0, x19, #0x158
   85af0:	3905027a 	strb	w26, [x19, #320]
   85af4:	f900a678 	str	x24, [x19, #328]
   85af8:	39054279 	strb	w25, [x19, #336]
   85afc:	b9015677 	str	w23, [x19, #340]
   85b00:	9109e277 	add	x23, x19, #0x278
   85b04:	9400a29b 	bl	ae570 <CGPIOPin::CGPIOPin()>
   85b08:	91068260 	add	x0, x19, #0x1a0
   85b0c:	9400a299 	bl	ae570 <CGPIOPin::CGPIOPin()>
   85b10:	9107a260 	add	x0, x19, #0x1e8
   85b14:	9400a297 	bl	ae570 <CGPIOPin::CGPIOPin()>
   85b18:	9108c260 	add	x0, x19, #0x230
   85b1c:	9400a295 	bl	ae570 <CGPIOPin::CGPIOPin()>
   85b20:	aa1703e0 	mov	x0, x23
   85b24:	528000c2 	mov	w2, #0x6                   	// #6
   85b28:	52800261 	mov	w1, #0x13                  	// #19
   85b2c:	9400a1f1 	bl	ae2f0 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   85b30:	390a027f 	strb	wzr, [x19, #640]
   85b34:	aa1603e5 	mov	x5, x22
   85b38:	2a1403e4 	mov	w4, w20
   85b3c:	910a2260 	add	x0, x19, #0x288
   85b40:	52800043 	mov	w3, #0x2                   	// #2
   85b44:	52800021 	mov	w1, #0x1                   	// #1
   85b48:	52860082 	mov	w2, #0x3004                	// #12292
   85b4c:	72a7e402 	movk	w2, #0x3f20, lsl #16
   85b50:	94000590 	bl	87190 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>
   85b54:	910ba260 	add	x0, x19, #0x2e8
   85b58:	aa1603e5 	mov	x5, x22
   85b5c:	2a1403e4 	mov	w4, w20
   85b60:	52860082 	mov	w2, #0x3004                	// #12292
   85b64:	72a7e402 	movk	w2, #0x3f20, lsl #16
   85b68:	52800063 	mov	w3, #0x3                   	// #3
   85b6c:	52800001 	mov	w1, #0x0                   	// #0
   85b70:	94000588 	bl	87190 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>
   85b74:	b9413e60 	ldr	w0, [x19, #316]
   85b78:	390d227f 	strb	wzr, [x19, #840]
   85b7c:	f901aa7f 	str	xzr, [x19, #848]
   85b80:	71007c1f 	cmp	w0, #0x1f
   85b84:	540005c9 	b.ls	85c3c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1ac>  // b.plast
   85b88:	37000640 	tbnz	w0, #0, 85c50 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1c0>
   85b8c:	39450260 	ldrb	w0, [x19, #320]
   85b90:	37000340 	tbnz	w0, #0, 85bf8 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x168>
   85b94:	94007ccf 	bl	a4ed0 <CMachineInfo::Get()>
   85b98:	528000c1 	mov	w1, #0x6                   	// #6
   85b9c:	94007c35 	bl	a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   85ba0:	34000620 	cbz	w0, 85c64 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1d4>
   85ba4:	1283e7e1 	mov	w1, #0xffffe0c0            	// #-8000
   85ba8:	0b0102a2 	add	w2, w21, w1
   85bac:	5299d801 	mov	w1, #0xcec0                	// #52928
   85bb0:	72a00041 	movk	w1, #0x2, lsl #16
   85bb4:	6b01005f 	cmp	w2, w1
   85bb8:	54000608 	b.hi	85c78 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1e8>  // b.pmore
   85bbc:	72001403 	ands	w3, w0, #0x3f
   85bc0:	54000661 	b.ne	85c8c <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1fc>  // b.any
   85bc4:	53067c00 	lsr	w0, w0, #6
   85bc8:	53017ea2 	lsr	w2, w21, #1
   85bcc:	1ad50801 	udiv	w1, w0, w21
   85bd0:	1b158020 	msub	w0, w1, w21, w0
   85bd4:	0b003040 	add	w0, w2, w0, lsl #12
   85bd8:	1ad50802 	udiv	w2, w0, w21
   85bdc:	7140045f 	cmp	w2, #0x1, lsl #12
   85be0:	54000608 	b.hi	85ca0 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x210>  // b.pmore
   85be4:	54000260 	b.eq	85c30 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x1a0>  // b.none
   85be8:	6b15001f 	cmp	w0, w21
   85bec:	1a9f37e3 	cset	w3, cs	// cs = hs, nlast
   85bf0:	aa1703e0 	mov	x0, x23
   85bf4:	9400a1d7 	bl	ae350 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   85bf8:	aa1303e0 	mov	x0, x19
   85bfc:	97ffff3d 	bl	858f0 <CI2SSoundBaseDevice::RunI2S()>
   85c00:	940074ac 	bl	a2eb0 <CDeviceNameService::Get()>
   85c04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85c08:	aa1303e2 	mov	x2, x19
   85c0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c10:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c14:	911b2021 	add	x1, x1, #0x6c8
   85c18:	52800003 	mov	w3, #0x0                   	// #0
   85c1c:	a94363f7 	ldp	x23, x24, [sp, #48]
   85c20:	91034021 	add	x1, x1, #0xd0
   85c24:	a9446bf9 	ldp	x25, x26, [sp, #64]
   85c28:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85c2c:	140073b1 	b	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   85c30:	11000421 	add	w1, w1, #0x1
   85c34:	52800002 	mov	w2, #0x0                   	// #0
   85c38:	17ffffee 	b	85bf0 <CI2SSoundBaseDevice::CI2SSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int, bool, CI2CMaster*, unsigned char, CI2SSoundBaseDevice::TDeviceMode)+0x160>
   85c3c:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c40:	911b2021 	add	x1, x1, #0x6c8
   85c44:	9100a020 	add	x0, x1, #0x28
   85c48:	52800da2 	mov	w2, #0x6d                  	// #109
   85c4c:	940070ad 	bl	a1f00 <assertion_failed>
   85c50:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c54:	911b2021 	add	x1, x1, #0x6c8
   85c58:	91010020 	add	x0, x1, #0x40
   85c5c:	52800dc2 	mov	w2, #0x6e                  	// #110
   85c60:	940070a8 	bl	a1f00 <assertion_failed>
   85c64:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c68:	911b2021 	add	x1, x1, #0x6c8
   85c6c:	91016020 	add	x0, x1, #0x58
   85c70:	52800ea2 	mov	w2, #0x75                  	// #117
   85c74:	940070a3 	bl	a1f00 <assertion_failed>
   85c78:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c7c:	911b2021 	add	x1, x1, #0x6c8
   85c80:	9101a020 	add	x0, x1, #0x68
   85c84:	52800ec2 	mov	w2, #0x76                  	// #118
   85c88:	9400709e 	bl	a1f00 <assertion_failed>
   85c8c:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85c90:	911b2021 	add	x1, x1, #0x6c8
   85c94:	91026020 	add	x0, x1, #0x98
   85c98:	52800ee2 	mov	w2, #0x77                  	// #119
   85c9c:	94007099 	bl	a1f00 <assertion_failed>
   85ca0:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85ca4:	911b2021 	add	x1, x1, #0x6c8
   85ca8:	91030020 	add	x0, x1, #0xc0
   85cac:	52800f62 	mov	w2, #0x7b                  	// #123
   85cb0:	94007094 	bl	a1f00 <assertion_failed>
   85cb4:	d503201f 	nop
   85cb8:	d503201f 	nop
   85cbc:	d503201f 	nop

0000000000085cc0 <CI2SSoundBaseDevice::StopI2S()>:
   85cc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85cc4:	d2860001 	mov	x1, #0x3000                	// #12288
   85cc8:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   85ccc:	910003fd 	mov	x29, sp
   85cd0:	f9000bf3 	str	x19, [sp, #16]
   85cd4:	aa0003f3 	mov	x19, x0
   85cd8:	b900003f 	str	wzr, [x1]
   85cdc:	9400937d 	bl	aaad0 <CTimer::Get()>
   85ce0:	52800640 	mov	w0, #0x32                  	// #50
   85ce4:	94009337 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   85ce8:	39450260 	ldrb	w0, [x19, #320]
   85cec:	36000360 	tbz	w0, #0, 85d58 <CI2SSoundBaseDevice::StopI2S()+0x98>
   85cf0:	91056260 	add	x0, x19, #0x158
   85cf4:	52800022 	mov	w2, #0x1                   	// #1
   85cf8:	52800001 	mov	w1, #0x0                   	// #0
   85cfc:	9400a4cd 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85d00:	91068260 	add	x0, x19, #0x1a0
   85d04:	52800022 	mov	w2, #0x1                   	// #1
   85d08:	52800001 	mov	w1, #0x0                   	// #0
   85d0c:	9400a4c9 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85d10:	b9415660 	ldr	w0, [x19, #340]
   85d14:	350000e0 	cbnz	w0, 85d30 <CI2SSoundBaseDevice::StopI2S()+0x70>
   85d18:	9108c260 	add	x0, x19, #0x230
   85d1c:	52800022 	mov	w2, #0x1                   	// #1
   85d20:	f9400bf3 	ldr	x19, [sp, #16]
   85d24:	52800001 	mov	w1, #0x0                   	// #0
   85d28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85d2c:	1400a4c1 	b	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85d30:	9107a260 	add	x0, x19, #0x1e8
   85d34:	52800022 	mov	w2, #0x1                   	// #1
   85d38:	52800001 	mov	w1, #0x0                   	// #0
   85d3c:	9400a4bd 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85d40:	b9415660 	ldr	w0, [x19, #340]
   85d44:	7100041f 	cmp	w0, #0x1
   85d48:	54fffe81 	b.ne	85d18 <CI2SSoundBaseDevice::StopI2S()+0x58>  // b.any
   85d4c:	f9400bf3 	ldr	x19, [sp, #16]
   85d50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85d54:	d65f03c0 	ret
   85d58:	9109e260 	add	x0, x19, #0x278
   85d5c:	9400a1f1 	bl	ae520 <CGPIOClock::Stop()>
   85d60:	17ffffe4 	b	85cf0 <CI2SSoundBaseDevice::StopI2S()+0x30>
   85d64:	d503201f 	nop
   85d68:	d503201f 	nop
   85d6c:	d503201f 	nop

0000000000085d70 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
   85d70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85d74:	90000221 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   85d78:	9101e021 	add	x1, x1, #0x78
   85d7c:	910003fd 	mov	x29, sp
   85d80:	f9000bf3 	str	x19, [sp, #16]
   85d84:	aa0003f3 	mov	x19, x0
   85d88:	f9000001 	str	x1, [x0]
   85d8c:	94007449 	bl	a2eb0 <CDeviceNameService::Get()>
   85d90:	d0000181 	adrp	x1, b7000 <_etext+0x49c8>
   85d94:	911b2021 	add	x1, x1, #0x6c8
   85d98:	91034021 	add	x1, x1, #0xd0
   85d9c:	52800002 	mov	w2, #0x0                   	// #0
   85da0:	94007390 	bl	a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   85da4:	f941aa60 	ldr	x0, [x19, #848]
   85da8:	b4000120 	cbz	x0, 85dcc <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x5c>
   85dac:	f9400002 	ldr	x2, [x0]
   85db0:	b0000001 	adrp	x1, 86000 <CI2SSoundBaseDevice::Start()+0xa0>
   85db4:	91040021 	add	x1, x1, #0x100
   85db8:	f9400442 	ldr	x2, [x2, #8]
   85dbc:	eb01005f 	cmp	x2, x1
   85dc0:	54000301 	b.ne	85e20 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0xb0>  // b.any
   85dc4:	d2800101 	mov	x1, #0x8                   	// #8
   85dc8:	9400977a 	bl	abbb0 <operator delete(void*, unsigned long)>
   85dcc:	f901aa7f 	str	xzr, [x19, #848]
   85dd0:	aa1303e0 	mov	x0, x19
   85dd4:	97ffffbb 	bl	85cc0 <CI2SSoundBaseDevice::StopI2S()>
   85dd8:	910ba260 	add	x0, x19, #0x2e8
   85ddc:	940004fd 	bl	871d0 <CDMASoundBuffers::~CDMASoundBuffers()>
   85de0:	910a2260 	add	x0, x19, #0x288
   85de4:	940004fb 	bl	871d0 <CDMASoundBuffers::~CDMASoundBuffers()>
   85de8:	9109e260 	add	x0, x19, #0x278
   85dec:	9400a14d 	bl	ae320 <CGPIOClock::~CGPIOClock()>
   85df0:	9108c260 	add	x0, x19, #0x230
   85df4:	9400a1d7 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   85df8:	9107a260 	add	x0, x19, #0x1e8
   85dfc:	9400a1d5 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   85e00:	91068260 	add	x0, x19, #0x1a0
   85e04:	9400a1d3 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   85e08:	91056260 	add	x0, x19, #0x158
   85e0c:	9400a1d1 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   85e10:	aa1303e0 	mov	x0, x19
   85e14:	f9400bf3 	ldr	x19, [sp, #16]
   85e18:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85e1c:	17fff1e5 	b	825b0 <CSoundBaseDevice::~CSoundBaseDevice()>
   85e20:	d63f0040 	blr	x2
   85e24:	17ffffea 	b	85dcc <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()+0x5c>
   85e28:	d503201f 	nop
   85e2c:	d503201f 	nop

0000000000085e30 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>:
   85e30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85e34:	910003fd 	mov	x29, sp
   85e38:	f9000bf3 	str	x19, [sp, #16]
   85e3c:	aa0003f3 	mov	x19, x0
   85e40:	97ffffcc 	bl	85d70 <CI2SSoundBaseDevice::~CI2SSoundBaseDevice()>
   85e44:	aa1303e0 	mov	x0, x19
   85e48:	d2806b01 	mov	x1, #0x358                 	// #856
   85e4c:	f9400bf3 	ldr	x19, [sp, #16]
   85e50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85e54:	14009757 	b	abbb0 <operator delete(void*, unsigned long)>
   85e58:	d503201f 	nop
   85e5c:	d503201f 	nop

0000000000085e60 <CI2SSoundBaseDevice::ControllerFactory()>:
   85e60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85e64:	910003fd 	mov	x29, sp
   85e68:	a90153f3 	stp	x19, x20, [sp, #16]
   85e6c:	aa0003f3 	mov	x19, x0
   85e70:	f940a400 	ldr	x0, [x0, #328]
   85e74:	b4000620 	cbz	x0, 85f38 <CI2SSoundBaseDevice::ControllerFactory()+0xd8>
   85e78:	d2800300 	mov	x0, #0x18                  	// #24
   85e7c:	9400972d 	bl	abb30 <operator new(unsigned long)>
   85e80:	f940a661 	ldr	x1, [x19, #328]
   85e84:	aa0003f4 	mov	x20, x0
   85e88:	39454262 	ldrb	w2, [x19, #336]
   85e8c:	94000365 	bl	86c20 <CPCM512xSoundController::CPCM512xSoundController(CI2CMaster*, unsigned char)>
   85e90:	f901aa74 	str	x20, [x19, #848]
   85e94:	aa1403e0 	mov	x0, x20
   85e98:	94000426 	bl	86f30 <CPCM512xSoundController::Probe()>
   85e9c:	370004e0 	tbnz	w0, #0, 85f38 <CI2SSoundBaseDevice::ControllerFactory()+0xd8>
   85ea0:	f941aa60 	ldr	x0, [x19, #848]
   85ea4:	b4000120 	cbz	x0, 85ec8 <CI2SSoundBaseDevice::ControllerFactory()+0x68>
   85ea8:	f9400002 	ldr	x2, [x0]
   85eac:	b0000001 	adrp	x1, 86000 <CI2SSoundBaseDevice::Start()+0xa0>
   85eb0:	91040021 	add	x1, x1, #0x100
   85eb4:	f9400442 	ldr	x2, [x2, #8]
   85eb8:	eb01005f 	cmp	x2, x1
   85ebc:	54000461 	b.ne	85f48 <CI2SSoundBaseDevice::ControllerFactory()+0xe8>  // b.any
   85ec0:	d2800101 	mov	x1, #0x8                   	// #8
   85ec4:	9400973b 	bl	abbb0 <operator delete(void*, unsigned long)>
   85ec8:	f901aa7f 	str	xzr, [x19, #848]
   85ecc:	d2800300 	mov	x0, #0x18                  	// #24
   85ed0:	94009718 	bl	abb30 <operator new(unsigned long)>
   85ed4:	aa0003f4 	mov	x20, x0
   85ed8:	f940a661 	ldr	x1, [x19, #328]
   85edc:	39454262 	ldrb	w2, [x19, #336]
   85ee0:	94000448 	bl	87000 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char)>
   85ee4:	f901aa74 	str	x20, [x19, #848]
   85ee8:	aa1403e0 	mov	x0, x20
   85eec:	9400047d 	bl	870e0 <CWM8960SoundController::Probe()>
   85ef0:	37000240 	tbnz	w0, #0, 85f38 <CI2SSoundBaseDevice::ControllerFactory()+0xd8>
   85ef4:	f941aa60 	ldr	x0, [x19, #848]
   85ef8:	b4000120 	cbz	x0, 85f1c <CI2SSoundBaseDevice::ControllerFactory()+0xbc>
   85efc:	f9400002 	ldr	x2, [x0]
   85f00:	b0000001 	adrp	x1, 86000 <CI2SSoundBaseDevice::Start()+0xa0>
   85f04:	91040021 	add	x1, x1, #0x100
   85f08:	f9400442 	ldr	x2, [x2, #8]
   85f0c:	eb01005f 	cmp	x2, x1
   85f10:	54000201 	b.ne	85f50 <CI2SSoundBaseDevice::ControllerFactory()+0xf0>  // b.any
   85f14:	d2800101 	mov	x1, #0x8                   	// #8
   85f18:	94009726 	bl	abbb0 <operator delete(void*, unsigned long)>
   85f1c:	39454260 	ldrb	w0, [x19, #336]
   85f20:	f901aa7f 	str	xzr, [x19, #848]
   85f24:	7100001f 	cmp	w0, #0x0
   85f28:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f2c:	1a9f17e0 	cset	w0, eq	// eq = none
   85f30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f34:	d65f03c0 	ret
   85f38:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f3c:	52800020 	mov	w0, #0x1                   	// #1
   85f40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f44:	d65f03c0 	ret
   85f48:	d63f0040 	blr	x2
   85f4c:	17ffffdf 	b	85ec8 <CI2SSoundBaseDevice::ControllerFactory()+0x68>
   85f50:	d63f0040 	blr	x2
   85f54:	17fffff2 	b	85f1c <CI2SSoundBaseDevice::ControllerFactory()+0xbc>
   85f58:	d503201f 	nop
   85f5c:	d503201f 	nop

0000000000085f60 <CI2SSoundBaseDevice::Start()>:
   85f60:	394a0001 	ldrb	w1, [x0, #640]
   85f64:	37000c01 	tbnz	w1, #0, 860e4 <CI2SSoundBaseDevice::Start()+0x184>
   85f68:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85f6c:	910003fd 	mov	x29, sp
   85f70:	394d2001 	ldrb	w1, [x0, #840]
   85f74:	a90153f3 	stp	x19, x20, [sp, #16]
   85f78:	aa0003f3 	mov	x19, x0
   85f7c:	36000701 	tbz	w1, #0, 8605c <CI2SSoundBaseDevice::Start()+0xfc>
   85f80:	b9413e60 	ldr	w0, [x19, #316]
   85f84:	7100fc1f 	cmp	w0, #0x3f
   85f88:	54000448 	b.hi	86010 <CI2SSoundBaseDevice::Start()+0xb0>  // b.pmore
   85f8c:	71007c1f 	cmp	w0, #0x1f
   85f90:	54000a09 	b.ls	860d0 <CI2SSoundBaseDevice::Start()+0x170>  // b.plast
   85f94:	d2860281 	mov	x1, #0x3014                	// #12308
   85f98:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   85f9c:	b9415662 	ldr	w2, [x19, #340]
   85fa0:	b9400020 	ldr	w0, [x1]
   85fa4:	7100045f 	cmp	w2, #0x1
   85fa8:	54000760 	b.eq	86094 <CI2SSoundBaseDevice::Start()+0x134>  // b.none
   85fac:	12116000 	and	w0, w0, #0xffff80ff
   85fb0:	32150400 	orr	w0, w0, #0x1800
   85fb4:	b9000020 	str	w0, [x1]
   85fb8:	350007c2 	cbnz	w2, 860b0 <CI2SSoundBaseDevice::Start()+0x150>
   85fbc:	b85ec020 	ldur	w0, [x1, #-20]
   85fc0:	32170000 	orr	w0, w0, #0x200
   85fc4:	b81ec020 	stur	w0, [x1, #-20]
   85fc8:	90000001 	adrp	x1, 85000 <CHDMISoundBaseDevice::GetHSMClockRate()+0x50>
   85fcc:	aa1303e2 	mov	x2, x19
   85fd0:	91210021 	add	x1, x1, #0x840
   85fd4:	910a2260 	add	x0, x19, #0x288
   85fd8:	94000622 	bl	87860 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>
   85fdc:	36000500 	tbz	w0, #0, 8607c <CI2SSoundBaseDevice::Start()+0x11c>
   85fe0:	b9415660 	ldr	w0, [x19, #340]
   85fe4:	52800081 	mov	w1, #0x4                   	// #4
   85fe8:	35000820 	cbnz	w0, 860ec <CI2SSoundBaseDevice::Start()+0x18c>
   85fec:	d2860002 	mov	x2, #0x3000                	// #12288
   85ff0:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   85ff4:	a94153f3 	ldp	x19, x20, [sp, #16]
   85ff8:	52800020 	mov	w0, #0x1                   	// #1
   85ffc:	b9400043 	ldr	w3, [x2]
   86000:	2a030021 	orr	w1, w1, w3
   86004:	b9000041 	str	w1, [x2]
   86008:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8600c:	d65f03c0 	ret
   86010:	d2860001 	mov	x1, #0x3000                	// #12288
   86014:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   86018:	b9415662 	ldr	w2, [x19, #340]
   8601c:	b9400020 	ldr	w0, [x1]
   86020:	7100045f 	cmp	w2, #0x1
   86024:	32170000 	orr	w0, w0, #0x200
   86028:	b9000020 	str	w0, [x1]
   8602c:	54fffce1 	b.ne	85fc8 <CI2SSoundBaseDevice::Start()+0x68>  // b.any
   86030:	52800014 	mov	w20, #0x0                   	// #0
   86034:	f0ffffe1 	adrp	x1, 85000 <CHDMISoundBaseDevice::GetHSMClockRate()+0x50>
   86038:	aa1303e2 	mov	x2, x19
   8603c:	91224021 	add	x1, x1, #0x890
   86040:	910ba260 	add	x0, x19, #0x2e8
   86044:	94000607 	bl	87860 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>
   86048:	360001a0 	tbz	w0, #0, 8607c <CI2SSoundBaseDevice::Start()+0x11c>
   8604c:	52800040 	mov	w0, #0x2                   	// #2
   86050:	72a01000 	movk	w0, #0x80, lsl #16
   86054:	2a000281 	orr	w1, w20, w0
   86058:	17ffffe5 	b	85fec <CI2SSoundBaseDevice::Start()+0x8c>
   8605c:	97ffff81 	bl	85e60 <CI2SSoundBaseDevice::ControllerFactory()>
   86060:	360000e0 	tbz	w0, #0, 8607c <CI2SSoundBaseDevice::Start()+0x11c>
   86064:	52800020 	mov	w0, #0x1                   	// #1
   86068:	390d2260 	strb	w0, [x19, #840]
   8606c:	b9413e60 	ldr	w0, [x19, #316]
   86070:	7100fc1f 	cmp	w0, #0x3f
   86074:	54fff8c9 	b.ls	85f8c <CI2SSoundBaseDevice::Start()+0x2c>  // b.plast
   86078:	17ffffe6 	b	86010 <CI2SSoundBaseDevice::Start()+0xb0>
   8607c:	52800020 	mov	w0, #0x1                   	// #1
   86080:	390a0260 	strb	w0, [x19, #640]
   86084:	a94153f3 	ldp	x19, x20, [sp, #16]
   86088:	52800000 	mov	w0, #0x0                   	// #0
   8608c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86090:	d65f03c0 	ret
   86094:	12196000 	and	w0, w0, #0xffffff80
   86098:	321d0400 	orr	w0, w0, #0x18
   8609c:	b9000020 	str	w0, [x1]
   860a0:	b85ec020 	ldur	w0, [x1, #-20]
   860a4:	32170000 	orr	w0, w0, #0x200
   860a8:	b81ec020 	stur	w0, [x1, #-20]
   860ac:	17ffffe1 	b	86030 <CI2SSoundBaseDevice::Start()+0xd0>
   860b0:	b9400020 	ldr	w0, [x1]
   860b4:	12196000 	and	w0, w0, #0xffffff80
   860b8:	321d0400 	orr	w0, w0, #0x18
   860bc:	b9000020 	str	w0, [x1]
   860c0:	b85ec020 	ldur	w0, [x1, #-20]
   860c4:	32170000 	orr	w0, w0, #0x200
   860c8:	b81ec020 	stur	w0, [x1, #-20]
   860cc:	17ffffbf 	b	85fc8 <CI2SSoundBaseDevice::Start()+0x68>
   860d0:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   860d4:	911b2021 	add	x1, x1, #0x6c8
   860d8:	9100a020 	add	x0, x1, #0x28
   860dc:	528016e2 	mov	w2, #0xb7                  	// #183
   860e0:	94006f88 	bl	a1f00 <assertion_failed>
   860e4:	52800000 	mov	w0, #0x0                   	// #0
   860e8:	d65f03c0 	ret
   860ec:	2a0103f4 	mov	w20, w1
   860f0:	17ffffd1 	b	86034 <CI2SSoundBaseDevice::Start()+0xd4>
	...

0000000000086100 <CSoundController::~CSoundController()>:
   86100:	d2800101 	mov	x1, #0x8                   	// #8
   86104:	140096ab 	b	abbb0 <operator delete(void*, unsigned long)>
	...

0000000000086110 <CSoundController::~CSoundController()>:
   86110:	d65f03c0 	ret
	...

0000000000086120 <CPWMSoundBaseDevice::GetRangeMin() const>:
   86120:	52800000 	mov	w0, #0x0                   	// #0
   86124:	d65f03c0 	ret
   86128:	d503201f 	nop
   8612c:	d503201f 	nop

0000000000086130 <CPWMSoundBaseDevice::GetRangeMax() const>:
   86130:	b9414c00 	ldr	w0, [x0, #332]
   86134:	51000400 	sub	w0, w0, #0x1
   86138:	d65f03c0 	ret
   8613c:	d503201f 	nop

0000000000086140 <CPWMSoundBaseDevice::IsActive() const>:
   86140:	b941ec00 	ldr	w0, [x0, #492]
   86144:	7100001f 	cmp	w0, #0x0
   86148:	1a9f07e0 	cset	w0, ne	// ne = any
   8614c:	d65f03c0 	ret

0000000000086150 <CPWMSoundBaseDevice::Cancel()>:
   86150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86154:	910003fd 	mov	x29, sp
   86158:	f9000bf3 	str	x19, [sp, #16]
   8615c:	aa0003f3 	mov	x19, x0
   86160:	b9422c00 	ldr	w0, [x0, #556]
   86164:	35000180 	cbnz	w0, 86194 <CPWMSoundBaseDevice::Cancel()+0x44>
   86168:	b941ee60 	ldr	w0, [x19, #492]
   8616c:	7100041f 	cmp	w0, #0x1
   86170:	54000080 	b.eq	86180 <CPWMSoundBaseDevice::Cancel()+0x30>  // b.none
   86174:	f9400bf3 	ldr	x19, [sp, #16]
   86178:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8617c:	d65f03c0 	ret
   86180:	52800040 	mov	w0, #0x2                   	// #2
   86184:	b901ee60 	str	w0, [x19, #492]
   86188:	f9400bf3 	ldr	x19, [sp, #16]
   8618c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86190:	d65f03c0 	ret
   86194:	94009bbb 	bl	ad080 <EnterCritical>
   86198:	b941ee60 	ldr	w0, [x19, #492]
   8619c:	7100041f 	cmp	w0, #0x1
   861a0:	b9422e60 	ldr	w0, [x19, #556]
   861a4:	540000a0 	b.eq	861b8 <CPWMSoundBaseDevice::Cancel()+0x68>  // b.none
   861a8:	34fffe60 	cbz	w0, 86174 <CPWMSoundBaseDevice::Cancel()+0x24>
   861ac:	f9400bf3 	ldr	x19, [sp, #16]
   861b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   861b4:	14009be3 	b	ad140 <LeaveCritical>
   861b8:	52800041 	mov	w1, #0x2                   	// #2
   861bc:	b901ee61 	str	w1, [x19, #492]
   861c0:	17fffffa 	b	861a8 <CPWMSoundBaseDevice::Cancel()+0x58>
   861c4:	d503201f 	nop
   861c8:	d503201f 	nop
   861cc:	d503201f 	nop

00000000000861d0 <CPWMSoundBaseDevice::GetNextChunk()>:
   861d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   861d4:	910003fd 	mov	x29, sp
   861d8:	b9422801 	ldr	w1, [x0, #552]
   861dc:	8b010c01 	add	x1, x0, x1, lsl #3
   861e0:	f940fc21 	ldr	x1, [x1, #504]
   861e4:	f9000bf3 	str	x19, [sp, #16]
   861e8:	b4000541 	cbz	x1, 86290 <CPWMSoundBaseDevice::GetNextChunk()+0xc0>
   861ec:	f9400003 	ldr	x3, [x0]
   861f0:	aa0003f3 	mov	x19, x0
   861f4:	b9414802 	ldr	w2, [x0, #328]
   861f8:	f9403c63 	ldr	x3, [x3, #120]
   861fc:	d63f0060 	blr	x3
   86200:	34000360 	cbz	w0, 8626c <CPWMSoundBaseDevice::GetNextChunk()+0x9c>
   86204:	531e7400 	lsl	w0, w0, #2
   86208:	529fffe1 	mov	w1, #0xffff                	// #65535
   8620c:	6b01001f 	cmp	w0, w1
   86210:	540004a8 	b.hi	862a4 <CPWMSoundBaseDevice::GetNextChunk()+0xd4>  // b.pmore
   86214:	b9422a61 	ldr	w1, [x19, #552]
   86218:	8b010e61 	add	x1, x19, x1, lsl #3
   8621c:	f9410c21 	ldr	x1, [x1, #536]
   86220:	b40002e1 	cbz	x1, 8627c <CPWMSoundBaseDevice::GetNextChunk()+0xac>
   86224:	b9000c20 	str	w0, [x1, #12]
   86228:	2a0003e1 	mov	w1, w0
   8622c:	b9422a60 	ldr	w0, [x19, #552]
   86230:	8b000e60 	add	x0, x19, x0, lsl #3
   86234:	f940fc00 	ldr	x0, [x0, #504]
   86238:	94009cb2 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   8623c:	b9422a60 	ldr	w0, [x19, #552]
   86240:	d2800401 	mov	x1, #0x20                  	// #32
   86244:	8b000e60 	add	x0, x19, x0, lsl #3
   86248:	f9410c00 	ldr	x0, [x0, #536]
   8624c:	94009cad 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   86250:	b9422a61 	ldr	w1, [x19, #552]
   86254:	52800020 	mov	w0, #0x1                   	// #1
   86258:	4a000021 	eor	w1, w1, w0
   8625c:	b9022a61 	str	w1, [x19, #552]
   86260:	f9400bf3 	ldr	x19, [sp, #16]
   86264:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86268:	d65f03c0 	ret
   8626c:	f9400bf3 	ldr	x19, [sp, #16]
   86270:	52800000 	mov	w0, #0x0                   	// #0
   86274:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86278:	d65f03c0 	ret
   8627c:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86280:	911e8021 	add	x1, x1, #0x7a0
   86284:	9101a020 	add	x0, x1, #0x68
   86288:	52802842 	mov	w2, #0x142                 	// #322
   8628c:	94006f1d 	bl	a1f00 <assertion_failed>
   86290:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86294:	911e8021 	add	x1, x1, #0x7a0
   86298:	91006020 	add	x0, x1, #0x18
   8629c:	52802702 	mov	w2, #0x138                 	// #312
   862a0:	94006f18 	bl	a1f00 <assertion_failed>
   862a4:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   862a8:	911e8021 	add	x1, x1, #0x7a0
   862ac:	91010020 	add	x0, x1, #0x40
   862b0:	52802802 	mov	w2, #0x140                 	// #320
   862b4:	94006f13 	bl	a1f00 <assertion_failed>
   862b8:	d503201f 	nop
   862bc:	d503201f 	nop

00000000000862c0 <CPWMSoundBaseDevice::Start()>:
   862c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   862c4:	910003fd 	mov	x29, sp
   862c8:	b941ec01 	ldr	w1, [x0, #492]
   862cc:	a90153f3 	stp	x19, x20, [sp, #16]
   862d0:	35000b81 	cbnz	w1, 86440 <CPWMSoundBaseDevice::Start()+0x180>
   862d4:	b902281f 	str	wzr, [x0, #552]
   862d8:	aa0003f3 	mov	x19, x0
   862dc:	97ffffbd 	bl	861d0 <CPWMSoundBaseDevice::GetNextChunk()>
   862e0:	2a0003f4 	mov	w20, w0
   862e4:	360007d4 	tbz	w20, #0, 863dc <CPWMSoundBaseDevice::Start()+0x11c>
   862e8:	b941f261 	ldr	w1, [x19, #496]
   862ec:	f90013f5 	str	x21, [sp, #32]
   862f0:	52800035 	mov	w21, #0x1                   	// #1
   862f4:	b901ee75 	str	w21, [x19, #492]
   862f8:	71002c3f 	cmp	w1, #0xb
   862fc:	54000ae8 	b.hi	86458 <CPWMSoundBaseDevice::Start()+0x198>  // b.pmore
   86300:	3947a260 	ldrb	w0, [x19, #488]
   86304:	37000120 	tbnz	w0, #0, 86328 <CPWMSoundBaseDevice::Start()+0x68>
   86308:	f940a260 	ldr	x0, [x19, #320]
   8630c:	b4000c40 	cbz	x0, 86494 <CPWMSoundBaseDevice::Start()+0x1d4>
   86310:	11004021 	add	w1, w1, #0x10
   86314:	aa1303e3 	mov	x3, x19
   86318:	90000002 	adrp	x2, 86000 <CI2SSoundBaseDevice::Start()+0xa0>
   8631c:	911c0042 	add	x2, x2, #0x700
   86320:	94009ee4 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   86324:	3907a275 	strb	w21, [x19, #488]
   86328:	d2980100 	mov	x0, #0xc008                	// #49160
   8632c:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   86330:	5280e0e1 	mov	w1, #0x707                 	// #1799
   86334:	72b00001 	movk	w1, #0x8000, lsl #16
   86338:	b9000001 	str	w1, [x0]
   8633c:	12808082 	mov	w2, #0xfffffbfb            	// #-1029
   86340:	52800e03 	mov	w3, #0x70                  	// #112
   86344:	72a007e3 	movk	w3, #0x3f, lsl #16
   86348:	b85f8001 	ldur	w1, [x0, #-8]
   8634c:	0a020021 	and	w1, w1, w2
   86350:	b81f8001 	stur	w1, [x0, #-8]
   86354:	b941f262 	ldr	w2, [x19, #496]
   86358:	0b030040 	add	w0, w2, w3
   8635c:	53185c01 	lsl	w1, w0, #8
   86360:	aa0103e0 	mov	x0, x1
   86364:	b9400021 	ldr	w1, [x1]
   86368:	37100421 	tbnz	w1, #2, 863ec <CPWMSoundBaseDevice::Start()+0x12c>
   8636c:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   86370:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   86374:	52800021 	mov	w1, #0x1                   	// #1
   86378:	1ac22021 	lsl	w1, w1, w2
   8637c:	b9400082 	ldr	w2, [x4]
   86380:	6a02003f 	tst	w1, w2
   86384:	54000741 	b.ne	8646c <CPWMSoundBaseDevice::Start()+0x1ac>  // b.any
   86388:	f9410e61 	ldr	x1, [x19, #536]
   8638c:	b40007a1 	cbz	x1, 86480 <CPWMSoundBaseDevice::Start()+0x1c0>
   86390:	11001000 	add	w0, w0, #0x4
   86394:	32020422 	orr	w2, w1, #0xc0000000
   86398:	2a0003e1 	mov	w1, w0
   8639c:	52800024 	mov	w4, #0x1                   	// #1
   863a0:	72a21e24 	movk	w4, #0x10f1, lsl #16
   863a4:	aa1303e0 	mov	x0, x19
   863a8:	b9000022 	str	w2, [x1]
   863ac:	b941f261 	ldr	w1, [x19, #496]
   863b0:	0b030021 	add	w1, w1, w3
   863b4:	53185c21 	lsl	w1, w1, #8
   863b8:	b9000024 	str	w4, [x1]
   863bc:	97ffff85 	bl	861d0 <CPWMSoundBaseDevice::GetNextChunk()>
   863c0:	370000c0 	tbnz	w0, #0, 863d8 <CPWMSoundBaseDevice::Start()+0x118>
   863c4:	b9422e60 	ldr	w0, [x19, #556]
   863c8:	350001c0 	cbnz	w0, 86400 <CPWMSoundBaseDevice::Start()+0x140>
   863cc:	b941ee60 	ldr	w0, [x19, #492]
   863d0:	7100041f 	cmp	w0, #0x1
   863d4:	540001e0 	b.eq	86410 <CPWMSoundBaseDevice::Start()+0x150>  // b.none
   863d8:	f94013f5 	ldr	x21, [sp, #32]
   863dc:	2a1403e0 	mov	w0, w20
   863e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   863e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   863e8:	d65f03c0 	ret
   863ec:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   863f0:	911e8021 	add	x1, x1, #0x7a0
   863f4:	9103a020 	add	x0, x1, #0xe8
   863f8:	52802062 	mov	w2, #0x103                 	// #259
   863fc:	94006ec1 	bl	a1f00 <assertion_failed>
   86400:	94009b20 	bl	ad080 <EnterCritical>
   86404:	b941ee60 	ldr	w0, [x19, #492]
   86408:	7100041f 	cmp	w0, #0x1
   8640c:	54000101 	b.ne	8642c <CPWMSoundBaseDevice::Start()+0x16c>  // b.any
   86410:	b941f260 	ldr	w0, [x19, #496]
   86414:	528e0382 	mov	w2, #0x701c                	// #28700
   86418:	72a7e002 	movk	w2, #0x3f00, lsl #16
   8641c:	52800061 	mov	w1, #0x3                   	// #3
   86420:	0b002040 	add	w0, w2, w0, lsl #8
   86424:	b900001f 	str	wzr, [x0]
   86428:	b901ee61 	str	w1, [x19, #492]
   8642c:	b9422e60 	ldr	w0, [x19, #556]
   86430:	34fffd40 	cbz	w0, 863d8 <CPWMSoundBaseDevice::Start()+0x118>
   86434:	94009b43 	bl	ad140 <LeaveCritical>
   86438:	f94013f5 	ldr	x21, [sp, #32]
   8643c:	17ffffe8 	b	863dc <CPWMSoundBaseDevice::Start()+0x11c>
   86440:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86444:	911e8021 	add	x1, x1, #0x7a0
   86448:	91024020 	add	x0, x1, #0x90
   8644c:	52801ba2 	mov	w2, #0xdd                  	// #221
   86450:	f90013f5 	str	x21, [sp, #32]
   86454:	94006eab 	bl	a1f00 <assertion_failed>
   86458:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   8645c:	911e8021 	add	x1, x1, #0x7a0
   86460:	9102a020 	add	x0, x1, #0xa8
   86464:	52801d42 	mov	w2, #0xea                  	// #234
   86468:	94006ea6 	bl	a1f00 <assertion_failed>
   8646c:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86470:	911e8021 	add	x1, x1, #0x7a0
   86474:	91048020 	add	x0, x1, #0x120
   86478:	52802082 	mov	w2, #0x104                 	// #260
   8647c:	94006ea1 	bl	a1f00 <assertion_failed>
   86480:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86484:	911e8021 	add	x1, x1, #0x7a0
   86488:	91056020 	add	x0, x1, #0x158
   8648c:	528020c2 	mov	w2, #0x106                 	// #262
   86490:	94006e9c 	bl	a1f00 <assertion_failed>
   86494:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86498:	911e8021 	add	x1, x1, #0x7a0
   8649c:	91034020 	add	x0, x1, #0xd0
   864a0:	52801dc2 	mov	w2, #0xee                  	// #238
   864a4:	94006e97 	bl	a1f00 <assertion_failed>
   864a8:	d503201f 	nop
   864ac:	d503201f 	nop

00000000000864b0 <CPWMSoundBaseDevice::RunPWM()>:
   864b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   864b4:	52965001 	mov	w1, #0xb280                	// #45696
   864b8:	72a1dcc1 	movk	w1, #0xee6, lsl #16
   864bc:	910003fd 	mov	x29, sp
   864c0:	f9000bf3 	str	x19, [sp, #16]
   864c4:	aa0003f3 	mov	x19, x0
   864c8:	91078000 	add	x0, x0, #0x1e0
   864cc:	94009fe9 	bl	ae470 <CGPIOClock::StartRate(unsigned int)>
   864d0:	36000260 	tbz	w0, #0, 8651c <CPWMSoundBaseDevice::RunPWM()+0x6c>
   864d4:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   864d8:	9400913a 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   864dc:	b9414e61 	ldr	w1, [x19, #332]
   864e0:	529fdfe0 	mov	w0, #0xfeff                	// #65279
   864e4:	51040022 	sub	w2, w1, #0x100
   864e8:	6b00005f 	cmp	w2, w0
   864ec:	54000228 	b.hi	86530 <CPWMSoundBaseDevice::RunPWM()+0x80>  // b.pmore
   864f0:	d2980203 	mov	x3, #0xc010                	// #49168
   864f4:	f2a7e403 	movk	x3, #0x3f20, lsl #16
   864f8:	aa0303e2 	mov	x2, x3
   864fc:	52842c24 	mov	w4, #0x2161                	// #8545
   86500:	f9400bf3 	ldr	x19, [sp, #16]
   86504:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   86508:	b8010441 	str	w1, [x2], #16
   8650c:	b9001061 	str	w1, [x3, #16]
   86510:	b81e0044 	stur	w4, [x2, #-32]
   86514:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86518:	1400912a 	b	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   8651c:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86520:	911e8021 	add	x1, x1, #0x7a0
   86524:	9105c020 	add	x0, x1, #0x170
   86528:	52802aa2 	mov	w2, #0x155                 	// #341
   8652c:	94006e75 	bl	a1f00 <assertion_failed>
   86530:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86534:	911e8021 	add	x1, x1, #0x7a0
   86538:	9105e020 	add	x0, x1, #0x178
   8653c:	52802b02 	mov	w2, #0x158                 	// #344
   86540:	94006e70 	bl	a1f00 <assertion_failed>
   86544:	d503201f 	nop
   86548:	d503201f 	nop
   8654c:	d503201f 	nop

0000000000086550 <CPWMSoundBaseDevice::StopPWM()>:
   86550:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86554:	d2980101 	mov	x1, #0xc008                	// #49160
   86558:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   8655c:	910003fd 	mov	x29, sp
   86560:	f9000bf3 	str	x19, [sp, #16]
   86564:	aa0003f3 	mov	x19, x0
   86568:	b900003f 	str	wzr, [x1]
   8656c:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   86570:	b81f803f 	stur	wzr, [x1, #-8]
   86574:	94009113 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   86578:	91078260 	add	x0, x19, #0x1e0
   8657c:	94009fe9 	bl	ae520 <CGPIOClock::Stop()>
   86580:	f9400bf3 	ldr	x19, [sp, #16]
   86584:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   86588:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8658c:	1400910d 	b	aa9c0 <CTimer::SimpleusDelay(unsigned int)>

0000000000086590 <CPWMSoundBaseDevice::InterruptHandler()>:
   86590:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86594:	910003fd 	mov	x29, sp
   86598:	f9000bf3 	str	x19, [sp, #16]
   8659c:	aa0003f3 	mov	x19, x0
   865a0:	b941ec00 	ldr	w0, [x0, #492]
   865a4:	34000760 	cbz	w0, 86690 <CPWMSoundBaseDevice::InterruptHandler()+0x100>
   865a8:	b941f261 	ldr	w1, [x19, #496]
   865ac:	71002c3f 	cmp	w1, #0xb
   865b0:	540007a8 	b.hi	866a4 <CPWMSoundBaseDevice::InterruptHandler()+0x114>  // b.pmore
   865b4:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   865b8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   865bc:	52800020 	mov	w0, #0x1                   	// #1
   865c0:	1ac12000 	lsl	w0, w0, w1
   865c4:	b9400041 	ldr	w1, [x2]
   865c8:	6a01001f 	tst	w0, w1
   865cc:	54000760 	b.eq	866b8 <CPWMSoundBaseDevice::InterruptHandler()+0x128>  // b.none
   865d0:	b9000040 	str	w0, [x2]
   865d4:	b941f260 	ldr	w0, [x19, #496]
   865d8:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   865dc:	1101c000 	add	w0, w0, #0x70
   865e0:	53185c00 	lsl	w0, w0, #8
   865e4:	b9400001 	ldr	w1, [x0]
   865e8:	36100721 	tbz	w1, #2, 866cc <CPWMSoundBaseDevice::InterruptHandler()+0x13c>
   865ec:	b9000001 	str	w1, [x0]
   865f0:	374003e1 	tbnz	w1, #8, 8666c <CPWMSoundBaseDevice::InterruptHandler()+0xdc>
   865f4:	b9422e60 	ldr	w0, [x19, #556]
   865f8:	35000480 	cbnz	w0, 86688 <CPWMSoundBaseDevice::InterruptHandler()+0xf8>
   865fc:	b941ee60 	ldr	w0, [x19, #492]
   86600:	7100081f 	cmp	w0, #0x2
   86604:	54000100 	b.eq	86624 <CPWMSoundBaseDevice::InterruptHandler()+0x94>  // b.none
   86608:	71000c1f 	cmp	w0, #0x3
   8660c:	540003a0 	b.eq	86680 <CPWMSoundBaseDevice::InterruptHandler()+0xf0>  // b.none
   86610:	7100041f 	cmp	w0, #0x1
   86614:	54000661 	b.ne	866e0 <CPWMSoundBaseDevice::InterruptHandler()+0x150>  // b.any
   86618:	aa1303e0 	mov	x0, x19
   8661c:	97fffeed 	bl	861d0 <CPWMSoundBaseDevice::GetNextChunk()>
   86620:	370001c0 	tbnz	w0, #0, 86658 <CPWMSoundBaseDevice::InterruptHandler()+0xc8>
   86624:	b941f260 	ldr	w0, [x19, #496]
   86628:	528e0384 	mov	w4, #0x701c                	// #28700
   8662c:	72a7e004 	movk	w4, #0x3f00, lsl #16
   86630:	d2980001 	mov	x1, #0xc000                	// #49152
   86634:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   86638:	52808083 	mov	w3, #0x404                 	// #1028
   8663c:	0b002080 	add	w0, w4, w0, lsl #8
   86640:	52800062 	mov	w2, #0x3                   	// #3
   86644:	b900001f 	str	wzr, [x0]
   86648:	b9400020 	ldr	w0, [x1]
   8664c:	2a030000 	orr	w0, w0, w3
   86650:	b9000020 	str	w0, [x1]
   86654:	b901ee62 	str	w2, [x19, #492]
   86658:	b9422e60 	ldr	w0, [x19, #556]
   8665c:	340000c0 	cbz	w0, 86674 <CPWMSoundBaseDevice::InterruptHandler()+0xe4>
   86660:	f9400bf3 	ldr	x19, [sp, #16]
   86664:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86668:	14009ab6 	b	ad140 <LeaveCritical>
   8666c:	52800080 	mov	w0, #0x4                   	// #4
   86670:	b901ee60 	str	w0, [x19, #492]
   86674:	f9400bf3 	ldr	x19, [sp, #16]
   86678:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8667c:	d65f03c0 	ret
   86680:	b901ee7f 	str	wzr, [x19, #492]
   86684:	17fffff5 	b	86658 <CPWMSoundBaseDevice::InterruptHandler()+0xc8>
   86688:	94009a7e 	bl	ad080 <EnterCritical>
   8668c:	17ffffdc 	b	865fc <CPWMSoundBaseDevice::InterruptHandler()+0x6c>
   86690:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86694:	911e8021 	add	x1, x1, #0x7a0
   86698:	9106a020 	add	x0, x1, #0x1a8
   8669c:	52802e82 	mov	w2, #0x174                 	// #372
   866a0:	94006e18 	bl	a1f00 <assertion_failed>
   866a4:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   866a8:	911e8021 	add	x1, x1, #0x7a0
   866ac:	9102a020 	add	x0, x1, #0xa8
   866b0:	52802ea2 	mov	w2, #0x175                 	// #373
   866b4:	94006e13 	bl	a1f00 <assertion_failed>
   866b8:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   866bc:	911e8021 	add	x1, x1, #0x7a0
   866c0:	91070020 	add	x0, x1, #0x1c0
   866c4:	52802fa2 	mov	w2, #0x17d                 	// #381
   866c8:	94006e0e 	bl	a1f00 <assertion_failed>
   866cc:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   866d0:	911e8021 	add	x1, x1, #0x7a0
   866d4:	91076020 	add	x0, x1, #0x1d8
   866d8:	52803022 	mov	w2, #0x181                 	// #385
   866dc:	94006e09 	bl	a1f00 <assertion_failed>
   866e0:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   866e4:	911e8021 	add	x1, x1, #0x7a0
   866e8:	9107a020 	add	x0, x1, #0x1e8
   866ec:	52803542 	mov	w2, #0x1aa                 	// #426
   866f0:	94006e04 	bl	a1f00 <assertion_failed>
   866f4:	d503201f 	nop
   866f8:	d503201f 	nop
   866fc:	d503201f 	nop

0000000000086700 <CPWMSoundBaseDevice::InterruptStub(void*)>:
   86700:	b4000040 	cbz	x0, 86708 <CPWMSoundBaseDevice::InterruptStub(void*)+0x8>
   86704:	17ffffa3 	b	86590 <CPWMSoundBaseDevice::InterruptHandler()>
   86708:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8670c:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86710:	911e8021 	add	x1, x1, #0x7a0
   86714:	910003fd 	mov	x29, sp
   86718:	9107c020 	add	x0, x1, #0x1f0
   8671c:	52803682 	mov	w2, #0x1b4                 	// #436
   86720:	94006df8 	bl	a1f00 <assertion_failed>
   86724:	d503201f 	nop
   86728:	d503201f 	nop
   8672c:	d503201f 	nop

0000000000086730 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   86730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86734:	7100043f 	cmp	w1, #0x1
   86738:	910003fd 	mov	x29, sp
   8673c:	a90153f3 	stp	x19, x20, [sp, #16]
   86740:	540003a8 	b.hi	867b4 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x84>  // b.pmore
   86744:	2a0103f3 	mov	w19, w1
   86748:	52800001 	mov	w1, #0x0                   	// #0
   8674c:	8b334c13 	add	x19, x0, w19, uxtw #3
   86750:	b9414800 	ldr	w0, [x0, #328]
   86754:	d37ef400 	lsl	x0, x0, #2
   86758:	940094e2 	bl	abae0 <operator new[](unsigned long, int)>
   8675c:	aa0003e2 	mov	x2, x0
   86760:	f900fe62 	str	x2, [x19, #504]
   86764:	52800001 	mov	w1, #0x0                   	// #0
   86768:	d28007e0 	mov	x0, #0x3f                  	// #63
   8676c:	940094dd 	bl	abae0 <operator new[](unsigned long, int)>
   86770:	91007c02 	add	x2, x0, #0x1f
   86774:	927be842 	and	x2, x2, #0xffffffffffffffe0
   86778:	f9010660 	str	x0, [x19, #520]
   8677c:	f9010e62 	str	x2, [x19, #536]
   86780:	52806920 	mov	w0, #0x349                 	// #841
   86784:	72a000a0 	movk	w0, #0x5, lsl #16
   86788:	52980301 	mov	w1, #0xc018                	// #49176
   8678c:	72afc401 	movk	w1, #0x7e20, lsl #16
   86790:	b9000040 	str	w0, [x2]
   86794:	f940fe60 	ldr	x0, [x19, #504]
   86798:	f9000c5f 	str	xzr, [x2, #24]
   8679c:	a94153f3 	ldp	x19, x20, [sp, #16]
   867a0:	32020400 	orr	w0, w0, #0xc0000000
   867a4:	29008440 	stp	w0, w1, [x2, #4]
   867a8:	b900105f 	str	wzr, [x2, #16]
   867ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   867b0:	d65f03c0 	ret
   867b4:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   867b8:	911e8021 	add	x1, x1, #0x7a0
   867bc:	91080020 	add	x0, x1, #0x200
   867c0:	52803762 	mov	w2, #0x1bb                 	// #443
   867c4:	94006dcf 	bl	a1f00 <assertion_failed>
   867c8:	d503201f 	nop
   867cc:	d503201f 	nop

00000000000867d0 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   867d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   867d4:	910003fd 	mov	x29, sp
   867d8:	a90153f3 	stp	x19, x20, [sp, #16]
   867dc:	52965014 	mov	w20, #0xb280                	// #45696
   867e0:	72a1dcd4 	movk	w20, #0xee6, lsl #16
   867e4:	0b420694 	add	w20, w20, w2, lsr #1
   867e8:	aa0003f3 	mov	x19, x0
   867ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   867f0:	2a0203f5 	mov	w21, w2
   867f4:	2a0303f6 	mov	w22, w3
   867f8:	1ac20a94 	udiv	w20, w20, w2
   867fc:	f9001bf7 	str	x23, [sp, #48]
   86800:	aa0103f7 	mov	x23, x1
   86804:	940079b3 	bl	a4ed0 <CMachineInfo::Get()>
   86808:	94007942 	bl	a4d10 <CMachineInfo::ArePWMChannelsSwapped() const>
   8680c:	2a0003e4 	mov	w4, w0
   86810:	2a1503e3 	mov	w3, w21
   86814:	aa1303e0 	mov	x0, x19
   86818:	2a1403e2 	mov	w2, w20
   8681c:	52800081 	mov	w1, #0x4                   	// #4
   86820:	97fff068 	bl	829c0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
   86824:	f900a277 	str	x23, [x19, #320]
   86828:	f0000200 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8682c:	91046000 	add	x0, x0, #0x118
   86830:	f9000260 	str	x0, [x19]
   86834:	d2800003 	mov	x3, #0x0                   	// #0
   86838:	b9014a76 	str	w22, [x19, #328]
   8683c:	91054260 	add	x0, x19, #0x150
   86840:	b9014e74 	str	w20, [x19, #332]
   86844:	52800082 	mov	w2, #0x4                   	// #4
   86848:	528006c1 	mov	w1, #0x36                  	// #54
   8684c:	52800034 	mov	w20, #0x1                   	// #1
   86850:	9400a268 	bl	af1f0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   86854:	d2800003 	mov	x3, #0x0                   	// #0
   86858:	91066260 	add	x0, x19, #0x198
   8685c:	52800082 	mov	w2, #0x4                   	// #4
   86860:	528006e1 	mov	w1, #0x37                  	// #55
   86864:	9400a263 	bl	af1f0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   86868:	91078260 	add	x0, x19, #0x1e0
   8686c:	52800202 	mov	w2, #0x10                  	// #16
   86870:	52800281 	mov	w1, #0x14                  	// #20
   86874:	94009e9f 	bl	ae2f0 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   86878:	3907a27f 	strb	wzr, [x19, #488]
   8687c:	b901ee7f 	str	wzr, [x19, #492]
   86880:	94007994 	bl	a4ed0 <CMachineInfo::Get()>
   86884:	52801041 	mov	w1, #0x82                  	// #130
   86888:	9400792e 	bl	a4d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   8688c:	f940a261 	ldr	x1, [x19, #320]
   86890:	b901f260 	str	w0, [x19, #496]
   86894:	b9022e74 	str	w20, [x19, #556]
   86898:	b40006a1 	cbz	x1, 8696c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x19c>
   8689c:	b9414a60 	ldr	w0, [x19, #328]
   868a0:	34000700 	cbz	w0, 86980 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1b0>
   868a4:	37000780 	tbnz	w0, #0, 86994 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1c4>
   868a8:	aa1303e0 	mov	x0, x19
   868ac:	52800001 	mov	w1, #0x0                   	// #0
   868b0:	97ffffa0 	bl	86730 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   868b4:	2a1403e1 	mov	w1, w20
   868b8:	aa1303e0 	mov	x0, x19
   868bc:	97ffff9d 	bl	86730 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   868c0:	f9410e62 	ldr	x2, [x19, #536]
   868c4:	aa1303e0 	mov	x0, x19
   868c8:	f9411261 	ldr	x1, [x19, #544]
   868cc:	32020443 	orr	w3, w2, #0xc0000000
   868d0:	32020424 	orr	w4, w1, #0xc0000000
   868d4:	b9001444 	str	w4, [x2, #20]
   868d8:	b9001423 	str	w3, [x1, #20]
   868dc:	97fffef5 	bl	864b0 <CPWMSoundBaseDevice::RunPWM()>
   868e0:	b941f260 	ldr	w0, [x19, #496]
   868e4:	71002c1f 	cmp	w0, #0xb
   868e8:	54000608 	b.hi	869a8 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1d8>  // b.pmore
   868ec:	d28ffe01 	mov	x1, #0x7ff0                	// #32752
   868f0:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   868f4:	1ac02294 	lsl	w20, w20, w0
   868f8:	52807d00 	mov	w0, #0x3e8                 	// #1000
   868fc:	b9400022 	ldr	w2, [x1]
   86900:	2a020294 	orr	w20, w20, w2
   86904:	b9000034 	str	w20, [x1]
   86908:	9400902e 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   8690c:	b941f260 	ldr	w0, [x19, #496]
   86910:	52800e02 	mov	w2, #0x70                  	// #112
   86914:	72a007e2 	movk	w2, #0x3f, lsl #16
   86918:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   8691c:	0b020000 	add	w0, w0, w2
   86920:	53185c00 	lsl	w0, w0, #8
   86924:	b9000001 	str	w1, [x0]
   86928:	b941f261 	ldr	w1, [x19, #496]
   8692c:	0b020021 	add	w1, w1, w2
   86930:	53185c21 	lsl	w1, w1, #8
   86934:	d503201f 	nop
   86938:	b9400020 	ldr	w0, [x1]
   8693c:	37ffffe0 	tbnz	w0, #31, 86938 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x168>
   86940:	9400715c 	bl	a2eb0 <CDeviceNameService::Get()>
   86944:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86948:	aa1303e2 	mov	x2, x19
   8694c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86950:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86954:	911e8021 	add	x1, x1, #0x7a0
   86958:	52800003 	mov	w3, #0x0                   	// #0
   8695c:	f9401bf7 	ldr	x23, [sp, #48]
   86960:	91090021 	add	x1, x1, #0x240
   86964:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86968:	14007062 	b	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8696c:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86970:	911e8021 	add	x1, x1, #0x7a0
   86974:	91034020 	add	x0, x1, #0xd0
   86978:	52801002 	mov	w2, #0x80                  	// #128
   8697c:	94006d61 	bl	a1f00 <assertion_failed>
   86980:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86984:	911e8021 	add	x1, x1, #0x7a0
   86988:	91084020 	add	x0, x1, #0x210
   8698c:	52801022 	mov	w2, #0x81                  	// #129
   86990:	94006d5c 	bl	a1f00 <assertion_failed>
   86994:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86998:	911e8021 	add	x1, x1, #0x7a0
   8699c:	9108a020 	add	x0, x1, #0x228
   869a0:	52801042 	mov	w2, #0x82                  	// #130
   869a4:	94006d57 	bl	a1f00 <assertion_failed>
   869a8:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   869ac:	911e8021 	add	x1, x1, #0x7a0
   869b0:	9102a020 	add	x0, x1, #0xa8
   869b4:	52801202 	mov	w2, #0x90                  	// #144
   869b8:	94006d52 	bl	a1f00 <assertion_failed>
   869bc:	d503201f 	nop

00000000000869c0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   869c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   869c4:	f0000201 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   869c8:	91046021 	add	x1, x1, #0x118
   869cc:	910003fd 	mov	x29, sp
   869d0:	a90153f3 	stp	x19, x20, [sp, #16]
   869d4:	aa0003f3 	mov	x19, x0
   869d8:	b941ec00 	ldr	w0, [x0, #492]
   869dc:	a9025bf5 	stp	x21, x22, [sp, #32]
   869e0:	f9000261 	str	x1, [x19]
   869e4:	35000b20 	cbnz	w0, 86b48 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x188>
   869e8:	94007132 	bl	a2eb0 <CDeviceNameService::Get()>
   869ec:	b0000195 	adrp	x21, b7000 <_etext+0x49c8>
   869f0:	911e82b6 	add	x22, x21, #0x7a0
   869f4:	52800002 	mov	w2, #0x0                   	// #0
   869f8:	910902c1 	add	x1, x22, #0x240
   869fc:	94007079 	bl	a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   86a00:	d2980101 	mov	x1, #0xc008                	// #49160
   86a04:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   86a08:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   86a0c:	91078274 	add	x20, x19, #0x1e0
   86a10:	b900003f 	str	wzr, [x1]
   86a14:	b81f803f 	stur	wzr, [x1, #-8]
   86a18:	94008fea 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   86a1c:	aa1403e0 	mov	x0, x20
   86a20:	94009ec0 	bl	ae520 <CGPIOClock::Stop()>
   86a24:	5280fa00 	mov	w0, #0x7d0                 	// #2000
   86a28:	94008fe6 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   86a2c:	b941f260 	ldr	w0, [x19, #496]
   86a30:	71002c1f 	cmp	w0, #0xb
   86a34:	54000948 	b.hi	86b5c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x19c>  // b.pmore
   86a38:	52800e01 	mov	w1, #0x70                  	// #112
   86a3c:	72a007e1 	movk	w1, #0x3f, lsl #16
   86a40:	0b010000 	add	w0, w0, w1
   86a44:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   86a48:	53185c00 	lsl	w0, w0, #8
   86a4c:	b9000002 	str	w2, [x0]
   86a50:	b941f263 	ldr	w3, [x19, #496]
   86a54:	0b010061 	add	w1, w3, w1
   86a58:	53185c21 	lsl	w1, w1, #8
   86a5c:	d503201f 	nop
   86a60:	b9400020 	ldr	w0, [x1]
   86a64:	37ffffe0 	tbnz	w0, #31, 86a60 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xa0>
   86a68:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   86a6c:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   86a70:	52800021 	mov	w1, #0x1                   	// #1
   86a74:	f940a260 	ldr	x0, [x19, #320]
   86a78:	1ac32021 	lsl	w1, w1, w3
   86a7c:	b9400043 	ldr	w3, [x2]
   86a80:	0a210061 	bic	w1, w3, w1
   86a84:	b9000041 	str	w1, [x2]
   86a88:	b4000720 	cbz	x0, 86b6c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x1ac>
   86a8c:	3947a261 	ldrb	w1, [x19, #488]
   86a90:	37000441 	tbnz	w1, #0, 86b18 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x158>
   86a94:	f900a27f 	str	xzr, [x19, #320]
   86a98:	9400790e 	bl	a4ed0 <CMachineInfo::Get()>
   86a9c:	b941f261 	ldr	w1, [x19, #496]
   86aa0:	940078e4 	bl	a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>
   86aa4:	91080261 	add	x1, x19, #0x200
   86aa8:	f9410660 	ldr	x0, [x19, #520]
   86aac:	a901fc3f 	stp	xzr, xzr, [x1, #24]
   86ab0:	b4000040 	cbz	x0, 86ab8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xf8>
   86ab4:	94009437 	bl	abb90 <operator delete[](void*)>
   86ab8:	f9410a60 	ldr	x0, [x19, #528]
   86abc:	f901067f 	str	xzr, [x19, #520]
   86ac0:	b4000040 	cbz	x0, 86ac8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x108>
   86ac4:	94009433 	bl	abb90 <operator delete[](void*)>
   86ac8:	f940fe60 	ldr	x0, [x19, #504]
   86acc:	f9010a7f 	str	xzr, [x19, #528]
   86ad0:	b4000040 	cbz	x0, 86ad8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x118>
   86ad4:	9400942f 	bl	abb90 <operator delete[](void*)>
   86ad8:	f9410260 	ldr	x0, [x19, #512]
   86adc:	f900fe7f 	str	xzr, [x19, #504]
   86ae0:	b4000040 	cbz	x0, 86ae8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x128>
   86ae4:	9400942b 	bl	abb90 <operator delete[](void*)>
   86ae8:	f901027f 	str	xzr, [x19, #512]
   86aec:	aa1403e0 	mov	x0, x20
   86af0:	94009e0c 	bl	ae320 <CGPIOClock::~CGPIOClock()>
   86af4:	91066260 	add	x0, x19, #0x198
   86af8:	94009e96 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   86afc:	91054260 	add	x0, x19, #0x150
   86b00:	94009e94 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   86b04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86b08:	aa1303e0 	mov	x0, x19
   86b0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b10:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86b14:	17ffeea7 	b	825b0 <CSoundBaseDevice::~CSoundBaseDevice()>
   86b18:	b941f261 	ldr	w1, [x19, #496]
   86b1c:	11004021 	add	w1, w1, #0x10
   86b20:	94009d30 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   86b24:	f900a27f 	str	xzr, [x19, #320]
   86b28:	940078ea 	bl	a4ed0 <CMachineInfo::Get()>
   86b2c:	b941f261 	ldr	w1, [x19, #496]
   86b30:	940078c0 	bl	a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>
   86b34:	91080261 	add	x1, x19, #0x200
   86b38:	f9410660 	ldr	x0, [x19, #520]
   86b3c:	a901fc3f 	stp	xzr, xzr, [x1, #24]
   86b40:	b5fffba0 	cbnz	x0, 86ab4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xf4>
   86b44:	17ffffdd 	b	86ab8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xf8>
   86b48:	b0000181 	adrp	x1, b7000 <_etext+0x49c8>
   86b4c:	911e8021 	add	x1, x1, #0x7a0
   86b50:	91024020 	add	x0, x1, #0x90
   86b54:	52801422 	mov	w2, #0xa1                  	// #161
   86b58:	94006cea 	bl	a1f00 <assertion_failed>
   86b5c:	aa1603e1 	mov	x1, x22
   86b60:	9102a2c0 	add	x0, x22, #0xa8
   86b64:	52801562 	mov	w2, #0xab                  	// #171
   86b68:	94006ce6 	bl	a1f00 <assertion_failed>
   86b6c:	911e82a1 	add	x1, x21, #0x7a0
   86b70:	52801702 	mov	w2, #0xb8                  	// #184
   86b74:	91034020 	add	x0, x1, #0xd0
   86b78:	94006ce2 	bl	a1f00 <assertion_failed>
   86b7c:	d503201f 	nop

0000000000086b80 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   86b80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86b84:	910003fd 	mov	x29, sp
   86b88:	f9000bf3 	str	x19, [sp, #16]
   86b8c:	aa0003f3 	mov	x19, x0
   86b90:	97ffff8c 	bl	869c0 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   86b94:	aa1303e0 	mov	x0, x19
   86b98:	d2804601 	mov	x1, #0x230                 	// #560
   86b9c:	f9400bf3 	ldr	x19, [sp, #16]
   86ba0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86ba4:	14009403 	b	abbb0 <operator delete(void*, unsigned long)>
	...

0000000000086bb0 <CPCM512xSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const>:
   86bb0:	d10043ff 	sub	sp, sp, #0x10
   86bb4:	72001c5f 	tst	w2, #0xff
   86bb8:	54000080 	b.eq	86bc8 <CPCM512xSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x18>  // b.none
   86bbc:	34000221 	cbz	w1, 86c00 <CPCM512xSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x50>
   86bc0:	7100043f 	cmp	w1, #0x1
   86bc4:	540000e0 	b.eq	86be0 <CPCM512xSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const+0x30>  // b.none
   86bc8:	f90003ff 	str	xzr, [sp]
   86bcc:	b9000bff 	str	wzr, [sp, #8]
   86bd0:	f94003e0 	ldr	x0, [sp]
   86bd4:	b9400be1 	ldr	w1, [sp, #8]
   86bd8:	910043ff 	add	sp, sp, #0x10
   86bdc:	d65f03c0 	ret
   86be0:	12800cc0 	mov	w0, #0xffffff99            	// #-103
   86be4:	390003e1 	strb	w1, [sp]
   86be8:	f2c00180 	movk	x0, #0xc, lsl #32
   86bec:	f80043e0 	stur	x0, [sp, #4]
   86bf0:	f94003e0 	ldr	x0, [sp]
   86bf4:	b9400be1 	ldr	w1, [sp, #8]
   86bf8:	910043ff 	add	sp, sp, #0x10
   86bfc:	d65f03c0 	ret
   86c00:	52800021 	mov	w1, #0x1                   	// #1
   86c04:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
   86c08:	390003e1 	strb	w1, [sp]
   86c0c:	f80043e0 	stur	x0, [sp, #4]
   86c10:	f94003e0 	ldr	x0, [sp]
   86c14:	b9400be1 	ldr	w1, [sp, #8]
   86c18:	910043ff 	add	sp, sp, #0x10
   86c1c:	d65f03c0 	ret

0000000000086c20 <CPCM512xSoundController::CPCM512xSoundController(CI2CMaster*, unsigned char)>:
   86c20:	f0000203 	adrp	x3, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   86c24:	9106e063 	add	x3, x3, #0x1b8
   86c28:	a9000403 	stp	x3, x1, [x0]
   86c2c:	39004002 	strb	w2, [x0, #16]
   86c30:	3900441f 	strb	wzr, [x0, #17]
   86c34:	d65f03c0 	ret
   86c38:	d503201f 	nop
   86c3c:	d503201f 	nop

0000000000086c40 <CPCM512xSoundController::SetMute(CSoundController::TJack, CSoundController::TChannel, bool)>:
   86c40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86c44:	910003fd 	mov	x29, sp
   86c48:	f9400407 	ldr	x7, [x0, #8]
   86c4c:	b4000467 	cbz	x7, 86cd8 <CPCM512xSoundController::SetMute(CSoundController::TJack, CSoundController::TChannel, bool)+0x98>
   86c50:	39404008 	ldrb	w8, [x0, #16]
   86c54:	aa0003e4 	mov	x4, x0
   86c58:	340004c8 	cbz	w8, 86cf0 <CPCM512xSoundController::SetMute(CSoundController::TJack, CSoundController::TChannel, bool)+0xb0>
   86c5c:	72001c3f 	tst	w1, #0xff
   86c60:	1a9f07e5 	cset	w5, ne	// ne = any
   86c64:	7100085f 	cmp	w2, #0x2
   86c68:	1a9f87e6 	cset	w6, ls	// ls = plast
   86c6c:	6a0600bf 	tst	w5, w6
   86c70:	0a0600a0 	and	w0, w5, w6
   86c74:	54000061 	b.ne	86c80 <CPCM512xSoundController::SetMute(CSoundController::TJack, CSoundController::TChannel, bool)+0x40>  // b.any
   86c78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86c7c:	d65f03c0 	ret
   86c80:	b0000180 	adrp	x0, b7000 <_etext+0x49c8>
   86c84:	9127a000 	add	x0, x0, #0x9e8
   86c88:	39404486 	ldrb	w6, [x4, #17]
   86c8c:	12001c63 	and	w3, w3, #0xff
   86c90:	72000063 	ands	w3, w3, #0x1
   86c94:	2a0803e1 	mov	w1, w8
   86c98:	38624805 	ldrb	w5, [x0, w2, uxtw]
   86c9c:	aa0703e0 	mov	x0, x7
   86ca0:	52800067 	mov	w7, #0x3                   	// #3
   86ca4:	52800043 	mov	w3, #0x2                   	// #2
   86ca8:	2a0500c2 	orr	w2, w6, w5
   86cac:	0a2500c5 	bic	w5, w6, w5
   86cb0:	1a8200a5 	csel	w5, w5, w2, eq	// eq = none
   86cb4:	39004485 	strb	w5, [x4, #17]
   86cb8:	910063e2 	add	x2, sp, #0x18
   86cbc:	390063e7 	strb	w7, [sp, #24]
   86cc0:	390067e5 	strb	w5, [sp, #25]
   86cc4:	9400a2cf 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   86cc8:	2a2003e0 	mvn	w0, w0
   86ccc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86cd0:	531f7c00 	lsr	w0, w0, #31
   86cd4:	d65f03c0 	ret
   86cd8:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86cdc:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86ce0:	91014021 	add	x1, x1, #0x50
   86ce4:	9101c000 	add	x0, x0, #0x70
   86ce8:	52800c22 	mov	w2, #0x61                  	// #97
   86cec:	94006c85 	bl	a1f00 <assertion_failed>
   86cf0:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86cf4:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86cf8:	91014021 	add	x1, x1, #0x50
   86cfc:	91020000 	add	x0, x0, #0x80
   86d00:	52800c42 	mov	w2, #0x62                  	// #98
   86d04:	94006c7f 	bl	a1f00 <assertion_failed>
   86d08:	d503201f 	nop
   86d0c:	d503201f 	nop

0000000000086d10 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)>:
   86d10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   86d14:	910003fd 	mov	x29, sp
   86d18:	a90153f3 	stp	x19, x20, [sp, #16]
   86d1c:	aa0003f3 	mov	x19, x0
   86d20:	f9400400 	ldr	x0, [x0, #8]
   86d24:	b40004e0 	cbz	x0, 86dc0 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xb0>
   86d28:	39404264 	ldrb	w4, [x19, #16]
   86d2c:	340006c4 	cbz	w4, 86e04 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xf4>
   86d30:	72001c3f 	tst	w1, #0xff
   86d34:	54000420 	b.eq	86db8 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xa8>  // b.none
   86d38:	2a0203f4 	mov	w20, w2
   86d3c:	7100085f 	cmp	w2, #0x2
   86d40:	540003cc 	b.gt	86db8 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xa8>
   86d44:	7100307f 	cmp	w3, #0xc
   86d48:	52800181 	mov	w1, #0xc                   	// #12
   86d4c:	1a81d063 	csel	w3, w3, w1, le
   86d50:	12800cc1 	mov	w1, #0xffffff99            	// #-103
   86d54:	6b01007f 	cmp	w3, w1
   86d58:	52800302 	mov	w2, #0x18                  	// #24
   86d5c:	1a81a063 	csel	w3, w3, w1, ge	// ge = tcont
   86d60:	f90013f5 	str	x21, [sp, #32]
   86d64:	4b030042 	sub	w2, w2, w3
   86d68:	7100069f 	cmp	w20, #0x1
   86d6c:	531f1855 	ubfiz	w21, w2, #1, #7
   86d70:	54000369 	b.ls	86ddc <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xcc>  // b.plast
   86d74:	721e7a9f 	tst	w20, #0xfffffffd
   86d78:	540000c0 	b.eq	86d90 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0x80>  // b.none
   86d7c:	f94013f5 	ldr	x21, [sp, #32]
   86d80:	52800020 	mov	w0, #0x1                   	// #1
   86d84:	a94153f3 	ldp	x19, x20, [sp, #16]
   86d88:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86d8c:	d65f03c0 	ret
   86d90:	f9400660 	ldr	x0, [x19, #8]
   86d94:	528007c4 	mov	w4, #0x3e                  	// #62
   86d98:	39404261 	ldrb	w1, [x19, #16]
   86d9c:	9100e3e2 	add	x2, sp, #0x38
   86da0:	52800043 	mov	w3, #0x2                   	// #2
   86da4:	3900e3e4 	strb	w4, [sp, #56]
   86da8:	3900e7f5 	strb	w21, [sp, #57]
   86dac:	9400a295 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   86db0:	36fffe60 	tbz	w0, #31, 86d7c <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0x6c>
   86db4:	f94013f5 	ldr	x21, [sp, #32]
   86db8:	52800000 	mov	w0, #0x0                   	// #0
   86dbc:	17fffff2 	b	86d84 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0x74>
   86dc0:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86dc4:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86dc8:	91014021 	add	x1, x1, #0x50
   86dcc:	9101c000 	add	x0, x0, #0x70
   86dd0:	52801062 	mov	w2, #0x83                  	// #131
   86dd4:	f90013f5 	str	x21, [sp, #32]
   86dd8:	94006c4a 	bl	a1f00 <assertion_failed>
   86ddc:	2a0403e1 	mov	w1, w4
   86de0:	528007a4 	mov	w4, #0x3d                  	// #61
   86de4:	9100e3e2 	add	x2, sp, #0x38
   86de8:	52800043 	mov	w3, #0x2                   	// #2
   86dec:	3900e3e4 	strb	w4, [sp, #56]
   86df0:	3900e7f5 	strb	w21, [sp, #57]
   86df4:	9400a283 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   86df8:	36fffbe0 	tbz	w0, #31, 86d74 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0x64>
   86dfc:	f94013f5 	ldr	x21, [sp, #32]
   86e00:	17ffffee 	b	86db8 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)+0xa8>
   86e04:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86e08:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86e0c:	91014021 	add	x1, x1, #0x50
   86e10:	91020000 	add	x0, x0, #0x80
   86e14:	52801082 	mov	w2, #0x84                  	// #132
   86e18:	f90013f5 	str	x21, [sp, #32]
   86e1c:	94006c39 	bl	a1f00 <assertion_failed>

0000000000086e20 <CPCM512xSoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)>:
   86e20:	2a0103e5 	mov	w5, w1
   86e24:	2a0203e1 	mov	w1, w2
   86e28:	2a0303e2 	mov	w2, w3
   86e2c:	340000e5 	cbz	w5, 86e48 <CPCM512xSoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x28>
   86e30:	710004bf 	cmp	w5, #0x1
   86e34:	54000060 	b.eq	86e40 <CPCM512xSoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)+0x20>  // b.none
   86e38:	52800000 	mov	w0, #0x0                   	// #0
   86e3c:	d65f03c0 	ret
   86e40:	2a0403e3 	mov	w3, w4
   86e44:	17ffffb3 	b	86d10 <CPCM512xSoundController::SetVolume(CSoundController::TJack, CSoundController::TChannel, int)>
   86e48:	7100009f 	cmp	w4, #0x0
   86e4c:	1a9f07e3 	cset	w3, ne	// ne = any
   86e50:	17ffff7c 	b	86c40 <CPCM512xSoundController::SetMute(CSoundController::TJack, CSoundController::TChannel, bool)>
   86e54:	d503201f 	nop
   86e58:	d503201f 	nop
   86e5c:	d503201f 	nop

0000000000086e60 <CPCM512xSoundController::InitPCM512x(unsigned char)>:
   86e60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86e64:	910003fd 	mov	x29, sp
   86e68:	a9025bf5 	stp	x21, x22, [sp, #32]
   86e6c:	aa0003f5 	mov	x21, x0
   86e70:	f9400400 	ldr	x0, [x0, #8]
   86e74:	a90153f3 	stp	x19, x20, [sp, #16]
   86e78:	b4000420 	cbz	x0, 86efc <CPCM512xSoundController::InitPCM512x(unsigned char)+0x9c>
   86e7c:	12001c36 	and	w22, w1, #0xff
   86e80:	340004b6 	cbz	w22, 86f14 <CPCM512xSoundController::InitPCM512x(unsigned char)+0xb4>
   86e84:	b0000194 	adrp	x20, b7000 <_etext+0x49c8>
   86e88:	9127a294 	add	x20, x20, #0x9e8
   86e8c:	91002293 	add	x19, x20, #0x8
   86e90:	2a1603e1 	mov	w1, w22
   86e94:	aa1303e2 	mov	x2, x19
   86e98:	52800043 	mov	w3, #0x2                   	// #2
   86e9c:	91003a94 	add	x20, x20, #0xe
   86ea0:	9400a258 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   86ea4:	7100081f 	cmp	w0, #0x2
   86ea8:	54000161 	b.ne	86ed4 <CPCM512xSoundController::InitPCM512x(unsigned char)+0x74>  // b.any
   86eac:	91000a73 	add	x19, x19, #0x2
   86eb0:	eb14027f 	cmp	x19, x20
   86eb4:	540001a0 	b.eq	86ee8 <CPCM512xSoundController::InitPCM512x(unsigned char)+0x88>  // b.none
   86eb8:	f94006a0 	ldr	x0, [x21, #8]
   86ebc:	aa1303e2 	mov	x2, x19
   86ec0:	2a1603e1 	mov	w1, w22
   86ec4:	52800043 	mov	w3, #0x2                   	// #2
   86ec8:	9400a24e 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   86ecc:	7100081f 	cmp	w0, #0x2
   86ed0:	54fffee0 	b.eq	86eac <CPCM512xSoundController::InitPCM512x(unsigned char)+0x4c>  // b.none
   86ed4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ed8:	52800000 	mov	w0, #0x0                   	// #0
   86edc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86ee0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86ee4:	d65f03c0 	ret
   86ee8:	a94153f3 	ldp	x19, x20, [sp, #16]
   86eec:	52800020 	mov	w0, #0x1                   	// #1
   86ef0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86ef4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86ef8:	d65f03c0 	ret
   86efc:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86f00:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86f04:	91014021 	add	x1, x1, #0x50
   86f08:	9101c000 	add	x0, x0, #0x70
   86f0c:	52801902 	mov	w2, #0xc8                  	// #200
   86f10:	94006bfc 	bl	a1f00 <assertion_failed>
   86f14:	b0000161 	adrp	x1, b3000 <_etext+0x9c8>
   86f18:	b0000160 	adrp	x0, b3000 <_etext+0x9c8>
   86f1c:	91014021 	add	x1, x1, #0x50
   86f20:	91024000 	add	x0, x0, #0x90
   86f24:	52801922 	mov	w2, #0xc9                  	// #201
   86f28:	94006bf6 	bl	a1f00 <assertion_failed>
   86f2c:	d503201f 	nop

0000000000086f30 <CPCM512xSoundController::Probe()>:
   86f30:	39404001 	ldrb	w1, [x0, #16]
   86f34:	34000041 	cbz	w1, 86f3c <CPCM512xSoundController::Probe()+0xc>
   86f38:	17ffffca 	b	86e60 <CPCM512xSoundController::InitPCM512x(unsigned char)>
   86f3c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86f40:	52800981 	mov	w1, #0x4c                  	// #76
   86f44:	910003fd 	mov	x29, sp
   86f48:	f9000bf3 	str	x19, [sp, #16]
   86f4c:	aa0003f3 	mov	x19, x0
   86f50:	97ffffc4 	bl	86e60 <CPCM512xSoundController::InitPCM512x(unsigned char)>
   86f54:	360000e0 	tbz	w0, #0, 86f70 <CPCM512xSoundController::Probe()+0x40>
   86f58:	52800980 	mov	w0, #0x4c                  	// #76
   86f5c:	39004260 	strb	w0, [x19, #16]
   86f60:	52800020 	mov	w0, #0x1                   	// #1
   86f64:	f9400bf3 	ldr	x19, [sp, #16]
   86f68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86f6c:	d65f03c0 	ret
   86f70:	528009a1 	mov	w1, #0x4d                  	// #77
   86f74:	aa1303e0 	mov	x0, x19
   86f78:	97ffffba 	bl	86e60 <CPCM512xSoundController::InitPCM512x(unsigned char)>
   86f7c:	2a0003e1 	mov	w1, w0
   86f80:	12001c00 	and	w0, w0, #0xff
   86f84:	3607ff01 	tbz	w1, #0, 86f64 <CPCM512xSoundController::Probe()+0x34>
   86f88:	528009a0 	mov	w0, #0x4d                  	// #77
   86f8c:	39004260 	strb	w0, [x19, #16]
   86f90:	52800020 	mov	w0, #0x1                   	// #1
   86f94:	17fffff4 	b	86f64 <CPCM512xSoundController::Probe()+0x34>
	...

0000000000086fa0 <CSoundController::GetInputProperties() const>:
   86fa0:	52800000 	mov	w0, #0x0                   	// #0
   86fa4:	d65f03c0 	ret
	...

0000000000086fb0 <CSoundController::EnableJack(CSoundController::TJack)>:
   86fb0:	52800000 	mov	w0, #0x0                   	// #0
   86fb4:	d65f03c0 	ret
	...

0000000000086fc0 <CSoundController::DisableJack(CSoundController::TJack)>:
   86fc0:	52800000 	mov	w0, #0x0                   	// #0
   86fc4:	d65f03c0 	ret
	...

0000000000086fd0 <CPCM512xSoundController::GetOutputProperties() const>:
   86fd0:	52800020 	mov	w0, #0x1                   	// #1
   86fd4:	d65f03c0 	ret
	...

0000000000086fe0 <CPCM512xSoundController::~CPCM512xSoundController()>:
   86fe0:	d65f03c0 	ret
	...

0000000000086ff0 <CPCM512xSoundController::~CPCM512xSoundController()>:
   86ff0:	d2800301 	mov	x1, #0x18                  	// #24
   86ff4:	140092ef 	b	abbb0 <operator delete(void*, unsigned long)>
	...

0000000000087000 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char)>:
   87000:	d0000203 	adrp	x3, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   87004:	91084063 	add	x3, x3, #0x210
   87008:	a9000403 	stp	x3, x1, [x0]
   8700c:	39004002 	strb	w2, [x0, #16]
   87010:	d65f03c0 	ret
   87014:	d503201f 	nop
   87018:	d503201f 	nop
   8701c:	d503201f 	nop

0000000000087020 <CWM8960SoundController::InitWM8960(unsigned char)>:
   87020:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87024:	910003fd 	mov	x29, sp
   87028:	a90153f3 	stp	x19, x20, [sp, #16]
   8702c:	aa0003f4 	mov	x20, x0
   87030:	f9400400 	ldr	x0, [x0, #8]
   87034:	a9025bf5 	stp	x21, x22, [sp, #32]
   87038:	b4000360 	cbz	x0, 870a4 <CWM8960SoundController::InitWM8960(unsigned char)+0x84>
   8703c:	12001c35 	and	w21, w1, #0xff
   87040:	340003f5 	cbz	w21, 870bc <CWM8960SoundController::InitWM8960(unsigned char)+0x9c>
   87044:	90000193 	adrp	x19, b7000 <_etext+0x49c8>
   87048:	91280273 	add	x19, x19, #0xa00
   8704c:	9100ea76 	add	x22, x19, #0x3a
   87050:	14000005 	b	87064 <CWM8960SoundController::InitWM8960(unsigned char)+0x44>
   87054:	91000a73 	add	x19, x19, #0x2
   87058:	eb16027f 	cmp	x19, x22
   8705c:	540001a0 	b.eq	87090 <CWM8960SoundController::InitWM8960(unsigned char)+0x70>  // b.none
   87060:	f9400680 	ldr	x0, [x20, #8]
   87064:	aa1303e2 	mov	x2, x19
   87068:	2a1503e1 	mov	w1, w21
   8706c:	52800043 	mov	w3, #0x2                   	// #2
   87070:	9400a1e4 	bl	af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>
   87074:	7100081f 	cmp	w0, #0x2
   87078:	54fffee0 	b.eq	87054 <CWM8960SoundController::InitWM8960(unsigned char)+0x34>  // b.none
   8707c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87080:	52800000 	mov	w0, #0x0                   	// #0
   87084:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87088:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8708c:	d65f03c0 	ret
   87090:	a94153f3 	ldp	x19, x20, [sp, #16]
   87094:	52800020 	mov	w0, #0x1                   	// #1
   87098:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8709c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   870a0:	d65f03c0 	ret
   870a4:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   870a8:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   870ac:	91028021 	add	x1, x1, #0xa0
   870b0:	9101c000 	add	x0, x0, #0x70
   870b4:	52800c22 	mov	w2, #0x61                  	// #97
   870b8:	94006b92 	bl	a1f00 <assertion_failed>
   870bc:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   870c0:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   870c4:	91028021 	add	x1, x1, #0xa0
   870c8:	91024000 	add	x0, x0, #0x90
   870cc:	52800c42 	mov	w2, #0x62                  	// #98
   870d0:	94006b8c 	bl	a1f00 <assertion_failed>
   870d4:	d503201f 	nop
   870d8:	d503201f 	nop
   870dc:	d503201f 	nop

00000000000870e0 <CWM8960SoundController::Probe()>:
   870e0:	39404001 	ldrb	w1, [x0, #16]
   870e4:	34000041 	cbz	w1, 870ec <CWM8960SoundController::Probe()+0xc>
   870e8:	17ffffce 	b	87020 <CWM8960SoundController::InitWM8960(unsigned char)>
   870ec:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   870f0:	52800341 	mov	w1, #0x1a                  	// #26
   870f4:	910003fd 	mov	x29, sp
   870f8:	f9000bf3 	str	x19, [sp, #16]
   870fc:	aa0003f3 	mov	x19, x0
   87100:	97ffffc8 	bl	87020 <CWM8960SoundController::InitWM8960(unsigned char)>
   87104:	37000080 	tbnz	w0, #0, 87114 <CWM8960SoundController::Probe()+0x34>
   87108:	f9400bf3 	ldr	x19, [sp, #16]
   8710c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87110:	d65f03c0 	ret
   87114:	52800341 	mov	w1, #0x1a                  	// #26
   87118:	39004261 	strb	w1, [x19, #16]
   8711c:	f9400bf3 	ldr	x19, [sp, #16]
   87120:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87124:	d65f03c0 	ret
	...

0000000000087130 <CSoundController::GetControlInfo(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel) const>:
   87130:	d10043ff 	sub	sp, sp, #0x10
   87134:	390003ff 	strb	wzr, [sp]
   87138:	f80043ff 	stur	xzr, [sp, #4]
   8713c:	f94003e0 	ldr	x0, [sp]
   87140:	b9400be1 	ldr	w1, [sp, #8]
   87144:	910043ff 	add	sp, sp, #0x10
   87148:	d65f03c0 	ret
   8714c:	00000000 	udf	#0

0000000000087150 <CSoundController::SetControl(CSoundController::TControl, CSoundController::TJack, CSoundController::TChannel, int)>:
   87150:	52800000 	mov	w0, #0x0                   	// #0
   87154:	d65f03c0 	ret
	...

0000000000087160 <CWM8960SoundController::GetOutputProperties() const>:
   87160:	52800020 	mov	w0, #0x1                   	// #1
   87164:	d65f03c0 	ret
	...

0000000000087170 <CWM8960SoundController::~CWM8960SoundController()>:
   87170:	d65f03c0 	ret
	...

0000000000087180 <CWM8960SoundController::~CWM8960SoundController()>:
   87180:	d2800301 	mov	x1, #0x18                  	// #24
   87184:	1400928b 	b	abbb0 <operator delete(void*, unsigned long)>
	...

0000000000087190 <CDMASoundBuffers::CDMASoundBuffers(bool, unsigned int, TDREQ, unsigned int, CInterruptSystem*)>:
   87190:	4f000400 	movi	v0.4s, #0x0
   87194:	52800187 	mov	w7, #0xc                   	// #12
   87198:	52800026 	mov	w6, #0x1                   	// #1
   8719c:	39000001 	strb	w1, [x0]
   871a0:	29008c02 	stp	w2, w3, [x0, #4]
   871a4:	b9000c04 	str	w4, [x0, #12]
   871a8:	a9017c05 	stp	x5, xzr, [x0, #16]
   871ac:	3900a01f 	strb	wzr, [x0, #40]
   871b0:	b9002c1f 	str	wzr, [x0, #44]
   871b4:	b9003007 	str	w7, [x0, #48]
   871b8:	3c838000 	stur	q0, [x0, #56]
   871bc:	3c848000 	stur	q0, [x0, #72]
   871c0:	b9005c06 	str	w6, [x0, #92]
   871c4:	d65f03c0 	ret
   871c8:	d503201f 	nop
   871cc:	d503201f 	nop

00000000000871d0 <CDMASoundBuffers::~CDMASoundBuffers()>:
   871d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   871d4:	910003fd 	mov	x29, sp
   871d8:	f9000bf3 	str	x19, [sp, #16]
   871dc:	aa0003f3 	mov	x19, x0
   871e0:	b9402c00 	ldr	w0, [x0, #44]
   871e4:	7100081f 	cmp	w0, #0x2
   871e8:	54000760 	b.eq	872d4 <CDMASoundBuffers::~CDMASoundBuffers()+0x104>  // b.none
   871ec:	b9402e60 	ldr	w0, [x19, #44]
   871f0:	71000c1f 	cmp	w0, #0x3
   871f4:	54000700 	b.eq	872d4 <CDMASoundBuffers::~CDMASoundBuffers()+0x104>  // b.none
   871f8:	b9402e60 	ldr	w0, [x19, #44]
   871fc:	7100101f 	cmp	w0, #0x4
   87200:	540006a0 	b.eq	872d4 <CDMASoundBuffers::~CDMASoundBuffers()+0x104>  // b.none
   87204:	b9403261 	ldr	w1, [x19, #48]
   87208:	71002c3f 	cmp	w1, #0xb
   8720c:	540003e8 	b.hi	87288 <CDMASoundBuffers::~CDMASoundBuffers()+0xb8>  // b.pmore
   87210:	3940a260 	ldrb	w0, [x19, #40]
   87214:	360000c0 	tbz	w0, #0, 8722c <CDMASoundBuffers::~CDMASoundBuffers()+0x5c>
   87218:	f9400a60 	ldr	x0, [x19, #16]
   8721c:	b4000660 	cbz	x0, 872e8 <CDMASoundBuffers::~CDMASoundBuffers()+0x118>
   87220:	11004021 	add	w1, w1, #0x10
   87224:	94009b6f 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   87228:	b9403261 	ldr	w1, [x19, #48]
   8722c:	52800e00 	mov	w0, #0x70                  	// #112
   87230:	72a007e0 	movk	w0, #0x3f, lsl #16
   87234:	0b000021 	add	w1, w1, w0
   87238:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   8723c:	53185c21 	lsl	w1, w1, #8
   87240:	b9000022 	str	w2, [x1]
   87244:	b9403262 	ldr	w2, [x19, #48]
   87248:	0b000041 	add	w1, w2, w0
   8724c:	53185c21 	lsl	w1, w1, #8
   87250:	b9400020 	ldr	w0, [x1]
   87254:	37ffffe0 	tbnz	w0, #31, 87250 <CDMASoundBuffers::~CDMASoundBuffers()+0x80>
   87258:	d28ffe01 	mov	x1, #0x7ff0                	// #32752
   8725c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   87260:	52800020 	mov	w0, #0x1                   	// #1
   87264:	1ac22000 	lsl	w0, w0, w2
   87268:	b9400022 	ldr	w2, [x1]
   8726c:	0a200040 	bic	w0, w2, w0
   87270:	b9000020 	str	w0, [x1]
   87274:	94007717 	bl	a4ed0 <CMachineInfo::Get()>
   87278:	b9403261 	ldr	w1, [x19, #48]
   8727c:	940076ed 	bl	a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>
   87280:	52800180 	mov	w0, #0xc                   	// #12
   87284:	b9003260 	str	w0, [x19, #48]
   87288:	f9402660 	ldr	x0, [x19, #72]
   8728c:	b4000060 	cbz	x0, 87298 <CDMASoundBuffers::~CDMASoundBuffers()+0xc8>
   87290:	d2800401 	mov	x1, #0x20                  	// #32
   87294:	94009247 	bl	abbb0 <operator delete(void*, unsigned long)>
   87298:	f9402a60 	ldr	x0, [x19, #80]
   8729c:	b4000060 	cbz	x0, 872a8 <CDMASoundBuffers::~CDMASoundBuffers()+0xd8>
   872a0:	d2800401 	mov	x1, #0x20                  	// #32
   872a4:	94009243 	bl	abbb0 <operator delete(void*, unsigned long)>
   872a8:	f9401e60 	ldr	x0, [x19, #56]
   872ac:	b4000040 	cbz	x0, 872b4 <CDMASoundBuffers::~CDMASoundBuffers()+0xe4>
   872b0:	94009238 	bl	abb90 <operator delete[](void*)>
   872b4:	f9402260 	ldr	x0, [x19, #64]
   872b8:	b4000080 	cbz	x0, 872c8 <CDMASoundBuffers::~CDMASoundBuffers()+0xf8>
   872bc:	f9400bf3 	ldr	x19, [sp, #16]
   872c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   872c4:	14009233 	b	abb90 <operator delete[](void*)>
   872c8:	f9400bf3 	ldr	x19, [sp, #16]
   872cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   872d0:	d65f03c0 	ret
   872d4:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   872d8:	91290021 	add	x1, x1, #0xa40
   872dc:	91006020 	add	x0, x1, #0x18
   872e0:	52800682 	mov	w2, #0x34                  	// #52
   872e4:	94006b07 	bl	a1f00 <assertion_failed>
   872e8:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   872ec:	91290021 	add	x1, x1, #0xa40
   872f0:	9101c020 	add	x0, x1, #0x70
   872f4:	52800782 	mov	w2, #0x3c                  	// #60
   872f8:	94006b02 	bl	a1f00 <assertion_failed>
   872fc:	d503201f 	nop

0000000000087300 <CDMASoundBuffers::Cancel()>:
   87300:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87304:	910003fd 	mov	x29, sp
   87308:	f9000bf3 	str	x19, [sp, #16]
   8730c:	aa0003f3 	mov	x19, x0
   87310:	b9405c00 	ldr	w0, [x0, #92]
   87314:	35000180 	cbnz	w0, 87344 <CDMASoundBuffers::Cancel()+0x44>
   87318:	b9402e60 	ldr	w0, [x19, #44]
   8731c:	7100081f 	cmp	w0, #0x2
   87320:	54000080 	b.eq	87330 <CDMASoundBuffers::Cancel()+0x30>  // b.none
   87324:	f9400bf3 	ldr	x19, [sp, #16]
   87328:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8732c:	d65f03c0 	ret
   87330:	52800060 	mov	w0, #0x3                   	// #3
   87334:	b9002e60 	str	w0, [x19, #44]
   87338:	f9400bf3 	ldr	x19, [sp, #16]
   8733c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87340:	d65f03c0 	ret
   87344:	9400974f 	bl	ad080 <EnterCritical>
   87348:	b9402e60 	ldr	w0, [x19, #44]
   8734c:	7100081f 	cmp	w0, #0x2
   87350:	b9405e60 	ldr	w0, [x19, #92]
   87354:	540000a0 	b.eq	87368 <CDMASoundBuffers::Cancel()+0x68>  // b.none
   87358:	34fffe60 	cbz	w0, 87324 <CDMASoundBuffers::Cancel()+0x24>
   8735c:	f9400bf3 	ldr	x19, [sp, #16]
   87360:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87364:	14009777 	b	ad140 <LeaveCritical>
   87368:	52800061 	mov	w1, #0x3                   	// #3
   8736c:	b9002e61 	str	w1, [x19, #44]
   87370:	17fffffa 	b	87358 <CDMASoundBuffers::Cancel()+0x58>
   87374:	d503201f 	nop
   87378:	d503201f 	nop
   8737c:	d503201f 	nop

0000000000087380 <CDMASoundBuffers::IsActive() const>:
   87380:	b9402c00 	ldr	w0, [x0, #44]
   87384:	51000800 	sub	w0, w0, #0x2
   87388:	7100081f 	cmp	w0, #0x2
   8738c:	1a9f87e0 	cset	w0, ls	// ls = plast
   87390:	d65f03c0 	ret
   87394:	d503201f 	nop
   87398:	d503201f 	nop
   8739c:	d503201f 	nop

00000000000873a0 <CDMASoundBuffers::GetNextChunk(bool)>:
   873a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   873a4:	910003fd 	mov	x29, sp
   873a8:	a90153f3 	stp	x19, x20, [sp, #16]
   873ac:	aa0003f3 	mov	x19, x0
   873b0:	b9405800 	ldr	w0, [x0, #88]
   873b4:	f90013f5 	str	x21, [sp, #32]
   873b8:	7100041f 	cmp	w0, #0x1
   873bc:	54000668 	b.hi	87488 <CDMASoundBuffers::GetNextChunk(bool)+0xe8>  // b.pmore
   873c0:	8b204e60 	add	x0, x19, w0, uxtw #3
   873c4:	12001c35 	and	w21, w1, #0xff
   873c8:	f9401c01 	ldr	x1, [x0, #56]
   873cc:	b4000681 	cbz	x1, 8749c <CDMASoundBuffers::GetNextChunk(bool)+0xfc>
   873d0:	37000475 	tbnz	w21, #0, 8745c <CDMASoundBuffers::GetNextChunk(bool)+0xbc>
   873d4:	f9400e64 	ldr	x4, [x19, #24]
   873d8:	b40004e4 	cbz	x4, 87474 <CDMASoundBuffers::GetNextChunk(bool)+0xd4>
   873dc:	f9401263 	ldr	x3, [x19, #32]
   873e0:	52800020 	mov	w0, #0x1                   	// #1
   873e4:	b9400e62 	ldr	w2, [x19, #12]
   873e8:	d63f0080 	blr	x4
   873ec:	2a0003f4 	mov	w20, w0
   873f0:	340002c0 	cbz	w0, 87448 <CDMASoundBuffers::GetNextChunk(bool)+0xa8>
   873f4:	531e7694 	lsl	w20, w20, #2
   873f8:	529fffe0 	mov	w0, #0xffff                	// #65535
   873fc:	6b00029f 	cmp	w20, w0
   87400:	54000588 	b.hi	874b0 <CDMASoundBuffers::GetNextChunk(bool)+0x110>  // b.pmore
   87404:	b9405a60 	ldr	w0, [x19, #88]
   87408:	8b000e60 	add	x0, x19, x0, lsl #3
   8740c:	f9402402 	ldr	x2, [x0, #72]
   87410:	b40005a2 	cbz	x2, 874c4 <CDMASoundBuffers::GetNextChunk(bool)+0x124>
   87414:	f9401c00 	ldr	x0, [x0, #56]
   87418:	b9000c54 	str	w20, [x2, #12]
   8741c:	2a1403e1 	mov	w1, w20
   87420:	52800035 	mov	w21, #0x1                   	// #1
   87424:	94009837 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   87428:	b9405a60 	ldr	w0, [x19, #88]
   8742c:	d2800401 	mov	x1, #0x20                  	// #32
   87430:	8b000e60 	add	x0, x19, x0, lsl #3
   87434:	f9402400 	ldr	x0, [x0, #72]
   87438:	94009832 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   8743c:	b9405a60 	ldr	w0, [x19, #88]
   87440:	4a150000 	eor	w0, w0, w21
   87444:	b9005a60 	str	w0, [x19, #88]
   87448:	a94153f3 	ldp	x19, x20, [sp, #16]
   8744c:	2a1503e0 	mov	w0, w21
   87450:	f94013f5 	ldr	x21, [sp, #32]
   87454:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87458:	d65f03c0 	ret
   8745c:	b9400e74 	ldr	w20, [x19, #12]
   87460:	aa0103e0 	mov	x0, x1
   87464:	52800001 	mov	w1, #0x0                   	// #0
   87468:	d37e7e82 	ubfiz	x2, x20, #2, #32
   8746c:	94008f3f 	bl	ab168 <memset>
   87470:	17ffffe1 	b	873f4 <CDMASoundBuffers::GetNextChunk(bool)+0x54>
   87474:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87478:	91290021 	add	x1, x1, #0xa40
   8747c:	91032020 	add	x0, x1, #0xc8
   87480:	52801c62 	mov	w2, #0xe3                  	// #227
   87484:	94006a9f 	bl	a1f00 <assertion_failed>
   87488:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   8748c:	91290021 	add	x1, x1, #0xa40
   87490:	91022020 	add	x0, x1, #0x88
   87494:	52801ba2 	mov	w2, #0xdd                  	// #221
   87498:	94006a9a 	bl	a1f00 <assertion_failed>
   8749c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   874a0:	91290021 	add	x1, x1, #0xa40
   874a4:	91028020 	add	x0, x1, #0xa0
   874a8:	52801bc2 	mov	w2, #0xde                  	// #222
   874ac:	94006a95 	bl	a1f00 <assertion_failed>
   874b0:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   874b4:	91290021 	add	x1, x1, #0xa40
   874b8:	91036020 	add	x0, x1, #0xd8
   874bc:	52801e42 	mov	w2, #0xf2                  	// #242
   874c0:	94006a90 	bl	a1f00 <assertion_failed>
   874c4:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   874c8:	91290021 	add	x1, x1, #0xa40
   874cc:	91040020 	add	x0, x1, #0x100
   874d0:	52801e82 	mov	w2, #0xf4                  	// #244
   874d4:	94006a8b 	bl	a1f00 <assertion_failed>
   874d8:	d503201f 	nop
   874dc:	d503201f 	nop

00000000000874e0 <CDMASoundBuffers::PutChunk()>:
   874e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   874e4:	910003fd 	mov	x29, sp
   874e8:	f9000bf3 	str	x19, [sp, #16]
   874ec:	aa0003f3 	mov	x19, x0
   874f0:	b9405800 	ldr	w0, [x0, #88]
   874f4:	7100041f 	cmp	w0, #0x1
   874f8:	540002e8 	b.hi	87554 <CDMASoundBuffers::PutChunk()+0x74>  // b.pmore
   874fc:	8b204e60 	add	x0, x19, w0, uxtw #3
   87500:	f9401c00 	ldr	x0, [x0, #56]
   87504:	b4000320 	cbz	x0, 87568 <CDMASoundBuffers::PutChunk()+0x88>
   87508:	b9400e61 	ldr	w1, [x19, #12]
   8750c:	d37ef421 	lsl	x1, x1, #2
   87510:	940097fc 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   87514:	f9400e64 	ldr	x4, [x19, #24]
   87518:	b4000324 	cbz	x4, 8757c <CDMASoundBuffers::PutChunk()+0x9c>
   8751c:	b9405a61 	ldr	w1, [x19, #88]
   87520:	52800020 	mov	w0, #0x1                   	// #1
   87524:	f9401263 	ldr	x3, [x19, #32]
   87528:	8b010e61 	add	x1, x19, x1, lsl #3
   8752c:	b9400e62 	ldr	w2, [x19, #12]
   87530:	f9401c21 	ldr	x1, [x1, #56]
   87534:	d63f0080 	blr	x4
   87538:	b9405a61 	ldr	w1, [x19, #88]
   8753c:	52800020 	mov	w0, #0x1                   	// #1
   87540:	52000021 	eor	w1, w1, #0x1
   87544:	b9005a61 	str	w1, [x19, #88]
   87548:	f9400bf3 	ldr	x19, [sp, #16]
   8754c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87550:	d65f03c0 	ret
   87554:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87558:	91290021 	add	x1, x1, #0xa40
   8755c:	91022020 	add	x0, x1, #0x88
   87560:	52802022 	mov	w2, #0x101                 	// #257
   87564:	94006a67 	bl	a1f00 <assertion_failed>
   87568:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   8756c:	91290021 	add	x1, x1, #0xa40
   87570:	91028020 	add	x0, x1, #0xa0
   87574:	52802042 	mov	w2, #0x102                 	// #258
   87578:	94006a62 	bl	a1f00 <assertion_failed>
   8757c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87580:	91290021 	add	x1, x1, #0xa40
   87584:	91032020 	add	x0, x1, #0xc8
   87588:	52802102 	mov	w2, #0x108                 	// #264
   8758c:	94006a5d 	bl	a1f00 <assertion_failed>

0000000000087590 <CDMASoundBuffers::InterruptHandler()>:
   87590:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87594:	910003fd 	mov	x29, sp
   87598:	b9403001 	ldr	w1, [x0, #48]
   8759c:	f9000bf3 	str	x19, [sp, #16]
   875a0:	71002c3f 	cmp	w1, #0xb
   875a4:	54000848 	b.hi	876ac <CDMASoundBuffers::InterruptHandler()+0x11c>  // b.pmore
   875a8:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   875ac:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   875b0:	aa0003f3 	mov	x19, x0
   875b4:	52800020 	mov	w0, #0x1                   	// #1
   875b8:	1ac12000 	lsl	w0, w0, w1
   875bc:	b9400041 	ldr	w1, [x2]
   875c0:	6a01001f 	tst	w0, w1
   875c4:	540007e0 	b.eq	876c0 <CDMASoundBuffers::InterruptHandler()+0x130>  // b.none
   875c8:	b9000040 	str	w0, [x2]
   875cc:	b9403260 	ldr	w0, [x19, #48]
   875d0:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   875d4:	1101c000 	add	w0, w0, #0x70
   875d8:	53185c00 	lsl	w0, w0, #8
   875dc:	b9400001 	ldr	w1, [x0]
   875e0:	361007a1 	tbz	w1, #2, 876d4 <CDMASoundBuffers::InterruptHandler()+0x144>
   875e4:	b9000001 	str	w1, [x0]
   875e8:	37400381 	tbnz	w1, #8, 87658 <CDMASoundBuffers::InterruptHandler()+0xc8>
   875ec:	b9405e60 	ldr	w0, [x19, #92]
   875f0:	350005a0 	cbnz	w0, 876a4 <CDMASoundBuffers::InterruptHandler()+0x114>
   875f4:	b9402e60 	ldr	w0, [x19, #44]
   875f8:	71000c1f 	cmp	w0, #0x3
   875fc:	54000160 	b.eq	87628 <CDMASoundBuffers::InterruptHandler()+0x98>  // b.none
   87600:	7100101f 	cmp	w0, #0x4
   87604:	54000420 	b.eq	87688 <CDMASoundBuffers::InterruptHandler()+0xf8>  // b.none
   87608:	7100081f 	cmp	w0, #0x2
   8760c:	54000801 	b.ne	8770c <CDMASoundBuffers::InterruptHandler()+0x17c>  // b.any
   87610:	39400260 	ldrb	w0, [x19]
   87614:	360006a0 	tbz	w0, #0, 876e8 <CDMASoundBuffers::InterruptHandler()+0x158>
   87618:	aa1303e0 	mov	x0, x19
   8761c:	52800001 	mov	w1, #0x0                   	// #0
   87620:	97ffff60 	bl	873a0 <CDMASoundBuffers::GetNextChunk(bool)>
   87624:	37000360 	tbnz	w0, #0, 87690 <CDMASoundBuffers::InterruptHandler()+0x100>
   87628:	b9403260 	ldr	w0, [x19, #48]
   8762c:	528e0382 	mov	w2, #0x701c                	// #28700
   87630:	72a7e002 	movk	w2, #0x3f00, lsl #16
   87634:	52800081 	mov	w1, #0x4                   	// #4
   87638:	0b002040 	add	w0, w2, w0, lsl #8
   8763c:	b900001f 	str	wzr, [x0]
   87640:	b9002e61 	str	w1, [x19, #44]
   87644:	b9405e60 	ldr	w0, [x19, #92]
   87648:	34000280 	cbz	w0, 87698 <CDMASoundBuffers::InterruptHandler()+0x108>
   8764c:	f9400bf3 	ldr	x19, [sp, #16]
   87650:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87654:	140096bb 	b	ad140 <LeaveCritical>
   87658:	f9400e64 	ldr	x4, [x19, #24]
   8765c:	528000a0 	mov	w0, #0x5                   	// #5
   87660:	b9002e60 	str	w0, [x19, #44]
   87664:	b40004a4 	cbz	x4, 876f8 <CDMASoundBuffers::InterruptHandler()+0x168>
   87668:	f9401263 	ldr	x3, [x19, #32]
   8766c:	aa0403f0 	mov	x16, x4
   87670:	f9400bf3 	ldr	x19, [sp, #16]
   87674:	52800002 	mov	w2, #0x0                   	// #0
   87678:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8767c:	d2800001 	mov	x1, #0x0                   	// #0
   87680:	52800000 	mov	w0, #0x0                   	// #0
   87684:	d61f0200 	br	x16
   87688:	52800020 	mov	w0, #0x1                   	// #1
   8768c:	b9002e60 	str	w0, [x19, #44]
   87690:	b9405e60 	ldr	w0, [x19, #92]
   87694:	35fffdc0 	cbnz	w0, 8764c <CDMASoundBuffers::InterruptHandler()+0xbc>
   87698:	f9400bf3 	ldr	x19, [sp, #16]
   8769c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   876a0:	d65f03c0 	ret
   876a4:	94009677 	bl	ad080 <EnterCritical>
   876a8:	17ffffd3 	b	875f4 <CDMASoundBuffers::InterruptHandler()+0x64>
   876ac:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   876b0:	91290021 	add	x1, x1, #0xa40
   876b4:	9104a020 	add	x0, x1, #0x128
   876b8:	52802242 	mov	w2, #0x112                 	// #274
   876bc:	94006a11 	bl	a1f00 <assertion_failed>
   876c0:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   876c4:	91290021 	add	x1, x1, #0xa40
   876c8:	91054020 	add	x0, x1, #0x150
   876cc:	52802342 	mov	w2, #0x11a                 	// #282
   876d0:	94006a0c 	bl	a1f00 <assertion_failed>
   876d4:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   876d8:	91290021 	add	x1, x1, #0xa40
   876dc:	9105a020 	add	x0, x1, #0x168
   876e0:	528023c2 	mov	w2, #0x11e                 	// #286
   876e4:	94006a07 	bl	a1f00 <assertion_failed>
   876e8:	aa1303e0 	mov	x0, x19
   876ec:	97ffff7d 	bl	874e0 <CDMASoundBuffers::PutChunk()>
   876f0:	3707fd00 	tbnz	w0, #0, 87690 <CDMASoundBuffers::InterruptHandler()+0x100>
   876f4:	17ffffcd 	b	87628 <CDMASoundBuffers::InterruptHandler()+0x98>
   876f8:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   876fc:	91290021 	add	x1, x1, #0xa40
   87700:	91032020 	add	x0, x1, #0xc8
   87704:	528024e2 	mov	w2, #0x127                 	// #295
   87708:	940069fe 	bl	a1f00 <assertion_failed>
   8770c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87710:	91290021 	add	x1, x1, #0xa40
   87714:	9105e020 	add	x0, x1, #0x178
   87718:	528029e2 	mov	w2, #0x14f                 	// #335
   8771c:	940069f9 	bl	a1f00 <assertion_failed>

0000000000087720 <CDMASoundBuffers::InterruptStub(void*)>:
   87720:	b4000040 	cbz	x0, 87728 <CDMASoundBuffers::InterruptStub(void*)+0x8>
   87724:	17ffff9b 	b	87590 <CDMASoundBuffers::InterruptHandler()>
   87728:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8772c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87730:	91290021 	add	x1, x1, #0xa40
   87734:	910003fd 	mov	x29, sp
   87738:	91060020 	add	x0, x1, #0x180
   8773c:	52802b22 	mov	w2, #0x159                 	// #345
   87740:	940069f0 	bl	a1f00 <assertion_failed>
   87744:	d503201f 	nop
   87748:	d503201f 	nop
   8774c:	d503201f 	nop

0000000000087750 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>:
   87750:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87754:	7100043f 	cmp	w1, #0x1
   87758:	910003fd 	mov	x29, sp
   8775c:	a90153f3 	stp	x19, x20, [sp, #16]
   87760:	54000688 	b.hi	87830 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0xe0>  // b.pmore
   87764:	aa0003f4 	mov	x20, x0
   87768:	b9400c00 	ldr	w0, [x0, #12]
   8776c:	340006c0 	cbz	w0, 87844 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0xf4>
   87770:	2a0103f3 	mov	w19, w1
   87774:	d37e7c00 	ubfiz	x0, x0, #2, #32
   87778:	52800001 	mov	w1, #0x0                   	// #0
   8777c:	940090d9 	bl	abae0 <operator new[](unsigned long, int)>
   87780:	8b334e93 	add	x19, x20, w19, uxtw #3
   87784:	aa0003e2 	mov	x2, x0
   87788:	52800001 	mov	w1, #0x0                   	// #0
   8778c:	d2800400 	mov	x0, #0x20                  	// #32
   87790:	f9001e62 	str	x2, [x19, #56]
   87794:	940090c7 	bl	abab0 <operator new(unsigned long, int)>
   87798:	f9002660 	str	x0, [x19, #72]
   8779c:	aa0003e1 	mov	x1, x0
   877a0:	39400280 	ldrb	w0, [x20]
   877a4:	37000260 	tbnz	w0, #0, 877f0 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)+0xa0>
   877a8:	29409280 	ldp	w0, w4, [x20, #4]
   877ac:	52808725 	mov	w5, #0x439                 	// #1081
   877b0:	f9401e63 	ldr	x3, [x19, #56]
   877b4:	12005c00 	and	w0, w0, #0xffffff
   877b8:	b9400e82 	ldr	w2, [x20, #12]
   877bc:	2a0440a4 	orr	w4, w5, w4, lsl #16
   877c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   877c4:	32020463 	orr	w3, w3, #0xc0000000
   877c8:	531e7442 	lsl	w2, w2, #2
   877cc:	52afc006 	mov	w6, #0x7e000000            	// #2113929216
   877d0:	0b060000 	add	w0, w0, w6
   877d4:	29000024 	stp	w4, w0, [x1]
   877d8:	29010823 	stp	w3, w2, [x1, #8]
   877dc:	52800020 	mov	w0, #0x1                   	// #1
   877e0:	b900103f 	str	wzr, [x1, #16]
   877e4:	f9000c3f 	str	xzr, [x1, #24]
   877e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   877ec:	d65f03c0 	ret
   877f0:	29408e80 	ldp	w0, w3, [x20, #4]
   877f4:	52806924 	mov	w4, #0x349                 	// #841
   877f8:	f9401e62 	ldr	x2, [x19, #56]
   877fc:	12005c00 	and	w0, w0, #0xffffff
   87800:	a94153f3 	ldp	x19, x20, [sp, #16]
   87804:	2a034083 	orr	w3, w4, w3, lsl #16
   87808:	32020442 	orr	w2, w2, #0xc0000000
   8780c:	52afc005 	mov	w5, #0x7e000000            	// #2113929216
   87810:	0b050000 	add	w0, w0, w5
   87814:	29000823 	stp	w3, w2, [x1]
   87818:	b9000820 	str	w0, [x1, #8]
   8781c:	52800020 	mov	w0, #0x1                   	// #1
   87820:	b900103f 	str	wzr, [x1, #16]
   87824:	f9000c3f 	str	xzr, [x1, #24]
   87828:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8782c:	d65f03c0 	ret
   87830:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87834:	91290021 	add	x1, x1, #0xa40
   87838:	91064020 	add	x0, x1, #0x190
   8783c:	52802c02 	mov	w2, #0x160                 	// #352
   87840:	940069b0 	bl	a1f00 <assertion_failed>
   87844:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87848:	91290021 	add	x1, x1, #0xa40
   8784c:	91068020 	add	x0, x1, #0x1a0
   87850:	52802c42 	mov	w2, #0x162                 	// #354
   87854:	940069ab 	bl	a1f00 <assertion_failed>
   87858:	d503201f 	nop
   8785c:	d503201f 	nop

0000000000087860 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)>:
   87860:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87864:	910003fd 	mov	x29, sp
   87868:	a90153f3 	stp	x19, x20, [sp, #16]
   8786c:	aa0003f3 	mov	x19, x0
   87870:	b9402c00 	ldr	w0, [x0, #44]
   87874:	f90013f5 	str	x21, [sp, #32]
   87878:	aa0103f4 	mov	x20, x1
   8787c:	aa0203f5 	mov	x21, x2
   87880:	35000980 	cbnz	w0, 879b0 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x150>
   87884:	b9400e61 	ldr	w1, [x19, #12]
   87888:	d29fffe0 	mov	x0, #0xffff                	// #65535
   8788c:	eb01081f 	cmp	x0, x1, lsl #2
   87890:	54001143 	b.cc	87ab8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x258>  // b.lo, b.ul, b.last
   87894:	9400758f 	bl	a4ed0 <CMachineInfo::Get()>
   87898:	52801041 	mov	w1, #0x82                  	// #130
   8789c:	94007529 	bl	a4d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   878a0:	b9003260 	str	w0, [x19, #48]
   878a4:	71002c1f 	cmp	w0, #0xb
   878a8:	540000a8 	b.hi	878bc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x5c>  // b.pmore
   878ac:	aa1303e0 	mov	x0, x19
   878b0:	52800001 	mov	w1, #0x0                   	// #0
   878b4:	97ffffa7 	bl	87750 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>
   878b8:	37000100 	tbnz	w0, #0, 878d8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x78>
   878bc:	528000a0 	mov	w0, #0x5                   	// #5
   878c0:	b9002e60 	str	w0, [x19, #44]
   878c4:	52800000 	mov	w0, #0x0                   	// #0
   878c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   878cc:	f94013f5 	ldr	x21, [sp, #32]
   878d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   878d4:	d65f03c0 	ret
   878d8:	aa1303e0 	mov	x0, x19
   878dc:	52800021 	mov	w1, #0x1                   	// #1
   878e0:	97ffff9c 	bl	87750 <CDMASoundBuffers::SetupDMAControlBlock(unsigned int)>
   878e4:	3607fec0 	tbz	w0, #0, 878bc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x5c>
   878e8:	a9448a60 	ldp	x0, x2, [x19, #72]
   878ec:	d2800401 	mov	x1, #0x20                  	// #32
   878f0:	32020403 	orr	w3, w0, #0xc0000000
   878f4:	32020444 	orr	w4, w2, #0xc0000000
   878f8:	b9001404 	str	w4, [x0, #20]
   878fc:	b9001443 	str	w3, [x2, #20]
   87900:	94009700 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   87904:	f9402a60 	ldr	x0, [x19, #80]
   87908:	d2800401 	mov	x1, #0x20                  	// #32
   8790c:	940096fd 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   87910:	b9403260 	ldr	w0, [x19, #48]
   87914:	71002c1f 	cmp	w0, #0xb
   87918:	54000e28 	b.hi	87adc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x27c>  // b.pmore
   8791c:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   87920:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   87924:	52800021 	mov	w1, #0x1                   	// #1
   87928:	b9400043 	ldr	w3, [x2]
   8792c:	1ac02021 	lsl	w1, w1, w0
   87930:	52807d00 	mov	w0, #0x3e8                 	// #1000
   87934:	2a030021 	orr	w1, w1, w3
   87938:	b9000041 	str	w1, [x2]
   8793c:	94008c21 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   87940:	b9403260 	ldr	w0, [x19, #48]
   87944:	52800e02 	mov	w2, #0x70                  	// #112
   87948:	72a007e2 	movk	w2, #0x3f, lsl #16
   8794c:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   87950:	0b020000 	add	w0, w0, w2
   87954:	53185c00 	lsl	w0, w0, #8
   87958:	b9000001 	str	w1, [x0]
   8795c:	b9403261 	ldr	w1, [x19, #48]
   87960:	0b020022 	add	w2, w1, w2
   87964:	53185c42 	lsl	w2, w2, #8
   87968:	b9400040 	ldr	w0, [x2]
   8796c:	37ffffe0 	tbnz	w0, #31, 87968 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x108>
   87970:	3940a260 	ldrb	w0, [x19, #40]
   87974:	37000f00 	tbnz	w0, #0, 87b54 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2f4>
   87978:	f9400a60 	ldr	x0, [x19, #16]
   8797c:	b4000f60 	cbz	x0, 87b68 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x308>
   87980:	71002c3f 	cmp	w1, #0xb
   87984:	54000fc8 	b.hi	87b7c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x31c>  // b.pmore
   87988:	11004021 	add	w1, w1, #0x10
   8798c:	aa1303e3 	mov	x3, x19
   87990:	90000002 	adrp	x2, 87000 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char)>
   87994:	911c8042 	add	x2, x2, #0x720
   87998:	94009946 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8799c:	52800021 	mov	w1, #0x1                   	// #1
   879a0:	52800020 	mov	w0, #0x1                   	// #1
   879a4:	3900a261 	strb	w1, [x19, #40]
   879a8:	b9002e60 	str	w0, [x19, #44]
   879ac:	d503201f 	nop
   879b0:	b9402e61 	ldr	w1, [x19, #44]
   879b4:	7100043f 	cmp	w1, #0x1
   879b8:	54000761 	b.ne	87aa4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x244>  // b.any
   879bc:	b40009b4 	cbz	x20, 87af0 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x290>
   879c0:	39400260 	ldrb	w0, [x19]
   879c4:	a901d674 	stp	x20, x21, [x19, #24]
   879c8:	b9005a7f 	str	wzr, [x19, #88]
   879cc:	37000800 	tbnz	w0, #0, 87acc <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x26c>
   879d0:	b9403262 	ldr	w2, [x19, #48]
   879d4:	52800040 	mov	w0, #0x2                   	// #2
   879d8:	52800e03 	mov	w3, #0x70                  	// #112
   879dc:	72a007e3 	movk	w3, #0x3f, lsl #16
   879e0:	b9002e60 	str	w0, [x19, #44]
   879e4:	0b030040 	add	w0, w2, w3
   879e8:	53185c01 	lsl	w1, w0, #8
   879ec:	aa0103e0 	mov	x0, x1
   879f0:	b9400021 	ldr	w1, [x1]
   879f4:	37100881 	tbnz	w1, #2, 87b04 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2a4>
   879f8:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   879fc:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   87a00:	52800021 	mov	w1, #0x1                   	// #1
   87a04:	1ac22021 	lsl	w1, w1, w2
   87a08:	b9400082 	ldr	w2, [x4]
   87a0c:	6a02003f 	tst	w1, w2
   87a10:	54000841 	b.ne	87b18 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2b8>  // b.any
   87a14:	f9402661 	ldr	x1, [x19, #72]
   87a18:	b40008a1 	cbz	x1, 87b2c <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2cc>
   87a1c:	11001000 	add	w0, w0, #0x4
   87a20:	39400262 	ldrb	w2, [x19]
   87a24:	32020421 	orr	w1, w1, #0xc0000000
   87a28:	52800024 	mov	w4, #0x1                   	// #1
   87a2c:	72a21e24 	movk	w4, #0x10f1, lsl #16
   87a30:	b9000001 	str	w1, [x0]
   87a34:	b9403260 	ldr	w0, [x19, #48]
   87a38:	0b030000 	add	w0, w0, w3
   87a3c:	53185c00 	lsl	w0, w0, #8
   87a40:	b9000004 	str	w4, [x0]
   87a44:	37000062 	tbnz	w2, #0, 87a50 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x1f0>
   87a48:	52800020 	mov	w0, #0x1                   	// #1
   87a4c:	17ffff9f 	b	878c8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x68>
   87a50:	aa1303e0 	mov	x0, x19
   87a54:	52800001 	mov	w1, #0x0                   	// #0
   87a58:	97fffe52 	bl	873a0 <CDMASoundBuffers::GetNextChunk(bool)>
   87a5c:	3707ff60 	tbnz	w0, #0, 87a48 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x1e8>
   87a60:	b9405e60 	ldr	w0, [x19, #92]
   87a64:	350006e0 	cbnz	w0, 87b40 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x2e0>
   87a68:	b9402e60 	ldr	w0, [x19, #44]
   87a6c:	7100081f 	cmp	w0, #0x2
   87a70:	54fffec1 	b.ne	87a48 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x1e8>  // b.any
   87a74:	b9403260 	ldr	w0, [x19, #48]
   87a78:	528e0382 	mov	w2, #0x701c                	// #28700
   87a7c:	72a7e002 	movk	w2, #0x3f00, lsl #16
   87a80:	52800081 	mov	w1, #0x4                   	// #4
   87a84:	0b002040 	add	w0, w2, w0, lsl #8
   87a88:	b900001f 	str	wzr, [x0]
   87a8c:	b9002e61 	str	w1, [x19, #44]
   87a90:	b9405e60 	ldr	w0, [x19, #92]
   87a94:	34fffda0 	cbz	w0, 87a48 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x1e8>
   87a98:	940095aa 	bl	ad140 <LeaveCritical>
   87a9c:	52800020 	mov	w0, #0x1                   	// #1
   87aa0:	17ffff8a 	b	878c8 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x68>
   87aa4:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87aa8:	91290021 	add	x1, x1, #0xa40
   87aac:	91082020 	add	x0, x1, #0x208
   87ab0:	52801202 	mov	w2, #0x90                  	// #144
   87ab4:	94006913 	bl	a1f00 <assertion_failed>
   87ab8:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87abc:	91290021 	add	x1, x1, #0xa40
   87ac0:	9106e020 	add	x0, x1, #0x1b8
   87ac4:	52800b62 	mov	w2, #0x5b                  	// #91
   87ac8:	9400690e 	bl	a1f00 <assertion_failed>
   87acc:	aa1303e0 	mov	x0, x19
   87ad0:	97fffe34 	bl	873a0 <CDMASoundBuffers::GetNextChunk(bool)>
   87ad4:	3707f7e0 	tbnz	w0, #0, 879d0 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x170>
   87ad8:	17ffff7b 	b	878c4 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x64>
   87adc:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87ae0:	91290021 	add	x1, x1, #0xa40
   87ae4:	9104a020 	add	x0, x1, #0x128
   87ae8:	52800f42 	mov	w2, #0x7a                  	// #122
   87aec:	94006905 	bl	a1f00 <assertion_failed>
   87af0:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87af4:	91290021 	add	x1, x1, #0xa40
   87af8:	91088020 	add	x0, x1, #0x220
   87afc:	52801242 	mov	w2, #0x92                  	// #146
   87b00:	94006900 	bl	a1f00 <assertion_failed>
   87b04:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b08:	91290021 	add	x1, x1, #0xa40
   87b0c:	9108c020 	add	x0, x1, #0x230
   87b10:	52801482 	mov	w2, #0xa4                  	// #164
   87b14:	940068fb 	bl	a1f00 <assertion_failed>
   87b18:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b1c:	91290021 	add	x1, x1, #0xa40
   87b20:	9109a020 	add	x0, x1, #0x268
   87b24:	528014a2 	mov	w2, #0xa5                  	// #165
   87b28:	940068f6 	bl	a1f00 <assertion_failed>
   87b2c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b30:	91290021 	add	x1, x1, #0xa40
   87b34:	910a8020 	add	x0, x1, #0x2a0
   87b38:	528014e2 	mov	w2, #0xa7                  	// #167
   87b3c:	940068f1 	bl	a1f00 <assertion_failed>
   87b40:	94009550 	bl	ad080 <EnterCritical>
   87b44:	b9402e60 	ldr	w0, [x19, #44]
   87b48:	7100081f 	cmp	w0, #0x2
   87b4c:	54fffa21 	b.ne	87a90 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x230>  // b.any
   87b50:	17ffffc9 	b	87a74 <CDMASoundBuffers::Start(unsigned int (*)(bool, unsigned int*, unsigned int, void*), void*)+0x214>
   87b54:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b58:	91290021 	add	x1, x1, #0xa40
   87b5c:	9107c020 	add	x0, x1, #0x1f0
   87b60:	528010e2 	mov	w2, #0x87                  	// #135
   87b64:	940068e7 	bl	a1f00 <assertion_failed>
   87b68:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b6c:	91290021 	add	x1, x1, #0xa40
   87b70:	9101c020 	add	x0, x1, #0x70
   87b74:	52801102 	mov	w2, #0x88                  	// #136
   87b78:	940068e2 	bl	a1f00 <assertion_failed>
   87b7c:	90000181 	adrp	x1, b7000 <_etext+0x49c8>
   87b80:	91290021 	add	x1, x1, #0xa40
   87b84:	9104a020 	add	x0, x1, #0x128
   87b88:	52801122 	mov	w2, #0x89                  	// #137
   87b8c:	940068dd 	bl	a1f00 <assertion_failed>

0000000000087b90 <CDWHCIDevice::CancelDeviceTransactions(CUSBDevice*)>:
   87b90:	91010000 	add	x0, x0, #0x40
   87b94:	14001277 	b	8c570 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>
   87b98:	d503201f 	nop
   87b9c:	d503201f 	nop

0000000000087ba0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
   87ba0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87ba4:	910003fd 	mov	x29, sp
   87ba8:	b40000e2 	cbz	x2, 87bc4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
   87bac:	71003c3f 	cmp	w1, #0xf
   87bb0:	54000168 	b.hi	87bdc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x3c>  // b.pmore
   87bb4:	8b214041 	add	x1, x2, w1, uxtw
   87bb8:	3903503f 	strb	wzr, [x1, #212]
   87bbc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87bc0:	d65f03c0 	ret
   87bc4:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   87bc8:	f0000140 	adrp	x0, b2000 <SErrorStub+0xc>
   87bcc:	91030021 	add	x1, x1, #0xc0
   87bd0:	91288000 	add	x0, x0, #0xa20
   87bd4:	52805d82 	mov	w2, #0x2ec                 	// #748
   87bd8:	940068ca 	bl	a1f00 <assertion_failed>
   87bdc:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   87be0:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   87be4:	91030021 	add	x1, x1, #0xc0
   87be8:	91034000 	add	x0, x0, #0xd0
   87bec:	52805de2 	mov	w2, #0x2ef                 	// #751
   87bf0:	940068c4 	bl	a1f00 <assertion_failed>
   87bf4:	d503201f 	nop
   87bf8:	d503201f 	nop
   87bfc:	d503201f 	nop

0000000000087c00 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>:
   87c00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87c04:	910003fd 	mov	x29, sp
   87c08:	a90153f3 	stp	x19, x20, [sp, #16]
   87c0c:	aa0003f3 	mov	x19, x0
   87c10:	52800034 	mov	w20, #0x1                   	// #1
   87c14:	a9025bf5 	stp	x21, x22, [sp, #32]
   87c18:	aa0203f5 	mov	x21, x2
   87c1c:	aa0103f6 	mov	x22, x1
   87c20:	2a0303e1 	mov	w1, w3
   87c24:	9400306f 	bl	93de0 <CUSBHostController::CUSBHostController(bool)>
   87c28:	d0000200 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   87c2c:	9109a000 	add	x0, x0, #0x268
   87c30:	f9000260 	str	x0, [x19]
   87c34:	2a1403e2 	mov	w2, w20
   87c38:	a9025676 	stp	x22, x21, [x19, #32]
   87c3c:	91010260 	add	x0, x19, #0x40
   87c40:	52800201 	mov	w1, #0x10                  	// #16
   87c44:	b900327f 	str	wzr, [x19, #48]
   87c48:	b900367f 	str	wzr, [x19, #52]
   87c4c:	b9003a74 	str	w20, [x19, #56]
   87c50:	940011c4 	bl	8c360 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>
   87c54:	b900d274 	str	w20, [x19, #208]
   87c58:	b900e67f 	str	wzr, [x19, #228]
   87c5c:	9103c260 	add	x0, x19, #0xf0
   87c60:	b900ea7f 	str	wzr, [x19, #232]
   87c64:	aa1303e1 	mov	x1, x19
   87c68:	940010d6 	bl	8bfc0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
   87c6c:	3904227f 	strb	wzr, [x19, #264]
   87c70:	f9401260 	ldr	x0, [x19, #32]
   87c74:	3904267f 	strb	wzr, [x19, #265]
   87c78:	b4000260 	cbz	x0, 87cc4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xc4>
   87c7c:	f9401662 	ldr	x2, [x19, #40]
   87c80:	91014261 	add	x1, x19, #0x50
   87c84:	91034260 	add	x0, x19, #0xd0
   87c88:	b40002a2 	cbz	x2, 87cdc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xdc>
   87c8c:	d503201f 	nop
   87c90:	f800843f 	str	xzr, [x1], #8
   87c94:	eb00003f 	cmp	x1, x0
   87c98:	54ffffc1 	b.ne	87c90 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0x90>  // b.any
   87c9c:	52800001 	mov	w1, #0x0                   	// #0
   87ca0:	8b214260 	add	x0, x19, w1, uxtw
   87ca4:	11000421 	add	w1, w1, #0x1
   87ca8:	7100403f 	cmp	w1, #0x10
   87cac:	3903501f 	strb	wzr, [x0, #212]
   87cb0:	54ffff81 	b.ne	87ca0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xa0>  // b.any
   87cb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   87cb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87cbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87cc0:	d65f03c0 	ret
   87cc4:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   87cc8:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   87ccc:	91030021 	add	x1, x1, #0xc0
   87cd0:	9103c000 	add	x0, x0, #0xf0
   87cd4:	52800b42 	mov	w2, #0x5a                  	// #90
   87cd8:	9400688a 	bl	a1f00 <assertion_failed>
   87cdc:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   87ce0:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   87ce4:	91030021 	add	x1, x1, #0xc0
   87ce8:	91042000 	add	x0, x0, #0x108
   87cec:	52800b62 	mov	w2, #0x5b                  	// #91
   87cf0:	94006884 	bl	a1f00 <assertion_failed>
   87cf4:	d503201f 	nop
   87cf8:	d503201f 	nop
   87cfc:	d503201f 	nop

0000000000087d00 <CDWHCIDevice::DeviceConnected()>:
   87d00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87d04:	52808801 	mov	w1, #0x440                 	// #1088
   87d08:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87d0c:	910003fd 	mov	x29, sp
   87d10:	a90153f3 	stp	x19, x20, [sp, #16]
   87d14:	910083f3 	add	x19, sp, #0x20
   87d18:	aa1303e0 	mov	x0, x19
   87d1c:	94004d99 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   87d20:	aa1303e0 	mov	x0, x19
   87d24:	94004da3 	bl	9b3b0 <CDWHCIRegister::Read()>
   87d28:	2a0003f4 	mov	w20, w0
   87d2c:	aa1303e0 	mov	x0, x19
   87d30:	94004d9c 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   87d34:	12000280 	and	w0, w20, #0x1
   87d38:	a94153f3 	ldp	x19, x20, [sp, #16]
   87d3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87d40:	d65f03c0 	ret
   87d44:	d503201f 	nop
   87d48:	d503201f 	nop
   87d4c:	d503201f 	nop

0000000000087d50 <CDWHCIDevice::GetPortSpeed()>:
   87d50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87d54:	52808801 	mov	w1, #0x440                 	// #1088
   87d58:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87d5c:	910003fd 	mov	x29, sp
   87d60:	a90153f3 	stp	x19, x20, [sp, #16]
   87d64:	910083f4 	add	x20, sp, #0x20
   87d68:	aa1403e0 	mov	x0, x20
   87d6c:	94004d85 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   87d70:	52800053 	mov	w19, #0x2                   	// #2
   87d74:	aa1403e0 	mov	x0, x20
   87d78:	94004d8e 	bl	9b3b0 <CDWHCIRegister::Read()>
   87d7c:	2a0003e1 	mov	w1, w0
   87d80:	52800082 	mov	w2, #0x4                   	// #4
   87d84:	aa1403e0 	mov	x0, x20
   87d88:	d3514821 	ubfx	x1, x1, #17, #2
   87d8c:	71000c3f 	cmp	w1, #0x3
   87d90:	4b010273 	sub	w19, w19, w1
   87d94:	1a821273 	csel	w19, w19, w2, ne	// ne = any
   87d98:	94004d82 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   87d9c:	2a1303e0 	mov	w0, w19
   87da0:	a94153f3 	ldp	x19, x20, [sp, #16]
   87da4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87da8:	d65f03c0 	ret
   87dac:	d503201f 	nop

0000000000087db0 <CDWHCIDevice::OvercurrentDetected()>:
   87db0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87db4:	52808801 	mov	w1, #0x440                 	// #1088
   87db8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87dbc:	910003fd 	mov	x29, sp
   87dc0:	a90153f3 	stp	x19, x20, [sp, #16]
   87dc4:	910083f3 	add	x19, sp, #0x20
   87dc8:	aa1303e0 	mov	x0, x19
   87dcc:	94004d6d 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   87dd0:	aa1303e0 	mov	x0, x19
   87dd4:	94004d77 	bl	9b3b0 <CDWHCIRegister::Read()>
   87dd8:	2a0003f4 	mov	w20, w0
   87ddc:	aa1303e0 	mov	x0, x19
   87de0:	94004d70 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   87de4:	d3441280 	ubfx	x0, x20, #4, #1
   87de8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87dec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87df0:	d65f03c0 	ret
   87df4:	d503201f 	nop
   87df8:	d503201f 	nop
   87dfc:	d503201f 	nop

0000000000087e00 <CDWHCIDevice::DisableRootPort(bool)>:
   87e00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87e04:	910003fd 	mov	x29, sp
   87e08:	a90153f3 	stp	x19, x20, [sp, #16]
   87e0c:	aa0003f4 	mov	x20, x0
   87e10:	9100c3f3 	add	x19, sp, #0x30
   87e14:	f90013f5 	str	x21, [sp, #32]
   87e18:	12001c35 	and	w21, w1, #0xff
   87e1c:	3904229f 	strb	wzr, [x20, #264]
   87e20:	52808801 	mov	w1, #0x440                 	// #1088
   87e24:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87e28:	aa1303e0 	mov	x0, x19
   87e2c:	94004d55 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   87e30:	aa1303e0 	mov	x0, x19
   87e34:	94004d5f 	bl	9b3b0 <CDWHCIRegister::Read()>
   87e38:	aa1303e0 	mov	x0, x19
   87e3c:	12800081 	mov	w1, #0xfffffffb            	// #-5
   87e40:	94004d94 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   87e44:	37000175 	tbnz	w21, #0, 87e70 <CDWHCIDevice::DisableRootPort(bool)+0x70>
   87e48:	aa1303e0 	mov	x0, x19
   87e4c:	94004d61 	bl	9b3d0 <CDWHCIRegister::Write()>
   87e50:	91010280 	add	x0, x20, #0x40
   87e54:	94001163 	bl	8c3e0 <CDWHCITransactionQueue::Flush()>
   87e58:	aa1303e0 	mov	x0, x19
   87e5c:	94004d51 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   87e60:	a94153f3 	ldp	x19, x20, [sp, #16]
   87e64:	f94013f5 	ldr	x21, [sp, #32]
   87e68:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87e6c:	d65f03c0 	ret
   87e70:	aa1303e0 	mov	x0, x19
   87e74:	12820001 	mov	w1, #0xffffefff            	// #-4097
   87e78:	94004d86 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   87e7c:	17fffff3 	b	87e48 <CDWHCIDevice::DisableRootPort(bool)+0x48>

0000000000087e80 <CDWHCIDevice::PowerOn()>:
   87e80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87e84:	52800001 	mov	w1, #0x0                   	// #0
   87e88:	910003fd 	mov	x29, sp
   87e8c:	a90153f3 	stp	x19, x20, [sp, #16]
   87e90:	910083f4 	add	x20, sp, #0x20
   87e94:	aa1403e0 	mov	x0, x20
   87e98:	94006842 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   87e9c:	52800065 	mov	w5, #0x3                   	// #3
   87ea0:	9100a3e2 	add	x2, sp, #0x28
   87ea4:	aa1403e0 	mov	x0, x20
   87ea8:	52900021 	mov	w1, #0x8001                	// #32769
   87eac:	72a00041 	movk	w1, #0x2, lsl #16
   87eb0:	52800004 	mov	w4, #0x0                   	// #0
   87eb4:	52800283 	mov	w3, #0x14                  	// #20
   87eb8:	290697e5 	stp	w5, w5, [sp, #52]
   87ebc:	94006899 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   87ec0:	12001c13 	and	w19, w0, #0xff
   87ec4:	360000a0 	tbz	w0, #0, 87ed8 <CDWHCIDevice::PowerOn()+0x58>
   87ec8:	b9403bf3 	ldr	w19, [sp, #56]
   87ecc:	721f0260 	ands	w0, w19, #0x2
   87ed0:	12000273 	and	w19, w19, #0x1
   87ed4:	1a9f0273 	csel	w19, w19, wzr, eq	// eq = none
   87ed8:	aa1403e0 	mov	x0, x20
   87edc:	94006835 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   87ee0:	2a1303e0 	mov	w0, w19
   87ee4:	a94153f3 	ldp	x19, x20, [sp, #16]
   87ee8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87eec:	d65f03c0 	ret

0000000000087ef0 <CDWHCIDevice::Reset()>:
   87ef0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87ef4:	52800201 	mov	w1, #0x10                  	// #16
   87ef8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87efc:	910003fd 	mov	x29, sp
   87f00:	f90013f5 	str	x21, [sp, #32]
   87f04:	9100c3f5 	add	x21, sp, #0x30
   87f08:	52800002 	mov	w2, #0x0                   	// #0
   87f0c:	a90153f3 	stp	x19, x20, [sp, #16]
   87f10:	aa0003f4 	mov	x20, x0
   87f14:	52800c93 	mov	w19, #0x64                  	// #100
   87f18:	aa1503e0 	mov	x0, x21
   87f1c:	94004d1d 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   87f20:	aa1503e0 	mov	x0, x21
   87f24:	94004d23 	bl	9b3b0 <CDWHCIRegister::Read()>
   87f28:	36f80300 	tbz	w0, #31, 87f88 <CDWHCIDevice::Reset()+0x98>
   87f2c:	52800021 	mov	w1, #0x1                   	// #1
   87f30:	52800153 	mov	w19, #0xa                   	// #10
   87f34:	aa1503e0 	mov	x0, x21
   87f38:	94004d66 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   87f3c:	aa1503e0 	mov	x0, x21
   87f40:	94004d24 	bl	9b3d0 <CDWHCIRegister::Write()>
   87f44:	aa1503e0 	mov	x0, x21
   87f48:	94004d1a 	bl	9b3b0 <CDWHCIRegister::Read()>
   87f4c:	36000380 	tbz	w0, #0, 87fbc <CDWHCIDevice::Reset()+0xcc>
   87f50:	f9401680 	ldr	x0, [x20, #40]
   87f54:	b4000280 	cbz	x0, 87fa4 <CDWHCIDevice::Reset()+0xb4>
   87f58:	52800020 	mov	w0, #0x1                   	// #1
   87f5c:	94008a81 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   87f60:	71000673 	subs	w19, w19, #0x1
   87f64:	54ffff01 	b.ne	87f44 <CDWHCIDevice::Reset()+0x54>  // b.any
   87f68:	52800013 	mov	w19, #0x0                   	// #0
   87f6c:	aa1503e0 	mov	x0, x21
   87f70:	94004d0c 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   87f74:	f94013f5 	ldr	x21, [sp, #32]
   87f78:	2a1303e0 	mov	w0, w19
   87f7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87f80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87f84:	d65f03c0 	ret
   87f88:	f9401681 	ldr	x1, [x20, #40]
   87f8c:	b40000c1 	cbz	x1, 87fa4 <CDWHCIDevice::Reset()+0xb4>
   87f90:	52800020 	mov	w0, #0x1                   	// #1
   87f94:	94008a73 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   87f98:	71000673 	subs	w19, w19, #0x1
   87f9c:	54fffc21 	b.ne	87f20 <CDWHCIDevice::Reset()+0x30>  // b.any
   87fa0:	17fffff2 	b	87f68 <CDWHCIDevice::Reset()+0x78>
   87fa4:	90000161 	adrp	x1, b3000 <_etext+0x9c8>
   87fa8:	90000160 	adrp	x0, b3000 <_etext+0x9c8>
   87fac:	91030021 	add	x1, x1, #0xc0
   87fb0:	91042000 	add	x0, x0, #0x108
   87fb4:	5280d2e2 	mov	w2, #0x697                 	// #1687
   87fb8:	940067d2 	bl	a1f00 <assertion_failed>
   87fbc:	52800c80 	mov	w0, #0x64                  	// #100
   87fc0:	52800033 	mov	w19, #0x1                   	// #1
   87fc4:	94008a67 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   87fc8:	17ffffe9 	b	87f6c <CDWHCIDevice::Reset()+0x7c>
   87fcc:	d503201f 	nop

0000000000087fd0 <CDWHCIDevice::InitCore()>:
   87fd0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   87fd4:	52800181 	mov	w1, #0xc                   	// #12
   87fd8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   87fdc:	910003fd 	mov	x29, sp
   87fe0:	a90153f3 	stp	x19, x20, [sp, #16]
   87fe4:	910103f3 	add	x19, sp, #0x40
   87fe8:	aa0003f4 	mov	x20, x0
   87fec:	aa1303e0 	mov	x0, x19
   87ff0:	a9025bf5 	stp	x21, x22, [sp, #32]
   87ff4:	94004ce3 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   87ff8:	aa1303e0 	mov	x0, x19
   87ffc:	94004ced 	bl	9b3b0 <CDWHCIRegister::Read()>
   88000:	94006cf0 	bl	a33c0 <CKernelOptions::Get()>
   88004:	94006ca7 	bl	a32a0 <CKernelOptions::GetUSBFullSpeed() const>
   88008:	37001140 	tbnz	w0, #0, 88230 <CDWHCIDevice::InitCore()+0x260>
   8800c:	aa1303e0 	mov	x0, x19
   88010:	12a00201 	mov	w1, #0xffefffff            	// #-1048577
   88014:	94004d1f 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88018:	12a00801 	mov	w1, #0xffbfffff            	// #-4194305
   8801c:	aa1303e0 	mov	x0, x19
   88020:	94004d1c 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88024:	aa1303e0 	mov	x0, x19
   88028:	94004cea 	bl	9b3d0 <CDWHCIRegister::Write()>
   8802c:	aa1403e0 	mov	x0, x20
   88030:	97ffffb0 	bl	87ef0 <CDWHCIDevice::Reset()>
   88034:	2a0003f5 	mov	w21, w0
   88038:	36000e15 	tbz	w21, #0, 881f8 <CDWHCIDevice::InitCore()+0x228>
   8803c:	aa1303e0 	mov	x0, x19
   88040:	f9001bf7 	str	x23, [sp, #48]
   88044:	94004cdb 	bl	9b3b0 <CDWHCIRegister::Read()>
   88048:	910143f6 	add	x22, sp, #0x50
   8804c:	aa1303e0 	mov	x0, x19
   88050:	12800201 	mov	w1, #0xffffffef            	// #-17
   88054:	94004d0f 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88058:	12800101 	mov	w1, #0xfffffff7            	// #-9
   8805c:	aa1303e0 	mov	x0, x19
   88060:	94004d0c 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88064:	aa1303e0 	mov	x0, x19
   88068:	94004cda 	bl	9b3d0 <CDWHCIRegister::Write()>
   8806c:	52800901 	mov	w1, #0x48                  	// #72
   88070:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88074:	aa1603e0 	mov	x0, x22
   88078:	94004cc2 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8807c:	aa1603e0 	mov	x0, x22
   88080:	94004ccc 	bl	9b3b0 <CDWHCIRegister::Read()>
   88084:	aa1603e0 	mov	x0, x22
   88088:	94004ce2 	bl	9b410 <CDWHCIRegister::Get() const>
   8808c:	121d0400 	and	w0, w0, #0x18
   88090:	7100401f 	cmp	w0, #0x10
   88094:	54000e21 	b.ne	88258 <CDWHCIDevice::InitCore()+0x288>  // b.any
   88098:	aa1303e0 	mov	x0, x19
   8809c:	94004cc5 	bl	9b3b0 <CDWHCIRegister::Read()>
   880a0:	aa1603e0 	mov	x0, x22
   880a4:	94004cdb 	bl	9b410 <CDWHCIRegister::Get() const>
   880a8:	121a0400 	and	w0, w0, #0xc0
   880ac:	7102001f 	cmp	w0, #0x80
   880b0:	540008c0 	b.eq	881c8 <CDWHCIDevice::InitCore()+0x1f8>  // b.none
   880b4:	aa1303e0 	mov	x0, x19
   880b8:	12a00041 	mov	w1, #0xfffdffff            	// #-131073
   880bc:	94004cf5 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   880c0:	aa1303e0 	mov	x0, x19
   880c4:	12a00101 	mov	w1, #0xfff7ffff            	// #-524289
   880c8:	94004cf2 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   880cc:	aa1303e0 	mov	x0, x19
   880d0:	94004cc0 	bl	9b3d0 <CDWHCIRegister::Write()>
   880d4:	b9403280 	ldr	w0, [x20, #48]
   880d8:	35000cc0 	cbnz	w0, 88270 <CDWHCIDevice::InitCore()+0x2a0>
   880dc:	aa1603e0 	mov	x0, x22
   880e0:	94004ccc 	bl	9b410 <CDWHCIRegister::Get() const>
   880e4:	d34e4400 	ubfx	x0, x0, #14, #4
   880e8:	11000401 	add	w1, w0, #0x1
   880ec:	b9003281 	str	w1, [x20, #48]
   880f0:	51000c00 	sub	w0, w0, #0x3
   880f4:	7100301f 	cmp	w0, #0xc
   880f8:	54000a48 	b.hi	88240 <CDWHCIDevice::InitCore()+0x270>  // b.pmore
   880fc:	910183f4 	add	x20, sp, #0x60
   88100:	52800101 	mov	w1, #0x8                   	// #8
   88104:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88108:	aa1403e0 	mov	x0, x20
   8810c:	94004c9d 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88110:	9101c3f7 	add	x23, sp, #0x70
   88114:	aa1403e0 	mov	x0, x20
   88118:	94004ca6 	bl	9b3b0 <CDWHCIRegister::Read()>
   8811c:	aa1403e0 	mov	x0, x20
   88120:	52800401 	mov	w1, #0x20                  	// #32
   88124:	94004ceb 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88128:	aa1403e0 	mov	x0, x20
   8812c:	52800201 	mov	w1, #0x10                  	// #16
   88130:	94004ce8 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88134:	128000c1 	mov	w1, #0xfffffff9            	// #-7
   88138:	aa1403e0 	mov	x0, x20
   8813c:	94004cd5 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88140:	aa1403e0 	mov	x0, x20
   88144:	94004ca3 	bl	9b3d0 <CDWHCIRegister::Write()>
   88148:	aa1303e0 	mov	x0, x19
   8814c:	94004c99 	bl	9b3b0 <CDWHCIRegister::Read()>
   88150:	aa1303e0 	mov	x0, x19
   88154:	12804001 	mov	w1, #0xfffffdff            	// #-513
   88158:	94004cce 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8815c:	12802001 	mov	w1, #0xfffffeff            	// #-257
   88160:	aa1303e0 	mov	x0, x19
   88164:	94004ccb 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88168:	aa1303e0 	mov	x0, x19
   8816c:	94004c99 	bl	9b3d0 <CDWHCIRegister::Write()>
   88170:	52800281 	mov	w1, #0x14                  	// #20
   88174:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88178:	aa1703e0 	mov	x0, x23
   8817c:	94004c81 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88180:	aa1703e0 	mov	x0, x23
   88184:	94004d1f 	bl	9b600 <CDWHCIRegister::SetAll()>
   88188:	aa1703e0 	mov	x0, x23
   8818c:	94004c91 	bl	9b3d0 <CDWHCIRegister::Write()>
   88190:	aa1703e0 	mov	x0, x23
   88194:	94004c83 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88198:	aa1403e0 	mov	x0, x20
   8819c:	94004c81 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   881a0:	aa1603e0 	mov	x0, x22
   881a4:	94004c7f 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   881a8:	f9401bf7 	ldr	x23, [sp, #48]
   881ac:	aa1303e0 	mov	x0, x19
   881b0:	94004c7c 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   881b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   881b8:	2a1503e0 	mov	w0, w21
   881bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   881c0:	a8c87bfd 	ldp	x29, x30, [sp], #128
   881c4:	d65f03c0 	ret
   881c8:	aa1603e0 	mov	x0, x22
   881cc:	94004c91 	bl	9b410 <CDWHCIRegister::Get() const>
   881d0:	12180400 	and	w0, w0, #0x300
   881d4:	7104001f 	cmp	w0, #0x100
   881d8:	54fff6e1 	b.ne	880b4 <CDWHCIDevice::InitCore()+0xe4>  // b.any
   881dc:	aa1303e0 	mov	x0, x19
   881e0:	52a00041 	mov	w1, #0x20000               	// #131072
   881e4:	94004cbb 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   881e8:	aa1303e0 	mov	x0, x19
   881ec:	52a00101 	mov	w1, #0x80000               	// #524288
   881f0:	94004cb8 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   881f4:	17ffffb6 	b	880cc <CDWHCIDevice::InitCore()+0xfc>
   881f8:	94006e7e 	bl	a3bf0 <CLogger::Get()>
   881fc:	f0000143 	adrp	x3, b3000 <_etext+0x9c8>
   88200:	f0000161 	adrp	x1, b7000 <_etext+0x49c8>
   88204:	91046063 	add	x3, x3, #0x118
   88208:	9133e021 	add	x1, x1, #0xcf8
   8820c:	52800022 	mov	w2, #0x1                   	// #1
   88210:	9400706c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   88214:	aa1303e0 	mov	x0, x19
   88218:	94004c62 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8821c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88220:	2a1503e0 	mov	w0, w21
   88224:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88228:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8822c:	d65f03c0 	ret
   88230:	aa1303e0 	mov	x0, x19
   88234:	52800801 	mov	w1, #0x40                  	// #64
   88238:	94004ca6 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8823c:	17ffff74 	b	8800c <CDWHCIDevice::InitCore()+0x3c>
   88240:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88244:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88248:	91030021 	add	x1, x1, #0xc0
   8824c:	9105e000 	add	x0, x0, #0x178
   88250:	52803762 	mov	w2, #0x1bb                 	// #443
   88254:	9400672b 	bl	a1f00 <assertion_failed>
   88258:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8825c:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88260:	91030021 	add	x1, x1, #0xc0
   88264:	9104a000 	add	x0, x0, #0x128
   88268:	52803522 	mov	w2, #0x1a9                 	// #425
   8826c:	94006725 	bl	a1f00 <assertion_failed>
   88270:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88274:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88278:	91030021 	add	x1, x1, #0xc0
   8827c:	91058000 	add	x0, x0, #0x160
   88280:	52803722 	mov	w2, #0x1b9                 	// #441
   88284:	9400671f 	bl	a1f00 <assertion_failed>
   88288:	d503201f 	nop
   8828c:	d503201f 	nop

0000000000088290 <CDWHCIDevice::EnableGlobalInterrupts()>:
   88290:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88294:	52800101 	mov	w1, #0x8                   	// #8
   88298:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8829c:	910003fd 	mov	x29, sp
   882a0:	f9000bf3 	str	x19, [sp, #16]
   882a4:	910083f3 	add	x19, sp, #0x20
   882a8:	aa1303e0 	mov	x0, x19
   882ac:	94004c35 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   882b0:	aa1303e0 	mov	x0, x19
   882b4:	94004c3f 	bl	9b3b0 <CDWHCIRegister::Read()>
   882b8:	52800021 	mov	w1, #0x1                   	// #1
   882bc:	aa1303e0 	mov	x0, x19
   882c0:	94004c84 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   882c4:	aa1303e0 	mov	x0, x19
   882c8:	94004c42 	bl	9b3d0 <CDWHCIRegister::Write()>
   882cc:	aa1303e0 	mov	x0, x19
   882d0:	94004c34 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   882d4:	f9400bf3 	ldr	x19, [sp, #16]
   882d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   882dc:	d65f03c0 	ret

00000000000882e0 <CDWHCIDevice::EnableCommonInterrupts()>:
   882e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   882e4:	52800281 	mov	w1, #0x14                  	// #20
   882e8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   882ec:	910003fd 	mov	x29, sp
   882f0:	f9000bf3 	str	x19, [sp, #16]
   882f4:	910083f3 	add	x19, sp, #0x20
   882f8:	aa1303e0 	mov	x0, x19
   882fc:	94004c21 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88300:	aa1303e0 	mov	x0, x19
   88304:	94004cbf 	bl	9b600 <CDWHCIRegister::SetAll()>
   88308:	aa1303e0 	mov	x0, x19
   8830c:	94004c31 	bl	9b3d0 <CDWHCIRegister::Write()>
   88310:	aa1303e0 	mov	x0, x19
   88314:	94004c23 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88318:	f9400bf3 	ldr	x19, [sp, #16]
   8831c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88320:	d65f03c0 	ret
   88324:	d503201f 	nop
   88328:	d503201f 	nop
   8832c:	d503201f 	nop

0000000000088330 <CDWHCIDevice::EnableHostInterrupts()>:
   88330:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88334:	52800002 	mov	w2, #0x0                   	// #0
   88338:	52800301 	mov	w1, #0x18                  	// #24
   8833c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88340:	910003fd 	mov	x29, sp
   88344:	a90153f3 	stp	x19, x20, [sp, #16]
   88348:	9100c3f3 	add	x19, sp, #0x30
   8834c:	910103f4 	add	x20, sp, #0x40
   88350:	f90013f5 	str	x21, [sp, #32]
   88354:	aa0003f5 	mov	x21, x0
   88358:	aa1303e0 	mov	x0, x19
   8835c:	94004c0d 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88360:	aa1303e0 	mov	x0, x19
   88364:	94004c1b 	bl	9b3d0 <CDWHCIRegister::Write()>
   88368:	52800281 	mov	w1, #0x14                  	// #20
   8836c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88370:	aa1403e0 	mov	x0, x20
   88374:	94004c03 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88378:	aa1403e0 	mov	x0, x20
   8837c:	94004ca1 	bl	9b600 <CDWHCIRegister::SetAll()>
   88380:	aa1403e0 	mov	x0, x20
   88384:	94004c13 	bl	9b3d0 <CDWHCIRegister::Write()>
   88388:	aa1403e0 	mov	x0, x20
   8838c:	94004c05 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88390:	aa1303e0 	mov	x0, x19
   88394:	94004c07 	bl	9b3b0 <CDWHCIRegister::Read()>
   88398:	52800101 	mov	w1, #0x8                   	// #8
   8839c:	72a04001 	movk	w1, #0x200, lsl #16
   883a0:	aa1303e0 	mov	x0, x19
   883a4:	94004c4b 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   883a8:	aa1503e0 	mov	x0, x21
   883ac:	94002f55 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   883b0:	37000120 	tbnz	w0, #0, 883d4 <CDWHCIDevice::EnableHostInterrupts()+0xa4>
   883b4:	aa1303e0 	mov	x0, x19
   883b8:	94004c06 	bl	9b3d0 <CDWHCIRegister::Write()>
   883bc:	aa1303e0 	mov	x0, x19
   883c0:	94004bf8 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   883c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   883c8:	f94013f5 	ldr	x21, [sp, #32]
   883cc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   883d0:	d65f03c0 	ret
   883d4:	52a42001 	mov	w1, #0x21000000            	// #553648128
   883d8:	aa1303e0 	mov	x0, x19
   883dc:	94004c3d 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   883e0:	aa1303e0 	mov	x0, x19
   883e4:	94004bfb 	bl	9b3d0 <CDWHCIRegister::Write()>
   883e8:	aa1303e0 	mov	x0, x19
   883ec:	94004bed 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   883f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   883f4:	f94013f5 	ldr	x21, [sp, #32]
   883f8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   883fc:	d65f03c0 	ret

0000000000088400 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
   88400:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88404:	910003fd 	mov	x29, sp
   88408:	a90153f3 	stp	x19, x20, [sp, #16]
   8840c:	aa0003f4 	mov	x20, x0
   88410:	9100c3f3 	add	x19, sp, #0x30
   88414:	aa1303e0 	mov	x0, x19
   88418:	f90013f5 	str	x21, [sp, #32]
   8841c:	2a0103f5 	mov	w21, w1
   88420:	52808301 	mov	w1, #0x418                 	// #1048
   88424:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88428:	94004bd6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8842c:	b940d280 	ldr	w0, [x20, #208]
   88430:	35000220 	cbnz	w0, 88474 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x74>
   88434:	aa1303e0 	mov	x0, x19
   88438:	94004bde 	bl	9b3b0 <CDWHCIRegister::Read()>
   8843c:	52800021 	mov	w1, #0x1                   	// #1
   88440:	aa1303e0 	mov	x0, x19
   88444:	1ad52021 	lsl	w1, w1, w21
   88448:	94004c22 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8844c:	aa1303e0 	mov	x0, x19
   88450:	94004be0 	bl	9b3d0 <CDWHCIRegister::Write()>
   88454:	b940d280 	ldr	w0, [x20, #208]
   88458:	35000120 	cbnz	w0, 8847c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x7c>
   8845c:	aa1303e0 	mov	x0, x19
   88460:	94004bd0 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88464:	a94153f3 	ldp	x19, x20, [sp, #16]
   88468:	f94013f5 	ldr	x21, [sp, #32]
   8846c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88470:	d65f03c0 	ret
   88474:	94009303 	bl	ad080 <EnterCritical>
   88478:	17ffffef 	b	88434 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x34>
   8847c:	94009331 	bl	ad140 <LeaveCritical>
   88480:	aa1303e0 	mov	x0, x19
   88484:	94004bc7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88488:	a94153f3 	ldp	x19, x20, [sp, #16]
   8848c:	f94013f5 	ldr	x21, [sp, #32]
   88490:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88494:	d65f03c0 	ret
   88498:	d503201f 	nop
   8849c:	d503201f 	nop

00000000000884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
   884a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   884a4:	910003fd 	mov	x29, sp
   884a8:	a90153f3 	stp	x19, x20, [sp, #16]
   884ac:	aa0003f4 	mov	x20, x0
   884b0:	9100c3f3 	add	x19, sp, #0x30
   884b4:	aa1303e0 	mov	x0, x19
   884b8:	f90013f5 	str	x21, [sp, #32]
   884bc:	2a0103f5 	mov	w21, w1
   884c0:	52808301 	mov	w1, #0x418                 	// #1048
   884c4:	72a7f301 	movk	w1, #0x3f98, lsl #16
   884c8:	94004bae 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   884cc:	b940d280 	ldr	w0, [x20, #208]
   884d0:	35000240 	cbnz	w0, 88518 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x78>
   884d4:	aa1303e0 	mov	x0, x19
   884d8:	94004bb6 	bl	9b3b0 <CDWHCIRegister::Read()>
   884dc:	52800022 	mov	w2, #0x1                   	// #1
   884e0:	aa1303e0 	mov	x0, x19
   884e4:	1ad52041 	lsl	w1, w2, w21
   884e8:	2a2103e1 	mvn	w1, w1
   884ec:	94004be9 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   884f0:	aa1303e0 	mov	x0, x19
   884f4:	94004bb7 	bl	9b3d0 <CDWHCIRegister::Write()>
   884f8:	b940d280 	ldr	w0, [x20, #208]
   884fc:	35000120 	cbnz	w0, 88520 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x80>
   88500:	aa1303e0 	mov	x0, x19
   88504:	94004ba7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88508:	a94153f3 	ldp	x19, x20, [sp, #16]
   8850c:	f94013f5 	ldr	x21, [sp, #32]
   88510:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88514:	d65f03c0 	ret
   88518:	940092da 	bl	ad080 <EnterCritical>
   8851c:	17ffffee 	b	884d4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x34>
   88520:	94009308 	bl	ad140 <LeaveCritical>
   88524:	aa1303e0 	mov	x0, x19
   88528:	94004b9e 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8852c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88530:	f94013f5 	ldr	x21, [sp, #32]
   88534:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88538:	d65f03c0 	ret
   8853c:	d503201f 	nop

0000000000088540 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
   88540:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88544:	52800002 	mov	w2, #0x0                   	// #0
   88548:	910003fd 	mov	x29, sp
   8854c:	a90153f3 	stp	x19, x20, [sp, #16]
   88550:	9100c3f4 	add	x20, sp, #0x30
   88554:	2a0103f3 	mov	w19, w1
   88558:	52800201 	mov	w1, #0x10                  	// #16
   8855c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88560:	f90013f5 	str	x21, [sp, #32]
   88564:	aa0003f5 	mov	x21, x0
   88568:	aa1403e0 	mov	x0, x20
   8856c:	94004b89 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88570:	aa1403e0 	mov	x0, x20
   88574:	52800401 	mov	w1, #0x20                  	// #32
   88578:	94004bd6 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8857c:	aa1403e0 	mov	x0, x20
   88580:	1280f801 	mov	w1, #0xfffff83f            	// #-1985
   88584:	94004bc3 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88588:	531a6661 	lsl	w1, w19, #6
   8858c:	52800153 	mov	w19, #0xa                   	// #10
   88590:	aa1403e0 	mov	x0, x20
   88594:	94004bcf 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88598:	aa1403e0 	mov	x0, x20
   8859c:	94004b8d 	bl	9b3d0 <CDWHCIRegister::Write()>
   885a0:	aa1403e0 	mov	x0, x20
   885a4:	94004b83 	bl	9b3b0 <CDWHCIRegister::Read()>
   885a8:	37280120 	tbnz	w0, #5, 885cc <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x8c>
   885ac:	52800020 	mov	w0, #0x1                   	// #1
   885b0:	94008904 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   885b4:	aa1403e0 	mov	x0, x20
   885b8:	94004b7a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   885bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   885c0:	f94013f5 	ldr	x21, [sp, #32]
   885c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   885c8:	d65f03c0 	ret
   885cc:	f94016a1 	ldr	x1, [x21, #40]
   885d0:	b4000161 	cbz	x1, 885fc <CDWHCIDevice::FlushTxFIFO(unsigned int)+0xbc>
   885d4:	52800020 	mov	w0, #0x1                   	// #1
   885d8:	940088e2 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   885dc:	71000673 	subs	w19, w19, #0x1
   885e0:	54fffe01 	b.ne	885a0 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x60>  // b.any
   885e4:	aa1403e0 	mov	x0, x20
   885e8:	94004b6e 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   885ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   885f0:	f94013f5 	ldr	x21, [sp, #32]
   885f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   885f8:	d65f03c0 	ret
   885fc:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88600:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88604:	91030021 	add	x1, x1, #0xc0
   88608:	91042000 	add	x0, x0, #0x108
   8860c:	5280d2e2 	mov	w2, #0x697                 	// #1687
   88610:	9400663c 	bl	a1f00 <assertion_failed>
   88614:	d503201f 	nop
   88618:	d503201f 	nop
   8861c:	d503201f 	nop

0000000000088620 <CDWHCIDevice::FlushRxFIFO()>:
   88620:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88624:	52800002 	mov	w2, #0x0                   	// #0
   88628:	52800201 	mov	w1, #0x10                  	// #16
   8862c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88630:	910003fd 	mov	x29, sp
   88634:	a90153f3 	stp	x19, x20, [sp, #16]
   88638:	9100c3f4 	add	x20, sp, #0x30
   8863c:	52800153 	mov	w19, #0xa                   	// #10
   88640:	f90013f5 	str	x21, [sp, #32]
   88644:	aa0003f5 	mov	x21, x0
   88648:	aa1403e0 	mov	x0, x20
   8864c:	94004b51 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88650:	52800201 	mov	w1, #0x10                  	// #16
   88654:	aa1403e0 	mov	x0, x20
   88658:	94004b9e 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8865c:	aa1403e0 	mov	x0, x20
   88660:	94004b5c 	bl	9b3d0 <CDWHCIRegister::Write()>
   88664:	aa1403e0 	mov	x0, x20
   88668:	94004b52 	bl	9b3b0 <CDWHCIRegister::Read()>
   8866c:	37200120 	tbnz	w0, #4, 88690 <CDWHCIDevice::FlushRxFIFO()+0x70>
   88670:	52800020 	mov	w0, #0x1                   	// #1
   88674:	940088d3 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   88678:	aa1403e0 	mov	x0, x20
   8867c:	94004b49 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88680:	a94153f3 	ldp	x19, x20, [sp, #16]
   88684:	f94013f5 	ldr	x21, [sp, #32]
   88688:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8868c:	d65f03c0 	ret
   88690:	f94016a1 	ldr	x1, [x21, #40]
   88694:	b4000161 	cbz	x1, 886c0 <CDWHCIDevice::FlushRxFIFO()+0xa0>
   88698:	52800020 	mov	w0, #0x1                   	// #1
   8869c:	940088b1 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   886a0:	71000673 	subs	w19, w19, #0x1
   886a4:	54fffe01 	b.ne	88664 <CDWHCIDevice::FlushRxFIFO()+0x44>  // b.any
   886a8:	aa1403e0 	mov	x0, x20
   886ac:	94004b3d 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   886b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   886b4:	f94013f5 	ldr	x21, [sp, #32]
   886b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   886bc:	d65f03c0 	ret
   886c0:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   886c4:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   886c8:	91030021 	add	x1, x1, #0xc0
   886cc:	91042000 	add	x0, x0, #0x108
   886d0:	5280d2e2 	mov	w2, #0x697                 	// #1687
   886d4:	9400660b 	bl	a1f00 <assertion_failed>
   886d8:	d503201f 	nop
   886dc:	d503201f 	nop

00000000000886e0 <CDWHCIDevice::InitHost()>:
   886e0:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   886e4:	52800002 	mov	w2, #0x0                   	// #0
   886e8:	5281c001 	mov	w1, #0xe00                 	// #3584
   886ec:	72a7f301 	movk	w1, #0x3f98, lsl #16
   886f0:	910003fd 	mov	x29, sp
   886f4:	a9046bf9 	stp	x25, x26, [sp, #64]
   886f8:	910183f9 	add	x25, sp, #0x60
   886fc:	a90153f3 	stp	x19, x20, [sp, #16]
   88700:	9101c3f3 	add	x19, sp, #0x70
   88704:	a9025bf5 	stp	x21, x22, [sp, #32]
   88708:	a90363f7 	stp	x23, x24, [sp, #48]
   8870c:	aa0003f7 	mov	x23, x0
   88710:	aa1903e0 	mov	x0, x25
   88714:	f9002bfb 	str	x27, [sp, #80]
   88718:	94004b1e 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   8871c:	aa1903e0 	mov	x0, x25
   88720:	94004b2c 	bl	9b3d0 <CDWHCIRegister::Write()>
   88724:	52808001 	mov	w1, #0x400                 	// #1024
   88728:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8872c:	aa1303e0 	mov	x0, x19
   88730:	94004b14 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88734:	aa1303e0 	mov	x0, x19
   88738:	94004b1e 	bl	9b3b0 <CDWHCIRegister::Read()>
   8873c:	910203f8 	add	x24, sp, #0x80
   88740:	aa1303e0 	mov	x0, x19
   88744:	12800061 	mov	w1, #0xfffffffc            	// #-4
   88748:	94004b52 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8874c:	aa1803e0 	mov	x0, x24
   88750:	52800901 	mov	w1, #0x48                  	// #72
   88754:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88758:	94004b0a 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8875c:	910243fb 	add	x27, sp, #0x90
   88760:	52800181 	mov	w1, #0xc                   	// #12
   88764:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88768:	aa1b03e0 	mov	x0, x27
   8876c:	94004b05 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88770:	aa1803e0 	mov	x0, x24
   88774:	94004b0f 	bl	9b3b0 <CDWHCIRegister::Read()>
   88778:	121a0400 	and	w0, w0, #0xc0
   8877c:	7102001f 	cmp	w0, #0x80
   88780:	54000ac0 	b.eq	888d8 <CDWHCIDevice::InitHost()+0x1f8>  // b.none
   88784:	aa1303e0 	mov	x0, x19
   88788:	52800001 	mov	w1, #0x0                   	// #0
   8878c:	94004b51 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88790:	aa1303e0 	mov	x0, x19
   88794:	94004b0f 	bl	9b3d0 <CDWHCIRegister::Write()>
   88798:	52808002 	mov	w2, #0x400                 	// #1024
   8879c:	910283fa 	add	x26, sp, #0xa0
   887a0:	52800481 	mov	w1, #0x24                  	// #36
   887a4:	72a7f301 	movk	w1, #0x3f98, lsl #16
   887a8:	aa1a03e0 	mov	x0, x26
   887ac:	94004af9 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   887b0:	aa1a03e0 	mov	x0, x26
   887b4:	94004b07 	bl	9b3d0 <CDWHCIRegister::Write()>
   887b8:	52800002 	mov	w2, #0x0                   	// #0
   887bc:	9102c3f5 	add	x21, sp, #0xb0
   887c0:	aa1503e0 	mov	x0, x21
   887c4:	52800501 	mov	w1, #0x28                  	// #40
   887c8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   887cc:	94004af1 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   887d0:	aa1503e0 	mov	x0, x21
   887d4:	52808001 	mov	w1, #0x400                 	// #1024
   887d8:	94004b3e 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   887dc:	910303f6 	add	x22, sp, #0xc0
   887e0:	52a08001 	mov	w1, #0x4000000             	// #67108864
   887e4:	aa1503e0 	mov	x0, x21
   887e8:	94004b3a 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   887ec:	910343f4 	add	x20, sp, #0xd0
   887f0:	aa1503e0 	mov	x0, x21
   887f4:	94004af7 	bl	9b3d0 <CDWHCIRegister::Write()>
   887f8:	52800002 	mov	w2, #0x0                   	// #0
   887fc:	aa1603e0 	mov	x0, x22
   88800:	52802001 	mov	w1, #0x100                 	// #256
   88804:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88808:	94004ae2 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   8880c:	aa1603e0 	mov	x0, x22
   88810:	52810001 	mov	w1, #0x800                 	// #2048
   88814:	94004b2f 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88818:	52a08001 	mov	w1, #0x4000000             	// #67108864
   8881c:	aa1603e0 	mov	x0, x22
   88820:	94004b2c 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88824:	aa1603e0 	mov	x0, x22
   88828:	94004aea 	bl	9b3d0 <CDWHCIRegister::Write()>
   8882c:	52800201 	mov	w1, #0x10                  	// #16
   88830:	aa1703e0 	mov	x0, x23
   88834:	97ffff43 	bl	88540 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
   88838:	aa1703e0 	mov	x0, x23
   8883c:	97ffff79 	bl	88620 <CDWHCIDevice::FlushRxFIFO()>
   88840:	52808801 	mov	w1, #0x440                 	// #1088
   88844:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88848:	aa1403e0 	mov	x0, x20
   8884c:	94004acd 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88850:	aa1403e0 	mov	x0, x20
   88854:	94004ad7 	bl	9b3b0 <CDWHCIRegister::Read()>
   88858:	128005c1 	mov	w1, #0xffffffd1            	// #-47
   8885c:	aa1403e0 	mov	x0, x20
   88860:	94004b0c 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88864:	aa1403e0 	mov	x0, x20
   88868:	94004aea 	bl	9b410 <CDWHCIRegister::Get() const>
   8886c:	366004e0 	tbz	w0, #12, 88908 <CDWHCIDevice::InitHost()+0x228>
   88870:	aa1703e0 	mov	x0, x23
   88874:	97fffeaf 	bl	88330 <CDWHCIDevice::EnableHostInterrupts()>
   88878:	aa1403e0 	mov	x0, x20
   8887c:	94004ac9 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88880:	aa1603e0 	mov	x0, x22
   88884:	94004ac7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88888:	aa1503e0 	mov	x0, x21
   8888c:	94004ac5 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88890:	aa1a03e0 	mov	x0, x26
   88894:	94004ac3 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88898:	aa1b03e0 	mov	x0, x27
   8889c:	94004ac1 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   888a0:	aa1803e0 	mov	x0, x24
   888a4:	94004abf 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   888a8:	aa1303e0 	mov	x0, x19
   888ac:	94004abd 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   888b0:	aa1903e0 	mov	x0, x25
   888b4:	94004abb 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   888b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   888bc:	52800020 	mov	w0, #0x1                   	// #1
   888c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   888c4:	a94363f7 	ldp	x23, x24, [sp, #48]
   888c8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   888cc:	f9402bfb 	ldr	x27, [sp, #80]
   888d0:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   888d4:	d65f03c0 	ret
   888d8:	aa1803e0 	mov	x0, x24
   888dc:	94004acd 	bl	9b410 <CDWHCIRegister::Get() const>
   888e0:	12180400 	and	w0, w0, #0x300
   888e4:	7104001f 	cmp	w0, #0x100
   888e8:	54fff4e1 	b.ne	88784 <CDWHCIDevice::InitHost()+0xa4>  // b.any
   888ec:	aa1b03e0 	mov	x0, x27
   888f0:	94004ab0 	bl	9b3b0 <CDWHCIRegister::Read()>
   888f4:	368ff480 	tbz	w0, #17, 88784 <CDWHCIDevice::InitHost()+0xa4>
   888f8:	aa1303e0 	mov	x0, x19
   888fc:	52800021 	mov	w1, #0x1                   	// #1
   88900:	94004af4 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88904:	17ffffa3 	b	88790 <CDWHCIDevice::InitHost()+0xb0>
   88908:	52820001 	mov	w1, #0x1000                	// #4096
   8890c:	aa1403e0 	mov	x0, x20
   88910:	94004af0 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88914:	aa1403e0 	mov	x0, x20
   88918:	94004aae 	bl	9b3d0 <CDWHCIRegister::Write()>
   8891c:	17ffffd5 	b	88870 <CDWHCIDevice::InitHost()+0x190>

0000000000088920 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>:
   88920:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88924:	910003fd 	mov	x29, sp
   88928:	a90153f3 	stp	x19, x20, [sp, #16]
   8892c:	a9025bf5 	stp	x21, x22, [sp, #32]
   88930:	b4000461 	cbz	x1, 889bc <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x9c>
   88934:	aa0003f5 	mov	x21, x0
   88938:	aa0103f3 	mov	x19, x1
   8893c:	aa0103e0 	mov	x0, x1
   88940:	9400138c 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   88944:	b4000180 	cbz	x0, 88974 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x54>
   88948:	f9400001 	ldr	x1, [x0]
   8894c:	f9401421 	ldr	x1, [x1, #40]
   88950:	d63f0020 	blr	x1
   88954:	12003c14 	and	w20, w0, #0xffff
   88958:	2a1403e2 	mov	w2, w20
   8895c:	aa1303e1 	mov	x1, x19
   88960:	a94153f3 	ldp	x19, x20, [sp, #16]
   88964:	910102a0 	add	x0, x21, #0x40
   88968:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8896c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88970:	14000f74 	b	8c740 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
   88974:	9100c3f6 	add	x22, sp, #0x30
   88978:	52808101 	mov	w1, #0x408                 	// #1032
   8897c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88980:	aa1603e0 	mov	x0, x22
   88984:	94004a7f 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88988:	aa1603e0 	mov	x0, x22
   8898c:	94004a89 	bl	9b3b0 <CDWHCIRegister::Read()>
   88990:	11000414 	add	w20, w0, #0x1
   88994:	aa1603e0 	mov	x0, x22
   88998:	12003694 	and	w20, w20, #0x3fff
   8899c:	94004a81 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   889a0:	2a1403e2 	mov	w2, w20
   889a4:	aa1303e1 	mov	x1, x19
   889a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   889ac:	910102a0 	add	x0, x21, #0x40
   889b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   889b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   889b8:	14000f62 	b	8c740 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
   889bc:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   889c0:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   889c4:	91030021 	add	x1, x1, #0xc0
   889c8:	91288000 	add	x0, x0, #0xa20
   889cc:	52806502 	mov	w2, #0x328                 	// #808
   889d0:	9400654c 	bl	a1f00 <assertion_failed>
   889d4:	d503201f 	nop
   889d8:	d503201f 	nop
   889dc:	d503201f 	nop

00000000000889e0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
   889e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   889e4:	910003fd 	mov	x29, sp
   889e8:	a90153f3 	stp	x19, x20, [sp, #16]
   889ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   889f0:	a90363f7 	stp	x23, x24, [sp, #48]
   889f4:	b4000541 	cbz	x1, 88a9c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xbc>
   889f8:	aa0103f4 	mov	x20, x1
   889fc:	2a0403f5 	mov	w21, w4
   88a00:	12001c57 	and	w23, w2, #0xff
   88a04:	12001c78 	and	w24, w3, #0xff
   88a08:	aa0003f6 	mov	x22, x0
   88a0c:	d2802000 	mov	x0, #0x100                 	// #256
   88a10:	9400135c 	bl	8d780 <CDWHCITransferStageData::operator new(unsigned long)>
   88a14:	aa0003f3 	mov	x19, x0
   88a18:	2a1503e5 	mov	w5, w21
   88a1c:	2a1803e4 	mov	w4, w24
   88a20:	2a1703e3 	mov	w3, w23
   88a24:	aa1403e2 	mov	x2, x20
   88a28:	52800201 	mov	w1, #0x10                  	// #16
   88a2c:	9400100d 	bl	8ca60 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
   88a30:	aa1303e0 	mov	x0, x19
   88a34:	94001283 	bl	8d440 <CDWHCITransferStageData::IsSplit() const>
   88a38:	360002a0 	tbz	w0, #0, 88a8c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xac>
   88a3c:	aa1303e0 	mov	x0, x19
   88a40:	52800021 	mov	w1, #0x1                   	// #1
   88a44:	940011db 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   88a48:	52800001 	mov	w1, #0x0                   	// #0
   88a4c:	aa1303e0 	mov	x0, x19
   88a50:	940011c8 	bl	8d170 <CDWHCITransferStageData::SetSplitComplete(bool)>
   88a54:	aa1303e0 	mov	x0, x19
   88a58:	94001346 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   88a5c:	f9400001 	ldr	x1, [x0]
   88a60:	f9400821 	ldr	x1, [x1, #16]
   88a64:	d63f0020 	blr	x1
   88a68:	aa1303e1 	mov	x1, x19
   88a6c:	aa1603e0 	mov	x0, x22
   88a70:	97ffffac 	bl	88920 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
   88a74:	a94153f3 	ldp	x19, x20, [sp, #16]
   88a78:	52800020 	mov	w0, #0x1                   	// #1
   88a7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88a80:	a94363f7 	ldp	x23, x24, [sp, #48]
   88a84:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88a88:	d65f03c0 	ret
   88a8c:	aa1303e0 	mov	x0, x19
   88a90:	52800001 	mov	w1, #0x0                   	// #0
   88a94:	940011c7 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   88a98:	17fffff4 	b	88a68 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x88>
   88a9c:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88aa0:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88aa4:	91030021 	add	x1, x1, #0xc0
   88aa8:	9106c000 	add	x0, x0, #0x1b0
   88aac:	52805ee2 	mov	w2, #0x2f7                 	// #759
   88ab0:	94006514 	bl	a1f00 <assertion_failed>
   88ab4:	d503201f 	nop
   88ab8:	d503201f 	nop
   88abc:	d503201f 	nop

0000000000088ac0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
   88ac0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88ac4:	910003fd 	mov	x29, sp
   88ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   88acc:	aa0003f4 	mov	x20, x0
   88ad0:	39442400 	ldrb	w0, [x0, #265]
   88ad4:	37000360 	tbnz	w0, #0, 88b40 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x80>
   88ad8:	f90013f5 	str	x21, [sp, #32]
   88adc:	aa0103f3 	mov	x19, x1
   88ae0:	b4000441 	cbz	x1, 88b68 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
   88ae4:	2a0203f5 	mov	w21, w2
   88ae8:	aa0103e0 	mov	x0, x1
   88aec:	940038c5 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   88af0:	94001d50 	bl	90030 <CUSBEndpoint::GetType() const>
   88af4:	34000460 	cbz	w0, 88b80 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xc0>
   88af8:	aa1303e0 	mov	x0, x19
   88afc:	9400391d 	bl	96f70 <CUSBRequest::GetBufLen() const>
   88b00:	34000280 	cbz	w0, 88b50 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
   88b04:	52800001 	mov	w1, #0x0                   	// #0
   88b08:	aa1303e0 	mov	x0, x19
   88b0c:	940038c9 	bl	96e30 <CUSBRequest::SetStatus(int)>
   88b10:	aa1303e0 	mov	x0, x19
   88b14:	940038bb 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   88b18:	94001d4a 	bl	90040 <CUSBEndpoint::IsDirectionIn() const>
   88b1c:	2a0003e2 	mov	w2, w0
   88b20:	2a1503e4 	mov	w4, w21
   88b24:	aa1303e1 	mov	x1, x19
   88b28:	f94013f5 	ldr	x21, [sp, #32]
   88b2c:	aa1403e0 	mov	x0, x20
   88b30:	a94153f3 	ldp	x19, x20, [sp, #16]
   88b34:	52800003 	mov	w3, #0x0                   	// #0
   88b38:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88b3c:	17ffffa9 	b	889e0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
   88b40:	a94153f3 	ldp	x19, x20, [sp, #16]
   88b44:	52800000 	mov	w0, #0x0                   	// #0
   88b48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88b4c:	d65f03c0 	ret
   88b50:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88b54:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88b58:	91030021 	add	x1, x1, #0xc0
   88b5c:	9107e000 	add	x0, x0, #0x1f8
   88b60:	52802722 	mov	w2, #0x139                 	// #313
   88b64:	940064e7 	bl	a1f00 <assertion_failed>
   88b68:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88b6c:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88b70:	91030021 	add	x1, x1, #0xc0
   88b74:	9106c000 	add	x0, x0, #0x1b0
   88b78:	528026e2 	mov	w2, #0x137                 	// #311
   88b7c:	940064e1 	bl	a1f00 <assertion_failed>
   88b80:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88b84:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88b88:	91030021 	add	x1, x1, #0xc0
   88b8c:	91070000 	add	x0, x0, #0x1c0
   88b90:	52802702 	mov	w2, #0x138                 	// #312
   88b94:	940064db 	bl	a1f00 <assertion_failed>
   88b98:	d503201f 	nop
   88b9c:	d503201f 	nop

0000000000088ba0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>:
   88ba0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   88ba4:	910003fd 	mov	x29, sp
   88ba8:	a90153f3 	stp	x19, x20, [sp, #16]
   88bac:	a9025bf5 	stp	x21, x22, [sp, #32]
   88bb0:	f9001bf7 	str	x23, [sp, #48]
   88bb4:	b4000941 	cbz	x1, 88cdc <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x13c>
   88bb8:	aa0003f5 	mov	x21, x0
   88bbc:	aa0103f4 	mov	x20, x1
   88bc0:	aa0103e0 	mov	x0, x1
   88bc4:	940012d3 	bl	8d710 <CDWHCITransferStageData::GetURB() const>
   88bc8:	b4000960 	cbz	x0, 88cf4 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x154>
   88bcc:	9400388d 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   88bd0:	910103f6 	add	x22, sp, #0x40
   88bd4:	94001d27 	bl	90070 <CUSBEndpoint::GetInterval() const>
   88bd8:	12003c13 	and	w19, w0, #0xffff
   88bdc:	52808801 	mov	w1, #0x440                 	// #1088
   88be0:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88be4:	aa1603e0 	mov	x0, x22
   88be8:	940049e6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88bec:	aa1603e0 	mov	x0, x22
   88bf0:	940049f0 	bl	9b3b0 <CDWHCIRegister::Read()>
   88bf4:	531d3261 	ubfiz	w1, w19, #3, #13
   88bf8:	720f041f 	tst	w0, #0x60000
   88bfc:	1a811273 	csel	w19, w19, w1, ne	// ne = any
   88c00:	5283ffc0 	mov	w0, #0x1ffe                	// #8190
   88c04:	6b00027f 	cmp	w19, w0
   88c08:	54000828 	b.hi	88d0c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x16c>  // b.pmore
   88c0c:	aa1403e0 	mov	x0, x20
   88c10:	9400120c 	bl	8d440 <CDWHCITransferStageData::IsSplit() const>
   88c14:	36000320 	tbz	w0, #0, 88c78 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0xd8>
   88c18:	aa1403e0 	mov	x0, x20
   88c1c:	940012d5 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   88c20:	aa0003f7 	mov	x23, x0
   88c24:	b4000800 	cbz	x0, 88d24 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x184>
   88c28:	f9400002 	ldr	x2, [x0]
   88c2c:	2a1303e1 	mov	w1, w19
   88c30:	f9401842 	ldr	x2, [x2, #48]
   88c34:	d63f0040 	blr	x2
   88c38:	f94002e1 	ldr	x1, [x23]
   88c3c:	aa1703e0 	mov	x0, x23
   88c40:	f9401421 	ldr	x1, [x1, #40]
   88c44:	d63f0020 	blr	x1
   88c48:	12003c13 	and	w19, w0, #0xffff
   88c4c:	52800021 	mov	w1, #0x1                   	// #1
   88c50:	aa1403e0 	mov	x0, x20
   88c54:	94001157 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   88c58:	aa1403e0 	mov	x0, x20
   88c5c:	52800001 	mov	w1, #0x0                   	// #0
   88c60:	94001144 	bl	8d170 <CDWHCITransferStageData::SetSplitComplete(bool)>
   88c64:	f94002e1 	ldr	x1, [x23]
   88c68:	aa1703e0 	mov	x0, x23
   88c6c:	f9400821 	ldr	x1, [x1, #16]
   88c70:	d63f0020 	blr	x1
   88c74:	1400000f 	b	88cb0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x110>
   88c78:	910143f7 	add	x23, sp, #0x50
   88c7c:	52808101 	mov	w1, #0x408                 	// #1032
   88c80:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88c84:	aa1703e0 	mov	x0, x23
   88c88:	940049be 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88c8c:	aa1703e0 	mov	x0, x23
   88c90:	940049c8 	bl	9b3b0 <CDWHCIRegister::Read()>
   88c94:	52800001 	mov	w1, #0x0                   	// #0
   88c98:	0b000273 	add	w19, w19, w0
   88c9c:	aa1403e0 	mov	x0, x20
   88ca0:	94001144 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   88ca4:	12003673 	and	w19, w19, #0x3fff
   88ca8:	aa1703e0 	mov	x0, x23
   88cac:	940049bd 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88cb0:	2a1303e2 	mov	w2, w19
   88cb4:	aa1403e1 	mov	x1, x20
   88cb8:	910102a0 	add	x0, x21, #0x40
   88cbc:	94000ea1 	bl	8c740 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
   88cc0:	aa1603e0 	mov	x0, x22
   88cc4:	940049b7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   88cc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   88ccc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88cd0:	f9401bf7 	ldr	x23, [sp, #48]
   88cd4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   88cd8:	d65f03c0 	ret
   88cdc:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88ce0:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88ce4:	91030021 	add	x1, x1, #0xc0
   88ce8:	91288000 	add	x0, x0, #0xa20
   88cec:	52806762 	mov	w2, #0x33b                 	// #827
   88cf0:	94006484 	bl	a1f00 <assertion_failed>
   88cf4:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88cf8:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88cfc:	91030021 	add	x1, x1, #0xc0
   88d00:	9106c000 	add	x0, x0, #0x1b0
   88d04:	528067a2 	mov	w2, #0x33d                 	// #829
   88d08:	9400647e 	bl	a1f00 <assertion_failed>
   88d0c:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88d10:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88d14:	91030021 	add	x1, x1, #0xc0
   88d18:	91084000 	add	x0, x0, #0x210
   88d1c:	528068a2 	mov	w2, #0x345                 	// #837
   88d20:	94006478 	bl	a1f00 <assertion_failed>
   88d24:	f0000141 	adrp	x1, b3000 <_etext+0x9c8>
   88d28:	f0000140 	adrp	x0, b3000 <_etext+0x9c8>
   88d2c:	91030021 	add	x1, x1, #0xc0
   88d30:	91090000 	add	x0, x0, #0x240
   88d34:	52806982 	mov	w2, #0x34c                 	// #844
   88d38:	94006472 	bl	a1f00 <assertion_failed>
   88d3c:	d503201f 	nop

0000000000088d40 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
   88d40:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   88d44:	910003fd 	mov	x29, sp
   88d48:	a90153f3 	stp	x19, x20, [sp, #16]
   88d4c:	a9025bf5 	stp	x21, x22, [sp, #32]
   88d50:	a90363f7 	stp	x23, x24, [sp, #48]
   88d54:	a9046bf9 	stp	x25, x26, [sp, #64]
   88d58:	b4001ea1 	cbz	x1, 8912c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ec>
   88d5c:	aa0003f4 	mov	x20, x0
   88d60:	aa0103f3 	mov	x19, x1
   88d64:	aa0103e0 	mov	x0, x1
   88d68:	94001122 	bl	8d1f0 <CDWHCITransferStageData::GetChannelNumber() const>
   88d6c:	2a0003f5 	mov	w21, w0
   88d70:	b9403280 	ldr	w0, [x20, #48]
   88d74:	6b15001f 	cmp	w0, w21
   88d78:	54001e69 	b.ls	89144 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x404>  // b.plast
   88d7c:	531b6ab5 	lsl	w21, w21, #5
   88d80:	aa1303e0 	mov	x0, x19
   88d84:	52800021 	mov	w1, #0x1                   	// #1
   88d88:	94001112 	bl	8d1d0 <CDWHCITransferStageData::SetSubState(unsigned int)>
   88d8c:	5280a114 	mov	w20, #0x508                 	// #1288
   88d90:	72a7f314 	movk	w20, #0x3f98, lsl #16
   88d94:	0b1402a1 	add	w1, w21, w20
   88d98:	910143f9 	add	x25, sp, #0x50
   88d9c:	aa1903e0 	mov	x0, x25
   88da0:	94004978 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88da4:	aa1903e0 	mov	x0, x25
   88da8:	11002294 	add	w20, w20, #0x8
   88dac:	94004a15 	bl	9b600 <CDWHCIRegister::SetAll()>
   88db0:	910183f6 	add	x22, sp, #0x60
   88db4:	aa1903e0 	mov	x0, x25
   88db8:	94004986 	bl	9b3d0 <CDWHCIRegister::Write()>
   88dbc:	0b1402a1 	add	w1, w21, w20
   88dc0:	52800002 	mov	w2, #0x0                   	// #0
   88dc4:	aa1603e0 	mov	x0, x22
   88dc8:	94004972 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88dcc:	aa1303e0 	mov	x0, x19
   88dd0:	9101c3fa 	add	x26, sp, #0x70
   88dd4:	94001193 	bl	8d420 <CDWHCITransferStageData::GetBytesToTransfer() const>
   88dd8:	12004801 	and	w1, w0, #0x7ffff
   88ddc:	aa1603e0 	mov	x0, x22
   88de0:	940049bc 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88de4:	aa1303e0 	mov	x0, x19
   88de8:	910203f8 	add	x24, sp, #0x80
   88dec:	94001191 	bl	8d430 <CDWHCITransferStageData::GetPacketsToTransfer() const>
   88df0:	2a0003e1 	mov	w1, w0
   88df4:	aa1603e0 	mov	x0, x22
   88df8:	530d2421 	ubfiz	w1, w1, #19, #10
   88dfc:	940049b5 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88e00:	aa1303e0 	mov	x0, x19
   88e04:	94001157 	bl	8d360 <CDWHCITransferStageData::GetPID() const>
   88e08:	2a0003e1 	mov	w1, w0
   88e0c:	aa1603e0 	mov	x0, x22
   88e10:	53030821 	lsl	w1, w1, #29
   88e14:	940049af 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88e18:	aa1603e0 	mov	x0, x22
   88e1c:	9400496d 	bl	9b3d0 <CDWHCIRegister::Write()>
   88e20:	aa1303e0 	mov	x0, x19
   88e24:	94001173 	bl	8d3f0 <CDWHCITransferStageData::GetDMAAddress() const>
   88e28:	11001281 	add	w1, w20, #0x4
   88e2c:	32020402 	orr	w2, w0, #0xc0000000
   88e30:	0b0102a1 	add	w1, w21, w1
   88e34:	aa1a03e0 	mov	x0, x26
   88e38:	94004956 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88e3c:	aa1a03e0 	mov	x0, x26
   88e40:	94004964 	bl	9b3d0 <CDWHCIRegister::Write()>
   88e44:	aa1303e0 	mov	x0, x19
   88e48:	9400116a 	bl	8d3f0 <CDWHCITransferStageData::GetDMAAddress() const>
   88e4c:	2a0003f7 	mov	w23, w0
   88e50:	aa1303e0 	mov	x0, x19
   88e54:	94001173 	bl	8d420 <CDWHCITransferStageData::GetBytesToTransfer() const>
   88e58:	2a0003e1 	mov	w1, w0
   88e5c:	2a1703e0 	mov	w0, w23
   88e60:	940091a8 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   88e64:	51003281 	sub	w1, w20, #0xc
   88e68:	52800002 	mov	w2, #0x0                   	// #0
   88e6c:	0b0102a1 	add	w1, w21, w1
   88e70:	aa1803e0 	mov	x0, x24
   88e74:	94004947 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   88e78:	aa1303e0 	mov	x0, x19
   88e7c:	94001171 	bl	8d440 <CDWHCITransferStageData::IsSplit() const>
   88e80:	37001020 	tbnz	w0, #0, 89084 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x344>
   88e84:	aa1803e0 	mov	x0, x24
   88e88:	94004952 	bl	9b3d0 <CDWHCIRegister::Write()>
   88e8c:	5280a001 	mov	w1, #0x500                 	// #1280
   88e90:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88e94:	0b0102a1 	add	w1, w21, w1
   88e98:	910243f4 	add	x20, sp, #0x90
   88e9c:	aa1403e0 	mov	x0, x20
   88ea0:	94004938 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88ea4:	aa1403e0 	mov	x0, x20
   88ea8:	94004942 	bl	9b3b0 <CDWHCIRegister::Read()>
   88eac:	1280ffe1 	mov	w1, #0xfffff800            	// #-2048
   88eb0:	aa1403e0 	mov	x0, x20
   88eb4:	94004977 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88eb8:	aa1303e0 	mov	x0, x19
   88ebc:	94001121 	bl	8d340 <CDWHCITransferStageData::GetMaxPacketSize() const>
   88ec0:	2a0003e1 	mov	w1, w0
   88ec4:	aa1403e0 	mov	x0, x20
   88ec8:	12002821 	and	w1, w1, #0x7ff
   88ecc:	94004981 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88ed0:	aa1403e0 	mov	x0, x20
   88ed4:	12a00601 	mov	w1, #0xffcfffff            	// #-3145729
   88ed8:	9400496e 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88edc:	52a00201 	mov	w1, #0x100000              	// #1048576
   88ee0:	aa1403e0 	mov	x0, x20
   88ee4:	9400497b 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88ee8:	aa1303e0 	mov	x0, x19
   88eec:	94001139 	bl	8d3d0 <CDWHCITransferStageData::IsDirectionIn() const>
   88ef0:	37000ac0 	tbnz	w0, #0, 89048 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x308>
   88ef4:	12900001 	mov	w1, #0xffff7fff            	// #-32769
   88ef8:	aa1403e0 	mov	x0, x20
   88efc:	94004965 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88f00:	aa1303e0 	mov	x0, x19
   88f04:	94001113 	bl	8d350 <CDWHCITransferStageData::GetSpeed() const>
   88f08:	35000ac0 	cbnz	w0, 89060 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
   88f0c:	aa1403e0 	mov	x0, x20
   88f10:	52a00041 	mov	w1, #0x20000               	// #131072
   88f14:	9400496f 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88f18:	12a3f801 	mov	w1, #0xe03fffff            	// #-532676609
   88f1c:	aa1403e0 	mov	x0, x20
   88f20:	9400495c 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88f24:	aa1303e0 	mov	x0, x19
   88f28:	940010d6 	bl	8d280 <CDWHCITransferStageData::GetDeviceAddress() const>
   88f2c:	2a0003e1 	mov	w1, w0
   88f30:	aa1403e0 	mov	x0, x20
   88f34:	530a1c21 	ubfiz	w1, w1, #22, #8
   88f38:	94004966 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88f3c:	12a00181 	mov	w1, #0xfff3ffff            	// #-786433
   88f40:	aa1403e0 	mov	x0, x20
   88f44:	94004953 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88f48:	aa1303e0 	mov	x0, x19
   88f4c:	940010d9 	bl	8d2b0 <CDWHCITransferStageData::GetEndpointType() const>
   88f50:	2a0003e1 	mov	w1, w0
   88f54:	aa1403e0 	mov	x0, x20
   88f58:	530e1c21 	ubfiz	w1, w1, #18, #8
   88f5c:	9400495d 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88f60:	128f0001 	mov	w1, #0xffff87ff            	// #-30721
   88f64:	aa1403e0 	mov	x0, x20
   88f68:	9400494a 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88f6c:	aa1303e0 	mov	x0, x19
   88f70:	940010e8 	bl	8d310 <CDWHCITransferStageData::GetEndpointNumber() const>
   88f74:	2a0003e1 	mov	w1, w0
   88f78:	aa1403e0 	mov	x0, x20
   88f7c:	53151c21 	ubfiz	w1, w1, #11, #8
   88f80:	94004954 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88f84:	aa1303e0 	mov	x0, x19
   88f88:	940011fa 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   88f8c:	b4000b40 	cbz	x0, 890f4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
   88f90:	f9400001 	ldr	x1, [x0]
   88f94:	f9401c21 	ldr	x1, [x1, #56]
   88f98:	d63f0020 	blr	x1
   88f9c:	360006a0 	tbz	w0, #0, 89070 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x330>
   88fa0:	910283f7 	add	x23, sp, #0xa0
   88fa4:	aa1403e0 	mov	x0, x20
   88fa8:	52a40001 	mov	w1, #0x20000000            	// #536870912
   88fac:	94004949 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88fb0:	5280a181 	mov	w1, #0x50c                 	// #1292
   88fb4:	72a7f301 	movk	w1, #0x3f98, lsl #16
   88fb8:	0b0102a1 	add	w1, w21, w1
   88fbc:	aa1703e0 	mov	x0, x23
   88fc0:	940048f0 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   88fc4:	aa1303e0 	mov	x0, x19
   88fc8:	9400117a 	bl	8d5b0 <CDWHCITransferStageData::GetStatusMask() const>
   88fcc:	2a0003e1 	mov	w1, w0
   88fd0:	aa1703e0 	mov	x0, x23
   88fd4:	9400491b 	bl	9b440 <CDWHCIRegister::Set(unsigned int)>
   88fd8:	aa1703e0 	mov	x0, x23
   88fdc:	940048fd 	bl	9b3d0 <CDWHCIRegister::Write()>
   88fe0:	aa1403e0 	mov	x0, x20
   88fe4:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   88fe8:	9400493a 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   88fec:	12a80001 	mov	w1, #0xbfffffff            	// #-1073741825
   88ff0:	aa1403e0 	mov	x0, x20
   88ff4:	94004927 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   88ff8:	aa1403e0 	mov	x0, x20
   88ffc:	940048f5 	bl	9b3d0 <CDWHCIRegister::Write()>
   89000:	aa1703e0 	mov	x0, x23
   89004:	940048e7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89008:	aa1403e0 	mov	x0, x20
   8900c:	940048e5 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89010:	aa1803e0 	mov	x0, x24
   89014:	940048e3 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89018:	aa1a03e0 	mov	x0, x26
   8901c:	940048e1 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89020:	aa1603e0 	mov	x0, x22
   89024:	940048df 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89028:	aa1903e0 	mov	x0, x25
   8902c:	940048dd 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89030:	a94153f3 	ldp	x19, x20, [sp, #16]
   89034:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89038:	a94363f7 	ldp	x23, x24, [sp, #48]
   8903c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89040:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   89044:	d65f03c0 	ret
   89048:	52900001 	mov	w1, #0x8000                	// #32768
   8904c:	aa1403e0 	mov	x0, x20
   89050:	94004920 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   89054:	aa1303e0 	mov	x0, x19
   89058:	940010be 	bl	8d350 <CDWHCITransferStageData::GetSpeed() const>
   8905c:	34fff580 	cbz	w0, 88f0c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
   89060:	aa1403e0 	mov	x0, x20
   89064:	12a00041 	mov	w1, #0xfffdffff            	// #-131073
   89068:	9400490a 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8906c:	17ffffab 	b	88f18 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1d8>
   89070:	aa1403e0 	mov	x0, x20
   89074:	12a40001 	mov	w1, #0xdfffffff            	// #-536870913
   89078:	910283f7 	add	x23, sp, #0xa0
   8907c:	94004905 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   89080:	17ffffcc 	b	88fb0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
   89084:	aa1303e0 	mov	x0, x19
   89088:	94001112 	bl	8d4d0 <CDWHCITransferStageData::GetHubPortAddress() const>
   8908c:	12001c01 	and	w1, w0, #0xff
   89090:	aa1803e0 	mov	x0, x24
   89094:	9400490f 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   89098:	aa1303e0 	mov	x0, x19
   8909c:	940010f9 	bl	8d480 <CDWHCITransferStageData::GetHubAddress() const>
   890a0:	2a0003e1 	mov	w1, w0
   890a4:	aa1803e0 	mov	x0, x24
   890a8:	53191c21 	ubfiz	w1, w1, #7, #8
   890ac:	94004909 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   890b0:	aa1303e0 	mov	x0, x19
   890b4:	9400111b 	bl	8d520 <CDWHCITransferStageData::GetSplitPosition() const>
   890b8:	2a0003e1 	mov	w1, w0
   890bc:	aa1803e0 	mov	x0, x24
   890c0:	53121c21 	ubfiz	w1, w1, #14, #8
   890c4:	94004903 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   890c8:	aa1303e0 	mov	x0, x19
   890cc:	940010e1 	bl	8d450 <CDWHCITransferStageData::IsSplitComplete() const>
   890d0:	370000a0 	tbnz	w0, #0, 890e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
   890d4:	aa1803e0 	mov	x0, x24
   890d8:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   890dc:	940048fd 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   890e0:	17ffff69 	b	88e84 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x144>
   890e4:	aa1803e0 	mov	x0, x24
   890e8:	52a00021 	mov	w1, #0x10000               	// #65536
   890ec:	940048f9 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   890f0:	17fffff9 	b	890d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
   890f4:	910283f7 	add	x23, sp, #0xa0
   890f8:	52808101 	mov	w1, #0x408                 	// #1032
   890fc:	72a7f301 	movk	w1, #0x3f98, lsl #16
   89100:	aa1703e0 	mov	x0, x23
   89104:	9400489f 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   89108:	aa1703e0 	mov	x0, x23
   8910c:	940048a9 	bl	9b3b0 <CDWHCIRegister::Read()>
   89110:	36000260 	tbz	w0, #0, 8915c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x41c>
   89114:	aa1403e0 	mov	x0, x20
   89118:	52a40001 	mov	w1, #0x20000000            	// #536870912
   8911c:	940048ed 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   89120:	aa1703e0 	mov	x0, x23
   89124:	9400489f 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89128:	17ffffa2 	b	88fb0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x270>
   8912c:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89130:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89134:	91030021 	add	x1, x1, #0xc0
   89138:	91288000 	add	x0, x0, #0xa20
   8913c:	52806fe2 	mov	w2, #0x37f                 	// #895
   89140:	94006370 	bl	a1f00 <assertion_failed>
   89144:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89148:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8914c:	91030021 	add	x1, x1, #0xc0
   89150:	91096000 	add	x0, x0, #0x258
   89154:	52807022 	mov	w2, #0x381                 	// #897
   89158:	9400636a 	bl	a1f00 <assertion_failed>
   8915c:	aa1403e0 	mov	x0, x20
   89160:	12a40001 	mov	w1, #0xdfffffff            	// #-536870913
   89164:	940048cb 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   89168:	17ffffee 	b	89120 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e0>
   8916c:	d503201f 	nop

0000000000089170 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
   89170:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89174:	910003fd 	mov	x29, sp
   89178:	a90153f3 	stp	x19, x20, [sp, #16]
   8917c:	a9025bf5 	stp	x21, x22, [sp, #32]
   89180:	b4000761 	cbz	x1, 8926c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
   89184:	aa0003f6 	mov	x22, x0
   89188:	aa0103f4 	mov	x20, x1
   8918c:	aa0103e0 	mov	x0, x1
   89190:	94001018 	bl	8d1f0 <CDWHCITransferStageData::GetChannelNumber() const>
   89194:	b94032c1 	ldr	w1, [x22, #48]
   89198:	6b00003f 	cmp	w1, w0
   8919c:	54000749 	b.ls	89284 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x114>  // b.plast
   891a0:	52980501 	mov	w1, #0xc028                	// #49192
   891a4:	72a03f81 	movk	w1, #0x1fc, lsl #16
   891a8:	0b010013 	add	w19, w0, w1
   891ac:	9100c3f5 	add	x21, sp, #0x30
   891b0:	aa1503e0 	mov	x0, x21
   891b4:	531b6a73 	lsl	w19, w19, #5
   891b8:	2a1303e1 	mov	w1, w19
   891bc:	94004871 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   891c0:	aa1503e0 	mov	x0, x21
   891c4:	9400487b 	bl	9b3b0 <CDWHCIRegister::Read()>
   891c8:	aa1503e0 	mov	x0, x21
   891cc:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   891d0:	940048a0 	bl	9b450 <CDWHCIRegister::IsSet(unsigned int) const>
   891d4:	37000140 	tbnz	w0, #0, 891fc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x8c>
   891d8:	aa1403e1 	mov	x1, x20
   891dc:	aa1603e0 	mov	x0, x22
   891e0:	97fffed8 	bl	88d40 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
   891e4:	aa1503e0 	mov	x0, x21
   891e8:	9400486e 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   891ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   891f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   891f4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   891f8:	d65f03c0 	ret
   891fc:	aa1403e0 	mov	x0, x20
   89200:	52800001 	mov	w1, #0x0                   	// #0
   89204:	94000ff3 	bl	8d1d0 <CDWHCITransferStageData::SetSubState(unsigned int)>
   89208:	aa1503e0 	mov	x0, x21
   8920c:	12b00001 	mov	w1, #0x7fffffff            	// #2147483647
   89210:	940048a0 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   89214:	52a80001 	mov	w1, #0x40000000            	// #1073741824
   89218:	aa1503e0 	mov	x0, x21
   8921c:	940048ad 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   89220:	aa1503e0 	mov	x0, x21
   89224:	9400486b 	bl	9b3d0 <CDWHCIRegister::Write()>
   89228:	910103e0 	add	x0, sp, #0x40
   8922c:	11003261 	add	w1, w19, #0xc
   89230:	aa0003f3 	mov	x19, x0
   89234:	94004853 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   89238:	52800041 	mov	w1, #0x2                   	// #2
   8923c:	aa1303e0 	mov	x0, x19
   89240:	94004880 	bl	9b440 <CDWHCIRegister::Set(unsigned int)>
   89244:	aa1303e0 	mov	x0, x19
   89248:	94004862 	bl	9b3d0 <CDWHCIRegister::Write()>
   8924c:	aa1303e0 	mov	x0, x19
   89250:	94004854 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89254:	aa1503e0 	mov	x0, x21
   89258:	94004852 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8925c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89260:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89264:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89268:	d65f03c0 	ret
   8926c:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89270:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89274:	91030021 	add	x1, x1, #0xc0
   89278:	91288000 	add	x0, x0, #0xa20
   8927c:	52806c82 	mov	w2, #0x364                 	// #868
   89280:	94006320 	bl	a1f00 <assertion_failed>
   89284:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89288:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8928c:	91030021 	add	x1, x1, #0xc0
   89290:	91096000 	add	x0, x0, #0x258
   89294:	52806cc2 	mov	w2, #0x366                 	// #870
   89298:	9400631a 	bl	a1f00 <assertion_failed>
   8929c:	d503201f 	nop

00000000000892a0 <CDWHCIDevice::AllocateChannel()>:
   892a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   892a4:	910003fd 	mov	x29, sp
   892a8:	a90153f3 	stp	x19, x20, [sp, #16]
   892ac:	aa0003f4 	mov	x20, x0
   892b0:	b9403800 	ldr	w0, [x0, #56]
   892b4:	350002c0 	cbnz	w0, 8930c <CDWHCIDevice::AllocateChannel()+0x6c>
   892b8:	b9403283 	ldr	w3, [x20, #48]
   892bc:	340001e3 	cbz	w3, 892f8 <CDWHCIDevice::AllocateChannel()+0x58>
   892c0:	b9403681 	ldr	w1, [x20, #52]
   892c4:	12000033 	and	w19, w1, #0x1
   892c8:	360004a1 	tbz	w1, #0, 8935c <CDWHCIDevice::AllocateChannel()+0xbc>
   892cc:	52800013 	mov	w19, #0x0                   	// #0
   892d0:	52800021 	mov	w1, #0x1                   	// #1
   892d4:	14000004 	b	892e4 <CDWHCIDevice::AllocateChannel()+0x44>
   892d8:	b9403682 	ldr	w2, [x20, #52]
   892dc:	6a01005f 	tst	w2, w1
   892e0:	54000280 	b.eq	89330 <CDWHCIDevice::AllocateChannel()+0x90>  // b.none
   892e4:	11000673 	add	w19, w19, #0x1
   892e8:	0b010021 	add	w1, w1, w1
   892ec:	6b03027f 	cmp	w19, w3
   892f0:	54ffff43 	b.cc	892d8 <CDWHCIDevice::AllocateChannel()+0x38>  // b.lo, b.ul, b.last
   892f4:	35000300 	cbnz	w0, 89354 <CDWHCIDevice::AllocateChannel()+0xb4>
   892f8:	52800213 	mov	w19, #0x10                  	// #16
   892fc:	2a1303e0 	mov	w0, w19
   89300:	a94153f3 	ldp	x19, x20, [sp, #16]
   89304:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89308:	d65f03c0 	ret
   8930c:	94008f5d 	bl	ad080 <EnterCritical>
   89310:	b9403283 	ldr	w3, [x20, #48]
   89314:	340002c3 	cbz	w3, 8936c <CDWHCIDevice::AllocateChannel()+0xcc>
   89318:	b9403681 	ldr	w1, [x20, #52]
   8931c:	b9403a80 	ldr	w0, [x20, #56]
   89320:	12000033 	and	w19, w1, #0x1
   89324:	3707fd41 	tbnz	w1, #0, 892cc <CDWHCIDevice::AllocateChannel()+0x2c>
   89328:	52800021 	mov	w1, #0x1                   	// #1
   8932c:	d503201f 	nop
   89330:	b9403682 	ldr	w2, [x20, #52]
   89334:	2a010041 	orr	w1, w2, w1
   89338:	b9003681 	str	w1, [x20, #52]
   8933c:	34fffe00 	cbz	w0, 892fc <CDWHCIDevice::AllocateChannel()+0x5c>
   89340:	94008f80 	bl	ad140 <LeaveCritical>
   89344:	2a1303e0 	mov	w0, w19
   89348:	a94153f3 	ldp	x19, x20, [sp, #16]
   8934c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89350:	d65f03c0 	ret
   89354:	94008f7b 	bl	ad140 <LeaveCritical>
   89358:	17ffffe8 	b	892f8 <CDWHCIDevice::AllocateChannel()+0x58>
   8935c:	b9403680 	ldr	w0, [x20, #52]
   89360:	32000000 	orr	w0, w0, #0x1
   89364:	b9003680 	str	w0, [x20, #52]
   89368:	17ffffe5 	b	892fc <CDWHCIDevice::AllocateChannel()+0x5c>
   8936c:	b9403a80 	ldr	w0, [x20, #56]
   89370:	34fffc40 	cbz	w0, 892f8 <CDWHCIDevice::AllocateChannel()+0x58>
   89374:	17fffff8 	b	89354 <CDWHCIDevice::AllocateChannel()+0xb4>
   89378:	d503201f 	nop
   8937c:	d503201f 	nop

0000000000089380 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>:
   89380:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89384:	52808101 	mov	w1, #0x408                 	// #1032
   89388:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8938c:	910003fd 	mov	x29, sp
   89390:	a90363f7 	stp	x23, x24, [sp, #48]
   89394:	910103f8 	add	x24, sp, #0x40
   89398:	a90153f3 	stp	x19, x20, [sp, #16]
   8939c:	a9025bf5 	stp	x21, x22, [sp, #32]
   893a0:	aa0003f5 	mov	x21, x0
   893a4:	aa1803e0 	mov	x0, x24
   893a8:	940047f6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   893ac:	910102b7 	add	x23, x21, #0x40
   893b0:	aa1803e0 	mov	x0, x24
   893b4:	940047ff 	bl	9b3b0 <CDWHCIRegister::Read()>
   893b8:	12003c16 	and	w22, w0, #0xffff
   893bc:	aa1703e0 	mov	x0, x23
   893c0:	2a1603e1 	mov	w1, w22
   893c4:	94000d4f 	bl	8c900 <CDWHCITransactionQueue::Dequeue(unsigned short)>
   893c8:	aa0003f3 	mov	x19, x0
   893cc:	b4000320 	cbz	x0, 89430 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xb0>
   893d0:	aa1503e0 	mov	x0, x21
   893d4:	97ffffb3 	bl	892a0 <CDWHCIDevice::AllocateChannel()>
   893d8:	b94032a1 	ldr	w1, [x21, #48]
   893dc:	2a0003f4 	mov	w20, w0
   893e0:	6b01001f 	cmp	w0, w1
   893e4:	54000342 	b.cs	8944c <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xcc>  // b.hs, b.nlast
   893e8:	2a0003e1 	mov	w1, w0
   893ec:	aa1303e0 	mov	x0, x19
   893f0:	94000eb0 	bl	8ceb0 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>
   893f4:	8b344ea1 	add	x1, x21, w20, uxtw #3
   893f8:	f9402820 	ldr	x0, [x1, #80]
   893fc:	b5000340 	cbnz	x0, 89464 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xe4>
   89400:	f9002833 	str	x19, [x1, #80]
   89404:	aa1503e0 	mov	x0, x21
   89408:	2a1403e1 	mov	w1, w20
   8940c:	97fffbfd 	bl	88400 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
   89410:	aa1303e1 	mov	x1, x19
   89414:	aa1503e0 	mov	x0, x21
   89418:	97ffff56 	bl	89170 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
   8941c:	2a1603e1 	mov	w1, w22
   89420:	aa1703e0 	mov	x0, x23
   89424:	94000d37 	bl	8c900 <CDWHCITransactionQueue::Dequeue(unsigned short)>
   89428:	aa0003f3 	mov	x19, x0
   8942c:	b5fffd20 	cbnz	x0, 893d0 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x50>
   89430:	aa1803e0 	mov	x0, x24
   89434:	940047db 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89438:	a94153f3 	ldp	x19, x20, [sp, #16]
   8943c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89440:	a94363f7 	ldp	x23, x24, [sp, #48]
   89444:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89448:	d65f03c0 	ret
   8944c:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89450:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89454:	91030021 	add	x1, x1, #0xc0
   89458:	91096000 	add	x0, x0, #0x258
   8945c:	5280ae82 	mov	w2, #0x574                 	// #1396
   89460:	940062a8 	bl	a1f00 <assertion_failed>
   89464:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89468:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8946c:	91030021 	add	x1, x1, #0xc0
   89470:	9109c000 	add	x0, x0, #0x270
   89474:	5280af02 	mov	w2, #0x578                 	// #1400
   89478:	940062a2 	bl	a1f00 <assertion_failed>
   8947c:	d503201f 	nop

0000000000089480 <CDWHCIDevice::SOFInterruptHandler()>:
   89480:	39442401 	ldrb	w1, [x0, #265]
   89484:	36000041 	tbz	w1, #0, 8948c <CDWHCIDevice::SOFInterruptHandler()+0xc>
   89488:	d65f03c0 	ret
   8948c:	17ffffbd 	b	89380 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>

0000000000089490 <CDWHCIDevice::FreeChannel(unsigned int)>:
   89490:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89494:	910003fd 	mov	x29, sp
   89498:	a90153f3 	stp	x19, x20, [sp, #16]
   8949c:	aa0003f3 	mov	x19, x0
   894a0:	b9403000 	ldr	w0, [x0, #48]
   894a4:	6b01001f 	cmp	w0, w1
   894a8:	540002a9 	b.ls	894fc <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>  // b.plast
   894ac:	b9403a60 	ldr	w0, [x19, #56]
   894b0:	52800034 	mov	w20, #0x1                   	// #1
   894b4:	1ac12294 	lsl	w20, w20, w1
   894b8:	35000180 	cbnz	w0, 894e8 <CDWHCIDevice::FreeChannel(unsigned int)+0x58>
   894bc:	b9403660 	ldr	w0, [x19, #52]
   894c0:	6a14001f 	tst	w0, w20
   894c4:	54000280 	b.eq	89514 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>  // b.none
   894c8:	b9403661 	ldr	w1, [x19, #52]
   894cc:	b9403a60 	ldr	w0, [x19, #56]
   894d0:	0a340034 	bic	w20, w1, w20
   894d4:	b9003674 	str	w20, [x19, #52]
   894d8:	350000c0 	cbnz	w0, 894f0 <CDWHCIDevice::FreeChannel(unsigned int)+0x60>
   894dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   894e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   894e4:	d65f03c0 	ret
   894e8:	94008ee6 	bl	ad080 <EnterCritical>
   894ec:	17fffff4 	b	894bc <CDWHCIDevice::FreeChannel(unsigned int)+0x2c>
   894f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   894f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   894f8:	14008f12 	b	ad140 <LeaveCritical>
   894fc:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89500:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89504:	91030021 	add	x1, x1, #0xc0
   89508:	91096000 	add	x0, x0, #0x258
   8950c:	5280cb82 	mov	w2, #0x65c                 	// #1628
   89510:	9400627c 	bl	a1f00 <assertion_failed>
   89514:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89518:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8951c:	91030021 	add	x1, x1, #0xc0
   89520:	910a4000 	add	x0, x0, #0x290
   89524:	5280cc22 	mov	w2, #0x661                 	// #1633
   89528:	94006276 	bl	a1f00 <assertion_failed>
   8952c:	d503201f 	nop

0000000000089530 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
   89530:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   89534:	910003fd 	mov	x29, sp
   89538:	a9025bf5 	stp	x21, x22, [sp, #32]
   8953c:	2a0103f6 	mov	w22, w1
   89540:	a90363f7 	stp	x23, x24, [sp, #48]
   89544:	8b364c17 	add	x23, x0, w22, uxtw #3
   89548:	a90153f3 	stp	x19, x20, [sp, #16]
   8954c:	f9402af3 	ldr	x19, [x23, #80]
   89550:	b40012f3 	cbz	x19, 897ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x27c>
   89554:	aa0003f4 	mov	x20, x0
   89558:	aa1303e0 	mov	x0, x19
   8955c:	9400106d 	bl	8d710 <CDWHCITransferStageData::GetURB() const>
   89560:	aa0003f5 	mov	x21, x0
   89564:	b4001340 	cbz	x0, 897cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x29c>
   89568:	39442280 	ldrb	w0, [x20, #264]
   8956c:	36000be0 	tbz	w0, #0, 896e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1b8>
   89570:	aa1303e0 	mov	x0, x19
   89574:	94000f1b 	bl	8d1e0 <CDWHCITransferStageData::GetSubState() const>
   89578:	34000aa0 	cbz	w0, 896cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x19c>
   8957c:	a9046bf9 	stp	x25, x26, [sp, #64]
   89580:	7100041f 	cmp	w0, #0x1
   89584:	540030a1 	b.ne	89b98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x668>  // b.any
   89588:	aa1303e0 	mov	x0, x19
   8958c:	94000f99 	bl	8d3f0 <CDWHCITransferStageData::GetDMAAddress() const>
   89590:	2a0003f8 	mov	w24, w0
   89594:	aa1303e0 	mov	x0, x19
   89598:	94000fa2 	bl	8d420 <CDWHCITransferStageData::GetBytesToTransfer() const>
   8959c:	531b6ada 	lsl	w26, w22, #5
   895a0:	2a0003e1 	mov	w1, w0
   895a4:	2a1803e0 	mov	w0, w24
   895a8:	94008fd6 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   895ac:	5280a219 	mov	w25, #0x510                 	// #1296
   895b0:	72a7f319 	movk	w25, #0x3f98, lsl #16
   895b4:	0b190341 	add	w1, w26, w25
   895b8:	910183f8 	add	x24, sp, #0x60
   895bc:	aa1803e0 	mov	x0, x24
   895c0:	94004770 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   895c4:	aa1803e0 	mov	x0, x24
   895c8:	9400477a 	bl	9b3b0 <CDWHCIRegister::Read()>
   895cc:	51002321 	sub	w1, w25, #0x8
   895d0:	9101c3f9 	add	x25, sp, #0x70
   895d4:	0b010341 	add	w1, w26, w1
   895d8:	aa1903e0 	mov	x0, x25
   895dc:	94004769 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   895e0:	aa1903e0 	mov	x0, x25
   895e4:	94004773 	bl	9b3b0 <CDWHCIRegister::Read()>
   895e8:	7100081f 	cmp	w0, #0x2
   895ec:	54001780 	b.eq	898dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3ac>  // b.none
   895f0:	aa1303e0 	mov	x0, x19
   895f4:	f9002bfb 	str	x27, [sp, #80]
   895f8:	94000f02 	bl	8d200 <CDWHCITransferStageData::IsPeriodic() const>
   895fc:	37002120 	tbnz	w0, #0, 89a20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4f0>
   89600:	aa1903e0 	mov	x0, x25
   89604:	9400476b 	bl	9b3b0 <CDWHCIRegister::Read()>
   89608:	2a0003fa 	mov	w26, w0
   8960c:	aa1803e0 	mov	x0, x24
   89610:	94004780 	bl	9b410 <CDWHCIRegister::Get() const>
   89614:	2a0003fb 	mov	w27, w0
   89618:	aa1803e0 	mov	x0, x24
   8961c:	9400477d 	bl	9b410 <CDWHCIRegister::Get() const>
   89620:	d3537362 	ubfx	x2, x27, #19, #10
   89624:	12004803 	and	w3, w0, #0x7ffff
   89628:	2a1a03e1 	mov	w1, w26
   8962c:	aa1303e0 	mov	x0, x19
   89630:	94000e24 	bl	8cec0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
   89634:	aa1903e0 	mov	x0, x25
   89638:	9400475a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8963c:	aa1803e0 	mov	x0, x24
   89640:	94004758 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89644:	aa1303e0 	mov	x0, x19
   89648:	94000ede 	bl	8d1c0 <CDWHCITransferStageData::GetState() const>
   8964c:	2a0003f8 	mov	w24, w0
   89650:	7100041f 	cmp	w0, #0x1
   89654:	540007a0 	b.eq	89748 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x218>  // b.none
   89658:	7100081f 	cmp	w0, #0x2
   8965c:	54000c80 	b.eq	897ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2bc>  // b.none
   89660:	35002aa0 	cbnz	w0, 89bb4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x684>
   89664:	aa1303e0 	mov	x0, x19
   89668:	94000fea 	bl	8d610 <CDWHCITransferStageData::GetTransactionStatus() const>
   8966c:	2a0003f8 	mov	w24, w0
   89670:	37381af8 	tbnz	w24, #7, 899cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x49c>
   89674:	5280f180 	mov	w0, #0x78c                 	// #1932
   89678:	6a00031f 	tst	w24, w0
   8967c:	54001901 	b.ne	8999c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x46c>  // b.any
   89680:	aa1303e0 	mov	x0, x19
   89684:	94000eef 	bl	8d240 <CDWHCITransferStageData::IsIsochronous() const>
   89688:	37002100 	tbnz	w0, #0, 89aa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x578>
   8968c:	52800a00 	mov	w0, #0x50                  	// #80
   89690:	6a00031f 	tst	w24, w0
   89694:	54000080 	b.eq	896a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x174>  // b.none
   89698:	aa1303e0 	mov	x0, x19
   8969c:	94000ed9 	bl	8d200 <CDWHCITransferStageData::IsPeriodic() const>
   896a0:	37002680 	tbnz	w0, #0, 89b70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x640>
   896a4:	aa1303e0 	mov	x0, x19
   896a8:	94000f4e 	bl	8d3e0 <CDWHCITransferStageData::IsStatusStage() const>
   896ac:	36002300 	tbz	w0, #0, 89b0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5dc>
   896b0:	aa1503e0 	mov	x0, x21
   896b4:	52800021 	mov	w1, #0x1                   	// #1
   896b8:	940035de 	bl	96e30 <CUSBRequest::SetStatus(int)>
   896bc:	2a1603e1 	mov	w1, w22
   896c0:	aa1403e0 	mov	x0, x20
   896c4:	97fffb77 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   896c8:	14000074 	b	89898 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x368>
   896cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   896d0:	aa1303e1 	mov	x1, x19
   896d4:	a94363f7 	ldp	x23, x24, [sp, #48]
   896d8:	aa1403e0 	mov	x0, x20
   896dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   896e0:	a8c87bfd 	ldp	x29, x30, [sp], #128
   896e4:	17fffd97 	b	88d40 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
   896e8:	2a1603e1 	mov	w1, w22
   896ec:	aa1403e0 	mov	x0, x20
   896f0:	97fffb6c 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   896f4:	aa1503e0 	mov	x0, x21
   896f8:	52800001 	mov	w1, #0x0                   	// #0
   896fc:	940035cd 	bl	96e30 <CUSBRequest::SetStatus(int)>
   89700:	52800101 	mov	w1, #0x8                   	// #8
   89704:	aa1503e0 	mov	x0, x21
   89708:	940035d2 	bl	96e50 <CUSBRequest::SetUSBError(TUSBError)>
   8970c:	aa1303e0 	mov	x0, x19
   89710:	94000de0 	bl	8ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>
   89714:	aa1303e0 	mov	x0, x19
   89718:	d2802001 	mov	x1, #0x100                 	// #256
   8971c:	94001031 	bl	8d7e0 <CDWHCITransferStageData::operator delete(void*, unsigned long)>
   89720:	f9002aff 	str	xzr, [x23, #80]
   89724:	2a1603e1 	mov	w1, w22
   89728:	aa1403e0 	mov	x0, x20
   8972c:	97ffff59 	bl	89490 <CDWHCIDevice::FreeChannel(unsigned int)>
   89730:	a94153f3 	ldp	x19, x20, [sp, #16]
   89734:	aa1503e0 	mov	x0, x21
   89738:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8973c:	a94363f7 	ldp	x23, x24, [sp, #48]
   89740:	a8c87bfd 	ldp	x29, x30, [sp], #128
   89744:	1400365b 	b	970b0 <CUSBRequest::CallCompletionRoutine()>
   89748:	aa1303e0 	mov	x0, x19
   8974c:	94000fb1 	bl	8d610 <CDWHCITransferStageData::GetTransactionStatus() const>
   89750:	5280fb81 	mov	w1, #0x7dc                 	// #2012
   89754:	2a0003f8 	mov	w24, w0
   89758:	6a01001f 	tst	w0, w1
   8975c:	54001081 	b.ne	8996c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x43c>  // b.any
   89760:	aa1303e0 	mov	x0, x19
   89764:	94001003 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   89768:	f9400002 	ldr	x2, [x0]
   8976c:	2a1803e1 	mov	w1, w24
   89770:	f9401042 	ldr	x2, [x2, #32]
   89774:	d63f0040 	blr	x2
   89778:	aa1303e0 	mov	x0, x19
   8977c:	94000eb1 	bl	8d240 <CDWHCITransferStageData::IsIsochronous() const>
   89780:	36000080 	tbz	w0, #0, 89790 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x260>
   89784:	aa1303e0 	mov	x0, x19
   89788:	94000f12 	bl	8d3d0 <CDWHCITransferStageData::IsDirectionIn() const>
   8978c:	36000540 	tbz	w0, #0, 89834 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x304>
   89790:	aa1303e0 	mov	x0, x19
   89794:	52800041 	mov	w1, #0x2                   	// #2
   89798:	94000e86 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   8979c:	aa1303e0 	mov	x0, x19
   897a0:	52800021 	mov	w1, #0x1                   	// #1
   897a4:	94000e73 	bl	8d170 <CDWHCITransferStageData::SetSplitComplete(bool)>
   897a8:	1400001d 	b	8981c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2ec>
   897ac:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   897b0:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   897b4:	91030021 	add	x1, x1, #0xc0
   897b8:	91288000 	add	x0, x0, #0xa20
   897bc:	52807fe2 	mov	w2, #0x3ff                 	// #1023
   897c0:	a9046bf9 	stp	x25, x26, [sp, #64]
   897c4:	f9002bfb 	str	x27, [sp, #80]
   897c8:	940061ce 	bl	a1f00 <assertion_failed>
   897cc:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   897d0:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   897d4:	91030021 	add	x1, x1, #0xc0
   897d8:	9106c000 	add	x0, x0, #0x1b0
   897dc:	52808022 	mov	w2, #0x401                 	// #1025
   897e0:	a9046bf9 	stp	x25, x26, [sp, #64]
   897e4:	f9002bfb 	str	x27, [sp, #80]
   897e8:	940061c6 	bl	a1f00 <assertion_failed>
   897ec:	aa1303e0 	mov	x0, x19
   897f0:	94000f88 	bl	8d610 <CDWHCITransferStageData::GetTransactionStatus() const>
   897f4:	5280f181 	mov	w1, #0x78c                 	// #1932
   897f8:	2a0003f9 	mov	w25, w0
   897fc:	6a01001f 	tst	w0, w1
   89800:	54000901 	b.ne	89920 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f0>  // b.any
   89804:	aa1303e0 	mov	x0, x19
   89808:	94000fda 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   8980c:	f9400002 	ldr	x2, [x0]
   89810:	2a1903e1 	mov	w1, w25
   89814:	f9401042 	ldr	x2, [x2, #32]
   89818:	d63f0040 	blr	x2
   8981c:	aa1303e0 	mov	x0, x19
   89820:	94000fd4 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   89824:	f9400001 	ldr	x1, [x0]
   89828:	f9400c21 	ldr	x1, [x1, #24]
   8982c:	d63f0020 	blr	x1
   89830:	37000de0 	tbnz	w0, #0, 899ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4bc>
   89834:	aa1303e0 	mov	x0, x19
   89838:	94000f92 	bl	8d680 <CDWHCITransferStageData::IsStageComplete() const>
   8983c:	370010a0 	tbnz	w0, #0, 89a50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x520>
   89840:	aa1303e0 	mov	x0, x19
   89844:	94000e6f 	bl	8d200 <CDWHCITransferStageData::IsPeriodic() const>
   89848:	36001180 	tbz	w0, #0, 89a78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x548>
   8984c:	aa1303e0 	mov	x0, x19
   89850:	94000e7c 	bl	8d240 <CDWHCITransferStageData::IsIsochronous() const>
   89854:	36000080 	tbz	w0, #0, 89864 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x334>
   89858:	aa1303e0 	mov	x0, x19
   8985c:	94000edd 	bl	8d3d0 <CDWHCITransferStageData::IsDirectionIn() const>
   89860:	360010c0 	tbz	w0, #0, 89a78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x548>
   89864:	aa1303e0 	mov	x0, x19
   89868:	94000f92 	bl	8d6b0 <CDWHCITransferStageData::IsTimeout() const>
   8986c:	36001680 	tbz	w0, #0, 89b3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x60c>
   89870:	2a1603e1 	mov	w1, w22
   89874:	aa1403e0 	mov	x0, x20
   89878:	97fffb0a 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   8987c:	aa1503e0 	mov	x0, x21
   89880:	52800001 	mov	w1, #0x0                   	// #0
   89884:	9400356b 	bl	96e30 <CUSBRequest::SetStatus(int)>
   89888:	aa1503e0 	mov	x0, x21
   8988c:	528000e1 	mov	w1, #0x7                   	// #7
   89890:	94003570 	bl	96e50 <CUSBRequest::SetUSBError(TUSBError)>
   89894:	d503201f 	nop
   89898:	aa1303e0 	mov	x0, x19
   8989c:	94000d7d 	bl	8ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>
   898a0:	aa1303e0 	mov	x0, x19
   898a4:	d2802001 	mov	x1, #0x100                 	// #256
   898a8:	94000fce 	bl	8d7e0 <CDWHCITransferStageData::operator delete(void*, unsigned long)>
   898ac:	f9002aff 	str	xzr, [x23, #80]
   898b0:	2a1603e1 	mov	w1, w22
   898b4:	aa1403e0 	mov	x0, x20
   898b8:	97fffef6 	bl	89490 <CDWHCIDevice::FreeChannel(unsigned int)>
   898bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   898c0:	aa1503e0 	mov	x0, x21
   898c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   898c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   898cc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   898d0:	f9402bfb 	ldr	x27, [sp, #80]
   898d4:	a8c87bfd 	ldp	x29, x30, [sp], #128
   898d8:	140035f6 	b	970b0 <CUSBRequest::CallCompletionRoutine()>
   898dc:	f9002aff 	str	xzr, [x23, #80]
   898e0:	2a1603e1 	mov	w1, w22
   898e4:	aa1403e0 	mov	x0, x20
   898e8:	97fffeea 	bl	89490 <CDWHCIDevice::FreeChannel(unsigned int)>
   898ec:	aa1303e1 	mov	x1, x19
   898f0:	aa1403e0 	mov	x0, x20
   898f4:	97fffc0b 	bl	88920 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
   898f8:	aa1903e0 	mov	x0, x25
   898fc:	940046a9 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89900:	aa1803e0 	mov	x0, x24
   89904:	940046a7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89908:	a94153f3 	ldp	x19, x20, [sp, #16]
   8990c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89910:	a94363f7 	ldp	x23, x24, [sp, #48]
   89914:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89918:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8991c:	d65f03c0 	ret
   89920:	94008dd0 	bl	ad060 <CurrentExecutionLevel>
   89924:	7100041f 	cmp	w0, #0x1
   89928:	54000ce9 	b.ls	89ac4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x594>  // b.plast
   8992c:	52800001 	mov	w1, #0x0                   	// #0
   89930:	aa1503e0 	mov	x0, x21
   89934:	9400353f 	bl	96e30 <CUSBRequest::SetStatus(int)>
   89938:	aa1303e0 	mov	x0, x19
   8993c:	94000f41 	bl	8d640 <CDWHCITransferStageData::GetUSBError() const>
   89940:	2a0003e1 	mov	w1, w0
   89944:	aa1503e0 	mov	x0, x21
   89948:	94003542 	bl	96e50 <CUSBRequest::SetUSBError(TUSBError)>
   8994c:	2a1603e1 	mov	w1, w22
   89950:	aa1403e0 	mov	x0, x20
   89954:	97fffad3 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   89958:	aa1303e0 	mov	x0, x19
   8995c:	94000d4d 	bl	8ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>
   89960:	aa1303e0 	mov	x0, x19
   89964:	d2802001 	mov	x1, #0x100                 	// #256
   89968:	17ffffd0 	b	898a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x378>
   8996c:	94008dbd 	bl	ad060 <CurrentExecutionLevel>
   89970:	7100041f 	cmp	w0, #0x1
   89974:	54fffdc8 	b.hi	8992c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3fc>  // b.pmore
   89978:	9400689e 	bl	a3bf0 <CLogger::Get()>
   8997c:	2a1803e4 	mov	w4, w24
   89980:	d0000143 	adrp	x3, b3000 <_etext+0x9c8>
   89984:	d0000161 	adrp	x1, b7000 <_etext+0x49c8>
   89988:	910cc063 	add	x3, x3, #0x330
   8998c:	9133e021 	add	x1, x1, #0xcf8
   89990:	52800042 	mov	w2, #0x2                   	// #2
   89994:	94006a8b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89998:	17ffffe5 	b	8992c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3fc>
   8999c:	94008db1 	bl	ad060 <CurrentExecutionLevel>
   899a0:	7100041f 	cmp	w0, #0x1
   899a4:	54000a29 	b.ls	89ae8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b8>  // b.plast
   899a8:	52800001 	mov	w1, #0x0                   	// #0
   899ac:	aa1503e0 	mov	x0, x21
   899b0:	94003520 	bl	96e30 <CUSBRequest::SetStatus(int)>
   899b4:	aa1303e0 	mov	x0, x19
   899b8:	94000f22 	bl	8d640 <CDWHCITransferStageData::GetUSBError() const>
   899bc:	2a0003e1 	mov	w1, w0
   899c0:	aa1503e0 	mov	x0, x21
   899c4:	94003523 	bl	96e50 <CUSBRequest::SetUSBError(TUSBError)>
   899c8:	17ffff3d 	b	896bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x18c>
   899cc:	aa1503e0 	mov	x0, x21
   899d0:	9400350c 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   899d4:	94001997 	bl	90030 <CUSBEndpoint::GetType() const>
   899d8:	7100041f 	cmp	w0, #0x1
   899dc:	54ffe4c1 	b.ne	89674 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>  // b.any
   899e0:	aa1303e0 	mov	x0, x19
   899e4:	94000f47 	bl	8d700 <CDWHCITransferStageData::IsRetryOK() const>
   899e8:	3607e460 	tbz	w0, #0, 89674 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
   899ec:	f9002aff 	str	xzr, [x23, #80]
   899f0:	2a1603e1 	mov	w1, w22
   899f4:	aa1403e0 	mov	x0, x20
   899f8:	97fffea6 	bl	89490 <CDWHCIDevice::FreeChannel(unsigned int)>
   899fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89a00:	aa1303e1 	mov	x1, x19
   89a04:	a94363f7 	ldp	x23, x24, [sp, #48]
   89a08:	aa1403e0 	mov	x0, x20
   89a0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89a10:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89a14:	f9402bfb 	ldr	x27, [sp, #80]
   89a18:	a8c87bfd 	ldp	x29, x30, [sp], #128
   89a1c:	17fffbc1 	b	88920 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
   89a20:	aa1803e0 	mov	x0, x24
   89a24:	9400467b 	bl	9b410 <CDWHCIRegister::Get() const>
   89a28:	52ac0001 	mov	w1, #0x60000000            	// #1610612736
   89a2c:	0a010000 	and	w0, w0, w1
   89a30:	6b01001f 	cmp	w0, w1
   89a34:	54ffde61 	b.ne	89600 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xd0>  // b.any
   89a38:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89a3c:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89a40:	91030021 	add	x1, x1, #0xc0
   89a44:	910ae000 	add	x0, x0, #0x2b8
   89a48:	52808682 	mov	w2, #0x434                 	// #1076
   89a4c:	9400612d 	bl	a1f00 <assertion_failed>
   89a50:	2a1603e1 	mov	w1, w22
   89a54:	aa1403e0 	mov	x0, x20
   89a58:	97fffa92 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   89a5c:	aa1303e0 	mov	x0, x19
   89a60:	94000e60 	bl	8d3e0 <CDWHCITransferStageData::IsStatusStage() const>
   89a64:	36000600 	tbz	w0, #0, 89b24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5f4>
   89a68:	aa1503e0 	mov	x0, x21
   89a6c:	52800021 	mov	w1, #0x1                   	// #1
   89a70:	940034f0 	bl	96e30 <CUSBRequest::SetStatus(int)>
   89a74:	17ffff89 	b	89898 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x368>
   89a78:	aa1303e0 	mov	x0, x19
   89a7c:	52800021 	mov	w1, #0x1                   	// #1
   89a80:	94000dcc 	bl	8d1b0 <CDWHCITransferStageData::SetState(unsigned int)>
   89a84:	52800001 	mov	w1, #0x0                   	// #0
   89a88:	aa1303e0 	mov	x0, x19
   89a8c:	94000db9 	bl	8d170 <CDWHCITransferStageData::SetSplitComplete(bool)>
   89a90:	aa1303e0 	mov	x0, x19
   89a94:	94000f37 	bl	8d770 <CDWHCITransferStageData::GetFrameScheduler() const>
   89a98:	f9400001 	ldr	x1, [x0]
   89a9c:	f9400821 	ldr	x1, [x1, #16]
   89aa0:	d63f0020 	blr	x1
   89aa4:	17ffffd2 	b	899ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4bc>
   89aa8:	aa1303e0 	mov	x0, x19
   89aac:	94000ef5 	bl	8d680 <CDWHCITransferStageData::IsStageComplete() const>
   89ab0:	3707dee0 	tbnz	w0, #0, 8968c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x15c>
   89ab4:	2a1603e1 	mov	w1, w22
   89ab8:	aa1403e0 	mov	x0, x20
   89abc:	97fffa79 	bl	884a0 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
   89ac0:	17ffffcb 	b	899ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4bc>
   89ac4:	9400684b 	bl	a3bf0 <CLogger::Get()>
   89ac8:	2a1903e4 	mov	w4, w25
   89acc:	2a1803e2 	mov	w2, w24
   89ad0:	d0000143 	adrp	x3, b3000 <_etext+0x9c8>
   89ad4:	d0000161 	adrp	x1, b7000 <_etext+0x49c8>
   89ad8:	910cc063 	add	x3, x3, #0x330
   89adc:	9133e021 	add	x1, x1, #0xcf8
   89ae0:	94006a38 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89ae4:	17ffff92 	b	8992c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3fc>
   89ae8:	94006842 	bl	a3bf0 <CLogger::Get()>
   89aec:	2a1803e4 	mov	w4, w24
   89af0:	d0000143 	adrp	x3, b3000 <_etext+0x9c8>
   89af4:	d0000161 	adrp	x1, b7000 <_etext+0x49c8>
   89af8:	910cc063 	add	x3, x3, #0x330
   89afc:	9133e021 	add	x1, x1, #0xcf8
   89b00:	52800042 	mov	w2, #0x2                   	// #2
   89b04:	94006a2f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89b08:	17ffffa8 	b	899a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x478>
   89b0c:	aa1303e0 	mov	x0, x19
   89b10:	94000ee0 	bl	8d690 <CDWHCITransferStageData::GetResultLen() const>
   89b14:	2a0003e1 	mov	w1, w0
   89b18:	aa1503e0 	mov	x0, x21
   89b1c:	940034c9 	bl	96e40 <CUSBRequest::SetResultLen(unsigned int)>
   89b20:	17fffee4 	b	896b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x180>
   89b24:	aa1303e0 	mov	x0, x19
   89b28:	94000eda 	bl	8d690 <CDWHCITransferStageData::GetResultLen() const>
   89b2c:	2a0003e1 	mov	w1, w0
   89b30:	aa1503e0 	mov	x0, x21
   89b34:	940034c3 	bl	96e40 <CUSBRequest::SetResultLen(unsigned int)>
   89b38:	17ffffcc 	b	89a68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x538>
   89b3c:	f9002aff 	str	xzr, [x23, #80]
   89b40:	2a1603e1 	mov	w1, w22
   89b44:	aa1403e0 	mov	x0, x20
   89b48:	97fffe52 	bl	89490 <CDWHCIDevice::FreeChannel(unsigned int)>
   89b4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89b50:	aa1303e1 	mov	x1, x19
   89b54:	a94363f7 	ldp	x23, x24, [sp, #48]
   89b58:	aa1403e0 	mov	x0, x20
   89b5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89b60:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89b64:	f9402bfb 	ldr	x27, [sp, #80]
   89b68:	a8c87bfd 	ldp	x29, x30, [sp], #128
   89b6c:	17fffc0d 	b	88ba0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>
   89b70:	aa1303e0 	mov	x0, x19
   89b74:	94000ecf 	bl	8d6b0 <CDWHCITransferStageData::IsTimeout() const>
   89b78:	3607fe20 	tbz	w0, #0, 89b3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x60c>
   89b7c:	aa1503e0 	mov	x0, x21
   89b80:	52800001 	mov	w1, #0x0                   	// #0
   89b84:	940034ab 	bl	96e30 <CUSBRequest::SetStatus(int)>
   89b88:	aa1503e0 	mov	x0, x21
   89b8c:	528000e1 	mov	w1, #0x7                   	// #7
   89b90:	940034b0 	bl	96e50 <CUSBRequest::SetUSBError(TUSBError)>
   89b94:	17fffeca 	b	896bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x18c>
   89b98:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89b9c:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89ba0:	91030021 	add	x1, x1, #0xc0
   89ba4:	9135c000 	add	x0, x0, #0xd70
   89ba8:	528087c2 	mov	w2, #0x43e                 	// #1086
   89bac:	f9002bfb 	str	x27, [sp, #80]
   89bb0:	940060d4 	bl	a1f00 <assertion_failed>
   89bb4:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89bb8:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89bbc:	91030021 	add	x1, x1, #0xc0
   89bc0:	9135c000 	add	x0, x0, #0xd70
   89bc4:	5280a982 	mov	w2, #0x54c                 	// #1356
   89bc8:	940060ce 	bl	a1f00 <assertion_failed>
   89bcc:	d503201f 	nop

0000000000089bd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
   89bd0:	39442402 	ldrb	w2, [x0, #265]
   89bd4:	37000042 	tbnz	w2, #0, 89bdc <CDWHCIDevice::ChannelInterruptHandler(unsigned int)+0xc>
   89bd8:	17fffe56 	b	89530 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
   89bdc:	d65f03c0 	ret

0000000000089be0 <CDWHCIDevice::InterruptHandler()>:
   89be0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   89be4:	52800281 	mov	w1, #0x14                  	// #20
   89be8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   89bec:	910003fd 	mov	x29, sp
   89bf0:	a9025bf5 	stp	x21, x22, [sp, #32]
   89bf4:	910143f6 	add	x22, sp, #0x50
   89bf8:	a90153f3 	stp	x19, x20, [sp, #16]
   89bfc:	aa0003f4 	mov	x20, x0
   89c00:	aa1603e0 	mov	x0, x22
   89c04:	940045df 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   89c08:	aa1603e0 	mov	x0, x22
   89c0c:	940045e9 	bl	9b3b0 <CDWHCIRegister::Read()>
   89c10:	aa1603e0 	mov	x0, x22
   89c14:	940045ff 	bl	9b410 <CDWHCIRegister::Get() const>
   89c18:	36180060 	tbz	w0, #3, 89c24 <CDWHCIDevice::InterruptHandler()+0x44>
   89c1c:	39442680 	ldrb	w0, [x20, #265]
   89c20:	360001e0 	tbz	w0, #0, 89c5c <CDWHCIDevice::InterruptHandler()+0x7c>
   89c24:	aa1603e0 	mov	x0, x22
   89c28:	940045fa 	bl	9b410 <CDWHCIRegister::Get() const>
   89c2c:	37c80220 	tbnz	w0, #25, 89c70 <CDWHCIDevice::InterruptHandler()+0x90>
   89c30:	aa1403e0 	mov	x0, x20
   89c34:	94002933 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   89c38:	370008a0 	tbnz	w0, #0, 89d4c <CDWHCIDevice::InterruptHandler()+0x16c>
   89c3c:	aa1603e0 	mov	x0, x22
   89c40:	940045e4 	bl	9b3d0 <CDWHCIRegister::Write()>
   89c44:	aa1603e0 	mov	x0, x22
   89c48:	940045d6 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89c4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89c50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89c54:	a8c87bfd 	ldp	x29, x30, [sp], #128
   89c58:	d65f03c0 	ret
   89c5c:	aa1403e0 	mov	x0, x20
   89c60:	97fffdc8 	bl	89380 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>
   89c64:	aa1603e0 	mov	x0, x22
   89c68:	940045ea 	bl	9b410 <CDWHCIRegister::Get() const>
   89c6c:	36cffe20 	tbz	w0, #25, 89c30 <CDWHCIDevice::InterruptHandler()+0x50>
   89c70:	52808281 	mov	w1, #0x414                 	// #1044
   89c74:	72a7f301 	movk	w1, #0x3f98, lsl #16
   89c78:	a90363f7 	stp	x23, x24, [sp, #48]
   89c7c:	910183f8 	add	x24, sp, #0x60
   89c80:	aa1803e0 	mov	x0, x24
   89c84:	940045bf 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   89c88:	aa1803e0 	mov	x0, x24
   89c8c:	940045c9 	bl	9b3b0 <CDWHCIRegister::Read()>
   89c90:	aa1803e0 	mov	x0, x24
   89c94:	940045cf 	bl	9b3d0 <CDWHCIRegister::Write()>
   89c98:	b9403280 	ldr	w0, [x20, #48]
   89c9c:	340004c0 	cbz	w0, 89d34 <CDWHCIDevice::InterruptHandler()+0x154>
   89ca0:	5280a197 	mov	w23, #0x50c                 	// #1292
   89ca4:	72a7f317 	movk	w23, #0x3f98, lsl #16
   89ca8:	52800015 	mov	w21, #0x0                   	// #0
   89cac:	52800033 	mov	w19, #0x1                   	// #1
   89cb0:	f90023f9 	str	x25, [sp, #64]
   89cb4:	9101c3f9 	add	x25, sp, #0x70
   89cb8:	14000007 	b	89cd4 <CDWHCIDevice::InterruptHandler()+0xf4>
   89cbc:	b9403280 	ldr	w0, [x20, #48]
   89cc0:	110006b5 	add	w21, w21, #0x1
   89cc4:	0b130273 	add	w19, w19, w19
   89cc8:	110082f7 	add	w23, w23, #0x20
   89ccc:	6b15001f 	cmp	w0, w21
   89cd0:	54000309 	b.ls	89d30 <CDWHCIDevice::InterruptHandler()+0x150>  // b.plast
   89cd4:	aa1803e0 	mov	x0, x24
   89cd8:	940045ce 	bl	9b410 <CDWHCIRegister::Get() const>
   89cdc:	6a13001f 	tst	w0, w19
   89ce0:	54fffee0 	b.eq	89cbc <CDWHCIDevice::InterruptHandler()+0xdc>  // b.none
   89ce4:	2a1703e1 	mov	w1, w23
   89ce8:	52800002 	mov	w2, #0x0                   	// #0
   89cec:	aa1903e0 	mov	x0, x25
   89cf0:	940045a8 	bl	9b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
   89cf4:	aa1903e0 	mov	x0, x25
   89cf8:	940045b6 	bl	9b3d0 <CDWHCIRegister::Write()>
   89cfc:	39442682 	ldrb	w2, [x20, #265]
   89d00:	2a1503e1 	mov	w1, w21
   89d04:	aa1403e0 	mov	x0, x20
   89d08:	37000042 	tbnz	w2, #0, 89d10 <CDWHCIDevice::InterruptHandler()+0x130>
   89d0c:	97fffe09 	bl	89530 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
   89d10:	aa1903e0 	mov	x0, x25
   89d14:	940045a3 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89d18:	b9403280 	ldr	w0, [x20, #48]
   89d1c:	110006b5 	add	w21, w21, #0x1
   89d20:	0b130273 	add	w19, w19, w19
   89d24:	110082f7 	add	w23, w23, #0x20
   89d28:	6b15001f 	cmp	w0, w21
   89d2c:	54fffd48 	b.hi	89cd4 <CDWHCIDevice::InterruptHandler()+0xf4>  // b.pmore
   89d30:	f94023f9 	ldr	x25, [sp, #64]
   89d34:	aa1803e0 	mov	x0, x24
   89d38:	9400459a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89d3c:	a94363f7 	ldp	x23, x24, [sp, #48]
   89d40:	aa1403e0 	mov	x0, x20
   89d44:	940028ef 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   89d48:	3607f7a0 	tbz	w0, #0, 89c3c <CDWHCIDevice::InterruptHandler()+0x5c>
   89d4c:	aa1603e0 	mov	x0, x22
   89d50:	940045b0 	bl	9b410 <CDWHCIRegister::Get() const>
   89d54:	37c001e0 	tbnz	w0, #24, 89d90 <CDWHCIDevice::InterruptHandler()+0x1b0>
   89d58:	aa1603e0 	mov	x0, x22
   89d5c:	940045ad 	bl	9b410 <CDWHCIRegister::Get() const>
   89d60:	36eff6e0 	tbz	w0, #29, 89c3c <CDWHCIDevice::InterruptHandler()+0x5c>
   89d64:	9103c281 	add	x1, x20, #0xf0
   89d68:	aa1403e0 	mov	x0, x20
   89d6c:	940028e9 	bl	94110 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
   89d70:	aa1603e0 	mov	x0, x22
   89d74:	94004597 	bl	9b3d0 <CDWHCIRegister::Write()>
   89d78:	aa1603e0 	mov	x0, x22
   89d7c:	94004589 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89d80:	a94153f3 	ldp	x19, x20, [sp, #16]
   89d84:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89d88:	a8c87bfd 	ldp	x29, x30, [sp], #128
   89d8c:	d65f03c0 	ret
   89d90:	9101c3f3 	add	x19, sp, #0x70
   89d94:	52808801 	mov	w1, #0x440                 	// #1088
   89d98:	72a7f301 	movk	w1, #0x3f98, lsl #16
   89d9c:	aa1303e0 	mov	x0, x19
   89da0:	94004578 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   89da4:	aa1303e0 	mov	x0, x19
   89da8:	94004582 	bl	9b3b0 <CDWHCIRegister::Read()>
   89dac:	aa1303e0 	mov	x0, x19
   89db0:	94004598 	bl	9b410 <CDWHCIRegister::Get() const>
   89db4:	37080180 	tbnz	w0, #1, 89de4 <CDWHCIDevice::InterruptHandler()+0x204>
   89db8:	aa1303e0 	mov	x0, x19
   89dbc:	12800081 	mov	w1, #0xfffffffb            	// #-5
   89dc0:	940045b4 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   89dc4:	52800541 	mov	w1, #0x2a                  	// #42
   89dc8:	aa1303e0 	mov	x0, x19
   89dcc:	940045c1 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   89dd0:	aa1303e0 	mov	x0, x19
   89dd4:	9400457f 	bl	9b3d0 <CDWHCIRegister::Write()>
   89dd8:	aa1303e0 	mov	x0, x19
   89ddc:	94004571 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   89de0:	17ffffde 	b	89d58 <CDWHCIDevice::InterruptHandler()+0x178>
   89de4:	9103c281 	add	x1, x20, #0xf0
   89de8:	aa1403e0 	mov	x0, x20
   89dec:	940028c9 	bl	94110 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
   89df0:	17fffff2 	b	89db8 <CDWHCIDevice::InterruptHandler()+0x1d8>
   89df4:	d503201f 	nop
   89df8:	d503201f 	nop
   89dfc:	d503201f 	nop

0000000000089e00 <CDWHCIDevice::InterruptStub(void*)>:
   89e00:	b4000040 	cbz	x0, 89e08 <CDWHCIDevice::InterruptStub(void*)+0x8>
   89e04:	17ffff77 	b	89be0 <CDWHCIDevice::InterruptHandler()>
   89e08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   89e0c:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89e10:	b0000140 	adrp	x0, b2000 <SErrorStub+0xc>
   89e14:	910003fd 	mov	x29, sp
   89e18:	91030021 	add	x1, x1, #0xc0
   89e1c:	91288000 	add	x0, x0, #0xa20
   89e20:	5280bbe2 	mov	w2, #0x5df                 	// #1503
   89e24:	94006037 	bl	a1f00 <assertion_failed>
   89e28:	d503201f 	nop
   89e2c:	d503201f 	nop

0000000000089e30 <CDWHCIDevice::AllocateWaitBlock()>:
   89e30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89e34:	910003fd 	mov	x29, sp
   89e38:	a90153f3 	stp	x19, x20, [sp, #16]
   89e3c:	aa0003f4 	mov	x20, x0
   89e40:	b940e800 	ldr	w0, [x0, #232]
   89e44:	35000260 	cbnz	w0, 89e90 <CDWHCIDevice::AllocateWaitBlock()+0x60>
   89e48:	b940e681 	ldr	w1, [x20, #228]
   89e4c:	12000033 	and	w19, w1, #0x1
   89e50:	360003e1 	tbz	w1, #0, 89ecc <CDWHCIDevice::AllocateWaitBlock()+0x9c>
   89e54:	52800013 	mov	w19, #0x0                   	// #0
   89e58:	52800021 	mov	w1, #0x1                   	// #1
   89e5c:	14000004 	b	89e6c <CDWHCIDevice::AllocateWaitBlock()+0x3c>
   89e60:	b940e682 	ldr	w2, [x20, #228]
   89e64:	6a01005f 	tst	w2, w1
   89e68:	54000200 	b.eq	89ea8 <CDWHCIDevice::AllocateWaitBlock()+0x78>  // b.none
   89e6c:	11000673 	add	w19, w19, #0x1
   89e70:	0b010021 	add	w1, w1, w1
   89e74:	7100427f 	cmp	w19, #0x10
   89e78:	54ffff41 	b.ne	89e60 <CDWHCIDevice::AllocateWaitBlock()+0x30>  // b.any
   89e7c:	350001e0 	cbnz	w0, 89eb8 <CDWHCIDevice::AllocateWaitBlock()+0x88>
   89e80:	2a1303e0 	mov	w0, w19
   89e84:	a94153f3 	ldp	x19, x20, [sp, #16]
   89e88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89e8c:	d65f03c0 	ret
   89e90:	94008c7c 	bl	ad080 <EnterCritical>
   89e94:	b940e681 	ldr	w1, [x20, #228]
   89e98:	b940ea80 	ldr	w0, [x20, #232]
   89e9c:	12000033 	and	w19, w1, #0x1
   89ea0:	3707fda1 	tbnz	w1, #0, 89e54 <CDWHCIDevice::AllocateWaitBlock()+0x24>
   89ea4:	52800021 	mov	w1, #0x1                   	// #1
   89ea8:	b940e682 	ldr	w2, [x20, #228]
   89eac:	2a010041 	orr	w1, w2, w1
   89eb0:	b900e681 	str	w1, [x20, #228]
   89eb4:	34fffe60 	cbz	w0, 89e80 <CDWHCIDevice::AllocateWaitBlock()+0x50>
   89eb8:	94008ca2 	bl	ad140 <LeaveCritical>
   89ebc:	2a1303e0 	mov	w0, w19
   89ec0:	a94153f3 	ldp	x19, x20, [sp, #16]
   89ec4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89ec8:	d65f03c0 	ret
   89ecc:	b940e680 	ldr	w0, [x20, #228]
   89ed0:	32000000 	orr	w0, w0, #0x1
   89ed4:	b900e680 	str	w0, [x20, #228]
   89ed8:	17ffffea 	b	89e80 <CDWHCIDevice::AllocateWaitBlock()+0x50>
   89edc:	d503201f 	nop

0000000000089ee0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
   89ee0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89ee4:	71003c3f 	cmp	w1, #0xf
   89ee8:	910003fd 	mov	x29, sp
   89eec:	a90153f3 	stp	x19, x20, [sp, #16]
   89ef0:	540002c8 	b.hi	89f48 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>  // b.pmore
   89ef4:	aa0003f3 	mov	x19, x0
   89ef8:	b940e800 	ldr	w0, [x0, #232]
   89efc:	52800034 	mov	w20, #0x1                   	// #1
   89f00:	1ac12294 	lsl	w20, w20, w1
   89f04:	35000180 	cbnz	w0, 89f34 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x54>
   89f08:	b940e660 	ldr	w0, [x19, #228]
   89f0c:	6a14001f 	tst	w0, w20
   89f10:	54000280 	b.eq	89f60 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>  // b.none
   89f14:	b940e661 	ldr	w1, [x19, #228]
   89f18:	b940ea60 	ldr	w0, [x19, #232]
   89f1c:	0a340034 	bic	w20, w1, w20
   89f20:	b900e674 	str	w20, [x19, #228]
   89f24:	350000c0 	cbnz	w0, 89f3c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x5c>
   89f28:	a94153f3 	ldp	x19, x20, [sp, #16]
   89f2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89f30:	d65f03c0 	ret
   89f34:	94008c53 	bl	ad080 <EnterCritical>
   89f38:	17fffff4 	b	89f08 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x28>
   89f3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89f40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89f44:	14008c7f 	b	ad140 <LeaveCritical>
   89f48:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89f4c:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89f50:	91030021 	add	x1, x1, #0xc0
   89f54:	91034000 	add	x0, x0, #0xd0
   89f58:	5280d022 	mov	w2, #0x681                 	// #1665
   89f5c:	94005fe9 	bl	a1f00 <assertion_failed>
   89f60:	d0000141 	adrp	x1, b3000 <_etext+0x9c8>
   89f64:	d0000140 	adrp	x0, b3000 <_etext+0x9c8>
   89f68:	91030021 	add	x1, x1, #0xc0
   89f6c:	910d6000 	add	x0, x0, #0x358
   89f70:	5280d0c2 	mov	w2, #0x686                 	// #1670
   89f74:	94005fe3 	bl	a1f00 <assertion_failed>
   89f78:	d503201f 	nop
   89f7c:	d503201f 	nop

0000000000089f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
   89f80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89f84:	910003fd 	mov	x29, sp
   89f88:	a90153f3 	stp	x19, x20, [sp, #16]
   89f8c:	aa0003f4 	mov	x20, x0
   89f90:	a9025bf5 	stp	x21, x22, [sp, #32]
   89f94:	aa0103f5 	mov	x21, x1
   89f98:	a90363f7 	stp	x23, x24, [sp, #48]
   89f9c:	2a0403f7 	mov	w23, w4
   89fa0:	12001c58 	and	w24, w2, #0xff
   89fa4:	f90023f9 	str	x25, [sp, #64]
   89fa8:	12001c79 	and	w25, w3, #0xff
   89fac:	97ffffa1 	bl	89e30 <CDWHCIDevice::AllocateWaitBlock()>
   89fb0:	71003c1f 	cmp	w0, #0xf
   89fb4:	54000548 	b.hi	8a05c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xdc>  // b.pmore
   89fb8:	b4000615 	cbz	x21, 8a078 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf8>
   89fbc:	2a0003f3 	mov	w19, w0
   89fc0:	2a0003f6 	mov	w22, w0
   89fc4:	aa1303e2 	mov	x2, x19
   89fc8:	8b130293 	add	x19, x20, x19
   89fcc:	aa1503e0 	mov	x0, x21
   89fd0:	aa1403e3 	mov	x3, x20
   89fd4:	d0ffffe1 	adrp	x1, 87000 <CWM8960SoundController::CWM8960SoundController(CI2CMaster*, unsigned char)>
   89fd8:	912e8021 	add	x1, x1, #0xba0
   89fdc:	94003429 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   89fe0:	39435260 	ldrb	w0, [x19, #212]
   89fe4:	37000560 	tbnz	w0, #0, 8a090 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
   89fe8:	52800020 	mov	w0, #0x1                   	// #1
   89fec:	39035260 	strb	w0, [x19, #212]
   89ff0:	2a1703e4 	mov	w4, w23
   89ff4:	2a1903e3 	mov	w3, w25
   89ff8:	2a1803e2 	mov	w2, w24
   89ffc:	aa1503e1 	mov	x1, x21
   8a000:	aa1403e0 	mov	x0, x20
   8a004:	97fffa77 	bl	889e0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
   8a008:	36000220 	tbz	w0, #0, 8a04c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xcc>
   8a00c:	d503201f 	nop
   8a010:	39435262 	ldrb	w2, [x19, #212]
   8a014:	3707ffe2 	tbnz	w2, #0, 8a010 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x90>
   8a018:	2a1603e1 	mov	w1, w22
   8a01c:	aa1403e0 	mov	x0, x20
   8a020:	97ffffb0 	bl	89ee0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
   8a024:	aa1503e0 	mov	x0, x21
   8a028:	9400338e 	bl	96e60 <CUSBRequest::GetStatus() const>
   8a02c:	7100001f 	cmp	w0, #0x0
   8a030:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a034:	1a9f07e0 	cset	w0, ne	// ne = any
   8a038:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a03c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a040:	f94023f9 	ldr	x25, [sp, #64]
   8a044:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a048:	d65f03c0 	ret
   8a04c:	3903527f 	strb	wzr, [x19, #212]
   8a050:	2a1603e1 	mov	w1, w22
   8a054:	aa1403e0 	mov	x0, x20
   8a058:	97ffffa2 	bl	89ee0 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
   8a05c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a060:	52800000 	mov	w0, #0x0                   	// #0
   8a064:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a068:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a06c:	f94023f9 	ldr	x25, [sp, #64]
   8a070:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a074:	d65f03c0 	ret
   8a078:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a07c:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a080:	91030021 	add	x1, x1, #0xc0
   8a084:	9106c000 	add	x0, x0, #0x1b0
   8a088:	528059e2 	mov	w2, #0x2cf                 	// #719
   8a08c:	94005f9d 	bl	a1f00 <assertion_failed>
   8a090:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a094:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a098:	91030021 	add	x1, x1, #0xc0
   8a09c:	910e0000 	add	x0, x0, #0x380
   8a0a0:	52805a42 	mov	w2, #0x2d2                 	// #722
   8a0a4:	94005f97 	bl	a1f00 <assertion_failed>
   8a0a8:	d503201f 	nop
   8a0ac:	d503201f 	nop

000000000008a0b0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
   8a0b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a0b4:	910003fd 	mov	x29, sp
   8a0b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a0bc:	aa0103f3 	mov	x19, x1
   8a0c0:	39442401 	ldrb	w1, [x0, #265]
   8a0c4:	370003a1 	tbnz	w1, #0, 8a138 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x88>
   8a0c8:	f90013f5 	str	x21, [sp, #32]
   8a0cc:	b4000bb3 	cbz	x19, 8a240 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x190>
   8a0d0:	52800001 	mov	w1, #0x0                   	// #0
   8a0d4:	2a0203f4 	mov	w20, w2
   8a0d8:	aa0003f5 	mov	x21, x0
   8a0dc:	aa1303e0 	mov	x0, x19
   8a0e0:	94003354 	bl	96e30 <CUSBRequest::SetStatus(int)>
   8a0e4:	aa1303e0 	mov	x0, x19
   8a0e8:	94003346 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   8a0ec:	940017d1 	bl	90030 <CUSBEndpoint::GetType() const>
   8a0f0:	350002c0 	cbnz	w0, 8a148 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
   8a0f4:	35000b34 	cbnz	w20, 8a258 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1a8>
   8a0f8:	aa1303e0 	mov	x0, x19
   8a0fc:	94003375 	bl	96ed0 <CUSBRequest::GetSetupData()>
   8a100:	b4000b80 	cbz	x0, 8a270 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1c0>
   8a104:	39c00000 	ldrsb	w0, [x0]
   8a108:	37f80480 	tbnz	w0, #31, 8a198 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xe8>
   8a10c:	aa1303e0 	mov	x0, x19
   8a110:	94003398 	bl	96f70 <CUSBRequest::GetBufLen() const>
   8a114:	aa1303e1 	mov	x1, x19
   8a118:	52800004 	mov	w4, #0x0                   	// #0
   8a11c:	52800003 	mov	w3, #0x0                   	// #0
   8a120:	52800002 	mov	w2, #0x0                   	// #0
   8a124:	34000760 	cbz	w0, 8a210 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x160>
   8a128:	aa1503e0 	mov	x0, x21
   8a12c:	97ffff95 	bl	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a130:	37000680 	tbnz	w0, #0, 8a200 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x150>
   8a134:	f94013f5 	ldr	x21, [sp, #32]
   8a138:	52800000 	mov	w0, #0x0                   	// #0
   8a13c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a140:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a144:	d65f03c0 	ret
   8a148:	aa1303e0 	mov	x0, x19
   8a14c:	9400332d 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   8a150:	940017b8 	bl	90030 <CUSBEndpoint::GetType() const>
   8a154:	7100041f 	cmp	w0, #0x1
   8a158:	54000981 	b.ne	8a288 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d8>  // b.any
   8a15c:	aa1303e0 	mov	x0, x19
   8a160:	94003384 	bl	96f70 <CUSBRequest::GetBufLen() const>
   8a164:	34000a80 	cbz	w0, 8a2b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x204>
   8a168:	aa1303e0 	mov	x0, x19
   8a16c:	94003325 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   8a170:	940017b4 	bl	90040 <CUSBEndpoint::IsDirectionIn() const>
   8a174:	2a0003e2 	mov	w2, w0
   8a178:	2a1403e4 	mov	w4, w20
   8a17c:	aa1303e1 	mov	x1, x19
   8a180:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a184:	aa1503e0 	mov	x0, x21
   8a188:	f94013f5 	ldr	x21, [sp, #32]
   8a18c:	52800003 	mov	w3, #0x0                   	// #0
   8a190:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a194:	17ffff7b 	b	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a198:	aa1303e0 	mov	x0, x19
   8a19c:	94003375 	bl	96f70 <CUSBRequest::GetBufLen() const>
   8a1a0:	34000960 	cbz	w0, 8a2cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x21c>
   8a1a4:	aa1303e1 	mov	x1, x19
   8a1a8:	aa1503e0 	mov	x0, x21
   8a1ac:	52800004 	mov	w4, #0x0                   	// #0
   8a1b0:	52800003 	mov	w3, #0x0                   	// #0
   8a1b4:	52800002 	mov	w2, #0x0                   	// #0
   8a1b8:	97ffff72 	bl	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a1bc:	3607fbc0 	tbz	w0, #0, 8a134 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x84>
   8a1c0:	aa1303e1 	mov	x1, x19
   8a1c4:	aa1503e0 	mov	x0, x21
   8a1c8:	52800004 	mov	w4, #0x0                   	// #0
   8a1cc:	52800003 	mov	w3, #0x0                   	// #0
   8a1d0:	52800022 	mov	w2, #0x1                   	// #1
   8a1d4:	97ffff6b 	bl	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a1d8:	3607fae0 	tbz	w0, #0, 8a134 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x84>
   8a1dc:	aa1303e1 	mov	x1, x19
   8a1e0:	aa1503e0 	mov	x0, x21
   8a1e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a1e8:	52800004 	mov	w4, #0x0                   	// #0
   8a1ec:	f94013f5 	ldr	x21, [sp, #32]
   8a1f0:	52800023 	mov	w3, #0x1                   	// #1
   8a1f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a1f8:	52800002 	mov	w2, #0x0                   	// #0
   8a1fc:	17ffff61 	b	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a200:	aa1303e1 	mov	x1, x19
   8a204:	52800004 	mov	w4, #0x0                   	// #0
   8a208:	52800003 	mov	w3, #0x0                   	// #0
   8a20c:	52800002 	mov	w2, #0x0                   	// #0
   8a210:	aa1503e0 	mov	x0, x21
   8a214:	97ffff5b 	bl	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a218:	3607f8e0 	tbz	w0, #0, 8a134 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x84>
   8a21c:	aa1303e1 	mov	x1, x19
   8a220:	aa1503e0 	mov	x0, x21
   8a224:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a228:	52800023 	mov	w3, #0x1                   	// #1
   8a22c:	f94013f5 	ldr	x21, [sp, #32]
   8a230:	2a0303e2 	mov	w2, w3
   8a234:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a238:	52800004 	mov	w4, #0x0                   	// #0
   8a23c:	17ffff51 	b	89f80 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
   8a240:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a244:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a248:	91030021 	add	x1, x1, #0xc0
   8a24c:	9106c000 	add	x0, x0, #0x1b0
   8a250:	52801e42 	mov	w2, #0xf2                  	// #242
   8a254:	94005f2b 	bl	a1f00 <assertion_failed>
   8a258:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a25c:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a260:	91030021 	add	x1, x1, #0xc0
   8a264:	910e6000 	add	x0, x0, #0x398
   8a268:	52801f02 	mov	w2, #0xf8                  	// #248
   8a26c:	94005f25 	bl	a1f00 <assertion_failed>
   8a270:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a274:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a278:	91030021 	add	x1, x1, #0xc0
   8a27c:	910ee000 	add	x0, x0, #0x3b8
   8a280:	52801f62 	mov	w2, #0xfb                  	// #251
   8a284:	94005f1f 	bl	a1f00 <assertion_failed>
   8a288:	aa1303e0 	mov	x0, x19
   8a28c:	940032dd 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   8a290:	94001768 	bl	90030 <CUSBEndpoint::GetType() const>
   8a294:	7100081f 	cmp	w0, #0x2
   8a298:	54fff620 	b.eq	8a15c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>  // b.none
   8a29c:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a2a0:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a2a4:	91030021 	add	x1, x1, #0xc0
   8a2a8:	910f2000 	add	x0, x0, #0x3c8
   8a2ac:	528023e2 	mov	w2, #0x11f                 	// #287
   8a2b0:	94005f14 	bl	a1f00 <assertion_failed>
   8a2b4:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a2b8:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a2bc:	91030021 	add	x1, x1, #0xc0
   8a2c0:	9107e000 	add	x0, x0, #0x1f8
   8a2c4:	52802422 	mov	w2, #0x121                 	// #289
   8a2c8:	94005f0e 	bl	a1f00 <assertion_failed>
   8a2cc:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a2d0:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a2d4:	91030021 	add	x1, x1, #0xc0
   8a2d8:	9107e000 	add	x0, x0, #0x1f8
   8a2dc:	52801fe2 	mov	w2, #0xff                  	// #255
   8a2e0:	94005f08 	bl	a1f00 <assertion_failed>
   8a2e4:	d503201f 	nop
   8a2e8:	d503201f 	nop
   8a2ec:	d503201f 	nop

000000000008a2f0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
   8a2f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a2f4:	910003fd 	mov	x29, sp
   8a2f8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a2fc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a300:	a90363f7 	stp	x23, x24, [sp, #48]
   8a304:	b40004e1 	cbz	x1, 8a3a0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb0>
   8a308:	2a0203f5 	mov	w21, w2
   8a30c:	34000562 	cbz	w2, 8a3b8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
   8a310:	12001c77 	and	w23, w3, #0xff
   8a314:	aa0003f6 	mov	x22, x0
   8a318:	aa0103f4 	mov	x20, x1
   8a31c:	2a0403f3 	mov	w19, w4
   8a320:	520002f8 	eor	w24, w23, #0x1
   8a324:	350000c4 	cbnz	w4, 8a33c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
   8a328:	1400002a 	b	8a3d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
   8a32c:	52800020 	mov	w0, #0x1                   	// #1
   8a330:	9400818c 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   8a334:	71000673 	subs	w19, w19, #0x1
   8a338:	54000280 	b.eq	8a388 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x98>  // b.none
   8a33c:	aa1403e0 	mov	x0, x20
   8a340:	9400441c 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a344:	6a15001f 	tst	w0, w21
   8a348:	1a971303 	csel	w3, w24, w23, ne	// ne = any
   8a34c:	36000123 	tbz	w3, #0, 8a370 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x80>
   8a350:	f94016c3 	ldr	x3, [x22, #40]
   8a354:	b5fffec3 	cbnz	x3, 8a32c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x3c>
   8a358:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a35c:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a360:	91030021 	add	x1, x1, #0xc0
   8a364:	91042000 	add	x0, x0, #0x108
   8a368:	5280d2e2 	mov	w2, #0x697                 	// #1687
   8a36c:	94005ee5 	bl	a1f00 <assertion_failed>
   8a370:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a374:	52800020 	mov	w0, #0x1                   	// #1
   8a378:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a37c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a380:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a384:	d65f03c0 	ret
   8a388:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a38c:	52800000 	mov	w0, #0x0                   	// #0
   8a390:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a394:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a398:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a39c:	d65f03c0 	ret
   8a3a0:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a3a4:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a3a8:	91030021 	add	x1, x1, #0xc0
   8a3ac:	91110000 	add	x0, x0, #0x440
   8a3b0:	5280d222 	mov	w2, #0x691                 	// #1681
   8a3b4:	94005ed3 	bl	a1f00 <assertion_failed>
   8a3b8:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a3bc:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a3c0:	91030021 	add	x1, x1, #0xc0
   8a3c4:	91114000 	add	x0, x0, #0x450
   8a3c8:	5280d242 	mov	w2, #0x692                 	// #1682
   8a3cc:	94005ecd 	bl	a1f00 <assertion_failed>
   8a3d0:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8a3d4:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8a3d8:	91030021 	add	x1, x1, #0xc0
   8a3dc:	91118000 	add	x0, x0, #0x460
   8a3e0:	5280d262 	mov	w2, #0x693                 	// #1683
   8a3e4:	94005ec7 	bl	a1f00 <assertion_failed>
   8a3e8:	d503201f 	nop
   8a3ec:	d503201f 	nop

000000000008a3f0 <CDWHCIDevice::EnableRootPort()>:
   8a3f0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8a3f4:	910003fd 	mov	x29, sp
   8a3f8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a3fc:	aa0003f4 	mov	x20, x0
   8a400:	f90013f5 	str	x21, [sp, #32]
   8a404:	940063ef 	bl	a33c0 <CKernelOptions::Get()>
   8a408:	b4000300 	cbz	x0, 8a468 <CDWHCIDevice::EnableRootPort()+0x78>
   8a40c:	940063a1 	bl	a3290 <CKernelOptions::GetUSBPowerDelay() const>
   8a410:	2a0003f5 	mov	w21, w0
   8a414:	340002a0 	cbz	w0, 8a468 <CDWHCIDevice::EnableRootPort()+0x78>
   8a418:	9100c3f3 	add	x19, sp, #0x30
   8a41c:	52808801 	mov	w1, #0x440                 	// #1088
   8a420:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8a424:	aa1303e0 	mov	x0, x19
   8a428:	940043d6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a42c:	aa1403e0 	mov	x0, x20
   8a430:	2a1503e4 	mov	w4, w21
   8a434:	aa1303e1 	mov	x1, x19
   8a438:	52800023 	mov	w3, #0x1                   	// #1
   8a43c:	52800022 	mov	w2, #0x1                   	// #1
   8a440:	97ffffac 	bl	8a2f0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
   8a444:	2a0003f4 	mov	w20, w0
   8a448:	37000154 	tbnz	w20, #0, 8a470 <CDWHCIDevice::EnableRootPort()+0x80>
   8a44c:	aa1303e0 	mov	x0, x19
   8a450:	940043d4 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a454:	f94013f5 	ldr	x21, [sp, #32]
   8a458:	2a1403e0 	mov	w0, w20
   8a45c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a460:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a464:	d65f03c0 	ret
   8a468:	52803fd5 	mov	w21, #0x1fe                 	// #510
   8a46c:	17ffffeb 	b	8a418 <CDWHCIDevice::EnableRootPort()+0x28>
   8a470:	52800c80 	mov	w0, #0x64                  	// #100
   8a474:	9400813b 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   8a478:	aa1303e0 	mov	x0, x19
   8a47c:	940043cd 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a480:	aa1303e0 	mov	x0, x19
   8a484:	128005c1 	mov	w1, #0xffffffd1            	// #-47
   8a488:	94004402 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8a48c:	52802001 	mov	w1, #0x100                 	// #256
   8a490:	aa1303e0 	mov	x0, x19
   8a494:	9400440f 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8a498:	aa1303e0 	mov	x0, x19
   8a49c:	940043cd 	bl	9b3d0 <CDWHCIRegister::Write()>
   8a4a0:	52800640 	mov	w0, #0x32                  	// #50
   8a4a4:	9400812f 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   8a4a8:	aa1303e0 	mov	x0, x19
   8a4ac:	940043c1 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a4b0:	aa1303e0 	mov	x0, x19
   8a4b4:	128005c1 	mov	w1, #0xffffffd1            	// #-47
   8a4b8:	940043f6 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8a4bc:	12802001 	mov	w1, #0xfffffeff            	// #-257
   8a4c0:	aa1303e0 	mov	x0, x19
   8a4c4:	940043f3 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8a4c8:	aa1303e0 	mov	x0, x19
   8a4cc:	940043c1 	bl	9b3d0 <CDWHCIRegister::Write()>
   8a4d0:	52800280 	mov	w0, #0x14                  	// #20
   8a4d4:	94008123 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   8a4d8:	940063ba 	bl	a33c0 <CKernelOptions::Get()>
   8a4dc:	94006371 	bl	a32a0 <CKernelOptions::GetUSBFullSpeed() const>
   8a4e0:	3607fb60 	tbz	w0, #0, 8a44c <CDWHCIDevice::EnableRootPort()+0x5c>
   8a4e4:	910103f5 	add	x21, sp, #0x40
   8a4e8:	52808081 	mov	w1, #0x404                 	// #1028
   8a4ec:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8a4f0:	aa1503e0 	mov	x0, x21
   8a4f4:	940043a3 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a4f8:	52977001 	mov	w1, #0xbb80                	// #48000
   8a4fc:	aa1503e0 	mov	x0, x21
   8a500:	940043d0 	bl	9b440 <CDWHCIRegister::Set(unsigned int)>
   8a504:	aa1503e0 	mov	x0, x21
   8a508:	940043b2 	bl	9b3d0 <CDWHCIRegister::Write()>
   8a50c:	aa1503e0 	mov	x0, x21
   8a510:	940043a4 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a514:	aa1303e0 	mov	x0, x19
   8a518:	940043a2 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a51c:	f94013f5 	ldr	x21, [sp, #32]
   8a520:	2a1403e0 	mov	w0, w20
   8a524:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a528:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a52c:	d65f03c0 	ret

000000000008a530 <CDWHCIDevice::LogTransactionFailed(unsigned int)>:
   8a530:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a534:	910003fd 	mov	x29, sp
   8a538:	f9000bf3 	str	x19, [sp, #16]
   8a53c:	2a0103f3 	mov	w19, w1
   8a540:	94008ac8 	bl	ad060 <CurrentExecutionLevel>
   8a544:	7100041f 	cmp	w0, #0x1
   8a548:	54000089 	b.ls	8a558 <CDWHCIDevice::LogTransactionFailed(unsigned int)+0x28>  // b.plast
   8a54c:	f9400bf3 	ldr	x19, [sp, #16]
   8a550:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a554:	d65f03c0 	ret
   8a558:	940065a6 	bl	a3bf0 <CLogger::Get()>
   8a55c:	2a1303e4 	mov	w4, w19
   8a560:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8a564:	f9400bf3 	ldr	x19, [sp, #16]
   8a568:	910cc063 	add	x3, x3, #0x330
   8a56c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a570:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8a574:	52800042 	mov	w2, #0x2                   	// #2
   8a578:	9133e021 	add	x1, x1, #0xcf8
   8a57c:	14006791 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>

000000000008a580 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
   8a580:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a584:	910003fd 	mov	x29, sp
   8a588:	a90153f3 	stp	x19, x20, [sp, #16]
   8a58c:	9100c3f3 	add	x19, sp, #0x30
   8a590:	aa1303e0 	mov	x0, x19
   8a594:	f90013f5 	str	x21, [sp, #32]
   8a598:	aa0103f5 	mov	x21, x1
   8a59c:	2a0203e1 	mov	w1, w2
   8a5a0:	94004378 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a5a4:	d5033fbf 	dmb	sy
   8a5a8:	94006592 	bl	a3bf0 <CLogger::Get()>
   8a5ac:	aa0003f4 	mov	x20, x0
   8a5b0:	aa1303e0 	mov	x0, x19
   8a5b4:	9400437f 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a5b8:	aa1503e5 	mov	x5, x21
   8a5bc:	2a0003e4 	mov	w4, w0
   8a5c0:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8a5c4:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8a5c8:	9111c063 	add	x3, x3, #0x470
   8a5cc:	9133e021 	add	x1, x1, #0xcf8
   8a5d0:	52800082 	mov	w2, #0x4                   	// #4
   8a5d4:	aa1403e0 	mov	x0, x20
   8a5d8:	9400677a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a5dc:	aa1303e0 	mov	x0, x19
   8a5e0:	94004370 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a5e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a5e8:	f94013f5 	ldr	x21, [sp, #32]
   8a5ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a5f0:	d65f03c0 	ret
   8a5f4:	d503201f 	nop
   8a5f8:	d503201f 	nop
   8a5fc:	d503201f 	nop

000000000008a600 <CDWHCIDevice::DumpStatus(unsigned int)>:
   8a600:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8a604:	910003fd 	mov	x29, sp
   8a608:	a90153f3 	stp	x19, x20, [sp, #16]
   8a60c:	910103f3 	add	x19, sp, #0x40
   8a610:	aa1303e0 	mov	x0, x19
   8a614:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a618:	a90363f7 	stp	x23, x24, [sp, #48]
   8a61c:	2a0103f7 	mov	w23, w1
   8a620:	52a7f301 	mov	w1, #0x3f980000            	// #1066926080
   8a624:	94004357 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a628:	d5033fbf 	dmb	sy
   8a62c:	94006571 	bl	a3bf0 <CLogger::Get()>
   8a630:	b0000155 	adrp	x21, b3000 <_etext+0x9c8>
   8a634:	9111c2b5 	add	x21, x21, #0x470
   8a638:	aa0003f6 	mov	x22, x0
   8a63c:	b0000174 	adrp	x20, b7000 <_etext+0x49c8>
   8a640:	9133e294 	add	x20, x20, #0xcf8
   8a644:	aa1303e0 	mov	x0, x19
   8a648:	9400435a 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a64c:	aa1503e3 	mov	x3, x21
   8a650:	2a0003e4 	mov	w4, w0
   8a654:	aa1403e1 	mov	x1, x20
   8a658:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a65c:	911200a5 	add	x5, x5, #0x480
   8a660:	52800082 	mov	w2, #0x4                   	// #4
   8a664:	aa1603e0 	mov	x0, x22
   8a668:	94006756 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a66c:	aa1303e0 	mov	x0, x19
   8a670:	52800116 	mov	w22, #0x8                   	// #8
   8a674:	72a7f316 	movk	w22, #0x3f98, lsl #16
   8a678:	9400434a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a67c:	aa1303e0 	mov	x0, x19
   8a680:	2a1603e1 	mov	w1, w22
   8a684:	9400433f 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a688:	d5033fbf 	dmb	sy
   8a68c:	94006559 	bl	a3bf0 <CLogger::Get()>
   8a690:	aa0003f8 	mov	x24, x0
   8a694:	aa1303e0 	mov	x0, x19
   8a698:	94004346 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a69c:	aa1503e3 	mov	x3, x21
   8a6a0:	2a0003e4 	mov	w4, w0
   8a6a4:	aa1403e1 	mov	x1, x20
   8a6a8:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a6ac:	911240a5 	add	x5, x5, #0x490
   8a6b0:	52800082 	mov	w2, #0x4                   	// #4
   8a6b4:	aa1803e0 	mov	x0, x24
   8a6b8:	94006742 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a6bc:	aa1303e0 	mov	x0, x19
   8a6c0:	110012d6 	add	w22, w22, #0x4
   8a6c4:	94004337 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a6c8:	aa1303e0 	mov	x0, x19
   8a6cc:	2a1603e1 	mov	w1, w22
   8a6d0:	9400432c 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a6d4:	d5033fbf 	dmb	sy
   8a6d8:	94006546 	bl	a3bf0 <CLogger::Get()>
   8a6dc:	aa0003f8 	mov	x24, x0
   8a6e0:	aa1303e0 	mov	x0, x19
   8a6e4:	94004333 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a6e8:	aa1503e3 	mov	x3, x21
   8a6ec:	2a0003e4 	mov	w4, w0
   8a6f0:	aa1403e1 	mov	x1, x20
   8a6f4:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a6f8:	911260a5 	add	x5, x5, #0x498
   8a6fc:	52800082 	mov	w2, #0x4                   	// #4
   8a700:	aa1803e0 	mov	x0, x24
   8a704:	9400672f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a708:	aa1303e0 	mov	x0, x19
   8a70c:	94004325 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a710:	110012c1 	add	w1, w22, #0x4
   8a714:	aa1303e0 	mov	x0, x19
   8a718:	9400431a 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a71c:	d5033fbf 	dmb	sy
   8a720:	94006534 	bl	a3bf0 <CLogger::Get()>
   8a724:	aa0003f8 	mov	x24, x0
   8a728:	aa1303e0 	mov	x0, x19
   8a72c:	94004321 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a730:	aa1503e3 	mov	x3, x21
   8a734:	2a0003e4 	mov	w4, w0
   8a738:	aa1403e1 	mov	x1, x20
   8a73c:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a740:	911280a5 	add	x5, x5, #0x4a0
   8a744:	52800082 	mov	w2, #0x4                   	// #4
   8a748:	aa1803e0 	mov	x0, x24
   8a74c:	9400671d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a750:	aa1303e0 	mov	x0, x19
   8a754:	94004313 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a758:	110022c1 	add	w1, w22, #0x8
   8a75c:	aa1303e0 	mov	x0, x19
   8a760:	94004308 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a764:	d5033fbf 	dmb	sy
   8a768:	94006522 	bl	a3bf0 <CLogger::Get()>
   8a76c:	aa0003f8 	mov	x24, x0
   8a770:	aa1303e0 	mov	x0, x19
   8a774:	9400430f 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a778:	aa1503e3 	mov	x3, x21
   8a77c:	2a0003e4 	mov	w4, w0
   8a780:	aa1403e1 	mov	x1, x20
   8a784:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a788:	9112a0a5 	add	x5, x5, #0x4a8
   8a78c:	52800082 	mov	w2, #0x4                   	// #4
   8a790:	aa1803e0 	mov	x0, x24
   8a794:	9400670b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a798:	aa1303e0 	mov	x0, x19
   8a79c:	94004301 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a7a0:	110032c1 	add	w1, w22, #0xc
   8a7a4:	aa1303e0 	mov	x0, x19
   8a7a8:	940042f6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a7ac:	d5033fbf 	dmb	sy
   8a7b0:	94006510 	bl	a3bf0 <CLogger::Get()>
   8a7b4:	aa0003f8 	mov	x24, x0
   8a7b8:	aa1303e0 	mov	x0, x19
   8a7bc:	940042fd 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a7c0:	aa1503e3 	mov	x3, x21
   8a7c4:	2a0003e4 	mov	w4, w0
   8a7c8:	aa1403e1 	mov	x1, x20
   8a7cc:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a7d0:	9112e0a5 	add	x5, x5, #0x4b8
   8a7d4:	52800082 	mov	w2, #0x4                   	// #4
   8a7d8:	aa1803e0 	mov	x0, x24
   8a7dc:	940066f9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a7e0:	aa1303e0 	mov	x0, x19
   8a7e4:	940042ef 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a7e8:	110062c1 	add	w1, w22, #0x18
   8a7ec:	aa1303e0 	mov	x0, x19
   8a7f0:	940042e4 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a7f4:	d5033fbf 	dmb	sy
   8a7f8:	940064fe 	bl	a3bf0 <CLogger::Get()>
   8a7fc:	aa0003f8 	mov	x24, x0
   8a800:	aa1303e0 	mov	x0, x19
   8a804:	940042eb 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a808:	aa1503e3 	mov	x3, x21
   8a80c:	2a0003e4 	mov	w4, w0
   8a810:	aa1403e1 	mov	x1, x20
   8a814:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a818:	911320a5 	add	x5, x5, #0x4c8
   8a81c:	52800082 	mov	w2, #0x4                   	// #4
   8a820:	aa1803e0 	mov	x0, x24
   8a824:	940066e7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a828:	aa1303e0 	mov	x0, x19
   8a82c:	940042dd 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a830:	110072c1 	add	w1, w22, #0x1c
   8a834:	aa1303e0 	mov	x0, x19
   8a838:	940042d2 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a83c:	d5033fbf 	dmb	sy
   8a840:	940064ec 	bl	a3bf0 <CLogger::Get()>
   8a844:	aa0003f8 	mov	x24, x0
   8a848:	aa1303e0 	mov	x0, x19
   8a84c:	940042d9 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a850:	aa1503e3 	mov	x3, x21
   8a854:	2a0003e4 	mov	w4, w0
   8a858:	aa1403e1 	mov	x1, x20
   8a85c:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a860:	911360a5 	add	x5, x5, #0x4d8
   8a864:	52800082 	mov	w2, #0x4                   	// #4
   8a868:	aa1803e0 	mov	x0, x24
   8a86c:	940066d5 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a870:	aa1303e0 	mov	x0, x19
   8a874:	940042cb 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a878:	110082c1 	add	w1, w22, #0x20
   8a87c:	aa1303e0 	mov	x0, x19
   8a880:	940042c0 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a884:	d5033fbf 	dmb	sy
   8a888:	940064da 	bl	a3bf0 <CLogger::Get()>
   8a88c:	aa0003f8 	mov	x24, x0
   8a890:	aa1303e0 	mov	x0, x19
   8a894:	940042c7 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a898:	aa1503e3 	mov	x3, x21
   8a89c:	2a0003e4 	mov	w4, w0
   8a8a0:	aa1403e1 	mov	x1, x20
   8a8a4:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a8a8:	9113c0a5 	add	x5, x5, #0x4f0
   8a8ac:	52800082 	mov	w2, #0x4                   	// #4
   8a8b0:	aa1803e0 	mov	x0, x24
   8a8b4:	940066c3 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a8b8:	aa1303e0 	mov	x0, x19
   8a8bc:	940042b9 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a8c0:	1103d2c1 	add	w1, w22, #0xf4
   8a8c4:	aa1303e0 	mov	x0, x19
   8a8c8:	940042ae 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a8cc:	d5033fbf 	dmb	sy
   8a8d0:	940064c8 	bl	a3bf0 <CLogger::Get()>
   8a8d4:	aa0003f8 	mov	x24, x0
   8a8d8:	aa1303e0 	mov	x0, x19
   8a8dc:	940042b5 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a8e0:	aa1503e3 	mov	x3, x21
   8a8e4:	2a0003e4 	mov	w4, w0
   8a8e8:	aa1403e1 	mov	x1, x20
   8a8ec:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a8f0:	911400a5 	add	x5, x5, #0x500
   8a8f4:	52800082 	mov	w2, #0x4                   	// #4
   8a8f8:	aa1803e0 	mov	x0, x24
   8a8fc:	940066b1 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a900:	aa1303e0 	mov	x0, x19
   8a904:	940042a7 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a908:	110fd2c1 	add	w1, w22, #0x3f4
   8a90c:	aa1303e0 	mov	x0, x19
   8a910:	9400429c 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a914:	d5033fbf 	dmb	sy
   8a918:	940064b6 	bl	a3bf0 <CLogger::Get()>
   8a91c:	aa0003f8 	mov	x24, x0
   8a920:	aa1303e0 	mov	x0, x19
   8a924:	940042a3 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a928:	aa1503e3 	mov	x3, x21
   8a92c:	2a0003e4 	mov	w4, w0
   8a930:	aa1403e1 	mov	x1, x20
   8a934:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a938:	911460a5 	add	x5, x5, #0x518
   8a93c:	52800082 	mov	w2, #0x4                   	// #4
   8a940:	aa1803e0 	mov	x0, x24
   8a944:	9400669f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a948:	aa1303e0 	mov	x0, x19
   8a94c:	94004295 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a950:	111012c1 	add	w1, w22, #0x404
   8a954:	aa1303e0 	mov	x0, x19
   8a958:	9400428a 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a95c:	d5033fbf 	dmb	sy
   8a960:	940064a4 	bl	a3bf0 <CLogger::Get()>
   8a964:	aa0003f8 	mov	x24, x0
   8a968:	aa1303e0 	mov	x0, x19
   8a96c:	94004291 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a970:	aa1503e3 	mov	x3, x21
   8a974:	2a0003e4 	mov	w4, w0
   8a978:	aa1403e1 	mov	x1, x20
   8a97c:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a980:	9114a0a5 	add	x5, x5, #0x528
   8a984:	52800082 	mov	w2, #0x4                   	// #4
   8a988:	aa1803e0 	mov	x0, x24
   8a98c:	9400668d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a990:	aa1303e0 	mov	x0, x19
   8a994:	94004283 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a998:	111022c1 	add	w1, w22, #0x408
   8a99c:	aa1303e0 	mov	x0, x19
   8a9a0:	94004278 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a9a4:	d5033fbf 	dmb	sy
   8a9a8:	94006492 	bl	a3bf0 <CLogger::Get()>
   8a9ac:	aa0003f8 	mov	x24, x0
   8a9b0:	aa1303e0 	mov	x0, x19
   8a9b4:	9400427f 	bl	9b3b0 <CDWHCIRegister::Read()>
   8a9b8:	aa1503e3 	mov	x3, x21
   8a9bc:	2a0003e4 	mov	w4, w0
   8a9c0:	aa1403e1 	mov	x1, x20
   8a9c4:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8a9c8:	911500a5 	add	x5, x5, #0x540
   8a9cc:	52800082 	mov	w2, #0x4                   	// #4
   8a9d0:	aa1803e0 	mov	x0, x24
   8a9d4:	9400667b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a9d8:	aa1303e0 	mov	x0, x19
   8a9dc:	94004271 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8a9e0:	111032c1 	add	w1, w22, #0x40c
   8a9e4:	aa1303e0 	mov	x0, x19
   8a9e8:	94004266 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8a9ec:	d5033fbf 	dmb	sy
   8a9f0:	94006480 	bl	a3bf0 <CLogger::Get()>
   8a9f4:	aa0003f8 	mov	x24, x0
   8a9f8:	aa1303e0 	mov	x0, x19
   8a9fc:	9400426d 	bl	9b3b0 <CDWHCIRegister::Read()>
   8aa00:	aa1503e3 	mov	x3, x21
   8aa04:	2a0003e4 	mov	w4, w0
   8aa08:	aa1403e1 	mov	x1, x20
   8aa0c:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8aa10:	911560a5 	add	x5, x5, #0x558
   8aa14:	52800082 	mov	w2, #0x4                   	// #4
   8aa18:	aa1803e0 	mov	x0, x24
   8aa1c:	94006669 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8aa20:	aa1303e0 	mov	x0, x19
   8aa24:	9400425f 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8aa28:	1110d2c1 	add	w1, w22, #0x434
   8aa2c:	aa1303e0 	mov	x0, x19
   8aa30:	94004254 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8aa34:	d5033fbf 	dmb	sy
   8aa38:	9400646e 	bl	a3bf0 <CLogger::Get()>
   8aa3c:	aa0003f6 	mov	x22, x0
   8aa40:	aa1303e0 	mov	x0, x19
   8aa44:	9400425b 	bl	9b3b0 <CDWHCIRegister::Read()>
   8aa48:	aa1503e3 	mov	x3, x21
   8aa4c:	2a0003e4 	mov	w4, w0
   8aa50:	aa1403e1 	mov	x1, x20
   8aa54:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8aa58:	9115c0a5 	add	x5, x5, #0x570
   8aa5c:	52800082 	mov	w2, #0x4                   	// #4
   8aa60:	aa1603e0 	mov	x0, x22
   8aa64:	94006657 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8aa68:	aa1303e0 	mov	x0, x19
   8aa6c:	9400424d 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8aa70:	52980500 	mov	w0, #0xc028                	// #49192
   8aa74:	72a03f80 	movk	w0, #0x1fc, lsl #16
   8aa78:	0b0002f6 	add	w22, w23, w0
   8aa7c:	aa1303e0 	mov	x0, x19
   8aa80:	531b6ad6 	lsl	w22, w22, #5
   8aa84:	2a1603e1 	mov	w1, w22
   8aa88:	9400423e 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8aa8c:	d5033fbf 	dmb	sy
   8aa90:	94006458 	bl	a3bf0 <CLogger::Get()>
   8aa94:	aa0003f7 	mov	x23, x0
   8aa98:	aa1303e0 	mov	x0, x19
   8aa9c:	94004245 	bl	9b3b0 <CDWHCIRegister::Read()>
   8aaa0:	aa1503e3 	mov	x3, x21
   8aaa4:	2a0003e4 	mov	w4, w0
   8aaa8:	aa1403e1 	mov	x1, x20
   8aaac:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8aab0:	911600a5 	add	x5, x5, #0x580
   8aab4:	52800082 	mov	w2, #0x4                   	// #4
   8aab8:	aa1703e0 	mov	x0, x23
   8aabc:	94006641 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8aac0:	aa1303e0 	mov	x0, x19
   8aac4:	94004237 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8aac8:	110012c1 	add	w1, w22, #0x4
   8aacc:	aa1303e0 	mov	x0, x19
   8aad0:	9400422c 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8aad4:	d5033fbf 	dmb	sy
   8aad8:	94006446 	bl	a3bf0 <CLogger::Get()>
   8aadc:	aa0003f7 	mov	x23, x0
   8aae0:	aa1303e0 	mov	x0, x19
   8aae4:	94004233 	bl	9b3b0 <CDWHCIRegister::Read()>
   8aae8:	aa1503e3 	mov	x3, x21
   8aaec:	2a0003e4 	mov	w4, w0
   8aaf0:	aa1403e1 	mov	x1, x20
   8aaf4:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8aaf8:	911660a5 	add	x5, x5, #0x598
   8aafc:	52800082 	mov	w2, #0x4                   	// #4
   8ab00:	aa1703e0 	mov	x0, x23
   8ab04:	9400662f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ab08:	aa1303e0 	mov	x0, x19
   8ab0c:	94004225 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8ab10:	110022c1 	add	w1, w22, #0x8
   8ab14:	aa1303e0 	mov	x0, x19
   8ab18:	9400421a 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8ab1c:	d5033fbf 	dmb	sy
   8ab20:	94006434 	bl	a3bf0 <CLogger::Get()>
   8ab24:	aa0003f7 	mov	x23, x0
   8ab28:	aa1303e0 	mov	x0, x19
   8ab2c:	94004221 	bl	9b3b0 <CDWHCIRegister::Read()>
   8ab30:	aa1503e3 	mov	x3, x21
   8ab34:	2a0003e4 	mov	w4, w0
   8ab38:	aa1403e1 	mov	x1, x20
   8ab3c:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8ab40:	9116c0a5 	add	x5, x5, #0x5b0
   8ab44:	52800082 	mov	w2, #0x4                   	// #4
   8ab48:	aa1703e0 	mov	x0, x23
   8ab4c:	9400661d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ab50:	aa1303e0 	mov	x0, x19
   8ab54:	94004213 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8ab58:	110032c1 	add	w1, w22, #0xc
   8ab5c:	aa1303e0 	mov	x0, x19
   8ab60:	94004208 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8ab64:	d5033fbf 	dmb	sy
   8ab68:	94006422 	bl	a3bf0 <CLogger::Get()>
   8ab6c:	aa0003f7 	mov	x23, x0
   8ab70:	aa1303e0 	mov	x0, x19
   8ab74:	9400420f 	bl	9b3b0 <CDWHCIRegister::Read()>
   8ab78:	aa1503e3 	mov	x3, x21
   8ab7c:	2a0003e4 	mov	w4, w0
   8ab80:	aa1403e1 	mov	x1, x20
   8ab84:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8ab88:	911720a5 	add	x5, x5, #0x5c8
   8ab8c:	52800082 	mov	w2, #0x4                   	// #4
   8ab90:	aa1703e0 	mov	x0, x23
   8ab94:	9400660b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ab98:	aa1303e0 	mov	x0, x19
   8ab9c:	94004201 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8aba0:	110042c1 	add	w1, w22, #0x10
   8aba4:	aa1303e0 	mov	x0, x19
   8aba8:	940041f6 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8abac:	d5033fbf 	dmb	sy
   8abb0:	94006410 	bl	a3bf0 <CLogger::Get()>
   8abb4:	aa0003f7 	mov	x23, x0
   8abb8:	aa1303e0 	mov	x0, x19
   8abbc:	940041fd 	bl	9b3b0 <CDWHCIRegister::Read()>
   8abc0:	aa1503e3 	mov	x3, x21
   8abc4:	2a0003e4 	mov	w4, w0
   8abc8:	aa1403e1 	mov	x1, x20
   8abcc:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8abd0:	911780a5 	add	x5, x5, #0x5e0
   8abd4:	52800082 	mov	w2, #0x4                   	// #4
   8abd8:	aa1703e0 	mov	x0, x23
   8abdc:	940065f9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8abe0:	aa1303e0 	mov	x0, x19
   8abe4:	940041ef 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8abe8:	110052c1 	add	w1, w22, #0x14
   8abec:	aa1303e0 	mov	x0, x19
   8abf0:	940041e4 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8abf4:	d5033fbf 	dmb	sy
   8abf8:	940063fe 	bl	a3bf0 <CLogger::Get()>
   8abfc:	aa0003f6 	mov	x22, x0
   8ac00:	aa1303e0 	mov	x0, x19
   8ac04:	940041eb 	bl	9b3b0 <CDWHCIRegister::Read()>
   8ac08:	aa1503e3 	mov	x3, x21
   8ac0c:	2a0003e4 	mov	w4, w0
   8ac10:	aa1403e1 	mov	x1, x20
   8ac14:	b0000145 	adrp	x5, b3000 <_etext+0x9c8>
   8ac18:	9117e0a5 	add	x5, x5, #0x5f8
   8ac1c:	52800082 	mov	w2, #0x4                   	// #4
   8ac20:	aa1603e0 	mov	x0, x22
   8ac24:	940065e7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ac28:	aa1303e0 	mov	x0, x19
   8ac2c:	940041dd 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8ac30:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac34:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ac38:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ac3c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8ac40:	d65f03c0 	ret
   8ac44:	d503201f 	nop
   8ac48:	d503201f 	nop
   8ac4c:	d503201f 	nop

000000000008ac50 <CDWHCIDevice::~CDWHCIDevice()>:
   8ac50:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8ac54:	f00001e1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8ac58:	9109a021 	add	x1, x1, #0x268
   8ac5c:	910003fd 	mov	x29, sp
   8ac60:	a90153f3 	stp	x19, x20, [sp, #16]
   8ac64:	aa0003f3 	mov	x19, x0
   8ac68:	52800022 	mov	w2, #0x1                   	// #1
   8ac6c:	f9401400 	ldr	x0, [x0, #40]
   8ac70:	f9000261 	str	x1, [x19]
   8ac74:	39042662 	strb	w2, [x19, #265]
   8ac78:	b4000440 	cbz	x0, 8ad00 <CDWHCIDevice::~CDWHCIDevice()+0xb0>
   8ac7c:	52801900 	mov	w0, #0xc8                  	// #200
   8ac80:	94007f38 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   8ac84:	f9401260 	ldr	x0, [x19, #32]
   8ac88:	b4000480 	cbz	x0, 8ad18 <CDWHCIDevice::~CDWHCIDevice()+0xc8>
   8ac8c:	52800121 	mov	w1, #0x9                   	// #9
   8ac90:	94008cd4 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8ac94:	910083f4 	add	x20, sp, #0x20
   8ac98:	aa1303e0 	mov	x0, x19
   8ac9c:	97fff495 	bl	87ef0 <CDWHCIDevice::Reset()>
   8aca0:	aa1403e0 	mov	x0, x20
   8aca4:	52800001 	mov	w1, #0x0                   	// #0
   8aca8:	94005cbe 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8acac:	52800066 	mov	w6, #0x3                   	// #3
   8acb0:	52800045 	mov	w5, #0x2                   	// #2
   8acb4:	9100a3e2 	add	x2, sp, #0x28
   8acb8:	52800004 	mov	w4, #0x0                   	// #0
   8acbc:	52800283 	mov	w3, #0x14                  	// #20
   8acc0:	aa1403e0 	mov	x0, x20
   8acc4:	52900021 	mov	w1, #0x8001                	// #32769
   8acc8:	72a00041 	movk	w1, #0x2, lsl #16
   8accc:	290697e6 	stp	w6, w5, [sp, #52]
   8acd0:	94005d14 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8acd4:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8acd8:	aa1403e0 	mov	x0, x20
   8acdc:	94005cb5 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   8ace0:	9103c260 	add	x0, x19, #0xf0
   8ace4:	9400044f 	bl	8be20 <CDWHCIRootPort::~CDWHCIRootPort()>
   8ace8:	91010260 	add	x0, x19, #0x40
   8acec:	94000615 	bl	8c540 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>
   8acf0:	aa1303e0 	mov	x0, x19
   8acf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8acf8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8acfc:	1400244d 	b	93e30 <CUSBHostController::~CUSBHostController()>
   8ad00:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8ad04:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8ad08:	91030021 	add	x1, x1, #0xc0
   8ad0c:	91042000 	add	x0, x0, #0x108
   8ad10:	52800d82 	mov	w2, #0x6c                  	// #108
   8ad14:	94005c7b 	bl	a1f00 <assertion_failed>
   8ad18:	b0000141 	adrp	x1, b3000 <_etext+0x9c8>
   8ad1c:	b0000140 	adrp	x0, b3000 <_etext+0x9c8>
   8ad20:	91030021 	add	x1, x1, #0xc0
   8ad24:	9103c000 	add	x0, x0, #0xf0
   8ad28:	52800de2 	mov	w2, #0x6f                  	// #111
   8ad2c:	94005c75 	bl	a1f00 <assertion_failed>

000000000008ad30 <CDWHCIDevice::~CDWHCIDevice()>:
   8ad30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ad34:	910003fd 	mov	x29, sp
   8ad38:	f9000bf3 	str	x19, [sp, #16]
   8ad3c:	aa0003f3 	mov	x19, x0
   8ad40:	97ffffc4 	bl	8ac50 <CDWHCIDevice::~CDWHCIDevice()>
   8ad44:	aa1303e0 	mov	x0, x19
   8ad48:	d2802201 	mov	x1, #0x110                 	// #272
   8ad4c:	f9400bf3 	ldr	x19, [sp, #16]
   8ad50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ad54:	14008397 	b	abbb0 <operator delete(void*, unsigned long)>
   8ad58:	d503201f 	nop
   8ad5c:	d503201f 	nop

000000000008ad60 <CDWHCIDevice::ReScanDevices()>:
   8ad60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ad64:	910003fd 	mov	x29, sp
   8ad68:	39442001 	ldrb	w1, [x0, #264]
   8ad6c:	f9000bf3 	str	x19, [sp, #16]
   8ad70:	aa0003f3 	mov	x19, x0
   8ad74:	37000161 	tbnz	w1, #0, 8ada0 <CDWHCIDevice::ReScanDevices()+0x40>
   8ad78:	97fffd9e 	bl	8a3f0 <CDWHCIDevice::EnableRootPort()>
   8ad7c:	360001a0 	tbz	w0, #0, 8adb0 <CDWHCIDevice::ReScanDevices()+0x50>
   8ad80:	52800020 	mov	w0, #0x1                   	// #1
   8ad84:	39042260 	strb	w0, [x19, #264]
   8ad88:	9103c260 	add	x0, x19, #0xf0
   8ad8c:	9400049d 	bl	8c000 <CDWHCIRootPort::Initialize()>
   8ad90:	36000220 	tbz	w0, #0, 8add4 <CDWHCIDevice::ReScanDevices()+0x74>
   8ad94:	f9400bf3 	ldr	x19, [sp, #16]
   8ad98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ad9c:	d65f03c0 	ret
   8ada0:	f9400bf3 	ldr	x19, [sp, #16]
   8ada4:	9103c000 	add	x0, x0, #0xf0
   8ada8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8adac:	14000441 	b	8beb0 <CDWHCIRootPort::ReScanDevices()>
   8adb0:	94006390 	bl	a3bf0 <CLogger::Get()>
   8adb4:	f9400bf3 	ldr	x19, [sp, #16]
   8adb8:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8adbc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8adc0:	9118c063 	add	x3, x3, #0x630
   8adc4:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8adc8:	52800042 	mov	w2, #0x2                   	// #2
   8adcc:	9133e021 	add	x1, x1, #0xcf8
   8add0:	1400657c 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8add4:	94006387 	bl	a3bf0 <CLogger::Get()>
   8add8:	f9400bf3 	ldr	x19, [sp, #16]
   8addc:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8ade0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ade4:	91184063 	add	x3, x3, #0x610
   8ade8:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8adec:	52800022 	mov	w2, #0x1                   	// #1
   8adf0:	9133e021 	add	x1, x1, #0xcf8
   8adf4:	14006573 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8adf8:	d503201f 	nop
   8adfc:	d503201f 	nop

000000000008ae00 <CDWHCIDevice::Initialize(bool)>:
   8ae00:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8ae04:	910003fd 	mov	x29, sp
   8ae08:	a90153f3 	stp	x19, x20, [sp, #16]
   8ae0c:	aa0003f3 	mov	x19, x0
   8ae10:	52800400 	mov	w0, #0x20                  	// #32
   8ae14:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ae18:	12001c36 	and	w22, w1, #0xff
   8ae1c:	52800021 	mov	w1, #0x1                   	// #1
   8ae20:	f9001bf7 	str	x23, [sp, #48]
   8ae24:	94003107 	bl	97240 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae28:	52800021 	mov	w1, #0x1                   	// #1
   8ae2c:	52800200 	mov	w0, #0x10                  	// #16
   8ae30:	94000aa0 	bl	8d8b0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae34:	52800021 	mov	w1, #0x1                   	// #1
   8ae38:	52800200 	mov	w0, #0x10                  	// #16
   8ae3c:	940001a9 	bl	8b4e0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae40:	52800021 	mov	w1, #0x1                   	// #1
   8ae44:	52800200 	mov	w0, #0x10                  	// #16
   8ae48:	940003d6 	bl	8bda0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae4c:	52800021 	mov	w1, #0x1                   	// #1
   8ae50:	52800200 	mov	w0, #0x10                  	// #16
   8ae54:	94000277 	bl	8b830 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae58:	52800200 	mov	w0, #0x10                  	// #16
   8ae5c:	52800021 	mov	w1, #0x1                   	// #1
   8ae60:	94000c18 	bl	8dec0 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>
   8ae64:	f9401260 	ldr	x0, [x19, #32]
   8ae68:	b4000e20 	cbz	x0, 8b02c <CDWHCIDevice::Initialize(bool)+0x22c>
   8ae6c:	f9401660 	ldr	x0, [x19, #40]
   8ae70:	b4000ea0 	cbz	x0, 8b044 <CDWHCIDevice::Initialize(bool)+0x244>
   8ae74:	910103f4 	add	x20, sp, #0x40
   8ae78:	52800801 	mov	w1, #0x40                  	// #64
   8ae7c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8ae80:	aa1403e0 	mov	x0, x20
   8ae84:	9400413f 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8ae88:	aa1403e0 	mov	x0, x20
   8ae8c:	94004149 	bl	9b3b0 <CDWHCIRegister::Read()>
   8ae90:	52850141 	mov	w1, #0x280a                	// #10250
   8ae94:	72a9ea81 	movk	w1, #0x4f54, lsl #16
   8ae98:	6b01001f 	cmp	w0, w1
   8ae9c:	540007c1 	b.ne	8af94 <CDWHCIDevice::Initialize(bool)+0x194>  // b.any
   8aea0:	aa1303e0 	mov	x0, x19
   8aea4:	97fff3f7 	bl	87e80 <CDWHCIDevice::PowerOn()>
   8aea8:	36000b20 	tbz	w0, #0, 8b00c <CDWHCIDevice::Initialize(bool)+0x20c>
   8aeac:	910143f5 	add	x21, sp, #0x50
   8aeb0:	52800101 	mov	w1, #0x8                   	// #8
   8aeb4:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8aeb8:	aa1503e0 	mov	x0, x21
   8aebc:	94004131 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8aec0:	aa1503e0 	mov	x0, x21
   8aec4:	9400413b 	bl	9b3b0 <CDWHCIRegister::Read()>
   8aec8:	12800021 	mov	w1, #0xfffffffe            	// #-2
   8aecc:	aa1503e0 	mov	x0, x21
   8aed0:	94004170 	bl	9b490 <CDWHCIRegister::And(unsigned int)>
   8aed4:	aa1503e0 	mov	x0, x21
   8aed8:	9400413e 	bl	9b3d0 <CDWHCIRegister::Write()>
   8aedc:	f9401260 	ldr	x0, [x19, #32]
   8aee0:	b4000d00 	cbz	x0, 8b080 <CDWHCIDevice::Initialize(bool)+0x280>
   8aee4:	aa1303e3 	mov	x3, x19
   8aee8:	f0ffffe2 	adrp	x2, 89000 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c0>
   8aeec:	91380042 	add	x2, x2, #0xe00
   8aef0:	52800121 	mov	w1, #0x9                   	// #9
   8aef4:	94008bef 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8aef8:	aa1303e0 	mov	x0, x19
   8aefc:	97fff435 	bl	87fd0 <CDWHCIDevice::InitCore()>
   8af00:	36000740 	tbz	w0, #0, 8afe8 <CDWHCIDevice::Initialize(bool)+0x1e8>
   8af04:	910183f7 	add	x23, sp, #0x60
   8af08:	52800101 	mov	w1, #0x8                   	// #8
   8af0c:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8af10:	aa1703e0 	mov	x0, x23
   8af14:	9400411b 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8af18:	aa1703e0 	mov	x0, x23
   8af1c:	94004125 	bl	9b3b0 <CDWHCIRegister::Read()>
   8af20:	52800021 	mov	w1, #0x1                   	// #1
   8af24:	aa1703e0 	mov	x0, x23
   8af28:	9400416a 	bl	9b4d0 <CDWHCIRegister::Or(unsigned int)>
   8af2c:	aa1703e0 	mov	x0, x23
   8af30:	94004128 	bl	9b3d0 <CDWHCIRegister::Write()>
   8af34:	aa1703e0 	mov	x0, x23
   8af38:	9400411a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8af3c:	aa1303e0 	mov	x0, x19
   8af40:	97fff5e8 	bl	886e0 <CDWHCIDevice::InitHost()>
   8af44:	12001c17 	and	w23, w0, #0xff
   8af48:	360008a0 	tbz	w0, #0, 8b05c <CDWHCIDevice::Initialize(bool)+0x25c>
   8af4c:	aa1303e0 	mov	x0, x19
   8af50:	9400246c 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   8af54:	12001c00 	and	w0, w0, #0xff
   8af58:	52000000 	eor	w0, w0, #0x1
   8af5c:	2a0002d6 	orr	w22, w22, w0
   8af60:	36000076 	tbz	w22, #0, 8af6c <CDWHCIDevice::Initialize(bool)+0x16c>
   8af64:	aa1303e0 	mov	x0, x19
   8af68:	97ffff7e 	bl	8ad60 <CDWHCIDevice::ReScanDevices()>
   8af6c:	aa1503e0 	mov	x0, x21
   8af70:	9400410c 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8af74:	aa1403e0 	mov	x0, x20
   8af78:	9400410a 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8af7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af80:	2a1703e0 	mov	w0, w23
   8af84:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8af88:	f9401bf7 	ldr	x23, [sp, #48]
   8af8c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8af90:	d65f03c0 	ret
   8af94:	94006317 	bl	a3bf0 <CLogger::Get()>
   8af98:	aa0003f3 	mov	x19, x0
   8af9c:	aa1403e0 	mov	x0, x20
   8afa0:	9400411c 	bl	9b410 <CDWHCIRegister::Get() const>
   8afa4:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8afa8:	2a0003e4 	mov	w4, w0
   8afac:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8afb0:	aa1303e0 	mov	x0, x19
   8afb4:	91196063 	add	x3, x3, #0x658
   8afb8:	9133e021 	add	x1, x1, #0xcf8
   8afbc:	52800022 	mov	w2, #0x1                   	// #1
   8afc0:	94006500 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8afc4:	aa1403e0 	mov	x0, x20
   8afc8:	52800017 	mov	w23, #0x0                   	// #0
   8afcc:	940040f5 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8afd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8afd4:	2a1703e0 	mov	w0, w23
   8afd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8afdc:	f9401bf7 	ldr	x23, [sp, #48]
   8afe0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8afe4:	d65f03c0 	ret
   8afe8:	94006302 	bl	a3bf0 <CLogger::Get()>
   8afec:	52800017 	mov	w23, #0x0                   	// #0
   8aff0:	b0000143 	adrp	x3, b3000 <_etext+0x9c8>
   8aff4:	b0000161 	adrp	x1, b7000 <_etext+0x49c8>
   8aff8:	911a0063 	add	x3, x3, #0x680
   8affc:	9133e021 	add	x1, x1, #0xcf8
   8b000:	52800022 	mov	w2, #0x1                   	// #1
   8b004:	940064ef 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b008:	17ffffd9 	b	8af6c <CDWHCIDevice::Initialize(bool)+0x16c>
   8b00c:	940062f9 	bl	a3bf0 <CLogger::Get()>
   8b010:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8b014:	90000161 	adrp	x1, b7000 <_etext+0x49c8>
   8b018:	9119c063 	add	x3, x3, #0x670
   8b01c:	9133e021 	add	x1, x1, #0xcf8
   8b020:	52800022 	mov	w2, #0x1                   	// #1
   8b024:	940064e7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b028:	17ffffe7 	b	8afc4 <CDWHCIDevice::Initialize(bool)+0x1c4>
   8b02c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b030:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b034:	91030021 	add	x1, x1, #0xc0
   8b038:	9103c000 	add	x0, x0, #0xf0
   8b03c:	528012c2 	mov	w2, #0x96                  	// #150
   8b040:	94005bb0 	bl	a1f00 <assertion_failed>
   8b044:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b048:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b04c:	91030021 	add	x1, x1, #0xc0
   8b050:	91042000 	add	x0, x0, #0x108
   8b054:	528012e2 	mov	w2, #0x97                  	// #151
   8b058:	94005baa 	bl	a1f00 <assertion_failed>
   8b05c:	940062e5 	bl	a3bf0 <CLogger::Get()>
   8b060:	52800017 	mov	w23, #0x0                   	// #0
   8b064:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8b068:	90000161 	adrp	x1, b7000 <_etext+0x49c8>
   8b06c:	911a6063 	add	x3, x3, #0x698
   8b070:	9133e021 	add	x1, x1, #0xcf8
   8b074:	52800022 	mov	w2, #0x1                   	// #1
   8b078:	940064d2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b07c:	17ffffbc 	b	8af6c <CDWHCIDevice::Initialize(bool)+0x16c>
   8b080:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b084:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b088:	91030021 	add	x1, x1, #0xc0
   8b08c:	9103c000 	add	x0, x0, #0xf0
   8b090:	52801582 	mov	w2, #0xac                  	// #172
   8b094:	94005b9b 	bl	a1f00 <assertion_failed>
	...

000000000008b0a0 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   8b0a0:	d65f03c0 	ret
   8b0a4:	d503201f 	nop
   8b0a8:	d503201f 	nop
   8b0ac:	d503201f 	nop

000000000008b0b0 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
   8b0b0:	b9401001 	ldr	w1, [x0, #16]
   8b0b4:	7100143f 	cmp	w1, #0x5
   8b0b8:	54000060 	b.eq	8b0c4 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()+0x14>  // b.none
   8b0bc:	52800021 	mov	w1, #0x1                   	// #1
   8b0c0:	79003001 	strh	w1, [x0, #24]
   8b0c4:	b900101f 	str	wzr, [x0, #16]
   8b0c8:	d65f03c0 	ret
   8b0cc:	d503201f 	nop

000000000008b0d0 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
   8b0d0:	52800000 	mov	w0, #0x0                   	// #0
   8b0d4:	d65f03c0 	ret
   8b0d8:	d503201f 	nop
   8b0dc:	d503201f 	nop

000000000008b0e0 <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)>:
   8b0e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b0e4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b0e8:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b0ec:	910003fd 	mov	x29, sp
   8b0f0:	911ac021 	add	x1, x1, #0x6b0
   8b0f4:	9135c000 	add	x0, x0, #0xd70
   8b0f8:	52801642 	mov	w2, #0xb2                  	// #178
   8b0fc:	94005b81 	bl	a1f00 <assertion_failed>

000000000008b100 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
   8b100:	b9401001 	ldr	w1, [x0, #16]
   8b104:	52800042 	mov	w2, #0x2                   	// #2
   8b108:	79003002 	strh	w2, [x0, #24]
   8b10c:	71000c3f 	cmp	w1, #0x3
   8b110:	540001a8 	b.hi	8b144 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x44>  // b.pmore
   8b114:	7100043f 	cmp	w1, #0x1
   8b118:	540000e8 	b.hi	8b134 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>  // b.pmore
   8b11c:	540001e1 	b.ne	8b158 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>  // b.any
   8b120:	90000161 	adrp	x1, b7000 <_etext+0x49c8>
   8b124:	fd412820 	ldr	d0, [x1, #592]
   8b128:	fd000800 	str	d0, [x0, #16]
   8b12c:	52800020 	mov	w0, #0x1                   	// #1
   8b130:	d65f03c0 	ret
   8b134:	52800021 	mov	w1, #0x1                   	// #1
   8b138:	79003001 	strh	w1, [x0, #24]
   8b13c:	52800020 	mov	w0, #0x1                   	// #1
   8b140:	d65f03c0 	ret
   8b144:	51001021 	sub	w1, w1, #0x4
   8b148:	7100043f 	cmp	w1, #0x1
   8b14c:	54000068 	b.hi	8b158 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>  // b.pmore
   8b150:	52800000 	mov	w0, #0x0                   	// #0
   8b154:	d65f03c0 	ret
   8b158:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b15c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b160:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b164:	910003fd 	mov	x29, sp
   8b168:	911ac021 	add	x1, x1, #0x6b0
   8b16c:	9135c000 	add	x0, x0, #0xd70
   8b170:	52800c02 	mov	w2, #0x60                  	// #96
   8b174:	94005b63 	bl	a1f00 <assertion_failed>
   8b178:	d503201f 	nop
   8b17c:	d503201f 	nop

000000000008b180 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
   8b180:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b184:	910003fd 	mov	x29, sp
   8b188:	b9401002 	ldr	w2, [x0, #16]
   8b18c:	34000202 	cbz	w2, 8b1cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x4c>
   8b190:	51000842 	sub	w2, w2, #0x2
   8b194:	7100045f 	cmp	w2, #0x1
   8b198:	54000368 	b.hi	8b204 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x84>  // b.pmore
   8b19c:	37000221 	tbnz	w1, #0, 8b1e0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
   8b1a0:	721b043f 	tst	w1, #0x60
   8b1a4:	54000260 	b.eq	8b1f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>  // b.none
   8b1a8:	b9401401 	ldr	w1, [x0, #20]
   8b1ac:	52800062 	mov	w2, #0x3                   	// #3
   8b1b0:	51000423 	sub	w3, w1, #0x1
   8b1b4:	b9001403 	str	w3, [x0, #20]
   8b1b8:	350000e1 	cbnz	w1, 8b1d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x54>
   8b1bc:	52800021 	mov	w1, #0x1                   	// #1
   8b1c0:	528000a2 	mov	w2, #0x5                   	// #5
   8b1c4:	79003001 	strh	w1, [x0, #24]
   8b1c8:	14000003 	b	8b1d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x54>
   8b1cc:	52800022 	mov	w2, #0x1                   	// #1
   8b1d0:	36280261 	tbz	w1, #5, 8b21c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x9c>
   8b1d4:	b9001002 	str	w2, [x0, #16]
   8b1d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b1dc:	d65f03c0 	ret
   8b1e0:	52800082 	mov	w2, #0x4                   	// #4
   8b1e4:	b9001002 	str	w2, [x0, #16]
   8b1e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b1ec:	d65f03c0 	ret
   8b1f0:	36200221 	tbz	w1, #4, 8b234 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb4>
   8b1f4:	528000a1 	mov	w1, #0x5                   	// #5
   8b1f8:	528000a2 	mov	w2, #0x5                   	// #5
   8b1fc:	79003001 	strh	w1, [x0, #24]
   8b200:	17fffff5 	b	8b1d4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x54>
   8b204:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b208:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b20c:	911ac021 	add	x1, x1, #0x6b0
   8b210:	9135c000 	add	x0, x0, #0xd70
   8b214:	528012a2 	mov	w2, #0x95                  	// #149
   8b218:	94005b3a 	bl	a1f00 <assertion_failed>
   8b21c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b220:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b224:	911ac021 	add	x1, x1, #0x6b0
   8b228:	911b2000 	add	x0, x0, #0x6c8
   8b22c:	52800d82 	mov	w2, #0x6c                  	// #108
   8b230:	94005b34 	bl	a1f00 <assertion_failed>
   8b234:	b9001fe1 	str	w1, [sp, #28]
   8b238:	9400626e 	bl	a3bf0 <CLogger::Get()>
   8b23c:	b9401fe1 	ldr	w1, [sp, #28]
   8b240:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8b244:	911bc063 	add	x3, x3, #0x6f0
   8b248:	52800022 	mov	w2, #0x1                   	// #1
   8b24c:	2a0103e4 	mov	w4, w1
   8b250:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b254:	911c2021 	add	x1, x1, #0x708
   8b258:	9400645a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b25c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b260:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b264:	911ac021 	add	x1, x1, #0x6b0
   8b268:	9135c000 	add	x0, x0, #0xd70
   8b26c:	52801202 	mov	w2, #0x90                  	// #144
   8b270:	94005b24 	bl	a1f00 <assertion_failed>
   8b274:	d503201f 	nop
   8b278:	d503201f 	nop
   8b27c:	d503201f 	nop

000000000008b280 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()>:
   8b280:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b284:	52808101 	mov	w1, #0x408                 	// #1032
   8b288:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8b28c:	910003fd 	mov	x29, sp
   8b290:	a90153f3 	stp	x19, x20, [sp, #16]
   8b294:	9100c3f4 	add	x20, sp, #0x30
   8b298:	f90013f5 	str	x21, [sp, #32]
   8b29c:	aa0003f5 	mov	x21, x0
   8b2a0:	aa1403e0 	mov	x0, x20
   8b2a4:	94004037 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8b2a8:	aa1403e0 	mov	x0, x20
   8b2ac:	94004041 	bl	9b3b0 <CDWHCIRegister::Read()>
   8b2b0:	12003c13 	and	w19, w0, #0xffff
   8b2b4:	94006043 	bl	a33c0 <CKernelOptions::Get()>
   8b2b8:	94005ffe 	bl	a32b0 <CKernelOptions::GetUSBBoost() const>
   8b2bc:	370000c0 	tbnz	w0, #0, 8b2d4 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x54>
   8b2c0:	794032a0 	ldrh	w0, [x21, #24]
   8b2c4:	0b130013 	add	w19, w0, w19
   8b2c8:	71001c1f 	cmp	w0, #0x7
   8b2cc:	12003673 	and	w19, w19, #0x3fff
   8b2d0:	54000108 	b.hi	8b2f0 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x70>  // b.pmore
   8b2d4:	aa1403e0 	mov	x0, x20
   8b2d8:	94004032 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8b2dc:	f94013f5 	ldr	x21, [sp, #32]
   8b2e0:	2a1303e0 	mov	w0, w19
   8b2e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b2e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b2ec:	d65f03c0 	ret
   8b2f0:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b2f4:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b2f8:	911ac021 	add	x1, x1, #0x6b0
   8b2fc:	911c4000 	add	x0, x0, #0x710
   8b300:	52801582 	mov	w2, #0xac                  	// #172
   8b304:	94005aff 	bl	a1f00 <assertion_failed>
   8b308:	d503201f 	nop
   8b30c:	d503201f 	nop

000000000008b310 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
   8b310:	f00001e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   8b314:	f945c422 	ldr	x2, [x1, #2952]
   8b318:	b4000082 	cbz	x2, 8b328 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()+0x18>
   8b31c:	aa0003e1 	mov	x1, x0
   8b320:	aa0203e0 	mov	x0, x2
   8b324:	14005c93 	b	a2570 <CClassAllocator::Free(void*)>
   8b328:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b32c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b330:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b334:	910003fd 	mov	x29, sp
   8b338:	911ac021 	add	x1, x1, #0x6b0
   8b33c:	911ca000 	add	x0, x0, #0x728
   8b340:	52801782 	mov	w2, #0xbc                  	// #188
   8b344:	94005aef 	bl	a1f00 <assertion_failed>
   8b348:	d503201f 	nop
   8b34c:	d503201f 	nop

000000000008b350 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
   8b350:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b354:	d00001e1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8b358:	910ac021 	add	x1, x1, #0x2b0
   8b35c:	910003fd 	mov	x29, sp
   8b360:	f9000bf3 	str	x19, [sp, #16]
   8b364:	aa0003f3 	mov	x19, x0
   8b368:	f9000001 	str	x1, [x0]
   8b36c:	94007dd9 	bl	aaad0 <CTimer::Get()>
   8b370:	f9000660 	str	x0, [x19, #8]
   8b374:	528000c2 	mov	w2, #0x6                   	// #6
   8b378:	52800101 	mov	w1, #0x8                   	// #8
   8b37c:	b9001262 	str	w2, [x19, #16]
   8b380:	79003261 	strh	w1, [x19, #24]
   8b384:	b4000080 	cbz	x0, 8b394 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
   8b388:	f9400bf3 	ldr	x19, [sp, #16]
   8b38c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b390:	d65f03c0 	ret
   8b394:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b398:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b39c:	911ac021 	add	x1, x1, #0x6b0
   8b3a0:	91042000 	add	x0, x0, #0x108
   8b3a4:	528005e2 	mov	w2, #0x2f                  	// #47
   8b3a8:	94005ad6 	bl	a1f00 <assertion_failed>
   8b3ac:	d503201f 	nop

000000000008b3b0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned long)>:
   8b3b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b3b4:	f100801f 	cmp	x0, #0x20
   8b3b8:	910003fd 	mov	x29, sp
   8b3bc:	540000c1 	b.ne	8b3d4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned long)+0x24>  // b.any
   8b3c0:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8b3c4:	f945c400 	ldr	x0, [x0, #2952]
   8b3c8:	b4000120 	cbz	x0, 8b3ec <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned long)+0x3c>
   8b3cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b3d0:	14005c34 	b	a24a0 <CClassAllocator::Allocate()>
   8b3d4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b3d8:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b3dc:	911ac021 	add	x1, x1, #0x6b0
   8b3e0:	911d0000 	add	x0, x0, #0x740
   8b3e4:	52801782 	mov	w2, #0xbc                  	// #188
   8b3e8:	94005ac6 	bl	a1f00 <assertion_failed>
   8b3ec:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b3f0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b3f4:	911ac021 	add	x1, x1, #0x6b0
   8b3f8:	911ca000 	add	x0, x0, #0x728
   8b3fc:	52801782 	mov	w2, #0xbc                  	// #188
   8b400:	94005ac0 	bl	a1f00 <assertion_failed>
   8b404:	d503201f 	nop
   8b408:	d503201f 	nop
   8b40c:	d503201f 	nop

000000000008b410 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned long)>:
   8b410:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b414:	f100803f 	cmp	x1, #0x20
   8b418:	910003fd 	mov	x29, sp
   8b41c:	54000101 	b.ne	8b43c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned long)+0x2c>  // b.any
   8b420:	aa0003e2 	mov	x2, x0
   8b424:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8b428:	f945c400 	ldr	x0, [x0, #2952]
   8b42c:	b4000140 	cbz	x0, 8b454 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned long)+0x44>
   8b430:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b434:	aa0203e1 	mov	x1, x2
   8b438:	14005c4e 	b	a2570 <CClassAllocator::Free(void*)>
   8b43c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b440:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b444:	911ac021 	add	x1, x1, #0x6b0
   8b448:	911d0000 	add	x0, x0, #0x740
   8b44c:	52801782 	mov	w2, #0xbc                  	// #188
   8b450:	94005aac 	bl	a1f00 <assertion_failed>
   8b454:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b458:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b45c:	911ac021 	add	x1, x1, #0x6b0
   8b460:	911ca000 	add	x0, x0, #0x728
   8b464:	52801782 	mov	w2, #0xbc                  	// #188
   8b468:	94005aa6 	bl	a1f00 <assertion_failed>
   8b46c:	d503201f 	nop

000000000008b470 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
   8b470:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b474:	910003fd 	mov	x29, sp
   8b478:	a90153f3 	stp	x19, x20, [sp, #16]
   8b47c:	f00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8b480:	f945c681 	ldr	x1, [x20, #2952]
   8b484:	b50001c1 	cbnz	x1, 8b4bc <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
   8b488:	2a0003f3 	mov	w19, w0
   8b48c:	d2800700 	mov	x0, #0x38                  	// #56
   8b490:	940081a8 	bl	abb30 <operator new(unsigned long)>
   8b494:	2a1303e2 	mov	w2, w19
   8b498:	d2800401 	mov	x1, #0x20                  	// #32
   8b49c:	aa0003f3 	mov	x19, x0
   8b4a0:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8b4a4:	911e4063 	add	x3, x3, #0x790
   8b4a8:	94005ba2 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8b4ac:	f905c693 	str	x19, [x20, #2952]
   8b4b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b4b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b4b8:	d65f03c0 	ret
   8b4bc:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b4c0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b4c4:	911ac021 	add	x1, x1, #0x6b0
   8b4c8:	911de000 	add	x0, x0, #0x778
   8b4cc:	52801782 	mov	w2, #0xbc                  	// #188
   8b4d0:	94005a8c 	bl	a1f00 <assertion_failed>
   8b4d4:	d503201f 	nop
   8b4d8:	d503201f 	nop
   8b4dc:	d503201f 	nop

000000000008b4e0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   8b4e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b4e4:	910003fd 	mov	x29, sp
   8b4e8:	f90013f5 	str	x21, [sp, #32]
   8b4ec:	f00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8b4f0:	f945c6a3 	ldr	x3, [x21, #2952]
   8b4f4:	a90153f3 	stp	x19, x20, [sp, #16]
   8b4f8:	2a0003f3 	mov	w19, w0
   8b4fc:	2a0103f4 	mov	w20, w1
   8b500:	b4000103 	cbz	x3, 8b520 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8b504:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b508:	2a0103e2 	mov	w2, w1
   8b50c:	f94013f5 	ldr	x21, [sp, #32]
   8b510:	2a0003e1 	mov	w1, w0
   8b514:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b518:	aa0303e0 	mov	x0, x3
   8b51c:	14005b95 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8b520:	d2800700 	mov	x0, #0x38                  	// #56
   8b524:	94008183 	bl	abb30 <operator new(unsigned long)>
   8b528:	2a1403e3 	mov	w3, w20
   8b52c:	2a1303e2 	mov	w2, w19
   8b530:	d2800401 	mov	x1, #0x20                  	// #32
   8b534:	aa0003f3 	mov	x19, x0
   8b538:	90000144 	adrp	x4, b3000 <_etext+0x9c8>
   8b53c:	911e4084 	add	x4, x4, #0x790
   8b540:	94005b84 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8b544:	f905c6b3 	str	x19, [x21, #2952]
   8b548:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b54c:	f94013f5 	ldr	x21, [sp, #32]
   8b550:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b554:	d65f03c0 	ret
	...

000000000008b560 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   8b560:	d65f03c0 	ret
   8b564:	d503201f 	nop
   8b568:	d503201f 	nop
   8b56c:	d503201f 	nop

000000000008b570 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   8b570:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b574:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b578:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b57c:	910003fd 	mov	x29, sp
   8b580:	911ec021 	add	x1, x1, #0x7b0
   8b584:	9135c000 	add	x0, x0, #0xd70
   8b588:	528004c2 	mov	w2, #0x26                  	// #38
   8b58c:	94005a5d 	bl	a1f00 <assertion_failed>

000000000008b590 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   8b590:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b594:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b598:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b59c:	910003fd 	mov	x29, sp
   8b5a0:	911ec021 	add	x1, x1, #0x7b0
   8b5a4:	9135c000 	add	x0, x0, #0xd70
   8b5a8:	52800562 	mov	w2, #0x2b                  	// #43
   8b5ac:	94005a55 	bl	a1f00 <assertion_failed>

000000000008b5b0 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   8b5b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b5b4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b5b8:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b5bc:	910003fd 	mov	x29, sp
   8b5c0:	911ec021 	add	x1, x1, #0x7b0
   8b5c4:	9135c000 	add	x0, x0, #0xd70
   8b5c8:	52800622 	mov	w2, #0x31                  	// #49
   8b5cc:	94005a4d 	bl	a1f00 <assertion_failed>

000000000008b5d0 <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)>:
   8b5d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b5d4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b5d8:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b5dc:	910003fd 	mov	x29, sp
   8b5e0:	911ec021 	add	x1, x1, #0x7b0
   8b5e4:	9135c000 	add	x0, x0, #0xd70
   8b5e8:	52800a02 	mov	w2, #0x50                  	// #80
   8b5ec:	94005a45 	bl	a1f00 <assertion_failed>

000000000008b5f0 <CDWHCIFrameSchedulerNoSplit::GetFrameNumber()>:
   8b5f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b5f4:	52808101 	mov	w1, #0x408                 	// #1032
   8b5f8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8b5fc:	910003fd 	mov	x29, sp
   8b600:	a90153f3 	stp	x19, x20, [sp, #16]
   8b604:	9100c3f4 	add	x20, sp, #0x30
   8b608:	f90013f5 	str	x21, [sp, #32]
   8b60c:	aa0003f5 	mov	x21, x0
   8b610:	aa1403e0 	mov	x0, x20
   8b614:	94003f5b 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8b618:	aa1403e0 	mov	x0, x20
   8b61c:	94003f65 	bl	9b3b0 <CDWHCIRegister::Read()>
   8b620:	11000413 	add	w19, w0, #0x1
   8b624:	aa1403e0 	mov	x0, x20
   8b628:	12003673 	and	w19, w19, #0x3fff
   8b62c:	790016b3 	strh	w19, [x21, #10]
   8b630:	94003f5c 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8b634:	f94013f5 	ldr	x21, [sp, #32]
   8b638:	2a1303e0 	mov	w0, w19
   8b63c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b640:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8b644:	d65f03c0 	ret
   8b648:	d503201f 	nop
   8b64c:	d503201f 	nop

000000000008b650 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   8b650:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b654:	52808101 	mov	w1, #0x408                 	// #1032
   8b658:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8b65c:	910003fd 	mov	x29, sp
   8b660:	a90153f3 	stp	x19, x20, [sp, #16]
   8b664:	910083f3 	add	x19, sp, #0x20
   8b668:	aa1303e0 	mov	x0, x19
   8b66c:	94003f45 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8b670:	aa1303e0 	mov	x0, x19
   8b674:	94003f4f 	bl	9b3b0 <CDWHCIRegister::Read()>
   8b678:	2a0003f4 	mov	w20, w0
   8b67c:	aa1303e0 	mov	x0, x19
   8b680:	94003f48 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8b684:	12000280 	and	w0, w20, #0x1
   8b688:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b68c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b690:	d65f03c0 	ret
   8b694:	d503201f 	nop
   8b698:	d503201f 	nop
   8b69c:	d503201f 	nop

000000000008b6a0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   8b6a0:	f00001e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   8b6a4:	f945c822 	ldr	x2, [x1, #2960]
   8b6a8:	b4000082 	cbz	x2, 8b6b8 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()+0x18>
   8b6ac:	aa0003e1 	mov	x1, x0
   8b6b0:	aa0203e0 	mov	x0, x2
   8b6b4:	14005baf 	b	a2570 <CClassAllocator::Free(void*)>
   8b6b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b6bc:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b6c0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b6c4:	910003fd 	mov	x29, sp
   8b6c8:	911ec021 	add	x1, x1, #0x7b0
   8b6cc:	911ca000 	add	x0, x0, #0x728
   8b6d0:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b6d4:	94005a0b 	bl	a1f00 <assertion_failed>
   8b6d8:	d503201f 	nop
   8b6dc:	d503201f 	nop

000000000008b6e0 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
   8b6e0:	52880003 	mov	w3, #0x4000                	// #16384
   8b6e4:	d00001e2 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8b6e8:	910c0042 	add	x2, x2, #0x300
   8b6ec:	f9000002 	str	x2, [x0]
   8b6f0:	39002001 	strb	w1, [x0, #8]
   8b6f4:	79001403 	strh	w3, [x0, #10]
   8b6f8:	d65f03c0 	ret
   8b6fc:	d503201f 	nop

000000000008b700 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned long)>:
   8b700:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b704:	f100401f 	cmp	x0, #0x10
   8b708:	910003fd 	mov	x29, sp
   8b70c:	540000c1 	b.ne	8b724 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned long)+0x24>  // b.any
   8b710:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8b714:	f945c800 	ldr	x0, [x0, #2960]
   8b718:	b4000120 	cbz	x0, 8b73c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned long)+0x3c>
   8b71c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b720:	14005b60 	b	a24a0 <CClassAllocator::Allocate()>
   8b724:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b728:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b72c:	911ec021 	add	x1, x1, #0x7b0
   8b730:	911f4000 	add	x0, x0, #0x7d0
   8b734:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b738:	940059f2 	bl	a1f00 <assertion_failed>
   8b73c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b740:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b744:	911ec021 	add	x1, x1, #0x7b0
   8b748:	911ca000 	add	x0, x0, #0x728
   8b74c:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b750:	940059ec 	bl	a1f00 <assertion_failed>
   8b754:	d503201f 	nop
   8b758:	d503201f 	nop
   8b75c:	d503201f 	nop

000000000008b760 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned long)>:
   8b760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b764:	f100403f 	cmp	x1, #0x10
   8b768:	910003fd 	mov	x29, sp
   8b76c:	54000101 	b.ne	8b78c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned long)+0x2c>  // b.any
   8b770:	aa0003e2 	mov	x2, x0
   8b774:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8b778:	f945c800 	ldr	x0, [x0, #2960]
   8b77c:	b4000140 	cbz	x0, 8b7a4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned long)+0x44>
   8b780:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b784:	aa0203e1 	mov	x1, x2
   8b788:	14005b7a 	b	a2570 <CClassAllocator::Free(void*)>
   8b78c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b790:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b794:	911ec021 	add	x1, x1, #0x7b0
   8b798:	911f4000 	add	x0, x0, #0x7d0
   8b79c:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b7a0:	940059d8 	bl	a1f00 <assertion_failed>
   8b7a4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b7a8:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b7ac:	911ec021 	add	x1, x1, #0x7b0
   8b7b0:	911ca000 	add	x0, x0, #0x728
   8b7b4:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b7b8:	940059d2 	bl	a1f00 <assertion_failed>
   8b7bc:	d503201f 	nop

000000000008b7c0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
   8b7c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b7c4:	910003fd 	mov	x29, sp
   8b7c8:	a90153f3 	stp	x19, x20, [sp, #16]
   8b7cc:	f00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8b7d0:	f945ca81 	ldr	x1, [x20, #2960]
   8b7d4:	b50001c1 	cbnz	x1, 8b80c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
   8b7d8:	2a0003f3 	mov	w19, w0
   8b7dc:	d2800700 	mov	x0, #0x38                  	// #56
   8b7e0:	940080d4 	bl	abb30 <operator new(unsigned long)>
   8b7e4:	2a1303e2 	mov	w2, w19
   8b7e8:	d2800201 	mov	x1, #0x10                  	// #16
   8b7ec:	aa0003f3 	mov	x19, x0
   8b7f0:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8b7f4:	91200063 	add	x3, x3, #0x800
   8b7f8:	94005ace 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8b7fc:	f905ca93 	str	x19, [x20, #2960]
   8b800:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b804:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b808:	d65f03c0 	ret
   8b80c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b810:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b814:	911ec021 	add	x1, x1, #0x7b0
   8b818:	911de000 	add	x0, x0, #0x778
   8b81c:	52800ba2 	mov	w2, #0x5d                  	// #93
   8b820:	940059b8 	bl	a1f00 <assertion_failed>
   8b824:	d503201f 	nop
   8b828:	d503201f 	nop
   8b82c:	d503201f 	nop

000000000008b830 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
   8b830:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8b834:	910003fd 	mov	x29, sp
   8b838:	f90013f5 	str	x21, [sp, #32]
   8b83c:	f00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8b840:	f945caa3 	ldr	x3, [x21, #2960]
   8b844:	a90153f3 	stp	x19, x20, [sp, #16]
   8b848:	2a0003f3 	mov	w19, w0
   8b84c:	2a0103f4 	mov	w20, w1
   8b850:	b4000103 	cbz	x3, 8b870 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8b854:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b858:	2a0103e2 	mov	w2, w1
   8b85c:	f94013f5 	ldr	x21, [sp, #32]
   8b860:	2a0003e1 	mov	w1, w0
   8b864:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b868:	aa0303e0 	mov	x0, x3
   8b86c:	14005ac1 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8b870:	d2800700 	mov	x0, #0x38                  	// #56
   8b874:	940080af 	bl	abb30 <operator new(unsigned long)>
   8b878:	2a1403e3 	mov	w3, w20
   8b87c:	2a1303e2 	mov	w2, w19
   8b880:	d2800201 	mov	x1, #0x10                  	// #16
   8b884:	aa0003f3 	mov	x19, x0
   8b888:	90000144 	adrp	x4, b3000 <_etext+0x9c8>
   8b88c:	91200084 	add	x4, x4, #0x800
   8b890:	94005ab0 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8b894:	f905cab3 	str	x19, [x21, #2960]
   8b898:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b89c:	f94013f5 	ldr	x21, [sp, #32]
   8b8a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8b8a4:	d65f03c0 	ret
	...

000000000008b8b0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   8b8b0:	d65f03c0 	ret
   8b8b4:	d503201f 	nop
   8b8b8:	d503201f 	nop
   8b8bc:	d503201f 	nop

000000000008b8c0 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
   8b8c0:	b9401001 	ldr	w1, [x0, #16]
   8b8c4:	51001421 	sub	w1, w1, #0x5
   8b8c8:	7100043f 	cmp	w1, #0x1
   8b8cc:	54000069 	b.ls	8b8d8 <CDWHCIFrameSchedulerPeriodic::StartSplit()+0x18>  // b.plast
   8b8d0:	52800021 	mov	w1, #0x1                   	// #1
   8b8d4:	79003001 	strh	w1, [x0, #24]
   8b8d8:	b900101f 	str	wzr, [x0, #16]
   8b8dc:	d65f03c0 	ret

000000000008b8e0 <CDWHCIFrameSchedulerPeriodic::PeriodicDelay(unsigned short)>:
   8b8e0:	528000c3 	mov	w3, #0x6                   	// #6
   8b8e4:	52880002 	mov	w2, #0x4000                	// #16384
   8b8e8:	b9001003 	str	w3, [x0, #16]
   8b8ec:	79003001 	strh	w1, [x0, #24]
   8b8f0:	79003402 	strh	w2, [x0, #26]
   8b8f4:	d65f03c0 	ret
   8b8f8:	d503201f 	nop
   8b8fc:	d503201f 	nop

000000000008b900 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
   8b900:	b9401001 	ldr	w1, [x0, #16]
   8b904:	71000c3f 	cmp	w1, #0x3
   8b908:	54000320 	b.eq	8b96c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>  // b.none
   8b90c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8b910:	910003fd 	mov	x29, sp
   8b914:	54000208 	b.hi	8b954 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x54>  // b.pmore
   8b918:	7100043f 	cmp	w1, #0x1
   8b91c:	540003c1 	b.ne	8b994 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x94>  // b.any
   8b920:	79403402 	ldrh	w2, [x0, #26]
   8b924:	52800043 	mov	w3, #0x2                   	// #2
   8b928:	b9001003 	str	w3, [x0, #16]
   8b92c:	7140105f 	cmp	w2, #0x4, lsl #12
   8b930:	54000260 	b.eq	8b97c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x7c>  // b.none
   8b934:	12000842 	and	w2, w2, #0x7
   8b938:	79003003 	strh	w3, [x0, #24]
   8b93c:	7100145f 	cmp	w2, #0x5
   8b940:	1a830021 	csel	w1, w1, w3, eq	// eq = none
   8b944:	b9001401 	str	w1, [x0, #20]
   8b948:	52800020 	mov	w0, #0x1                   	// #1
   8b94c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b950:	d65f03c0 	ret
   8b954:	51001021 	sub	w1, w1, #0x4
   8b958:	7100043f 	cmp	w1, #0x1
   8b95c:	540001c8 	b.hi	8b994 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x94>  // b.pmore
   8b960:	52800000 	mov	w0, #0x0                   	// #0
   8b964:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b968:	d65f03c0 	ret
   8b96c:	52800021 	mov	w1, #0x1                   	// #1
   8b970:	79003001 	strh	w1, [x0, #24]
   8b974:	52800020 	mov	w0, #0x1                   	// #1
   8b978:	d65f03c0 	ret
   8b97c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b980:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b984:	91208021 	add	x1, x1, #0x820
   8b988:	9120e000 	add	x0, x0, #0x838
   8b98c:	52800a82 	mov	w2, #0x54                  	// #84
   8b990:	9400595c 	bl	a1f00 <assertion_failed>
   8b994:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8b998:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8b99c:	91208021 	add	x1, x1, #0x820
   8b9a0:	9135c000 	add	x0, x0, #0xd70
   8b9a4:	52800e42 	mov	w2, #0x72                  	// #114
   8b9a8:	94005956 	bl	a1f00 <assertion_failed>
   8b9ac:	d503201f 	nop

000000000008b9b0 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()>:
   8b9b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8b9b4:	52808101 	mov	w1, #0x408                 	// #1032
   8b9b8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8b9bc:	910003fd 	mov	x29, sp
   8b9c0:	a90153f3 	stp	x19, x20, [sp, #16]
   8b9c4:	9100c3f4 	add	x20, sp, #0x30
   8b9c8:	aa0003f3 	mov	x19, x0
   8b9cc:	aa1403e0 	mov	x0, x20
   8b9d0:	f90013f5 	str	x21, [sp, #32]
   8b9d4:	94003e6b 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8b9d8:	aa1403e0 	mov	x0, x20
   8b9dc:	94003e75 	bl	9b3b0 <CDWHCIRegister::Read()>
   8b9e0:	79403261 	ldrh	w1, [x19, #24]
   8b9e4:	7140103f 	cmp	w1, #0x4, lsl #12
   8b9e8:	54000360 	b.eq	8ba54 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0xa4>  // b.none
   8b9ec:	12003c00 	and	w0, w0, #0xffff
   8b9f0:	b9401262 	ldr	w2, [x19, #16]
   8b9f4:	0b000021 	add	w1, w1, w0
   8b9f8:	12003435 	and	w21, w1, #0x3fff
   8b9fc:	79003675 	strh	w21, [x19, #26]
   8ba00:	12003c21 	and	w1, w1, #0xffff
   8ba04:	35000082 	cbnz	w2, 8ba14 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x64>
   8ba08:	12000821 	and	w1, w1, #0x7
   8ba0c:	7100183f 	cmp	w1, #0x6
   8ba10:	54000100 	b.eq	8ba30 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x80>  // b.none
   8ba14:	aa1403e0 	mov	x0, x20
   8ba18:	94003e62 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8ba1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ba20:	2a1503e0 	mov	w0, w21
   8ba24:	f94013f5 	ldr	x21, [sp, #32]
   8ba28:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ba2c:	d65f03c0 	ret
   8ba30:	110006b5 	add	w21, w21, #0x1
   8ba34:	79003675 	strh	w21, [x19, #26]
   8ba38:	aa1403e0 	mov	x0, x20
   8ba3c:	94003e59 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8ba40:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ba44:	2a1503e0 	mov	w0, w21
   8ba48:	f94013f5 	ldr	x21, [sp, #32]
   8ba4c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ba50:	d65f03c0 	ret
   8ba54:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8ba58:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8ba5c:	91208021 	add	x1, x1, #0x820
   8ba60:	91216000 	add	x0, x0, #0x858
   8ba64:	52801962 	mov	w2, #0xcb                  	// #203
   8ba68:	94005926 	bl	a1f00 <assertion_failed>
   8ba6c:	d503201f 	nop

000000000008ba70 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
   8ba70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ba74:	52808101 	mov	w1, #0x408                 	// #1032
   8ba78:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8ba7c:	910003fd 	mov	x29, sp
   8ba80:	a90153f3 	stp	x19, x20, [sp, #16]
   8ba84:	910083f3 	add	x19, sp, #0x20
   8ba88:	aa1303e0 	mov	x0, x19
   8ba8c:	94003e3d 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8ba90:	aa1303e0 	mov	x0, x19
   8ba94:	94003e47 	bl	9b3b0 <CDWHCIRegister::Read()>
   8ba98:	2a0003f4 	mov	w20, w0
   8ba9c:	aa1303e0 	mov	x0, x19
   8baa0:	94003e40 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8baa4:	12000280 	and	w0, w20, #0x1
   8baa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8baac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8bab0:	d65f03c0 	ret
   8bab4:	d503201f 	nop
   8bab8:	d503201f 	nop
   8babc:	d503201f 	nop

000000000008bac0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
   8bac0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bac4:	910003fd 	mov	x29, sp
   8bac8:	b9401002 	ldr	w2, [x0, #16]
   8bacc:	34000122 	cbz	w2, 8baf0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x30>
   8bad0:	51000842 	sub	w2, w2, #0x2
   8bad4:	7100045f 	cmp	w2, #0x1
   8bad8:	54000408 	b.hi	8bb58 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x98>  // b.pmore
   8badc:	36000141 	tbz	w1, #0, 8bb04 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x44>
   8bae0:	52800081 	mov	w1, #0x4                   	// #4
   8bae4:	b9001001 	str	w1, [x0, #16]
   8bae8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8baec:	d65f03c0 	ret
   8baf0:	36280401 	tbz	w1, #5, 8bb70 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb0>
   8baf4:	52800021 	mov	w1, #0x1                   	// #1
   8baf8:	b9001001 	str	w1, [x0, #16]
   8bafc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bb00:	d65f03c0 	ret
   8bb04:	721b043f 	tst	w1, #0x60
   8bb08:	54000140 	b.eq	8bb30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x70>  // b.none
   8bb0c:	b9401401 	ldr	w1, [x0, #20]
   8bb10:	51000422 	sub	w2, w1, #0x1
   8bb14:	b9001402 	str	w2, [x0, #20]
   8bb18:	350001a1 	cbnz	w1, 8bb4c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
   8bb1c:	528000a2 	mov	w2, #0x5                   	// #5
   8bb20:	52800061 	mov	w1, #0x3                   	// #3
   8bb24:	b9001002 	str	w2, [x0, #16]
   8bb28:	79003001 	strh	w1, [x0, #24]
   8bb2c:	17ffffef 	b	8bae8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x28>
   8bb30:	362002c1 	tbz	w1, #4, 8bb88 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc8>
   8bb34:	528000a1 	mov	w1, #0x5                   	// #5
   8bb38:	528000a2 	mov	w2, #0x5                   	// #5
   8bb3c:	b9001002 	str	w2, [x0, #16]
   8bb40:	79003001 	strh	w1, [x0, #24]
   8bb44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bb48:	d65f03c0 	ret
   8bb4c:	52800061 	mov	w1, #0x3                   	// #3
   8bb50:	b9001001 	str	w1, [x0, #16]
   8bb54:	17ffffe5 	b	8bae8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x28>
   8bb58:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bb5c:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bb60:	91208021 	add	x1, x1, #0x820
   8bb64:	9135c000 	add	x0, x0, #0xd70
   8bb68:	52801542 	mov	w2, #0xaa                  	// #170
   8bb6c:	940058e5 	bl	a1f00 <assertion_failed>
   8bb70:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bb74:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bb78:	91208021 	add	x1, x1, #0x820
   8bb7c:	911b2000 	add	x0, x0, #0x6c8
   8bb80:	52800fc2 	mov	w2, #0x7e                  	// #126
   8bb84:	940058df 	bl	a1f00 <assertion_failed>
   8bb88:	b9001fe1 	str	w1, [sp, #28]
   8bb8c:	94006019 	bl	a3bf0 <CLogger::Get()>
   8bb90:	b9401fe1 	ldr	w1, [sp, #28]
   8bb94:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8bb98:	911bc063 	add	x3, x3, #0x6f0
   8bb9c:	52800022 	mov	w2, #0x1                   	// #1
   8bba0:	2a0103e4 	mov	w4, w1
   8bba4:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bba8:	911c2021 	add	x1, x1, #0x708
   8bbac:	94006205 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bbb0:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bbb4:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bbb8:	91208021 	add	x1, x1, #0x820
   8bbbc:	9135c000 	add	x0, x0, #0xd70
   8bbc0:	528014a2 	mov	w2, #0xa5                  	// #165
   8bbc4:	940058cf 	bl	a1f00 <assertion_failed>
   8bbc8:	d503201f 	nop
   8bbcc:	d503201f 	nop

000000000008bbd0 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
   8bbd0:	f00001e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   8bbd4:	f945cc22 	ldr	x2, [x1, #2968]
   8bbd8:	b4000082 	cbz	x2, 8bbe8 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()+0x18>
   8bbdc:	aa0003e1 	mov	x1, x0
   8bbe0:	aa0203e0 	mov	x0, x2
   8bbe4:	14005a63 	b	a2570 <CClassAllocator::Free(void*)>
   8bbe8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bbec:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bbf0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bbf4:	910003fd 	mov	x29, sp
   8bbf8:	91208021 	add	x1, x1, #0x820
   8bbfc:	911ca000 	add	x0, x0, #0x728
   8bc00:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bc04:	940058bf 	bl	a1f00 <assertion_failed>
   8bc08:	d503201f 	nop
   8bc0c:	d503201f 	nop

000000000008bc10 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
   8bc10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bc14:	d00001e1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8bc18:	910d4021 	add	x1, x1, #0x350
   8bc1c:	910003fd 	mov	x29, sp
   8bc20:	f9000bf3 	str	x19, [sp, #16]
   8bc24:	aa0003f3 	mov	x19, x0
   8bc28:	f9000001 	str	x1, [x0]
   8bc2c:	94007ba9 	bl	aaad0 <CTimer::Get()>
   8bc30:	f9000660 	str	x0, [x19, #8]
   8bc34:	528000e2 	mov	w2, #0x7                   	// #7
   8bc38:	320283e1 	mov	w1, #0x40004000            	// #1073758208
   8bc3c:	b9001262 	str	w2, [x19, #16]
   8bc40:	b9001a61 	str	w1, [x19, #24]
   8bc44:	b4000080 	cbz	x0, 8bc54 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
   8bc48:	f9400bf3 	ldr	x19, [sp, #16]
   8bc4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bc50:	d65f03c0 	ret
   8bc54:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bc58:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bc5c:	91208021 	add	x1, x1, #0x820
   8bc60:	91042000 	add	x0, x0, #0x108
   8bc64:	52800682 	mov	w2, #0x34                  	// #52
   8bc68:	940058a6 	bl	a1f00 <assertion_failed>
   8bc6c:	d503201f 	nop

000000000008bc70 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned long)>:
   8bc70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bc74:	f100801f 	cmp	x0, #0x20
   8bc78:	910003fd 	mov	x29, sp
   8bc7c:	540000c1 	b.ne	8bc94 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned long)+0x24>  // b.any
   8bc80:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8bc84:	f945cc00 	ldr	x0, [x0, #2968]
   8bc88:	b4000120 	cbz	x0, 8bcac <CDWHCIFrameSchedulerPeriodic::operator new(unsigned long)+0x3c>
   8bc8c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bc90:	14005a04 	b	a24a0 <CClassAllocator::Allocate()>
   8bc94:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bc98:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bc9c:	91208021 	add	x1, x1, #0x820
   8bca0:	9121e000 	add	x0, x0, #0x878
   8bca4:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bca8:	94005896 	bl	a1f00 <assertion_failed>
   8bcac:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bcb0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bcb4:	91208021 	add	x1, x1, #0x820
   8bcb8:	911ca000 	add	x0, x0, #0x728
   8bcbc:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bcc0:	94005890 	bl	a1f00 <assertion_failed>
   8bcc4:	d503201f 	nop
   8bcc8:	d503201f 	nop
   8bccc:	d503201f 	nop

000000000008bcd0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned long)>:
   8bcd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bcd4:	f100803f 	cmp	x1, #0x20
   8bcd8:	910003fd 	mov	x29, sp
   8bcdc:	54000101 	b.ne	8bcfc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned long)+0x2c>  // b.any
   8bce0:	aa0003e2 	mov	x2, x0
   8bce4:	f00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8bce8:	f945cc00 	ldr	x0, [x0, #2968]
   8bcec:	b4000140 	cbz	x0, 8bd14 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned long)+0x44>
   8bcf0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bcf4:	aa0203e1 	mov	x1, x2
   8bcf8:	14005a1e 	b	a2570 <CClassAllocator::Free(void*)>
   8bcfc:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bd00:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bd04:	91208021 	add	x1, x1, #0x820
   8bd08:	9121e000 	add	x0, x0, #0x878
   8bd0c:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bd10:	9400587c 	bl	a1f00 <assertion_failed>
   8bd14:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bd18:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bd1c:	91208021 	add	x1, x1, #0x820
   8bd20:	911ca000 	add	x0, x0, #0x728
   8bd24:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bd28:	94005876 	bl	a1f00 <assertion_failed>
   8bd2c:	d503201f 	nop

000000000008bd30 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
   8bd30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bd34:	910003fd 	mov	x29, sp
   8bd38:	a90153f3 	stp	x19, x20, [sp, #16]
   8bd3c:	f00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8bd40:	f945ce81 	ldr	x1, [x20, #2968]
   8bd44:	b50001c1 	cbnz	x1, 8bd7c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
   8bd48:	2a0003f3 	mov	w19, w0
   8bd4c:	d2800700 	mov	x0, #0x38                  	// #56
   8bd50:	94007f78 	bl	abb30 <operator new(unsigned long)>
   8bd54:	2a1303e2 	mov	w2, w19
   8bd58:	d2800401 	mov	x1, #0x20                  	// #32
   8bd5c:	aa0003f3 	mov	x19, x0
   8bd60:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8bd64:	9122a063 	add	x3, x3, #0x8a8
   8bd68:	94005972 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8bd6c:	f905ce93 	str	x19, [x20, #2968]
   8bd70:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bd74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bd78:	d65f03c0 	ret
   8bd7c:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bd80:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bd84:	91208021 	add	x1, x1, #0x820
   8bd88:	911de000 	add	x0, x0, #0x778
   8bd8c:	52801ce2 	mov	w2, #0xe7                  	// #231
   8bd90:	9400585c 	bl	a1f00 <assertion_failed>
   8bd94:	d503201f 	nop
   8bd98:	d503201f 	nop
   8bd9c:	d503201f 	nop

000000000008bda0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
   8bda0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8bda4:	910003fd 	mov	x29, sp
   8bda8:	f90013f5 	str	x21, [sp, #32]
   8bdac:	f00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8bdb0:	f945cea3 	ldr	x3, [x21, #2968]
   8bdb4:	a90153f3 	stp	x19, x20, [sp, #16]
   8bdb8:	2a0003f3 	mov	w19, w0
   8bdbc:	2a0103f4 	mov	w20, w1
   8bdc0:	b4000103 	cbz	x3, 8bde0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8bdc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bdc8:	2a0103e2 	mov	w2, w1
   8bdcc:	f94013f5 	ldr	x21, [sp, #32]
   8bdd0:	2a0003e1 	mov	w1, w0
   8bdd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8bdd8:	aa0303e0 	mov	x0, x3
   8bddc:	14005965 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8bde0:	d2800700 	mov	x0, #0x38                  	// #56
   8bde4:	94007f53 	bl	abb30 <operator new(unsigned long)>
   8bde8:	2a1403e3 	mov	w3, w20
   8bdec:	2a1303e2 	mov	w2, w19
   8bdf0:	d2800401 	mov	x1, #0x20                  	// #32
   8bdf4:	aa0003f3 	mov	x19, x0
   8bdf8:	90000144 	adrp	x4, b3000 <_etext+0x9c8>
   8bdfc:	9122a084 	add	x4, x4, #0x8a8
   8be00:	94005954 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8be04:	f905ceb3 	str	x19, [x21, #2968]
   8be08:	a94153f3 	ldp	x19, x20, [sp, #16]
   8be0c:	f94013f5 	ldr	x21, [sp, #32]
   8be10:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8be14:	d65f03c0 	ret
	...

000000000008be20 <CDWHCIRootPort::~CDWHCIRootPort()>:
   8be20:	aa0003e1 	mov	x1, x0
   8be24:	d00001e2 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8be28:	910e8042 	add	x2, x2, #0x3a0
   8be2c:	f9400800 	ldr	x0, [x0, #16]
   8be30:	f9000022 	str	x2, [x1]
   8be34:	b40000a0 	cbz	x0, 8be48 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
   8be38:	f9400001 	ldr	x1, [x0]
   8be3c:	f9400421 	ldr	x1, [x1, #8]
   8be40:	aa0103f0 	mov	x16, x1
   8be44:	d61f0200 	br	x16
   8be48:	d65f03c0 	ret
   8be4c:	d503201f 	nop

000000000008be50 <CDWHCIRootPort::RemoveDevice()>:
   8be50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8be54:	910003fd 	mov	x29, sp
   8be58:	f9000bf3 	str	x19, [sp, #16]
   8be5c:	aa0003f3 	mov	x19, x0
   8be60:	f9400400 	ldr	x0, [x0, #8]
   8be64:	b40001a0 	cbz	x0, 8be98 <CDWHCIRootPort::RemoveDevice()+0x48>
   8be68:	52800001 	mov	w1, #0x0                   	// #0
   8be6c:	97ffefe5 	bl	87e00 <CDWHCIDevice::DisableRootPort(bool)>
   8be70:	f9400a60 	ldr	x0, [x19, #16]
   8be74:	b4000080 	cbz	x0, 8be84 <CDWHCIRootPort::RemoveDevice()+0x34>
   8be78:	f9400001 	ldr	x1, [x0]
   8be7c:	f9400421 	ldr	x1, [x1, #8]
   8be80:	d63f0020 	blr	x1
   8be84:	f9000a7f 	str	xzr, [x19, #16]
   8be88:	52800020 	mov	w0, #0x1                   	// #1
   8be8c:	f9400bf3 	ldr	x19, [sp, #16]
   8be90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8be94:	d65f03c0 	ret
   8be98:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8be9c:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bea0:	91232021 	add	x1, x1, #0x8c8
   8bea4:	91238000 	add	x0, x0, #0x8e0
   8bea8:	52800da2 	mov	w2, #0x6d                  	// #109
   8beac:	94005815 	bl	a1f00 <assertion_failed>

000000000008beb0 <CDWHCIRootPort::ReScanDevices()>:
   8beb0:	f9400800 	ldr	x0, [x0, #16]
   8beb4:	b4000040 	cbz	x0, 8bebc <CDWHCIRootPort::ReScanDevices()+0xc>
   8beb8:	140008de 	b	8e230 <CUSBDevice::ReScanDevices()>
   8bebc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bec0:	910003fd 	mov	x29, sp
   8bec4:	94005f4b 	bl	a3bf0 <CLogger::Get()>
   8bec8:	52800042 	mov	w2, #0x2                   	// #2
   8becc:	90000143 	adrp	x3, b3000 <_etext+0x9c8>
   8bed0:	90000161 	adrp	x1, b7000 <_etext+0x49c8>
   8bed4:	9123c063 	add	x3, x3, #0x8f0
   8bed8:	91340021 	add	x1, x1, #0xd00
   8bedc:	94006139 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bee0:	52800000 	mov	w0, #0x0                   	// #0
   8bee4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bee8:	d65f03c0 	ret
   8beec:	d503201f 	nop

000000000008bef0 <CDWHCIRootPort::HandlePortStatusChange()>:
   8bef0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bef4:	910003fd 	mov	x29, sp
   8bef8:	f9000bf3 	str	x19, [sp, #16]
   8befc:	aa0003f3 	mov	x19, x0
   8bf00:	f9400400 	ldr	x0, [x0, #8]
   8bf04:	b4000220 	cbz	x0, 8bf48 <CDWHCIRootPort::HandlePortStatusChange()+0x58>
   8bf08:	97ffef7e 	bl	87d00 <CDWHCIDevice::DeviceConnected()>
   8bf0c:	360000c0 	tbz	w0, #0, 8bf24 <CDWHCIRootPort::HandlePortStatusChange()+0x34>
   8bf10:	f9400a60 	ldr	x0, [x19, #16]
   8bf14:	b4000260 	cbz	x0, 8bf60 <CDWHCIRootPort::HandlePortStatusChange()+0x70>
   8bf18:	f9400bf3 	ldr	x19, [sp, #16]
   8bf1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bf20:	d65f03c0 	ret
   8bf24:	f9400a60 	ldr	x0, [x19, #16]
   8bf28:	b4ffff80 	cbz	x0, 8bf18 <CDWHCIRootPort::HandlePortStatusChange()+0x28>
   8bf2c:	f9400261 	ldr	x1, [x19]
   8bf30:	aa1303e0 	mov	x0, x19
   8bf34:	f9400bf3 	ldr	x19, [sp, #16]
   8bf38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bf3c:	f9400c21 	ldr	x1, [x1, #24]
   8bf40:	aa0103f0 	mov	x16, x1
   8bf44:	d61f0200 	br	x16
   8bf48:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bf4c:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bf50:	91232021 	add	x1, x1, #0x8c8
   8bf54:	91238000 	add	x0, x0, #0x8e0
   8bf58:	52800f02 	mov	w2, #0x78                  	// #120
   8bf5c:	940057e9 	bl	a1f00 <assertion_failed>
   8bf60:	f9400660 	ldr	x0, [x19, #8]
   8bf64:	f9400bf3 	ldr	x19, [sp, #16]
   8bf68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bf6c:	17fffb7d 	b	8ad60 <CDWHCIDevice::ReScanDevices()>

000000000008bf70 <CDWHCIRootPort::~CDWHCIRootPort()>:
   8bf70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bf74:	d00001e1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8bf78:	910e8021 	add	x1, x1, #0x3a0
   8bf7c:	910003fd 	mov	x29, sp
   8bf80:	f9000bf3 	str	x19, [sp, #16]
   8bf84:	aa0003f3 	mov	x19, x0
   8bf88:	f9400800 	ldr	x0, [x0, #16]
   8bf8c:	f9000261 	str	x1, [x19]
   8bf90:	b4000080 	cbz	x0, 8bfa0 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
   8bf94:	f9400001 	ldr	x1, [x0]
   8bf98:	f9400421 	ldr	x1, [x1, #8]
   8bf9c:	d63f0020 	blr	x1
   8bfa0:	aa1303e0 	mov	x0, x19
   8bfa4:	d2800301 	mov	x1, #0x18                  	// #24
   8bfa8:	f9400bf3 	ldr	x19, [sp, #16]
   8bfac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bfb0:	14007f00 	b	abbb0 <operator delete(void*, unsigned long)>
   8bfb4:	d503201f 	nop
   8bfb8:	d503201f 	nop
   8bfbc:	d503201f 	nop

000000000008bfc0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
   8bfc0:	d00001e2 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8bfc4:	910e8042 	add	x2, x2, #0x3a0
   8bfc8:	a9000402 	stp	x2, x1, [x0]
   8bfcc:	f900081f 	str	xzr, [x0, #16]
   8bfd0:	b4000041 	cbz	x1, 8bfd8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x18>
   8bfd4:	d65f03c0 	ret
   8bfd8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bfdc:	90000141 	adrp	x1, b3000 <_etext+0x9c8>
   8bfe0:	90000140 	adrp	x0, b3000 <_etext+0x9c8>
   8bfe4:	910003fd 	mov	x29, sp
   8bfe8:	91232021 	add	x1, x1, #0x8c8
   8bfec:	91238000 	add	x0, x0, #0x8e0
   8bff0:	528003e2 	mov	w2, #0x1f                  	// #31
   8bff4:	940057c3 	bl	a1f00 <assertion_failed>
   8bff8:	d503201f 	nop
   8bffc:	d503201f 	nop

000000000008c000 <CDWHCIRootPort::Initialize()>:
   8c000:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c004:	910003fd 	mov	x29, sp
   8c008:	a90153f3 	stp	x19, x20, [sp, #16]
   8c00c:	aa0003f3 	mov	x19, x0
   8c010:	f9400400 	ldr	x0, [x0, #8]
   8c014:	b4000880 	cbz	x0, 8c124 <CDWHCIRootPort::Initialize()+0x124>
   8c018:	97ffef4e 	bl	87d50 <CDWHCIDevice::GetPortSpeed()>
   8c01c:	2a0003f4 	mov	w20, w0
   8c020:	7100101f 	cmp	w0, #0x4
   8c024:	540006e0 	b.eq	8c100 <CDWHCIRootPort::Initialize()+0x100>  // b.none
   8c028:	f9400a60 	ldr	x0, [x19, #16]
   8c02c:	b50008a0 	cbnz	x0, 8c140 <CDWHCIRootPort::Initialize()+0x140>
   8c030:	d2801600 	mov	x0, #0xb0                  	// #176
   8c034:	94007ebf 	bl	abb30 <operator new(unsigned long)>
   8c038:	f9400661 	ldr	x1, [x19, #8]
   8c03c:	2a1403e2 	mov	w2, w20
   8c040:	aa1303e3 	mov	x3, x19
   8c044:	aa0003f4 	mov	x20, x0
   8c048:	940007fa 	bl	8e030 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
   8c04c:	f9000a74 	str	x20, [x19, #16]
   8c050:	aa1403e0 	mov	x0, x20
   8c054:	94000a8b 	bl	8ea80 <CUSBDevice::Initialize()>
   8c058:	360003e0 	tbz	w0, #0, 8c0d4 <CDWHCIRootPort::Initialize()+0xd4>
   8c05c:	f9400a60 	ldr	x0, [x19, #16]
   8c060:	f9400001 	ldr	x1, [x0]
   8c064:	f9400c21 	ldr	x1, [x1, #24]
   8c068:	d63f0020 	blr	x1
   8c06c:	12001c14 	and	w20, w0, #0xff
   8c070:	36000240 	tbz	w0, #0, 8c0b8 <CDWHCIRootPort::Initialize()+0xb8>
   8c074:	f90013f5 	str	x21, [sp, #32]
   8c078:	94005ede 	bl	a3bf0 <CLogger::Get()>
   8c07c:	f0000155 	adrp	x21, b7000 <_etext+0x49c8>
   8c080:	913402b5 	add	x21, x21, #0xd00
   8c084:	aa1503e1 	mov	x1, x21
   8c088:	f0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8c08c:	52800082 	mov	w2, #0x4                   	// #4
   8c090:	9125a063 	add	x3, x3, #0x968
   8c094:	940060cb 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c098:	f9400660 	ldr	x0, [x19, #8]
   8c09c:	97ffef45 	bl	87db0 <CDWHCIDevice::OvercurrentDetected()>
   8c0a0:	370005e0 	tbnz	w0, #0, 8c15c <CDWHCIRootPort::Initialize()+0x15c>
   8c0a4:	f94013f5 	ldr	x21, [sp, #32]
   8c0a8:	2a1403e0 	mov	w0, w20
   8c0ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c0b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c0b4:	d65f03c0 	ret
   8c0b8:	94005ece 	bl	a3bf0 <CLogger::Get()>
   8c0bc:	f0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8c0c0:	f0000141 	adrp	x1, b7000 <_etext+0x49c8>
   8c0c4:	91254063 	add	x3, x3, #0x950
   8c0c8:	91340021 	add	x1, x1, #0xd00
   8c0cc:	52800042 	mov	w2, #0x2                   	// #2
   8c0d0:	940060bc 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c0d4:	f9400a60 	ldr	x0, [x19, #16]
   8c0d8:	b4000080 	cbz	x0, 8c0e8 <CDWHCIRootPort::Initialize()+0xe8>
   8c0dc:	f9400001 	ldr	x1, [x0]
   8c0e0:	f9400421 	ldr	x1, [x1, #8]
   8c0e4:	d63f0020 	blr	x1
   8c0e8:	f9000a7f 	str	xzr, [x19, #16]
   8c0ec:	52800014 	mov	w20, #0x0                   	// #0
   8c0f0:	2a1403e0 	mov	w0, w20
   8c0f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c0f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c0fc:	d65f03c0 	ret
   8c100:	94005ebc 	bl	a3bf0 <CLogger::Get()>
   8c104:	52800014 	mov	w20, #0x0                   	// #0
   8c108:	f0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8c10c:	f0000141 	adrp	x1, b7000 <_etext+0x49c8>
   8c110:	91248063 	add	x3, x3, #0x920
   8c114:	91340021 	add	x1, x1, #0xd00
   8c118:	52800022 	mov	w2, #0x1                   	// #1
   8c11c:	940060a9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c120:	17fffff4 	b	8c0f0 <CDWHCIRootPort::Initialize()+0xf0>
   8c124:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c128:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c12c:	91232021 	add	x1, x1, #0x8c8
   8c130:	91238000 	add	x0, x0, #0x8e0
   8c134:	52800582 	mov	w2, #0x2c                  	// #44
   8c138:	f90013f5 	str	x21, [sp, #32]
   8c13c:	94005771 	bl	a1f00 <assertion_failed>
   8c140:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c144:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c148:	91232021 	add	x1, x1, #0x8c8
   8c14c:	91250000 	add	x0, x0, #0x940
   8c150:	528006c2 	mov	w2, #0x36                  	// #54
   8c154:	f90013f5 	str	x21, [sp, #32]
   8c158:	9400576a 	bl	a1f00 <assertion_failed>
   8c15c:	94005ea5 	bl	a3bf0 <CLogger::Get()>
   8c160:	aa1503e1 	mov	x1, x21
   8c164:	52800022 	mov	w2, #0x1                   	// #1
   8c168:	f0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8c16c:	91260063 	add	x3, x3, #0x980
   8c170:	94006094 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c174:	f9400660 	ldr	x0, [x19, #8]
   8c178:	52800021 	mov	w1, #0x1                   	// #1
   8c17c:	97ffef21 	bl	87e00 <CDWHCIDevice::DisableRootPort(bool)>
   8c180:	f9400a60 	ldr	x0, [x19, #16]
   8c184:	b40000e0 	cbz	x0, 8c1a0 <CDWHCIRootPort::Initialize()+0x1a0>
   8c188:	f9400001 	ldr	x1, [x0]
   8c18c:	f9400421 	ldr	x1, [x1, #8]
   8c190:	d63f0020 	blr	x1
   8c194:	f94013f5 	ldr	x21, [sp, #32]
   8c198:	f9000a7f 	str	xzr, [x19, #16]
   8c19c:	17ffffd4 	b	8c0ec <CDWHCIRootPort::Initialize()+0xec>
   8c1a0:	f94013f5 	ldr	x21, [sp, #32]
   8c1a4:	f9000a7f 	str	xzr, [x19, #16]
   8c1a8:	17ffffd1 	b	8c0ec <CDWHCIRootPort::Initialize()+0xec>
   8c1ac:	00000000 	udf	#0

000000000008c1b0 <TQueueEntry::operator new(unsigned long)>:
   8c1b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c1b4:	f100601f 	cmp	x0, #0x18
   8c1b8:	910003fd 	mov	x29, sp
   8c1bc:	540000c1 	b.ne	8c1d4 <TQueueEntry::operator new(unsigned long)+0x24>  // b.any
   8c1c0:	d00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8c1c4:	f945d000 	ldr	x0, [x0, #2976]
   8c1c8:	b4000120 	cbz	x0, 8c1ec <TQueueEntry::operator new(unsigned long)+0x3c>
   8c1cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c1d0:	140058b4 	b	a24a0 <CClassAllocator::Allocate()>
   8c1d4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c1d8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c1dc:	91266021 	add	x1, x1, #0x998
   8c1e0:	9126c000 	add	x0, x0, #0x9b0
   8c1e4:	52800502 	mov	w2, #0x28                  	// #40
   8c1e8:	94005746 	bl	a1f00 <assertion_failed>
   8c1ec:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c1f0:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c1f4:	91266021 	add	x1, x1, #0x998
   8c1f8:	911ca000 	add	x0, x0, #0x728
   8c1fc:	52800502 	mov	w2, #0x28                  	// #40
   8c200:	94005740 	bl	a1f00 <assertion_failed>
   8c204:	d503201f 	nop
   8c208:	d503201f 	nop
   8c20c:	d503201f 	nop

000000000008c210 <TQueueEntry::operator delete(void*, unsigned long)>:
   8c210:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c214:	f100603f 	cmp	x1, #0x18
   8c218:	910003fd 	mov	x29, sp
   8c21c:	54000101 	b.ne	8c23c <TQueueEntry::operator delete(void*, unsigned long)+0x2c>  // b.any
   8c220:	aa0003e2 	mov	x2, x0
   8c224:	d00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8c228:	f945d000 	ldr	x0, [x0, #2976]
   8c22c:	b4000140 	cbz	x0, 8c254 <TQueueEntry::operator delete(void*, unsigned long)+0x44>
   8c230:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c234:	aa0203e1 	mov	x1, x2
   8c238:	140058ce 	b	a2570 <CClassAllocator::Free(void*)>
   8c23c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c240:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c244:	91266021 	add	x1, x1, #0x998
   8c248:	9126c000 	add	x0, x0, #0x9b0
   8c24c:	52800502 	mov	w2, #0x28                  	// #40
   8c250:	9400572c 	bl	a1f00 <assertion_failed>
   8c254:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c258:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c25c:	91266021 	add	x1, x1, #0x998
   8c260:	911ca000 	add	x0, x0, #0x728
   8c264:	52800502 	mov	w2, #0x28                  	// #40
   8c268:	94005726 	bl	a1f00 <assertion_failed>
   8c26c:	d503201f 	nop

000000000008c270 <TQueueEntry::InitAllocator(unsigned int)>:
   8c270:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c274:	910003fd 	mov	x29, sp
   8c278:	a90153f3 	stp	x19, x20, [sp, #16]
   8c27c:	d00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8c280:	f945d281 	ldr	x1, [x20, #2976]
   8c284:	b50001c1 	cbnz	x1, 8c2bc <TQueueEntry::InitAllocator(unsigned int)+0x4c>
   8c288:	2a0003f3 	mov	w19, w0
   8c28c:	d2800700 	mov	x0, #0x38                  	// #56
   8c290:	94007e28 	bl	abb30 <operator new(unsigned long)>
   8c294:	2a1303e2 	mov	w2, w19
   8c298:	d2800301 	mov	x1, #0x18                  	// #24
   8c29c:	aa0003f3 	mov	x19, x0
   8c2a0:	f0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8c2a4:	91274063 	add	x3, x3, #0x9d0
   8c2a8:	94005822 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8c2ac:	f905d293 	str	x19, [x20, #2976]
   8c2b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c2b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c2b8:	d65f03c0 	ret
   8c2bc:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c2c0:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c2c4:	91266021 	add	x1, x1, #0x998
   8c2c8:	911de000 	add	x0, x0, #0x778
   8c2cc:	52800502 	mov	w2, #0x28                  	// #40
   8c2d0:	9400570c 	bl	a1f00 <assertion_failed>
   8c2d4:	d503201f 	nop
   8c2d8:	d503201f 	nop
   8c2dc:	d503201f 	nop

000000000008c2e0 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)>:
   8c2e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c2e4:	910003fd 	mov	x29, sp
   8c2e8:	f90013f5 	str	x21, [sp, #32]
   8c2ec:	d00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8c2f0:	f945d2a3 	ldr	x3, [x21, #2976]
   8c2f4:	a90153f3 	stp	x19, x20, [sp, #16]
   8c2f8:	2a0003f3 	mov	w19, w0
   8c2fc:	2a0103f4 	mov	w20, w1
   8c300:	b4000103 	cbz	x3, 8c320 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8c304:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c308:	2a0103e2 	mov	w2, w1
   8c30c:	f94013f5 	ldr	x21, [sp, #32]
   8c310:	2a0003e1 	mov	w1, w0
   8c314:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c318:	aa0303e0 	mov	x0, x3
   8c31c:	14005815 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8c320:	d2800700 	mov	x0, #0x38                  	// #56
   8c324:	94007e03 	bl	abb30 <operator new(unsigned long)>
   8c328:	2a1403e3 	mov	w3, w20
   8c32c:	2a1303e2 	mov	w2, w19
   8c330:	d2800301 	mov	x1, #0x18                  	// #24
   8c334:	aa0003f3 	mov	x19, x0
   8c338:	f0000124 	adrp	x4, b3000 <_etext+0x9c8>
   8c33c:	91274084 	add	x4, x4, #0x9d0
   8c340:	94005804 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8c344:	f905d2b3 	str	x19, [x21, #2976]
   8c348:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c34c:	f94013f5 	ldr	x21, [sp, #32]
   8c350:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c354:	d65f03c0 	ret
   8c358:	d503201f 	nop
   8c35c:	d503201f 	nop

000000000008c360 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>:
   8c360:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c364:	910003fd 	mov	x29, sp
   8c368:	f90013f5 	str	x21, [sp, #32]
   8c36c:	aa0003f5 	mov	x21, x0
   8c370:	a90153f3 	stp	x19, x20, [sp, #16]
   8c374:	2a0203f3 	mov	w19, w2
   8c378:	2a0103f4 	mov	w20, w1
   8c37c:	94008041 	bl	ac480 <CPtrListFIQ::CPtrListFIQ(unsigned int)>
   8c380:	b9000ab3 	str	w19, [x21, #8]
   8c384:	d00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8c388:	f945d2a0 	ldr	x0, [x21, #2976]
   8c38c:	b40000e0 	cbz	x0, 8c3a8 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)+0x48>
   8c390:	f94013f5 	ldr	x21, [sp, #32]
   8c394:	2a1303e2 	mov	w2, w19
   8c398:	2a1403e1 	mov	w1, w20
   8c39c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c3a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c3a4:	140057f3 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8c3a8:	d2800700 	mov	x0, #0x38                  	// #56
   8c3ac:	94007de1 	bl	abb30 <operator new(unsigned long)>
   8c3b0:	2a1303e3 	mov	w3, w19
   8c3b4:	2a1403e2 	mov	w2, w20
   8c3b8:	aa0003f3 	mov	x19, x0
   8c3bc:	d2800301 	mov	x1, #0x18                  	// #24
   8c3c0:	f0000124 	adrp	x4, b3000 <_etext+0x9c8>
   8c3c4:	91274084 	add	x4, x4, #0x9d0
   8c3c8:	940057e2 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8c3cc:	f905d2b3 	str	x19, [x21, #2976]
   8c3d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c3d4:	f94013f5 	ldr	x21, [sp, #32]
   8c3d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c3dc:	d65f03c0 	ret

000000000008c3e0 <CDWHCITransactionQueue::Flush()>:
   8c3e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c3e4:	910003fd 	mov	x29, sp
   8c3e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c3ec:	aa0003f5 	mov	x21, x0
   8c3f0:	b9400800 	ldr	w0, [x0, #8]
   8c3f4:	a90153f3 	stp	x19, x20, [sp, #16]
   8c3f8:	35000660 	cbnz	w0, 8c4c4 <CDWHCITransactionQueue::Flush()+0xe4>
   8c3fc:	aa1503e0 	mov	x0, x21
   8c400:	94008048 	bl	ac520 <CPtrListFIQ::GetFirst()>
   8c404:	aa0003f4 	mov	x20, x0
   8c408:	b4000520 	cbz	x0, 8c4ac <CDWHCITransactionQueue::Flush()+0xcc>
   8c40c:	528a0ab6 	mov	w22, #0x5055                	// #20565
   8c410:	72ab0836 	movk	w22, #0x5841, lsl #16
   8c414:	f9001bf7 	str	x23, [sp, #48]
   8c418:	d00001f7 	adrp	x23, ca000 <vtable for CLAN7800Device+0x28>
   8c41c:	aa1403e1 	mov	x1, x20
   8c420:	aa1503e0 	mov	x0, x21
   8c424:	9400805b 	bl	ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>
   8c428:	aa0003f3 	mov	x19, x0
   8c42c:	b4000500 	cbz	x0, 8c4cc <CDWHCITransactionQueue::Flush()+0xec>
   8c430:	b9400000 	ldr	w0, [x0]
   8c434:	6b16001f 	cmp	w0, w22
   8c438:	54000561 	b.ne	8c4e4 <CDWHCITransactionQueue::Flush()+0x104>  // b.any
   8c43c:	aa1503e0 	mov	x0, x21
   8c440:	aa1403e1 	mov	x1, x20
   8c444:	9400810b 	bl	ac870 <CPtrListFIQ::Remove(TPtrListElement*)>
   8c448:	f9400660 	ldr	x0, [x19, #8]
   8c44c:	b4000580 	cbz	x0, 8c4fc <CDWHCITransactionQueue::Flush()+0x11c>
   8c450:	940004b0 	bl	8d710 <CDWHCITransferStageData::GetURB() const>
   8c454:	aa0003f4 	mov	x20, x0
   8c458:	b40000a0 	cbz	x0, 8c46c <CDWHCITransactionQueue::Flush()+0x8c>
   8c45c:	94002a65 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   8c460:	aa1403e0 	mov	x0, x20
   8c464:	d2801201 	mov	x1, #0x90                  	// #144
   8c468:	94002b42 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   8c46c:	f9400674 	ldr	x20, [x19, #8]
   8c470:	b40000d4 	cbz	x20, 8c488 <CDWHCITransactionQueue::Flush()+0xa8>
   8c474:	aa1403e0 	mov	x0, x20
   8c478:	94000286 	bl	8ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>
   8c47c:	aa1403e0 	mov	x0, x20
   8c480:	d2802001 	mov	x1, #0x100                 	// #256
   8c484:	940004d7 	bl	8d7e0 <CDWHCITransferStageData::operator delete(void*, unsigned long)>
   8c488:	f945d2e0 	ldr	x0, [x23, #2976]
   8c48c:	b4000440 	cbz	x0, 8c514 <CDWHCITransactionQueue::Flush()+0x134>
   8c490:	aa1303e1 	mov	x1, x19
   8c494:	94005837 	bl	a2570 <CClassAllocator::Free(void*)>
   8c498:	aa1503e0 	mov	x0, x21
   8c49c:	94008021 	bl	ac520 <CPtrListFIQ::GetFirst()>
   8c4a0:	aa0003f4 	mov	x20, x0
   8c4a4:	b5fffbc0 	cbnz	x0, 8c41c <CDWHCITransactionQueue::Flush()+0x3c>
   8c4a8:	f9401bf7 	ldr	x23, [sp, #48]
   8c4ac:	b9400aa0 	ldr	w0, [x21, #8]
   8c4b0:	350003e0 	cbnz	w0, 8c52c <CDWHCITransactionQueue::Flush()+0x14c>
   8c4b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c4b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c4bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c4c0:	d65f03c0 	ret
   8c4c4:	940082ef 	bl	ad080 <EnterCritical>
   8c4c8:	17ffffcd 	b	8c3fc <CDWHCITransactionQueue::Flush()+0x1c>
   8c4cc:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c4d0:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c4d4:	91266021 	add	x1, x1, #0x998
   8c4d8:	91278000 	add	x0, x0, #0x9e0
   8c4dc:	528009e2 	mov	w2, #0x4f                  	// #79
   8c4e0:	94005688 	bl	a1f00 <assertion_failed>
   8c4e4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c4e8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c4ec:	91266021 	add	x1, x1, #0x998
   8c4f0:	9127c000 	add	x0, x0, #0x9f0
   8c4f4:	52800a02 	mov	w2, #0x50                  	// #80
   8c4f8:	94005682 	bl	a1f00 <assertion_failed>
   8c4fc:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c500:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c504:	91266021 	add	x1, x1, #0x998
   8c508:	91286000 	add	x0, x0, #0xa18
   8c50c:	52800a82 	mov	w2, #0x54                  	// #84
   8c510:	9400567c 	bl	a1f00 <assertion_failed>
   8c514:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c518:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c51c:	91266021 	add	x1, x1, #0x998
   8c520:	911ca000 	add	x0, x0, #0x728
   8c524:	52800502 	mov	w2, #0x28                  	// #40
   8c528:	94005676 	bl	a1f00 <assertion_failed>
   8c52c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c530:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c534:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c538:	14008302 	b	ad140 <LeaveCritical>
   8c53c:	d503201f 	nop

000000000008c540 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>:
   8c540:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c544:	910003fd 	mov	x29, sp
   8c548:	f9000bf3 	str	x19, [sp, #16]
   8c54c:	aa0003f3 	mov	x19, x0
   8c550:	97ffffa4 	bl	8c3e0 <CDWHCITransactionQueue::Flush()>
   8c554:	aa1303e0 	mov	x0, x19
   8c558:	f9400bf3 	ldr	x19, [sp, #16]
   8c55c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c560:	14007fe4 	b	ac4f0 <CPtrListFIQ::~CPtrListFIQ()>
   8c564:	d503201f 	nop
   8c568:	d503201f 	nop
   8c56c:	d503201f 	nop

000000000008c570 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>:
   8c570:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c574:	910003fd 	mov	x29, sp
   8c578:	a90153f3 	stp	x19, x20, [sp, #16]
   8c57c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c580:	a90363f7 	stp	x23, x24, [sp, #48]
   8c584:	b4000a21 	cbz	x1, 8c6c8 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x158>
   8c588:	aa0003f6 	mov	x22, x0
   8c58c:	b9400800 	ldr	w0, [x0, #8]
   8c590:	aa0103f7 	mov	x23, x1
   8c594:	350007e0 	cbnz	w0, 8c690 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x120>
   8c598:	aa1603e0 	mov	x0, x22
   8c59c:	94007fe1 	bl	ac520 <CPtrListFIQ::GetFirst()>
   8c5a0:	aa0003f4 	mov	x20, x0
   8c5a4:	b40009e0 	cbz	x0, 8c6e0 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x170>
   8c5a8:	aa1403e1 	mov	x1, x20
   8c5ac:	aa1603e0 	mov	x0, x22
   8c5b0:	528a0ab8 	mov	w24, #0x5055                	// #20565
   8c5b4:	72ab0838 	movk	w24, #0x5841, lsl #16
   8c5b8:	94007ff6 	bl	ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>
   8c5bc:	aa0003f3 	mov	x19, x0
   8c5c0:	b40002a0 	cbz	x0, 8c614 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xa4>
   8c5c4:	b9400002 	ldr	w2, [x0]
   8c5c8:	6b18005f 	cmp	w2, w24
   8c5cc:	54000661 	b.ne	8c698 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x128>  // b.any
   8c5d0:	aa1403e1 	mov	x1, x20
   8c5d4:	aa1603e0 	mov	x0, x22
   8c5d8:	94007fd6 	bl	ac530 <CPtrListFIQ::GetNext(TPtrListElement*)>
   8c5dc:	aa0003f5 	mov	x21, x0
   8c5e0:	f9400662 	ldr	x2, [x19, #8]
   8c5e4:	b4000662 	cbz	x2, 8c6b0 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x140>
   8c5e8:	aa0203e0 	mov	x0, x2
   8c5ec:	94000455 	bl	8d740 <CDWHCITransferStageData::GetDevice() const>
   8c5f0:	eb0002ff 	cmp	x23, x0
   8c5f4:	540001c0 	b.eq	8c62c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xbc>  // b.none
   8c5f8:	b4000755 	cbz	x21, 8c6e0 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x170>
   8c5fc:	aa1503f4 	mov	x20, x21
   8c600:	aa1603e0 	mov	x0, x22
   8c604:	aa1403e1 	mov	x1, x20
   8c608:	94007fe2 	bl	ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>
   8c60c:	aa0003f3 	mov	x19, x0
   8c610:	b5fffda0 	cbnz	x0, 8c5c4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x54>
   8c614:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c618:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c61c:	91266021 	add	x1, x1, #0x998
   8c620:	91278000 	add	x0, x0, #0x9e0
   8c624:	52800de2 	mov	w2, #0x6f                  	// #111
   8c628:	94005636 	bl	a1f00 <assertion_failed>
   8c62c:	aa1603e0 	mov	x0, x22
   8c630:	aa1403e1 	mov	x1, x20
   8c634:	9400808f 	bl	ac870 <CPtrListFIQ::Remove(TPtrListElement*)>
   8c638:	f9400660 	ldr	x0, [x19, #8]
   8c63c:	b40006a0 	cbz	x0, 8c710 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x1a0>
   8c640:	94000434 	bl	8d710 <CDWHCITransferStageData::GetURB() const>
   8c644:	aa0003f4 	mov	x20, x0
   8c648:	b40000a0 	cbz	x0, 8c65c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xec>
   8c64c:	940029e9 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   8c650:	aa1403e0 	mov	x0, x20
   8c654:	d2801201 	mov	x1, #0x90                  	// #144
   8c658:	94002ac6 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   8c65c:	f9400674 	ldr	x20, [x19, #8]
   8c660:	b40000d4 	cbz	x20, 8c678 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x108>
   8c664:	aa1403e0 	mov	x0, x20
   8c668:	9400020a 	bl	8ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>
   8c66c:	aa1403e0 	mov	x0, x20
   8c670:	d2802001 	mov	x1, #0x100                 	// #256
   8c674:	9400045b 	bl	8d7e0 <CDWHCITransferStageData::operator delete(void*, unsigned long)>
   8c678:	d00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8c67c:	f945d000 	ldr	x0, [x0, #2976]
   8c680:	b4000540 	cbz	x0, 8c728 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x1b8>
   8c684:	aa1303e1 	mov	x1, x19
   8c688:	940057ba 	bl	a2570 <CClassAllocator::Free(void*)>
   8c68c:	17ffffdb 	b	8c5f8 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x88>
   8c690:	9400827c 	bl	ad080 <EnterCritical>
   8c694:	17ffffc1 	b	8c598 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x28>
   8c698:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c69c:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c6a0:	91266021 	add	x1, x1, #0x998
   8c6a4:	9127c000 	add	x0, x0, #0x9f0
   8c6a8:	52800e02 	mov	w2, #0x70                  	// #112
   8c6ac:	94005615 	bl	a1f00 <assertion_failed>
   8c6b0:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c6b4:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c6b8:	91266021 	add	x1, x1, #0x998
   8c6bc:	91286000 	add	x0, x0, #0xa18
   8c6c0:	52800e82 	mov	w2, #0x74                  	// #116
   8c6c4:	9400560f 	bl	a1f00 <assertion_failed>
   8c6c8:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c6cc:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c6d0:	91266021 	add	x1, x1, #0x998
   8c6d4:	9128c000 	add	x0, x0, #0xa30
   8c6d8:	52800ce2 	mov	w2, #0x67                  	// #103
   8c6dc:	94005609 	bl	a1f00 <assertion_failed>
   8c6e0:	b9400ac0 	ldr	w0, [x22, #8]
   8c6e4:	350000c0 	cbnz	w0, 8c6fc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x18c>
   8c6e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c6ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c6f0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c6f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c6f8:	d65f03c0 	ret
   8c6fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c700:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c704:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c708:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c70c:	1400828d 	b	ad140 <LeaveCritical>
   8c710:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c714:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c718:	91266021 	add	x1, x1, #0x998
   8c71c:	91286000 	add	x0, x0, #0xa18
   8c720:	52800f22 	mov	w2, #0x79                  	// #121
   8c724:	940055f7 	bl	a1f00 <assertion_failed>
   8c728:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c72c:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c730:	91266021 	add	x1, x1, #0x998
   8c734:	911ca000 	add	x0, x0, #0x728
   8c738:	52800502 	mov	w2, #0x28                  	// #40
   8c73c:	940055f1 	bl	a1f00 <assertion_failed>

000000000008c740 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>:
   8c740:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c744:	910003fd 	mov	x29, sp
   8c748:	a90153f3 	stp	x19, x20, [sp, #16]
   8c74c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c750:	a90363f7 	stp	x23, x24, [sp, #48]
   8c754:	b40008c1 	cbz	x1, 8c86c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x12c>
   8c758:	12003c56 	and	w22, w2, #0xffff
   8c75c:	aa0003f3 	mov	x19, x0
   8c760:	5287ffe0 	mov	w0, #0x3fff                	// #16383
   8c764:	6b0002df 	cmp	w22, w0
   8c768:	540009a8 	b.hi	8c89c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x15c>  // b.pmore
   8c76c:	d00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8c770:	f945d000 	ldr	x0, [x0, #2976]
   8c774:	b4000ac0 	cbz	x0, 8c8cc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x18c>
   8c778:	aa0103f5 	mov	x21, x1
   8c77c:	94005749 	bl	a24a0 <CClassAllocator::Allocate()>
   8c780:	aa0003f4 	mov	x20, x0
   8c784:	b4000b00 	cbz	x0, 8c8e4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x1a4>
   8c788:	b9400a60 	ldr	w0, [x19, #8]
   8c78c:	528a0aa1 	mov	w1, #0x5055                	// #20565
   8c790:	72ab0821 	movk	w1, #0x5841, lsl #16
   8c794:	b9000281 	str	w1, [x20]
   8c798:	f9000695 	str	x21, [x20, #8]
   8c79c:	79002296 	strh	w22, [x20, #16]
   8c7a0:	350004e0 	cbnz	w0, 8c83c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xfc>
   8c7a4:	aa1303e0 	mov	x0, x19
   8c7a8:	94007f5e 	bl	ac520 <CPtrListFIQ::GetFirst()>
   8c7ac:	aa0003f8 	mov	x24, x0
   8c7b0:	b4000540 	cbz	x0, 8c858 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x118>
   8c7b4:	528a0ab5 	mov	w21, #0x5055                	// #20565
   8c7b8:	72ab0835 	movk	w21, #0x5841, lsl #16
   8c7bc:	5283ffd7 	mov	w23, #0x1ffe                	// #8190
   8c7c0:	aa1803e1 	mov	x1, x24
   8c7c4:	aa1303e0 	mov	x0, x19
   8c7c8:	94007f72 	bl	ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>
   8c7cc:	b40005c0 	cbz	x0, 8c884 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x144>
   8c7d0:	b9400001 	ldr	w1, [x0]
   8c7d4:	6b15003f 	cmp	w1, w21
   8c7d8:	540006e1 	b.ne	8c8b4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x174>  // b.any
   8c7dc:	79402002 	ldrh	w2, [x0, #16]
   8c7e0:	6b16005f 	cmp	w2, w22
   8c7e4:	54000200 	b.eq	8c824 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xe4>  // b.none
   8c7e8:	4b160042 	sub	w2, w2, w22
   8c7ec:	12003442 	and	w2, w2, #0x3fff
   8c7f0:	6b17005f 	cmp	w2, w23
   8c7f4:	54000188 	b.hi	8c824 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xe4>  // b.pmore
   8c7f8:	aa1403e2 	mov	x2, x20
   8c7fc:	aa1803e1 	mov	x1, x24
   8c800:	aa1303e0 	mov	x0, x19
   8c804:	94007f7b 	bl	ac5f0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>
   8c808:	b9400a60 	ldr	w0, [x19, #8]
   8c80c:	350001c0 	cbnz	w0, 8c844 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x104>
   8c810:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c814:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c818:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c81c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c820:	d65f03c0 	ret
   8c824:	aa1803e1 	mov	x1, x24
   8c828:	aa1303e0 	mov	x0, x19
   8c82c:	94007f41 	bl	ac530 <CPtrListFIQ::GetNext(TPtrListElement*)>
   8c830:	b4000140 	cbz	x0, 8c858 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x118>
   8c834:	aa0003f8 	mov	x24, x0
   8c838:	17ffffe2 	b	8c7c0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x80>
   8c83c:	94008211 	bl	ad080 <EnterCritical>
   8c840:	17ffffd9 	b	8c7a4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x64>
   8c844:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c848:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c84c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c850:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c854:	1400823b 	b	ad140 <LeaveCritical>
   8c858:	aa1403e2 	mov	x2, x20
   8c85c:	aa1803e1 	mov	x1, x24
   8c860:	aa1303e0 	mov	x0, x19
   8c864:	94007fb3 	bl	ac730 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>
   8c868:	17ffffe8 	b	8c808 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xc8>
   8c86c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c870:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c874:	91266021 	add	x1, x1, #0x998
   8c878:	91288000 	add	x0, x0, #0xa20
   8c87c:	528011a2 	mov	w2, #0x8d                  	// #141
   8c880:	940055a0 	bl	a1f00 <assertion_failed>
   8c884:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c888:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c88c:	91266021 	add	x1, x1, #0x998
   8c890:	9129a000 	add	x0, x0, #0xa68
   8c894:	528013e2 	mov	w2, #0x9f                  	// #159
   8c898:	9400559a 	bl	a1f00 <assertion_failed>
   8c89c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c8a0:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c8a4:	91266021 	add	x1, x1, #0x998
   8c8a8:	91290000 	add	x0, x0, #0xa40
   8c8ac:	528011c2 	mov	w2, #0x8e                  	// #142
   8c8b0:	94005594 	bl	a1f00 <assertion_failed>
   8c8b4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c8b8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c8bc:	91266021 	add	x1, x1, #0x998
   8c8c0:	9129e000 	add	x0, x0, #0xa78
   8c8c4:	52801402 	mov	w2, #0xa0                  	// #160
   8c8c8:	9400558e 	bl	a1f00 <assertion_failed>
   8c8cc:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c8d0:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c8d4:	91266021 	add	x1, x1, #0x998
   8c8d8:	911ca000 	add	x0, x0, #0x728
   8c8dc:	52800502 	mov	w2, #0x28                  	// #40
   8c8e0:	94005588 	bl	a1f00 <assertion_failed>
   8c8e4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c8e8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c8ec:	91266021 	add	x1, x1, #0x998
   8c8f0:	91278000 	add	x0, x0, #0x9e0
   8c8f4:	52801222 	mov	w2, #0x91                  	// #145
   8c8f8:	94005582 	bl	a1f00 <assertion_failed>
   8c8fc:	d503201f 	nop

000000000008c900 <CDWHCITransactionQueue::Dequeue(unsigned short)>:
   8c900:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c904:	910003fd 	mov	x29, sp
   8c908:	a90153f3 	stp	x19, x20, [sp, #16]
   8c90c:	aa0003f3 	mov	x19, x0
   8c910:	b9400800 	ldr	w0, [x0, #8]
   8c914:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c918:	12003c36 	and	w22, w1, #0xffff
   8c91c:	35000600 	cbnz	w0, 8c9dc <CDWHCITransactionQueue::Dequeue(unsigned short)+0xdc>
   8c920:	aa1303e0 	mov	x0, x19
   8c924:	94007eff 	bl	ac520 <CPtrListFIQ::GetFirst()>
   8c928:	aa0003f5 	mov	x21, x0
   8c92c:	b4000260 	cbz	x0, 8c978 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x78>
   8c930:	aa0003e1 	mov	x1, x0
   8c934:	aa1303e0 	mov	x0, x19
   8c938:	94007f16 	bl	ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>
   8c93c:	aa0003f4 	mov	x20, x0
   8c940:	b40005a0 	cbz	x0, 8c9f4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xf4>
   8c944:	b9400281 	ldr	w1, [x20]
   8c948:	528a0aa0 	mov	w0, #0x5055                	// #20565
   8c94c:	72ab0820 	movk	w0, #0x5841, lsl #16
   8c950:	6b00003f 	cmp	w1, w0
   8c954:	540005c1 	b.ne	8ca0c <CDWHCITransactionQueue::Dequeue(unsigned short)+0x10c>  // b.any
   8c958:	79402280 	ldrh	w0, [x20, #16]
   8c95c:	6b16001f 	cmp	w0, w22
   8c960:	540001c0 	b.eq	8c998 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x98>  // b.none
   8c964:	4b160000 	sub	w0, w0, w22
   8c968:	5283ffc1 	mov	w1, #0x1ffe                	// #8190
   8c96c:	12003400 	and	w0, w0, #0x3fff
   8c970:	6b01001f 	cmp	w0, w1
   8c974:	54000128 	b.hi	8c998 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x98>  // b.pmore
   8c978:	b9400a60 	ldr	w0, [x19, #8]
   8c97c:	35000340 	cbnz	w0, 8c9e4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe4>
   8c980:	d2800013 	mov	x19, #0x0                   	// #0
   8c984:	aa1303e0 	mov	x0, x19
   8c988:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c98c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c990:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c994:	d65f03c0 	ret
   8c998:	aa1303e0 	mov	x0, x19
   8c99c:	aa1503e1 	mov	x1, x21
   8c9a0:	94007fb4 	bl	ac870 <CPtrListFIQ::Remove(TPtrListElement*)>
   8c9a4:	b9400a60 	ldr	w0, [x19, #8]
   8c9a8:	35000220 	cbnz	w0, 8c9ec <CDWHCITransactionQueue::Dequeue(unsigned short)+0xec>
   8c9ac:	f9400693 	ldr	x19, [x20, #8]
   8c9b0:	b40003b3 	cbz	x19, 8ca24 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x124>
   8c9b4:	d00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8c9b8:	f945d000 	ldr	x0, [x0, #2976]
   8c9bc:	b4000400 	cbz	x0, 8ca3c <CDWHCITransactionQueue::Dequeue(unsigned short)+0x13c>
   8c9c0:	aa1403e1 	mov	x1, x20
   8c9c4:	940056eb 	bl	a2570 <CClassAllocator::Free(void*)>
   8c9c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c9cc:	aa1303e0 	mov	x0, x19
   8c9d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c9d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c9d8:	d65f03c0 	ret
   8c9dc:	940081a9 	bl	ad080 <EnterCritical>
   8c9e0:	17ffffd0 	b	8c920 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x20>
   8c9e4:	940081d7 	bl	ad140 <LeaveCritical>
   8c9e8:	17ffffe6 	b	8c980 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x80>
   8c9ec:	940081d5 	bl	ad140 <LeaveCritical>
   8c9f0:	17ffffef 	b	8c9ac <CDWHCITransactionQueue::Dequeue(unsigned short)+0xac>
   8c9f4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8c9f8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8c9fc:	91266021 	add	x1, x1, #0x998
   8ca00:	91278000 	add	x0, x0, #0x9e0
   8ca04:	52801882 	mov	w2, #0xc4                  	// #196
   8ca08:	9400553e 	bl	a1f00 <assertion_failed>
   8ca0c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ca10:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ca14:	91266021 	add	x1, x1, #0x998
   8ca18:	9127c000 	add	x0, x0, #0x9f0
   8ca1c:	528018a2 	mov	w2, #0xc5                  	// #197
   8ca20:	94005538 	bl	a1f00 <assertion_failed>
   8ca24:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ca28:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ca2c:	91266021 	add	x1, x1, #0x998
   8ca30:	91288000 	add	x0, x0, #0xa20
   8ca34:	52801a62 	mov	w2, #0xd3                  	// #211
   8ca38:	94005532 	bl	a1f00 <assertion_failed>
   8ca3c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ca40:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ca44:	91266021 	add	x1, x1, #0x998
   8ca48:	911ca000 	add	x0, x0, #0x728
   8ca4c:	52800502 	mov	w2, #0x28                  	// #40
   8ca50:	9400552c 	bl	a1f00 <assertion_failed>
	...

000000000008ca60 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
   8ca60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8ca64:	910003fd 	mov	x29, sp
   8ca68:	a90153f3 	stp	x19, x20, [sp, #16]
   8ca6c:	aa0003f3 	mov	x19, x0
   8ca70:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ca74:	12001c96 	and	w22, w4, #0xff
   8ca78:	b9000001 	str	w1, [x0]
   8ca7c:	f9000402 	str	x2, [x0, #8]
   8ca80:	39004003 	strb	w3, [x0, #16]
   8ca84:	39004416 	strb	w22, [x0, #17]
   8ca88:	b900141f 	str	wzr, [x0, #20]
   8ca8c:	3900641f 	strb	wzr, [x0, #25]
   8ca90:	a904fc1f 	stp	xzr, xzr, [x0, #72]
   8ca94:	f9002c1f 	str	xzr, [x0, #88]
   8ca98:	b900c81f 	str	wzr, [x0, #200]
   8ca9c:	f900681f 	str	xzr, [x0, #208]
   8caa0:	b4001342 	cbz	x2, 8cd08 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
   8caa4:	aa0203f4 	mov	x20, x2
   8caa8:	2a0503f5 	mov	w21, w5
   8caac:	aa0203e0 	mov	x0, x2
   8cab0:	940028d4 	bl	96e00 <CUSBRequest::GetEndpoint() const>
   8cab4:	f9001660 	str	x0, [x19, #40]
   8cab8:	b4001340 	cbz	x0, 8cd20 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c0>
   8cabc:	94000d4d 	bl	8fff0 <CUSBEndpoint::GetDevice() const>
   8cac0:	f9001260 	str	x0, [x19, #32]
   8cac4:	b40013a0 	cbz	x0, 8cd38 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
   8cac8:	940006b2 	bl	8e590 <CUSBDevice::GetSpeed() const>
   8cacc:	2a0003e1 	mov	w1, w0
   8cad0:	f9401660 	ldr	x0, [x19, #40]
   8cad4:	b9003261 	str	w1, [x19, #48]
   8cad8:	94000d62 	bl	90060 <CUSBEndpoint::GetMaxPacketSize() const>
   8cadc:	2a0003e1 	mov	w1, w0
   8cae0:	f9401260 	ldr	x0, [x19, #32]
   8cae4:	b9003661 	str	w1, [x19, #52]
   8cae8:	940006ae 	bl	8e5a0 <CUSBDevice::IsSplit() const>
   8caec:	39006260 	strb	w0, [x19, #24]
   8caf0:	360003f6 	tbz	w22, #0, 8cb6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x10c>
   8caf4:	91020260 	add	x0, x19, #0x80
   8caf8:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
   8cafc:	a9038661 	stp	x1, x1, [x19, #56]
   8cb00:	f9006260 	str	x0, [x19, #192]
   8cb04:	92400400 	and	x0, x0, #0x3
   8cb08:	b5001240 	cbnz	x0, 8cd50 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f0>
   8cb0c:	39406260 	ldrb	w0, [x19, #24]
   8cb10:	36000760 	tbz	w0, #0, 8cbfc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x19c>
   8cb14:	f9401660 	ldr	x0, [x19, #40]
   8cb18:	b4001320 	cbz	x0, 8cd7c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
   8cb1c:	94000d45 	bl	90030 <CUSBEndpoint::GetType() const>
   8cb20:	71000c1f 	cmp	w0, #0x3
   8cb24:	54000be0 	b.eq	8cca0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x240>  // b.none
   8cb28:	f9401660 	ldr	x0, [x19, #40]
   8cb2c:	b4001740 	cbz	x0, 8ce14 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3b4>
   8cb30:	94000d40 	bl	90030 <CUSBEndpoint::GetType() const>
   8cb34:	51000800 	sub	w0, w0, #0x2
   8cb38:	7100041f 	cmp	w0, #0x1
   8cb3c:	d2800400 	mov	x0, #0x20                  	// #32
   8cb40:	54001148 	b.hi	8cd68 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>  // b.pmore
   8cb44:	97fffc4b 	bl	8bc70 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned long)>
   8cb48:	aa0003f4 	mov	x20, x0
   8cb4c:	97fffc31 	bl	8bc10 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
   8cb50:	f9006a74 	str	x20, [x19, #208]
   8cb54:	d503201f 	nop
   8cb58:	350007d5 	cbnz	w21, 8cc50 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1f0>
   8cb5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cb60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cb64:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8cb68:	d65f03c0 	ret
   8cb6c:	f9401660 	ldr	x0, [x19, #40]
   8cb70:	52800001 	mov	w1, #0x0                   	// #0
   8cb74:	94000d4f 	bl	900b0 <CUSBEndpoint::GetNextPID(bool)>
   8cb78:	34000a20 	cbz	w0, 8ccbc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x25c>
   8cb7c:	aa1403e0 	mov	x0, x20
   8cb80:	940028ec 	bl	96f30 <CUSBRequest::GetBuffer()>
   8cb84:	f9006260 	str	x0, [x19, #192]
   8cb88:	aa1403e0 	mov	x0, x20
   8cb8c:	940028f9 	bl	96f70 <CUSBRequest::GetBufLen() const>
   8cb90:	2a0003e2 	mov	w2, w0
   8cb94:	b9403663 	ldr	w3, [x19, #52]
   8cb98:	39406264 	ldrb	w4, [x19, #24]
   8cb9c:	51000461 	sub	w1, w3, #0x1
   8cba0:	0b020021 	add	w1, w1, w2
   8cba4:	f9401660 	ldr	x0, [x19, #40]
   8cba8:	1ac30821 	udiv	w1, w1, w3
   8cbac:	29070662 	stp	w2, w1, [x19, #56]
   8cbb0:	360009e4 	tbz	w4, #0, 8ccec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x28c>
   8cbb4:	b4000e40 	cbz	x0, 8cd7c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
   8cbb8:	94000d1e 	bl	90030 <CUSBEndpoint::GetType() const>
   8cbbc:	71000c1f 	cmp	w0, #0x3
   8cbc0:	54000ea0 	b.eq	8cd94 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x334>  // b.none
   8cbc4:	29468261 	ldp	w1, w0, [x19, #52]
   8cbc8:	6b01001f 	cmp	w0, w1
   8cbcc:	1a819000 	csel	w0, w0, w1, ls	// ls = plast
   8cbd0:	b9004260 	str	w0, [x19, #64]
   8cbd4:	52800021 	mov	w1, #0x1                   	// #1
   8cbd8:	f9406260 	ldr	x0, [x19, #192]
   8cbdc:	b9004661 	str	w1, [x19, #68]
   8cbe0:	b5fff920 	cbnz	x0, 8cb04 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xa4>
   8cbe4:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cbe8:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cbec:	912a8021 	add	x1, x1, #0xaa0
   8cbf0:	912d0000 	add	x0, x0, #0xb40
   8cbf4:	52801102 	mov	w2, #0x88                  	// #136
   8cbf8:	940054c2 	bl	a1f00 <assertion_failed>
   8cbfc:	f9401260 	ldr	x0, [x19, #32]
   8cc00:	9400066c 	bl	8e5b0 <CUSBDevice::GetHubAddress() const>
   8cc04:	72001c1f 	tst	w0, #0xff
   8cc08:	54fffa81 	b.ne	8cb58 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf8>  // b.any
   8cc0c:	b9403260 	ldr	w0, [x19, #48]
   8cc10:	7100081f 	cmp	w0, #0x2
   8cc14:	54fffa20 	b.eq	8cb58 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf8>  // b.none
   8cc18:	d2800200 	mov	x0, #0x10                  	// #16
   8cc1c:	97fffab9 	bl	8b700 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned long)>
   8cc20:	aa0003f4 	mov	x20, x0
   8cc24:	f9401660 	ldr	x0, [x19, #40]
   8cc28:	b4000f60 	cbz	x0, 8ce14 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3b4>
   8cc2c:	94000d01 	bl	90030 <CUSBEndpoint::GetType() const>
   8cc30:	2a0003e1 	mov	w1, w0
   8cc34:	51000821 	sub	w1, w1, #0x2
   8cc38:	aa1403e0 	mov	x0, x20
   8cc3c:	7100043f 	cmp	w1, #0x1
   8cc40:	1a9f87e1 	cset	w1, ls	// ls = plast
   8cc44:	97fffaa7 	bl	8b6e0 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
   8cc48:	f9006a74 	str	x20, [x19, #208]
   8cc4c:	34fff895 	cbz	w21, 8cb5c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xfc>
   8cc50:	f9401660 	ldr	x0, [x19, #40]
   8cc54:	94000cf7 	bl	90030 <CUSBEndpoint::GetType() const>
   8cc58:	7100081f 	cmp	w0, #0x2
   8cc5c:	54000e81 	b.ne	8ce2c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3cc>  // b.any
   8cc60:	52800c81 	mov	w1, #0x64                  	// #100
   8cc64:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   8cc68:	72a20c40 	movk	w0, #0x1062, lsl #16
   8cc6c:	1b017ea5 	mul	w5, w21, w1
   8cc70:	710f9cbf 	cmp	w5, #0x3e7
   8cc74:	9ba07ca5 	umull	x5, w5, w0
   8cc78:	d366fca5 	lsr	x5, x5, #38
   8cc7c:	b9001665 	str	w5, [x19, #20]
   8cc80:	54000e29 	b.ls	8ce44 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3e4>  // b.plast
   8cc84:	94007793 	bl	aaad0 <CTimer::Get()>
   8cc88:	9400746a 	bl	a9e30 <CTimer::GetTicks() const>
   8cc8c:	b900ca60 	str	w0, [x19, #200]
   8cc90:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cc94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cc98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8cc9c:	d65f03c0 	ret
   8cca0:	d2800400 	mov	x0, #0x20                  	// #32
   8cca4:	9400043b 	bl	8dd90 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned long)>
   8cca8:	39404261 	ldrb	w1, [x19, #16]
   8ccac:	aa0003f4 	mov	x20, x0
   8ccb0:	9400042c 	bl	8dd60 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>
   8ccb4:	f9006a74 	str	x20, [x19, #208]
   8ccb8:	17ffffa8 	b	8cb58 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf8>
   8ccbc:	aa1403e0 	mov	x0, x20
   8ccc0:	94002884 	bl	96ed0 <CUSBRequest::GetSetupData()>
   8ccc4:	b9403663 	ldr	w3, [x19, #52]
   8ccc8:	52800102 	mov	w2, #0x8                   	// #8
   8cccc:	39406264 	ldrb	w4, [x19, #24]
   8ccd0:	51000461 	sub	w1, w3, #0x1
   8ccd4:	f9006260 	str	x0, [x19, #192]
   8ccd8:	0b020021 	add	w1, w1, w2
   8ccdc:	f9401660 	ldr	x0, [x19, #40]
   8cce0:	1ac30821 	udiv	w1, w1, w3
   8cce4:	29070662 	stp	w2, w1, [x19, #56]
   8cce8:	3707f664 	tbnz	w4, #0, 8cbb4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x154>
   8ccec:	b4000480 	cbz	x0, 8cd7c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x31c>
   8ccf0:	94000cd0 	bl	90030 <CUSBEndpoint::GetType() const>
   8ccf4:	71000c1f 	cmp	w0, #0x3
   8ccf8:	54000780 	b.eq	8cde8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x388>  // b.none
   8ccfc:	29470660 	ldp	w0, w1, [x19, #56]
   8cd00:	b9004260 	str	w0, [x19, #64]
   8cd04:	17ffffb5 	b	8cbd8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x178>
   8cd08:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cd0c:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cd10:	912a8021 	add	x1, x1, #0xaa0
   8cd14:	912ae000 	add	x0, x0, #0xab8
   8cd18:	528006e2 	mov	w2, #0x37                  	// #55
   8cd1c:	94005479 	bl	a1f00 <assertion_failed>
   8cd20:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cd24:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cd28:	912a8021 	add	x1, x1, #0xaa0
   8cd2c:	912b2000 	add	x0, x0, #0xac8
   8cd30:	52800742 	mov	w2, #0x3a                  	// #58
   8cd34:	94005473 	bl	a1f00 <assertion_failed>
   8cd38:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cd3c:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cd40:	912a8021 	add	x1, x1, #0xaa0
   8cd44:	912b8000 	add	x0, x0, #0xae0
   8cd48:	52800782 	mov	w2, #0x3c                  	// #60
   8cd4c:	9400546d 	bl	a1f00 <assertion_failed>
   8cd50:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cd54:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cd58:	912a8021 	add	x1, x1, #0xaa0
   8cd5c:	912d6000 	add	x0, x0, #0xb58
   8cd60:	52801122 	mov	w2, #0x89                  	// #137
   8cd64:	94005467 	bl	a1f00 <assertion_failed>
   8cd68:	97fff992 	bl	8b3b0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned long)>
   8cd6c:	aa0003f4 	mov	x20, x0
   8cd70:	97fff978 	bl	8b350 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
   8cd74:	f9006a74 	str	x20, [x19, #208]
   8cd78:	17ffff78 	b	8cb58 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf8>
   8cd7c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8cd80:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8cd84:	912a8021 	add	x1, x1, #0xaa0
   8cd88:	912b2000 	add	x0, x0, #0xac8
   8cd8c:	52802aa2 	mov	w2, #0x155                 	// #341
   8cd90:	9400545c 	bl	a1f00 <assertion_failed>
   8cd94:	f9400660 	ldr	x0, [x19, #8]
   8cd98:	9400289e 	bl	97010 <CUSBRequest::GetNumIsoPackets() const>
   8cd9c:	7100041f 	cmp	w0, #0x1
   8cda0:	540005e1 	b.ne	8ce5c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3fc>  // b.any
   8cda4:	29468261 	ldp	w1, w0, [x19, #52]
   8cda8:	6b01001f 	cmp	w0, w1
   8cdac:	54000648 	b.hi	8ce74 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x414>  // b.pmore
   8cdb0:	39404261 	ldrb	w1, [x19, #16]
   8cdb4:	7102f01f 	cmp	w0, #0xbc
   8cdb8:	1a9f97e2 	cset	w2, hi	// hi = pmore
   8cdbc:	52000021 	eor	w1, w1, #0x1
   8cdc0:	6a01005f 	tst	w2, w1
   8cdc4:	54fff060 	b.eq	8cbd0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x170>  // b.none
   8cdc8:	1102ec00 	add	w0, w0, #0xbb
   8cdcc:	52882ba1 	mov	w1, #0x415d                	// #16733
   8cdd0:	72b5c981 	movk	w1, #0xae4c, lsl #16
   8cdd4:	52801782 	mov	w2, #0xbc                  	// #188
   8cdd8:	9ba17c00 	umull	x0, w0, w1
   8cddc:	d367fc00 	lsr	x0, x0, #39
   8cde0:	29078a60 	stp	w0, w2, [x19, #60]
   8cde4:	17ffff7c 	b	8cbd4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x174>
   8cde8:	f9400660 	ldr	x0, [x19, #8]
   8cdec:	52800001 	mov	w1, #0x0                   	// #0
   8cdf0:	94002894 	bl	97040 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
   8cdf4:	12003c00 	and	w0, w0, #0xffff
   8cdf8:	b9403662 	ldr	w2, [x19, #52]
   8cdfc:	b9004260 	str	w0, [x19, #64]
   8ce00:	51000441 	sub	w1, w2, #0x1
   8ce04:	0b000021 	add	w1, w1, w0
   8ce08:	1ac20821 	udiv	w1, w1, w2
   8ce0c:	29070660 	stp	w0, w1, [x19, #56]
   8ce10:	17ffff72 	b	8cbd8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x178>
   8ce14:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ce18:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ce1c:	912a8021 	add	x1, x1, #0xaa0
   8ce20:	912b2000 	add	x0, x0, #0xac8
   8ce24:	52802982 	mov	w2, #0x14c                 	// #332
   8ce28:	94005436 	bl	a1f00 <assertion_failed>
   8ce2c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ce30:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ce34:	912a8021 	add	x1, x1, #0xaa0
   8ce38:	912e0000 	add	x0, x0, #0xb80
   8ce3c:	52801502 	mov	w2, #0xa8                  	// #168
   8ce40:	94005430 	bl	a1f00 <assertion_failed>
   8ce44:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ce48:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ce4c:	912a8021 	add	x1, x1, #0xaa0
   8ce50:	912ee000 	add	x0, x0, #0xbb8
   8ce54:	52801562 	mov	w2, #0xab                  	// #171
   8ce58:	9400542a 	bl	a1f00 <assertion_failed>
   8ce5c:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ce60:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ce64:	912a8021 	add	x1, x1, #0xaa0
   8ce68:	912bc000 	add	x0, x0, #0xaf0
   8ce6c:	52800ac2 	mov	w2, #0x56                  	// #86
   8ce70:	94005424 	bl	a1f00 <assertion_failed>
   8ce74:	f0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ce78:	f0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ce7c:	912a8021 	add	x1, x1, #0xaa0
   8ce80:	912c6000 	add	x0, x0, #0xb18
   8ce84:	52800ae2 	mov	w2, #0x57                  	// #87
   8ce88:	9400541e 	bl	a1f00 <assertion_failed>
   8ce8c:	d503201f 	nop

000000000008ce90 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
   8ce90:	f9406800 	ldr	x0, [x0, #208]
   8ce94:	b40000a0 	cbz	x0, 8cea8 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x18>
   8ce98:	f9400001 	ldr	x1, [x0]
   8ce9c:	f9400421 	ldr	x1, [x1, #8]
   8cea0:	aa0103f0 	mov	x16, x1
   8cea4:	d61f0200 	br	x16
   8cea8:	d65f03c0 	ret
   8ceac:	d503201f 	nop

000000000008ceb0 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
   8ceb0:	b9000001 	str	w1, [x0]
   8ceb4:	d65f03c0 	ret
   8ceb8:	d503201f 	nop
   8cebc:	d503201f 	nop

000000000008cec0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
   8cec0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8cec4:	910003fd 	mov	x29, sp
   8cec8:	a90153f3 	stp	x19, x20, [sp, #16]
   8cecc:	aa0003f3 	mov	x19, x0
   8ced0:	5280fb80 	mov	w0, #0x7dc                 	// #2012
   8ced4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ced8:	6a00003f 	tst	w1, w0
   8cedc:	2a0203f6 	mov	w22, w2
   8cee0:	b9005a61 	str	w1, [x19, #88]
   8cee4:	2a0303f5 	mov	w21, w3
   8cee8:	54000240 	b.eq	8cf30 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x70>  // b.none
   8ceec:	2a0103f4 	mov	w20, w1
   8cef0:	37200b74 	tbnz	w20, #4, 8d05c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
   8cef4:	363800b4 	tbz	w20, #7, 8cf08 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
   8cef8:	f9401660 	ldr	x0, [x19, #40]
   8cefc:	94000c4d 	bl	90030 <CUSBEndpoint::GetType() const>
   8cf00:	7100041f 	cmp	w0, #0x1
   8cf04:	540000a0 	b.eq	8cf18 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x58>  // b.none
   8cf08:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cf0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cf10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8cf14:	d65f03c0 	ret
   8cf18:	b9405e60 	ldr	w0, [x19, #92]
   8cf1c:	11000400 	add	w0, w0, #0x1
   8cf20:	b9005e60 	str	w0, [x19, #92]
   8cf24:	7100201f 	cmp	w0, #0x8
   8cf28:	54ffff08 	b.hi	8cf08 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>  // b.pmore
   8cf2c:	d503201f 	nop
   8cf30:	b9404260 	ldr	w0, [x19, #64]
   8cf34:	39406261 	ldrb	w1, [x19, #24]
   8cf38:	f9001bf7 	str	x23, [sp, #48]
   8cf3c:	6b150015 	subs	w21, w0, w21
   8cf40:	b9404677 	ldr	w23, [x19, #68]
   8cf44:	4b1602f4 	sub	w20, w23, w22
   8cf48:	54000420 	b.eq	8cfcc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>  // b.none
   8cf4c:	2a1503e2 	mov	w2, w21
   8cf50:	f9406263 	ldr	x3, [x19, #192]
   8cf54:	b9404a60 	ldr	w0, [x19, #72]
   8cf58:	8b020063 	add	x3, x3, x2
   8cf5c:	f9006263 	str	x3, [x19, #192]
   8cf60:	0b150000 	add	w0, w0, w21
   8cf64:	b9004a60 	str	w0, [x19, #72]
   8cf68:	360004e1 	tbz	w1, #0, 8d004 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
   8cf6c:	39406660 	ldrb	w0, [x19, #25]
   8cf70:	370004a0 	tbnz	w0, #0, 8d004 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
   8cf74:	b9403e60 	ldr	w0, [x19, #60]
   8cf78:	6b14001f 	cmp	w0, w20
   8cf7c:	54000523 	b.cc	8d020 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x160>  // b.lo, b.ul, b.last
   8cf80:	39406261 	ldrb	w1, [x19, #24]
   8cf84:	0b160000 	add	w0, w0, w22
   8cf88:	4b170000 	sub	w0, w0, w23
   8cf8c:	b9003e60 	str	w0, [x19, #60]
   8cf90:	36000781 	tbz	w1, #0, 8d080 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1c0>
   8cf94:	b9403a61 	ldr	w1, [x19, #56]
   8cf98:	b9404a60 	ldr	w0, [x19, #72]
   8cf9c:	b9404263 	ldr	w3, [x19, #64]
   8cfa0:	4b000022 	sub	w2, w1, w0
   8cfa4:	6b03005f 	cmp	w2, w3
   8cfa8:	54000502 	b.cs	8d048 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>  // b.hs, b.nlast
   8cfac:	6b00003f 	cmp	w1, w0
   8cfb0:	54000c43 	b.cc	8d138 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x278>  // b.lo, b.ul, b.last
   8cfb4:	f9401bf7 	ldr	x23, [sp, #48]
   8cfb8:	b9004262 	str	w2, [x19, #64]
   8cfbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cfc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cfc4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8cfc8:	d65f03c0 	ret
   8cfcc:	34000560 	cbz	w0, 8d078 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1b8>
   8cfd0:	36000061 	tbz	w1, #0, 8cfdc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x11c>
   8cfd4:	39406660 	ldrb	w0, [x19, #25]
   8cfd8:	37000640 	tbnz	w0, #0, 8d0a0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1e0>
   8cfdc:	f9401660 	ldr	x0, [x19, #40]
   8cfe0:	b4000a00 	cbz	x0, 8d120 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x260>
   8cfe4:	94000c13 	bl	90030 <CUSBEndpoint::GetType() const>
   8cfe8:	71000c1f 	cmp	w0, #0x3
   8cfec:	540006e1 	b.ne	8d0c8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x208>  // b.any
   8cff0:	b9404275 	ldr	w21, [x19, #64]
   8cff4:	39406261 	ldrb	w1, [x19, #24]
   8cff8:	1b157e82 	mul	w2, w20, w21
   8cffc:	aa0203f5 	mov	x21, x2
   8d000:	17ffffd4 	b	8cf50 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x90>
   8d004:	f9401660 	ldr	x0, [x19, #40]
   8d008:	2a1403e1 	mov	w1, w20
   8d00c:	39404662 	ldrb	w2, [x19, #17]
   8d010:	94000c38 	bl	900f0 <CUSBEndpoint::SkipPID(unsigned int, bool)>
   8d014:	b9403e60 	ldr	w0, [x19, #60]
   8d018:	6b14001f 	cmp	w0, w20
   8d01c:	54fffb22 	b.cs	8cf80 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xc0>  // b.hs, b.nlast
   8d020:	b9405a60 	ldr	w0, [x19, #88]
   8d024:	52800121 	mov	w1, #0x9                   	// #9
   8d028:	f9401bf7 	ldr	x23, [sp, #48]
   8d02c:	32170000 	orr	w0, w0, #0x200
   8d030:	b9003e7f 	str	wzr, [x19, #60]
   8d034:	290b0660 	stp	w0, w1, [x19, #88]
   8d038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d03c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d040:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8d044:	d65f03c0 	ret
   8d048:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d04c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d050:	f9401bf7 	ldr	x23, [sp, #48]
   8d054:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8d058:	d65f03c0 	ret
   8d05c:	f9400660 	ldr	x0, [x19, #8]
   8d060:	94002828 	bl	97100 <CUSBRequest::IsCompleteOnNAK() const>
   8d064:	3607f480 	tbz	w0, #0, 8cef4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x34>
   8d068:	39404260 	ldrb	w0, [x19, #16]
   8d06c:	36000720 	tbz	w0, #0, 8d150 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x290>
   8d070:	b9003e7f 	str	wzr, [x19, #60]
   8d074:	17ffffa5 	b	8cf08 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
   8d078:	d2800002 	mov	x2, #0x0                   	// #0
   8d07c:	17ffffb5 	b	8cf50 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x90>
   8d080:	f9401660 	ldr	x0, [x19, #40]
   8d084:	b40004e0 	cbz	x0, 8d120 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x260>
   8d088:	94000bea 	bl	90030 <CUSBEndpoint::GetType() const>
   8d08c:	71000c1f 	cmp	w0, #0x3
   8d090:	54000220 	b.eq	8d0d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x214>  // b.none
   8d094:	b9403e60 	ldr	w0, [x19, #60]
   8d098:	b9004660 	str	w0, [x19, #68]
   8d09c:	17ffffbe 	b	8cf94 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xd4>
   8d0a0:	b9403661 	ldr	w1, [x19, #52]
   8d0a4:	f9406263 	ldr	x3, [x19, #192]
   8d0a8:	b9404a62 	ldr	w2, [x19, #72]
   8d0ac:	1b017e81 	mul	w1, w20, w1
   8d0b0:	0b010042 	add	w2, w2, w1
   8d0b4:	b9004a62 	str	w2, [x19, #72]
   8d0b8:	8b214061 	add	x1, x3, w1, uxtw
   8d0bc:	f9006261 	str	x1, [x19, #192]
   8d0c0:	3607f5a0 	tbz	w0, #0, 8cf74 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
   8d0c4:	17ffffd0 	b	8d004 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
   8d0c8:	39406261 	ldrb	w1, [x19, #24]
   8d0cc:	d2800002 	mov	x2, #0x0                   	// #0
   8d0d0:	17ffffa0 	b	8cf50 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x90>
   8d0d4:	f9400660 	ldr	x0, [x19, #8]
   8d0d8:	b9404e74 	ldr	w20, [x19, #76]
   8d0dc:	11000694 	add	w20, w20, #0x1
   8d0e0:	b9004e74 	str	w20, [x19, #76]
   8d0e4:	940027cb 	bl	97010 <CUSBRequest::GetNumIsoPackets() const>
   8d0e8:	6b00029f 	cmp	w20, w0
   8d0ec:	54fffae2 	b.cs	8d048 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>  // b.hs, b.nlast
   8d0f0:	f9400660 	ldr	x0, [x19, #8]
   8d0f4:	b9404e61 	ldr	w1, [x19, #76]
   8d0f8:	940027d2 	bl	97040 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
   8d0fc:	12003c01 	and	w1, w0, #0xffff
   8d100:	b9403662 	ldr	w2, [x19, #52]
   8d104:	f9401bf7 	ldr	x23, [sp, #48]
   8d108:	51000440 	sub	w0, w2, #0x1
   8d10c:	0b010000 	add	w0, w0, w1
   8d110:	1ac20800 	udiv	w0, w0, w2
   8d114:	29070261 	stp	w1, w0, [x19, #56]
   8d118:	29080261 	stp	w1, w0, [x19, #64]
   8d11c:	17ffff7b 	b	8cf08 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
   8d120:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d124:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d128:	912a8021 	add	x1, x1, #0xaa0
   8d12c:	912b2000 	add	x0, x0, #0xac8
   8d130:	52802aa2 	mov	w2, #0x155                 	// #341
   8d134:	94005373 	bl	a1f00 <assertion_failed>
   8d138:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d13c:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d140:	912a8021 	add	x1, x1, #0xaa0
   8d144:	912f6000 	add	x0, x0, #0xbd8
   8d148:	528024a2 	mov	w2, #0x125                 	// #293
   8d14c:	9400536d 	bl	a1f00 <assertion_failed>
   8d150:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d154:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d158:	912a8021 	add	x1, x1, #0xaa0
   8d15c:	912f4000 	add	x0, x0, #0xbd0
   8d160:	52801ac2 	mov	w2, #0xd6                  	// #214
   8d164:	f9001bf7 	str	x23, [sp, #48]
   8d168:	94005366 	bl	a1f00 <assertion_failed>
   8d16c:	d503201f 	nop

000000000008d170 <CDWHCITransferStageData::SetSplitComplete(bool)>:
   8d170:	39406002 	ldrb	w2, [x0, #24]
   8d174:	36000082 	tbz	w2, #0, 8d184 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
   8d178:	12001c21 	and	w1, w1, #0xff
   8d17c:	39006401 	strb	w1, [x0, #25]
   8d180:	d65f03c0 	ret
   8d184:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d188:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d18c:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d190:	910003fd 	mov	x29, sp
   8d194:	912a8021 	add	x1, x1, #0xaa0
   8d198:	91302000 	add	x0, x0, #0xc08
   8d19c:	52802582 	mov	w2, #0x12c                 	// #300
   8d1a0:	94005358 	bl	a1f00 <assertion_failed>
   8d1a4:	d503201f 	nop
   8d1a8:	d503201f 	nop
   8d1ac:	d503201f 	nop

000000000008d1b0 <CDWHCITransferStageData::SetState(unsigned int)>:
   8d1b0:	b9005001 	str	w1, [x0, #80]
   8d1b4:	d65f03c0 	ret
   8d1b8:	d503201f 	nop
   8d1bc:	d503201f 	nop

000000000008d1c0 <CDWHCITransferStageData::GetState() const>:
   8d1c0:	b9405000 	ldr	w0, [x0, #80]
   8d1c4:	d65f03c0 	ret
   8d1c8:	d503201f 	nop
   8d1cc:	d503201f 	nop

000000000008d1d0 <CDWHCITransferStageData::SetSubState(unsigned int)>:
   8d1d0:	b9005401 	str	w1, [x0, #84]
   8d1d4:	d65f03c0 	ret
   8d1d8:	d503201f 	nop
   8d1dc:	d503201f 	nop

000000000008d1e0 <CDWHCITransferStageData::GetSubState() const>:
   8d1e0:	b9405400 	ldr	w0, [x0, #84]
   8d1e4:	d65f03c0 	ret
   8d1e8:	d503201f 	nop
   8d1ec:	d503201f 	nop

000000000008d1f0 <CDWHCITransferStageData::GetChannelNumber() const>:
   8d1f0:	b9400000 	ldr	w0, [x0]
   8d1f4:	d65f03c0 	ret
   8d1f8:	d503201f 	nop
   8d1fc:	d503201f 	nop

000000000008d200 <CDWHCITransferStageData::IsPeriodic() const>:
   8d200:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d204:	910003fd 	mov	x29, sp
   8d208:	f9401400 	ldr	x0, [x0, #40]
   8d20c:	b40000e0 	cbz	x0, 8d228 <CDWHCITransferStageData::IsPeriodic() const+0x28>
   8d210:	94000b88 	bl	90030 <CUSBEndpoint::GetType() const>
   8d214:	51000800 	sub	w0, w0, #0x2
   8d218:	7100041f 	cmp	w0, #0x1
   8d21c:	1a9f87e0 	cset	w0, ls	// ls = plast
   8d220:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d224:	d65f03c0 	ret
   8d228:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d22c:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d230:	912a8021 	add	x1, x1, #0xaa0
   8d234:	912b2000 	add	x0, x0, #0xac8
   8d238:	52802982 	mov	w2, #0x14c                 	// #332
   8d23c:	94005331 	bl	a1f00 <assertion_failed>

000000000008d240 <CDWHCITransferStageData::IsIsochronous() const>:
   8d240:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d244:	910003fd 	mov	x29, sp
   8d248:	f9401400 	ldr	x0, [x0, #40]
   8d24c:	b40000c0 	cbz	x0, 8d264 <CDWHCITransferStageData::IsIsochronous() const+0x24>
   8d250:	94000b78 	bl	90030 <CUSBEndpoint::GetType() const>
   8d254:	71000c1f 	cmp	w0, #0x3
   8d258:	1a9f17e0 	cset	w0, eq	// eq = none
   8d25c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d260:	d65f03c0 	ret
   8d264:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d268:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d26c:	912a8021 	add	x1, x1, #0xaa0
   8d270:	912b2000 	add	x0, x0, #0xac8
   8d274:	52802aa2 	mov	w2, #0x155                 	// #341
   8d278:	94005322 	bl	a1f00 <assertion_failed>
   8d27c:	d503201f 	nop

000000000008d280 <CDWHCITransferStageData::GetDeviceAddress() const>:
   8d280:	f9401000 	ldr	x0, [x0, #32]
   8d284:	b4000040 	cbz	x0, 8d28c <CDWHCITransferStageData::GetDeviceAddress() const+0xc>
   8d288:	140004be 	b	8e580 <CUSBDevice::GetAddress() const>
   8d28c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d290:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d294:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d298:	910003fd 	mov	x29, sp
   8d29c:	912a8021 	add	x1, x1, #0xaa0
   8d2a0:	912b8000 	add	x0, x0, #0xae0
   8d2a4:	52802ba2 	mov	w2, #0x15d                 	// #349
   8d2a8:	94005316 	bl	a1f00 <assertion_failed>
   8d2ac:	d503201f 	nop

000000000008d2b0 <CDWHCITransferStageData::GetEndpointType() const>:
   8d2b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d2b4:	910003fd 	mov	x29, sp
   8d2b8:	f9401400 	ldr	x0, [x0, #40]
   8d2bc:	b4000120 	cbz	x0, 8d2e0 <CDWHCITransferStageData::GetEndpointType() const+0x30>
   8d2c0:	94000b5c 	bl	90030 <CUSBEndpoint::GetType() const>
   8d2c4:	71000c1f 	cmp	w0, #0x3
   8d2c8:	54000188 	b.hi	8d2f8 <CDWHCITransferStageData::GetEndpointType() const+0x48>  // b.pmore
   8d2cc:	d0000141 	adrp	x1, b7000 <_etext+0x49c8>
   8d2d0:	91342021 	add	x1, x1, #0xd08
   8d2d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d2d8:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
   8d2dc:	d65f03c0 	ret
   8d2e0:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d2e4:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d2e8:	912a8021 	add	x1, x1, #0xaa0
   8d2ec:	912b2000 	add	x0, x0, #0xac8
   8d2f0:	52802c62 	mov	w2, #0x163                 	// #355
   8d2f4:	94005303 	bl	a1f00 <assertion_failed>
   8d2f8:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d2fc:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d300:	912a8021 	add	x1, x1, #0xaa0
   8d304:	9135c000 	add	x0, x0, #0xd70
   8d308:	52802f42 	mov	w2, #0x17a                 	// #378
   8d30c:	940052fd 	bl	a1f00 <assertion_failed>

000000000008d310 <CDWHCITransferStageData::GetEndpointNumber() const>:
   8d310:	f9401400 	ldr	x0, [x0, #40]
   8d314:	b4000040 	cbz	x0, 8d31c <CDWHCITransferStageData::GetEndpointNumber() const+0xc>
   8d318:	14000b42 	b	90020 <CUSBEndpoint::GetNumber() const>
   8d31c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d320:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d324:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d328:	910003fd 	mov	x29, sp
   8d32c:	912a8021 	add	x1, x1, #0xaa0
   8d330:	912b2000 	add	x0, x0, #0xac8
   8d334:	52803062 	mov	w2, #0x183                 	// #387
   8d338:	940052f2 	bl	a1f00 <assertion_failed>
   8d33c:	d503201f 	nop

000000000008d340 <CDWHCITransferStageData::GetMaxPacketSize() const>:
   8d340:	b9403400 	ldr	w0, [x0, #52]
   8d344:	d65f03c0 	ret
   8d348:	d503201f 	nop
   8d34c:	d503201f 	nop

000000000008d350 <CDWHCITransferStageData::GetSpeed() const>:
   8d350:	b9403000 	ldr	w0, [x0, #48]
   8d354:	d65f03c0 	ret
   8d358:	d503201f 	nop
   8d35c:	d503201f 	nop

000000000008d360 <CDWHCITransferStageData::GetPID() const>:
   8d360:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d364:	aa0003e1 	mov	x1, x0
   8d368:	910003fd 	mov	x29, sp
   8d36c:	f9401400 	ldr	x0, [x0, #40]
   8d370:	b4000160 	cbz	x0, 8d39c <CDWHCITransferStageData::GetPID() const+0x3c>
   8d374:	39404421 	ldrb	w1, [x1, #17]
   8d378:	94000b4e 	bl	900b0 <CUSBEndpoint::GetNextPID(bool)>
   8d37c:	7100081f 	cmp	w0, #0x2
   8d380:	540001a8 	b.hi	8d3b4 <CDWHCITransferStageData::GetPID() const+0x54>  // b.pmore
   8d384:	d0000141 	adrp	x1, b7000 <_etext+0x49c8>
   8d388:	91342021 	add	x1, x1, #0xd08
   8d38c:	91004021 	add	x1, x1, #0x10
   8d390:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d394:	38604820 	ldrb	w0, [x1, w0, uxtw]
   8d398:	d65f03c0 	ret
   8d39c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d3a0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d3a4:	912a8021 	add	x1, x1, #0xaa0
   8d3a8:	912b2000 	add	x0, x0, #0xac8
   8d3ac:	52803262 	mov	w2, #0x193                 	// #403
   8d3b0:	940052d4 	bl	a1f00 <assertion_failed>
   8d3b4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d3b8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d3bc:	912a8021 	add	x1, x1, #0xaa0
   8d3c0:	9135c000 	add	x0, x0, #0xd70
   8d3c4:	528034c2 	mov	w2, #0x1a6                 	// #422
   8d3c8:	940052ce 	bl	a1f00 <assertion_failed>
   8d3cc:	d503201f 	nop

000000000008d3d0 <CDWHCITransferStageData::IsDirectionIn() const>:
   8d3d0:	39404000 	ldrb	w0, [x0, #16]
   8d3d4:	d65f03c0 	ret
   8d3d8:	d503201f 	nop
   8d3dc:	d503201f 	nop

000000000008d3e0 <CDWHCITransferStageData::IsStatusStage() const>:
   8d3e0:	39404400 	ldrb	w0, [x0, #17]
   8d3e4:	d65f03c0 	ret
   8d3e8:	d503201f 	nop
   8d3ec:	d503201f 	nop

000000000008d3f0 <CDWHCITransferStageData::GetDMAAddress() const>:
   8d3f0:	f9406000 	ldr	x0, [x0, #192]
   8d3f4:	b4000040 	cbz	x0, 8d3fc <CDWHCITransferStageData::GetDMAAddress() const+0xc>
   8d3f8:	d65f03c0 	ret
   8d3fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d400:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d404:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d408:	910003fd 	mov	x29, sp
   8d40c:	912a8021 	add	x1, x1, #0xaa0
   8d410:	912d0000 	add	x0, x0, #0xb40
   8d414:	52803722 	mov	w2, #0x1b9                 	// #441
   8d418:	940052ba 	bl	a1f00 <assertion_failed>
   8d41c:	d503201f 	nop

000000000008d420 <CDWHCITransferStageData::GetBytesToTransfer() const>:
   8d420:	b9404000 	ldr	w0, [x0, #64]
   8d424:	d65f03c0 	ret
   8d428:	d503201f 	nop
   8d42c:	d503201f 	nop

000000000008d430 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
   8d430:	b9404400 	ldr	w0, [x0, #68]
   8d434:	d65f03c0 	ret
   8d438:	d503201f 	nop
   8d43c:	d503201f 	nop

000000000008d440 <CDWHCITransferStageData::IsSplit() const>:
   8d440:	39406000 	ldrb	w0, [x0, #24]
   8d444:	d65f03c0 	ret
   8d448:	d503201f 	nop
   8d44c:	d503201f 	nop

000000000008d450 <CDWHCITransferStageData::IsSplitComplete() const>:
   8d450:	39406001 	ldrb	w1, [x0, #24]
   8d454:	36000061 	tbz	w1, #0, 8d460 <CDWHCITransferStageData::IsSplitComplete() const+0x10>
   8d458:	39406400 	ldrb	w0, [x0, #25]
   8d45c:	d65f03c0 	ret
   8d460:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d464:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d468:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d46c:	910003fd 	mov	x29, sp
   8d470:	912a8021 	add	x1, x1, #0xaa0
   8d474:	91302000 	add	x0, x0, #0xc08
   8d478:	528039e2 	mov	w2, #0x1cf                 	// #463
   8d47c:	940052a1 	bl	a1f00 <assertion_failed>

000000000008d480 <CDWHCITransferStageData::GetHubAddress() const>:
   8d480:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d484:	910003fd 	mov	x29, sp
   8d488:	39406001 	ldrb	w1, [x0, #24]
   8d48c:	360000a1 	tbz	w1, #0, 8d4a0 <CDWHCITransferStageData::GetHubAddress() const+0x20>
   8d490:	f9401000 	ldr	x0, [x0, #32]
   8d494:	b4000120 	cbz	x0, 8d4b8 <CDWHCITransferStageData::GetHubAddress() const+0x38>
   8d498:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d49c:	14000445 	b	8e5b0 <CUSBDevice::GetHubAddress() const>
   8d4a0:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d4a4:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d4a8:	912a8021 	add	x1, x1, #0xaa0
   8d4ac:	91302000 	add	x0, x0, #0xc08
   8d4b0:	52803ac2 	mov	w2, #0x1d6                 	// #470
   8d4b4:	94005293 	bl	a1f00 <assertion_failed>
   8d4b8:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d4bc:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d4c0:	912a8021 	add	x1, x1, #0xaa0
   8d4c4:	912b8000 	add	x0, x0, #0xae0
   8d4c8:	52803b02 	mov	w2, #0x1d8                 	// #472
   8d4cc:	9400528d 	bl	a1f00 <assertion_failed>

000000000008d4d0 <CDWHCITransferStageData::GetHubPortAddress() const>:
   8d4d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d4d4:	910003fd 	mov	x29, sp
   8d4d8:	39406001 	ldrb	w1, [x0, #24]
   8d4dc:	360000a1 	tbz	w1, #0, 8d4f0 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
   8d4e0:	f9401000 	ldr	x0, [x0, #32]
   8d4e4:	b4000120 	cbz	x0, 8d508 <CDWHCITransferStageData::GetHubPortAddress() const+0x38>
   8d4e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d4ec:	14000435 	b	8e5c0 <CUSBDevice::GetHubPortNumber() const>
   8d4f0:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d4f4:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d4f8:	912a8021 	add	x1, x1, #0xaa0
   8d4fc:	91302000 	add	x0, x0, #0xc08
   8d500:	52803bc2 	mov	w2, #0x1de                 	// #478
   8d504:	9400527f 	bl	a1f00 <assertion_failed>
   8d508:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d50c:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d510:	912a8021 	add	x1, x1, #0xaa0
   8d514:	912b8000 	add	x0, x0, #0xae0
   8d518:	52803c02 	mov	w2, #0x1e0                 	// #480
   8d51c:	94005279 	bl	a1f00 <assertion_failed>

000000000008d520 <CDWHCITransferStageData::GetSplitPosition() const>:
   8d520:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d524:	910003fd 	mov	x29, sp
   8d528:	f9000bf3 	str	x19, [sp, #16]
   8d52c:	aa0003f3 	mov	x19, x0
   8d530:	39406000 	ldrb	w0, [x0, #24]
   8d534:	370000a0 	tbnz	w0, #0, 8d548 <CDWHCITransferStageData::GetSplitPosition() const+0x28>
   8d538:	52800060 	mov	w0, #0x3                   	// #3
   8d53c:	f9400bf3 	ldr	x19, [sp, #16]
   8d540:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d544:	d65f03c0 	ret
   8d548:	f9401660 	ldr	x0, [x19, #40]
   8d54c:	b4000200 	cbz	x0, 8d58c <CDWHCITransferStageData::GetSplitPosition() const+0x6c>
   8d550:	94000ab8 	bl	90030 <CUSBEndpoint::GetType() const>
   8d554:	71000c1f 	cmp	w0, #0x3
   8d558:	54ffff01 	b.ne	8d538 <CDWHCITransferStageData::GetSplitPosition() const+0x18>  // b.any
   8d55c:	b9403a60 	ldr	w0, [x19, #56]
   8d560:	7102f01f 	cmp	w0, #0xbc
   8d564:	54fffea9 	b.ls	8d538 <CDWHCITransferStageData::GetSplitPosition() const+0x18>  // b.plast
   8d568:	b9404a61 	ldr	w1, [x19, #72]
   8d56c:	52800040 	mov	w0, #0x2                   	// #2
   8d570:	34fffe61 	cbz	w1, 8d53c <CDWHCITransferStageData::GetSplitPosition() const+0x1c>
   8d574:	b9403e60 	ldr	w0, [x19, #60]
   8d578:	f9400bf3 	ldr	x19, [sp, #16]
   8d57c:	7100041f 	cmp	w0, #0x1
   8d580:	1a9f87e0 	cset	w0, ls	// ls = plast
   8d584:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d588:	d65f03c0 	ret
   8d58c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d590:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d594:	912a8021 	add	x1, x1, #0xaa0
   8d598:	912b2000 	add	x0, x0, #0xac8
   8d59c:	52802aa2 	mov	w2, #0x155                 	// #341
   8d5a0:	94005258 	bl	a1f00 <assertion_failed>
   8d5a4:	d503201f 	nop
   8d5a8:	d503201f 	nop
   8d5ac:	d503201f 	nop

000000000008d5b0 <CDWHCITransferStageData::GetStatusMask() const>:
   8d5b0:	39406001 	ldrb	w1, [x0, #24]
   8d5b4:	36000061 	tbz	w1, #0, 8d5c0 <CDWHCITransferStageData::GetStatusMask() const+0x10>
   8d5b8:	5280ffe0 	mov	w0, #0x7ff                 	// #2047
   8d5bc:	d65f03c0 	ret
   8d5c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d5c4:	910003fd 	mov	x29, sp
   8d5c8:	f9401400 	ldr	x0, [x0, #40]
   8d5cc:	b4000140 	cbz	x0, 8d5f4 <CDWHCITransferStageData::GetStatusMask() const+0x44>
   8d5d0:	94000a98 	bl	90030 <CUSBEndpoint::GetType() const>
   8d5d4:	2a0003e1 	mov	w1, w0
   8d5d8:	51000821 	sub	w1, w1, #0x2
   8d5dc:	5280f1e0 	mov	w0, #0x78f                 	// #1935
   8d5e0:	7100043f 	cmp	w1, #0x1
   8d5e4:	54000048 	b.hi	8d5ec <CDWHCITransferStageData::GetStatusMask() const+0x3c>  // b.pmore
   8d5e8:	5280ffe0 	mov	w0, #0x7ff                 	// #2047
   8d5ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d5f0:	d65f03c0 	ret
   8d5f4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d5f8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d5fc:	912a8021 	add	x1, x1, #0xaa0
   8d600:	912b2000 	add	x0, x0, #0xac8
   8d604:	52802982 	mov	w2, #0x14c                 	// #332
   8d608:	9400523e 	bl	a1f00 <assertion_failed>
   8d60c:	d503201f 	nop

000000000008d610 <CDWHCITransferStageData::GetTransactionStatus() const>:
   8d610:	b9405800 	ldr	w0, [x0, #88]
   8d614:	34000040 	cbz	w0, 8d61c <CDWHCITransferStageData::GetTransactionStatus() const+0xc>
   8d618:	d65f03c0 	ret
   8d61c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d620:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d624:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d628:	910003fd 	mov	x29, sp
   8d62c:	912a8021 	add	x1, x1, #0xaa0
   8d630:	91308000 	add	x0, x0, #0xc20
   8d634:	528041e2 	mov	w2, #0x20f                 	// #527
   8d638:	94005232 	bl	a1f00 <assertion_failed>
   8d63c:	d503201f 	nop

000000000008d640 <CDWHCITransferStageData::GetUSBError() const>:
   8d640:	b9405801 	ldr	w1, [x0, #88]
   8d644:	52800000 	mov	w0, #0x0                   	// #0
   8d648:	371801a1 	tbnz	w1, #3, 8d67c <CDWHCITransferStageData::GetUSBError() const+0x3c>
   8d64c:	52800020 	mov	w0, #0x1                   	// #1
   8d650:	37380161 	tbnz	w1, #7, 8d67c <CDWHCITransferStageData::GetUSBError() const+0x3c>
   8d654:	52800040 	mov	w0, #0x2                   	// #2
   8d658:	37400121 	tbnz	w1, #8, 8d67c <CDWHCITransferStageData::GetUSBError() const+0x3c>
   8d65c:	52800060 	mov	w0, #0x3                   	// #3
   8d660:	374800e1 	tbnz	w1, #9, 8d67c <CDWHCITransferStageData::GetUSBError() const+0x3c>
   8d664:	52800080 	mov	w0, #0x4                   	// #4
   8d668:	375000a1 	tbnz	w1, #10, 8d67c <CDWHCITransferStageData::GetUSBError() const+0x3c>
   8d66c:	6a000021 	ands	w1, w1, w0
   8d670:	528000a0 	mov	w0, #0x5                   	// #5
   8d674:	52800121 	mov	w1, #0x9                   	// #9
   8d678:	1a811000 	csel	w0, w0, w1, ne	// ne = any
   8d67c:	d65f03c0 	ret

000000000008d680 <CDWHCITransferStageData::IsStageComplete() const>:
   8d680:	b9403c00 	ldr	w0, [x0, #60]
   8d684:	7100001f 	cmp	w0, #0x0
   8d688:	1a9f17e0 	cset	w0, eq	// eq = none
   8d68c:	d65f03c0 	ret

000000000008d690 <CDWHCITransferStageData::GetResultLen() const>:
   8d690:	b9403801 	ldr	w1, [x0, #56]
   8d694:	b9404800 	ldr	w0, [x0, #72]
   8d698:	6b01001f 	cmp	w0, w1
   8d69c:	1a819000 	csel	w0, w0, w1, ls	// ls = plast
   8d6a0:	d65f03c0 	ret
   8d6a4:	d503201f 	nop
   8d6a8:	d503201f 	nop
   8d6ac:	d503201f 	nop

000000000008d6b0 <CDWHCITransferStageData::IsTimeout() const>:
   8d6b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d6b4:	910003fd 	mov	x29, sp
   8d6b8:	f9000bf3 	str	x19, [sp, #16]
   8d6bc:	aa0003f3 	mov	x19, x0
   8d6c0:	b9401400 	ldr	w0, [x0, #20]
   8d6c4:	350000a0 	cbnz	w0, 8d6d8 <CDWHCITransferStageData::IsTimeout() const+0x28>
   8d6c8:	f9400bf3 	ldr	x19, [sp, #16]
   8d6cc:	52800000 	mov	w0, #0x0                   	// #0
   8d6d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d6d4:	d65f03c0 	ret
   8d6d8:	940074fe 	bl	aaad0 <CTimer::Get()>
   8d6dc:	940071d5 	bl	a9e30 <CTimer::GetTicks() const>
   8d6e0:	b940ca62 	ldr	w2, [x19, #200]
   8d6e4:	b9401661 	ldr	w1, [x19, #20]
   8d6e8:	4b020000 	sub	w0, w0, w2
   8d6ec:	6b01001f 	cmp	w0, w1
   8d6f0:	f9400bf3 	ldr	x19, [sp, #16]
   8d6f4:	1a9f37e0 	cset	w0, cs	// cs = hs, nlast
   8d6f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d6fc:	d65f03c0 	ret

000000000008d700 <CDWHCITransferStageData::IsRetryOK() const>:
   8d700:	b9405c00 	ldr	w0, [x0, #92]
   8d704:	7100201f 	cmp	w0, #0x8
   8d708:	1a9f87e0 	cset	w0, ls	// ls = plast
   8d70c:	d65f03c0 	ret

000000000008d710 <CDWHCITransferStageData::GetURB() const>:
   8d710:	f9400400 	ldr	x0, [x0, #8]
   8d714:	b4000040 	cbz	x0, 8d71c <CDWHCITransferStageData::GetURB() const+0xc>
   8d718:	d65f03c0 	ret
   8d71c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d720:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d724:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d728:	910003fd 	mov	x29, sp
   8d72c:	912a8021 	add	x1, x1, #0xaa0
   8d730:	912ae000 	add	x0, x0, #0xab8
   8d734:	52804ac2 	mov	w2, #0x256                 	// #598
   8d738:	940051f2 	bl	a1f00 <assertion_failed>
   8d73c:	d503201f 	nop

000000000008d740 <CDWHCITransferStageData::GetDevice() const>:
   8d740:	f9401000 	ldr	x0, [x0, #32]
   8d744:	b4000040 	cbz	x0, 8d74c <CDWHCITransferStageData::GetDevice() const+0xc>
   8d748:	d65f03c0 	ret
   8d74c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d750:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d754:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d758:	910003fd 	mov	x29, sp
   8d75c:	912a8021 	add	x1, x1, #0xaa0
   8d760:	912b8000 	add	x0, x0, #0xae0
   8d764:	52804b82 	mov	w2, #0x25c                 	// #604
   8d768:	940051e6 	bl	a1f00 <assertion_failed>
   8d76c:	d503201f 	nop

000000000008d770 <CDWHCITransferStageData::GetFrameScheduler() const>:
   8d770:	f9406800 	ldr	x0, [x0, #208]
   8d774:	d65f03c0 	ret
   8d778:	d503201f 	nop
   8d77c:	d503201f 	nop

000000000008d780 <CDWHCITransferStageData::operator new(unsigned long)>:
   8d780:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d784:	f104001f 	cmp	x0, #0x100
   8d788:	910003fd 	mov	x29, sp
   8d78c:	540000c1 	b.ne	8d7a4 <CDWHCITransferStageData::operator new(unsigned long)+0x24>  // b.any
   8d790:	b00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8d794:	f945d400 	ldr	x0, [x0, #2984]
   8d798:	b4000120 	cbz	x0, 8d7bc <CDWHCITransferStageData::operator new(unsigned long)+0x3c>
   8d79c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d7a0:	14005340 	b	a24a0 <CClassAllocator::Allocate()>
   8d7a4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d7a8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d7ac:	912a8021 	add	x1, x1, #0xaa0
   8d7b0:	91310000 	add	x0, x0, #0xc40
   8d7b4:	52804ca2 	mov	w2, #0x265                 	// #613
   8d7b8:	940051d2 	bl	a1f00 <assertion_failed>
   8d7bc:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d7c0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d7c4:	912a8021 	add	x1, x1, #0xaa0
   8d7c8:	911ca000 	add	x0, x0, #0x728
   8d7cc:	52804ca2 	mov	w2, #0x265                 	// #613
   8d7d0:	940051cc 	bl	a1f00 <assertion_failed>
   8d7d4:	d503201f 	nop
   8d7d8:	d503201f 	nop
   8d7dc:	d503201f 	nop

000000000008d7e0 <CDWHCITransferStageData::operator delete(void*, unsigned long)>:
   8d7e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d7e4:	f104003f 	cmp	x1, #0x100
   8d7e8:	910003fd 	mov	x29, sp
   8d7ec:	54000101 	b.ne	8d80c <CDWHCITransferStageData::operator delete(void*, unsigned long)+0x2c>  // b.any
   8d7f0:	aa0003e2 	mov	x2, x0
   8d7f4:	b00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8d7f8:	f945d400 	ldr	x0, [x0, #2984]
   8d7fc:	b4000140 	cbz	x0, 8d824 <CDWHCITransferStageData::operator delete(void*, unsigned long)+0x44>
   8d800:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d804:	aa0203e1 	mov	x1, x2
   8d808:	1400535a 	b	a2570 <CClassAllocator::Free(void*)>
   8d80c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d810:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d814:	912a8021 	add	x1, x1, #0xaa0
   8d818:	91310000 	add	x0, x0, #0xc40
   8d81c:	52804ca2 	mov	w2, #0x265                 	// #613
   8d820:	940051b8 	bl	a1f00 <assertion_failed>
   8d824:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d828:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d82c:	912a8021 	add	x1, x1, #0xaa0
   8d830:	911ca000 	add	x0, x0, #0x728
   8d834:	52804ca2 	mov	w2, #0x265                 	// #613
   8d838:	940051b2 	bl	a1f00 <assertion_failed>
   8d83c:	d503201f 	nop

000000000008d840 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
   8d840:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d844:	910003fd 	mov	x29, sp
   8d848:	a90153f3 	stp	x19, x20, [sp, #16]
   8d84c:	b00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8d850:	f945d681 	ldr	x1, [x20, #2984]
   8d854:	b50001c1 	cbnz	x1, 8d88c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
   8d858:	2a0003f3 	mov	w19, w0
   8d85c:	d2800700 	mov	x0, #0x38                  	// #56
   8d860:	940078b4 	bl	abb30 <operator new(unsigned long)>
   8d864:	2a1303e2 	mov	w2, w19
   8d868:	d2802001 	mov	x1, #0x100                 	// #256
   8d86c:	aa0003f3 	mov	x19, x0
   8d870:	d0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8d874:	9131c063 	add	x3, x3, #0xc70
   8d878:	940052ae 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8d87c:	f905d693 	str	x19, [x20, #2984]
   8d880:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d884:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d888:	d65f03c0 	ret
   8d88c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d890:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d894:	912a8021 	add	x1, x1, #0xaa0
   8d898:	911de000 	add	x0, x0, #0x778
   8d89c:	52804ca2 	mov	w2, #0x265                 	// #613
   8d8a0:	94005198 	bl	a1f00 <assertion_failed>
   8d8a4:	d503201f 	nop
   8d8a8:	d503201f 	nop
   8d8ac:	d503201f 	nop

000000000008d8b0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
   8d8b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d8b4:	910003fd 	mov	x29, sp
   8d8b8:	f90013f5 	str	x21, [sp, #32]
   8d8bc:	b00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8d8c0:	f945d6a3 	ldr	x3, [x21, #2984]
   8d8c4:	a90153f3 	stp	x19, x20, [sp, #16]
   8d8c8:	2a0003f3 	mov	w19, w0
   8d8cc:	2a0103f4 	mov	w20, w1
   8d8d0:	b4000103 	cbz	x3, 8d8f0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8d8d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d8d8:	2a0103e2 	mov	w2, w1
   8d8dc:	f94013f5 	ldr	x21, [sp, #32]
   8d8e0:	2a0003e1 	mov	w1, w0
   8d8e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d8e8:	aa0303e0 	mov	x0, x3
   8d8ec:	140052a1 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8d8f0:	d2800700 	mov	x0, #0x38                  	// #56
   8d8f4:	9400788f 	bl	abb30 <operator new(unsigned long)>
   8d8f8:	2a1403e3 	mov	w3, w20
   8d8fc:	2a1303e2 	mov	w2, w19
   8d900:	d2802001 	mov	x1, #0x100                 	// #256
   8d904:	aa0003f3 	mov	x19, x0
   8d908:	d0000124 	adrp	x4, b3000 <_etext+0x9c8>
   8d90c:	9131c084 	add	x4, x4, #0xc70
   8d910:	94005290 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8d914:	f905d6b3 	str	x19, [x21, #2984]
   8d918:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d91c:	f94013f5 	ldr	x21, [sp, #32]
   8d920:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d924:	d65f03c0 	ret
	...

000000000008d930 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
   8d930:	d65f03c0 	ret
   8d934:	d503201f 	nop
   8d938:	d503201f 	nop
   8d93c:	d503201f 	nop

000000000008d940 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()>:
   8d940:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d944:	910003fd 	mov	x29, sp
   8d948:	b9400c01 	ldr	w1, [x0, #12]
   8d94c:	7100143f 	cmp	w1, #0x5
   8d950:	540002c0 	b.eq	8d9a8 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x68>  // b.none
   8d954:	540001e8 	b.hi	8d990 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x50>  // b.pmore
   8d958:	7100083f 	cmp	w1, #0x2
   8d95c:	540004e1 	b.ne	8d9f8 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb8>  // b.any
   8d960:	79402802 	ldrh	w2, [x0, #20]
   8d964:	52800083 	mov	w3, #0x4                   	// #4
   8d968:	b9000c03 	str	w3, [x0, #12]
   8d96c:	79002001 	strh	w1, [x0, #16]
   8d970:	7140105f 	cmp	w2, #0x4, lsl #12
   8d974:	3900481f 	strb	wzr, [x0, #18]
   8d978:	54000340 	b.eq	8d9e0 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xa0>  // b.none
   8d97c:	52800021 	mov	w1, #0x1                   	// #1
   8d980:	b9001801 	str	w1, [x0, #24]
   8d984:	52800020 	mov	w0, #0x1                   	// #1
   8d988:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d98c:	d65f03c0 	ret
   8d990:	51001821 	sub	w1, w1, #0x6
   8d994:	7100043f 	cmp	w1, #0x1
   8d998:	54000308 	b.hi	8d9f8 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb8>  // b.pmore
   8d99c:	52800000 	mov	w0, #0x0                   	// #0
   8d9a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d9a4:	d65f03c0 	ret
   8d9a8:	79402801 	ldrh	w1, [x0, #20]
   8d9ac:	52800083 	mov	w3, #0x4                   	// #4
   8d9b0:	52800042 	mov	w2, #0x2                   	// #2
   8d9b4:	b9000c03 	str	w3, [x0, #12]
   8d9b8:	79002002 	strh	w2, [x0, #16]
   8d9bc:	7140103f 	cmp	w1, #0x4, lsl #12
   8d9c0:	3900481f 	strb	wzr, [x0, #18]
   8d9c4:	54fffe01 	b.ne	8d984 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x44>  // b.any
   8d9c8:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d9cc:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d9d0:	91322021 	add	x1, x1, #0xc88
   8d9d4:	9120e000 	add	x0, x0, #0x838
   8d9d8:	52800dc2 	mov	w2, #0x6e                  	// #110
   8d9dc:	94005149 	bl	a1f00 <assertion_failed>
   8d9e0:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d9e4:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8d9e8:	91322021 	add	x1, x1, #0xc88
   8d9ec:	9120e000 	add	x0, x0, #0x838
   8d9f0:	52800c22 	mov	w2, #0x61                  	// #97
   8d9f4:	94005143 	bl	a1f00 <assertion_failed>
   8d9f8:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8d9fc:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8da00:	91322021 	add	x1, x1, #0xc88
   8da04:	9135c000 	add	x0, x0, #0xd70
   8da08:	52800e62 	mov	w2, #0x73                  	// #115
   8da0c:	9400513d 	bl	a1f00 <assertion_failed>

000000000008da10 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)>:
   8da10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8da14:	910003fd 	mov	x29, sp
   8da18:	b9400c02 	ldr	w2, [x0, #12]
   8da1c:	7100105f 	cmp	w2, #0x4
   8da20:	540001e0 	b.eq	8da5c <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x4c>  // b.none
   8da24:	54000068 	b.hi	8da30 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x20>  // b.pmore
   8da28:	721e785f 	tst	w2, #0xfffffffd
   8da2c:	540000e1 	b.ne	8da48 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x38>  // b.any
   8da30:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8da34:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8da38:	91322021 	add	x1, x1, #0xc88
   8da3c:	9135c000 	add	x0, x0, #0xd70
   8da40:	52801382 	mov	w2, #0x9c                  	// #156
   8da44:	9400512f 	bl	a1f00 <assertion_failed>
   8da48:	52800042 	mov	w2, #0x2                   	// #2
   8da4c:	36280341 	tbz	w1, #5, 8dab4 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0xa4>
   8da50:	b9000c02 	str	w2, [x0, #12]
   8da54:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8da58:	d65f03c0 	ret
   8da5c:	37200201 	tbnz	w1, #4, 8da9c <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x8c>
   8da60:	37000161 	tbnz	w1, #0, 8da8c <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x7c>
   8da64:	36300341 	tbz	w1, #6, 8dacc <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0xbc>
   8da68:	b9401801 	ldr	w1, [x0, #24]
   8da6c:	528000e3 	mov	w3, #0x7                   	// #7
   8da70:	528000a2 	mov	w2, #0x5                   	// #5
   8da74:	71000421 	subs	w1, w1, #0x1
   8da78:	b9001801 	str	w1, [x0, #24]
   8da7c:	1a831042 	csel	w2, w2, w3, ne	// ne = any
   8da80:	b9000c02 	str	w2, [x0, #12]
   8da84:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8da88:	d65f03c0 	ret
   8da8c:	528000c2 	mov	w2, #0x6                   	// #6
   8da90:	b9000c02 	str	w2, [x0, #12]
   8da94:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8da98:	d65f03c0 	ret
   8da9c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8daa0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8daa4:	91322021 	add	x1, x1, #0xc88
   8daa8:	91328000 	add	x0, x0, #0xca0
   8daac:	528010a2 	mov	w2, #0x85                  	// #133
   8dab0:	94005114 	bl	a1f00 <assertion_failed>
   8dab4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dab8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dabc:	91322021 	add	x1, x1, #0xc88
   8dac0:	911b2000 	add	x0, x0, #0x6c8
   8dac4:	52801002 	mov	w2, #0x80                  	// #128
   8dac8:	9400510e 	bl	a1f00 <assertion_failed>
   8dacc:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dad0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dad4:	91322021 	add	x1, x1, #0xc88
   8dad8:	9135c000 	add	x0, x0, #0xd70
   8dadc:	528012e2 	mov	w2, #0x97                  	// #151
   8dae0:	94005108 	bl	a1f00 <assertion_failed>
   8dae4:	d503201f 	nop
   8dae8:	d503201f 	nop
   8daec:	d503201f 	nop

000000000008daf0 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()>:
   8daf0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8daf4:	52808101 	mov	w1, #0x408                 	// #1032
   8daf8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8dafc:	910003fd 	mov	x29, sp
   8db00:	a90153f3 	stp	x19, x20, [sp, #16]
   8db04:	aa0003f3 	mov	x19, x0
   8db08:	f90013f5 	str	x21, [sp, #32]
   8db0c:	9100c3f5 	add	x21, sp, #0x30
   8db10:	aa1503e0 	mov	x0, x21
   8db14:	9400361b 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8db18:	aa1503e0 	mov	x0, x21
   8db1c:	94003625 	bl	9b3b0 <CDWHCIRegister::Read()>
   8db20:	79402261 	ldrh	w1, [x19, #16]
   8db24:	7140103f 	cmp	w1, #0x4, lsl #12
   8db28:	540002a0 	b.eq	8db7c <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x8c>  // b.none
   8db2c:	12003c00 	and	w0, w0, #0xffff
   8db30:	39404a62 	ldrb	w2, [x19, #18]
   8db34:	0b000021 	add	w1, w1, w0
   8db38:	12003434 	and	w20, w1, #0x3fff
   8db3c:	79002a74 	strh	w20, [x19, #20]
   8db40:	12003c21 	and	w1, w1, #0xffff
   8db44:	360000e2 	tbz	w2, #0, 8db60 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x70>
   8db48:	39402260 	ldrb	w0, [x19, #8]
   8db4c:	121d2834 	and	w20, w1, #0x3ff8
   8db50:	79002a74 	strh	w20, [x19, #20]
   8db54:	36000060 	tbz	w0, #0, 8db60 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x70>
   8db58:	11001294 	add	w20, w20, #0x4
   8db5c:	79002a74 	strh	w20, [x19, #20]
   8db60:	aa1503e0 	mov	x0, x21
   8db64:	9400360f 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8db68:	f94013f5 	ldr	x21, [sp, #32]
   8db6c:	2a1403e0 	mov	w0, w20
   8db70:	a94153f3 	ldp	x19, x20, [sp, #16]
   8db74:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8db78:	d65f03c0 	ret
   8db7c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8db80:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8db84:	91322021 	add	x1, x1, #0xc88
   8db88:	91216000 	add	x0, x0, #0x858
   8db8c:	528015e2 	mov	w2, #0xaf                  	// #175
   8db90:	940050dc 	bl	a1f00 <assertion_failed>
   8db94:	d503201f 	nop
   8db98:	d503201f 	nop
   8db9c:	d503201f 	nop

000000000008dba0 <CDWHCIFrameSchedulerIsochronous::IsOddFrame() const>:
   8dba0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8dba4:	52808101 	mov	w1, #0x408                 	// #1032
   8dba8:	72a7f301 	movk	w1, #0x3f98, lsl #16
   8dbac:	910003fd 	mov	x29, sp
   8dbb0:	a90153f3 	stp	x19, x20, [sp, #16]
   8dbb4:	910083f3 	add	x19, sp, #0x20
   8dbb8:	aa1303e0 	mov	x0, x19
   8dbbc:	940035f1 	bl	9b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   8dbc0:	aa1303e0 	mov	x0, x19
   8dbc4:	940035fb 	bl	9b3b0 <CDWHCIRegister::Read()>
   8dbc8:	2a0003f4 	mov	w20, w0
   8dbcc:	aa1303e0 	mov	x0, x19
   8dbd0:	940035f4 	bl	9b3a0 <CDWHCIRegister::~CDWHCIRegister()>
   8dbd4:	12000280 	and	w0, w20, #0x1
   8dbd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dbdc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dbe0:	d65f03c0 	ret
   8dbe4:	d503201f 	nop
   8dbe8:	d503201f 	nop
   8dbec:	d503201f 	nop

000000000008dbf0 <CDWHCIFrameSchedulerIsochronous::StartSplit()>:
   8dbf0:	b9400c01 	ldr	w1, [x0, #12]
   8dbf4:	7100083f 	cmp	w1, #0x2
   8dbf8:	54000360 	b.eq	8dc64 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x74>  // b.none
   8dbfc:	71001c3f 	cmp	w1, #0x7
   8dc00:	54000140 	b.eq	8dc28 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x38>  // b.none
   8dc04:	350002e1 	cbnz	w1, 8dc60 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x70>
   8dc08:	52800021 	mov	w1, #0x1                   	// #1
   8dc0c:	52800103 	mov	w3, #0x8                   	// #8
   8dc10:	52880002 	mov	w2, #0x4000                	// #16384
   8dc14:	b9000c01 	str	w1, [x0, #12]
   8dc18:	79002003 	strh	w3, [x0, #16]
   8dc1c:	39004801 	strb	w1, [x0, #18]
   8dc20:	79002802 	strh	w2, [x0, #20]
   8dc24:	d65f03c0 	ret
   8dc28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dc2c:	52800022 	mov	w2, #0x1                   	// #1
   8dc30:	910003fd 	mov	x29, sp
   8dc34:	79402001 	ldrh	w1, [x0, #16]
   8dc38:	b9000c02 	str	w2, [x0, #12]
   8dc3c:	7140103f 	cmp	w1, #0x4, lsl #12
   8dc40:	540002e0 	b.eq	8dc9c <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xac>  // b.none
   8dc44:	39404801 	ldrb	w1, [x0, #18]
   8dc48:	36000361 	tbz	w1, #0, 8dcb4 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xc4>
   8dc4c:	79402800 	ldrh	w0, [x0, #20]
   8dc50:	7140101f 	cmp	w0, #0x4, lsl #12
   8dc54:	54000180 	b.eq	8dc84 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x94>  // b.none
   8dc58:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8dc5c:	d65f03c0 	ret
   8dc60:	d65f03c0 	ret
   8dc64:	52800063 	mov	w3, #0x3                   	// #3
   8dc68:	52800022 	mov	w2, #0x1                   	// #1
   8dc6c:	52880001 	mov	w1, #0x4000                	// #16384
   8dc70:	b9000c03 	str	w3, [x0, #12]
   8dc74:	79002002 	strh	w2, [x0, #16]
   8dc78:	3900481f 	strb	wzr, [x0, #18]
   8dc7c:	79002801 	strh	w1, [x0, #20]
   8dc80:	d65f03c0 	ret
   8dc84:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dc88:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dc8c:	91322021 	add	x1, x1, #0xc88
   8dc90:	9120e000 	add	x0, x0, #0x838
   8dc94:	528009e2 	mov	w2, #0x4f                  	// #79
   8dc98:	9400509a 	bl	a1f00 <assertion_failed>
   8dc9c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dca0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dca4:	91322021 	add	x1, x1, #0xc88
   8dca8:	91216000 	add	x0, x0, #0x858
   8dcac:	528009a2 	mov	w2, #0x4d                  	// #77
   8dcb0:	94005094 	bl	a1f00 <assertion_failed>
   8dcb4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dcb8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dcbc:	91322021 	add	x1, x1, #0xc88
   8dcc0:	91332000 	add	x0, x0, #0xcc8
   8dcc4:	528009c2 	mov	w2, #0x4e                  	// #78
   8dcc8:	9400508e 	bl	a1f00 <assertion_failed>
   8dccc:	d503201f 	nop

000000000008dcd0 <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)>:
   8dcd0:	b9400c02 	ldr	w2, [x0, #12]
   8dcd4:	71001c5f 	cmp	w2, #0x7
   8dcd8:	54000101 	b.ne	8dcf8 <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)+0x28>  // b.any
   8dcdc:	12003c21 	and	w1, w1, #0xffff
   8dce0:	52800023 	mov	w3, #0x1                   	// #1
   8dce4:	52880002 	mov	w2, #0x4000                	// #16384
   8dce8:	79002001 	strh	w1, [x0, #16]
   8dcec:	39004803 	strb	w3, [x0, #18]
   8dcf0:	79002802 	strh	w2, [x0, #20]
   8dcf4:	d65f03c0 	ret
   8dcf8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dcfc:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dd00:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dd04:	910003fd 	mov	x29, sp
   8dd08:	91322021 	add	x1, x1, #0xc88
   8dd0c:	91336000 	add	x0, x0, #0xcd8
   8dd10:	52801822 	mov	w2, #0xc1                  	// #193
   8dd14:	9400507b 	bl	a1f00 <assertion_failed>
   8dd18:	d503201f 	nop
   8dd1c:	d503201f 	nop

000000000008dd20 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
   8dd20:	b00001e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   8dd24:	f945d822 	ldr	x2, [x1, #2992]
   8dd28:	b4000082 	cbz	x2, 8dd38 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()+0x18>
   8dd2c:	aa0003e1 	mov	x1, x0
   8dd30:	aa0203e0 	mov	x0, x2
   8dd34:	1400520f 	b	a2570 <CClassAllocator::Free(void*)>
   8dd38:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dd3c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dd40:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dd44:	910003fd 	mov	x29, sp
   8dd48:	91322021 	add	x1, x1, #0xc88
   8dd4c:	911ca000 	add	x0, x0, #0x728
   8dd50:	52801a02 	mov	w2, #0xd0                  	// #208
   8dd54:	9400506b 	bl	a1f00 <assertion_failed>
   8dd58:	d503201f 	nop
   8dd5c:	d503201f 	nop

000000000008dd60 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>:
   8dd60:	52880003 	mov	w3, #0x4000                	// #16384
   8dd64:	900001e2 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8dd68:	910f6042 	add	x2, x2, #0x3d8
   8dd6c:	f9000002 	str	x2, [x0]
   8dd70:	39002001 	strb	w1, [x0, #8]
   8dd74:	b9000c1f 	str	wzr, [x0, #12]
   8dd78:	79002003 	strh	w3, [x0, #16]
   8dd7c:	3900481f 	strb	wzr, [x0, #18]
   8dd80:	79002803 	strh	w3, [x0, #20]
   8dd84:	d65f03c0 	ret
   8dd88:	d503201f 	nop
   8dd8c:	d503201f 	nop

000000000008dd90 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned long)>:
   8dd90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dd94:	f100801f 	cmp	x0, #0x20
   8dd98:	910003fd 	mov	x29, sp
   8dd9c:	540000c1 	b.ne	8ddb4 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned long)+0x24>  // b.any
   8dda0:	b00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8dda4:	f945d800 	ldr	x0, [x0, #2992]
   8dda8:	b4000120 	cbz	x0, 8ddcc <CDWHCIFrameSchedulerIsochronous::operator new(unsigned long)+0x3c>
   8ddac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ddb0:	140051bc 	b	a24a0 <CClassAllocator::Allocate()>
   8ddb4:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ddb8:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ddbc:	91322021 	add	x1, x1, #0xc88
   8ddc0:	9133e000 	add	x0, x0, #0xcf8
   8ddc4:	52801a02 	mov	w2, #0xd0                  	// #208
   8ddc8:	9400504e 	bl	a1f00 <assertion_failed>
   8ddcc:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ddd0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ddd4:	91322021 	add	x1, x1, #0xc88
   8ddd8:	911ca000 	add	x0, x0, #0x728
   8dddc:	52801a02 	mov	w2, #0xd0                  	// #208
   8dde0:	94005048 	bl	a1f00 <assertion_failed>
   8dde4:	d503201f 	nop
   8dde8:	d503201f 	nop
   8ddec:	d503201f 	nop

000000000008ddf0 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned long)>:
   8ddf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ddf4:	f100803f 	cmp	x1, #0x20
   8ddf8:	910003fd 	mov	x29, sp
   8ddfc:	54000101 	b.ne	8de1c <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned long)+0x2c>  // b.any
   8de00:	aa0003e2 	mov	x2, x0
   8de04:	b00001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8de08:	f945d800 	ldr	x0, [x0, #2992]
   8de0c:	b4000140 	cbz	x0, 8de34 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned long)+0x44>
   8de10:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8de14:	aa0203e1 	mov	x1, x2
   8de18:	140051d6 	b	a2570 <CClassAllocator::Free(void*)>
   8de1c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8de20:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8de24:	91322021 	add	x1, x1, #0xc88
   8de28:	9133e000 	add	x0, x0, #0xcf8
   8de2c:	52801a02 	mov	w2, #0xd0                  	// #208
   8de30:	94005034 	bl	a1f00 <assertion_failed>
   8de34:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8de38:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8de3c:	91322021 	add	x1, x1, #0xc88
   8de40:	911ca000 	add	x0, x0, #0x728
   8de44:	52801a02 	mov	w2, #0xd0                  	// #208
   8de48:	9400502e 	bl	a1f00 <assertion_failed>
   8de4c:	d503201f 	nop

000000000008de50 <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)>:
   8de50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8de54:	910003fd 	mov	x29, sp
   8de58:	a90153f3 	stp	x19, x20, [sp, #16]
   8de5c:	b00001f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   8de60:	f945da81 	ldr	x1, [x20, #2992]
   8de64:	b50001c1 	cbnz	x1, 8de9c <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)+0x4c>
   8de68:	2a0003f3 	mov	w19, w0
   8de6c:	d2800700 	mov	x0, #0x38                  	// #56
   8de70:	94007730 	bl	abb30 <operator new(unsigned long)>
   8de74:	2a1303e2 	mov	w2, w19
   8de78:	d2800401 	mov	x1, #0x20                  	// #32
   8de7c:	aa0003f3 	mov	x19, x0
   8de80:	d0000123 	adrp	x3, b3000 <_etext+0x9c8>
   8de84:	9134c063 	add	x3, x3, #0xd30
   8de88:	9400512a 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   8de8c:	f905da93 	str	x19, [x20, #2992]
   8de90:	a94153f3 	ldp	x19, x20, [sp, #16]
   8de94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8de98:	d65f03c0 	ret
   8de9c:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dea0:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dea4:	91322021 	add	x1, x1, #0xc88
   8dea8:	911de000 	add	x0, x0, #0x778
   8deac:	52801a02 	mov	w2, #0xd0                  	// #208
   8deb0:	94005014 	bl	a1f00 <assertion_failed>
   8deb4:	d503201f 	nop
   8deb8:	d503201f 	nop
   8debc:	d503201f 	nop

000000000008dec0 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>:
   8dec0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8dec4:	910003fd 	mov	x29, sp
   8dec8:	f90013f5 	str	x21, [sp, #32]
   8decc:	b00001f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   8ded0:	f945daa3 	ldr	x3, [x21, #2992]
   8ded4:	a90153f3 	stp	x19, x20, [sp, #16]
   8ded8:	2a0003f3 	mov	w19, w0
   8dedc:	2a0103f4 	mov	w20, w1
   8dee0:	b4000103 	cbz	x3, 8df00 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   8dee4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dee8:	2a0103e2 	mov	w2, w1
   8deec:	f94013f5 	ldr	x21, [sp, #32]
   8def0:	2a0003e1 	mov	w1, w0
   8def4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8def8:	aa0303e0 	mov	x0, x3
   8defc:	1400511d 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   8df00:	d2800700 	mov	x0, #0x38                  	// #56
   8df04:	9400770b 	bl	abb30 <operator new(unsigned long)>
   8df08:	2a1403e3 	mov	w3, w20
   8df0c:	2a1303e2 	mov	w2, w19
   8df10:	d2800401 	mov	x1, #0x20                  	// #32
   8df14:	aa0003f3 	mov	x19, x0
   8df18:	d0000124 	adrp	x4, b3000 <_etext+0x9c8>
   8df1c:	9134c084 	add	x4, x4, #0xd30
   8df20:	9400510c 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   8df24:	f905dab3 	str	x19, [x21, #2992]
   8df28:	a94153f3 	ldp	x19, x20, [sp, #16]
   8df2c:	f94013f5 	ldr	x21, [sp, #32]
   8df30:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8df34:	d65f03c0 	ret
	...

000000000008df40 <CUSBDevice::Configure()>:
   8df40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8df44:	910003fd 	mov	x29, sp
   8df48:	f9400401 	ldr	x1, [x0, #8]
   8df4c:	b40004e1 	cbz	x1, 8dfe8 <CUSBDevice::Configure()+0xa8>
   8df50:	f9401801 	ldr	x1, [x0, #48]
   8df54:	b40005a1 	cbz	x1, 8e008 <CUSBDevice::Configure()+0xc8>
   8df58:	f9402801 	ldr	x1, [x0, #80]
   8df5c:	f90013f5 	str	x21, [sp, #32]
   8df60:	b40003a1 	cbz	x1, 8dfd4 <CUSBDevice::Configure()+0x94>
   8df64:	a90153f3 	stp	x19, x20, [sp, #16]
   8df68:	91018013 	add	x19, x0, #0x60
   8df6c:	9102c014 	add	x20, x0, #0xb0
   8df70:	52800015 	mov	w21, #0x0                   	// #0
   8df74:	d503201f 	nop
   8df78:	f9400260 	ldr	x0, [x19]
   8df7c:	b4000180 	cbz	x0, 8dfac <CUSBDevice::Configure()+0x6c>
   8df80:	f9400001 	ldr	x1, [x0]
   8df84:	f9402421 	ldr	x1, [x1, #72]
   8df88:	d63f0020 	blr	x1
   8df8c:	12001c01 	and	w1, w0, #0xff
   8df90:	370001e0 	tbnz	w0, #0, 8dfcc <CUSBDevice::Configure()+0x8c>
   8df94:	f9400260 	ldr	x0, [x19]
   8df98:	b4000080 	cbz	x0, 8dfa8 <CUSBDevice::Configure()+0x68>
   8df9c:	f9400001 	ldr	x1, [x0]
   8dfa0:	f9400421 	ldr	x1, [x1, #8]
   8dfa4:	d63f0020 	blr	x1
   8dfa8:	f900027f 	str	xzr, [x19]
   8dfac:	91002273 	add	x19, x19, #0x8
   8dfb0:	eb14027f 	cmp	x19, x20
   8dfb4:	54fffe21 	b.ne	8df78 <CUSBDevice::Configure()+0x38>  // b.any
   8dfb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dfbc:	2a1503e0 	mov	w0, w21
   8dfc0:	f94013f5 	ldr	x21, [sp, #32]
   8dfc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dfc8:	d65f03c0 	ret
   8dfcc:	2a0103f5 	mov	w21, w1
   8dfd0:	17fffff7 	b	8dfac <CUSBDevice::Configure()+0x6c>
   8dfd4:	52800015 	mov	w21, #0x0                   	// #0
   8dfd8:	2a1503e0 	mov	w0, w21
   8dfdc:	f94013f5 	ldr	x21, [sp, #32]
   8dfe0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dfe4:	d65f03c0 	ret
   8dfe8:	d0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8dfec:	d0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8dff0:	91354021 	add	x1, x1, #0xd50
   8dff4:	91238000 	add	x0, x0, #0x8e0
   8dff8:	52803ba2 	mov	w2, #0x1dd                 	// #477
   8dffc:	a90153f3 	stp	x19, x20, [sp, #16]
   8e000:	f90013f5 	str	x21, [sp, #32]
   8e004:	94004fbf 	bl	a1f00 <assertion_failed>
   8e008:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e00c:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e010:	91354021 	add	x1, x1, #0xd50
   8e014:	91358000 	add	x0, x0, #0xd60
   8e018:	52803bc2 	mov	w2, #0x1de                 	// #478
   8e01c:	a90153f3 	stp	x19, x20, [sp, #16]
   8e020:	f90013f5 	str	x21, [sp, #32]
   8e024:	94004fb7 	bl	a1f00 <assertion_failed>
   8e028:	d503201f 	nop
   8e02c:	d503201f 	nop

000000000008e030 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
   8e030:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e034:	52800024 	mov	w4, #0x1                   	// #1
   8e038:	910003fd 	mov	x29, sp
   8e03c:	a90153f3 	stp	x19, x20, [sp, #16]
   8e040:	aa0003f3 	mov	x19, x0
   8e044:	f00001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8e048:	9110a000 	add	x0, x0, #0x428
   8e04c:	a9000660 	stp	x0, x1, [x19]
   8e050:	a9017e63 	stp	x3, xzr, [x19, #16]
   8e054:	3900927f 	strb	wzr, [x19, #36]
   8e058:	b9002a62 	str	w2, [x19, #40]
   8e05c:	f9001a7f 	str	xzr, [x19, #48]
   8e060:	7900727f 	strh	wzr, [x19, #56]
   8e064:	3900ea64 	strb	w4, [x19, #58]
   8e068:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   8e06c:	a9057e7f 	stp	xzr, xzr, [x19, #80]
   8e070:	b4000201 	cbz	x1, 8e0b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x80>
   8e074:	b40002a3 	cbz	x3, 8e0c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x98>
   8e078:	d2800400 	mov	x0, #0x20                  	// #32
   8e07c:	940076ad 	bl	abb30 <operator new(unsigned long)>
   8e080:	aa1303e1 	mov	x1, x19
   8e084:	aa0003f4 	mov	x20, x0
   8e088:	94000736 	bl	8fd60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   8e08c:	f9001a74 	str	x20, [x19, #48]
   8e090:	91018262 	add	x2, x19, #0x60
   8e094:	9102c261 	add	x1, x19, #0xb0
   8e098:	f800845f 	str	xzr, [x2], #8
   8e09c:	eb01005f 	cmp	x2, x1
   8e0a0:	54ffffc1 	b.ne	8e098 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x68>  // b.any
   8e0a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e0a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e0ac:	d65f03c0 	ret
   8e0b0:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e0b4:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e0b8:	91354021 	add	x1, x1, #0xd50
   8e0bc:	91238000 	add	x0, x0, #0x8e0
   8e0c0:	52800702 	mov	w2, #0x38                  	// #56
   8e0c4:	94004f8f 	bl	a1f00 <assertion_failed>
   8e0c8:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e0cc:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e0d0:	91354021 	add	x1, x1, #0xd50
   8e0d4:	9135e000 	add	x0, x0, #0xd78
   8e0d8:	52800722 	mov	w2, #0x39                  	// #57
   8e0dc:	94004f89 	bl	a1f00 <assertion_failed>

000000000008e0e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   8e0e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e0e4:	910003fd 	mov	x29, sp
   8e0e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8e0ec:	aa0003f3 	mov	x19, x0
   8e0f0:	aa0303e0 	mov	x0, x3
   8e0f4:	f00001c3 	adrp	x3, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8e0f8:	9110a063 	add	x3, x3, #0x428
   8e0fc:	a9000663 	stp	x3, x1, [x19]
   8e100:	a901027f 	stp	xzr, x0, [x19, #16]
   8e104:	b9002264 	str	w4, [x19, #32]
   8e108:	3900927f 	strb	wzr, [x19, #36]
   8e10c:	b9002a62 	str	w2, [x19, #40]
   8e110:	f9001a7f 	str	xzr, [x19, #48]
   8e114:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   8e118:	f9002e7f 	str	xzr, [x19, #88]
   8e11c:	b4000581 	cbz	x1, 8e1cc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xec>
   8e120:	b4000620 	cbz	x0, 8e1e4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x104>
   8e124:	9400093b 	bl	90610 <CUSBFunction::GetDevice() const>
   8e128:	b40006a0 	cbz	x0, 8e1fc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x11c>
   8e12c:	3940e001 	ldrb	w1, [x0, #56]
   8e130:	3900e261 	strb	w1, [x19, #56]
   8e134:	3940e402 	ldrb	w2, [x0, #57]
   8e138:	3900e662 	strb	w2, [x19, #57]
   8e13c:	3940e802 	ldrb	w2, [x0, #58]
   8e140:	3900ea62 	strb	w2, [x19, #58]
   8e144:	f9402002 	ldr	x2, [x0, #64]
   8e148:	f9002262 	str	x2, [x19, #64]
   8e14c:	36000221 	tbz	w1, #0, 8e190 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb0>
   8e150:	f9401a60 	ldr	x0, [x19, #48]
   8e154:	b5000600 	cbnz	x0, 8e214 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x134>
   8e158:	d2800400 	mov	x0, #0x20                  	// #32
   8e15c:	94007675 	bl	abb30 <operator new(unsigned long)>
   8e160:	aa1303e1 	mov	x1, x19
   8e164:	aa0003f4 	mov	x20, x0
   8e168:	940006fe 	bl	8fd60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   8e16c:	f9001a74 	str	x20, [x19, #48]
   8e170:	91018261 	add	x1, x19, #0x60
   8e174:	9102c262 	add	x2, x19, #0xb0
   8e178:	f800843f 	str	xzr, [x1], #8
   8e17c:	eb02003f 	cmp	x1, x2
   8e180:	54ffffc1 	b.ne	8e178 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x98>  // b.any
   8e184:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e188:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e18c:	d65f03c0 	ret
   8e190:	b9402801 	ldr	w1, [x0, #40]
   8e194:	7100083f 	cmp	w1, #0x2
   8e198:	54fffdc1 	b.ne	8e150 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x70>  // b.any
   8e19c:	b9402a61 	ldr	w1, [x19, #40]
   8e1a0:	7100043f 	cmp	w1, #0x1
   8e1a4:	54fffd6c 	b.gt	8e150 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x70>
   8e1a8:	52800021 	mov	w1, #0x1                   	// #1
   8e1ac:	3900e261 	strb	w1, [x19, #56]
   8e1b0:	b9402261 	ldr	w1, [x19, #32]
   8e1b4:	39409002 	ldrb	w2, [x0, #36]
   8e1b8:	11000421 	add	w1, w1, #0x1
   8e1bc:	3900e662 	strb	w2, [x19, #57]
   8e1c0:	3900ea61 	strb	w1, [x19, #58]
   8e1c4:	f9002260 	str	x0, [x19, #64]
   8e1c8:	17ffffe2 	b	8e150 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x70>
   8e1cc:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e1d0:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e1d4:	91354021 	add	x1, x1, #0xd50
   8e1d8:	91238000 	add	x0, x0, #0x8e0
   8e1dc:	52800ae2 	mov	w2, #0x57                  	// #87
   8e1e0:	94004f48 	bl	a1f00 <assertion_failed>
   8e1e4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e1e8:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e1ec:	91354021 	add	x1, x1, #0xd50
   8e1f0:	91364000 	add	x0, x0, #0xd90
   8e1f4:	52800b02 	mov	w2, #0x58                  	// #88
   8e1f8:	94004f42 	bl	a1f00 <assertion_failed>
   8e1fc:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e200:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e204:	91354021 	add	x1, x1, #0xd50
   8e208:	91368000 	add	x0, x0, #0xda0
   8e20c:	52800b62 	mov	w2, #0x5b                  	// #91
   8e210:	94004f3c 	bl	a1f00 <assertion_failed>
   8e214:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e218:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e21c:	91354021 	add	x1, x1, #0xd50
   8e220:	9136c000 	add	x0, x0, #0xdb0
   8e224:	52800e62 	mov	w2, #0x73                  	// #115
   8e228:	94004f36 	bl	a1f00 <assertion_failed>
   8e22c:	d503201f 	nop

000000000008e230 <CUSBDevice::ReScanDevices()>:
   8e230:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e234:	910003fd 	mov	x29, sp
   8e238:	a90153f3 	stp	x19, x20, [sp, #16]
   8e23c:	91018013 	add	x19, x0, #0x60
   8e240:	52800014 	mov	w20, #0x0                   	// #0
   8e244:	f90013f5 	str	x21, [sp, #32]
   8e248:	9102c015 	add	x21, x0, #0xb0
   8e24c:	d503201f 	nop
   8e250:	f9400261 	ldr	x1, [x19]
   8e254:	aa0103e0 	mov	x0, x1
   8e258:	b40000e1 	cbz	x1, 8e274 <CUSBDevice::ReScanDevices()+0x44>
   8e25c:	f9400021 	ldr	x1, [x1]
   8e260:	f9402821 	ldr	x1, [x1, #80]
   8e264:	d63f0020 	blr	x1
   8e268:	72000001 	ands	w1, w0, #0x1
   8e26c:	12001c00 	and	w0, w0, #0xff
   8e270:	1a800294 	csel	w20, w20, w0, eq	// eq = none
   8e274:	91002273 	add	x19, x19, #0x8
   8e278:	eb15027f 	cmp	x19, x21
   8e27c:	54fffea1 	b.ne	8e250 <CUSBDevice::ReScanDevices()+0x20>  // b.any
   8e280:	f94013f5 	ldr	x21, [sp, #32]
   8e284:	2a1403e0 	mov	w0, w20
   8e288:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e28c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e290:	d65f03c0 	ret
   8e294:	d503201f 	nop
   8e298:	d503201f 	nop
   8e29c:	d503201f 	nop

000000000008e2a0 <CUSBDevice::RemoveDevice()>:
   8e2a0:	aa0003e1 	mov	x1, x0
   8e2a4:	f9400800 	ldr	x0, [x0, #16]
   8e2a8:	b40000a0 	cbz	x0, 8e2bc <CUSBDevice::RemoveDevice()+0x1c>
   8e2ac:	f9400001 	ldr	x1, [x0]
   8e2b0:	f9400c21 	ldr	x1, [x1, #24]
   8e2b4:	aa0103f0 	mov	x16, x1
   8e2b8:	d61f0200 	br	x16
   8e2bc:	f9400c20 	ldr	x0, [x1, #24]
   8e2c0:	b4000060 	cbz	x0, 8e2cc <CUSBDevice::RemoveDevice()+0x2c>
   8e2c4:	b9402021 	ldr	w1, [x1, #32]
   8e2c8:	1400249e 	b	97540 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>
   8e2cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e2d0:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e2d4:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e2d8:	910003fd 	mov	x29, sp
   8e2dc:	91354021 	add	x1, x1, #0xd50
   8e2e0:	91364000 	add	x0, x0, #0xd90
   8e2e4:	528042a2 	mov	w2, #0x215                 	// #533
   8e2e8:	94004f06 	bl	a1f00 <assertion_failed>
   8e2ec:	d503201f 	nop

000000000008e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>:
   8e2f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e2f4:	910003fd 	mov	x29, sp
   8e2f8:	a90153f3 	stp	x19, x20, [sp, #16]
   8e2fc:	2a0103f4 	mov	w20, w1
   8e300:	f90013f5 	str	x21, [sp, #32]
   8e304:	aa0003f5 	mov	x21, x0
   8e308:	d2800400 	mov	x0, #0x20                  	// #32
   8e30c:	94007609 	bl	abb30 <operator new(unsigned long)>
   8e310:	aa0003f3 	mov	x19, x0
   8e314:	94006783 	bl	a8120 <CString::CString()>
   8e318:	340002b4 	cbz	w20, 8e36c <CUSBDevice::GetName(TDeviceNameSelector) const+0x7c>
   8e31c:	7100069f 	cmp	w20, #0x1
   8e320:	540005a1 	b.ne	8e3d4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe4>  // b.any
   8e324:	f94026a0 	ldr	x0, [x21, #72]
   8e328:	b40006e0 	cbz	x0, 8e404 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>
   8e32c:	39401002 	ldrb	w2, [x0, #4]
   8e330:	51000441 	sub	w1, w2, #0x1
   8e334:	12001c21 	and	w1, w1, #0xff
   8e338:	7103f43f 	cmp	w1, #0xfd
   8e33c:	540003a8 	b.hi	8e3b0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc0>  // b.pmore
   8e340:	39401804 	ldrb	w4, [x0, #6]
   8e344:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e348:	39401403 	ldrb	w3, [x0, #5]
   8e34c:	9137e021 	add	x1, x1, #0xdf8
   8e350:	aa1303e0 	mov	x0, x19
   8e354:	94006d7b 	bl	a9940 <CString::Format(char const*, ...)>
   8e358:	f94013f5 	ldr	x21, [sp, #32]
   8e35c:	aa1303e0 	mov	x0, x19
   8e360:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e364:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e368:	d65f03c0 	ret
   8e36c:	f94026a4 	ldr	x4, [x21, #72]
   8e370:	b40003e4 	cbz	x4, 8e3ec <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
   8e374:	39402c85 	ldrb	w5, [x4, #11]
   8e378:	aa1303e0 	mov	x0, x19
   8e37c:	39402883 	ldrb	w3, [x4, #10]
   8e380:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e384:	39402082 	ldrb	w2, [x4, #8]
   8e388:	91378021 	add	x1, x1, #0xde0
   8e38c:	39402484 	ldrb	w4, [x4, #9]
   8e390:	2a052063 	orr	w3, w3, w5, lsl #8
   8e394:	2a042042 	orr	w2, w2, w4, lsl #8
   8e398:	94006d6a 	bl	a9940 <CString::Format(char const*, ...)>
   8e39c:	f94013f5 	ldr	x21, [sp, #32]
   8e3a0:	aa1303e0 	mov	x0, x19
   8e3a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e3a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e3ac:	d65f03c0 	ret
   8e3b0:	aa1303e0 	mov	x0, x19
   8e3b4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e3b8:	9137c021 	add	x1, x1, #0xdf0
   8e3bc:	940067a5 	bl	a8250 <CString::operator=(char const*)>
   8e3c0:	f94013f5 	ldr	x21, [sp, #32]
   8e3c4:	aa1303e0 	mov	x0, x19
   8e3c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e3cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e3d0:	d65f03c0 	ret
   8e3d4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e3d8:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e3dc:	91354021 	add	x1, x1, #0xd50
   8e3e0:	9135c000 	add	x0, x0, #0xd70
   8e3e4:	528046a2 	mov	w2, #0x235                 	// #565
   8e3e8:	94004ec6 	bl	a1f00 <assertion_failed>
   8e3ec:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e3f0:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e3f4:	91354021 	add	x1, x1, #0xd50
   8e3f8:	91372000 	add	x0, x0, #0xdc8
   8e3fc:	52804422 	mov	w2, #0x221                 	// #545
   8e400:	94004ec0 	bl	a1f00 <assertion_failed>
   8e404:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e408:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e40c:	91354021 	add	x1, x1, #0xd50
   8e410:	91372000 	add	x0, x0, #0xdc8
   8e414:	52804502 	mov	w2, #0x228                 	// #552
   8e418:	94004eba 	bl	a1f00 <assertion_failed>
   8e41c:	d503201f 	nop

000000000008e420 <CUSBDevice::GetNames() const>:
   8e420:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e424:	910003fd 	mov	x29, sp
   8e428:	a90153f3 	stp	x19, x20, [sp, #16]
   8e42c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e430:	52800015 	mov	w21, #0x0                   	// #0
   8e434:	a90363f7 	stp	x23, x24, [sp, #48]
   8e438:	aa0003f7 	mov	x23, x0
   8e43c:	d2800400 	mov	x0, #0x20                  	// #32
   8e440:	940075bc 	bl	abb30 <operator new(unsigned long)>
   8e444:	aa0003f4 	mov	x20, x0
   8e448:	94006736 	bl	a8120 <CString::CString()>
   8e44c:	b0000138 	adrp	x24, b3000 <_etext+0x9c8>
   8e450:	9137c316 	add	x22, x24, #0xdf0
   8e454:	2a1503e1 	mov	w1, w21
   8e458:	aa1703e0 	mov	x0, x23
   8e45c:	97ffffa5 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8e460:	aa0003f3 	mov	x19, x0
   8e464:	b40001e0 	cbz	x0, 8e4a0 <CUSBDevice::GetNames() const+0x80>
   8e468:	aa1603e1 	mov	x1, x22
   8e46c:	940067f1 	bl	a8430 <CString::Compare(char const*) const>
   8e470:	35000360 	cbnz	w0, 8e4dc <CUSBDevice::GetNames() const+0xbc>
   8e474:	f9400261 	ldr	x1, [x19]
   8e478:	aa1303e0 	mov	x0, x19
   8e47c:	f9400421 	ldr	x1, [x1, #8]
   8e480:	d63f0020 	blr	x1
   8e484:	350001b5 	cbnz	w21, 8e4b8 <CUSBDevice::GetNames() const+0x98>
   8e488:	aa1703e0 	mov	x0, x23
   8e48c:	52800035 	mov	w21, #0x1                   	// #1
   8e490:	2a1503e1 	mov	w1, w21
   8e494:	97ffff97 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8e498:	aa0003f3 	mov	x19, x0
   8e49c:	b5fffe60 	cbnz	x0, 8e468 <CUSBDevice::GetNames() const+0x48>
   8e4a0:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e4a4:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e4a8:	91354021 	add	x1, x1, #0xd50
   8e4ac:	91382000 	add	x0, x0, #0xe08
   8e4b0:	528048c2 	mov	w2, #0x246                 	// #582
   8e4b4:	94004e93 	bl	a1f00 <assertion_failed>
   8e4b8:	aa1403e0 	mov	x0, x20
   8e4bc:	940067a9 	bl	a8360 <CString::GetLength() const>
   8e4c0:	b4000200 	cbz	x0, 8e500 <CUSBDevice::GetNames() const+0xe0>
   8e4c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e4c8:	aa1403e0 	mov	x0, x20
   8e4cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e4d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8e4d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e4d8:	d65f03c0 	ret
   8e4dc:	aa1403e0 	mov	x0, x20
   8e4e0:	940067a0 	bl	a8360 <CString::GetLength() const>
   8e4e4:	b5000200 	cbnz	x0, 8e524 <CUSBDevice::GetNames() const+0x104>
   8e4e8:	aa1303e0 	mov	x0, x19
   8e4ec:	94006751 	bl	a8230 <CString::operator char const*() const>
   8e4f0:	aa0003e1 	mov	x1, x0
   8e4f4:	aa1403e0 	mov	x0, x20
   8e4f8:	940067a2 	bl	a8380 <CString::Append(char const*)>
   8e4fc:	17ffffde 	b	8e474 <CUSBDevice::GetNames() const+0x54>
   8e500:	9137c301 	add	x1, x24, #0xdf0
   8e504:	aa1403e0 	mov	x0, x20
   8e508:	94006752 	bl	a8250 <CString::operator=(char const*)>
   8e50c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e510:	aa1403e0 	mov	x0, x20
   8e514:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e518:	a94363f7 	ldp	x23, x24, [sp, #48]
   8e51c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e520:	d65f03c0 	ret
   8e524:	aa1403e0 	mov	x0, x20
   8e528:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e52c:	91386021 	add	x1, x1, #0xe18
   8e530:	94006794 	bl	a8380 <CString::Append(char const*)>
   8e534:	17ffffed 	b	8e4e8 <CUSBDevice::GetNames() const+0xc8>
   8e538:	d503201f 	nop
   8e53c:	d503201f 	nop

000000000008e540 <CUSBDevice::SetAddress(unsigned char)>:
   8e540:	12001c21 	and	w1, w1, #0xff
   8e544:	7100fc3f 	cmp	w1, #0x3f
   8e548:	54000068 	b.hi	8e554 <CUSBDevice::SetAddress(unsigned char)+0x14>  // b.pmore
   8e54c:	39009001 	strb	w1, [x0, #36]
   8e550:	d65f03c0 	ret
   8e554:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e558:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e55c:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e560:	910003fd 	mov	x29, sp
   8e564:	91354021 	add	x1, x1, #0xd50
   8e568:	91388000 	add	x0, x0, #0xe20
   8e56c:	52804c02 	mov	w2, #0x260                 	// #608
   8e570:	94004e64 	bl	a1f00 <assertion_failed>
   8e574:	d503201f 	nop
   8e578:	d503201f 	nop
   8e57c:	d503201f 	nop

000000000008e580 <CUSBDevice::GetAddress() const>:
   8e580:	39409000 	ldrb	w0, [x0, #36]
   8e584:	d65f03c0 	ret
   8e588:	d503201f 	nop
   8e58c:	d503201f 	nop

000000000008e590 <CUSBDevice::GetSpeed() const>:
   8e590:	b9402800 	ldr	w0, [x0, #40]
   8e594:	d65f03c0 	ret
   8e598:	d503201f 	nop
   8e59c:	d503201f 	nop

000000000008e5a0 <CUSBDevice::IsSplit() const>:
   8e5a0:	3940e000 	ldrb	w0, [x0, #56]
   8e5a4:	d65f03c0 	ret
   8e5a8:	d503201f 	nop
   8e5ac:	d503201f 	nop

000000000008e5b0 <CUSBDevice::GetHubAddress() const>:
   8e5b0:	3940e400 	ldrb	w0, [x0, #57]
   8e5b4:	d65f03c0 	ret
   8e5b8:	d503201f 	nop
   8e5bc:	d503201f 	nop

000000000008e5c0 <CUSBDevice::GetHubPortNumber() const>:
   8e5c0:	3940e800 	ldrb	w0, [x0, #58]
   8e5c4:	d65f03c0 	ret
   8e5c8:	d503201f 	nop
   8e5cc:	d503201f 	nop

000000000008e5d0 <CUSBDevice::GetTTHubDevice() const>:
   8e5d0:	f9402000 	ldr	x0, [x0, #64]
   8e5d4:	d65f03c0 	ret
   8e5d8:	d503201f 	nop
   8e5dc:	d503201f 	nop

000000000008e5e0 <CUSBDevice::GetEndpoint0() const>:
   8e5e0:	f9401800 	ldr	x0, [x0, #48]
   8e5e4:	b4000040 	cbz	x0, 8e5ec <CUSBDevice::GetEndpoint0() const+0xc>
   8e5e8:	d65f03c0 	ret
   8e5ec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e5f0:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e5f4:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e5f8:	910003fd 	mov	x29, sp
   8e5fc:	91354021 	add	x1, x1, #0xd50
   8e600:	91358000 	add	x0, x0, #0xd60
   8e604:	52805122 	mov	w2, #0x289                 	// #649
   8e608:	94004e3e 	bl	a1f00 <assertion_failed>
   8e60c:	d503201f 	nop

000000000008e610 <CUSBDevice::GetHost() const>:
   8e610:	f9400400 	ldr	x0, [x0, #8]
   8e614:	b4000040 	cbz	x0, 8e61c <CUSBDevice::GetHost() const+0xc>
   8e618:	d65f03c0 	ret
   8e61c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e620:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e624:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e628:	910003fd 	mov	x29, sp
   8e62c:	91354021 	add	x1, x1, #0xd50
   8e630:	91238000 	add	x0, x0, #0x8e0
   8e634:	528051e2 	mov	w2, #0x28f                 	// #655
   8e638:	94004e32 	bl	a1f00 <assertion_failed>
   8e63c:	d503201f 	nop

000000000008e640 <CUSBDevice::GetDeviceDescriptor() const>:
   8e640:	f9402400 	ldr	x0, [x0, #72]
   8e644:	b4000040 	cbz	x0, 8e64c <CUSBDevice::GetDeviceDescriptor() const+0xc>
   8e648:	d65f03c0 	ret
   8e64c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e650:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e654:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e658:	910003fd 	mov	x29, sp
   8e65c:	91354021 	add	x1, x1, #0xd50
   8e660:	91372000 	add	x0, x0, #0xdc8
   8e664:	528052a2 	mov	w2, #0x295                 	// #661
   8e668:	94004e26 	bl	a1f00 <assertion_failed>
   8e66c:	d503201f 	nop

000000000008e670 <CUSBDevice::GetConfigurationDescriptor() const>:
   8e670:	f9402800 	ldr	x0, [x0, #80]
   8e674:	b4000040 	cbz	x0, 8e67c <CUSBDevice::GetConfigurationDescriptor() const+0xc>
   8e678:	d65f03c0 	ret
   8e67c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e680:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e684:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e688:	910003fd 	mov	x29, sp
   8e68c:	91354021 	add	x1, x1, #0xd50
   8e690:	91390000 	add	x0, x0, #0xe40
   8e694:	52805362 	mov	w2, #0x29b                 	// #667
   8e698:	94004e1a 	bl	a1f00 <assertion_failed>
   8e69c:	d503201f 	nop

000000000008e6a0 <CUSBDevice::GetDescriptor(unsigned char)>:
   8e6a0:	f9402c00 	ldr	x0, [x0, #88]
   8e6a4:	b4000060 	cbz	x0, 8e6b0 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
   8e6a8:	12001c21 	and	w1, w1, #0xff
   8e6ac:	14004075 	b	9e880 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   8e6b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e6b4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e6b8:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e6bc:	910003fd 	mov	x29, sp
   8e6c0:	91354021 	add	x1, x1, #0xd50
   8e6c4:	91396000 	add	x0, x0, #0xe58
   8e6c8:	52805422 	mov	w2, #0x2a1                 	// #673
   8e6cc:	94004e0d 	bl	a1f00 <assertion_failed>

000000000008e6d0 <CUSBDevice::ConfigurationError(char const*) const>:
   8e6d0:	f9402c00 	ldr	x0, [x0, #88]
   8e6d4:	b4000040 	cbz	x0, 8e6dc <CUSBDevice::ConfigurationError(char const*) const+0xc>
   8e6d8:	140040aa 	b	9e980 <CUSBConfigurationParser::Error(char const*) const>
   8e6dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e6e0:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e6e4:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e6e8:	910003fd 	mov	x29, sp
   8e6ec:	91354021 	add	x1, x1, #0xd50
   8e6f0:	91396000 	add	x0, x0, #0xe58
   8e6f4:	528054e2 	mov	w2, #0x2a7                 	// #679
   8e6f8:	94004e02 	bl	a1f00 <assertion_failed>
   8e6fc:	d503201f 	nop

000000000008e700 <CUSBDevice::GetFunction(unsigned int)>:
   8e700:	7100243f 	cmp	w1, #0x9
   8e704:	540000a8 	b.hi	8e718 <CUSBDevice::GetFunction(unsigned int)+0x18>  // b.pmore
   8e708:	2a0103e1 	mov	w1, w1
   8e70c:	91003021 	add	x1, x1, #0xc
   8e710:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   8e714:	d65f03c0 	ret
   8e718:	d2800000 	mov	x0, #0x0                   	// #0
   8e71c:	d65f03c0 	ret

000000000008e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
   8e720:	a9ac7bfd 	stp	x29, x30, [sp, #-320]!
   8e724:	910003fd 	mov	x29, sp
   8e728:	a90153f3 	stp	x19, x20, [sp, #16]
   8e72c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e730:	3d8027e0 	str	q0, [sp, #144]
   8e734:	3d802be1 	str	q1, [sp, #160]
   8e738:	3d802fe2 	str	q2, [sp, #176]
   8e73c:	3d8033e3 	str	q3, [sp, #192]
   8e740:	3d8037e4 	str	q4, [sp, #208]
   8e744:	3d803be5 	str	q5, [sp, #224]
   8e748:	3d803fe6 	str	q6, [sp, #240]
   8e74c:	3d8043e7 	str	q7, [sp, #256]
   8e750:	a91193e3 	stp	x3, x4, [sp, #280]
   8e754:	a9129be5 	stp	x5, x6, [sp, #296]
   8e758:	f9009fe7 	str	x7, [sp, #312]
   8e75c:	b4000542 	cbz	x2, 8e804 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xe4>
   8e760:	aa0003f4 	mov	x20, x0
   8e764:	910143f5 	add	x21, sp, #0x50
   8e768:	2a0103f6 	mov	w22, w1
   8e76c:	aa0203f3 	mov	x19, x2
   8e770:	aa1503e0 	mov	x0, x21
   8e774:	9400666b 	bl	a8120 <CString::CString()>
   8e778:	3940ea84 	ldrb	w4, [x20, #58]
   8e77c:	aa1503e0 	mov	x0, x21
   8e780:	3940e683 	ldrb	w3, [x20, #57]
   8e784:	b0000142 	adrp	x2, b7000 <_etext+0x49c8>
   8e788:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e78c:	91348042 	add	x2, x2, #0xd20
   8e790:	913a0021 	add	x1, x1, #0xe80
   8e794:	94006c6b 	bl	a9940 <CString::Format(char const*, ...)>
   8e798:	910443e2 	add	x2, sp, #0x110
   8e79c:	910503e3 	add	x3, sp, #0x140
   8e7a0:	128004e1 	mov	w1, #0xffffffd8            	// #-40
   8e7a4:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   8e7a8:	a9070fe3 	stp	x3, x3, [sp, #112]
   8e7ac:	f90043e2 	str	x2, [sp, #128]
   8e7b0:	291103e1 	stp	w1, w0, [sp, #136]
   8e7b4:	9400550f 	bl	a3bf0 <CLogger::Get()>
   8e7b8:	aa0003f4 	mov	x20, x0
   8e7bc:	aa1503e0 	mov	x0, x21
   8e7c0:	9400669c 	bl	a8230 <CString::operator char const*() const>
   8e7c4:	aa0003e1 	mov	x1, x0
   8e7c8:	a94727e8 	ldp	x8, x9, [sp, #112]
   8e7cc:	aa1303e3 	mov	x3, x19
   8e7d0:	a9481fe6 	ldp	x6, x7, [sp, #128]
   8e7d4:	2a1603e2 	mov	w2, w22
   8e7d8:	9100c3e4 	add	x4, sp, #0x30
   8e7dc:	aa1403e0 	mov	x0, x20
   8e7e0:	a90327e8 	stp	x8, x9, [sp, #48]
   8e7e4:	a9041fe6 	stp	x6, x7, [sp, #64]
   8e7e8:	94005682 	bl	a41f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   8e7ec:	aa1503e0 	mov	x0, x21
   8e7f0:	94006610 	bl	a8030 <CString::~CString()>
   8e7f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e7f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e7fc:	a8d47bfd 	ldp	x29, x30, [sp], #320
   8e800:	d65f03c0 	ret
   8e804:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e808:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e80c:	91354021 	add	x1, x1, #0xd50
   8e810:	9139c000 	add	x0, x0, #0xe70
   8e814:	528056e2 	mov	w2, #0x2b7                 	// #695
   8e818:	94004dba 	bl	a1f00 <assertion_failed>
   8e81c:	d503201f 	nop

000000000008e820 <CUSBDevice::~CUSBDevice() [clone .part.0]>:
   8e820:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e824:	910003fd 	mov	x29, sp
   8e828:	a90153f3 	stp	x19, x20, [sp, #16]
   8e82c:	aa0003f4 	mov	x20, x0
   8e830:	91018013 	add	x19, x0, #0x60
   8e834:	f90013f5 	str	x21, [sp, #32]
   8e838:	9102c015 	add	x21, x0, #0xb0
   8e83c:	d503201f 	nop
   8e840:	f9400260 	ldr	x0, [x19]
   8e844:	b4000080 	cbz	x0, 8e854 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x34>
   8e848:	f9400001 	ldr	x1, [x0]
   8e84c:	f9400421 	ldr	x1, [x1, #8]
   8e850:	d63f0020 	blr	x1
   8e854:	f800867f 	str	xzr, [x19], #8
   8e858:	eb15027f 	cmp	x19, x21
   8e85c:	54ffff21 	b.ne	8e840 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x20>  // b.any
   8e860:	f9402680 	ldr	x0, [x20, #72]
   8e864:	b4000200 	cbz	x0, 8e8a4 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x84>
   8e868:	aa1403e0 	mov	x0, x20
   8e86c:	97fffeed 	bl	8e420 <CUSBDevice::GetNames() const>
   8e870:	aa0003f3 	mov	x19, x0
   8e874:	b4000640 	cbz	x0, 8e93c <CUSBDevice::~CUSBDevice() [clone .part.0]+0x11c>
   8e878:	9400666e 	bl	a8230 <CString::operator char const*() const>
   8e87c:	aa0003e3 	mov	x3, x0
   8e880:	52800061 	mov	w1, #0x3                   	// #3
   8e884:	aa1403e0 	mov	x0, x20
   8e888:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8e88c:	913a6042 	add	x2, x2, #0xe98
   8e890:	97ffffa4 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8e894:	f9400261 	ldr	x1, [x19]
   8e898:	aa1303e0 	mov	x0, x19
   8e89c:	f9400421 	ldr	x1, [x1, #8]
   8e8a0:	d63f0020 	blr	x1
   8e8a4:	39409281 	ldrb	w1, [x20, #36]
   8e8a8:	35000421 	cbnz	w1, 8e92c <CUSBDevice::~CUSBDevice() [clone .part.0]+0x10c>
   8e8ac:	f9402e93 	ldr	x19, [x20, #88]
   8e8b0:	b40000d3 	cbz	x19, 8e8c8 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xa8>
   8e8b4:	aa1303e0 	mov	x0, x19
   8e8b8:	94003fea 	bl	9e860 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   8e8bc:	aa1303e0 	mov	x0, x19
   8e8c0:	d2800601 	mov	x1, #0x30                  	// #48
   8e8c4:	940074bb 	bl	abbb0 <operator delete(void*, unsigned long)>
   8e8c8:	f9402a80 	ldr	x0, [x20, #80]
   8e8cc:	f9002e9f 	str	xzr, [x20, #88]
   8e8d0:	b4000060 	cbz	x0, 8e8dc <CUSBDevice::~CUSBDevice() [clone .part.0]+0xbc>
   8e8d4:	d2800121 	mov	x1, #0x9                   	// #9
   8e8d8:	940074b6 	bl	abbb0 <operator delete(void*, unsigned long)>
   8e8dc:	f9402680 	ldr	x0, [x20, #72]
   8e8e0:	f9002a9f 	str	xzr, [x20, #80]
   8e8e4:	b4000060 	cbz	x0, 8e8f0 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xd0>
   8e8e8:	d2800241 	mov	x1, #0x12                  	// #18
   8e8ec:	940074b1 	bl	abbb0 <operator delete(void*, unsigned long)>
   8e8f0:	f9401a93 	ldr	x19, [x20, #48]
   8e8f4:	f900269f 	str	xzr, [x20, #72]
   8e8f8:	b4000133 	cbz	x19, 8e91c <CUSBDevice::~CUSBDevice() [clone .part.0]+0xfc>
   8e8fc:	aa1303e0 	mov	x0, x19
   8e900:	940005b8 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   8e904:	f94013f5 	ldr	x21, [sp, #32]
   8e908:	aa1303e0 	mov	x0, x19
   8e90c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e910:	d2800401 	mov	x1, #0x20                  	// #32
   8e914:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e918:	140074a6 	b	abbb0 <operator delete(void*, unsigned long)>
   8e91c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e920:	f94013f5 	ldr	x21, [sp, #32]
   8e924:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e928:	d65f03c0 	ret
   8e92c:	900001e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8e930:	912ee000 	add	x0, x0, #0xbb8
   8e934:	94007647 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   8e938:	17ffffdd 	b	8e8ac <CUSBDevice::~CUSBDevice() [clone .part.0]+0x8c>
   8e93c:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e940:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e944:	91354021 	add	x1, x1, #0xd50
   8e948:	913a2000 	add	x0, x0, #0xe88
   8e94c:	52801162 	mov	w2, #0x8b                  	// #139
   8e950:	94004d6c 	bl	a1f00 <assertion_failed>
   8e954:	d503201f 	nop
   8e958:	d503201f 	nop
   8e95c:	d503201f 	nop

000000000008e960 <CUSBDevice::~CUSBDevice()>:
   8e960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e964:	f00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8e968:	9110a021 	add	x1, x1, #0x428
   8e96c:	910003fd 	mov	x29, sp
   8e970:	f9000bf3 	str	x19, [sp, #16]
   8e974:	aa0003f3 	mov	x19, x0
   8e978:	f9400400 	ldr	x0, [x0, #8]
   8e97c:	f9000261 	str	x1, [x19]
   8e980:	b4000220 	cbz	x0, 8e9c4 <CUSBDevice::~CUSBDevice()+0x64>
   8e984:	f9400002 	ldr	x2, [x0]
   8e988:	b0000001 	adrp	x1, 8f000 <CUSBDevice::Initialize()+0x580>
   8e98c:	910e8021 	add	x1, x1, #0x3a0
   8e990:	f9401842 	ldr	x2, [x2, #48]
   8e994:	eb01005f 	cmp	x2, x1
   8e998:	540000a1 	b.ne	8e9ac <CUSBDevice::~CUSBDevice()+0x4c>  // b.any
   8e99c:	aa1303e0 	mov	x0, x19
   8e9a0:	f9400bf3 	ldr	x19, [sp, #16]
   8e9a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e9a8:	17ffff9e 	b	8e820 <CUSBDevice::~CUSBDevice() [clone .part.0]>
   8e9ac:	aa1303e1 	mov	x1, x19
   8e9b0:	d63f0040 	blr	x2
   8e9b4:	aa1303e0 	mov	x0, x19
   8e9b8:	f9400bf3 	ldr	x19, [sp, #16]
   8e9bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e9c0:	17ffff98 	b	8e820 <CUSBDevice::~CUSBDevice() [clone .part.0]>
   8e9c4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8e9c8:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8e9cc:	91354021 	add	x1, x1, #0xd50
   8e9d0:	91238000 	add	x0, x0, #0x8e0
   8e9d4:	52800fe2 	mov	w2, #0x7f                  	// #127
   8e9d8:	94004d4a 	bl	a1f00 <assertion_failed>
   8e9dc:	d503201f 	nop

000000000008e9e0 <CUSBDevice::~CUSBDevice()>:
   8e9e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e9e4:	f00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8e9e8:	9110a021 	add	x1, x1, #0x428
   8e9ec:	910003fd 	mov	x29, sp
   8e9f0:	f9000bf3 	str	x19, [sp, #16]
   8e9f4:	aa0003f3 	mov	x19, x0
   8e9f8:	f9400400 	ldr	x0, [x0, #8]
   8e9fc:	f9000261 	str	x1, [x19]
   8ea00:	b40002e0 	cbz	x0, 8ea5c <CUSBDevice::~CUSBDevice()+0x7c>
   8ea04:	f9400002 	ldr	x2, [x0]
   8ea08:	b0000001 	adrp	x1, 8f000 <CUSBDevice::Initialize()+0x580>
   8ea0c:	910e8021 	add	x1, x1, #0x3a0
   8ea10:	f9401842 	ldr	x2, [x2, #48]
   8ea14:	eb01005f 	cmp	x2, x1
   8ea18:	54000101 	b.ne	8ea38 <CUSBDevice::~CUSBDevice()+0x58>  // b.any
   8ea1c:	aa1303e0 	mov	x0, x19
   8ea20:	97ffff80 	bl	8e820 <CUSBDevice::~CUSBDevice() [clone .part.0]>
   8ea24:	aa1303e0 	mov	x0, x19
   8ea28:	d2801601 	mov	x1, #0xb0                  	// #176
   8ea2c:	f9400bf3 	ldr	x19, [sp, #16]
   8ea30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ea34:	1400745f 	b	abbb0 <operator delete(void*, unsigned long)>
   8ea38:	aa1303e1 	mov	x1, x19
   8ea3c:	d63f0040 	blr	x2
   8ea40:	aa1303e0 	mov	x0, x19
   8ea44:	97ffff77 	bl	8e820 <CUSBDevice::~CUSBDevice() [clone .part.0]>
   8ea48:	aa1303e0 	mov	x0, x19
   8ea4c:	d2801601 	mov	x1, #0xb0                  	// #176
   8ea50:	f9400bf3 	ldr	x19, [sp, #16]
   8ea54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ea58:	14007456 	b	abbb0 <operator delete(void*, unsigned long)>
   8ea5c:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ea60:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ea64:	91354021 	add	x1, x1, #0xd50
   8ea68:	91238000 	add	x0, x0, #0x8e0
   8ea6c:	52800fe2 	mov	w2, #0x7f                  	// #127
   8ea70:	94004d24 	bl	a1f00 <assertion_failed>
   8ea74:	d503201f 	nop
   8ea78:	d503201f 	nop
   8ea7c:	d503201f 	nop

000000000008ea80 <CUSBDevice::Initialize()>:
   8ea80:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8ea84:	910003fd 	mov	x29, sp
   8ea88:	a90153f3 	stp	x19, x20, [sp, #16]
   8ea8c:	aa0003f3 	mov	x19, x0
   8ea90:	f9402400 	ldr	x0, [x0, #72]
   8ea94:	b5002000 	cbnz	x0, 8ee94 <CUSBDevice::Initialize()+0x414>
   8ea98:	d2800240 	mov	x0, #0x12                  	// #18
   8ea9c:	94007425 	bl	abb30 <operator new(unsigned long)>
   8eaa0:	aa0003e4 	mov	x4, x0
   8eaa4:	f9002664 	str	x4, [x19, #72]
   8eaa8:	f9400660 	ldr	x0, [x19, #8]
   8eaac:	b4002080 	cbz	x0, 8eebc <CUSBDevice::Initialize()+0x43c>
   8eab0:	f9401a61 	ldr	x1, [x19, #48]
   8eab4:	b4002181 	cbz	x1, 8eee4 <CUSBDevice::Initialize()+0x464>
   8eab8:	52800022 	mov	w2, #0x1                   	// #1
   8eabc:	52800007 	mov	w7, #0x0                   	// #0
   8eac0:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   8eac4:	52800105 	mov	w5, #0x8                   	// #8
   8eac8:	52800003 	mov	w3, #0x0                   	// #0
   8eacc:	94001539 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8ead0:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8ead4:	913b2042 	add	x2, x2, #0xec8
   8ead8:	7100201f 	cmp	w0, #0x8
   8eadc:	54000181 	b.ne	8eb0c <CUSBDevice::Initialize()+0x8c>  // b.any
   8eae0:	f9402661 	ldr	x1, [x19, #72]
   8eae4:	39400034 	ldrb	w20, [x1]
   8eae8:	71004a9f 	cmp	w20, #0x12
   8eaec:	540000c1 	b.ne	8eb04 <CUSBDevice::Initialize()+0x84>  // b.any
   8eaf0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eaf4:	39400435 	ldrb	w21, [x1, #1]
   8eaf8:	710006bf 	cmp	w21, #0x1
   8eafc:	54000220 	b.eq	8eb40 <CUSBDevice::Initialize()+0xc0>  // b.none
   8eb00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eb04:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8eb08:	913bc042 	add	x2, x2, #0xef0
   8eb0c:	aa1303e0 	mov	x0, x19
   8eb10:	52800021 	mov	w1, #0x1                   	// #1
   8eb14:	97ffff03 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8eb18:	f9402660 	ldr	x0, [x19, #72]
   8eb1c:	b4000060 	cbz	x0, 8eb28 <CUSBDevice::Initialize()+0xa8>
   8eb20:	d2800241 	mov	x1, #0x12                  	// #18
   8eb24:	94007423 	bl	abbb0 <operator delete(void*, unsigned long)>
   8eb28:	f900267f 	str	xzr, [x19, #72]
   8eb2c:	52800014 	mov	w20, #0x0                   	// #0
   8eb30:	2a1403e0 	mov	w0, w20
   8eb34:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eb38:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8eb3c:	d65f03c0 	ret
   8eb40:	f9401a60 	ldr	x0, [x19, #48]
   8eb44:	39401c21 	ldrb	w1, [x1, #7]
   8eb48:	94000542 	bl	90050 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
   8eb4c:	36001f80 	tbz	w0, #0, 8ef3c <CUSBDevice::Initialize()+0x4bc>
   8eb50:	f9400660 	ldr	x0, [x19, #8]
   8eb54:	2a1403e5 	mov	w5, w20
   8eb58:	f9401a61 	ldr	x1, [x19, #48]
   8eb5c:	2a1503e2 	mov	w2, w21
   8eb60:	f9402664 	ldr	x4, [x19, #72]
   8eb64:	52800007 	mov	w7, #0x0                   	// #0
   8eb68:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   8eb6c:	52800003 	mov	w3, #0x0                   	// #0
   8eb70:	94001510 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8eb74:	7100481f 	cmp	w0, #0x12
   8eb78:	54001ca1 	b.ne	8ef0c <CUSBDevice::Initialize()+0x48c>  // b.any
   8eb7c:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8eb80:	900001f6 	adrp	x22, ca000 <vtable for CLAN7800Device+0x28>
   8eb84:	913d6042 	add	x2, x2, #0xf58
   8eb88:	912ee2c0 	add	x0, x22, #0xbb8
   8eb8c:	52800001 	mov	w1, #0x0                   	// #0
   8eb90:	94007580 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   8eb94:	2a0003f4 	mov	w20, w0
   8eb98:	7101001f 	cmp	w0, #0x40
   8eb9c:	54001fc0 	b.eq	8ef94 <CUSBDevice::Initialize()+0x514>  // b.none
   8eba0:	f9401a61 	ldr	x1, [x19, #48]
   8eba4:	12001c15 	and	w21, w0, #0xff
   8eba8:	f9400660 	ldr	x0, [x19, #8]
   8ebac:	2a1503e2 	mov	w2, w21
   8ebb0:	9400150c 	bl	93fe0 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
   8ebb4:	36002040 	tbz	w0, #0, 8efbc <CUSBDevice::Initialize()+0x53c>
   8ebb8:	7100febf 	cmp	w21, #0x3f
   8ebbc:	54002168 	b.hi	8efe8 <CUSBDevice::Initialize()+0x568>  // b.pmore
   8ebc0:	f9402a60 	ldr	x0, [x19, #80]
   8ebc4:	39009275 	strb	w21, [x19, #36]
   8ebc8:	b5002220 	cbnz	x0, 8f00c <CUSBDevice::Initialize()+0x58c>
   8ebcc:	d2800120 	mov	x0, #0x9                   	// #9
   8ebd0:	940073d8 	bl	abb30 <operator new(unsigned long)>
   8ebd4:	f9402661 	ldr	x1, [x19, #72]
   8ebd8:	f9002a60 	str	x0, [x19, #80]
   8ebdc:	aa0003e4 	mov	x4, x0
   8ebe0:	52800014 	mov	w20, #0x0                   	// #0
   8ebe4:	39402022 	ldrb	w2, [x1, #8]
   8ebe8:	39402420 	ldrb	w0, [x1, #9]
   8ebec:	2a002040 	orr	w0, w2, w0, lsl #8
   8ebf0:	7114941f 	cmp	w0, #0x525
   8ebf4:	540000e1 	b.ne	8ec10 <CUSBDevice::Initialize()+0x190>  // b.any
   8ebf8:	39402823 	ldrb	w3, [x1, #10]
   8ebfc:	52949442 	mov	w2, #0xa4a2                	// #42146
   8ec00:	39402c20 	ldrb	w0, [x1, #11]
   8ec04:	2a002060 	orr	w0, w3, w0, lsl #8
   8ec08:	6b02001f 	cmp	w0, w2
   8ec0c:	1a9f17f4 	cset	w20, eq	// eq = none
   8ec10:	f9400660 	ldr	x0, [x19, #8]
   8ec14:	2a1403e3 	mov	w3, w20
   8ec18:	f9401a61 	ldr	x1, [x19, #48]
   8ec1c:	52800007 	mov	w7, #0x0                   	// #0
   8ec20:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   8ec24:	52800125 	mov	w5, #0x9                   	// #9
   8ec28:	52800042 	mov	w2, #0x2                   	// #2
   8ec2c:	940014e1 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8ec30:	7100241f 	cmp	w0, #0x9
   8ec34:	54001be1 	b.ne	8efb0 <CUSBDevice::Initialize()+0x530>  // b.any
   8ec38:	f9402a60 	ldr	x0, [x19, #80]
   8ec3c:	39400001 	ldrb	w1, [x0]
   8ec40:	7100243f 	cmp	w1, #0x9
   8ec44:	54001901 	b.ne	8ef64 <CUSBDevice::Initialize()+0x4e4>  // b.any
   8ec48:	39400416 	ldrb	w22, [x0, #1]
   8ec4c:	71000adf 	cmp	w22, #0x2
   8ec50:	540018a1 	b.ne	8ef64 <CUSBDevice::Initialize()+0x4e4>  // b.any
   8ec54:	39400801 	ldrb	w1, [x0, #2]
   8ec58:	39400c15 	ldrb	w21, [x0, #3]
   8ec5c:	2a152035 	orr	w21, w1, w21, lsl #8
   8ec60:	711002bf 	cmp	w21, #0x400
   8ec64:	54001808 	b.hi	8ef64 <CUSBDevice::Initialize()+0x4e4>  // b.pmore
   8ec68:	d2800121 	mov	x1, #0x9                   	// #9
   8ec6c:	940073d1 	bl	abbb0 <operator delete(void*, unsigned long)>
   8ec70:	92403ea0 	and	x0, x21, #0xffff
   8ec74:	940073b7 	bl	abb50 <operator new[](unsigned long)>
   8ec78:	aa0003e4 	mov	x4, x0
   8ec7c:	f9400660 	ldr	x0, [x19, #8]
   8ec80:	f9002a64 	str	x4, [x19, #80]
   8ec84:	f9401a61 	ldr	x1, [x19, #48]
   8ec88:	2a1403e3 	mov	w3, w20
   8ec8c:	2a1603e2 	mov	w2, w22
   8ec90:	2a1503e5 	mov	w5, w21
   8ec94:	52800007 	mov	w7, #0x0                   	// #0
   8ec98:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   8ec9c:	940014c5 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8eca0:	2a0003f4 	mov	w20, w0
   8eca4:	d0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8eca8:	91000042 	add	x2, x2, #0x0
   8ecac:	6b15001f 	cmp	w0, w21
   8ecb0:	540015e1 	b.ne	8ef6c <CUSBDevice::Initialize()+0x4ec>  // b.any
   8ecb4:	f9402e60 	ldr	x0, [x19, #88]
   8ecb8:	b5003100 	cbnz	x0, 8f2d8 <CUSBDevice::Initialize()+0x858>
   8ecbc:	d2800600 	mov	x0, #0x30                  	// #48
   8ecc0:	9400739c 	bl	abb30 <operator new(unsigned long)>
   8ecc4:	f9402a61 	ldr	x1, [x19, #80]
   8ecc8:	2a1403e2 	mov	w2, w20
   8eccc:	aa0003f4 	mov	x20, x0
   8ecd0:	94003e70 	bl	9e690 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
   8ecd4:	f9002e74 	str	x20, [x19, #88]
   8ecd8:	aa1403e0 	mov	x0, x20
   8ecdc:	94003ee5 	bl	9e870 <CUSBConfigurationParser::IsValid() const>
   8ece0:	36002c20 	tbz	w0, #0, 8f264 <CUSBDevice::Initialize()+0x7e4>
   8ece4:	b9802a60 	ldrsw	x0, [x19, #40]
   8ece8:	f1000c1f 	cmp	x0, #0x3
   8ecec:	54002d48 	b.hi	8f294 <CUSBDevice::Initialize()+0x814>  // b.pmore
   8ecf0:	aa1303e0 	mov	x0, x19
   8ecf4:	97fffdcb 	bl	8e420 <CUSBDevice::GetNames() const>
   8ecf8:	a90363f7 	stp	x23, x24, [sp, #48]
   8ecfc:	aa0003f4 	mov	x20, x0
   8ed00:	b4002dc0 	cbz	x0, 8f2b8 <CUSBDevice::Initialize()+0x838>
   8ed04:	9400654b 	bl	a8230 <CString::operator char const*() const>
   8ed08:	aa0003e3 	mov	x3, x0
   8ed0c:	b9802a65 	ldrsw	x5, [x19, #40]
   8ed10:	f00001c4 	adrp	x4, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   8ed14:	91114084 	add	x4, x4, #0x450
   8ed18:	aa1303e0 	mov	x0, x19
   8ed1c:	52800061 	mov	w1, #0x3                   	// #3
   8ed20:	d0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8ed24:	9101c042 	add	x2, x2, #0x70
   8ed28:	910203f6 	add	x22, sp, #0x80
   8ed2c:	f8657884 	ldr	x4, [x4, x5, lsl #3]
   8ed30:	9101a3f7 	add	x23, sp, #0x68
   8ed34:	97fffe7b 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8ed38:	f9400281 	ldr	x1, [x20]
   8ed3c:	aa1403e0 	mov	x0, x20
   8ed40:	f9400421 	ldr	x1, [x1, #8]
   8ed44:	d63f0020 	blr	x1
   8ed48:	aa1603e0 	mov	x0, x22
   8ed4c:	940064f5 	bl	a8120 <CString::CString()>
   8ed50:	aa1703e0 	mov	x0, x23
   8ed54:	aa1303e1 	mov	x1, x19
   8ed58:	940025ea 	bl	98500 <CUSBString::CUSBString(CUSBDevice*)>
   8ed5c:	f9402660 	ldr	x0, [x19, #72]
   8ed60:	39403814 	ldrb	w20, [x0, #14]
   8ed64:	51000682 	sub	w2, w20, #0x1
   8ed68:	12001c42 	and	w2, w2, #0xff
   8ed6c:	7103f45f 	cmp	w2, #0xfd
   8ed70:	54001fc9 	b.ls	8f168 <CUSBDevice::Initialize()+0x6e8>  // b.plast
   8ed74:	39403c14 	ldrb	w20, [x0, #15]
   8ed78:	51000680 	sub	w0, w20, #0x1
   8ed7c:	12001c00 	and	w0, w0, #0xff
   8ed80:	7103f41f 	cmp	w0, #0xfd
   8ed84:	54001d29 	b.ls	8f128 <CUSBDevice::Initialize()+0x6a8>  // b.plast
   8ed88:	aa1603e0 	mov	x0, x22
   8ed8c:	94006575 	bl	a8360 <CString::GetLength() const>
   8ed90:	b5001ba0 	cbnz	x0, 8f104 <CUSBDevice::Initialize()+0x684>
   8ed94:	f9402a61 	ldr	x1, [x19, #80]
   8ed98:	f9400660 	ldr	x0, [x19, #8]
   8ed9c:	39401422 	ldrb	w2, [x1, #5]
   8eda0:	f9401a61 	ldr	x1, [x19, #48]
   8eda4:	940014a3 	bl	94030 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   8eda8:	12001c14 	and	w20, w0, #0xff
   8edac:	360023e0 	tbz	w0, #0, 8f228 <CUSBDevice::Initialize()+0x7a8>
   8edb0:	a9046bf9 	stp	x25, x26, [sp, #64]
   8edb4:	b000013a 	adrp	x26, b3000 <_etext+0x9c8>
   8edb8:	9137c35a 	add	x26, x26, #0xdf0
   8edbc:	d0000139 	adrp	x25, b4000 <_etext+0x19c8>
   8edc0:	91030339 	add	x25, x25, #0xc0
   8edc4:	52800015 	mov	w21, #0x0                   	// #0
   8edc8:	52800018 	mov	w24, #0x0                   	// #0
   8edcc:	a90573fb 	stp	x27, x28, [sp, #80]
   8edd0:	52800081 	mov	w1, #0x4                   	// #4
   8edd4:	f9402e60 	ldr	x0, [x19, #88]
   8edd8:	94003eaa 	bl	9e880 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   8eddc:	b4002900 	cbz	x0, 8f2fc <CUSBDevice::Initialize()+0x87c>
   8ede0:	39400801 	ldrb	w1, [x0, #2]
   8ede4:	6b0102bf 	cmp	w21, w1
   8ede8:	1a8182a2 	csel	w2, w21, w1, hi	// hi = pmore
   8edec:	6b15003f 	cmp	w1, w21
   8edf0:	12001c55 	and	w21, w2, #0xff
   8edf4:	540011e3 	b.cc	8f030 <CUSBDevice::Initialize()+0x5b0>  // b.lo, b.ul, b.last
   8edf8:	f9402e60 	ldr	x0, [x19, #88]
   8edfc:	b4001fe0 	cbz	x0, 8f1f8 <CUSBDevice::Initialize()+0x778>
   8ee00:	8b384e7c 	add	x28, x19, w24, uxtw #3
   8ee04:	f9403380 	ldr	x0, [x28, #96]
   8ee08:	b5002040 	cbnz	x0, 8f210 <CUSBDevice::Initialize()+0x790>
   8ee0c:	d2800500 	mov	x0, #0x28                  	// #40
   8ee10:	94007348 	bl	abb30 <operator new(unsigned long)>
   8ee14:	f9402e62 	ldr	x2, [x19, #88]
   8ee18:	aa0003fb 	mov	x27, x0
   8ee1c:	aa1303e1 	mov	x1, x19
   8ee20:	94000568 	bl	903c0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
   8ee24:	f900339b 	str	x27, [x28, #96]
   8ee28:	35001238 	cbnz	w24, 8f06c <CUSBDevice::Initialize()+0x5ec>
   8ee2c:	52800001 	mov	w1, #0x0                   	// #0
   8ee30:	aa1303e0 	mov	x0, x19
   8ee34:	97fffd2f 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8ee38:	aa0003e1 	mov	x1, x0
   8ee3c:	aa1b03e0 	mov	x0, x27
   8ee40:	94000234 	bl	8f710 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   8ee44:	aa0003fb 	mov	x27, x0
   8ee48:	b4001000 	cbz	x0, 8f048 <CUSBDevice::Initialize()+0x5c8>
   8ee4c:	f9403260 	ldr	x0, [x19, #96]
   8ee50:	b4001ac0 	cbz	x0, 8f1a8 <CUSBDevice::Initialize()+0x728>
   8ee54:	f9400001 	ldr	x1, [x0]
   8ee58:	f9400421 	ldr	x1, [x1, #8]
   8ee5c:	d63f0020 	blr	x1
   8ee60:	b400257b 	cbz	x27, 8f30c <CUSBDevice::Initialize()+0x88c>
   8ee64:	f9400361 	ldr	x1, [x27]
   8ee68:	aa1b03e0 	mov	x0, x27
   8ee6c:	f9402021 	ldr	x1, [x1, #64]
   8ee70:	f900339b 	str	x27, [x28, #96]
   8ee74:	d63f0020 	blr	x1
   8ee78:	36001a80 	tbz	w0, #0, 8f1c8 <CUSBDevice::Initialize()+0x748>
   8ee7c:	11000718 	add	w24, w24, #0x1
   8ee80:	71002b1f 	cmp	w24, #0xa
   8ee84:	540026c0 	b.eq	8f35c <CUSBDevice::Initialize()+0x8dc>  // b.none
   8ee88:	110006b5 	add	w21, w21, #0x1
   8ee8c:	12001eb5 	and	w21, w21, #0xff
   8ee90:	17ffffd0 	b	8edd0 <CUSBDevice::Initialize()+0x350>
   8ee94:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8ee98:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ee9c:	91354021 	add	x1, x1, #0xd50
   8eea0:	913ac000 	add	x0, x0, #0xeb0
   8eea4:	52801682 	mov	w2, #0xb4                  	// #180
   8eea8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eeac:	a90363f7 	stp	x23, x24, [sp, #48]
   8eeb0:	a9046bf9 	stp	x25, x26, [sp, #64]
   8eeb4:	a90573fb 	stp	x27, x28, [sp, #80]
   8eeb8:	94004c12 	bl	a1f00 <assertion_failed>
   8eebc:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8eec0:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8eec4:	91354021 	add	x1, x1, #0xd50
   8eec8:	91238000 	add	x0, x0, #0x8e0
   8eecc:	52801702 	mov	w2, #0xb8                  	// #184
   8eed0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eed4:	a90363f7 	stp	x23, x24, [sp, #48]
   8eed8:	a9046bf9 	stp	x25, x26, [sp, #64]
   8eedc:	a90573fb 	stp	x27, x28, [sp, #80]
   8eee0:	94004c08 	bl	a1f00 <assertion_failed>
   8eee4:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8eee8:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8eeec:	91354021 	add	x1, x1, #0xd50
   8eef0:	91358000 	add	x0, x0, #0xd60
   8eef4:	52801722 	mov	w2, #0xb9                  	// #185
   8eef8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eefc:	a90363f7 	stp	x23, x24, [sp, #48]
   8ef00:	a9046bf9 	stp	x25, x26, [sp, #64]
   8ef04:	a90573fb 	stp	x27, x28, [sp, #80]
   8ef08:	94004bfe 	bl	a1f00 <assertion_failed>
   8ef0c:	aa1303e0 	mov	x0, x19
   8ef10:	2a1503e1 	mov	w1, w21
   8ef14:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8ef18:	913ce042 	add	x2, x2, #0xf38
   8ef1c:	97fffe01 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8ef20:	f9402660 	ldr	x0, [x19, #72]
   8ef24:	b40001a0 	cbz	x0, 8ef58 <CUSBDevice::Initialize()+0x4d8>
   8ef28:	d2800241 	mov	x1, #0x12                  	// #18
   8ef2c:	94007321 	bl	abbb0 <operator delete(void*, unsigned long)>
   8ef30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ef34:	f900267f 	str	xzr, [x19, #72]
   8ef38:	17fffefd 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8ef3c:	aa1303e0 	mov	x0, x19
   8ef40:	2a1503e1 	mov	w1, w21
   8ef44:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8ef48:	913c4042 	add	x2, x2, #0xf10
   8ef4c:	97fffdf5 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8ef50:	f9402660 	ldr	x0, [x19, #72]
   8ef54:	b5fffea0 	cbnz	x0, 8ef28 <CUSBDevice::Initialize()+0x4a8>
   8ef58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ef5c:	f900267f 	str	xzr, [x19, #72]
   8ef60:	17fffef3 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8ef64:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8ef68:	913f6042 	add	x2, x2, #0xfd8
   8ef6c:	aa1303e0 	mov	x0, x19
   8ef70:	52800021 	mov	w1, #0x1                   	// #1
   8ef74:	97fffdeb 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8ef78:	f9402a60 	ldr	x0, [x19, #80]
   8ef7c:	b4000060 	cbz	x0, 8ef88 <CUSBDevice::Initialize()+0x508>
   8ef80:	d2800121 	mov	x1, #0x9                   	// #9
   8ef84:	9400730b 	bl	abbb0 <operator delete(void*, unsigned long)>
   8ef88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ef8c:	f9002a7f 	str	xzr, [x19, #80]
   8ef90:	17fffee7 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8ef94:	2a1503e1 	mov	w1, w21
   8ef98:	aa1303e0 	mov	x0, x19
   8ef9c:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8efa0:	913d8042 	add	x2, x2, #0xf60
   8efa4:	97fffddf 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8efa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8efac:	17fffee0 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8efb0:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8efb4:	913ea042 	add	x2, x2, #0xfa8
   8efb8:	17ffffed 	b	8ef6c <CUSBDevice::Initialize()+0x4ec>
   8efbc:	2a1403e3 	mov	w3, w20
   8efc0:	b0000122 	adrp	x2, b3000 <_etext+0x9c8>
   8efc4:	913de042 	add	x2, x2, #0xf78
   8efc8:	aa1303e0 	mov	x0, x19
   8efcc:	52800021 	mov	w1, #0x1                   	// #1
   8efd0:	97fffdd4 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8efd4:	912ee2c0 	add	x0, x22, #0xbb8
   8efd8:	2a1403e1 	mov	w1, w20
   8efdc:	9400749d 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   8efe0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8efe4:	17fffed2 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8efe8:	b0000121 	adrp	x1, b3000 <_etext+0x9c8>
   8efec:	b0000120 	adrp	x0, b3000 <_etext+0x9c8>
   8eff0:	91354021 	add	x1, x1, #0xd50
   8eff4:	91388000 	add	x0, x0, #0xe20
   8eff8:	52804c02 	mov	w2, #0x260                 	// #608
   8effc:	a90363f7 	stp	x23, x24, [sp, #48]
   8f000:	a9046bf9 	stp	x25, x26, [sp, #64]
   8f004:	a90573fb 	stp	x27, x28, [sp, #80]
   8f008:	94004bbe 	bl	a1f00 <assertion_failed>
   8f00c:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f010:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8f014:	91354021 	add	x1, x1, #0xd50
   8f018:	913e4000 	add	x0, x0, #0xf90
   8f01c:	52802082 	mov	w2, #0x104                 	// #260
   8f020:	a90363f7 	stp	x23, x24, [sp, #48]
   8f024:	a9046bf9 	stp	x25, x26, [sp, #64]
   8f028:	a90573fb 	stp	x27, x28, [sp, #80]
   8f02c:	94004bb5 	bl	a1f00 <assertion_failed>
   8f030:	39400c03 	ldrb	w3, [x0, #3]
   8f034:	aa1903e2 	mov	x2, x25
   8f038:	aa1303e0 	mov	x0, x19
   8f03c:	52800081 	mov	w1, #0x4                   	// #4
   8f040:	97fffdb8 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f044:	17ffff63 	b	8edd0 <CUSBDevice::Initialize()+0x350>
   8f048:	f940327b 	ldr	x27, [x19, #96]
   8f04c:	52800021 	mov	w1, #0x1                   	// #1
   8f050:	aa1303e0 	mov	x0, x19
   8f054:	97fffca7 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8f058:	aa0003e1 	mov	x1, x0
   8f05c:	aa1b03e0 	mov	x0, x27
   8f060:	940001ac 	bl	8f710 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   8f064:	aa0003fb 	mov	x27, x0
   8f068:	b5ffef20 	cbnz	x0, 8ee4c <CUSBDevice::Initialize()+0x3cc>
   8f06c:	f9403380 	ldr	x0, [x28, #96]
   8f070:	9400053c 	bl	90560 <CUSBFunction::GetInterfaceName() const>
   8f074:	aa0003fb 	mov	x27, x0
   8f078:	b4001020 	cbz	x0, 8f27c <CUSBDevice::Initialize()+0x7fc>
   8f07c:	aa1a03e1 	mov	x1, x26
   8f080:	940064ec 	bl	a8430 <CString::Compare(char const*) const>
   8f084:	35000220 	cbnz	w0, 8f0c8 <CUSBDevice::Initialize()+0x648>
   8f088:	f9400361 	ldr	x1, [x27]
   8f08c:	aa1b03e0 	mov	x0, x27
   8f090:	f9400421 	ldr	x1, [x1, #8]
   8f094:	d63f0020 	blr	x1
   8f098:	f9403380 	ldr	x0, [x28, #96]
   8f09c:	b40000a0 	cbz	x0, 8f0b0 <CUSBDevice::Initialize()+0x630>
   8f0a0:	f9400001 	ldr	x1, [x0]
   8f0a4:	f9400421 	ldr	x1, [x1, #8]
   8f0a8:	d63f0020 	blr	x1
   8f0ac:	f900339f 	str	xzr, [x28, #96]
   8f0b0:	aa1303e0 	mov	x0, x19
   8f0b4:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f0b8:	91046042 	add	x2, x2, #0x118
   8f0bc:	52800041 	mov	w1, #0x2                   	// #2
   8f0c0:	97fffd98 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f0c4:	17ffff43 	b	8edd0 <CUSBDevice::Initialize()+0x350>
   8f0c8:	aa1b03e0 	mov	x0, x27
   8f0cc:	94006459 	bl	a8230 <CString::operator char const*() const>
   8f0d0:	52800061 	mov	w1, #0x3                   	// #3
   8f0d4:	aa0003e3 	mov	x3, x0
   8f0d8:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f0dc:	aa1303e0 	mov	x0, x19
   8f0e0:	91040042 	add	x2, x2, #0x100
   8f0e4:	97fffd8f 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f0e8:	f9403380 	ldr	x0, [x28, #96]
   8f0ec:	aa1b03e1 	mov	x1, x27
   8f0f0:	94000188 	bl	8f710 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   8f0f4:	aa0003fb 	mov	x27, x0
   8f0f8:	f9403380 	ldr	x0, [x28, #96]
   8f0fc:	b5ffeac0 	cbnz	x0, 8ee54 <CUSBDevice::Initialize()+0x3d4>
   8f100:	17ffff58 	b	8ee60 <CUSBDevice::Initialize()+0x3e0>
   8f104:	aa1603e0 	mov	x0, x22
   8f108:	9400644a 	bl	a8230 <CString::operator char const*() const>
   8f10c:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f110:	aa0003e3 	mov	x3, x0
   8f114:	91024042 	add	x2, x2, #0x90
   8f118:	aa1303e0 	mov	x0, x19
   8f11c:	52800061 	mov	w1, #0x3                   	// #3
   8f120:	97fffd80 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f124:	17ffff1c 	b	8ed94 <CUSBDevice::Initialize()+0x314>
   8f128:	aa1703e0 	mov	x0, x23
   8f12c:	940025f9 	bl	98910 <CUSBString::GetLanguageID()>
   8f130:	2a1403e1 	mov	w1, w20
   8f134:	2a0003e2 	mov	w2, w0
   8f138:	aa1703e0 	mov	x0, x23
   8f13c:	94002551 	bl	98680 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   8f140:	3607e240 	tbz	w0, #0, 8ed88 <CUSBDevice::Initialize()+0x308>
   8f144:	aa1603e0 	mov	x0, x22
   8f148:	94006486 	bl	a8360 <CString::GetLength() const>
   8f14c:	b5000fe0 	cbnz	x0, 8f348 <CUSBDevice::Initialize()+0x8c8>
   8f150:	aa1703e0 	mov	x0, x23
   8f154:	940025eb 	bl	98900 <CUSBString::Get() const>
   8f158:	aa0003e1 	mov	x1, x0
   8f15c:	aa1603e0 	mov	x0, x22
   8f160:	94006488 	bl	a8380 <CString::Append(char const*)>
   8f164:	17ffff09 	b	8ed88 <CUSBDevice::Initialize()+0x308>
   8f168:	aa1703e0 	mov	x0, x23
   8f16c:	940025e9 	bl	98910 <CUSBString::GetLanguageID()>
   8f170:	2a1403e1 	mov	w1, w20
   8f174:	2a0003e2 	mov	w2, w0
   8f178:	aa1703e0 	mov	x0, x23
   8f17c:	94002541 	bl	98680 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   8f180:	37000060 	tbnz	w0, #0, 8f18c <CUSBDevice::Initialize()+0x70c>
   8f184:	f9402660 	ldr	x0, [x19, #72]
   8f188:	17fffefb 	b	8ed74 <CUSBDevice::Initialize()+0x2f4>
   8f18c:	aa1703e0 	mov	x0, x23
   8f190:	940025dc 	bl	98900 <CUSBString::Get() const>
   8f194:	aa0003e1 	mov	x1, x0
   8f198:	aa1603e0 	mov	x0, x22
   8f19c:	9400642d 	bl	a8250 <CString::operator=(char const*)>
   8f1a0:	f9402660 	ldr	x0, [x19, #72]
   8f1a4:	17fffef4 	b	8ed74 <CUSBDevice::Initialize()+0x2f4>
   8f1a8:	f9400361 	ldr	x1, [x27]
   8f1ac:	aa1b03e0 	mov	x0, x27
   8f1b0:	f9402021 	ldr	x1, [x1, #64]
   8f1b4:	f900339b 	str	x27, [x28, #96]
   8f1b8:	d63f0020 	blr	x1
   8f1bc:	36000060 	tbz	w0, #0, 8f1c8 <CUSBDevice::Initialize()+0x748>
   8f1c0:	52800038 	mov	w24, #0x1                   	// #1
   8f1c4:	17ffff31 	b	8ee88 <CUSBDevice::Initialize()+0x408>
   8f1c8:	aa1303e0 	mov	x0, x19
   8f1cc:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f1d0:	9104e042 	add	x2, x2, #0x138
   8f1d4:	52800081 	mov	w1, #0x4                   	// #4
   8f1d8:	97fffd52 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f1dc:	f9403380 	ldr	x0, [x28, #96]
   8f1e0:	b4000080 	cbz	x0, 8f1f0 <CUSBDevice::Initialize()+0x770>
   8f1e4:	f9400001 	ldr	x1, [x0]
   8f1e8:	f9400421 	ldr	x1, [x1, #8]
   8f1ec:	d63f0020 	blr	x1
   8f1f0:	f900339f 	str	xzr, [x28, #96]
   8f1f4:	17fffef7 	b	8edd0 <CUSBDevice::Initialize()+0x350>
   8f1f8:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f1fc:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8f200:	91354021 	add	x1, x1, #0xd50
   8f204:	91396000 	add	x0, x0, #0xe58
   8f208:	52803182 	mov	w2, #0x18c                 	// #396
   8f20c:	94004b3d 	bl	a1f00 <assertion_failed>
   8f210:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f214:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f218:	91354021 	add	x1, x1, #0xd50
   8f21c:	91038000 	add	x0, x0, #0xe0
   8f220:	528031a2 	mov	w2, #0x18d                 	// #397
   8f224:	94004b37 	bl	a1f00 <assertion_failed>
   8f228:	f9402a63 	ldr	x3, [x19, #80]
   8f22c:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f230:	aa1303e0 	mov	x0, x19
   8f234:	91028042 	add	x2, x2, #0xa0
   8f238:	52800021 	mov	w1, #0x1                   	// #1
   8f23c:	39401463 	ldrb	w3, [x3, #5]
   8f240:	97fffd38 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f244:	52800014 	mov	w20, #0x0                   	// #0
   8f248:	aa1703e0 	mov	x0, x23
   8f24c:	940024f9 	bl	98630 <CUSBString::~CUSBString()>
   8f250:	aa1603e0 	mov	x0, x22
   8f254:	94006377 	bl	a8030 <CString::~CString()>
   8f258:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f25c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f260:	17fffe34 	b	8eb30 <CUSBDevice::Initialize()+0xb0>
   8f264:	aa1303e0 	mov	x0, x19
   8f268:	90000141 	adrp	x1, b7000 <_etext+0x49c8>
   8f26c:	91348021 	add	x1, x1, #0xd20
   8f270:	97fffd18 	bl	8e6d0 <CUSBDevice::ConfigurationError(char const*) const>
   8f274:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f278:	17fffe2d 	b	8eb2c <CUSBDevice::Initialize()+0xac>
   8f27c:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f280:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8f284:	91354021 	add	x1, x1, #0xd50
   8f288:	91382000 	add	x0, x0, #0xe08
   8f28c:	528033e2 	mov	w2, #0x19f                 	// #415
   8f290:	94004b1c 	bl	a1f00 <assertion_failed>
   8f294:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f298:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f29c:	91354021 	add	x1, x1, #0xd50
   8f2a0:	91010000 	add	x0, x0, #0x40
   8f2a4:	528029e2 	mov	w2, #0x14f                 	// #335
   8f2a8:	a90363f7 	stp	x23, x24, [sp, #48]
   8f2ac:	a9046bf9 	stp	x25, x26, [sp, #64]
   8f2b0:	a90573fb 	stp	x27, x28, [sp, #80]
   8f2b4:	94004b13 	bl	a1f00 <assertion_failed>
   8f2b8:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f2bc:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8f2c0:	91354021 	add	x1, x1, #0xd50
   8f2c4:	913a2000 	add	x0, x0, #0xe88
   8f2c8:	52802a42 	mov	w2, #0x152                 	// #338
   8f2cc:	a9046bf9 	stp	x25, x26, [sp, #64]
   8f2d0:	a90573fb 	stp	x27, x28, [sp, #80]
   8f2d4:	94004b0b 	bl	a1f00 <assertion_failed>
   8f2d8:	90000121 	adrp	x1, b3000 <_etext+0x9c8>
   8f2dc:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f2e0:	91354021 	add	x1, x1, #0xd50
   8f2e4:	9100a000 	add	x0, x0, #0x28
   8f2e8:	52802842 	mov	w2, #0x142                 	// #322
   8f2ec:	a90363f7 	stp	x23, x24, [sp, #48]
   8f2f0:	a9046bf9 	stp	x25, x26, [sp, #64]
   8f2f4:	a90573fb 	stp	x27, x28, [sp, #80]
   8f2f8:	94004b02 	bl	a1f00 <assertion_failed>
   8f2fc:	340000d8 	cbz	w24, 8f314 <CUSBDevice::Initialize()+0x894>
   8f300:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8f304:	a94573fb 	ldp	x27, x28, [sp, #80]
   8f308:	17ffffd0 	b	8f248 <CUSBDevice::Initialize()+0x7c8>
   8f30c:	f900339f 	str	xzr, [x28, #96]
   8f310:	17ffff68 	b	8f0b0 <CUSBDevice::Initialize()+0x630>
   8f314:	aa1303e0 	mov	x0, x19
   8f318:	52800041 	mov	w1, #0x2                   	// #2
   8f31c:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f320:	9105e042 	add	x2, x2, #0x178
   8f324:	97fffcff 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f328:	f9400660 	ldr	x0, [x19, #8]
   8f32c:	52800002 	mov	w2, #0x0                   	// #0
   8f330:	f9401a61 	ldr	x1, [x19, #48]
   8f334:	9400133f 	bl	94030 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   8f338:	36000220 	tbz	w0, #0, 8f37c <CUSBDevice::Initialize()+0x8fc>
   8f33c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8f340:	a94573fb 	ldp	x27, x28, [sp, #80]
   8f344:	17ffffc0 	b	8f244 <CUSBDevice::Initialize()+0x7c4>
   8f348:	aa1603e0 	mov	x0, x22
   8f34c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f350:	91022021 	add	x1, x1, #0x88
   8f354:	9400640b 	bl	a8380 <CString::Append(char const*)>
   8f358:	17ffff7e 	b	8f150 <CUSBDevice::Initialize()+0x6d0>
   8f35c:	aa1303e0 	mov	x0, x19
   8f360:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f364:	91056042 	add	x2, x2, #0x158
   8f368:	52800041 	mov	w1, #0x2                   	// #2
   8f36c:	97fffced 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f370:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8f374:	a94573fb 	ldp	x27, x28, [sp, #80]
   8f378:	17ffffb4 	b	8f248 <CUSBDevice::Initialize()+0x7c8>
   8f37c:	aa1303e0 	mov	x0, x19
   8f380:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f384:	91068042 	add	x2, x2, #0x1a0
   8f388:	52800041 	mov	w1, #0x2                   	// #2
   8f38c:	97fffce5 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f390:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8f394:	a94573fb 	ldp	x27, x28, [sp, #80]
   8f398:	17ffffab 	b	8f244 <CUSBDevice::Initialize()+0x7c4>
   8f39c:	00000000 	udf	#0

000000000008f3a0 <CUSBHostController::CancelDeviceTransactions(CUSBDevice*)>:
   8f3a0:	d65f03c0 	ret
	...

000000000008f3b0 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE>:
   8f3b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f3b4:	528007e2 	mov	w2, #0x3f                  	// #63
   8f3b8:	52800021 	mov	w1, #0x1                   	// #1
   8f3bc:	910003fd 	mov	x29, sp
   8f3c0:	f9000bf3 	str	x19, [sp, #16]
   8f3c4:	f00001d3 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   8f3c8:	912ee273 	add	x19, x19, #0xbb8
   8f3cc:	aa1303e0 	mov	x0, x19
   8f3d0:	94007354 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   8f3d4:	aa1303e1 	mov	x1, x19
   8f3d8:	f00001c2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   8f3dc:	91336042 	add	x2, x2, #0xcd8
   8f3e0:	f9400bf3 	ldr	x19, [sp, #16]
   8f3e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f3e8:	f00001c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   8f3ec:	f945a400 	ldr	x0, [x0, #2888]
   8f3f0:	14006974 	b	a99c0 <__cxa_atexit>
	...

000000000008f400 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>:
   8f400:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   8f404:	910003fd 	mov	x29, sp
   8f408:	a90153f3 	stp	x19, x20, [sp, #16]
   8f40c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f410:	910163b5 	add	x21, x29, #0x58
   8f414:	aa0003f6 	mov	x22, x0
   8f418:	a90363f7 	stp	x23, x24, [sp, #48]
   8f41c:	aa1503e0 	mov	x0, x21
   8f420:	aa1603e1 	mov	x1, x22
   8f424:	f90023f9 	str	x25, [sp, #64]
   8f428:	d10043ff 	sub	sp, sp, #0x10
   8f42c:	94000415 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8f430:	aa1503e0 	mov	x0, x21
   8f434:	52800421 	mov	w1, #0x21                  	// #33
   8f438:	9400049a 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   8f43c:	b4000ec0 	cbz	x0, 8f614 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x214>
   8f440:	aa0003f7 	mov	x23, x0
   8f444:	39401c00 	ldrb	w0, [x0, #7]
   8f448:	394022f3 	ldrb	w19, [x23, #8]
   8f44c:	2a132013 	orr	w19, w0, w19, lsl #8
   8f450:	34000e33 	cbz	w19, 8f614 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x214>
   8f454:	2a1303e2 	mov	w2, w19
   8f458:	d1000442 	sub	x2, x2, #0x1
   8f45c:	b2401442 	orr	x2, x2, #0x3f
   8f460:	91010042 	add	x2, x2, #0x40
   8f464:	9270bc40 	and	x0, x2, #0xffffffffffff0000
   8f468:	927cec42 	and	x2, x2, #0xfffffffffffffff0
   8f46c:	cb2063e0 	sub	x0, sp, x0
   8f470:	eb2063ff 	cmp	sp, x0
   8f474:	540000a0 	b.eq	8f488 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x88>  // b.none
   8f478:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   8f47c:	eb2063ff 	cmp	sp, x0
   8f480:	f90203ff 	str	xzr, [sp, #1024]
   8f484:	54ffffa1 	b.ne	8f478 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x78>  // b.any
   8f488:	92403c42 	and	x2, x2, #0xffff
   8f48c:	cb2263ff 	sub	sp, sp, x2
   8f490:	f110005f 	cmp	x2, #0x400
   8f494:	f90003ff 	str	xzr, [sp]
   8f498:	54000ca2 	b.cs	8f62c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x22c>  // b.hs, b.nlast
   8f49c:	aa1503e0 	mov	x0, x21
   8f4a0:	94000474 	bl	90670 <CUSBFunction::GetHost() const>
   8f4a4:	91013ff4 	add	x20, sp, #0x4f
   8f4a8:	aa0003f8 	mov	x24, x0
   8f4ac:	aa1503e0 	mov	x0, x21
   8f4b0:	94000464 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   8f4b4:	39401af9 	ldrb	w25, [x23, #6]
   8f4b8:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   8f4bc:	aa0003f7 	mov	x23, x0
   8f4c0:	aa1503e0 	mov	x0, x21
   8f4c4:	940004cf 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   8f4c8:	12001c07 	and	w7, w0, #0xff
   8f4cc:	2a1903e2 	mov	w2, w25
   8f4d0:	aa1703e1 	mov	x1, x23
   8f4d4:	aa1803e0 	mov	x0, x24
   8f4d8:	2a1303e5 	mov	w5, w19
   8f4dc:	aa1403e4 	mov	x4, x20
   8f4e0:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   8f4e4:	52800003 	mov	w3, #0x0                   	// #0
   8f4e8:	940012b2 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8f4ec:	6b13001f 	cmp	w0, w19
   8f4f0:	54000a21 	b.ne	8f634 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x234>  // b.any
   8f4f4:	d503201f 	nop
   8f4f8:	39400282 	ldrb	w2, [x20]
   8f4fc:	121e1443 	and	w3, w2, #0xfc
   8f500:	12000442 	and	w2, w2, #0x3
   8f504:	7100107f 	cmp	w3, #0x4
   8f508:	1a9f17e3 	cset	w3, eq	// eq = none
   8f50c:	7100085f 	cmp	w2, #0x2
   8f510:	540006c0 	b.eq	8f5e8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1e8>  // b.none
   8f514:	71000c5f 	cmp	w2, #0x3
   8f518:	540004a0 	b.eq	8f5ac <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1ac>  // b.none
   8f51c:	51000660 	sub	w0, w19, #0x1
   8f520:	7100045f 	cmp	w2, #0x1
   8f524:	51000a73 	sub	w19, w19, #0x2
   8f528:	54000280 	b.eq	8f578 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x178>  // b.none
   8f52c:	91000694 	add	x20, x20, #0x1
   8f530:	12003c13 	and	w19, w0, #0xffff
   8f534:	35fffe33 	cbnz	w19, 8f4f8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xf8>
   8f538:	d2802e00 	mov	x0, #0x170                 	// #368
   8f53c:	9400717d 	bl	abb30 <operator new(unsigned long)>
   8f540:	aa1603e1 	mov	x1, x22
   8f544:	aa0003f3 	mov	x19, x0
   8f548:	52800022 	mov	w2, #0x1                   	// #1
   8f54c:	94000945 	bl	91a60 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   8f550:	aa1503e0 	mov	x0, x21
   8f554:	94000327 	bl	901f0 <CUSBFunction::~CUSBFunction()>
   8f558:	910003bf 	mov	sp, x29
   8f55c:	aa1303e0 	mov	x0, x19
   8f560:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f564:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f568:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f56c:	f94023f9 	ldr	x25, [sp, #64]
   8f570:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8f574:	d65f03c0 	ret
   8f578:	39400680 	ldrb	w0, [x20, #1]
   8f57c:	12003e73 	and	w19, w19, #0xffff
   8f580:	91000a94 	add	x20, x20, #0x2
   8f584:	7100341f 	cmp	w0, #0xd
   8f588:	1a9f17e0 	cset	w0, eq	// eq = none
   8f58c:	0a000063 	and	w3, w3, w0
   8f590:	34fffd23 	cbz	w3, 8f534 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x134>
   8f594:	d2804600 	mov	x0, #0x230                 	// #560
   8f598:	94007166 	bl	abb30 <operator new(unsigned long)>
   8f59c:	aa1603e1 	mov	x1, x22
   8f5a0:	aa0003f3 	mov	x19, x0
   8f5a4:	94002d0f 	bl	9a9e0 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>
   8f5a8:	17ffffea 	b	8f550 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x150>
   8f5ac:	39400684 	ldrb	w4, [x20, #1]
   8f5b0:	51001673 	sub	w19, w19, #0x5
   8f5b4:	39400a82 	ldrb	w2, [x20, #2]
   8f5b8:	12003e73 	and	w19, w19, #0xffff
   8f5bc:	39400e81 	ldrb	w1, [x20, #3]
   8f5c0:	91001694 	add	x20, x20, #0x5
   8f5c4:	385ff280 	ldurb	w0, [x20, #-1]
   8f5c8:	aa022082 	orr	x2, x4, x2, lsl #8
   8f5cc:	aa014041 	orr	x1, x2, x1, lsl #16
   8f5d0:	aa006020 	orr	x0, x1, x0, lsl #24
   8f5d4:	7100341f 	cmp	w0, #0xd
   8f5d8:	1a9f17e0 	cset	w0, eq	// eq = none
   8f5dc:	0a000063 	and	w3, w3, w0
   8f5e0:	34fffaa3 	cbz	w3, 8f534 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x134>
   8f5e4:	17ffffec 	b	8f594 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x194>
   8f5e8:	39400681 	ldrb	w1, [x20, #1]
   8f5ec:	51000e73 	sub	w19, w19, #0x3
   8f5f0:	39400a80 	ldrb	w0, [x20, #2]
   8f5f4:	12003e73 	and	w19, w19, #0xffff
   8f5f8:	91000e94 	add	x20, x20, #0x3
   8f5fc:	2a002020 	orr	w0, w1, w0, lsl #8
   8f600:	7100341f 	cmp	w0, #0xd
   8f604:	1a9f17e0 	cset	w0, eq	// eq = none
   8f608:	0a000063 	and	w3, w3, w0
   8f60c:	34fff943 	cbz	w3, 8f534 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x134>
   8f610:	17ffffe1 	b	8f594 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x194>
   8f614:	aa1503e0 	mov	x0, x21
   8f618:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f61c:	91078021 	add	x1, x1, #0x1e0
   8f620:	d2800013 	mov	x19, #0x0                   	// #0
   8f624:	9400042b 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   8f628:	17ffffca 	b	8f550 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x150>
   8f62c:	f90203ff 	str	xzr, [sp, #1024]
   8f630:	17ffff9b 	b	8f49c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x9c>
   8f634:	aa1503e0 	mov	x0, x21
   8f638:	940003f6 	bl	90610 <CUSBFunction::GetDevice() const>
   8f63c:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f640:	9107a042 	add	x2, x2, #0x1e8
   8f644:	52800021 	mov	w1, #0x1                   	// #1
   8f648:	d2800013 	mov	x19, #0x0                   	// #0
   8f64c:	97fffc35 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f650:	17ffffc0 	b	8f550 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x150>
   8f654:	d503201f 	nop
   8f658:	d503201f 	nop
   8f65c:	d503201f 	nop

000000000008f660 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>:
   8f660:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8f664:	910003fd 	mov	x29, sp
   8f668:	a90153f3 	stp	x19, x20, [sp, #16]
   8f66c:	aa0103f3 	mov	x19, x1
   8f670:	9100c3f4 	add	x20, sp, #0x30
   8f674:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f678:	90000135 	adrp	x21, b3000 <_etext+0x9c8>
   8f67c:	913782b5 	add	x21, x21, #0xde0
   8f680:	aa0003f6 	mov	x22, x0
   8f684:	14000004 	b	8f694 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x34>
   8f688:	91001273 	add	x19, x19, #0x4
   8f68c:	aa1403e0 	mov	x0, x20
   8f690:	94006268 	bl	a8030 <CString::~CString()>
   8f694:	79400261 	ldrh	w1, [x19]
   8f698:	aa1403e0 	mov	x0, x20
   8f69c:	35000061 	cbnz	w1, 8f6a8 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x48>
   8f6a0:	79400661 	ldrh	w1, [x19, #2]
   8f6a4:	34000281 	cbz	w1, 8f6f4 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x94>
   8f6a8:	9400629e 	bl	a8120 <CString::CString()>
   8f6ac:	79400663 	ldrh	w3, [x19, #2]
   8f6b0:	aa1503e1 	mov	x1, x21
   8f6b4:	79400262 	ldrh	w2, [x19]
   8f6b8:	aa1403e0 	mov	x0, x20
   8f6bc:	940068a1 	bl	a9940 <CString::Format(char const*, ...)>
   8f6c0:	aa1403e0 	mov	x0, x20
   8f6c4:	940062db 	bl	a8230 <CString::operator char const*() const>
   8f6c8:	aa0003e1 	mov	x1, x0
   8f6cc:	aa1603e0 	mov	x0, x22
   8f6d0:	94006358 	bl	a8430 <CString::Compare(char const*) const>
   8f6d4:	35fffda0 	cbnz	w0, 8f688 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x28>
   8f6d8:	aa1403e0 	mov	x0, x20
   8f6dc:	94006255 	bl	a8030 <CString::~CString()>
   8f6e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f6e4:	52800020 	mov	w0, #0x1                   	// #1
   8f6e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f6ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f6f0:	d65f03c0 	ret
   8f6f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f6f8:	52800000 	mov	w0, #0x0                   	// #0
   8f6fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f700:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f704:	d65f03c0 	ret
   8f708:	d503201f 	nop
   8f70c:	d503201f 	nop

000000000008f710 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
   8f710:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f714:	910003fd 	mov	x29, sp
   8f718:	a90153f3 	stp	x19, x20, [sp, #16]
   8f71c:	f90013f5 	str	x21, [sp, #32]
   8f720:	b4000ae0 	cbz	x0, 8f87c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x16c>
   8f724:	aa0103f3 	mov	x19, x1
   8f728:	b4000b61 	cbz	x1, 8f894 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x184>
   8f72c:	aa0003f4 	mov	x20, x0
   8f730:	94004f24 	bl	a33c0 <CKernelOptions::Get()>
   8f734:	94004ee3 	bl	a32c0 <CKernelOptions::GetUSBIgnore() const>
   8f738:	aa0003f5 	mov	x21, x0
   8f73c:	b4000b80 	cbz	x0, 8f8ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x19c>
   8f740:	aa0003e1 	mov	x1, x0
   8f744:	aa1303e0 	mov	x0, x19
   8f748:	9400633a 	bl	a8430 <CString::Compare(char const*) const>
   8f74c:	340007c0 	cbz	w0, 8f844 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x134>
   8f750:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f754:	9109e021 	add	x1, x1, #0x278
   8f758:	aa1303e0 	mov	x0, x19
   8f75c:	94006335 	bl	a8430 <CString::Compare(char const*) const>
   8f760:	35000340 	cbnz	w0, 8f7c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xb8>
   8f764:	d2801b00 	mov	x0, #0xd8                  	// #216
   8f768:	940070f2 	bl	abb30 <operator new(unsigned long)>
   8f76c:	aa1403e1 	mov	x1, x20
   8f770:	aa0003f4 	mov	x20, x0
   8f774:	94001f23 	bl	97400 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
   8f778:	aa1403e0 	mov	x0, x20
   8f77c:	940003a5 	bl	90610 <CUSBFunction::GetDevice() const>
   8f780:	aa0003f5 	mov	x21, x0
   8f784:	aa1303e0 	mov	x0, x19
   8f788:	940062aa 	bl	a8230 <CString::operator char const*() const>
   8f78c:	aa0003e3 	mov	x3, x0
   8f790:	b0000122 	adrp	x2, b4000 <_etext+0x19c8>
   8f794:	aa1503e0 	mov	x0, x21
   8f798:	9111e042 	add	x2, x2, #0x478
   8f79c:	52800061 	mov	w1, #0x3                   	// #3
   8f7a0:	97fffbe0 	bl	8e720 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8f7a4:	f9400261 	ldr	x1, [x19]
   8f7a8:	aa1303e0 	mov	x0, x19
   8f7ac:	f9400421 	ldr	x1, [x1, #8]
   8f7b0:	d63f0020 	blr	x1
   8f7b4:	f94013f5 	ldr	x21, [sp, #32]
   8f7b8:	aa1403e0 	mov	x0, x20
   8f7bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f7c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f7c4:	d65f03c0 	ret
   8f7c8:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f7cc:	910a2021 	add	x1, x1, #0x288
   8f7d0:	aa1303e0 	mov	x0, x19
   8f7d4:	94006317 	bl	a8430 <CString::Compare(char const*) const>
   8f7d8:	34fffc60 	cbz	w0, 8f764 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x54>
   8f7dc:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f7e0:	910a6021 	add	x1, x1, #0x298
   8f7e4:	aa1303e0 	mov	x0, x19
   8f7e8:	94006312 	bl	a8430 <CString::Compare(char const*) const>
   8f7ec:	340006c0 	cbz	w0, 8f8c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b4>
   8f7f0:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f7f4:	910aa021 	add	x1, x1, #0x2a8
   8f7f8:	aa1303e0 	mov	x0, x19
   8f7fc:	9400630d 	bl	a8430 <CString::Compare(char const*) const>
   8f800:	350006e0 	cbnz	w0, 8f8dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1cc>
   8f804:	aa1403e0 	mov	x0, x20
   8f808:	94000382 	bl	90610 <CUSBFunction::GetDevice() const>
   8f80c:	52800001 	mov	w1, #0x0                   	// #0
   8f810:	97fffab8 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8f814:	aa0003f5 	mov	x21, x0
   8f818:	b4000c80 	cbz	x0, 8f9a8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x298>
   8f81c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f820:	910b2021 	add	x1, x1, #0x2c8
   8f824:	94006303 	bl	a8430 <CString::Compare(char const*) const>
   8f828:	35000ac0 	cbnz	w0, 8f980 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x270>
   8f82c:	f94002a1 	ldr	x1, [x21]
   8f830:	aa1503e0 	mov	x0, x21
   8f834:	f9400421 	ldr	x1, [x1, #8]
   8f838:	d63f0020 	blr	x1
   8f83c:	d2800014 	mov	x20, #0x0                   	// #0
   8f840:	17ffffd9 	b	8f7a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x94>
   8f844:	940050eb 	bl	a3bf0 <CLogger::Get()>
   8f848:	d2800014 	mov	x20, #0x0                   	// #0
   8f84c:	aa1503e4 	mov	x4, x21
   8f850:	52800042 	mov	w2, #0x2                   	// #2
   8f854:	b0000123 	adrp	x3, b4000 <_etext+0x19c8>
   8f858:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f85c:	91092063 	add	x3, x3, #0x248
   8f860:	9109a021 	add	x1, x1, #0x268
   8f864:	940052d7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f868:	f94013f5 	ldr	x21, [sp, #32]
   8f86c:	aa1403e0 	mov	x0, x20
   8f870:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f874:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f878:	d65f03c0 	ret
   8f87c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f880:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f884:	91084021 	add	x1, x1, #0x210
   8f888:	9108a000 	add	x0, x0, #0x228
   8f88c:	52800702 	mov	w2, #0x38                  	// #56
   8f890:	9400499c 	bl	a1f00 <assertion_failed>
   8f894:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f898:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8f89c:	91084021 	add	x1, x1, #0x210
   8f8a0:	91382000 	add	x0, x0, #0xe08
   8f8a4:	52800722 	mov	w2, #0x39                  	// #57
   8f8a8:	94004996 	bl	a1f00 <assertion_failed>
   8f8ac:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f8b0:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f8b4:	91084021 	add	x1, x1, #0x210
   8f8b8:	9108e000 	add	x0, x0, #0x238
   8f8bc:	52800782 	mov	w2, #0x3c                  	// #60
   8f8c0:	94004990 	bl	a1f00 <assertion_failed>
   8f8c4:	d2800b00 	mov	x0, #0x58                  	// #88
   8f8c8:	9400709a 	bl	abb30 <operator new(unsigned long)>
   8f8cc:	aa1403e1 	mov	x1, x20
   8f8d0:	aa0003f4 	mov	x20, x0
   8f8d4:	9400146f 	bl	94a90 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
   8f8d8:	17ffffa8 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8f8dc:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f8e0:	910b6021 	add	x1, x1, #0x2d8
   8f8e4:	aa1303e0 	mov	x0, x19
   8f8e8:	940062d2 	bl	a8430 <CString::Compare(char const*) const>
   8f8ec:	350000e0 	cbnz	w0, 8f908 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f8>
   8f8f0:	d2801100 	mov	x0, #0x88                  	// #136
   8f8f4:	9400708f 	bl	abb30 <operator new(unsigned long)>
   8f8f8:	aa1403e1 	mov	x1, x20
   8f8fc:	aa0003f4 	mov	x20, x0
   8f900:	94001a2c 	bl	961b0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
   8f904:	17ffff9d 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8f908:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f90c:	910ba021 	add	x1, x1, #0x2e8
   8f910:	aa1303e0 	mov	x0, x19
   8f914:	940062c7 	bl	a8430 <CString::Compare(char const*) const>
   8f918:	340000c0 	cbz	w0, 8f930 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x220>
   8f91c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f920:	910be021 	add	x1, x1, #0x2f8
   8f924:	aa1303e0 	mov	x0, x19
   8f928:	940062c2 	bl	a8430 <CString::Compare(char const*) const>
   8f92c:	350004a0 	cbnz	w0, 8f9c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b0>
   8f930:	aa1403e0 	mov	x0, x20
   8f934:	94000337 	bl	90610 <CUSBFunction::GetDevice() const>
   8f938:	52800001 	mov	w1, #0x0                   	// #0
   8f93c:	97fffa6d 	bl	8e2f0 <CUSBDevice::GetName(TDeviceNameSelector) const>
   8f940:	aa0003f5 	mov	x21, x0
   8f944:	b40005e0 	cbz	x0, 8fa00 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2f0>
   8f948:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f94c:	910ca021 	add	x1, x1, #0x328
   8f950:	940062b8 	bl	a8430 <CString::Compare(char const*) const>
   8f954:	34fff6c0 	cbz	w0, 8f82c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x11c>
   8f958:	aa1403e0 	mov	x0, x20
   8f95c:	97fffea9 	bl	8f400 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>
   8f960:	f94002a1 	ldr	x1, [x21]
   8f964:	aa0003f4 	mov	x20, x0
   8f968:	aa1503e0 	mov	x0, x21
   8f96c:	f9400421 	ldr	x1, [x1, #8]
   8f970:	d63f0020 	blr	x1
   8f974:	b5fff034 	cbnz	x20, 8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8f978:	d2800014 	mov	x20, #0x0                   	// #0
   8f97c:	17ffff8a 	b	8f7a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x94>
   8f980:	d280b300 	mov	x0, #0x598                 	// #1432
   8f984:	9400706b 	bl	abb30 <operator new(unsigned long)>
   8f988:	aa1403e1 	mov	x1, x20
   8f98c:	aa0003f4 	mov	x20, x0
   8f990:	940012fc 	bl	94580 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
   8f994:	f94002a1 	ldr	x1, [x21]
   8f998:	aa1503e0 	mov	x0, x21
   8f99c:	f9400421 	ldr	x1, [x1, #8]
   8f9a0:	d63f0020 	blr	x1
   8f9a4:	17ffff75 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8f9a8:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f9ac:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8f9b0:	91084021 	add	x1, x1, #0x210
   8f9b4:	910ae000 	add	x0, x0, #0x2b8
   8f9b8:	52800a62 	mov	w2, #0x53                  	// #83
   8f9bc:	94004951 	bl	a1f00 <assertion_failed>
   8f9c0:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f9c4:	910c2021 	add	x1, x1, #0x308
   8f9c8:	aa1303e0 	mov	x0, x19
   8f9cc:	94006299 	bl	a8430 <CString::Compare(char const*) const>
   8f9d0:	34fffb00 	cbz	w0, 8f930 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x220>
   8f9d4:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8f9d8:	910c6021 	add	x1, x1, #0x318
   8f9dc:	aa1303e0 	mov	x0, x19
   8f9e0:	94006294 	bl	a8430 <CString::Compare(char const*) const>
   8f9e4:	350001a0 	cbnz	w0, 8fa18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x308>
   8f9e8:	d2803800 	mov	x0, #0x1c0                 	// #448
   8f9ec:	94007051 	bl	abb30 <operator new(unsigned long)>
   8f9f0:	aa1403e1 	mov	x1, x20
   8f9f4:	aa0003f4 	mov	x20, x0
   8f9f8:	9400043a 	bl	90ae0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
   8f9fc:	17ffff5f 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fa00:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa04:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8fa08:	91084021 	add	x1, x1, #0x210
   8fa0c:	910ae000 	add	x0, x0, #0x2b8
   8fa10:	52800ca2 	mov	w2, #0x65                  	// #101
   8fa14:	9400493b 	bl	a1f00 <assertion_failed>
   8fa18:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa1c:	910ce021 	add	x1, x1, #0x338
   8fa20:	aa1303e0 	mov	x0, x19
   8fa24:	94006283 	bl	a8430 <CString::Compare(char const*) const>
   8fa28:	340000c0 	cbz	w0, 8fa40 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x330>
   8fa2c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa30:	910d2021 	add	x1, x1, #0x348
   8fa34:	aa1303e0 	mov	x0, x19
   8fa38:	9400627e 	bl	a8430 <CString::Compare(char const*) const>
   8fa3c:	350000e0 	cbnz	w0, 8fa58 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x348>
   8fa40:	d2803000 	mov	x0, #0x180                 	// #384
   8fa44:	9400703b 	bl	abb30 <operator new(unsigned long)>
   8fa48:	aa1403e1 	mov	x1, x20
   8fa4c:	aa0003f4 	mov	x20, x0
   8fa50:	940006b0 	bl	91510 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
   8fa54:	17ffff49 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fa58:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa5c:	910d6021 	add	x1, x1, #0x358
   8fa60:	aa1303e0 	mov	x0, x19
   8fa64:	94006273 	bl	a8430 <CString::Compare(char const*) const>
   8fa68:	340000c0 	cbz	w0, 8fa80 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x370>
   8fa6c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa70:	910da021 	add	x1, x1, #0x368
   8fa74:	aa1303e0 	mov	x0, x19
   8fa78:	9400626e 	bl	a8430 <CString::Compare(char const*) const>
   8fa7c:	350000e0 	cbnz	w0, 8fa98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x388>
   8fa80:	d2802b00 	mov	x0, #0x158                 	// #344
   8fa84:	9400702b 	bl	abb30 <operator new(unsigned long)>
   8fa88:	aa1403e1 	mov	x1, x20
   8fa8c:	aa0003f4 	mov	x20, x0
   8fa90:	94000cbc 	bl	92d80 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
   8fa94:	17ffff39 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fa98:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fa9c:	910de021 	add	x1, x1, #0x378
   8faa0:	aa1303e0 	mov	x0, x19
   8faa4:	94006263 	bl	a8430 <CString::Compare(char const*) const>
   8faa8:	340000c0 	cbz	w0, 8fac0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   8faac:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fab0:	910e2021 	add	x1, x1, #0x388
   8fab4:	aa1303e0 	mov	x0, x19
   8fab8:	9400625e 	bl	a8430 <CString::Compare(char const*) const>
   8fabc:	350000e0 	cbnz	w0, 8fad8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c8>
   8fac0:	d2802c00 	mov	x0, #0x160                 	// #352
   8fac4:	9400701b 	bl	abb30 <operator new(unsigned long)>
   8fac8:	aa1403e1 	mov	x1, x20
   8facc:	aa0003f4 	mov	x20, x0
   8fad0:	94000df4 	bl	932a0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
   8fad4:	17ffff29 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fad8:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fadc:	910e6021 	add	x1, x1, #0x398
   8fae0:	aa1303e0 	mov	x0, x19
   8fae4:	94006253 	bl	a8430 <CString::Compare(char const*) const>
   8fae8:	34fffec0 	cbz	w0, 8fac0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   8faec:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8faf0:	910ea021 	add	x1, x1, #0x3a8
   8faf4:	aa1303e0 	mov	x0, x19
   8faf8:	9400624e 	bl	a8430 <CString::Compare(char const*) const>
   8fafc:	34fffe20 	cbz	w0, 8fac0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   8fb00:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fb04:	910ee021 	add	x1, x1, #0x3b8
   8fb08:	aa1303e0 	mov	x0, x19
   8fb0c:	94006249 	bl	a8430 <CString::Compare(char const*) const>
   8fb10:	350000e0 	cbnz	w0, 8fb2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
   8fb14:	d2802c00 	mov	x0, #0x160                 	// #352
   8fb18:	94007006 	bl	abb30 <operator new(unsigned long)>
   8fb1c:	aa1403e1 	mov	x1, x20
   8fb20:	aa0003f4 	mov	x20, x0
   8fb24:	94000af3 	bl	926f0 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
   8fb28:	17ffff14 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fb2c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fb30:	910f2021 	add	x1, x1, #0x3c8
   8fb34:	aa1303e0 	mov	x0, x19
   8fb38:	9400623e 	bl	a8430 <CString::Compare(char const*) const>
   8fb3c:	340000c0 	cbz	w0, 8fb54 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
   8fb40:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fb44:	910f6021 	add	x1, x1, #0x3d8
   8fb48:	aa1303e0 	mov	x0, x19
   8fb4c:	94006239 	bl	a8430 <CString::Compare(char const*) const>
   8fb50:	350000e0 	cbnz	w0, 8fb6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
   8fb54:	d2800900 	mov	x0, #0x48                  	// #72
   8fb58:	94006ff6 	bl	abb30 <operator new(unsigned long)>
   8fb5c:	aa1403e1 	mov	x1, x20
   8fb60:	aa0003f4 	mov	x20, x0
   8fb64:	94001bd7 	bl	96ac0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
   8fb68:	17ffff04 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fb6c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fb70:	910fa021 	add	x1, x1, #0x3e8
   8fb74:	aa1303e0 	mov	x0, x19
   8fb78:	9400622e 	bl	a8430 <CString::Compare(char const*) const>
   8fb7c:	350000e0 	cbnz	w0, 8fb98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x488>
   8fb80:	d2800900 	mov	x0, #0x48                  	// #72
   8fb84:	94006feb 	bl	abb30 <operator new(unsigned long)>
   8fb88:	aa1403e1 	mov	x1, x20
   8fb8c:	aa0003f4 	mov	x20, x0
   8fb90:	940033b0 	bl	9ca50 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
   8fb94:	17fffef9 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fb98:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fb9c:	910fe021 	add	x1, x1, #0x3f8
   8fba0:	aa1303e0 	mov	x0, x19
   8fba4:	94006223 	bl	a8430 <CString::Compare(char const*) const>
   8fba8:	350000e0 	cbnz	w0, 8fbc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4b4>
   8fbac:	d2800900 	mov	x0, #0x48                  	// #72
   8fbb0:	94006fe0 	bl	abb30 <operator new(unsigned long)>
   8fbb4:	aa1403e1 	mov	x1, x20
   8fbb8:	aa0003f4 	mov	x20, x0
   8fbbc:	94002fa9 	bl	9ba60 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
   8fbc0:	17fffeee 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fbc4:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fbc8:	91102021 	add	x1, x1, #0x408
   8fbcc:	aa1303e0 	mov	x0, x19
   8fbd0:	94006218 	bl	a8430 <CString::Compare(char const*) const>
   8fbd4:	340000c0 	cbz	w0, 8fbec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4dc>
   8fbd8:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fbdc:	91106021 	add	x1, x1, #0x418
   8fbe0:	aa1303e0 	mov	x0, x19
   8fbe4:	94006213 	bl	a8430 <CString::Compare(char const*) const>
   8fbe8:	350000e0 	cbnz	w0, 8fc04 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4f4>
   8fbec:	d2800b00 	mov	x0, #0x58                  	// #88
   8fbf0:	94006fd0 	bl	abb30 <operator new(unsigned long)>
   8fbf4:	aa1403e1 	mov	x1, x20
   8fbf8:	aa0003f4 	mov	x20, x0
   8fbfc:	9400378d 	bl	9da30 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
   8fc00:	17fffede 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fc04:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fc08:	9110a021 	add	x1, x1, #0x428
   8fc0c:	aa1303e0 	mov	x0, x19
   8fc10:	94006208 	bl	a8430 <CString::Compare(char const*) const>
   8fc14:	340000c0 	cbz	w0, 8fc2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x51c>
   8fc18:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fc1c:	9110e021 	add	x1, x1, #0x438
   8fc20:	aa1303e0 	mov	x0, x19
   8fc24:	94006203 	bl	a8430 <CString::Compare(char const*) const>
   8fc28:	350000e0 	cbnz	w0, 8fc44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x534>
   8fc2c:	d2800b00 	mov	x0, #0x58                  	// #88
   8fc30:	94006fc0 	bl	abb30 <operator new(unsigned long)>
   8fc34:	aa1403e1 	mov	x1, x20
   8fc38:	aa0003f4 	mov	x20, x0
   8fc3c:	94001795 	bl	95a90 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>
   8fc40:	17fffece 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fc44:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fc48:	91112021 	add	x1, x1, #0x448
   8fc4c:	aa1303e0 	mov	x0, x19
   8fc50:	940061f8 	bl	a8430 <CString::Compare(char const*) const>
   8fc54:	350000e0 	cbnz	w0, 8fc70 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x560>
   8fc58:	d2800900 	mov	x0, #0x48                  	// #72
   8fc5c:	94006fb5 	bl	abb30 <operator new(unsigned long)>
   8fc60:	aa1403e1 	mov	x1, x20
   8fc64:	aa0003f4 	mov	x20, x0
   8fc68:	9400399a 	bl	9e2d0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
   8fc6c:	17fffec3 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fc70:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fc74:	91116021 	add	x1, x1, #0x458
   8fc78:	aa1303e0 	mov	x0, x19
   8fc7c:	940061ed 	bl	a8430 <CString::Compare(char const*) const>
   8fc80:	340000c0 	cbz	w0, 8fc98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x588>
   8fc84:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fc88:	9111a021 	add	x1, x1, #0x468
   8fc8c:	aa1303e0 	mov	x0, x19
   8fc90:	940061e8 	bl	a8430 <CString::Compare(char const*) const>
   8fc94:	350000e0 	cbnz	w0, 8fcb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5a0>
   8fc98:	d2800f00 	mov	x0, #0x78                  	// #120
   8fc9c:	94006fa5 	bl	abb30 <operator new(unsigned long)>
   8fca0:	aa1403e1 	mov	x1, x20
   8fca4:	aa0003f4 	mov	x20, x0
   8fca8:	94002aa6 	bl	9a740 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>
   8fcac:	17fffeb3 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fcb0:	940023ec 	bl	98c60 <CUSBSerialCH341Device::GetDeviceIDTable()>
   8fcb4:	aa0003e1 	mov	x1, x0
   8fcb8:	aa1303e0 	mov	x0, x19
   8fcbc:	97fffe69 	bl	8f660 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8fcc0:	360000e0 	tbz	w0, #0, 8fcdc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5cc>
   8fcc4:	d2800f00 	mov	x0, #0x78                  	// #120
   8fcc8:	94006f9a 	bl	abb30 <operator new(unsigned long)>
   8fccc:	aa1403e1 	mov	x1, x20
   8fcd0:	aa0003f4 	mov	x20, x0
   8fcd4:	940023d7 	bl	98c30 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>
   8fcd8:	17fffea8 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fcdc:	94002559 	bl	99240 <CUSBSerialCP210xDevice::GetDeviceIDTable()>
   8fce0:	aa0003e1 	mov	x1, x0
   8fce4:	aa1303e0 	mov	x0, x19
   8fce8:	97fffe5e 	bl	8f660 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8fcec:	360000e0 	tbz	w0, #0, 8fd08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5f8>
   8fcf0:	d2801000 	mov	x0, #0x80                  	// #128
   8fcf4:	94006f8f 	bl	abb30 <operator new(unsigned long)>
   8fcf8:	aa1403e1 	mov	x1, x20
   8fcfc:	aa0003f4 	mov	x20, x0
   8fd00:	94002540 	bl	99200 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>
   8fd04:	17fffe9d 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fd08:	940026ea 	bl	998b0 <CUSBSerialPL2303Device::GetDeviceIDTable()>
   8fd0c:	aa0003e1 	mov	x1, x0
   8fd10:	aa1303e0 	mov	x0, x19
   8fd14:	97fffe53 	bl	8f660 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8fd18:	360000e0 	tbz	w0, #0, 8fd34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x624>
   8fd1c:	d2800f00 	mov	x0, #0x78                  	// #120
   8fd20:	94006f84 	bl	abb30 <operator new(unsigned long)>
   8fd24:	aa1403e1 	mov	x1, x20
   8fd28:	aa0003f4 	mov	x20, x0
   8fd2c:	940026d5 	bl	99880 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>
   8fd30:	17fffe92 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8fd34:	9400294f 	bl	9a270 <CUSBSerialFT231XDevice::GetDeviceIDTable()>
   8fd38:	aa0003e1 	mov	x1, x0
   8fd3c:	aa1303e0 	mov	x0, x19
   8fd40:	97fffe48 	bl	8f660 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8fd44:	3607d7c0 	tbz	w0, #0, 8f83c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x12c>
   8fd48:	d2800f00 	mov	x0, #0x78                  	// #120
   8fd4c:	94006f79 	bl	abb30 <operator new(unsigned long)>
   8fd50:	aa1403e1 	mov	x1, x20
   8fd54:	aa0003f4 	mov	x20, x0
   8fd58:	9400293a 	bl	9a240 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>
   8fd5c:	17fffe87 	b	8f778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>

000000000008fd60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
   8fd60:	52800103 	mov	w3, #0x8                   	// #8
   8fd64:	d2800022 	mov	x2, #0x1                   	// #1
   8fd68:	f9000001 	str	x1, [x0]
   8fd6c:	3900201f 	strb	wzr, [x0, #8]
   8fd70:	b9000c1f 	str	wzr, [x0, #12]
   8fd74:	3900401f 	strb	wzr, [x0, #16]
   8fd78:	b9001403 	str	w3, [x0, #20]
   8fd7c:	f9000c02 	str	x2, [x0, #24]
   8fd80:	b4000041 	cbz	x1, 8fd88 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x28>
   8fd84:	d65f03c0 	ret
   8fd88:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8fd8c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8fd90:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8fd94:	910003fd 	mov	x29, sp
   8fd98:	91126021 	add	x1, x1, #0x498
   8fd9c:	912b8000 	add	x0, x0, #0xae0
   8fda0:	52800482 	mov	w2, #0x24                  	// #36
   8fda4:	94004857 	bl	a1f00 <assertion_failed>
   8fda8:	d503201f 	nop
   8fdac:	d503201f 	nop

000000000008fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
   8fdb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8fdb4:	0f000420 	movi	v0.2s, #0x1
   8fdb8:	910003fd 	mov	x29, sp
   8fdbc:	a90153f3 	stp	x19, x20, [sp, #16]
   8fdc0:	aa0003f3 	mov	x19, x0
   8fdc4:	f9000001 	str	x1, [x0]
   8fdc8:	fd000c00 	str	d0, [x0, #24]
   8fdcc:	b40009e1 	cbz	x1, 8ff08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x158>
   8fdd0:	b4000aa2 	cbz	x2, 8ff24 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
   8fdd4:	aa0103e0 	mov	x0, x1
   8fdd8:	39400041 	ldrb	w1, [x2]
   8fddc:	7100183f 	cmp	w1, #0x6
   8fde0:	54000b09 	b.ls	8ff40 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>  // b.plast
   8fde4:	39400441 	ldrb	w1, [x2, #1]
   8fde8:	7100143f 	cmp	w1, #0x5
   8fdec:	54000b81 	b.ne	8ff5c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1ac>  // b.any
   8fdf0:	39400c41 	ldrb	w1, [x2, #3]
   8fdf4:	12000421 	and	w1, w1, #0x3
   8fdf8:	7100083f 	cmp	w1, #0x2
   8fdfc:	54000520 	b.eq	8fea0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xf0>  // b.none
   8fe00:	f90013f5 	str	x21, [sp, #32]
   8fe04:	71000c3f 	cmp	w1, #0x3
   8fe08:	54000740 	b.eq	8fef0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>  // b.none
   8fe0c:	7100043f 	cmp	w1, #0x1
   8fe10:	52800063 	mov	w3, #0x3                   	// #3
   8fe14:	54000d41 	b.ne	8ffbc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x20c>  // b.any
   8fe18:	39400841 	ldrb	w1, [x2, #2]
   8fe1c:	b9000e63 	str	w3, [x19, #12]
   8fe20:	12000c23 	and	w3, w1, #0xf
   8fe24:	39002263 	strb	w3, [x19, #8]
   8fe28:	93471c23 	sbfx	x3, x1, #7, #1
   8fe2c:	39401841 	ldrb	w1, [x2, #6]
   8fe30:	12000063 	and	w3, w3, #0x1
   8fe34:	39004263 	strb	w3, [x19, #16]
   8fe38:	7100003f 	cmp	w1, #0x0
   8fe3c:	1a9f1434 	csinc	w20, w1, wzr, ne	// ne = any
   8fe40:	39401043 	ldrb	w3, [x2, #4]
   8fe44:	39401441 	ldrb	w1, [x2, #5]
   8fe48:	12001e95 	and	w21, w20, #0xff
   8fe4c:	aa012061 	orr	x1, x3, x1, lsl #8
   8fe50:	12002821 	and	w1, w1, #0x7ff
   8fe54:	b9001661 	str	w1, [x19, #20]
   8fe58:	97fff9ce 	bl	8e590 <CUSBDevice::GetSpeed() const>
   8fe5c:	7100041f 	cmp	w0, #0x1
   8fe60:	540004cd 	b.le	8fef8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x148>
   8fe64:	710042bf 	cmp	w21, #0x10
   8fe68:	52800200 	mov	w0, #0x10                  	// #16
   8fe6c:	1a809280 	csel	w0, w20, w0, ls	// ls = plast
   8fe70:	52800021 	mov	w1, #0x1                   	// #1
   8fe74:	12001c00 	and	w0, w0, #0xff
   8fe78:	51000400 	sub	w0, w0, #0x1
   8fe7c:	1ac02020 	lsl	w0, w1, w0
   8fe80:	71001c1f 	cmp	w0, #0x7
   8fe84:	53037c00 	lsr	w0, w0, #3
   8fe88:	b9001a60 	str	w0, [x19, #24]
   8fe8c:	f9400260 	ldr	x0, [x19]
   8fe90:	5400004c 	b.gt	8fe98 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe8>
   8fe94:	b9001a61 	str	w1, [x19, #24]
   8fe98:	f94013f5 	ldr	x21, [sp, #32]
   8fe9c:	1400000d 	b	8fed0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
   8fea0:	39400841 	ldrb	w1, [x2, #2]
   8fea4:	bd000e60 	str	s0, [x19, #12]
   8fea8:	12000c23 	and	w3, w1, #0xf
   8feac:	39002263 	strb	w3, [x19, #8]
   8feb0:	93471c21 	sbfx	x1, x1, #7, #1
   8feb4:	12000021 	and	w1, w1, #0x1
   8feb8:	39004261 	strb	w1, [x19, #16]
   8febc:	39401043 	ldrb	w3, [x2, #4]
   8fec0:	39401441 	ldrb	w1, [x2, #5]
   8fec4:	aa012061 	orr	x1, x3, x1, lsl #8
   8fec8:	12002821 	and	w1, w1, #0x7ff
   8fecc:	b9001661 	str	w1, [x19, #20]
   8fed0:	97fff9b0 	bl	8e590 <CUSBDevice::GetSpeed() const>
   8fed4:	35000080 	cbnz	w0, 8fee4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
   8fed8:	b9400e60 	ldr	w0, [x19, #12]
   8fedc:	7100041f 	cmp	w0, #0x1
   8fee0:	540004c0 	b.eq	8ff78 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1c8>  // b.none
   8fee4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fee8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8feec:	d65f03c0 	ret
   8fef0:	52800043 	mov	w3, #0x2                   	// #2
   8fef4:	17ffffc9 	b	8fe18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x68>
   8fef8:	f9400260 	ldr	x0, [x19]
   8fefc:	b9001a75 	str	w21, [x19, #24]
   8ff00:	f94013f5 	ldr	x21, [sp, #32]
   8ff04:	17fffff3 	b	8fed0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
   8ff08:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ff0c:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ff10:	91126021 	add	x1, x1, #0x498
   8ff14:	912b8000 	add	x0, x0, #0xae0
   8ff18:	52800662 	mov	w2, #0x33                  	// #51
   8ff1c:	f90013f5 	str	x21, [sp, #32]
   8ff20:	940047f8 	bl	a1f00 <assertion_failed>
   8ff24:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ff28:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8ff2c:	91126021 	add	x1, x1, #0x498
   8ff30:	9112a000 	add	x0, x0, #0x4a8
   8ff34:	528006a2 	mov	w2, #0x35                  	// #53
   8ff38:	f90013f5 	str	x21, [sp, #32]
   8ff3c:	940047f1 	bl	a1f00 <assertion_failed>
   8ff40:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ff44:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8ff48:	91126021 	add	x1, x1, #0x498
   8ff4c:	9112e000 	add	x0, x0, #0x4b8
   8ff50:	528006c2 	mov	w2, #0x36                  	// #54
   8ff54:	f90013f5 	str	x21, [sp, #32]
   8ff58:	940047ea 	bl	a1f00 <assertion_failed>
   8ff5c:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ff60:	b0000120 	adrp	x0, b4000 <_etext+0x19c8>
   8ff64:	91126021 	add	x1, x1, #0x498
   8ff68:	91136000 	add	x0, x0, #0x4d8
   8ff6c:	528006e2 	mov	w2, #0x37                  	// #55
   8ff70:	f90013f5 	str	x21, [sp, #32]
   8ff74:	940047e3 	bl	a1f00 <assertion_failed>
   8ff78:	94004f1e 	bl	a3bf0 <CLogger::Get()>
   8ff7c:	b0000123 	adrp	x3, b4000 <_etext+0x19c8>
   8ff80:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ff84:	91142063 	add	x3, x3, #0x508
   8ff88:	9114c021 	add	x1, x1, #0x530
   8ff8c:	52800042 	mov	w2, #0x2                   	// #2
   8ff90:	9400510c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ff94:	b9401660 	ldr	w0, [x19, #20]
   8ff98:	52800041 	mov	w1, #0x2                   	// #2
   8ff9c:	b9000e61 	str	w1, [x19, #12]
   8ffa0:	7100201f 	cmp	w0, #0x8
   8ffa4:	54000069 	b.ls	8ffb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x200>  // b.plast
   8ffa8:	52800100 	mov	w0, #0x8                   	// #8
   8ffac:	b9001660 	str	w0, [x19, #20]
   8ffb0:	52800020 	mov	w0, #0x1                   	// #1
   8ffb4:	b9001a60 	str	w0, [x19, #24]
   8ffb8:	17ffffcb 	b	8fee4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
   8ffbc:	b0000121 	adrp	x1, b4000 <_etext+0x19c8>
   8ffc0:	90000120 	adrp	x0, b3000 <_etext+0x9c8>
   8ffc4:	91126021 	add	x1, x1, #0x498
   8ffc8:	9135c000 	add	x0, x0, #0xd70
   8ffcc:	52800902 	mov	w2, #0x48                  	// #72
   8ffd0:	940047cc 	bl	a1f00 <assertion_failed>
   8ffd4:	d503201f 	nop
   8ffd8:	d503201f 	nop
   8ffdc:	d503201f 	nop

000000000008ffe0 <CUSBEndpoint::~CUSBEndpoint()>:
   8ffe0:	d65f03c0 	ret
   8ffe4:	d503201f 	nop
   8ffe8:	d503201f 	nop
   8ffec:	d503201f 	nop

000000000008fff0 <CUSBEndpoint::GetDevice() const>:
   8fff0:	f9400000 	ldr	x0, [x0]
   8fff4:	b4000040 	cbz	x0, 8fffc <CUSBEndpoint::GetDevice() const+0xc>
   8fff8:	d65f03c0 	ret
   8fffc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90000:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90004:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90008:	910003fd 	mov	x29, sp
   9000c:	91126021 	add	x1, x1, #0x498
   90010:	912b8000 	add	x0, x0, #0xae0
   90014:	52801462 	mov	w2, #0xa3                  	// #163
   90018:	940047ba 	bl	a1f00 <assertion_failed>
   9001c:	d503201f 	nop

0000000000090020 <CUSBEndpoint::GetNumber() const>:
   90020:	39402000 	ldrb	w0, [x0, #8]
   90024:	d65f03c0 	ret
   90028:	d503201f 	nop
   9002c:	d503201f 	nop

0000000000090030 <CUSBEndpoint::GetType() const>:
   90030:	b9400c00 	ldr	w0, [x0, #12]
   90034:	d65f03c0 	ret
   90038:	d503201f 	nop
   9003c:	d503201f 	nop

0000000000090040 <CUSBEndpoint::IsDirectionIn() const>:
   90040:	39404000 	ldrb	w0, [x0, #16]
   90044:	d65f03c0 	ret
   90048:	d503201f 	nop
   9004c:	d503201f 	nop

0000000000090050 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   90050:	aa0003e2 	mov	x2, x0
   90054:	52800020 	mov	w0, #0x1                   	// #1
   90058:	b9001441 	str	w1, [x2, #20]
   9005c:	d65f03c0 	ret

0000000000090060 <CUSBEndpoint::GetMaxPacketSize() const>:
   90060:	b9401400 	ldr	w0, [x0, #20]
   90064:	d65f03c0 	ret
   90068:	d503201f 	nop
   9006c:	d503201f 	nop

0000000000090070 <CUSBEndpoint::GetInterval() const>:
   90070:	b9400c01 	ldr	w1, [x0, #12]
   90074:	51000821 	sub	w1, w1, #0x2
   90078:	7100043f 	cmp	w1, #0x1
   9007c:	54000068 	b.hi	90088 <CUSBEndpoint::GetInterval() const+0x18>  // b.pmore
   90080:	b9401800 	ldr	w0, [x0, #24]
   90084:	d65f03c0 	ret
   90088:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9008c:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90090:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90094:	910003fd 	mov	x29, sp
   90098:	91126021 	add	x1, x1, #0x498
   9009c:	9114e000 	add	x0, x0, #0x538
   900a0:	52801962 	mov	w2, #0xcb                  	// #203
   900a4:	94004797 	bl	a1f00 <assertion_failed>
   900a8:	d503201f 	nop
   900ac:	d503201f 	nop

00000000000900b0 <CUSBEndpoint::GetNextPID(bool)>:
   900b0:	360000a1 	tbz	w1, #0, 900c4 <CUSBEndpoint::GetNextPID(bool)+0x14>
   900b4:	b9400c01 	ldr	w1, [x0, #12]
   900b8:	52800040 	mov	w0, #0x2                   	// #2
   900bc:	35000081 	cbnz	w1, 900cc <CUSBEndpoint::GetNextPID(bool)+0x1c>
   900c0:	d65f03c0 	ret
   900c4:	b9401c00 	ldr	w0, [x0, #28]
   900c8:	d65f03c0 	ret
   900cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   900d0:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   900d4:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   900d8:	910003fd 	mov	x29, sp
   900dc:	91126021 	add	x1, x1, #0x498
   900e0:	91160000 	add	x0, x0, #0x580
   900e4:	52801aa2 	mov	w2, #0xd5                  	// #213
   900e8:	94004786 	bl	a1f00 <assertion_failed>
   900ec:	d503201f 	nop

00000000000900f0 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
   900f0:	b9400c03 	ldr	w3, [x0, #12]
   900f4:	71000c7f 	cmp	w3, #0x3
   900f8:	54000260 	b.eq	90144 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x54>  // b.none
   900fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90100:	12001c42 	and	w2, w2, #0xff
   90104:	910003fd 	mov	x29, sp
   90108:	360000a2 	tbz	w2, #0, 9011c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x2c>
   9010c:	350002a3 	cbnz	w3, 90160 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x70>
   90110:	b9001c1f 	str	wzr, [x0, #28]
   90114:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90118:	d65f03c0 	ret
   9011c:	b9401c02 	ldr	w2, [x0, #28]
   90120:	7100045f 	cmp	w2, #0x1
   90124:	540001a0 	b.eq	90158 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x68>  // b.none
   90128:	7100085f 	cmp	w2, #0x2
   9012c:	540000e0 	b.eq	90148 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>  // b.none
   90130:	35000242 	cbnz	w2, 90178 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x88>
   90134:	52800041 	mov	w1, #0x2                   	// #2
   90138:	b9001c01 	str	w1, [x0, #28]
   9013c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90140:	d65f03c0 	ret
   90144:	d65f03c0 	ret
   90148:	3607fe61 	tbz	w1, #0, 90114 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x24>
   9014c:	52800021 	mov	w1, #0x1                   	// #1
   90150:	b9001c01 	str	w1, [x0, #28]
   90154:	17fffff0 	b	90114 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x24>
   90158:	3607fde1 	tbz	w1, #0, 90114 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x24>
   9015c:	17fffff6 	b	90134 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x44>
   90160:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90164:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90168:	91126021 	add	x1, x1, #0x498
   9016c:	91160000 	add	x0, x0, #0x580
   90170:	52802042 	mov	w2, #0x102                 	// #258
   90174:	94004763 	bl	a1f00 <assertion_failed>
   90178:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   9017c:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90180:	91126021 	add	x1, x1, #0x498
   90184:	9135c000 	add	x0, x0, #0xd70
   90188:	52801f82 	mov	w2, #0xfc                  	// #252
   9018c:	9400475d 	bl	a1f00 <assertion_failed>

0000000000090190 <CUSBEndpoint::ResetPID()>:
   90190:	b9400c01 	ldr	w1, [x0, #12]
   90194:	7100043f 	cmp	w1, #0x1
   90198:	54000068 	b.hi	901a4 <CUSBEndpoint::ResetPID()+0x14>  // b.pmore
   9019c:	b9001c01 	str	w1, [x0, #28]
   901a0:	d65f03c0 	ret
   901a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   901a8:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   901ac:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   901b0:	910003fd 	mov	x29, sp
   901b4:	91126021 	add	x1, x1, #0x498
   901b8:	91168000 	add	x0, x0, #0x5a0
   901bc:	528021a2 	mov	w2, #0x10d                 	// #269
   901c0:	94004750 	bl	a1f00 <assertion_failed>
	...

00000000000901d0 <CUSBFunction::Initialize()>:
   901d0:	52800020 	mov	w0, #0x1                   	// #1
   901d4:	d65f03c0 	ret
   901d8:	d503201f 	nop
   901dc:	d503201f 	nop

00000000000901e0 <CUSBFunction::ReScanDevices()>:
   901e0:	52800000 	mov	w0, #0x0                   	// #0
   901e4:	d65f03c0 	ret
   901e8:	d503201f 	nop
   901ec:	d503201f 	nop

00000000000901f0 <CUSBFunction::~CUSBFunction()>:
   901f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   901f4:	b00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   901f8:	91120021 	add	x1, x1, #0x480
   901fc:	910003fd 	mov	x29, sp
   90200:	a90153f3 	stp	x19, x20, [sp, #16]
   90204:	aa0003f3 	mov	x19, x0
   90208:	f9400c14 	ldr	x20, [x0, #24]
   9020c:	f9000001 	str	x1, [x0]
   90210:	f900101f 	str	xzr, [x0, #32]
   90214:	b40000d4 	cbz	x20, 9022c <CUSBFunction::~CUSBFunction()+0x3c>
   90218:	aa1403e0 	mov	x0, x20
   9021c:	94003991 	bl	9e860 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   90220:	aa1403e0 	mov	x0, x20
   90224:	d2800601 	mov	x1, #0x30                  	// #48
   90228:	94006e62 	bl	abbb0 <operator delete(void*, unsigned long)>
   9022c:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   90230:	aa1303e0 	mov	x0, x19
   90234:	a94153f3 	ldp	x19, x20, [sp, #16]
   90238:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9023c:	14004989 	b	a2860 <CDevice::~CDevice()>

0000000000090240 <CUSBFunction::RemoveDevice()>:
   90240:	f9400800 	ldr	x0, [x0, #16]
   90244:	b4000040 	cbz	x0, 9024c <CUSBFunction::RemoveDevice()+0xc>
   90248:	17fff816 	b	8e2a0 <CUSBDevice::RemoveDevice()>
   9024c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90250:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90254:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90258:	910003fd 	mov	x29, sp
   9025c:	91178021 	add	x1, x1, #0x5e0
   90260:	912b8000 	add	x0, x0, #0xae0
   90264:	52800cc2 	mov	w2, #0x66                  	// #102
   90268:	94004726 	bl	a1f00 <assertion_failed>
   9026c:	d503201f 	nop

0000000000090270 <CUSBFunction::~CUSBFunction()>:
   90270:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90274:	b00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   90278:	91120021 	add	x1, x1, #0x480
   9027c:	910003fd 	mov	x29, sp
   90280:	a90153f3 	stp	x19, x20, [sp, #16]
   90284:	aa0003f3 	mov	x19, x0
   90288:	f9400c14 	ldr	x20, [x0, #24]
   9028c:	f9000001 	str	x1, [x0]
   90290:	f900101f 	str	xzr, [x0, #32]
   90294:	b40000d4 	cbz	x20, 902ac <CUSBFunction::~CUSBFunction()+0x3c>
   90298:	aa1403e0 	mov	x0, x20
   9029c:	94003971 	bl	9e860 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   902a0:	aa1403e0 	mov	x0, x20
   902a4:	d2800601 	mov	x1, #0x30                  	// #48
   902a8:	94006e42 	bl	abbb0 <operator delete(void*, unsigned long)>
   902ac:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   902b0:	aa1303e0 	mov	x0, x19
   902b4:	9400496b 	bl	a2860 <CDevice::~CDevice()>
   902b8:	aa1303e0 	mov	x0, x19
   902bc:	d2800501 	mov	x1, #0x28                  	// #40
   902c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   902c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   902c8:	14006e3a 	b	abbb0 <operator delete(void*, unsigned long)>
   902cc:	d503201f 	nop

00000000000902d0 <CUSBFunction::Configure()>:
   902d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   902d4:	910003fd 	mov	x29, sp
   902d8:	a90153f3 	stp	x19, x20, [sp, #16]
   902dc:	aa0003f3 	mov	x19, x0
   902e0:	f9401000 	ldr	x0, [x0, #32]
   902e4:	b4000460 	cbz	x0, 90370 <CUSBFunction::Configure()+0xa0>
   902e8:	39400c00 	ldrb	w0, [x0, #3]
   902ec:	350000a0 	cbnz	w0, 90300 <CUSBFunction::Configure()+0x30>
   902f0:	52800020 	mov	w0, #0x1                   	// #1
   902f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   902f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   902fc:	d65f03c0 	ret
   90300:	f9400a60 	ldr	x0, [x19, #16]
   90304:	b4000420 	cbz	x0, 90388 <CUSBFunction::Configure()+0xb8>
   90308:	97fff8c2 	bl	8e610 <CUSBDevice::GetHost() const>
   9030c:	aa0003f4 	mov	x20, x0
   90310:	f9400a61 	ldr	x1, [x19, #16]
   90314:	b4000461 	cbz	x1, 903a0 <CUSBFunction::Configure()+0xd0>
   90318:	aa0103e0 	mov	x0, x1
   9031c:	97fff8b1 	bl	8e5e0 <CUSBDevice::GetEndpoint0() const>
   90320:	f9401264 	ldr	x4, [x19, #32]
   90324:	aa0003e1 	mov	x1, x0
   90328:	52800007 	mov	w7, #0x0                   	// #0
   9032c:	aa1403e0 	mov	x0, x20
   90330:	d2800006 	mov	x6, #0x0                   	// #0
   90334:	52800163 	mov	w3, #0xb                   	// #11
   90338:	39400885 	ldrb	w5, [x4, #2]
   9033c:	52800022 	mov	w2, #0x1                   	// #1
   90340:	39400c84 	ldrb	w4, [x4, #3]
   90344:	94000ed3 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90348:	36fffd40 	tbz	w0, #31, 902f0 <CUSBFunction::Configure()+0x20>
   9034c:	94004e29 	bl	a3bf0 <CLogger::Get()>
   90350:	90000123 	adrp	x3, b4000 <_etext+0x19c8>
   90354:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90358:	91182063 	add	x3, x3, #0x608
   9035c:	9134a021 	add	x1, x1, #0xd28
   90360:	52800022 	mov	w2, #0x1                   	// #1
   90364:	94005017 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90368:	52800000 	mov	w0, #0x0                   	// #0
   9036c:	17ffffe2 	b	902f4 <CUSBFunction::Configure()+0x24>
   90370:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90374:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90378:	91178021 	add	x1, x1, #0x5e0
   9037c:	9117c000 	add	x0, x0, #0x5f0
   90380:	528009c2 	mov	w2, #0x4e                  	// #78
   90384:	940046df 	bl	a1f00 <assertion_failed>
   90388:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   9038c:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90390:	91178021 	add	x1, x1, #0x5e0
   90394:	912b8000 	add	x0, x0, #0xae0
   90398:	52801202 	mov	w2, #0x90                  	// #144
   9039c:	940046d9 	bl	a1f00 <assertion_failed>
   903a0:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   903a4:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   903a8:	91178021 	add	x1, x1, #0x5e0
   903ac:	912b8000 	add	x0, x0, #0xae0
   903b0:	52801142 	mov	w2, #0x8a                  	// #138
   903b4:	940046d3 	bl	a1f00 <assertion_failed>
   903b8:	d503201f 	nop
   903bc:	d503201f 	nop

00000000000903c0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   903c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   903c4:	910003fd 	mov	x29, sp
   903c8:	a90153f3 	stp	x19, x20, [sp, #16]
   903cc:	aa0003f3 	mov	x19, x0
   903d0:	aa0103f4 	mov	x20, x1
   903d4:	f90013f5 	str	x21, [sp, #32]
   903d8:	aa0203f5 	mov	x21, x2
   903dc:	94004955 	bl	a2930 <CDevice::CDevice()>
   903e0:	a9017e74 	stp	x20, xzr, [x19, #16]
   903e4:	b00001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   903e8:	91120000 	add	x0, x0, #0x480
   903ec:	f9000260 	str	x0, [x19]
   903f0:	f900127f 	str	xzr, [x19, #32]
   903f4:	b4000214 	cbz	x20, 90434 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x74>
   903f8:	b40002b5 	cbz	x21, 9044c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
   903fc:	d2800600 	mov	x0, #0x30                  	// #48
   90400:	94006dcc 	bl	abb30 <operator new(unsigned long)>
   90404:	aa1503e1 	mov	x1, x21
   90408:	aa0003f4 	mov	x20, x0
   9040c:	940038fd 	bl	9e800 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   90410:	f9000e74 	str	x20, [x19, #24]
   90414:	aa1403e0 	mov	x0, x20
   90418:	94003946 	bl	9e930 <CUSBConfigurationParser::GetCurrentDescriptor()>
   9041c:	f9001260 	str	x0, [x19, #32]
   90420:	b4000220 	cbz	x0, 90464 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
   90424:	a94153f3 	ldp	x19, x20, [sp, #16]
   90428:	f94013f5 	ldr	x21, [sp, #32]
   9042c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90430:	d65f03c0 	ret
   90434:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90438:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   9043c:	91178021 	add	x1, x1, #0x5e0
   90440:	912b8000 	add	x0, x0, #0xae0
   90444:	52800442 	mov	w2, #0x22                  	// #34
   90448:	940046ae 	bl	a1f00 <assertion_failed>
   9044c:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90450:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90454:	91178021 	add	x1, x1, #0x5e0
   90458:	91188000 	add	x0, x0, #0x620
   9045c:	52800482 	mov	w2, #0x24                  	// #36
   90460:	940046a8 	bl	a1f00 <assertion_failed>
   90464:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90468:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   9046c:	91178021 	add	x1, x1, #0x5e0
   90470:	9117c000 	add	x0, x0, #0x5f0
   90474:	52800522 	mov	w2, #0x29                  	// #41
   90478:	940046a2 	bl	a1f00 <assertion_failed>
   9047c:	d503201f 	nop

0000000000090480 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   90480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90484:	910003fd 	mov	x29, sp
   90488:	a90153f3 	stp	x19, x20, [sp, #16]
   9048c:	aa0003f3 	mov	x19, x0
   90490:	aa0103f4 	mov	x20, x1
   90494:	94004927 	bl	a2930 <CDevice::CDevice()>
   90498:	b00001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9049c:	91120000 	add	x0, x0, #0x480
   904a0:	f9000260 	str	x0, [x19]
   904a4:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   904a8:	f900127f 	str	xzr, [x19, #32]
   904ac:	b4000274 	cbz	x20, 904f8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x78>
   904b0:	f9400a80 	ldr	x0, [x20, #16]
   904b4:	f9000a60 	str	x0, [x19, #16]
   904b8:	b40002c0 	cbz	x0, 90510 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x90>
   904bc:	f9400e80 	ldr	x0, [x20, #24]
   904c0:	b4000340 	cbz	x0, 90528 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa8>
   904c4:	d2800600 	mov	x0, #0x30                  	// #48
   904c8:	94006d9a 	bl	abb30 <operator new(unsigned long)>
   904cc:	f9400e81 	ldr	x1, [x20, #24]
   904d0:	aa0003f4 	mov	x20, x0
   904d4:	940038cb 	bl	9e800 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   904d8:	f9000e74 	str	x20, [x19, #24]
   904dc:	aa1403e0 	mov	x0, x20
   904e0:	94003914 	bl	9e930 <CUSBConfigurationParser::GetCurrentDescriptor()>
   904e4:	f9001260 	str	x0, [x19, #32]
   904e8:	b40002c0 	cbz	x0, 90540 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
   904ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   904f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   904f4:	d65f03c0 	ret
   904f8:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   904fc:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90500:	91178021 	add	x1, x1, #0x5e0
   90504:	9118e000 	add	x0, x0, #0x638
   90508:	52800622 	mov	w2, #0x31                  	// #49
   9050c:	9400467d 	bl	a1f00 <assertion_failed>
   90510:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90514:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90518:	91178021 	add	x1, x1, #0x5e0
   9051c:	912b8000 	add	x0, x0, #0xae0
   90520:	52800662 	mov	w2, #0x33                  	// #51
   90524:	94004677 	bl	a1f00 <assertion_failed>
   90528:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   9052c:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90530:	91178021 	add	x1, x1, #0x5e0
   90534:	91192000 	add	x0, x0, #0x648
   90538:	528006a2 	mov	w2, #0x35                  	// #53
   9053c:	94004671 	bl	a1f00 <assertion_failed>
   90540:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90544:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90548:	91178021 	add	x1, x1, #0x5e0
   9054c:	9117c000 	add	x0, x0, #0x5f0
   90550:	52800742 	mov	w2, #0x3a                  	// #58
   90554:	9400466b 	bl	a1f00 <assertion_failed>
   90558:	d503201f 	nop
   9055c:	d503201f 	nop

0000000000090560 <CUSBFunction::GetInterfaceName() const>:
   90560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90564:	910003fd 	mov	x29, sp
   90568:	a90153f3 	stp	x19, x20, [sp, #16]
   9056c:	aa0003f4 	mov	x20, x0
   90570:	d2800400 	mov	x0, #0x20                  	// #32
   90574:	94006d6f 	bl	abb30 <operator new(unsigned long)>
   90578:	aa0003f3 	mov	x19, x0
   9057c:	f0000101 	adrp	x1, b3000 <_etext+0x9c8>
   90580:	9137c021 	add	x1, x1, #0xdf0
   90584:	94005eef 	bl	a8140 <CString::CString(char const*)>
   90588:	f9401280 	ldr	x0, [x20, #32]
   9058c:	b40000c0 	cbz	x0, 905a4 <CUSBFunction::GetInterfaceName() const+0x44>
   90590:	39401402 	ldrb	w2, [x0, #5]
   90594:	51000441 	sub	w1, w2, #0x1
   90598:	12001c21 	and	w1, w1, #0xff
   9059c:	7103f43f 	cmp	w1, #0xfd
   905a0:	540000a9 	b.ls	905b4 <CUSBFunction::GetInterfaceName() const+0x54>  // b.plast
   905a4:	aa1303e0 	mov	x0, x19
   905a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   905ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   905b0:	d65f03c0 	ret
   905b4:	39401c04 	ldrb	w4, [x0, #7]
   905b8:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   905bc:	39401803 	ldrb	w3, [x0, #6]
   905c0:	9119a021 	add	x1, x1, #0x668
   905c4:	aa1303e0 	mov	x0, x19
   905c8:	940064de 	bl	a9940 <CString::Format(char const*, ...)>
   905cc:	aa1303e0 	mov	x0, x19
   905d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   905d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   905d8:	d65f03c0 	ret
   905dc:	d503201f 	nop

00000000000905e0 <CUSBFunction::GetNumEndpoints() const>:
   905e0:	f9401000 	ldr	x0, [x0, #32]
   905e4:	b4000060 	cbz	x0, 905f0 <CUSBFunction::GetNumEndpoints() const+0x10>
   905e8:	39401000 	ldrb	w0, [x0, #4]
   905ec:	d65f03c0 	ret
   905f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   905f4:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   905f8:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   905fc:	910003fd 	mov	x29, sp
   90600:	91178021 	add	x1, x1, #0x5e0
   90604:	9117c000 	add	x0, x0, #0x5f0
   90608:	52800fc2 	mov	w2, #0x7e                  	// #126
   9060c:	9400463d 	bl	a1f00 <assertion_failed>

0000000000090610 <CUSBFunction::GetDevice() const>:
   90610:	f9400800 	ldr	x0, [x0, #16]
   90614:	b4000040 	cbz	x0, 9061c <CUSBFunction::GetDevice() const+0xc>
   90618:	d65f03c0 	ret
   9061c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90620:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90624:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90628:	910003fd 	mov	x29, sp
   9062c:	91178021 	add	x1, x1, #0x5e0
   90630:	912b8000 	add	x0, x0, #0xae0
   90634:	52801082 	mov	w2, #0x84                  	// #132
   90638:	94004632 	bl	a1f00 <assertion_failed>
   9063c:	d503201f 	nop

0000000000090640 <CUSBFunction::GetEndpoint0() const>:
   90640:	f9400800 	ldr	x0, [x0, #16]
   90644:	b4000040 	cbz	x0, 9064c <CUSBFunction::GetEndpoint0() const+0xc>
   90648:	17fff7e6 	b	8e5e0 <CUSBDevice::GetEndpoint0() const>
   9064c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90650:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90654:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90658:	910003fd 	mov	x29, sp
   9065c:	91178021 	add	x1, x1, #0x5e0
   90660:	912b8000 	add	x0, x0, #0xae0
   90664:	52801142 	mov	w2, #0x8a                  	// #138
   90668:	94004626 	bl	a1f00 <assertion_failed>
   9066c:	d503201f 	nop

0000000000090670 <CUSBFunction::GetHost() const>:
   90670:	f9400800 	ldr	x0, [x0, #16]
   90674:	b4000040 	cbz	x0, 9067c <CUSBFunction::GetHost() const+0xc>
   90678:	17fff7e6 	b	8e610 <CUSBDevice::GetHost() const>
   9067c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90680:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90684:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90688:	910003fd 	mov	x29, sp
   9068c:	91178021 	add	x1, x1, #0x5e0
   90690:	912b8000 	add	x0, x0, #0xae0
   90694:	52801202 	mov	w2, #0x90                  	// #144
   90698:	9400461a 	bl	a1f00 <assertion_failed>
   9069c:	d503201f 	nop

00000000000906a0 <CUSBFunction::GetDescriptor(unsigned char)>:
   906a0:	f9400c00 	ldr	x0, [x0, #24]
   906a4:	b4000060 	cbz	x0, 906b0 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   906a8:	12001c21 	and	w1, w1, #0xff
   906ac:	14003875 	b	9e880 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   906b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   906b4:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   906b8:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   906bc:	910003fd 	mov	x29, sp
   906c0:	91178021 	add	x1, x1, #0x5e0
   906c4:	91396000 	add	x0, x0, #0xe58
   906c8:	528012c2 	mov	w2, #0x96                  	// #150
   906cc:	9400460d 	bl	a1f00 <assertion_failed>

00000000000906d0 <CUSBFunction::ConfigurationError(char const*) const>:
   906d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   906d4:	910003fd 	mov	x29, sp
   906d8:	f9400c00 	ldr	x0, [x0, #24]
   906dc:	b4000080 	cbz	x0, 906ec <CUSBFunction::ConfigurationError(char const*) const+0x1c>
   906e0:	b4000121 	cbz	x1, 90704 <CUSBFunction::ConfigurationError(char const*) const+0x34>
   906e4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   906e8:	140038a6 	b	9e980 <CUSBConfigurationParser::Error(char const*) const>
   906ec:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   906f0:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   906f4:	91178021 	add	x1, x1, #0x5e0
   906f8:	91396000 	add	x0, x0, #0xe58
   906fc:	52801382 	mov	w2, #0x9c                  	// #156
   90700:	94004600 	bl	a1f00 <assertion_failed>
   90704:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90708:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   9070c:	91178021 	add	x1, x1, #0x5e0
   90710:	9119e000 	add	x0, x0, #0x678
   90714:	528013a2 	mov	w2, #0x9d                  	// #157
   90718:	940045fa 	bl	a1f00 <assertion_failed>
   9071c:	d503201f 	nop

0000000000090720 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   90720:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90724:	910003fd 	mov	x29, sp
   90728:	a90153f3 	stp	x19, x20, [sp, #16]
   9072c:	aa0003f3 	mov	x19, x0
   90730:	f9401000 	ldr	x0, [x0, #32]
   90734:	a9025bf5 	stp	x21, x22, [sp, #32]
   90738:	b40003e0 	cbz	x0, 907b4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
   9073c:	12001c34 	and	w20, w1, #0xff
   90740:	f9400e61 	ldr	x1, [x19, #24]
   90744:	b4000441 	cbz	x1, 907cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   90748:	f9400a61 	ldr	x1, [x19, #16]
   9074c:	12001c55 	and	w21, w2, #0xff
   90750:	12001c76 	and	w22, w3, #0xff
   90754:	b5000141 	cbnz	x1, 9077c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x5c>
   90758:	14000023 	b	907e4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
   9075c:	f9400a60 	ldr	x0, [x19, #16]
   90760:	52800081 	mov	w1, #0x4                   	// #4
   90764:	97fff7cf 	bl	8e6a0 <CUSBDevice::GetDescriptor(unsigned char)>
   90768:	f9400e60 	ldr	x0, [x19, #24]
   9076c:	52800081 	mov	w1, #0x4                   	// #4
   90770:	94003844 	bl	9e880 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   90774:	f9001260 	str	x0, [x19, #32]
   90778:	b4000160 	cbz	x0, 907a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x84>
   9077c:	39401401 	ldrb	w1, [x0, #5]
   90780:	6b14003f 	cmp	w1, w20
   90784:	54fffec1 	b.ne	9075c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   90788:	39401801 	ldrb	w1, [x0, #6]
   9078c:	6b15003f 	cmp	w1, w21
   90790:	54fffe61 	b.ne	9075c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   90794:	39401c00 	ldrb	w0, [x0, #7]
   90798:	6b16001f 	cmp	w0, w22
   9079c:	54fffe01 	b.ne	9075c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>  // b.any
   907a0:	52800020 	mov	w0, #0x1                   	// #1
   907a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   907a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   907ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   907b0:	d65f03c0 	ret
   907b4:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   907b8:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   907bc:	91178021 	add	x1, x1, #0x5e0
   907c0:	9117c000 	add	x0, x0, #0x5f0
   907c4:	52801462 	mov	w2, #0xa3                  	// #163
   907c8:	940045ce 	bl	a1f00 <assertion_failed>
   907cc:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   907d0:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   907d4:	91178021 	add	x1, x1, #0x5e0
   907d8:	91396000 	add	x0, x0, #0xe58
   907dc:	52801482 	mov	w2, #0xa4                  	// #164
   907e0:	940045c8 	bl	a1f00 <assertion_failed>
   907e4:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   907e8:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   907ec:	91178021 	add	x1, x1, #0x5e0
   907f0:	912b8000 	add	x0, x0, #0xae0
   907f4:	528014a2 	mov	w2, #0xa5                  	// #165
   907f8:	940045c2 	bl	a1f00 <assertion_failed>
   907fc:	d503201f 	nop

0000000000090800 <CUSBFunction::GetInterfaceNumber() const>:
   90800:	f9401000 	ldr	x0, [x0, #32]
   90804:	b4000060 	cbz	x0, 90810 <CUSBFunction::GetInterfaceNumber() const+0x10>
   90808:	39400800 	ldrb	w0, [x0, #2]
   9080c:	d65f03c0 	ret
   90810:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90814:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90818:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   9081c:	910003fd 	mov	x29, sp
   90820:	91178021 	add	x1, x1, #0x5e0
   90824:	9117c000 	add	x0, x0, #0x5f0
   90828:	52801762 	mov	w2, #0xbb                  	// #187
   9082c:	940045b5 	bl	a1f00 <assertion_failed>

0000000000090830 <CUSBFunction::GetInterfaceClass() const>:
   90830:	f9401000 	ldr	x0, [x0, #32]
   90834:	b4000060 	cbz	x0, 90840 <CUSBFunction::GetInterfaceClass() const+0x10>
   90838:	39401400 	ldrb	w0, [x0, #5]
   9083c:	d65f03c0 	ret
   90840:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90844:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90848:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   9084c:	910003fd 	mov	x29, sp
   90850:	91178021 	add	x1, x1, #0x5e0
   90854:	9117c000 	add	x0, x0, #0x5f0
   90858:	52801822 	mov	w2, #0xc1                  	// #193
   9085c:	940045a9 	bl	a1f00 <assertion_failed>

0000000000090860 <CUSBFunction::GetInterfaceSubClass() const>:
   90860:	f9401000 	ldr	x0, [x0, #32]
   90864:	b4000060 	cbz	x0, 90870 <CUSBFunction::GetInterfaceSubClass() const+0x10>
   90868:	39401800 	ldrb	w0, [x0, #6]
   9086c:	d65f03c0 	ret
   90870:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90874:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90878:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   9087c:	910003fd 	mov	x29, sp
   90880:	91178021 	add	x1, x1, #0x5e0
   90884:	9117c000 	add	x0, x0, #0x5f0
   90888:	528018e2 	mov	w2, #0xc7                  	// #199
   9088c:	9400459d 	bl	a1f00 <assertion_failed>

0000000000090890 <CUSBFunction::GetInterfaceProtocol() const>:
   90890:	f9401000 	ldr	x0, [x0, #32]
   90894:	b4000060 	cbz	x0, 908a0 <CUSBFunction::GetInterfaceProtocol() const+0x10>
   90898:	39401c00 	ldrb	w0, [x0, #7]
   9089c:	d65f03c0 	ret
   908a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   908a4:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   908a8:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   908ac:	910003fd 	mov	x29, sp
   908b0:	91178021 	add	x1, x1, #0x5e0
   908b4:	9117c000 	add	x0, x0, #0x5f0
   908b8:	528019a2 	mov	w2, #0xcd                  	// #205
   908bc:	94004591 	bl	a1f00 <assertion_failed>

00000000000908c0 <CUSBFunction::GetInterfaceDescriptor() const>:
   908c0:	f9401000 	ldr	x0, [x0, #32]
   908c4:	b4000040 	cbz	x0, 908cc <CUSBFunction::GetInterfaceDescriptor() const+0xc>
   908c8:	d65f03c0 	ret
   908cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   908d0:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   908d4:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   908d8:	910003fd 	mov	x29, sp
   908dc:	91178021 	add	x1, x1, #0x5e0
   908e0:	9117c000 	add	x0, x0, #0x5f0
   908e4:	52801a62 	mov	w2, #0xd3                  	// #211
   908e8:	94004586 	bl	a1f00 <assertion_failed>
   908ec:	00000000 	udf	#0

00000000000908f0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   908f0:	b00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   908f4:	9113a021 	add	x1, x1, #0x4e8
   908f8:	f9000001 	str	x1, [x0]
   908fc:	14000435 	b	919d0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>

0000000000090900 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   90900:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90904:	b00001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   90908:	9113a021 	add	x1, x1, #0x4e8
   9090c:	910003fd 	mov	x29, sp
   90910:	f9000bf3 	str	x19, [sp, #16]
   90914:	aa0003f3 	mov	x19, x0
   90918:	f9000001 	str	x1, [x0]
   9091c:	9400042d 	bl	919d0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   90920:	aa1303e0 	mov	x0, x19
   90924:	d2803801 	mov	x1, #0x1c0                 	// #448
   90928:	f9400bf3 	ldr	x19, [sp, #16]
   9092c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90930:	14006ca0 	b	abbb0 <operator delete(void*, unsigned long)>
   90934:	d503201f 	nop
   90938:	d503201f 	nop
   9093c:	d503201f 	nop

0000000000090940 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   90940:	93407c22 	sxtw	x2, w1
   90944:	f100285f 	cmp	x2, #0xa
   90948:	54000069 	b.ls	90954 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x14>  // b.plast
   9094c:	52800000 	mov	w0, #0x0                   	// #0
   90950:	d65f03c0 	ret
   90954:	f0000122 	adrp	x2, b7000 <_etext+0x49c8>
   90958:	9134c042 	add	x2, x2, #0xd30
   9095c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90960:	910003fd 	mov	x29, sp
   90964:	3861c841 	ldrb	w1, [x2, w1, sxtw]
   90968:	a90153f3 	stp	x19, x20, [sp, #16]
   9096c:	aa0003f3 	mov	x19, x0
   90970:	531f7821 	lsl	w1, w1, #1
   90974:	f90013f5 	str	x21, [sp, #32]
   90978:	39062401 	strb	w1, [x0, #393]
   9097c:	97ffff3d 	bl	90670 <CUSBFunction::GetHost() const>
   90980:	aa0003f4 	mov	x20, x0
   90984:	aa1303e0 	mov	x0, x19
   90988:	97ffff2e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9098c:	aa0003f5 	mov	x21, x0
   90990:	aa1303e0 	mov	x0, x19
   90994:	97ffff9b 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   90998:	12001c05 	and	w5, w0, #0xff
   9099c:	91060266 	add	x6, x19, #0x180
   909a0:	aa1503e1 	mov	x1, x21
   909a4:	aa1403e0 	mov	x0, x20
   909a8:	52800607 	mov	w7, #0x30                  	// #48
   909ac:	52804024 	mov	w4, #0x201                 	// #513
   909b0:	52800123 	mov	w3, #0x9                   	// #9
   909b4:	52800422 	mov	w2, #0x21                  	// #33
   909b8:	94000d36 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   909bc:	2a2003e0 	mvn	w0, w0
   909c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   909c4:	531f7c00 	lsr	w0, w0, #31
   909c8:	f94013f5 	ldr	x21, [sp, #32]
   909cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   909d0:	d65f03c0 	ret
   909d4:	d503201f 	nop
   909d8:	d503201f 	nop
   909dc:	d503201f 	nop

00000000000909e0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   909e0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   909e4:	d2800602 	mov	x2, #0x30                  	// #48
   909e8:	910003fd 	mov	x29, sp
   909ec:	a90153f3 	stp	x19, x20, [sp, #16]
   909f0:	9101bff3 	add	x19, sp, #0x6f
   909f4:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   909f8:	aa0003f4 	mov	x20, x0
   909fc:	f90013f5 	str	x21, [sp, #32]
   90a00:	2a0103f5 	mov	w21, w1
   90a04:	91060001 	add	x1, x0, #0x180
   90a08:	aa1303e0 	mov	x0, x19
   90a0c:	940069ef 	bl	ab1c8 <memcpy>
   90a10:	710006bf 	cmp	w21, #0x1
   90a14:	540004e0 	b.eq	90ab0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd0>  // b.none
   90a18:	71000abf 	cmp	w21, #0x2
   90a1c:	54000420 	b.eq	90aa0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc0>  // b.none
   90a20:	35000515 	cbnz	w21, 90ac0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   90a24:	52800003 	mov	w3, #0x0                   	// #0
   90a28:	52800001 	mov	w1, #0x0                   	// #0
   90a2c:	52800002 	mov	w2, #0x0                   	// #0
   90a30:	aa1403e0 	mov	x0, x20
   90a34:	39000661 	strb	w1, [x19, #1]
   90a38:	39000a63 	strb	w3, [x19, #2]
   90a3c:	39000e61 	strb	w1, [x19, #3]
   90a40:	39001262 	strb	w2, [x19, #4]
   90a44:	97ffff0b 	bl	90670 <CUSBFunction::GetHost() const>
   90a48:	aa0003f5 	mov	x21, x0
   90a4c:	aa1403e0 	mov	x0, x20
   90a50:	97fffefc 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   90a54:	aa0003e1 	mov	x1, x0
   90a58:	aa1403e0 	mov	x0, x20
   90a5c:	aa0103f4 	mov	x20, x1
   90a60:	97ffff68 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   90a64:	12001c05 	and	w5, w0, #0xff
   90a68:	aa1303e6 	mov	x6, x19
   90a6c:	aa1403e1 	mov	x1, x20
   90a70:	aa1503e0 	mov	x0, x21
   90a74:	52800607 	mov	w7, #0x30                  	// #48
   90a78:	52804024 	mov	w4, #0x201                 	// #513
   90a7c:	52800123 	mov	w3, #0x9                   	// #9
   90a80:	52800422 	mov	w2, #0x21                  	// #33
   90a84:	94000d03 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90a88:	2a2003e0 	mvn	w0, w0
   90a8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90a90:	531f7c00 	lsr	w0, w0, #31
   90a94:	f94013f5 	ldr	x21, [sp, #32]
   90a98:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90a9c:	d65f03c0 	ret
   90aa0:	52800003 	mov	w3, #0x0                   	// #0
   90aa4:	52801fc1 	mov	w1, #0xfe                  	// #254
   90aa8:	52801fe2 	mov	w2, #0xff                  	// #255
   90aac:	17ffffe1 	b	90a30 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   90ab0:	52801fe3 	mov	w3, #0xff                  	// #255
   90ab4:	52801fc1 	mov	w1, #0xfe                  	// #254
   90ab8:	52800002 	mov	w2, #0x0                   	// #0
   90abc:	17ffffdd 	b	90a30 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   90ac0:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90ac4:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90ac8:	911a2021 	add	x1, x1, #0x688
   90acc:	9135c000 	add	x0, x0, #0xd70
   90ad0:	528021c2 	mov	w2, #0x10e                 	// #270
   90ad4:	9400450b 	bl	a1f00 <assertion_failed>
   90ad8:	d503201f 	nop
   90adc:	d503201f 	nop

0000000000090ae0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   90ae0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90ae4:	52800002 	mov	w2, #0x0                   	// #0
   90ae8:	910003fd 	mov	x29, sp
   90aec:	f9000bf3 	str	x19, [sp, #16]
   90af0:	aa0003f3 	mov	x19, x0
   90af4:	940003db 	bl	91a60 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   90af8:	b00001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   90afc:	9113a000 	add	x0, x0, #0x4e8
   90b00:	f9000260 	str	x0, [x19]
   90b04:	52800003 	mov	w3, #0x0                   	// #0
   90b08:	aa1303e0 	mov	x0, x19
   90b0c:	52800002 	mov	w2, #0x0                   	// #0
   90b10:	52800061 	mov	w1, #0x3                   	// #3
   90b14:	97ffff03 	bl	90720 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   90b18:	3905aa60 	strb	w0, [x19, #362]
   90b1c:	91060260 	add	x0, x19, #0x180
   90b20:	f9400bf3 	ldr	x19, [sp, #16]
   90b24:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90b28:	9134c021 	add	x1, x1, #0xd30
   90b2c:	d2800602 	mov	x2, #0x30                  	// #48
   90b30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90b34:	91004021 	add	x1, x1, #0x10
   90b38:	140069a4 	b	ab1c8 <memcpy>
   90b3c:	d503201f 	nop

0000000000090b40 <CUSBGamePadPS3Device::PS3Enable()>:
   90b40:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   90b44:	d2818842 	mov	x2, #0xc42                 	// #3138
   90b48:	d2800003 	mov	x3, #0x0                   	// #0
   90b4c:	910003fd 	mov	x29, sp
   90b50:	a90153f3 	stp	x19, x20, [sp, #16]
   90b54:	9101bff3 	add	x19, sp, #0x6f
   90b58:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   90b5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   90b60:	aa0003f4 	mov	x20, x0
   90b64:	a9000e62 	stp	x2, x3, [x19]
   90b68:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   90b6c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   90b70:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   90b74:	97fffebf 	bl	90670 <CUSBFunction::GetHost() const>
   90b78:	aa0003f5 	mov	x21, x0
   90b7c:	aa1403e0 	mov	x0, x20
   90b80:	97fffeb0 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   90b84:	aa0003f6 	mov	x22, x0
   90b88:	aa1403e0 	mov	x0, x20
   90b8c:	97ffff1d 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   90b90:	12001c05 	and	w5, w0, #0xff
   90b94:	aa1303e6 	mov	x6, x19
   90b98:	aa1603e1 	mov	x1, x22
   90b9c:	aa1503e0 	mov	x0, x21
   90ba0:	52800087 	mov	w7, #0x4                   	// #4
   90ba4:	52807e84 	mov	w4, #0x3f4                 	// #1012
   90ba8:	52800123 	mov	w3, #0x9                   	// #9
   90bac:	52800422 	mov	w2, #0x21                  	// #33
   90bb0:	94000cb8 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90bb4:	37f80160 	tbnz	w0, #31, 90be0 <CUSBGamePadPS3Device::PS3Enable()+0xa0>
   90bb8:	f9400282 	ldr	x2, [x20]
   90bbc:	aa1403e0 	mov	x0, x20
   90bc0:	b9415681 	ldr	w1, [x20, #340]
   90bc4:	f9403c42 	ldr	x2, [x2, #120]
   90bc8:	d63f0040 	blr	x2
   90bcc:	12001c00 	and	w0, w0, #0xff
   90bd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   90bd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90bd8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90bdc:	d65f03c0 	ret
   90be0:	a94153f3 	ldp	x19, x20, [sp, #16]
   90be4:	52800000 	mov	w0, #0x0                   	// #0
   90be8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90bec:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90bf0:	d65f03c0 	ret
   90bf4:	d503201f 	nop
   90bf8:	d503201f 	nop
   90bfc:	d503201f 	nop

0000000000090c00 <CUSBGamePadPS3Device::Configure()>:
   90c00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90c04:	910003fd 	mov	x29, sp
   90c08:	3945a801 	ldrb	w1, [x0, #362]
   90c0c:	360003a1 	tbz	w1, #0, 90c80 <CUSBGamePadPS3Device::Configure()+0x80>
   90c10:	f9000bf3 	str	x19, [sp, #16]
   90c14:	aa0003f3 	mov	x19, x0
   90c18:	94000536 	bl	920f0 <CUSBGamePadStandardDevice::Configure()>
   90c1c:	360005a0 	tbz	w0, #0, 90cd0 <CUSBGamePadPS3Device::Configure()+0xd0>
   90c20:	7942a260 	ldrh	w0, [x19, #336]
   90c24:	5100c400 	sub	w0, w0, #0x31
   90c28:	12003c00 	and	w0, w0, #0xffff
   90c2c:	7100041f 	cmp	w0, #0x1
   90c30:	54000368 	b.hi	90c9c <CUSBGamePadPS3Device::Configure()+0x9c>  // b.pmore
   90c34:	91014261 	add	x1, x19, #0x50
   90c38:	91044262 	add	x2, x19, #0x110
   90c3c:	52800263 	mov	w3, #0x13                  	// #19
   90c40:	52800204 	mov	w4, #0x10                  	// #16
   90c44:	52801fe0 	mov	w0, #0xff                  	// #255
   90c48:	b9004a64 	str	w4, [x19, #72]
   90c4c:	b9012a63 	str	w3, [x19, #296]
   90c50:	2900003f 	stp	wzr, w0, [x1]
   90c54:	91003021 	add	x1, x1, #0xc
   90c58:	eb02003f 	cmp	x1, x2
   90c5c:	54ffffa1 	b.ne	90c50 <CUSBGamePadPS3Device::Configure()+0x50>  // b.any
   90c60:	b9010e7f 	str	wzr, [x19, #268]
   90c64:	aa1303e0 	mov	x0, x19
   90c68:	97ffffb6 	bl	90b40 <CUSBGamePadPS3Device::PS3Enable()>
   90c6c:	360004a0 	tbz	w0, #0, 90d00 <CUSBGamePadPS3Device::Configure()+0x100>
   90c70:	aa1303e0 	mov	x0, x19
   90c74:	f9400bf3 	ldr	x19, [sp, #16]
   90c78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90c7c:	14000b75 	b	93a50 <CUSBHIDDevice::StartRequest()>
   90c80:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90c84:	9134c021 	add	x1, x1, #0xd30
   90c88:	91010021 	add	x1, x1, #0x40
   90c8c:	97fffe91 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   90c90:	52800000 	mov	w0, #0x0                   	// #0
   90c94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90c98:	d65f03c0 	ret
   90c9c:	94004bd5 	bl	a3bf0 <CLogger::Get()>
   90ca0:	7942a264 	ldrh	w4, [x19, #336]
   90ca4:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90ca8:	9134c021 	add	x1, x1, #0xd30
   90cac:	52800022 	mov	w2, #0x1                   	// #1
   90cb0:	91010021 	add	x1, x1, #0x40
   90cb4:	90000123 	adrp	x3, b4000 <_etext+0x19c8>
   90cb8:	911b0063 	add	x3, x3, #0x6c0
   90cbc:	94004dc1 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90cc0:	f9400bf3 	ldr	x19, [sp, #16]
   90cc4:	52800000 	mov	w0, #0x0                   	// #0
   90cc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90ccc:	d65f03c0 	ret
   90cd0:	94004bc8 	bl	a3bf0 <CLogger::Get()>
   90cd4:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90cd8:	9134c021 	add	x1, x1, #0xd30
   90cdc:	91010021 	add	x1, x1, #0x40
   90ce0:	52800022 	mov	w2, #0x1                   	// #1
   90ce4:	90000123 	adrp	x3, b4000 <_etext+0x19c8>
   90ce8:	911a8063 	add	x3, x3, #0x6a0
   90cec:	94004db5 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90cf0:	f9400bf3 	ldr	x19, [sp, #16]
   90cf4:	52800000 	mov	w0, #0x0                   	// #0
   90cf8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90cfc:	d65f03c0 	ret
   90d00:	94004bbc 	bl	a3bf0 <CLogger::Get()>
   90d04:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90d08:	9134c021 	add	x1, x1, #0xd30
   90d0c:	91010021 	add	x1, x1, #0x40
   90d10:	52800022 	mov	w2, #0x1                   	// #1
   90d14:	90000123 	adrp	x3, b4000 <_etext+0x19c8>
   90d18:	911b8063 	add	x3, x3, #0x6e0
   90d1c:	94004da9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90d20:	f9400bf3 	ldr	x19, [sp, #16]
   90d24:	52800000 	mov	w0, #0x0                   	// #0
   90d28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90d2c:	d65f03c0 	ret

0000000000090d30 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   90d30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90d34:	aa0003e4 	mov	x4, x0
   90d38:	aa0103e5 	mov	x5, x1
   90d3c:	910003fd 	mov	x29, sp
   90d40:	7942a002 	ldrh	w2, [x0, #336]
   90d44:	7100c45f 	cmp	w2, #0x31
   90d48:	540008e0 	b.eq	90e64 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x134>  // b.none
   90d4c:	7100c85f 	cmp	w2, #0x32
   90d50:	54000080 	b.eq	90d60 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x30>  // b.none
   90d54:	35000962 	cbnz	w2, 90e80 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   90d58:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90d5c:	140003c1 	b	91c60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   90d60:	91000425 	add	x5, x1, #0x1
   90d64:	394008a2 	ldrb	w2, [x5, #2]
   90d68:	f0000121 	adrp	x1, b7000 <_etext+0x49c8>
   90d6c:	39400ca6 	ldrb	w6, [x5, #3]
   90d70:	9134c021 	add	x1, x1, #0xd30
   90d74:	394010a0 	ldrb	w0, [x5, #4]
   90d78:	91014021 	add	x1, x1, #0x50
   90d7c:	394014a3 	ldrb	w3, [x5, #5]
   90d80:	910038a7 	add	x7, x5, #0xe
   90d84:	aa062046 	orr	x6, x2, x6, lsl #8
   90d88:	d2800002 	mov	x2, #0x0                   	// #0
   90d8c:	aa0040c0 	orr	x0, x6, x0, lsl #16
   90d90:	d2800186 	mov	x6, #0xc                   	// #12
   90d94:	aa036003 	orr	x3, x0, x3, lsl #24
   90d98:	53104800 	ubfx	w0, w0, #16, #3
   90d9c:	53057c68 	lsr	w8, w3, #5
   90da0:	53151c63 	ubfiz	w3, w3, #11, #8
   90da4:	121d1d08 	and	w8, w8, #0x7f8
   90da8:	2a080000 	orr	w0, w0, w8
   90dac:	2a030000 	orr	w0, w0, w3
   90db0:	b9012c80 	str	w0, [x4, #300]
   90db4:	394018a0 	ldrb	w0, [x5, #6]
   90db8:	b9004c80 	str	w0, [x4, #76]
   90dbc:	39401ca0 	ldrb	w0, [x5, #7]
   90dc0:	b9005880 	str	w0, [x4, #88]
   90dc4:	394020a0 	ldrb	w0, [x5, #8]
   90dc8:	b9006480 	str	w0, [x4, #100]
   90dcc:	394024a0 	ldrb	w0, [x5, #9]
   90dd0:	b9007080 	str	w0, [x4, #112]
   90dd4:	d503201f 	nop
   90dd8:	b8627823 	ldr	w3, [x1, x2, lsl #2]
   90ddc:	386268e0 	ldrb	w0, [x7, x2]
   90de0:	91000442 	add	x2, x2, #0x1
   90de4:	f100305f 	cmp	x2, #0xc
   90de8:	9b061063 	madd	x3, x3, x6, x4
   90dec:	b9004c60 	str	w0, [x3, #76]
   90df0:	54ffff41 	b.ne	90dd8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xa8>  // b.any
   90df4:	3940a4a2 	ldrb	w2, [x5, #41]
   90df8:	52803fe1 	mov	w1, #0x1ff                 	// #511
   90dfc:	3940a8a0 	ldrb	w0, [x5, #42]
   90e00:	aa002040 	orr	x0, x2, x0, lsl #8
   90e04:	5ac00400 	rev16	w0, w0
   90e08:	4b202020 	sub	w0, w1, w0, uxth
   90e0c:	b9013080 	str	w0, [x4, #304]
   90e10:	3940aca2 	ldrb	w2, [x5, #43]
   90e14:	3940b0a0 	ldrb	w0, [x5, #44]
   90e18:	aa002040 	orr	x0, x2, x0, lsl #8
   90e1c:	5ac00400 	rev16	w0, w0
   90e20:	4b202020 	sub	w0, w1, w0, uxth
   90e24:	b9013480 	str	w0, [x4, #308]
   90e28:	3940b4a2 	ldrb	w2, [x5, #45]
   90e2c:	3940b8a0 	ldrb	w0, [x5, #46]
   90e30:	aa002040 	orr	x0, x2, x0, lsl #8
   90e34:	5ac00400 	rev16	w0, w0
   90e38:	4b202021 	sub	w1, w1, w0, uxth
   90e3c:	b9013881 	str	w1, [x4, #312]
   90e40:	3940bca1 	ldrb	w1, [x5, #47]
   90e44:	3940c0a0 	ldrb	w0, [x5, #48]
   90e48:	aa002020 	orr	x0, x1, x0, lsl #8
   90e4c:	5ac00400 	rev16	w0, w0
   90e50:	12003c00 	and	w0, w0, #0xffff
   90e54:	51001800 	sub	w0, w0, #0x6
   90e58:	b9014480 	str	w0, [x4, #324]
   90e5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90e60:	d65f03c0 	ret
   90e64:	b5fff801 	cbnz	x1, 90d64 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x34>
   90e68:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90e6c:	90000120 	adrp	x0, b4000 <_etext+0x19c8>
   90e70:	911a2021 	add	x1, x1, #0x688
   90e74:	911c0000 	add	x0, x0, #0x700
   90e78:	528012e2 	mov	w2, #0x97                  	// #151
   90e7c:	94004421 	bl	a1f00 <assertion_failed>
   90e80:	90000121 	adrp	x1, b4000 <_etext+0x19c8>
   90e84:	f0000100 	adrp	x0, b3000 <_etext+0x9c8>
   90e88:	911a2021 	add	x1, x1, #0x688
   90e8c:	9135c000 	add	x0, x0, #0xd70
   90e90:	52801242 	mov	w2, #0x92                  	// #146
   90e94:	9400441b 	bl	a1f00 <assertion_failed>
	...

0000000000090ea0 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   90ea0:	52800000 	mov	w0, #0x0                   	// #0
   90ea4:	d65f03c0 	ret
	...

0000000000090eb0 <CUSBGamePadPS3Device::GetProperties()>:
   90eb0:	52800360 	mov	w0, #0x1b                  	// #27
   90eb4:	d65f03c0 	ret
	...

0000000000090ec0 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   90ec0:	39400422 	ldrb	w2, [x1, #1]
   90ec4:	f0000123 	adrp	x3, b7000 <_etext+0x49c8>
   90ec8:	9136c063 	add	x3, x3, #0xdb0
   90ecc:	b9004c02 	str	w2, [x0, #76]
   90ed0:	39400822 	ldrb	w2, [x1, #2]
   90ed4:	b9005802 	str	w2, [x0, #88]
   90ed8:	39400c22 	ldrb	w2, [x1, #3]
   90edc:	b9006402 	str	w2, [x0, #100]
   90ee0:	39401022 	ldrb	w2, [x1, #4]
   90ee4:	b9007002 	str	w2, [x0, #112]
   90ee8:	39402022 	ldrb	w2, [x1, #8]
   90eec:	b9007c02 	str	w2, [x0, #124]
   90ef0:	39402422 	ldrb	w2, [x1, #9]
   90ef4:	b9008802 	str	w2, [x0, #136]
   90ef8:	39401422 	ldrb	w2, [x1, #5]
   90efc:	12000c42 	and	w2, w2, #0xf
   90f00:	b9011002 	str	w2, [x0, #272]
   90f04:	b8627864 	ldr	w4, [x3, x2, lsl #2]
   90f08:	b9012c04 	str	w4, [x0, #300]
   90f0c:	32190082 	orr	w2, w4, #0x80
   90f10:	39c01425 	ldrsb	w5, [x1, #5]
   90f14:	39401423 	ldrb	w3, [x1, #5]
   90f18:	710000bf 	cmp	w5, #0x0
   90f1c:	1a84b042 	csel	w2, w2, w4, lt	// lt = tstop
   90f20:	b9012c02 	str	w2, [x0, #300]
   90f24:	36300063 	tbz	w3, #6, 90f30 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x70>
   90f28:	32180042 	orr	w2, w2, #0x100
   90f2c:	b9012c02 	str	w2, [x0, #300]
   90f30:	36280083 	tbz	w3, #5, 90f40 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x80>
   90f34:	b9412c02 	ldr	w2, [x0, #300]
   90f38:	32170042 	orr	w2, w2, #0x200
   90f3c:	b9012c02 	str	w2, [x0, #300]
   90f40:	36200083 	tbz	w3, #4, 90f50 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x90>
   90f44:	b9412c02 	ldr	w2, [x0, #300]
   90f48:	32160042 	orr	w2, w2, #0x400
   90f4c:	b9012c02 	str	w2, [x0, #300]
   90f50:	39c01823 	ldrsb	w3, [x1, #6]
   90f54:	39401822 	ldrb	w2, [x1, #6]
   90f58:	37f808a3 	tbnz	w3, #31, 9106c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1ac>
   90f5c:	36300082 	tbz	w2, #6, 90f6c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xac>
   90f60:	b9412c03 	ldr	w3, [x0, #300]
   90f64:	32140063 	orr	w3, w3, #0x1000
   90f68:	b9012c03 	str	w3, [x0, #300]
   90f6c:	36280082 	tbz	w2, #5, 90f7c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xbc>
   90f70:	b9412c03 	ldr	w3, [x0, #300]
   90f74:	32120063 	orr	w3, w3, #0x4000
   90f78:	b9012c03 	str	w3, [x0, #300]
   90f7c:	36200082 	tbz	w2, #4, 90f8c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xcc>
   90f80:	b9412c03 	ldr	w3, [x0, #300]
   90f84:	32150063 	orr	w3, w3, #0x800
   90f88:	b9012c03 	str	w3, [x0, #300]
   90f8c:	36180082 	tbz	w2, #3, 90f9c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xdc>
   90f90:	b9412c03 	ldr	w3, [x0, #300]
   90f94:	321c0063 	orr	w3, w3, #0x10
   90f98:	b9012c03 	str	w3, [x0, #300]
   90f9c:	36100082 	tbz	w2, #2, 90fac <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xec>
   90fa0:	b9412c03 	ldr	w3, [x0, #300]
   90fa4:	321d0063 	orr	w3, w3, #0x8
   90fa8:	b9012c03 	str	w3, [x0, #300]
   90fac:	36080082 	tbz	w2, #1, 90fbc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xfc>
   90fb0:	b9412c03 	ldr	w3, [x0, #300]
   90fb4:	321a0063 	orr	w3, w3, #0x40
   90fb8:	b9012c03 	str	w3, [x0, #300]
   90fbc:	36000082 	tbz	w2, #0, 90fcc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x10c>
   90fc0:	b9412c02 	ldr	w2, [x0, #300]
   90fc4:	321b0042 	orr	w2, w2, #0x20
   90fc8:	b9012c02 	str	w2, [x0, #300]
   90fcc:	39401c22 	ldrb	w2, [x1, #7]
   90fd0:	36080082 	tbz	w2, #1, 90fe0 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x120>
   90fd4:	b9412c03 	ldr	w3, [x0, #300]
   90fd8:	320b0063 	orr	w3, w3, #0x200000
   90fdc:	b9012c03 	str	w3, [x0, #300]
   90fe0:	36000082 	tbz	w2, #0, 90ff0 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x130>
   90fe4:	b9412c02 	ldr	w2, [x0, #300]
   90fe8:	32000042 	orr	w2, w2, #0x1
   90fec:	b9012c02 	str	w2, [x0, #300]
   90ff0:	39404c23 	ldrb	w3, [x1, #19]
   90ff4:	39405022 	ldrb	w2, [x1, #20]
   90ff8:	aa022062 	orr	x2, x3, x2, lsl #8
   90ffc:	93403c42 	sxth	x2, w2
   91000:	b9013002 	str	w2, [x0, #304]
   91004:	39405c23 	ldrb	w3, [x1, #23]
   91008:	39406022 	ldrb	w2, [x1, #24]
   9100c:	aa022062 	orr	x2, x3, x2, lsl #8
   91010:	93403c42 	sxth	x2, w2
   91014:	b9013402 	str	w2, [x0, #308]
   91018:	39405423 	ldrb	w3, [x1, #21]
   9101c:	39405822 	ldrb	w2, [x1, #22]
   91020:	aa022062 	orr	x2, x3, x2, lsl #8
   91024:	93403c42 	sxth	x2, w2
   91028:	b9013802 	str	w2, [x0, #312]
   9102c:	39404423 	ldrb	w3, [x1, #17]
   91030:	39404822 	ldrb	w2, [x1, #18]
   91034:	aa022062 	orr	x2, x3, x2, lsl #8
   91038:	93403c42 	sxth	x2, w2
   9103c:	b9013c02 	str	w2, [x0, #316]
   91040:	39403423 	ldrb	w3, [x1, #13]
   91044:	39403822 	ldrb	w2, [x1, #14]
   91048:	aa022062 	orr	x2, x3, x2, lsl #8
   9104c:	93403c42 	sxth	x2, w2
   91050:	b9014002 	str	w2, [x0, #320]
   91054:	39403c22 	ldrb	w2, [x1, #15]
   91058:	39404021 	ldrb	w1, [x1, #16]
   9105c:	aa012041 	orr	x1, x2, x1, lsl #8
   91060:	93403c21 	sxth	x1, w1
   91064:	b9014401 	str	w1, [x0, #324]
   91068:	d65f03c0 	ret
   9106c:	b9412c03 	ldr	w3, [x0, #300]
   91070:	32130063 	orr	w3, w3, #0x2000
   91074:	b9012c03 	str	w3, [x0, #300]
   91078:	17ffffb9 	b	90f5c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x9c>
   9107c:	d503201f 	nop

0000000000091080 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   91080:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91084:	900001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   91088:	91166021 	add	x1, x1, #0x598
   9108c:	910003fd 	mov	x29, sp
   91090:	f9000bf3 	str	x19, [sp, #16]
   91094:	aa0003f3 	mov	x19, x0
   91098:	f940b800 	ldr	x0, [x0, #368]
   9109c:	f9000261 	str	x1, [x19]
   910a0:	b4000080 	cbz	x0, 910b0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x30>
   910a4:	f9400001 	ldr	x1, [x0]
   910a8:	f9400421 	ldr	x1, [x1, #8]
   910ac:	d63f0020 	blr	x1
   910b0:	f940b660 	ldr	x0, [x19, #360]
   910b4:	b4000040 	cbz	x0, 910bc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x3c>
   910b8:	94006ab6 	bl	abb90 <operator delete[](void*)>
   910bc:	aa1303e0 	mov	x0, x19
   910c0:	f9400bf3 	ldr	x19, [sp, #16]
   910c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   910c8:	140036ca 	b	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   910cc:	d503201f 	nop

00000000000910d0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   910d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   910d4:	900001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   910d8:	91166021 	add	x1, x1, #0x598
   910dc:	910003fd 	mov	x29, sp
   910e0:	f9000bf3 	str	x19, [sp, #16]
   910e4:	aa0003f3 	mov	x19, x0
   910e8:	f940b800 	ldr	x0, [x0, #368]
   910ec:	f9000261 	str	x1, [x19]
   910f0:	b4000080 	cbz	x0, 91100 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x30>
   910f4:	f9400001 	ldr	x1, [x0]
   910f8:	f9400421 	ldr	x1, [x1, #8]
   910fc:	d63f0020 	blr	x1
   91100:	f940b660 	ldr	x0, [x19, #360]
   91104:	b4000040 	cbz	x0, 9110c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x3c>
   91108:	94006aa2 	bl	abb90 <operator delete[](void*)>
   9110c:	aa1303e0 	mov	x0, x19
   91110:	940036b8 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   91114:	aa1303e0 	mov	x0, x19
   91118:	d2803001 	mov	x1, #0x180                 	// #384
   9111c:	f9400bf3 	ldr	x19, [sp, #16]
   91120:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91124:	14006aa3 	b	abbb0 <operator delete(void*, unsigned long)>
   91128:	d503201f 	nop
   9112c:	d503201f 	nop

0000000000091130 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   91130:	53107c26 	lsr	w6, w1, #16
   91134:	52800005 	mov	w5, #0x0                   	// #0
   91138:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9113c:	53087c28 	lsr	w8, w1, #8
   91140:	33001cc5 	bfxil	w5, w6, #0, #8
   91144:	910003fd 	mov	x29, sp
   91148:	f940b406 	ldr	x6, [x0, #360]
   9114c:	33181d05 	bfi	w5, w8, #8, #8
   91150:	f9000bf3 	str	x19, [sp, #16]
   91154:	33101c25 	bfi	w5, w1, #16, #8
   91158:	39058003 	strb	w3, [x0, #352]
   9115c:	39456407 	ldrb	w7, [x0, #345]
   91160:	33081c45 	bfi	w5, w2, #24, #8
   91164:	b9015c05 	str	w5, [x0, #348]
   91168:	52800402 	mov	w2, #0x20                  	// #32
   9116c:	39000cc7 	strb	w7, [x6, #3]
   91170:	52800003 	mov	w3, #0x0                   	// #0
   91174:	f940b401 	ldr	x1, [x0, #360]
   91178:	39456c05 	ldrb	w5, [x0, #347]
   9117c:	39001025 	strb	w5, [x1, #4]
   91180:	f940b401 	ldr	x1, [x0, #360]
   91184:	39456805 	ldrb	w5, [x0, #346]
   91188:	39001425 	strb	w5, [x1, #5]
   9118c:	f940b401 	ldr	x1, [x0, #360]
   91190:	39457005 	ldrb	w5, [x0, #348]
   91194:	39001825 	strb	w5, [x1, #6]
   91198:	f940b401 	ldr	x1, [x0, #360]
   9119c:	39457405 	ldrb	w5, [x0, #349]
   911a0:	39001c25 	strb	w5, [x1, #7]
   911a4:	f940b401 	ldr	x1, [x0, #360]
   911a8:	39457805 	ldrb	w5, [x0, #350]
   911ac:	39002025 	strb	w5, [x1, #8]
   911b0:	f940b401 	ldr	x1, [x0, #360]
   911b4:	39457c05 	ldrb	w5, [x0, #351]
   911b8:	39002425 	strb	w5, [x1, #9]
   911bc:	f940b401 	ldr	x1, [x0, #360]
   911c0:	39458005 	ldrb	w5, [x0, #352]
   911c4:	39002825 	strb	w5, [x1, #10]
   911c8:	f940b401 	ldr	x1, [x0, #360]
   911cc:	94000991 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   911d0:	2a0003f3 	mov	w19, w0
   911d4:	360000b3 	tbz	w19, #0, 911e8 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xb8>
   911d8:	2a1303e0 	mov	w0, w19
   911dc:	f9400bf3 	ldr	x19, [sp, #16]
   911e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   911e4:	d65f03c0 	ret
   911e8:	94004a82 	bl	a3bf0 <CLogger::Get()>
   911ec:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   911f0:	9136c021 	add	x1, x1, #0xdb0
   911f4:	9100a021 	add	x1, x1, #0x28
   911f8:	52800022 	mov	w2, #0x1                   	// #1
   911fc:	f0000103 	adrp	x3, b4000 <_etext+0x19c8>
   91200:	911c4063 	add	x3, x3, #0x710
   91204:	94004c6f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91208:	2a1303e0 	mov	w0, w19
   9120c:	f9400bf3 	ldr	x19, [sp, #16]
   91210:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91214:	d65f03c0 	ret
   91218:	d503201f 	nop
   9121c:	d503201f 	nop

0000000000091220 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   91220:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91224:	7100043f 	cmp	w1, #0x1
   91228:	910003fd 	mov	x29, sp
   9122c:	f9000bf3 	str	x19, [sp, #16]
   91230:	54000780 	b.eq	91320 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x100>  // b.none
   91234:	7100083f 	cmp	w1, #0x2
   91238:	540006c0 	b.eq	91310 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xf0>  // b.none
   9123c:	340000c1 	cbz	w1, 91254 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   91240:	52800033 	mov	w19, #0x1                   	// #1
   91244:	2a1303e0 	mov	w0, w19
   91248:	f9400bf3 	ldr	x19, [sp, #16]
   9124c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91250:	d65f03c0 	ret
   91254:	52800003 	mov	w3, #0x0                   	// #0
   91258:	52800004 	mov	w4, #0x0                   	// #0
   9125c:	52801e01 	mov	w1, #0xf0                  	// #240
   91260:	f940b402 	ldr	x2, [x0, #360]
   91264:	39056401 	strb	w1, [x0, #345]
   91268:	39056804 	strb	w4, [x0, #346]
   9126c:	39056c03 	strb	w3, [x0, #347]
   91270:	52800003 	mov	w3, #0x0                   	// #0
   91274:	39000c41 	strb	w1, [x2, #3]
   91278:	52800402 	mov	w2, #0x20                  	// #32
   9127c:	f940b401 	ldr	x1, [x0, #360]
   91280:	39456c04 	ldrb	w4, [x0, #347]
   91284:	39001024 	strb	w4, [x1, #4]
   91288:	f940b401 	ldr	x1, [x0, #360]
   9128c:	39456804 	ldrb	w4, [x0, #346]
   91290:	39001424 	strb	w4, [x1, #5]
   91294:	f940b401 	ldr	x1, [x0, #360]
   91298:	39457004 	ldrb	w4, [x0, #348]
   9129c:	39001824 	strb	w4, [x1, #6]
   912a0:	f940b401 	ldr	x1, [x0, #360]
   912a4:	39457404 	ldrb	w4, [x0, #349]
   912a8:	39001c24 	strb	w4, [x1, #7]
   912ac:	f940b401 	ldr	x1, [x0, #360]
   912b0:	39457804 	ldrb	w4, [x0, #350]
   912b4:	39002024 	strb	w4, [x1, #8]
   912b8:	f940b401 	ldr	x1, [x0, #360]
   912bc:	39457c04 	ldrb	w4, [x0, #351]
   912c0:	39002424 	strb	w4, [x1, #9]
   912c4:	f940b401 	ldr	x1, [x0, #360]
   912c8:	39458004 	ldrb	w4, [x0, #352]
   912cc:	39002824 	strb	w4, [x1, #10]
   912d0:	f940b401 	ldr	x1, [x0, #360]
   912d4:	9400094f 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   912d8:	12001c13 	and	w19, w0, #0xff
   912dc:	3707fb20 	tbnz	w0, #0, 91240 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x20>
   912e0:	94004a44 	bl	a3bf0 <CLogger::Get()>
   912e4:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   912e8:	9136c021 	add	x1, x1, #0xdb0
   912ec:	9100a021 	add	x1, x1, #0x28
   912f0:	52800022 	mov	w2, #0x1                   	// #1
   912f4:	f0000103 	adrp	x3, b4000 <_etext+0x19c8>
   912f8:	911c4063 	add	x3, x3, #0x710
   912fc:	94004c31 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91300:	2a1303e0 	mov	w0, w19
   91304:	f9400bf3 	ldr	x19, [sp, #16]
   91308:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9130c:	d65f03c0 	ret
   91310:	52800003 	mov	w3, #0x0                   	// #0
   91314:	52801fe4 	mov	w4, #0xff                  	// #255
   91318:	52801e61 	mov	w1, #0xf3                  	// #243
   9131c:	17ffffd1 	b	91260 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x40>
   91320:	52801fe3 	mov	w3, #0xff                  	// #255
   91324:	52800004 	mov	w4, #0x0                   	// #0
   91328:	52801e61 	mov	w1, #0xf3                  	// #243
   9132c:	17ffffcd 	b	91260 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x40>

0000000000091330 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   91330:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91334:	7100103f 	cmp	w1, #0x4
   91338:	910003fd 	mov	x29, sp
   9133c:	f9000bf3 	str	x19, [sp, #16]
   91340:	54000b20 	b.eq	914a4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x174>  // b.none
   91344:	54000688 	b.hi	91414 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xe4>  // b.pmore
   91348:	7100083f 	cmp	w1, #0x2
   9134c:	54000d00 	b.eq	914ec <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x1bc>  // b.none
   91350:	71000c3f 	cmp	w1, #0x3
   91354:	54000840 	b.eq	9145c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x12c>  // b.none
   91358:	7100043f 	cmp	w1, #0x1
   9135c:	54000b01 	b.ne	914bc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x18c>  // b.any
   91360:	52801fe4 	mov	w4, #0xff                  	// #255
   91364:	2a0403e6 	mov	w6, w4
   91368:	52800001 	mov	w1, #0x0                   	// #0
   9136c:	52800002 	mov	w2, #0x0                   	// #0
   91370:	52800fe7 	mov	w7, #0x7f                  	// #127
   91374:	d503201f 	nop
   91378:	f940b405 	ldr	x5, [x0, #360]
   9137c:	39057001 	strb	w1, [x0, #348]
   91380:	39456401 	ldrb	w1, [x0, #345]
   91384:	52800003 	mov	w3, #0x0                   	// #0
   91388:	39057402 	strb	w2, [x0, #349]
   9138c:	52800402 	mov	w2, #0x20                  	// #32
   91390:	39057804 	strb	w4, [x0, #350]
   91394:	39057c07 	strb	w7, [x0, #351]
   91398:	39058006 	strb	w6, [x0, #352]
   9139c:	39000ca1 	strb	w1, [x5, #3]
   913a0:	f940b401 	ldr	x1, [x0, #360]
   913a4:	39456c04 	ldrb	w4, [x0, #347]
   913a8:	39001024 	strb	w4, [x1, #4]
   913ac:	f940b401 	ldr	x1, [x0, #360]
   913b0:	39456804 	ldrb	w4, [x0, #346]
   913b4:	39001424 	strb	w4, [x1, #5]
   913b8:	f940b401 	ldr	x1, [x0, #360]
   913bc:	39457004 	ldrb	w4, [x0, #348]
   913c0:	39001824 	strb	w4, [x1, #6]
   913c4:	f940b401 	ldr	x1, [x0, #360]
   913c8:	39457404 	ldrb	w4, [x0, #349]
   913cc:	39001c24 	strb	w4, [x1, #7]
   913d0:	f940b401 	ldr	x1, [x0, #360]
   913d4:	39457804 	ldrb	w4, [x0, #350]
   913d8:	39002024 	strb	w4, [x1, #8]
   913dc:	f940b401 	ldr	x1, [x0, #360]
   913e0:	39457c04 	ldrb	w4, [x0, #351]
   913e4:	39002424 	strb	w4, [x1, #9]
   913e8:	f940b401 	ldr	x1, [x0, #360]
   913ec:	39458004 	ldrb	w4, [x0, #352]
   913f0:	39002824 	strb	w4, [x1, #10]
   913f4:	f940b401 	ldr	x1, [x0, #360]
   913f8:	94000906 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   913fc:	2a0003f3 	mov	w19, w0
   91400:	360003b3 	tbz	w19, #0, 91474 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x144>
   91404:	2a1303e0 	mov	w0, w19
   91408:	f9400bf3 	ldr	x19, [sp, #16]
   9140c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91410:	d65f03c0 	ret
   91414:	7100183f 	cmp	w1, #0x6
   91418:	540005e0 	b.eq	914d4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x1a4>  // b.none
   9141c:	71001c3f 	cmp	w1, #0x7
   91420:	54000120 	b.eq	91444 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x114>  // b.none
   91424:	7100143f 	cmp	w1, #0x5
   91428:	540004a1 	b.ne	914bc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x18c>  // b.any
   9142c:	52801fe2 	mov	w2, #0xff                  	// #255
   91430:	52800001 	mov	w1, #0x0                   	// #0
   91434:	2a0203e4 	mov	w4, w2
   91438:	2a0203e6 	mov	w6, w2
   9143c:	52800fe7 	mov	w7, #0x7f                  	// #127
   91440:	17ffffce 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   91444:	52801fe1 	mov	w1, #0xff                  	// #255
   91448:	52800fe7 	mov	w7, #0x7f                  	// #127
   9144c:	2a0103e2 	mov	w2, w1
   91450:	2a0103e4 	mov	w4, w1
   91454:	2a0103e6 	mov	w6, w1
   91458:	17ffffc8 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   9145c:	52801fe1 	mov	w1, #0xff                  	// #255
   91460:	52800002 	mov	w2, #0x0                   	// #0
   91464:	2a0103e4 	mov	w4, w1
   91468:	2a0103e6 	mov	w6, w1
   9146c:	52800fe7 	mov	w7, #0x7f                  	// #127
   91470:	17ffffc2 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   91474:	940049df 	bl	a3bf0 <CLogger::Get()>
   91478:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   9147c:	9136c021 	add	x1, x1, #0xdb0
   91480:	9100a021 	add	x1, x1, #0x28
   91484:	52800022 	mov	w2, #0x1                   	// #1
   91488:	f0000103 	adrp	x3, b4000 <_etext+0x19c8>
   9148c:	911c4063 	add	x3, x3, #0x710
   91490:	94004bcc 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91494:	2a1303e0 	mov	w0, w19
   91498:	f9400bf3 	ldr	x19, [sp, #16]
   9149c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   914a0:	d65f03c0 	ret
   914a4:	52801fe2 	mov	w2, #0xff                  	// #255
   914a8:	52800001 	mov	w1, #0x0                   	// #0
   914ac:	2a0203e6 	mov	w6, w2
   914b0:	52800004 	mov	w4, #0x0                   	// #0
   914b4:	52800fe7 	mov	w7, #0x7f                  	// #127
   914b8:	17ffffb0 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   914bc:	52800001 	mov	w1, #0x0                   	// #0
   914c0:	52800002 	mov	w2, #0x0                   	// #0
   914c4:	52800004 	mov	w4, #0x0                   	// #0
   914c8:	52800007 	mov	w7, #0x0                   	// #0
   914cc:	52800006 	mov	w6, #0x0                   	// #0
   914d0:	17ffffaa 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   914d4:	52801fe1 	mov	w1, #0xff                  	// #255
   914d8:	52800004 	mov	w4, #0x0                   	// #0
   914dc:	2a0103e2 	mov	w2, w1
   914e0:	2a0103e6 	mov	w6, w1
   914e4:	52800fe7 	mov	w7, #0x7f                  	// #127
   914e8:	17ffffa4 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   914ec:	52801fe1 	mov	w1, #0xff                  	// #255
   914f0:	52800002 	mov	w2, #0x0                   	// #0
   914f4:	2a0103e6 	mov	w6, w1
   914f8:	52800004 	mov	w4, #0x0                   	// #0
   914fc:	52800fe7 	mov	w7, #0x7f                  	// #127
   91500:	17ffff9e 	b	91378 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x48>
   91504:	d503201f 	nop
   91508:	d503201f 	nop
   9150c:	d503201f 	nop

0000000000091510 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   91510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91514:	910003fd 	mov	x29, sp
   91518:	f9000bf3 	str	x19, [sp, #16]
   9151c:	aa0003f3 	mov	x19, x0
   91520:	940035a0 	bl	9eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   91524:	900001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   91528:	91166000 	add	x0, x0, #0x598
   9152c:	f9000260 	str	x0, [x19]
   91530:	52800003 	mov	w3, #0x0                   	// #0
   91534:	aa1303e0 	mov	x0, x19
   91538:	52800002 	mov	w2, #0x0                   	// #0
   9153c:	52800061 	mov	w1, #0x3                   	// #3
   91540:	97fffc78 	bl	90720 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   91544:	39056260 	strb	w0, [x19, #344]
   91548:	a916fe7f 	stp	xzr, xzr, [x19, #360]
   9154c:	7902f27f 	strh	wzr, [x19, #376]
   91550:	f9400bf3 	ldr	x19, [sp, #16]
   91554:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91558:	d65f03c0 	ret
   9155c:	d503201f 	nop

0000000000091560 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   91560:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91564:	910003fd 	mov	x29, sp
   91568:	a90153f3 	stp	x19, x20, [sp, #16]
   9156c:	aa0003f3 	mov	x19, x0
   91570:	a9025bf5 	stp	x21, x22, [sp, #32]
   91574:	aa0103f5 	mov	x21, x1
   91578:	3945e264 	ldrb	w4, [x19, #376]
   9157c:	39401c20 	ldrb	w0, [x1, #7]
   91580:	37080980 	tbnz	w0, #1, 916b0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
   91584:	370009c4 	tbnz	w4, #0, 916bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x15c>
   91588:	394086b6 	ldrb	w22, [x21, #33]
   9158c:	39408ea0 	ldrb	w0, [x21, #35]
   91590:	510006c1 	sub	w1, w22, #0x1
   91594:	71000c3f 	cmp	w1, #0x3
   91598:	1a9f36d6 	csinc	w22, w22, wzr, cc	// cc = lo, ul, last
   9159c:	37380a20 	tbnz	w0, #7, 916e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   915a0:	52800014 	mov	w20, #0x0                   	// #0
   915a4:	d2800002 	mov	x2, #0x0                   	// #0
   915a8:	8b020c42 	add	x2, x2, x2, lsl #3
   915ac:	3945e665 	ldrb	w5, [x19, #377]
   915b0:	8b0202a2 	add	x2, x21, x2
   915b4:	39409441 	ldrb	w1, [x2, #37]
   915b8:	39409443 	ldrb	w3, [x2, #37]
   915bc:	39409840 	ldrb	w0, [x2, #38]
   915c0:	39409046 	ldrb	w6, [x2, #36]
   915c4:	d3441c21 	ubfx	x1, x1, #4, #4
   915c8:	d3780c62 	ubfiz	x2, x3, #8, #4
   915cc:	2a001020 	orr	w0, w1, w0, lsl #4
   915d0:	2a060042 	orr	w2, w2, w6
   915d4:	36000505 	tbz	w5, #0, 91674 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x114>
   915d8:	7942fa61 	ldrh	w1, [x19, #380]
   915dc:	52800fe6 	mov	w6, #0x7f                  	// #127
   915e0:	7942f667 	ldrh	w7, [x19, #378]
   915e4:	12800fc5 	mov	w5, #0xffffff81            	// #-127
   915e8:	4b010003 	sub	w3, w0, w1
   915ec:	7902f662 	strh	w2, [x19, #378]
   915f0:	6b06007f 	cmp	w3, w6
   915f4:	7902fa60 	strh	w0, [x19, #380]
   915f8:	1a86d063 	csel	w3, w3, w6, le
   915fc:	6b05007f 	cmp	w3, w5
   91600:	1a85a063 	csel	w3, w3, w5, ge	// ge = tcont
   91604:	7100009f 	cmp	w4, #0x0
   91608:	7a470040 	ccmp	w2, w7, #0x0, eq	// eq = none
   9160c:	54000721 	b.ne	916f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x190>  // b.any
   91610:	6b01001f 	cmp	w0, w1
   91614:	52800002 	mov	w2, #0x0                   	// #0
   91618:	540000c0 	b.eq	91630 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd0>  // b.none
   9161c:	f940ba60 	ldr	x0, [x19, #368]
   91620:	b40003c0 	cbz	x0, 91698 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x138>
   91624:	3945e261 	ldrb	w1, [x19, #376]
   91628:	52800004 	mov	w4, #0x0                   	// #0
   9162c:	94003dd5 	bl	a0d80 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   91630:	11000694 	add	w20, w20, #0x1
   91634:	6b1402df 	cmp	w22, w20
   91638:	54000160 	b.eq	91664 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x104>  // b.none
   9163c:	2a1403e2 	mov	w2, w20
   91640:	8b344c40 	add	x0, x2, w20, uxtw #3
   91644:	8b0002a0 	add	x0, x21, x0
   91648:	39408c00 	ldrb	w0, [x0, #35]
   9164c:	d3471c04 	ubfx	x4, x0, #7, #1
   91650:	363ffac0 	tbz	w0, #7, 915a8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   91654:	3905e67f 	strb	wzr, [x19, #377]
   91658:	11000694 	add	w20, w20, #0x1
   9165c:	6b1402df 	cmp	w22, w20
   91660:	54fffee1 	b.ne	9163c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xdc>  // b.any
   91664:	a94153f3 	ldp	x19, x20, [sp, #16]
   91668:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9166c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91670:	d65f03c0 	ret
   91674:	52800021 	mov	w1, #0x1                   	// #1
   91678:	3905e661 	strb	w1, [x19, #377]
   9167c:	7902f662 	strh	w2, [x19, #378]
   91680:	7902fa60 	strh	w0, [x19, #380]
   91684:	3607fd64 	tbz	w4, #0, 91630 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd0>
   91688:	f940ba60 	ldr	x0, [x19, #368]
   9168c:	52800003 	mov	w3, #0x0                   	// #0
   91690:	52800002 	mov	w2, #0x0                   	// #0
   91694:	b5fffc80 	cbnz	x0, 91624 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xc4>
   91698:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9169c:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   916a0:	911cc021 	add	x1, x1, #0x730
   916a4:	911d2000 	add	x0, x0, #0x748
   916a8:	52802b42 	mov	w2, #0x15a                 	// #346
   916ac:	94004215 	bl	a1f00 <assertion_failed>
   916b0:	12000081 	and	w1, w4, #0x1
   916b4:	52800004 	mov	w4, #0x0                   	// #0
   916b8:	35fff681 	cbnz	w1, 91588 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   916bc:	d3410400 	ubfx	x0, x0, #1, #1
   916c0:	3905e260 	strb	w0, [x19, #376]
   916c4:	52800024 	mov	w4, #0x1                   	// #1
   916c8:	394086b6 	ldrb	w22, [x21, #33]
   916cc:	39408ea0 	ldrb	w0, [x21, #35]
   916d0:	510006c1 	sub	w1, w22, #0x1
   916d4:	71000c3f 	cmp	w1, #0x3
   916d8:	1a9f36d6 	csinc	w22, w22, wzr, cc	// cc = lo, ul, last
   916dc:	363ff620 	tbz	w0, #7, 915a0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x40>
   916e0:	3905e67f 	strb	wzr, [x19, #377]
   916e4:	52800014 	mov	w20, #0x0                   	// #0
   916e8:	3707fd04 	tbnz	w4, #0, 91688 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x128>
   916ec:	17ffffd1 	b	91630 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd0>
   916f0:	4b070042 	sub	w2, w2, w7
   916f4:	6b06005f 	cmp	w2, w6
   916f8:	1a86d042 	csel	w2, w2, w6, le
   916fc:	6b05005f 	cmp	w2, w5
   91700:	1a85a042 	csel	w2, w2, w5, ge	// ge = tcont
   91704:	17ffffc6 	b	9161c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   91708:	d503201f 	nop
   9170c:	d503201f 	nop

0000000000091710 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   91710:	7101005f 	cmp	w2, #0x40
   91714:	fa400824 	ccmp	x1, #0x0, #0x4, eq	// eq = none
   91718:	54000041 	b.ne	91720 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x10>  // b.any
   9171c:	d65f03c0 	ret
   91720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91724:	910003fd 	mov	x29, sp
   91728:	f9400002 	ldr	x2, [x0]
   9172c:	a90153f3 	stp	x19, x20, [sp, #16]
   91730:	aa0003f3 	mov	x19, x0
   91734:	aa0103f4 	mov	x20, x1
   91738:	f9404842 	ldr	x2, [x2, #144]
   9173c:	d63f0040 	blr	x2
   91740:	f940a662 	ldr	x2, [x19, #328]
   91744:	b40000a2 	cbz	x2, 91758 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x48>
   91748:	b9415660 	ldr	w0, [x19, #340]
   9174c:	91012261 	add	x1, x19, #0x48
   91750:	51000400 	sub	w0, w0, #0x1
   91754:	d63f0040 	blr	x2
   91758:	f940ba60 	ldr	x0, [x19, #368]
   9175c:	b40000c0 	cbz	x0, 91774 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x64>
   91760:	aa1403e1 	mov	x1, x20
   91764:	aa1303e0 	mov	x0, x19
   91768:	a94153f3 	ldp	x19, x20, [sp, #16]
   9176c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91770:	17ffff7c 	b	91560 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>
   91774:	a94153f3 	ldp	x19, x20, [sp, #16]
   91778:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9177c:	d65f03c0 	ret

0000000000091780 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   91780:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91784:	52800003 	mov	w3, #0x0                   	// #0
   91788:	52800402 	mov	w2, #0x20                  	// #32
   9178c:	910003fd 	mov	x29, sp
   91790:	f940b404 	ldr	x4, [x0, #360]
   91794:	f9000bf3 	str	x19, [sp, #16]
   91798:	39456405 	ldrb	w5, [x0, #345]
   9179c:	39000c85 	strb	w5, [x4, #3]
   917a0:	f940b404 	ldr	x4, [x0, #360]
   917a4:	39456c05 	ldrb	w5, [x0, #347]
   917a8:	39001085 	strb	w5, [x4, #4]
   917ac:	f940b404 	ldr	x4, [x0, #360]
   917b0:	39456805 	ldrb	w5, [x0, #346]
   917b4:	39001485 	strb	w5, [x4, #5]
   917b8:	f940b404 	ldr	x4, [x0, #360]
   917bc:	39457005 	ldrb	w5, [x0, #348]
   917c0:	39001885 	strb	w5, [x4, #6]
   917c4:	f940b404 	ldr	x4, [x0, #360]
   917c8:	39457405 	ldrb	w5, [x0, #349]
   917cc:	39001c85 	strb	w5, [x4, #7]
   917d0:	f940b404 	ldr	x4, [x0, #360]
   917d4:	39457805 	ldrb	w5, [x0, #350]
   917d8:	39002085 	strb	w5, [x4, #8]
   917dc:	f940b404 	ldr	x4, [x0, #360]
   917e0:	39457c05 	ldrb	w5, [x0, #351]
   917e4:	39002485 	strb	w5, [x4, #9]
   917e8:	f940b404 	ldr	x4, [x0, #360]
   917ec:	39458005 	ldrb	w5, [x0, #352]
   917f0:	39002885 	strb	w5, [x4, #10]
   917f4:	f940b401 	ldr	x1, [x0, #360]
   917f8:	94000806 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   917fc:	2a0003f3 	mov	w19, w0
   91800:	360000b3 	tbz	w19, #0, 91814 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x94>
   91804:	2a1303e0 	mov	w0, w19
   91808:	f9400bf3 	ldr	x19, [sp, #16]
   9180c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91810:	d65f03c0 	ret
   91814:	940048f7 	bl	a3bf0 <CLogger::Get()>
   91818:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   9181c:	9136c021 	add	x1, x1, #0xdb0
   91820:	9100a021 	add	x1, x1, #0x28
   91824:	52800022 	mov	w2, #0x1                   	// #1
   91828:	f0000103 	adrp	x3, b4000 <_etext+0x19c8>
   9182c:	911c4063 	add	x3, x3, #0x710
   91830:	94004ae4 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91834:	2a1303e0 	mov	w0, w19
   91838:	f9400bf3 	ldr	x19, [sp, #16]
   9183c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91840:	d65f03c0 	ret
   91844:	d503201f 	nop
   91848:	d503201f 	nop
   9184c:	d503201f 	nop

0000000000091850 <CUSBGamePadPS4Device::DisableTouchpad()>:
   91850:	900001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   91854:	3916001f 	strb	wzr, [x0, #1408]
   91858:	d65f03c0 	ret
   9185c:	d503201f 	nop

0000000000091860 <CUSBGamePadPS4Device::Configure()>:
   91860:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91864:	910003fd 	mov	x29, sp
   91868:	39456001 	ldrb	w1, [x0, #344]
   9186c:	36000721 	tbz	w1, #0, 91950 <CUSBGamePadPS4Device::Configure()+0xf0>
   91870:	a90153f3 	stp	x19, x20, [sp, #16]
   91874:	52800801 	mov	w1, #0x40                  	// #64
   91878:	aa0003f3 	mov	x19, x0
   9187c:	7902a001 	strh	w1, [x0, #336]
   91880:	94003460 	bl	9ea00 <CUSBGamePadDevice::Configure()>
   91884:	36000840 	tbz	w0, #0, 9198c <CUSBGamePadPS4Device::Configure()+0x12c>
   91888:	900001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9188c:	39560000 	ldrb	w0, [x0, #1408]
   91890:	370006e0 	tbnz	w0, #0, 9196c <CUSBGamePadPS4Device::Configure()+0x10c>
   91894:	91014261 	add	x1, x19, #0x50
   91898:	91026262 	add	x2, x19, #0x98
   9189c:	528002c3 	mov	w3, #0x16                  	// #22
   918a0:	52800024 	mov	w4, #0x1                   	// #1
   918a4:	528000c5 	mov	w5, #0x6                   	// #6
   918a8:	52801fe0 	mov	w0, #0xff                  	// #255
   918ac:	b9004a65 	str	w5, [x19, #72]
   918b0:	b9010e64 	str	w4, [x19, #268]
   918b4:	b9012a63 	str	w3, [x19, #296]
   918b8:	2900003f 	stp	wzr, w0, [x1]
   918bc:	91003021 	add	x1, x1, #0xc
   918c0:	eb02003f 	cmp	x1, x2
   918c4:	54ffffa1 	b.ne	918b8 <CUSBGamePadPS4Device::Configure()+0x58>  // b.any
   918c8:	d2800400 	mov	x0, #0x20                  	// #32
   918cc:	940068a1 	bl	abb50 <operator new[](unsigned long)>
   918d0:	f900b660 	str	x0, [x19, #360]
   918d4:	d2800402 	mov	x2, #0x20                  	// #32
   918d8:	52800001 	mov	w1, #0x0                   	// #0
   918dc:	94006623 	bl	ab168 <memset>
   918e0:	f940b661 	ldr	x1, [x19, #360]
   918e4:	528000a4 	mov	w4, #0x5                   	// #5
   918e8:	528000e6 	mov	w6, #0x7                   	// #7
   918ec:	52800085 	mov	w5, #0x4                   	// #4
   918f0:	128001e3 	mov	w3, #0xfffffff0            	// #-16
   918f4:	12b00002 	mov	w2, #0x7fffffff            	// #2147483647
   918f8:	39000024 	strb	w4, [x1]
   918fc:	12800001 	mov	w1, #0xffffffff            	// #-1
   91900:	aa1303e0 	mov	x0, x19
   91904:	f940b664 	ldr	x4, [x19, #360]
   91908:	39000486 	strb	w6, [x4, #1]
   9190c:	f940b664 	ldr	x4, [x19, #360]
   91910:	39000885 	strb	w5, [x4, #2]
   91914:	39056663 	strb	w3, [x19, #345]
   91918:	7902b67f 	strh	wzr, [x19, #346]
   9191c:	b9015e62 	str	w2, [x19, #348]
   91920:	39058261 	strb	w1, [x19, #352]
   91924:	97ffff97 	bl	91780 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   91928:	7902ba7f 	strh	wzr, [x19, #348]
   9192c:	39057a7f 	strb	wzr, [x19, #350]
   91930:	52801f40 	mov	w0, #0xfa                  	// #250
   91934:	9400640b 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   91938:	aa1303e0 	mov	x0, x19
   9193c:	97ffff91 	bl	91780 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   91940:	aa1303e0 	mov	x0, x19
   91944:	a94153f3 	ldp	x19, x20, [sp, #16]
   91948:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9194c:	14000841 	b	93a50 <CUSBHIDDevice::StartRequest()>
   91950:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   91954:	9136c021 	add	x1, x1, #0xdb0
   91958:	9100a021 	add	x1, x1, #0x28
   9195c:	97fffb5d 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   91960:	52800000 	mov	w0, #0x0                   	// #0
   91964:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91968:	d65f03c0 	ret
   9196c:	d2800a00 	mov	x0, #0x50                  	// #80
   91970:	94006870 	bl	abb30 <operator new(unsigned long)>
   91974:	52800002 	mov	w2, #0x0                   	// #0
   91978:	aa0003f4 	mov	x20, x0
   9197c:	52800021 	mov	w1, #0x1                   	// #1
   91980:	94003ca0 	bl	a0c00 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   91984:	f900ba74 	str	x20, [x19, #368]
   91988:	17ffffc3 	b	91894 <CUSBGamePadPS4Device::Configure()+0x34>
   9198c:	94004899 	bl	a3bf0 <CLogger::Get()>
   91990:	d0000121 	adrp	x1, b7000 <_etext+0x49c8>
   91994:	9136c021 	add	x1, x1, #0xdb0
   91998:	9100a021 	add	x1, x1, #0x28
   9199c:	52800022 	mov	w2, #0x1                   	// #1
   919a0:	f0000103 	adrp	x3, b4000 <_etext+0x19c8>
   919a4:	911a8063 	add	x3, x3, #0x6a0
   919a8:	94004a86 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   919ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   919b0:	52800000 	mov	w0, #0x0                   	// #0
   919b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   919b8:	d65f03c0 	ret
   919bc:	00000000 	udf	#0

00000000000919c0 <CUSBGamePadPS4Device::GetProperties()>:
   919c0:	528007e0 	mov	w0, #0x3f                  	// #63
   919c4:	d65f03c0 	ret
	...

00000000000919d0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   919d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   919d4:	900001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   919d8:	91190021 	add	x1, x1, #0x640
   919dc:	910003fd 	mov	x29, sp
   919e0:	f9000bf3 	str	x19, [sp, #16]
   919e4:	aa0003f3 	mov	x19, x0
   919e8:	f940b000 	ldr	x0, [x0, #352]
   919ec:	f9000261 	str	x1, [x19]
   919f0:	b4000040 	cbz	x0, 919f8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x28>
   919f4:	94006867 	bl	abb90 <operator delete[](void*)>
   919f8:	f900b27f 	str	xzr, [x19, #352]
   919fc:	aa1303e0 	mov	x0, x19
   91a00:	f9400bf3 	ldr	x19, [sp, #16]
   91a04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91a08:	1400347a 	b	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   91a0c:	d503201f 	nop

0000000000091a10 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   91a10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91a14:	900001c1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   91a18:	91190021 	add	x1, x1, #0x640
   91a1c:	910003fd 	mov	x29, sp
   91a20:	f9000bf3 	str	x19, [sp, #16]
   91a24:	aa0003f3 	mov	x19, x0
   91a28:	f940b000 	ldr	x0, [x0, #352]
   91a2c:	f9000261 	str	x1, [x19]
   91a30:	b4000040 	cbz	x0, 91a38 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x28>
   91a34:	94006857 	bl	abb90 <operator delete[](void*)>
   91a38:	f900b27f 	str	xzr, [x19, #352]
   91a3c:	aa1303e0 	mov	x0, x19
   91a40:	9400346c 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   91a44:	aa1303e0 	mov	x0, x19
   91a48:	d2802e01 	mov	x1, #0x170                 	// #368
   91a4c:	f9400bf3 	ldr	x19, [sp, #16]
   91a50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91a54:	14006857 	b	abbb0 <operator delete(void*, unsigned long)>
   91a58:	d503201f 	nop
   91a5c:	d503201f 	nop

0000000000091a60 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   91a60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91a64:	910003fd 	mov	x29, sp
   91a68:	a90153f3 	stp	x19, x20, [sp, #16]
   91a6c:	aa0003f3 	mov	x19, x0
   91a70:	12001c54 	and	w20, w2, #0xff
   91a74:	9400344b 	bl	9eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   91a78:	900001c0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   91a7c:	91190000 	add	x0, x0, #0x640
   91a80:	f9000260 	str	x0, [x19]
   91a84:	39056274 	strb	w20, [x19, #344]
   91a88:	f900b27f 	str	xzr, [x19, #352]
   91a8c:	7902d27f 	strh	wzr, [x19, #360]
   91a90:	a94153f3 	ldp	x19, x20, [sp, #16]
   91a94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91a98:	d65f03c0 	ret
   91a9c:	d503201f 	nop

0000000000091aa0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   91aa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91aa4:	910003fd 	mov	x29, sp
   91aa8:	b40003e0 	cbz	x0, 91b24 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x84>
   91aac:	7100805f 	cmp	w2, #0x20
   91ab0:	54000468 	b.hi	91b3c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x9c>  // b.pmore
   91ab4:	aa0003e3 	mov	x3, x0
   91ab8:	52800000 	mov	w0, #0x0                   	// #0
   91abc:	34000242 	cbz	w2, 91b04 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x64>
   91ac0:	53037c20 	lsr	w0, w1, #3
   91ac4:	12000821 	and	w1, w1, #0x7
   91ac8:	aa0003e4 	mov	x4, x0
   91acc:	8b000060 	add	x0, x3, x0
   91ad0:	7100605f 	cmp	w2, #0x18
   91ad4:	b8644863 	ldr	w3, [x3, w4, uxtw]
   91ad8:	1ac12463 	lsr	w3, w3, w1
   91adc:	54000189 	b.ls	91b0c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x6c>  // b.plast
   91ae0:	b8403004 	ldur	w4, [x0, #3]
   91ae4:	51006042 	sub	w2, w2, #0x18
   91ae8:	52800020 	mov	w0, #0x1                   	// #1
   91aec:	12005c63 	and	w3, w3, #0xffffff
   91af0:	1ac22000 	lsl	w0, w0, w2
   91af4:	51000400 	sub	w0, w0, #0x1
   91af8:	1ac12481 	lsr	w1, w4, w1
   91afc:	0a010000 	and	w0, w0, w1
   91b00:	2a006060 	orr	w0, w3, w0, lsl #24
   91b04:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91b08:	d65f03c0 	ret
   91b0c:	52800020 	mov	w0, #0x1                   	// #1
   91b10:	1ac22000 	lsl	w0, w0, w2
   91b14:	51000400 	sub	w0, w0, #0x1
   91b18:	0a030000 	and	w0, w0, w3
   91b1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91b20:	d65f03c0 	ret
   91b24:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91b28:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91b2c:	911d8021 	add	x1, x1, #0x760
   91b30:	911de000 	add	x0, x0, #0x778
   91b34:	52802642 	mov	w2, #0x132                 	// #306
   91b38:	940040f2 	bl	a1f00 <assertion_failed>
   91b3c:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91b40:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91b44:	911d8021 	add	x1, x1, #0x760
   91b48:	911e2000 	add	x0, x0, #0x788
   91b4c:	52802662 	mov	w2, #0x133                 	// #307
   91b50:	940040ec 	bl	a1f00 <assertion_failed>
   91b54:	d503201f 	nop
   91b58:	d503201f 	nop
   91b5c:	d503201f 	nop

0000000000091b60 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   91b60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91b64:	910003fd 	mov	x29, sp
   91b68:	b40005e0 	cbz	x0, 91c24 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xc4>
   91b6c:	7100805f 	cmp	w2, #0x20
   91b70:	54000668 	b.hi	91c3c <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xdc>  // b.pmore
   91b74:	aa0003e3 	mov	x3, x0
   91b78:	52800000 	mov	w0, #0x0                   	// #0
   91b7c:	34000362 	cbz	w2, 91be8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>
   91b80:	53037c20 	lsr	w0, w1, #3
   91b84:	12000821 	and	w1, w1, #0x7
   91b88:	8b000064 	add	x4, x3, x0
   91b8c:	7100605f 	cmp	w2, #0x18
   91b90:	b8604860 	ldr	w0, [x3, w0, uxtw]
   91b94:	1ac12403 	lsr	w3, w0, w1
   91b98:	540002c9 	b.ls	91bf0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x90>  // b.plast
   91b9c:	b8403084 	ldur	w4, [x4, #3]
   91ba0:	51006045 	sub	w5, w2, #0x18
   91ba4:	52800020 	mov	w0, #0x1                   	// #1
   91ba8:	12005c63 	and	w3, w3, #0xffffff
   91bac:	1ac52000 	lsl	w0, w0, w5
   91bb0:	51000400 	sub	w0, w0, #0x1
   91bb4:	1ac12481 	lsr	w1, w4, w1
   91bb8:	0a010000 	and	w0, w0, w1
   91bbc:	7100805f 	cmp	w2, #0x20
   91bc0:	2a006060 	orr	w0, w3, w0, lsl #24
   91bc4:	54000120 	b.eq	91be8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>  // b.none
   91bc8:	51000443 	sub	w3, w2, #0x1
   91bcc:	52800021 	mov	w1, #0x1                   	// #1
   91bd0:	1ac22022 	lsl	w2, w1, w2
   91bd4:	4b0203e2 	neg	w2, w2
   91bd8:	2a020002 	orr	w2, w0, w2
   91bdc:	1ac32021 	lsl	w1, w1, w3
   91be0:	6a00003f 	tst	w1, w0
   91be4:	1a801040 	csel	w0, w2, w0, ne	// ne = any
   91be8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91bec:	d65f03c0 	ret
   91bf0:	52800020 	mov	w0, #0x1                   	// #1
   91bf4:	52800021 	mov	w1, #0x1                   	// #1
   91bf8:	1ac22000 	lsl	w0, w0, w2
   91bfc:	51000400 	sub	w0, w0, #0x1
   91c00:	0a030000 	and	w0, w0, w3
   91c04:	51000443 	sub	w3, w2, #0x1
   91c08:	1ac22022 	lsl	w2, w1, w2
   91c0c:	4b0203e2 	neg	w2, w2
   91c10:	2a020002 	orr	w2, w0, w2
   91c14:	1ac32021 	lsl	w1, w1, w3
   91c18:	6a00003f 	tst	w1, w0
   91c1c:	1a801040 	csel	w0, w2, w0, ne	// ne = any
   91c20:	17fffff2 	b	91be8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>
   91c24:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91c28:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91c2c:	911d8021 	add	x1, x1, #0x760
   91c30:	911de000 	add	x0, x0, #0x778
   91c34:	52802aa2 	mov	w2, #0x155                 	// #341
   91c38:	940040b2 	bl	a1f00 <assertion_failed>
   91c3c:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91c40:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91c44:	911d8021 	add	x1, x1, #0x760
   91c48:	911e2000 	add	x0, x0, #0x788
   91c4c:	52802ac2 	mov	w2, #0x156                 	// #342
   91c50:	940040ac 	bl	a1f00 <assertion_failed>
   91c54:	d503201f 	nop
   91c58:	d503201f 	nop
   91c5c:	d503201f 	nop

0000000000091c60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   91c60:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   91c64:	910003fd 	mov	x29, sp
   91c68:	a90153f3 	stp	x19, x20, [sp, #16]
   91c6c:	f940b014 	ldr	x20, [x0, #352]
   91c70:	a9025bf5 	stp	x21, x22, [sp, #32]
   91c74:	b4001634 	cbz	x20, 91f38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2d8>
   91c78:	7942d013 	ldrh	w19, [x0, #360]
   91c7c:	aa0003f6 	mov	x22, x0
   91c80:	a90573fb 	stp	x27, x28, [sp, #80]
   91c84:	34001e73 	cbz	w19, 92050 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3f0>
   91c88:	aa0103f5 	mov	x21, x1
   91c8c:	a9046bf9 	stp	x25, x26, [sp, #64]
   91c90:	52865d79 	mov	w25, #0x32eb                	// #13035
   91c94:	72bf1499 	movk	w25, #0xf8a4, lsl #16
   91c98:	2a1903e7 	mov	w7, w25
   91c9c:	2a1903e5 	mov	w5, w25
   91ca0:	2a1903e4 	mov	w4, w25
   91ca4:	52800009 	mov	w9, #0x0                   	// #0
   91ca8:	5280001c 	mov	w28, #0x0                   	// #0
   91cac:	52800006 	mov	w6, #0x0                   	// #0
   91cb0:	5280001b 	mov	w27, #0x0                   	// #0
   91cb4:	5280001a 	mov	w26, #0x0                   	// #0
   91cb8:	a90363f7 	stp	x23, x24, [sp, #48]
   91cbc:	52800017 	mov	w23, #0x0                   	// #0
   91cc0:	52800018 	mov	w24, #0x0                   	// #0
   91cc4:	d503201f 	nop
   91cc8:	39c00282 	ldrsb	w2, [x20]
   91ccc:	12000443 	and	w3, w2, #0x3
   91cd0:	7100047f 	cmp	w3, #0x1
   91cd4:	540009e0 	b.eq	91e10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b0>  // b.none
   91cd8:	7100087f 	cmp	w3, #0x2
   91cdc:	540008c0 	b.eq	91df4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x194>  // b.none
   91ce0:	35000723 	cbnz	w3, 91dc4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x164>
   91ce4:	51000673 	sub	w19, w19, #0x1
   91ce8:	91000694 	add	x20, x20, #0x1
   91cec:	12003e73 	and	w19, w19, #0xffff
   91cf0:	121e1442 	and	w2, w2, #0xfc
   91cf4:	7102105f 	cmp	w2, #0x84
   91cf8:	54000400 	b.eq	91d78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x118>  // b.none
   91cfc:	7100d05f 	cmp	w2, #0x34
   91d00:	54000c20 	b.eq	91e84 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>  // b.none
   91d04:	540004ec 	b.gt	91da0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>
   91d08:	7100505f 	cmp	w2, #0x14
   91d0c:	54000b60 	b.eq	91e78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x218>  // b.none
   91d10:	54000acc 	b.gt	91e68 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x208>
   91d14:	7100105f 	cmp	w2, #0x4
   91d18:	54000860 	b.eq	91e24 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c4>  // b.none
   91d1c:	7100205f 	cmp	w2, #0x8
   91d20:	54000101 	b.ne	91d40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>  // b.any
   91d24:	7100d87f 	cmp	w3, #0x36
   91d28:	54000bac 	b.gt	91e9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   91d2c:	7100bc7f 	cmp	w3, #0x2f
   91d30:	54000fac 	b.gt	91f24 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2c4>
   91d34:	51001063 	sub	w3, w3, #0x4
   91d38:	7100047f 	cmp	w3, #0x1
   91d3c:	1a9f8529 	csinc	w9, w9, wzr, hi	// hi = pmore
   91d40:	35fffc53 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91d44:	d503201f 	nop
   91d48:	11001f18 	add	w24, w24, #0x7
   91d4c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91d50:	d3434b13 	ubfx	x19, x24, #3, #16
   91d54:	a94363f7 	ldp	x23, x24, [sp, #48]
   91d58:	b9004ac6 	str	w6, [x22, #72]
   91d5c:	b9010edc 	str	w28, [x22, #268]
   91d60:	7902a2d3 	strh	w19, [x22, #336]
   91d64:	a94153f3 	ldp	x19, x20, [sp, #16]
   91d68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91d6c:	a94573fb 	ldp	x27, x28, [sp, #80]
   91d70:	a8c97bfd 	ldp	x29, x30, [sp], #144
   91d74:	d65f03c0 	ret
   91d78:	35000f37 	cbnz	w23, 91f5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2fc>
   91d7c:	b4000c95 	cbz	x21, 91f0c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2ac>
   91d80:	394002a0 	ldrb	w0, [x21]
   91d84:	7100001f 	cmp	w0, #0x0
   91d88:	7a431004 	ccmp	w0, w3, #0x4, ne	// ne = any
   91d8c:	54000f21 	b.ne	91f70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x310>  // b.any
   91d90:	2a0303f7 	mov	w23, w3
   91d94:	52800118 	mov	w24, #0x8                   	// #8
   91d98:	35fff993 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91d9c:	17ffffeb 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91da0:	7102005f 	cmp	w2, #0x80
   91da4:	540004c0 	b.eq	91e3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1dc>  // b.none
   91da8:	5400058c 	b.gt	91e58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f8>
   91dac:	7101105f 	cmp	w2, #0x44
   91db0:	54000700 	b.eq	91e90 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x230>  // b.none
   91db4:	7101d05f 	cmp	w2, #0x74
   91db8:	1a83135a 	csel	w26, w26, w3, ne	// ne = any
   91dbc:	35fff873 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91dc0:	17ffffe2 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91dc4:	39c00e81 	ldrsb	w1, [x20, #3]
   91dc8:	51001673 	sub	w19, w19, #0x5
   91dcc:	39c00a83 	ldrsb	w3, [x20, #2]
   91dd0:	12003e73 	and	w19, w19, #0xffff
   91dd4:	39c01280 	ldrsb	w0, [x20, #4]
   91dd8:	91001694 	add	x20, x20, #0x5
   91ddc:	38dfc28a 	ldursb	w10, [x20, #-4]
   91de0:	53103c21 	lsl	w1, w1, #16
   91de4:	2a032023 	orr	w3, w1, w3, lsl #8
   91de8:	2a006140 	orr	w0, w10, w0, lsl #24
   91dec:	2a000063 	orr	w3, w3, w0
   91df0:	17ffffc0 	b	91cf0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   91df4:	39400680 	ldrb	w0, [x20, #1]
   91df8:	51000e73 	sub	w19, w19, #0x3
   91dfc:	39c00a83 	ldrsb	w3, [x20, #2]
   91e00:	12003e73 	and	w19, w19, #0xffff
   91e04:	91000e94 	add	x20, x20, #0x3
   91e08:	2a032003 	orr	w3, w0, w3, lsl #8
   91e0c:	17ffffb9 	b	91cf0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   91e10:	51000a73 	sub	w19, w19, #0x2
   91e14:	39c00683 	ldrsb	w3, [x20, #1]
   91e18:	12003e73 	and	w19, w19, #0xffff
   91e1c:	91000a94 	add	x20, x20, #0x2
   91e20:	17ffffb4 	b	91cf0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   91e24:	7100053f 	cmp	w9, #0x1
   91e28:	52800040 	mov	w0, #0x2                   	// #2
   91e2c:	7a490860 	ccmp	w3, #0x9, #0x0, eq	// eq = none
   91e30:	1a801129 	csel	w9, w9, w0, ne	// ne = any
   91e34:	35fff4b3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e38:	17ffffc4 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e3c:	12000463 	and	w3, w3, #0x3
   91e40:	1b1b7f4a 	mul	w10, w26, w27
   91e44:	7100087f 	cmp	w3, #0x2
   91e48:	54000380 	b.eq	91eb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x258>  // b.none
   91e4c:	0b0a0318 	add	w24, w24, w10
   91e50:	35fff3d3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e54:	17ffffbd 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e58:	7102505f 	cmp	w2, #0x94
   91e5c:	1a83137b 	csel	w27, w27, w3, ne	// ne = any
   91e60:	35fff353 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e64:	17ffffb9 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e68:	7100905f 	cmp	w2, #0x24
   91e6c:	1a831084 	csel	w4, w4, w3, ne	// ne = any
   91e70:	35fff2d3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e74:	17ffffb5 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e78:	2a0303e5 	mov	w5, w3
   91e7c:	35fff273 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e80:	17ffffb2 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e84:	2a0303e7 	mov	w7, w3
   91e88:	35fff213 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e8c:	17ffffaf 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e90:	2a0303f9 	mov	w25, w3
   91e94:	35fff1b3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91e98:	17ffffac 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91e9c:	7100e47f 	cmp	w3, #0x39
   91ea0:	54fff501 	b.ne	91d40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>  // b.any
   91ea4:	7100053f 	cmp	w9, #0x1
   91ea8:	52800080 	mov	w0, #0x4                   	// #4
   91eac:	1a801129 	csel	w9, w9, w0, ne	// ne = any
   91eb0:	35fff0d3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91eb4:	17ffffa5 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91eb8:	71000d3f 	cmp	w9, #0x3
   91ebc:	54000600 	b.eq	91f7c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x31c>  // b.none
   91ec0:	7100113f 	cmp	w9, #0x4
   91ec4:	54000cc0 	b.eq	9205c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3fc>  // b.none
   91ec8:	7100093f 	cmp	w9, #0x2
   91ecc:	54fffc01 	b.ne	91e4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1ec>  // b.any
   91ed0:	b9012adb 	str	w27, [x22, #296]
   91ed4:	2a0a03e2 	mov	w2, w10
   91ed8:	2a1803e1 	mov	w1, w24
   91edc:	aa1503e0 	mov	x0, x21
   91ee0:	290c1fea 	stp	w10, w7, [sp, #96]
   91ee4:	290d13e5 	stp	w5, w4, [sp, #104]
   91ee8:	b90073e6 	str	w6, [sp, #112]
   91eec:	97fffeed 	bl	91aa0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   91ef0:	294c1fea 	ldp	w10, w7, [sp, #96]
   91ef4:	52800029 	mov	w9, #0x1                   	// #1
   91ef8:	294d13e5 	ldp	w5, w4, [sp, #104]
   91efc:	0b0a0318 	add	w24, w24, w10
   91f00:	b94073e6 	ldr	w6, [sp, #112]
   91f04:	b9012ec0 	str	w0, [x22, #300]
   91f08:	17ffffd2 	b	91e50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   91f0c:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91f10:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91f14:	911d8021 	add	x1, x1, #0x760
   91f18:	911de000 	add	x0, x0, #0x778
   91f1c:	52802642 	mov	w2, #0x132                 	// #306
   91f20:	94003ff8 	bl	a1f00 <assertion_failed>
   91f24:	7100053f 	cmp	w9, #0x1
   91f28:	52800060 	mov	w0, #0x3                   	// #3
   91f2c:	1a801129 	csel	w9, w9, w0, ne	// ne = any
   91f30:	35ffecd3 	cbnz	w19, 91cc8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   91f34:	17ffff85 	b	91d48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe8>
   91f38:	f0000101 	adrp	x1, b4000 <_etext+0x19c8>
   91f3c:	f0000100 	adrp	x0, b4000 <_etext+0x19c8>
   91f40:	911d8021 	add	x1, x1, #0x760
   91f44:	911e6000 	add	x0, x0, #0x798
   91f48:	52801442 	mov	w2, #0xa2                  	// #162
   91f4c:	a90363f7 	stp	x23, x24, [sp, #48]
   91f50:	a9046bf9 	stp	x25, x26, [sp, #64]
   91f54:	a90573fb 	stp	x27, x28, [sp, #80]
   91f58:	94003fea 	bl	a1f00 <assertion_failed>
   91f5c:	11001f13 	add	w19, w24, #0x7
   91f60:	a94363f7 	ldp	x23, x24, [sp, #48]
   91f64:	d3434a73 	ubfx	x19, x19, #3, #16
   91f68:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91f6c:	17ffff7b 	b	91d58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf8>
   91f70:	a94363f7 	ldp	x23, x24, [sp, #48]
   91f74:	a9446bf9 	ldp	x25, x26, [sp, #64]
   91f78:	17ffff7b 	b	91d64 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x104>
   91f7c:	34000b1b 	cbz	w27, 920dc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x47c>
   91f80:	d2800981 	mov	x1, #0x4c                  	// #76
   91f84:	52800183 	mov	w3, #0xc                   	// #12
   91f88:	52865d60 	mov	w0, #0x32eb                	// #13035
   91f8c:	72bf1480 	movk	w0, #0xf8a4, lsl #16
   91f90:	9b2304c3 	smaddl	x3, w6, w3, x1
   91f94:	6b0000bf 	cmp	w5, w0
   91f98:	1a8710a9 	csel	w9, w5, w7, ne	// ne = any
   91f9c:	6b00009f 	cmp	w4, w0
   91fa0:	1a991080 	csel	w0, w4, w25, ne	// ne = any
   91fa4:	2a1803e1 	mov	w1, w24
   91fa8:	8b0302c3 	add	x3, x22, x3
   91fac:	5280000b 	mov	w11, #0x0                   	// #0
   91fb0:	b9008fe0 	str	w0, [sp, #140]
   91fb4:	1400000f 	b	91ff0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x390>
   91fb8:	97fffeba 	bl	91aa0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   91fbc:	f94043e3 	ldr	x3, [sp, #128]
   91fc0:	294c27e1 	ldp	w1, w9, [sp, #96]
   91fc4:	294d17e7 	ldp	w7, w5, [sp, #104]
   91fc8:	294e1be4 	ldp	w4, w6, [sp, #112]
   91fcc:	b9407beb 	ldr	w11, [sp, #120]
   91fd0:	b9408bea 	ldr	w10, [sp, #136]
   91fd4:	b800c460 	str	w0, [x3], #12
   91fd8:	11000560 	add	w0, w11, #0x1
   91fdc:	6b1b001f 	cmp	w0, w27
   91fe0:	0b1a0021 	add	w1, w1, w26
   91fe4:	7a4f3802 	ccmp	w0, #0xf, #0x2, cc	// cc = lo, ul, last
   91fe8:	540002a8 	b.hi	9203c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3dc>  // b.pmore
   91fec:	2a0003eb 	mov	w11, w0
   91ff0:	b9408fe0 	ldr	w0, [sp, #140]
   91ff4:	2a1a03e2 	mov	w2, w26
   91ff8:	29008069 	stp	w9, w0, [x3, #4]
   91ffc:	aa1503e0 	mov	x0, x21
   92000:	290c27e1 	stp	w1, w9, [sp, #96]
   92004:	290d17e7 	stp	w7, w5, [sp, #104]
   92008:	290e1be4 	stp	w4, w6, [sp, #112]
   9200c:	b9007beb 	str	w11, [sp, #120]
   92010:	f90043e3 	str	x3, [sp, #128]
   92014:	b9008bea 	str	w10, [sp, #136]
   92018:	36fffd09 	tbz	w9, #31, 91fb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x358>
   9201c:	97fffed1 	bl	91b60 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   92020:	f94043e3 	ldr	x3, [sp, #128]
   92024:	294c27e1 	ldp	w1, w9, [sp, #96]
   92028:	294d17e7 	ldp	w7, w5, [sp, #104]
   9202c:	294e1be4 	ldp	w4, w6, [sp, #112]
   92030:	b9407beb 	ldr	w11, [sp, #120]
   92034:	b9408bea 	ldr	w10, [sp, #136]
   92038:	17ffffe7 	b	91fd4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x374>
   9203c:	110004c6 	add	w6, w6, #0x1
   92040:	0b0a0318 	add	w24, w24, w10
   92044:	0b0b00c6 	add	w6, w6, w11
   92048:	52800029 	mov	w9, #0x1                   	// #1
   9204c:	17ffff81 	b	91e50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   92050:	5280001c 	mov	w28, #0x0                   	// #0
   92054:	52800006 	mov	w6, #0x0                   	// #0
   92058:	17ffff40 	b	91d58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf8>
   9205c:	3400041b 	cbz	w27, 920dc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x47c>
   92060:	11000783 	add	w3, w28, #0x1
   92064:	2a1803e1 	mov	w1, w24
   92068:	910432c0 	add	x0, x22, #0x10c
   9206c:	52800009 	mov	w9, #0x0                   	// #0
   92070:	93407c7c 	sxtw	x28, w3
   92074:	f9003fe0 	str	x0, [sp, #120]
   92078:	2a1a03e2 	mov	w2, w26
   9207c:	aa1503e0 	mov	x0, x21
   92080:	290c1fe1 	stp	w1, w7, [sp, #96]
   92084:	290d13e5 	stp	w5, w4, [sp, #104]
   92088:	290e27e6 	stp	w6, w9, [sp, #112]
   9208c:	b9008bea 	str	w10, [sp, #136]
   92090:	97fffe84 	bl	91aa0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   92094:	f9403fe1 	ldr	x1, [sp, #120]
   92098:	aa1c03e8 	mov	x8, x28
   9209c:	b94077e9 	ldr	w9, [sp, #116]
   920a0:	294c97e7 	ldp	w7, w5, [sp, #100]
   920a4:	11000529 	add	w9, w9, #0x1
   920a8:	b83c7820 	str	w0, [x1, x28, lsl #2]
   920ac:	6b1b013f 	cmp	w9, w27
   920b0:	b94063e1 	ldr	w1, [sp, #96]
   920b4:	7a453922 	ccmp	w9, #0x5, #0x2, cc	// cc = lo, ul, last
   920b8:	294d9be4 	ldp	w4, w6, [sp, #108]
   920bc:	9100079c 	add	x28, x28, #0x1
   920c0:	b9408bea 	ldr	w10, [sp, #136]
   920c4:	0b1a0021 	add	w1, w1, w26
   920c8:	54fffd89 	b.ls	92078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>  // b.plast
   920cc:	2a0803fc 	mov	w28, w8
   920d0:	0b0a0318 	add	w24, w24, w10
   920d4:	52800029 	mov	w9, #0x1                   	// #1
   920d8:	17ffff5e 	b	91e50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   920dc:	0b0a0318 	add	w24, w24, w10
   920e0:	52800029 	mov	w9, #0x1                   	// #1
   920e4:	17ffff5b 	b	91e50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   920e8:	d503201f 	nop
   920ec:	d503201f 	nop

00000000000920f0 <CUSBGamePadStandardDevice::Configure()>:
   920f0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   920f4:	52800421 	mov	w1, #0x21                  	// #33
   920f8:	910003fd 	mov	x29, sp
   920fc:	a90153f3 	stp	x19, x20, [sp, #16]
   92100:	aa0003f3 	mov	x19, x0
   92104:	97fff967 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   92108:	b40000c0 	cbz	x0, 92120 <CUSBGamePadStandardDevice::Configure()+0x30>
   9210c:	39401c01 	ldrb	w1, [x0, #7]
   92110:	aa0003f4 	mov	x20, x0
   92114:	39402000 	ldrb	w0, [x0, #8]
   92118:	2a002020 	orr	w0, w1, w0, lsl #8
   9211c:	35000120 	cbnz	w0, 92140 <CUSBGamePadStandardDevice::Configure()+0x50>
   92120:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92124:	9137a021 	add	x1, x1, #0xde8
   92128:	aa1303e0 	mov	x0, x19
   9212c:	97fff969 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   92130:	52800000 	mov	w0, #0x0                   	// #0
   92134:	a94153f3 	ldp	x19, x20, [sp, #16]
   92138:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   9213c:	d65f03c0 	ret
   92140:	a9025bf5 	stp	x21, x22, [sp, #32]
   92144:	a90363f7 	stp	x23, x24, [sp, #48]
   92148:	7902d260 	strh	w0, [x19, #360]
   9214c:	92403c00 	and	x0, x0, #0xffff
   92150:	94006680 	bl	abb50 <operator new[](unsigned long)>
   92154:	f900b260 	str	x0, [x19, #352]
   92158:	aa1303e0 	mov	x0, x19
   9215c:	97fff945 	bl	90670 <CUSBFunction::GetHost() const>
   92160:	aa0003f5 	mov	x21, x0
   92164:	aa1303e0 	mov	x0, x19
   92168:	97fff936 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9216c:	f940b277 	ldr	x23, [x19, #352]
   92170:	aa0003f6 	mov	x22, x0
   92174:	39401a94 	ldrb	w20, [x20, #6]
   92178:	aa1303e0 	mov	x0, x19
   9217c:	7942d278 	ldrh	w24, [x19, #360]
   92180:	97fff9a0 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   92184:	aa1603e1 	mov	x1, x22
   92188:	12001c07 	and	w7, w0, #0xff
   9218c:	2a1803e5 	mov	w5, w24
   92190:	aa1703e4 	mov	x4, x23
   92194:	2a1403e2 	mov	w2, w20
   92198:	aa1503e0 	mov	x0, x21
   9219c:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   921a0:	52800003 	mov	w3, #0x0                   	// #0
   921a4:	94000783 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   921a8:	7942d261 	ldrh	w1, [x19, #360]
   921ac:	6b01001f 	cmp	w0, w1
   921b0:	54000441 	b.ne	92238 <CUSBGamePadStandardDevice::Configure()+0x148>  // b.any
   921b4:	f9400262 	ldr	x2, [x19]
   921b8:	a907ffff 	stp	xzr, xzr, [sp, #120]
   921bc:	aa1303e0 	mov	x0, x19
   921c0:	a908ffff 	stp	xzr, xzr, [sp, #136]
   921c4:	910123e1 	add	x1, sp, #0x48
   921c8:	a909ffff 	stp	xzr, xzr, [sp, #152]
   921cc:	b900abff 	str	wzr, [sp, #168]
   921d0:	a904ffff 	stp	xzr, xzr, [sp, #72]
   921d4:	f9404842 	ldr	x2, [x2, #144]
   921d8:	a905ffff 	stp	xzr, xzr, [sp, #88]
   921dc:	a906ffff 	stp	xzr, xzr, [sp, #104]
   921e0:	d63f0040 	blr	x2
   921e4:	b9404a60 	ldr	w0, [x19, #72]
   921e8:	350000c0 	cbnz	w0, 92200 <CUSBGamePadStandardDevice::Configure()+0x110>
   921ec:	b9410e60 	ldr	w0, [x19, #268]
   921f0:	35000080 	cbnz	w0, 92200 <CUSBGamePadStandardDevice::Configure()+0x110>
   921f4:	b9412a60 	ldr	w0, [x19, #296]
   921f8:	340004a0 	cbz	w0, 9228c <CUSBGamePadStandardDevice::Configure()+0x19c>
   921fc:	d503201f 	nop
   92200:	7942a260 	ldrh	w0, [x19, #336]
   92204:	340004a0 	cbz	w0, 92298 <CUSBGamePadStandardDevice::Configure()+0x1a8>
   92208:	aa1303e0 	mov	x0, x19
   9220c:	940031fd 	bl	9ea00 <CUSBGamePadDevice::Configure()>
   92210:	2a0003e1 	mov	w1, w0
   92214:	12001c00 	and	w0, w0, #0xff
   92218:	36000301 	tbz	w1, #0, 92278 <CUSBGamePadStandardDevice::Configure()+0x188>
   9221c:	39456261 	ldrb	w1, [x19, #344]
   92220:	37000201 	tbnz	w1, #0, 92260 <CUSBGamePadStandardDevice::Configure()+0x170>
   92224:	a94153f3 	ldp	x19, x20, [sp, #16]
   92228:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9222c:	a94363f7 	ldp	x23, x24, [sp, #48]
   92230:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   92234:	d65f03c0 	ret
   92238:	9400466e 	bl	a3bf0 <CLogger::Get()>
   9223c:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92240:	9107a063 	add	x3, x3, #0x1e8
   92244:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92248:	9137a021 	add	x1, x1, #0xde8
   9224c:	52800022 	mov	w2, #0x1                   	// #1
   92250:	9400485c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92254:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92258:	a94363f7 	ldp	x23, x24, [sp, #48]
   9225c:	17ffffb5 	b	92130 <CUSBGamePadStandardDevice::Configure()+0x40>
   92260:	aa1303e0 	mov	x0, x19
   92264:	940005fb 	bl	93a50 <CUSBHIDDevice::StartRequest()>
   92268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9226c:	12001c00 	and	w0, w0, #0xff
   92270:	a94363f7 	ldp	x23, x24, [sp, #48]
   92274:	17ffffb0 	b	92134 <CUSBGamePadStandardDevice::Configure()+0x44>
   92278:	9400465e 	bl	a3bf0 <CLogger::Get()>
   9227c:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92280:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92284:	911a8063 	add	x3, x3, #0x6a0
   92288:	17fffff0 	b	92248 <CUSBGamePadStandardDevice::Configure()+0x158>
   9228c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92290:	a94363f7 	ldp	x23, x24, [sp, #48]
   92294:	17ffffa7 	b	92130 <CUSBGamePadStandardDevice::Configure()+0x40>
   92298:	d0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9229c:	d0000100 	adrp	x0, b4000 <_etext+0x19c8>
   922a0:	911d8021 	add	x1, x1, #0x760
   922a4:	911ee000 	add	x0, x0, #0x7b8
   922a8:	528010a2 	mov	w2, #0x85                  	// #133
   922ac:	94003f15 	bl	a1f00 <assertion_failed>

00000000000922b0 <CUSBGamePadDevice::GetProperties()>:
   922b0:	52800000 	mov	w0, #0x0                   	// #0
   922b4:	d65f03c0 	ret
	...

00000000000922c0 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   922c0:	52800000 	mov	w0, #0x0                   	// #0
   922c4:	d65f03c0 	ret
	...

00000000000922d0 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   922d0:	52800000 	mov	w0, #0x0                   	// #0
   922d4:	d65f03c0 	ret
	...

00000000000922e0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   922e0:	f00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   922e4:	911ba021 	add	x1, x1, #0x6e8
   922e8:	f9000001 	str	x1, [x0]
   922ec:	14003241 	b	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

00000000000922f0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   922f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   922f4:	f00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   922f8:	911ba021 	add	x1, x1, #0x6e8
   922fc:	910003fd 	mov	x29, sp
   92300:	f9000bf3 	str	x19, [sp, #16]
   92304:	aa0003f3 	mov	x19, x0
   92308:	f9000001 	str	x1, [x0]
   9230c:	94003239 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   92310:	aa1303e0 	mov	x0, x19
   92314:	d2802c01 	mov	x1, #0x160                 	// #352
   92318:	f9400bf3 	ldr	x19, [sp, #16]
   9231c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92320:	14006624 	b	abbb0 <operator delete(void*, unsigned long)>
   92324:	d503201f 	nop
   92328:	d503201f 	nop
   9232c:	d503201f 	nop

0000000000092330 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   92330:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   92334:	b20903e2 	mov	x2, #0x80000000800000      	// #36028797027352576
   92338:	f2800202 	movk	x2, #0x10
   9233c:	91017fe4 	add	x4, sp, #0x5f
   92340:	910003fd 	mov	x29, sp
   92344:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   92348:	f9000bf3 	str	x19, [sp, #16]
   9234c:	d2800003 	mov	x3, #0x0                   	// #0
   92350:	7100043f 	cmp	w1, #0x1
   92354:	a9000c82 	stp	x2, x3, [x4]
   92358:	a9017c9f 	stp	xzr, xzr, [x4, #16]
   9235c:	a9027c9f 	stp	xzr, xzr, [x4, #32]
   92360:	a9037c9f 	stp	xzr, xzr, [x4, #48]
   92364:	54000460 	b.eq	923f0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc0>  // b.none
   92368:	7100083f 	cmp	w1, #0x2
   9236c:	540000e0 	b.eq	92388 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>  // b.none
   92370:	34000141 	cbz	w1, 92398 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x68>
   92374:	52800033 	mov	w19, #0x1                   	// #1
   92378:	2a1303e0 	mov	w0, w19
   9237c:	f9400bf3 	ldr	x19, [sp, #16]
   92380:	a8c97bfd 	ldp	x29, x30, [sp], #144
   92384:	d65f03c0 	ret
   92388:	52800402 	mov	w2, #0x20                  	// #32
   9238c:	128013a1 	mov	w1, #0xffffff62            	// #-158
   92390:	39000c82 	strb	w2, [x4, #3]
   92394:	79000881 	strh	w1, [x4, #4]
   92398:	39456402 	ldrb	w2, [x0, #345]
   9239c:	aa0403e1 	mov	x1, x4
   923a0:	52800003 	mov	w3, #0x0                   	// #0
   923a4:	11000445 	add	w5, w2, #0x1
   923a8:	39056405 	strb	w5, [x0, #345]
   923ac:	12000c45 	and	w5, w2, #0xf
   923b0:	52800142 	mov	w2, #0xa                   	// #10
   923b4:	39000485 	strb	w5, [x4, #1]
   923b8:	94000516 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   923bc:	12001c13 	and	w19, w0, #0xff
   923c0:	3707fda0 	tbnz	w0, #0, 92374 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x44>
   923c4:	9400460b 	bl	a3bf0 <CLogger::Get()>
   923c8:	52800022 	mov	w2, #0x1                   	// #1
   923cc:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   923d0:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   923d4:	911f4063 	add	x3, x3, #0x7d0
   923d8:	91380021 	add	x1, x1, #0xe00
   923dc:	940047f9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   923e0:	2a1303e0 	mov	w0, w19
   923e4:	f9400bf3 	ldr	x19, [sp, #16]
   923e8:	a8c97bfd 	ldp	x29, x30, [sp], #144
   923ec:	d65f03c0 	ret
   923f0:	52841302 	mov	w2, #0x2098                	// #8344
   923f4:	128013a1 	mov	w1, #0xffffff62            	// #-158
   923f8:	79000c82 	strh	w2, [x4, #6]
   923fc:	79001081 	strh	w1, [x4, #8]
   92400:	17ffffe6 	b	92398 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x68>
   92404:	d503201f 	nop
   92408:	d503201f 	nop
   9240c:	d503201f 	nop

0000000000092410 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   92410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92414:	910003fd 	mov	x29, sp
   92418:	f9000bf3 	str	x19, [sp, #16]
   9241c:	aa0103f3 	mov	x19, x1
   92420:	39400022 	ldrb	w2, [x1]
   92424:	7100c05f 	cmp	w2, #0x30
   92428:	54000e21 	b.ne	925ec <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1dc>  // b.any
   9242c:	b9012c1f 	str	wzr, [x0, #300]
   92430:	39400c23 	ldrb	w3, [x1, #3]
   92434:	53190063 	ubfiz	w3, w3, #7, #1
   92438:	b9012c03 	str	w3, [x0, #300]
   9243c:	39400c22 	ldrb	w2, [x1, #3]
   92440:	36080082 	tbz	w2, #1, 92450 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x40>
   92444:	32160063 	orr	w3, w3, #0x400
   92448:	b9012c03 	str	w3, [x0, #300]
   9244c:	39400c22 	ldrb	w2, [x1, #3]
   92450:	361000a2 	tbz	w2, #2, 92464 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x54>
   92454:	b9412c01 	ldr	w1, [x0, #300]
   92458:	32180021 	orr	w1, w1, #0x100
   9245c:	b9012c01 	str	w1, [x0, #300]
   92460:	39400e62 	ldrb	w2, [x19, #3]
   92464:	361800a2 	tbz	w2, #3, 92478 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x68>
   92468:	b9412c01 	ldr	w1, [x0, #300]
   9246c:	32170021 	orr	w1, w1, #0x200
   92470:	b9012c01 	str	w1, [x0, #300]
   92474:	39400e62 	ldrb	w2, [x19, #3]
   92478:	363000a2 	tbz	w2, #6, 9248c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x7c>
   9247c:	b9412c01 	ldr	w1, [x0, #300]
   92480:	321a0021 	orr	w1, w1, #0x40
   92484:	b9012c01 	str	w1, [x0, #300]
   92488:	39400e62 	ldrb	w2, [x19, #3]
   9248c:	373809c2 	tbnz	w2, #7, 925c4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b4>
   92490:	39401262 	ldrb	w2, [x19, #4]
   92494:	360000a2 	tbz	w2, #0, 924a8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x98>
   92498:	b9412c01 	ldr	w1, [x0, #300]
   9249c:	320d0021 	orr	w1, w1, #0x80000
   924a0:	b9012c01 	str	w1, [x0, #300]
   924a4:	39401262 	ldrb	w2, [x19, #4]
   924a8:	360800a2 	tbz	w2, #1, 924bc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xac>
   924ac:	b9412c01 	ldr	w1, [x0, #300]
   924b0:	320c0021 	orr	w1, w1, #0x100000
   924b4:	b9012c01 	str	w1, [x0, #300]
   924b8:	39401262 	ldrb	w2, [x19, #4]
   924bc:	361000a2 	tbz	w2, #2, 924d0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xc0>
   924c0:	b9412c01 	ldr	w1, [x0, #300]
   924c4:	32130021 	orr	w1, w1, #0x2000
   924c8:	b9012c01 	str	w1, [x0, #300]
   924cc:	39401262 	ldrb	w2, [x19, #4]
   924d0:	361800a2 	tbz	w2, #3, 924e4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xd4>
   924d4:	b9412c01 	ldr	w1, [x0, #300]
   924d8:	32140021 	orr	w1, w1, #0x1000
   924dc:	b9012c01 	str	w1, [x0, #300]
   924e0:	39401262 	ldrb	w2, [x19, #4]
   924e4:	362000a2 	tbz	w2, #4, 924f8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xe8>
   924e8:	b9412c01 	ldr	w1, [x0, #300]
   924ec:	32000021 	orr	w1, w1, #0x1
   924f0:	b9012c01 	str	w1, [x0, #300]
   924f4:	39401262 	ldrb	w2, [x19, #4]
   924f8:	36280082 	tbz	w2, #5, 92508 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xf8>
   924fc:	b9412c01 	ldr	w1, [x0, #300]
   92500:	32150021 	orr	w1, w1, #0x800
   92504:	b9012c01 	str	w1, [x0, #300]
   92508:	39401662 	ldrb	w2, [x19, #5]
   9250c:	360000a2 	tbz	w2, #0, 92520 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x110>
   92510:	b9412c01 	ldr	w1, [x0, #300]
   92514:	320f0021 	orr	w1, w1, #0x20000
   92518:	b9012c01 	str	w1, [x0, #300]
   9251c:	39401662 	ldrb	w2, [x19, #5]
   92520:	360800a2 	tbz	w2, #1, 92534 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x124>
   92524:	b9412c01 	ldr	w1, [x0, #300]
   92528:	32110021 	orr	w1, w1, #0x8000
   9252c:	b9012c01 	str	w1, [x0, #300]
   92530:	39401662 	ldrb	w2, [x19, #5]
   92534:	361000a2 	tbz	w2, #2, 92548 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x138>
   92538:	b9412c01 	ldr	w1, [x0, #300]
   9253c:	32100021 	orr	w1, w1, #0x10000
   92540:	b9012c01 	str	w1, [x0, #300]
   92544:	39401662 	ldrb	w2, [x19, #5]
   92548:	361800a2 	tbz	w2, #3, 9255c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x14c>
   9254c:	b9412c01 	ldr	w1, [x0, #300]
   92550:	320e0021 	orr	w1, w1, #0x40000
   92554:	b9012c01 	str	w1, [x0, #300]
   92558:	39401662 	ldrb	w2, [x19, #5]
   9255c:	363000a2 	tbz	w2, #6, 92570 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x160>
   92560:	b9412c01 	ldr	w1, [x0, #300]
   92564:	321b0021 	orr	w1, w1, #0x20
   92568:	b9012c01 	str	w1, [x0, #300]
   9256c:	39401662 	ldrb	w2, [x19, #5]
   92570:	37380362 	tbnz	w2, #7, 925dc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1cc>
   92574:	39401a61 	ldrb	w1, [x19, #6]
   92578:	52801fe3 	mov	w3, #0xff                  	// #255
   9257c:	39401e62 	ldrb	w2, [x19, #7]
   92580:	2a022022 	orr	w2, w1, w2, lsl #8
   92584:	d3442c42 	ubfx	x2, x2, #4, #8
   92588:	b9004c02 	str	w2, [x0, #76]
   9258c:	39402262 	ldrb	w2, [x19, #8]
   92590:	4b020062 	sub	w2, w3, w2
   92594:	b9005802 	str	w2, [x0, #88]
   92598:	39402661 	ldrb	w1, [x19, #9]
   9259c:	39402a62 	ldrb	w2, [x19, #10]
   925a0:	2a022022 	orr	w2, w1, w2, lsl #8
   925a4:	d3442c42 	ubfx	x2, x2, #4, #8
   925a8:	b9006402 	str	w2, [x0, #100]
   925ac:	39402e61 	ldrb	w1, [x19, #11]
   925b0:	f9400bf3 	ldr	x19, [sp, #16]
   925b4:	4b010063 	sub	w3, w3, w1
   925b8:	b9007003 	str	w3, [x0, #112]
   925bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   925c0:	d65f03c0 	ret
   925c4:	b9412c01 	ldr	w1, [x0, #300]
   925c8:	321c0021 	orr	w1, w1, #0x10
   925cc:	b9012c01 	str	w1, [x0, #300]
   925d0:	39401262 	ldrb	w2, [x19, #4]
   925d4:	3607f6a2 	tbz	w2, #0, 924a8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x98>
   925d8:	17ffffb0 	b	92498 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x88>
   925dc:	b9412c01 	ldr	w1, [x0, #300]
   925e0:	321d0021 	orr	w1, w1, #0x8
   925e4:	b9012c01 	str	w1, [x0, #300]
   925e8:	17ffffe3 	b	92574 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x164>
   925ec:	94004581 	bl	a3bf0 <CLogger::Get()>
   925f0:	39400264 	ldrb	w4, [x19]
   925f4:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   925f8:	f9400bf3 	ldr	x19, [sp, #16]
   925fc:	911fa063 	add	x3, x3, #0x7e8
   92600:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92604:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92608:	52800062 	mov	w2, #0x3                   	// #3
   9260c:	91380021 	add	x1, x1, #0xe00
   92610:	1400476c 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92614:	d503201f 	nop
   92618:	d503201f 	nop
   9261c:	d503201f 	nop

0000000000092620 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   92620:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   92624:	d28001a2 	mov	x2, #0xd                   	// #13
   92628:	9101bfe4 	add	x4, sp, #0x6f
   9262c:	910003fd 	mov	x29, sp
   92630:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   92634:	a90153f3 	stp	x19, x20, [sp, #16]
   92638:	aa0003f3 	mov	x19, x0
   9263c:	b0000134 	adrp	x20, b7000 <_etext+0x49c8>
   92640:	91380294 	add	x20, x20, #0xe00
   92644:	aa0403e0 	mov	x0, x4
   92648:	f90013f5 	str	x21, [sp, #32]
   9264c:	2a0103f5 	mov	w21, w1
   92650:	91004281 	add	x1, x20, #0x10
   92654:	940062dd 	bl	ab1c8 <memcpy>
   92658:	39456662 	ldrb	w2, [x19, #345]
   9265c:	91003405 	add	x5, x0, #0xd
   92660:	4f000400 	movi	v0.4s, #0x0
   92664:	aa0003e4 	mov	x4, x0
   92668:	12000c46 	and	w6, w2, #0xf
   9266c:	11000441 	add	w1, w2, #0x1
   92670:	39056661 	strb	w1, [x19, #345]
   92674:	aa1303e0 	mov	x0, x19
   92678:	aa0403e1 	mov	x1, x4
   9267c:	52800003 	mov	w3, #0x0                   	// #0
   92680:	52800182 	mov	w2, #0xc                   	// #12
   92684:	ad0000a0 	stp	q0, q0, [x5]
   92688:	39000486 	strb	w6, [x4, #1]
   9268c:	39002c95 	strb	w21, [x4, #11]
   92690:	3d8008a0 	str	q0, [x5, #32]
   92694:	790060bf 	strh	wzr, [x5, #48]
   92698:	3900c8bf 	strb	wzr, [x5, #50]
   9269c:	9400045d 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   926a0:	2a0003f3 	mov	w19, w0
   926a4:	360000d3 	tbz	w19, #0, 926bc <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x9c>
   926a8:	f94013f5 	ldr	x21, [sp, #32]
   926ac:	2a1303e0 	mov	w0, w19
   926b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   926b4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   926b8:	d65f03c0 	ret
   926bc:	9400454d 	bl	a3bf0 <CLogger::Get()>
   926c0:	aa1403e1 	mov	x1, x20
   926c4:	52800022 	mov	w2, #0x1                   	// #1
   926c8:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   926cc:	91202063 	add	x3, x3, #0x808
   926d0:	9400473c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   926d4:	f94013f5 	ldr	x21, [sp, #32]
   926d8:	2a1303e0 	mov	w0, w19
   926dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   926e0:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   926e4:	d65f03c0 	ret
   926e8:	d503201f 	nop
   926ec:	d503201f 	nop

00000000000926f0 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   926f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   926f4:	910003fd 	mov	x29, sp
   926f8:	f9000bf3 	str	x19, [sp, #16]
   926fc:	aa0003f3 	mov	x19, x0
   92700:	94003128 	bl	9eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   92704:	f00001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   92708:	911ba000 	add	x0, x0, #0x6e8
   9270c:	f9000260 	str	x0, [x19]
   92710:	52800003 	mov	w3, #0x0                   	// #0
   92714:	aa1303e0 	mov	x0, x19
   92718:	52800002 	mov	w2, #0x0                   	// #0
   9271c:	52800061 	mov	w1, #0x3                   	// #3
   92720:	97fff800 	bl	90720 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   92724:	39056260 	strb	w0, [x19, #344]
   92728:	3905667f 	strb	wzr, [x19, #345]
   9272c:	f9400bf3 	ldr	x19, [sp, #16]
   92730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92734:	d65f03c0 	ret
   92738:	d503201f 	nop
   9273c:	d503201f 	nop

0000000000092740 <CUSBGamePadSwitchProDevice::Configure()>:
   92740:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
   92744:	910003fd 	mov	x29, sp
   92748:	a90153f3 	stp	x19, x20, [sp, #16]
   9274c:	9101bfa1 	add	x1, x29, #0x6f
   92750:	927ae434 	and	x20, x1, #0xffffffffffffffc0
   92754:	f90013f5 	str	x21, [sp, #32]
   92758:	d10043ff 	sub	sp, sp, #0x10
   9275c:	39456001 	ldrb	w1, [x0, #344]
   92760:	36000a21 	tbz	w1, #0, 928a4 <CUSBGamePadSwitchProDevice::Configure()+0x164>
   92764:	52800801 	mov	w1, #0x40                  	// #64
   92768:	7902a001 	strh	w1, [x0, #336]
   9276c:	aa0003f3 	mov	x19, x0
   92770:	940030a4 	bl	9ea00 <CUSBGamePadDevice::Configure()>
   92774:	36000a00 	tbz	w0, #0, 928b4 <CUSBGamePadSwitchProDevice::Configure()+0x174>
   92778:	7942a260 	ldrh	w0, [x19, #336]
   9277c:	2f00e600 	movi	d0, #0xff00000000
   92780:	52800081 	mov	w1, #0x4                   	// #4
   92784:	52801fe3 	mov	w3, #0xff                  	// #255
   92788:	aa0003e2 	mov	x2, x0
   9278c:	d1000400 	sub	x0, x0, #0x1
   92790:	b2401400 	orr	x0, x0, #0x3f
   92794:	528002a4 	mov	w4, #0x15                  	// #21
   92798:	91010000 	add	x0, x0, #0x40
   9279c:	b9004a61 	str	w1, [x19, #72]
   927a0:	9270bc01 	and	x1, x0, #0xffffffffffff0000
   927a4:	290b8e7f 	stp	wzr, w3, [x19, #92]
   927a8:	290e8e7f 	stp	wzr, w3, [x19, #116]
   927ac:	cb2163e1 	sub	x1, sp, x1
   927b0:	b9010e7f 	str	wzr, [x19, #268]
   927b4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   927b8:	b9012a64 	str	w4, [x19, #296]
   927bc:	eb2163ff 	cmp	sp, x1
   927c0:	fd002a60 	str	d0, [x19, #80]
   927c4:	fd003660 	str	d0, [x19, #104]
   927c8:	540000a0 	b.eq	927dc <CUSBGamePadSwitchProDevice::Configure()+0x9c>  // b.none
   927cc:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   927d0:	eb2163ff 	cmp	sp, x1
   927d4:	f90203ff 	str	xzr, [sp, #1024]
   927d8:	54ffffa1 	b.ne	927cc <CUSBGamePadSwitchProDevice::Configure()+0x8c>  // b.any
   927dc:	92403c00 	and	x0, x0, #0xffff
   927e0:	cb2063ff 	sub	sp, sp, x0
   927e4:	f110001f 	cmp	x0, #0x400
   927e8:	f90003ff 	str	xzr, [sp]
   927ec:	54000043 	b.cc	927f4 <CUSBGamePadSwitchProDevice::Configure()+0xb4>  // b.lo, b.ul, b.last
   927f0:	f90203ff 	str	xzr, [sp, #1024]
   927f4:	91013ff5 	add	x21, sp, #0x4f
   927f8:	52800003 	mov	w3, #0x0                   	// #0
   927fc:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   92800:	aa1303e0 	mov	x0, x19
   92804:	aa1503e1 	mov	x1, x21
   92808:	9400046a 	bl	939b0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   9280c:	d2807004 	mov	x4, #0x380                 	// #896
   92810:	d2800005 	mov	x5, #0x0                   	// #0
   92814:	91020281 	add	x1, x20, #0x80
   92818:	aa1303e0 	mov	x0, x19
   9281c:	52800003 	mov	w3, #0x0                   	// #0
   92820:	52800042 	mov	w2, #0x2                   	// #2
   92824:	a9017c3f 	stp	xzr, xzr, [x1, #16]
   92828:	a9027c3f 	stp	xzr, xzr, [x1, #32]
   9282c:	a9037c3f 	stp	xzr, xzr, [x1, #48]
   92830:	a9081684 	stp	x4, x5, [x20, #128]
   92834:	940003f7 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92838:	360001c0 	tbz	w0, #0, 92870 <CUSBGamePadSwitchProDevice::Configure()+0x130>
   9283c:	7942a262 	ldrh	w2, [x19, #336]
   92840:	aa1503e1 	mov	x1, x21
   92844:	aa1303e0 	mov	x0, x19
   92848:	52800003 	mov	w3, #0x0                   	// #0
   9284c:	94000459 	bl	939b0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   92850:	7100001f 	cmp	w0, #0x0
   92854:	54000b8d 	b.le	929c4 <CUSBGamePadSwitchProDevice::Configure()+0x284>
   92858:	394002a0 	ldrb	w0, [x21]
   9285c:	7102041f 	cmp	w0, #0x81
   92860:	54000081 	b.ne	92870 <CUSBGamePadSwitchProDevice::Configure()+0x130>  // b.any
   92864:	394006a0 	ldrb	w0, [x21, #1]
   92868:	71000c1f 	cmp	w0, #0x3
   9286c:	54000340 	b.eq	928d4 <CUSBGamePadSwitchProDevice::Configure()+0x194>  // b.none
   92870:	940044e0 	bl	a3bf0 <CLogger::Get()>
   92874:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92878:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   9287c:	91208063 	add	x3, x3, #0x820
   92880:	91380021 	add	x1, x1, #0xe00
   92884:	52800022 	mov	w2, #0x1                   	// #1
   92888:	940046ce 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9288c:	52800000 	mov	w0, #0x0                   	// #0
   92890:	910003bf 	mov	sp, x29
   92894:	a94153f3 	ldp	x19, x20, [sp, #16]
   92898:	f94013f5 	ldr	x21, [sp, #32]
   9289c:	a8d27bfd 	ldp	x29, x30, [sp], #288
   928a0:	d65f03c0 	ret
   928a4:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   928a8:	91380021 	add	x1, x1, #0xe00
   928ac:	97fff789 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   928b0:	17fffff7 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   928b4:	940044cf 	bl	a3bf0 <CLogger::Get()>
   928b8:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   928bc:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   928c0:	911a8063 	add	x3, x3, #0x6a0
   928c4:	91380021 	add	x1, x1, #0xe00
   928c8:	52800022 	mov	w2, #0x1                   	// #1
   928cc:	940046bd 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   928d0:	17ffffef 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   928d4:	d2805004 	mov	x4, #0x280                 	// #640
   928d8:	d2800005 	mov	x5, #0x0                   	// #0
   928dc:	91010281 	add	x1, x20, #0x40
   928e0:	aa1303e0 	mov	x0, x19
   928e4:	52800003 	mov	w3, #0x0                   	// #0
   928e8:	52800042 	mov	w2, #0x2                   	// #2
   928ec:	a9017c3f 	stp	xzr, xzr, [x1, #16]
   928f0:	a9027c3f 	stp	xzr, xzr, [x1, #32]
   928f4:	a9037c3f 	stp	xzr, xzr, [x1, #48]
   928f8:	a9041684 	stp	x4, x5, [x20, #64]
   928fc:	940003c5 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92900:	36000520 	tbz	w0, #0, 929a4 <CUSBGamePadSwitchProDevice::Configure()+0x264>
   92904:	7942a262 	ldrh	w2, [x19, #336]
   92908:	aa1503e1 	mov	x1, x21
   9290c:	aa1303e0 	mov	x0, x19
   92910:	52800003 	mov	w3, #0x0                   	// #0
   92914:	94000427 	bl	939b0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   92918:	7100001f 	cmp	w0, #0x0
   9291c:	5400064d 	b.le	929e4 <CUSBGamePadSwitchProDevice::Configure()+0x2a4>
   92920:	394002a0 	ldrb	w0, [x21]
   92924:	7102041f 	cmp	w0, #0x81
   92928:	540003e1 	b.ne	929a4 <CUSBGamePadSwitchProDevice::Configure()+0x264>  // b.any
   9292c:	394006a2 	ldrb	w2, [x21, #1]
   92930:	7100085f 	cmp	w2, #0x2
   92934:	54000381 	b.ne	929a4 <CUSBGamePadSwitchProDevice::Configure()+0x264>  // b.any
   92938:	d2809004 	mov	x4, #0x480                 	// #1152
   9293c:	d2800005 	mov	x5, #0x0                   	// #0
   92940:	aa1403e1 	mov	x1, x20
   92944:	aa1303e0 	mov	x0, x19
   92948:	52800003 	mov	w3, #0x0                   	// #0
   9294c:	a9001684 	stp	x4, x5, [x20]
   92950:	a9017e9f 	stp	xzr, xzr, [x20, #16]
   92954:	a9027e9f 	stp	xzr, xzr, [x20, #32]
   92958:	a9037e9f 	stp	xzr, xzr, [x20, #48]
   9295c:	940003ad 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92960:	36000620 	tbz	w0, #0, 92a24 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   92964:	f9400262 	ldr	x2, [x19]
   92968:	aa1303e0 	mov	x0, x19
   9296c:	b9415661 	ldr	w1, [x19, #340]
   92970:	f9403c42 	ldr	x2, [x2, #120]
   92974:	d63f0040 	blr	x2
   92978:	7942a262 	ldrh	w2, [x19, #336]
   9297c:	aa1503e1 	mov	x1, x21
   92980:	aa1303e0 	mov	x0, x19
   92984:	52800003 	mov	w3, #0x0                   	// #0
   92988:	9400040a 	bl	939b0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   9298c:	7100001f 	cmp	w0, #0x0
   92990:	540003ad 	b.le	92a04 <CUSBGamePadSwitchProDevice::Configure()+0x2c4>
   92994:	aa1303e0 	mov	x0, x19
   92998:	9400042e 	bl	93a50 <CUSBHIDDevice::StartRequest()>
   9299c:	12001c00 	and	w0, w0, #0xff
   929a0:	17ffffbc 	b	92890 <CUSBGamePadSwitchProDevice::Configure()+0x150>
   929a4:	94004493 	bl	a3bf0 <CLogger::Get()>
   929a8:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   929ac:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   929b0:	91218063 	add	x3, x3, #0x860
   929b4:	91380021 	add	x1, x1, #0xe00
   929b8:	52800022 	mov	w2, #0x1                   	// #1
   929bc:	94004681 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   929c0:	17ffffb3 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   929c4:	9400448b 	bl	a3bf0 <CLogger::Get()>
   929c8:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   929cc:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   929d0:	91210063 	add	x3, x3, #0x840
   929d4:	91380021 	add	x1, x1, #0xe00
   929d8:	52800022 	mov	w2, #0x1                   	// #1
   929dc:	94004679 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   929e0:	17ffffab 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   929e4:	94004483 	bl	a3bf0 <CLogger::Get()>
   929e8:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   929ec:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   929f0:	91220063 	add	x3, x3, #0x880
   929f4:	91380021 	add	x1, x1, #0xe00
   929f8:	52800022 	mov	w2, #0x1                   	// #1
   929fc:	94004671 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92a00:	17ffffa3 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
   92a04:	9400447b 	bl	a3bf0 <CLogger::Get()>
   92a08:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92a0c:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92a10:	91230063 	add	x3, x3, #0x8c0
   92a14:	91380021 	add	x1, x1, #0xe00
   92a18:	52800022 	mov	w2, #0x1                   	// #1
   92a1c:	94004669 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92a20:	17ffffdd 	b	92994 <CUSBGamePadSwitchProDevice::Configure()+0x254>
   92a24:	94004473 	bl	a3bf0 <CLogger::Get()>
   92a28:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92a2c:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92a30:	91228063 	add	x3, x3, #0x8a0
   92a34:	91380021 	add	x1, x1, #0xe00
   92a38:	52800022 	mov	w2, #0x1                   	// #1
   92a3c:	94004661 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92a40:	17ffff93 	b	9288c <CUSBGamePadSwitchProDevice::Configure()+0x14c>
	...

0000000000092a50 <CUSBGamePadSwitchProDevice::GetProperties()>:
   92a50:	52800960 	mov	w0, #0x4b                  	// #75
   92a54:	d65f03c0 	ret
	...

0000000000092a60 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   92a60:	f00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   92a64:	911e4021 	add	x1, x1, #0x790
   92a68:	f9000001 	str	x1, [x0]
   92a6c:	14003061 	b	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

0000000000092a70 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   92a70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92a74:	f00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   92a78:	911e4021 	add	x1, x1, #0x790
   92a7c:	910003fd 	mov	x29, sp
   92a80:	f9000bf3 	str	x19, [sp, #16]
   92a84:	aa0003f3 	mov	x19, x0
   92a88:	f9000001 	str	x1, [x0]
   92a8c:	94003059 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   92a90:	aa1303e0 	mov	x0, x19
   92a94:	d2802b01 	mov	x1, #0x158                 	// #344
   92a98:	f9400bf3 	ldr	x19, [sp, #16]
   92a9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92aa0:	14006444 	b	abbb0 <operator delete(void*, unsigned long)>
   92aa4:	d503201f 	nop
   92aa8:	d503201f 	nop
   92aac:	d503201f 	nop

0000000000092ab0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   92ab0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   92ab4:	910003fd 	mov	x29, sp
   92ab8:	b40008a1 	cbz	x1, 92bcc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x11c>
   92abc:	39400024 	ldrb	w4, [x1]
   92ac0:	52828003 	mov	w3, #0x1400                	// #5120
   92ac4:	39400422 	ldrb	w2, [x1, #1]
   92ac8:	2a022082 	orr	w2, w4, w2, lsl #8
   92acc:	6b03005f 	cmp	w2, w3
   92ad0:	540008a1 	b.ne	92be4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>  // b.any
   92ad4:	39400824 	ldrb	w4, [x1, #2]
   92ad8:	b0000127 	adrp	x7, b7000 <_etext+0x49c8>
   92adc:	913880e2 	add	x2, x7, #0xe20
   92ae0:	39400c23 	ldrb	w3, [x1, #3]
   92ae4:	91010045 	add	x5, x2, #0x40
   92ae8:	b9012c1f 	str	wzr, [x0, #300]
   92aec:	2a032083 	orr	w3, w4, w3, lsl #8
   92af0:	360000a3 	tbz	w3, #0, 92b04 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x54>
   92af4:	b9412c04 	ldr	w4, [x0, #300]
   92af8:	b9400046 	ldr	w6, [x2]
   92afc:	2a060084 	orr	w4, w4, w6
   92b00:	b9012c04 	str	w4, [x0, #300]
   92b04:	91001042 	add	x2, x2, #0x4
   92b08:	53017c63 	lsr	w3, w3, #1
   92b0c:	eb0200bf 	cmp	x5, x2
   92b10:	54ffff01 	b.ne	92af0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x40>  // b.any
   92b14:	913880e6 	add	x6, x7, #0xe20
   92b18:	d2800003 	mov	x3, #0x0                   	// #0
   92b1c:	910100c6 	add	x6, x6, #0x40
   92b20:	52801fe9 	mov	w9, #0xff                  	// #255
   92b24:	d2800188 	mov	x8, #0xc                   	// #12
   92b28:	8b234425 	add	x5, x1, w3, uxtw #1
   92b2c:	b86378c2 	ldr	w2, [x6, x3, lsl #2]
   92b30:	91000463 	add	x3, x3, #0x1
   92b34:	2a0203e4 	mov	w4, w2
   92b38:	121e7842 	and	w2, w2, #0xfffffffd
   92b3c:	394018a7 	ldrb	w7, [x5, #6]
   92b40:	7100045f 	cmp	w2, #0x1
   92b44:	39401ca2 	ldrb	w2, [x5, #7]
   92b48:	9b080084 	madd	x4, x4, x8, x0
   92b4c:	aa0220e2 	orr	x2, x7, x2, lsl #8
   92b50:	93403c42 	sxth	x2, w2
   92b54:	11402042 	add	w2, w2, #0x8, lsl #12
   92b58:	53087c42 	lsr	w2, w2, #8
   92b5c:	4b020125 	sub	w5, w9, w2
   92b60:	1a8200a2 	csel	w2, w5, w2, eq	// eq = none
   92b64:	b9004c82 	str	w2, [x4, #76]
   92b68:	f100107f 	cmp	x3, #0x4
   92b6c:	54fffde1 	b.ne	92b28 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x78>  // b.any
   92b70:	39401022 	ldrb	w2, [x1, #4]
   92b74:	b9007c02 	str	w2, [x0, #124]
   92b78:	39c01022 	ldrsb	w2, [x1, #4]
   92b7c:	37f80182 	tbnz	w2, #31, 92bac <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   92b80:	39401422 	ldrb	w2, [x1, #5]
   92b84:	b9008802 	str	w2, [x0, #136]
   92b88:	39c01421 	ldrsb	w1, [x1, #5]
   92b8c:	37f80061 	tbnz	w1, #31, 92b98 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xe8>
   92b90:	a8c17bfd 	ldp	x29, x30, [sp], #16
   92b94:	d65f03c0 	ret
   92b98:	b9412c01 	ldr	w1, [x0, #300]
   92b9c:	321c0021 	orr	w1, w1, #0x10
   92ba0:	b9012c01 	str	w1, [x0, #300]
   92ba4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   92ba8:	d65f03c0 	ret
   92bac:	b9412c02 	ldr	w2, [x0, #300]
   92bb0:	321d0042 	orr	w2, w2, #0x8
   92bb4:	b9012c02 	str	w2, [x0, #300]
   92bb8:	39401422 	ldrb	w2, [x1, #5]
   92bbc:	b9008802 	str	w2, [x0, #136]
   92bc0:	39c01421 	ldrsb	w1, [x1, #5]
   92bc4:	36fffe61 	tbz	w1, #31, 92b90 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xe0>
   92bc8:	17fffff4 	b	92b98 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xe8>
   92bcc:	d0000101 	adrp	x1, b4000 <_etext+0x19c8>
   92bd0:	d0000100 	adrp	x0, b4000 <_etext+0x19c8>
   92bd4:	91238021 	add	x1, x1, #0x8e0
   92bd8:	911c0000 	add	x0, x0, #0x700
   92bdc:	52800f02 	mov	w2, #0x78                  	// #120
   92be0:	94003cc8 	bl	a1f00 <assertion_failed>
   92be4:	d0000101 	adrp	x1, b4000 <_etext+0x19c8>
   92be8:	d0000100 	adrp	x0, b4000 <_etext+0x19c8>
   92bec:	91238021 	add	x1, x1, #0x8e0
   92bf0:	9123e000 	add	x0, x0, #0x8f8
   92bf4:	52800f22 	mov	w2, #0x79                  	// #121
   92bf8:	94003cc2 	bl	a1f00 <assertion_failed>
   92bfc:	d503201f 	nop

0000000000092c00 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   92c00:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   92c04:	2a0103e4 	mov	w4, w1
   92c08:	91013fe2 	add	x2, sp, #0x4f
   92c0c:	910003fd 	mov	x29, sp
   92c10:	927ae441 	and	x1, x2, #0xffffffffffffffc0
   92c14:	93407c82 	sxtw	x2, w4
   92c18:	f100105f 	cmp	x2, #0x4
   92c1c:	54000089 	b.ls	92c2c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x2c>  // b.plast
   92c20:	52800000 	mov	w0, #0x0                   	// #0
   92c24:	a8c87bfd 	ldp	x29, x30, [sp], #128
   92c28:	d65f03c0 	ret
   92c2c:	b0000125 	adrp	x5, b7000 <_etext+0x49c8>
   92c30:	913880a5 	add	x5, x5, #0xe20
   92c34:	910160a5 	add	x5, x5, #0x58
   92c38:	52806026 	mov	w6, #0x301                 	// #769
   92c3c:	52800003 	mov	w3, #0x0                   	// #0
   92c40:	52800062 	mov	w2, #0x3                   	// #3
   92c44:	79000026 	strh	w6, [x1]
   92c48:	3864c8a4 	ldrb	w4, [x5, w4, sxtw]
   92c4c:	39000824 	strb	w4, [x1, #2]
   92c50:	940002f0 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92c54:	12001c00 	and	w0, w0, #0xff
   92c58:	a8c87bfd 	ldp	x29, x30, [sp], #128
   92c5c:	d65f03c0 	ret

0000000000092c60 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   92c60:	f100003f 	cmp	x1, #0x0
   92c64:	7a4e1840 	ccmp	w2, #0xe, #0x0, ne	// ne = any
   92c68:	540000c1 	b.ne	92c80 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>  // b.any
   92c6c:	39400022 	ldrb	w2, [x1]
   92c70:	35000082 	cbnz	w2, 92c80 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>
   92c74:	39400422 	ldrb	w2, [x1, #1]
   92c78:	7100505f 	cmp	w2, #0x14
   92c7c:	54000040 	b.eq	92c84 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x24>  // b.none
   92c80:	d65f03c0 	ret
   92c84:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92c88:	910003fd 	mov	x29, sp
   92c8c:	f940a402 	ldr	x2, [x0, #328]
   92c90:	a90153f3 	stp	x19, x20, [sp, #16]
   92c94:	aa0003f3 	mov	x19, x0
   92c98:	b40001a2 	cbz	x2, 92ccc <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   92c9c:	aa0003f4 	mov	x20, x0
   92ca0:	f8448682 	ldr	x2, [x20], #72
   92ca4:	f9404842 	ldr	x2, [x2, #144]
   92ca8:	d63f0040 	blr	x2
   92cac:	f940a662 	ldr	x2, [x19, #328]
   92cb0:	aa1403e1 	mov	x1, x20
   92cb4:	b9415660 	ldr	w0, [x19, #340]
   92cb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   92cbc:	51000400 	sub	w0, w0, #0x1
   92cc0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92cc4:	aa0203f0 	mov	x16, x2
   92cc8:	d61f0200 	br	x16
   92ccc:	a94153f3 	ldp	x19, x20, [sp, #16]
   92cd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92cd4:	d65f03c0 	ret
   92cd8:	d503201f 	nop
   92cdc:	d503201f 	nop

0000000000092ce0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   92ce0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   92ce4:	d2800102 	mov	x2, #0x8                   	// #8
   92ce8:	910003fd 	mov	x29, sp
   92cec:	a90153f3 	stp	x19, x20, [sp, #16]
   92cf0:	9101bff3 	add	x19, sp, #0x6f
   92cf4:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   92cf8:	2a0103f4 	mov	w20, w1
   92cfc:	52800001 	mov	w1, #0x0                   	// #0
   92d00:	f90013f5 	str	x21, [sp, #32]
   92d04:	aa0003f5 	mov	x21, x0
   92d08:	aa1303e0 	mov	x0, x19
   92d0c:	94006117 	bl	ab168 <memset>
   92d10:	52800100 	mov	w0, #0x8                   	// #8
   92d14:	39000660 	strb	w0, [x19, #1]
   92d18:	7100069f 	cmp	w20, #0x1
   92d1c:	54000200 	b.eq	92d5c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>  // b.none
   92d20:	71000a9f 	cmp	w20, #0x2
   92d24:	54000160 	b.eq	92d50 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>  // b.none
   92d28:	35000214 	cbnz	w20, 92d68 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x88>
   92d2c:	aa1303e1 	mov	x1, x19
   92d30:	aa1503e0 	mov	x0, x21
   92d34:	52800003 	mov	w3, #0x0                   	// #0
   92d38:	52800102 	mov	w2, #0x8                   	// #8
   92d3c:	940002b5 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92d40:	a94153f3 	ldp	x19, x20, [sp, #16]
   92d44:	f94013f5 	ldr	x21, [sp, #32]
   92d48:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   92d4c:	d65f03c0 	ret
   92d50:	12800000 	mov	w0, #0xffffffff            	// #-1
   92d54:	39000e60 	strb	w0, [x19, #3]
   92d58:	17fffff5 	b	92d2c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   92d5c:	12800000 	mov	w0, #0xffffffff            	// #-1
   92d60:	39001260 	strb	w0, [x19, #4]
   92d64:	17fffff2 	b	92d2c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   92d68:	d0000101 	adrp	x1, b4000 <_etext+0x19c8>
   92d6c:	b0000100 	adrp	x0, b3000 <_etext+0x9c8>
   92d70:	91238021 	add	x1, x1, #0x8e0
   92d74:	9135c000 	add	x0, x0, #0xd70
   92d78:	52801cc2 	mov	w2, #0xe6                  	// #230
   92d7c:	94003c61 	bl	a1f00 <assertion_failed>

0000000000092d80 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   92d80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92d84:	910003fd 	mov	x29, sp
   92d88:	f9000bf3 	str	x19, [sp, #16]
   92d8c:	aa0003f3 	mov	x19, x0
   92d90:	94002f84 	bl	9eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   92d94:	f00001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   92d98:	911e4000 	add	x0, x0, #0x790
   92d9c:	f9000260 	str	x0, [x19]
   92da0:	f9400bf3 	ldr	x19, [sp, #16]
   92da4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92da8:	d65f03c0 	ret
   92dac:	d503201f 	nop

0000000000092db0 <CUSBGamePadXbox360Device::Configure()>:
   92db0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   92db4:	528001c2 	mov	w2, #0xe                   	// #14
   92db8:	910003fd 	mov	x29, sp
   92dbc:	91017fe1 	add	x1, sp, #0x5f
   92dc0:	a90153f3 	stp	x19, x20, [sp, #16]
   92dc4:	aa0003f3 	mov	x19, x0
   92dc8:	7902a002 	strh	w2, [x0, #336]
   92dcc:	927ae434 	and	x20, x1, #0xffffffffffffffc0
   92dd0:	94002f0c 	bl	9ea00 <CUSBGamePadDevice::Configure()>
   92dd4:	360005c0 	tbz	w0, #0, 92e8c <CUSBGamePadXbox360Device::Configure()+0xdc>
   92dd8:	f9400261 	ldr	x1, [x19]
   92ddc:	2f00e600 	movi	d0, #0xff00000000
   92de0:	528000c2 	mov	w2, #0x6                   	// #6
   92de4:	b9004a62 	str	w2, [x19, #72]
   92de8:	52801fe0 	mov	w0, #0xff                  	// #255
   92dec:	52800263 	mov	w3, #0x13                  	// #19
   92df0:	f9403c22 	ldr	x2, [x1, #120]
   92df4:	290b827f 	stp	wzr, w0, [x19, #92]
   92df8:	290e827f 	stp	wzr, w0, [x19, #116]
   92dfc:	90000001 	adrp	x1, 92000 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   92e00:	91300021 	add	x1, x1, #0xc00
   92e04:	2911827f 	stp	wzr, w0, [x19, #140]
   92e08:	b9010e7f 	str	wzr, [x19, #268]
   92e0c:	eb01005f 	cmp	x2, x1
   92e10:	b9012a63 	str	w3, [x19, #296]
   92e14:	fd002a60 	str	d0, [x19, #80]
   92e18:	fd003660 	str	d0, [x19, #104]
   92e1c:	fd004260 	str	d0, [x19, #128]
   92e20:	b9415664 	ldr	w4, [x19, #340]
   92e24:	540004c1 	b.ne	92ebc <CUSBGamePadXbox360Device::Configure()+0x10c>  // b.any
   92e28:	93407c80 	sxtw	x0, w4
   92e2c:	f100101f 	cmp	x0, #0x4
   92e30:	540000a9 	b.ls	92e44 <CUSBGamePadXbox360Device::Configure()+0x94>  // b.plast
   92e34:	a94153f3 	ldp	x19, x20, [sp, #16]
   92e38:	52800000 	mov	w0, #0x0                   	// #0
   92e3c:	a8c97bfd 	ldp	x29, x30, [sp], #144
   92e40:	d65f03c0 	ret
   92e44:	b0000125 	adrp	x5, b7000 <_etext+0x49c8>
   92e48:	913880a5 	add	x5, x5, #0xe20
   92e4c:	910160a5 	add	x5, x5, #0x58
   92e50:	52806026 	mov	w6, #0x301                 	// #769
   92e54:	aa1403e1 	mov	x1, x20
   92e58:	aa1303e0 	mov	x0, x19
   92e5c:	52800003 	mov	w3, #0x0                   	// #0
   92e60:	52800062 	mov	w2, #0x3                   	// #3
   92e64:	3864c8a4 	ldrb	w4, [x5, w4, sxtw]
   92e68:	79000286 	strh	w6, [x20]
   92e6c:	39000a84 	strb	w4, [x20, #2]
   92e70:	94000268 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   92e74:	12001c00 	and	w0, w0, #0xff
   92e78:	3607fde0 	tbz	w0, #0, 92e34 <CUSBGamePadXbox360Device::Configure()+0x84>
   92e7c:	aa1303e0 	mov	x0, x19
   92e80:	a94153f3 	ldp	x19, x20, [sp, #16]
   92e84:	a8c97bfd 	ldp	x29, x30, [sp], #144
   92e88:	140002f2 	b	93a50 <CUSBHIDDevice::StartRequest()>
   92e8c:	94004359 	bl	a3bf0 <CLogger::Get()>
   92e90:	b0000121 	adrp	x1, b7000 <_etext+0x49c8>
   92e94:	91388021 	add	x1, x1, #0xe20
   92e98:	91018021 	add	x1, x1, #0x60
   92e9c:	52800022 	mov	w2, #0x1                   	// #1
   92ea0:	d0000103 	adrp	x3, b4000 <_etext+0x19c8>
   92ea4:	911a8063 	add	x3, x3, #0x6a0
   92ea8:	94004546 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92eac:	a94153f3 	ldp	x19, x20, [sp, #16]
   92eb0:	52800000 	mov	w0, #0x0                   	// #0
   92eb4:	a8c97bfd 	ldp	x29, x30, [sp], #144
   92eb8:	d65f03c0 	ret
   92ebc:	2a0403e1 	mov	w1, w4
   92ec0:	aa1303e0 	mov	x0, x19
   92ec4:	d63f0040 	blr	x2
   92ec8:	12001c00 	and	w0, w0, #0xff
   92ecc:	17ffffeb 	b	92e78 <CUSBGamePadXbox360Device::Configure()+0xc8>

0000000000092ed0 <CUSBGamePadXbox360Device::GetProperties()>:
   92ed0:	52800160 	mov	w0, #0xb                   	// #11
   92ed4:	d65f03c0 	ret
	...

0000000000092ee0 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   92ee0:	39401022 	ldrb	w2, [x1, #4]
   92ee4:	d3420842 	ubfx	x2, x2, #2, #1
   92ee8:	53124442 	lsl	w2, w2, #14
   92eec:	b9012c02 	str	w2, [x0, #300]
   92ef0:	39401023 	ldrb	w3, [x1, #4]
   92ef4:	36180063 	tbz	w3, #3, 92f00 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x20>
   92ef8:	32150042 	orr	w2, w2, #0x800
   92efc:	b9012c02 	str	w2, [x0, #300]
   92f00:	36200083 	tbz	w3, #4, 92f10 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x30>
   92f04:	b9412c02 	ldr	w2, [x0, #300]
   92f08:	32170042 	orr	w2, w2, #0x200
   92f0c:	b9012c02 	str	w2, [x0, #300]
   92f10:	36280083 	tbz	w3, #5, 92f20 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x40>
   92f14:	b9412c02 	ldr	w2, [x0, #300]
   92f18:	32180042 	orr	w2, w2, #0x100
   92f1c:	b9012c02 	str	w2, [x0, #300]
   92f20:	36300083 	tbz	w3, #6, 92f30 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x50>
   92f24:	b9412c02 	ldr	w2, [x0, #300]
   92f28:	32160042 	orr	w2, w2, #0x400
   92f2c:	b9012c02 	str	w2, [x0, #300]
   92f30:	36380083 	tbz	w3, #7, 92f40 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x60>
   92f34:	b9412c02 	ldr	w2, [x0, #300]
   92f38:	32190042 	orr	w2, w2, #0x80
   92f3c:	b9012c02 	str	w2, [x0, #300]
   92f40:	39401422 	ldrb	w2, [x1, #5]
   92f44:	36000082 	tbz	w2, #0, 92f54 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x74>
   92f48:	b9412c03 	ldr	w3, [x0, #300]
   92f4c:	32110063 	orr	w3, w3, #0x8000
   92f50:	b9012c03 	str	w3, [x0, #300]
   92f54:	36080082 	tbz	w2, #1, 92f64 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x84>
   92f58:	b9412c03 	ldr	w3, [x0, #300]
   92f5c:	320f0063 	orr	w3, w3, #0x20000
   92f60:	b9012c03 	str	w3, [x0, #300]
   92f64:	36100082 	tbz	w2, #2, 92f74 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x94>
   92f68:	b9412c03 	ldr	w3, [x0, #300]
   92f6c:	320e0063 	orr	w3, w3, #0x40000
   92f70:	b9012c03 	str	w3, [x0, #300]
   92f74:	36180082 	tbz	w2, #3, 92f84 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xa4>
   92f78:	b9412c03 	ldr	w3, [x0, #300]
   92f7c:	32100063 	orr	w3, w3, #0x10000
   92f80:	b9012c03 	str	w3, [x0, #300]
   92f84:	36200082 	tbz	w2, #4, 92f94 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xb4>
   92f88:	b9412c03 	ldr	w3, [x0, #300]
   92f8c:	321b0063 	orr	w3, w3, #0x20
   92f90:	b9012c03 	str	w3, [x0, #300]
   92f94:	36280082 	tbz	w2, #5, 92fa4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xc4>
   92f98:	b9412c03 	ldr	w3, [x0, #300]
   92f9c:	321a0063 	orr	w3, w3, #0x40
   92fa0:	b9012c03 	str	w3, [x0, #300]
   92fa4:	36300082 	tbz	w2, #6, 92fb4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xd4>
   92fa8:	b9412c03 	ldr	w3, [x0, #300]
   92fac:	32140063 	orr	w3, w3, #0x1000
   92fb0:	b9012c03 	str	w3, [x0, #300]
   92fb4:	36380082 	tbz	w2, #7, 92fc4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xe4>
   92fb8:	b9412c02 	ldr	w2, [x0, #300]
   92fbc:	32130042 	orr	w2, w2, #0x2000
   92fc0:	b9012c02 	str	w2, [x0, #300]
   92fc4:	39401823 	ldrb	w3, [x1, #6]
   92fc8:	39401c22 	ldrb	w2, [x1, #7]
   92fcc:	2a022062 	orr	w2, w3, w2, lsl #8
   92fd0:	53027c42 	lsr	w2, w2, #2
   92fd4:	b9007c02 	str	w2, [x0, #124]
   92fd8:	7101fc5f 	cmp	w2, #0x7f
   92fdc:	54000089 	b.ls	92fec <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x10c>  // b.plast
   92fe0:	b9412c02 	ldr	w2, [x0, #300]
   92fe4:	321d0042 	orr	w2, w2, #0x8
   92fe8:	b9012c02 	str	w2, [x0, #300]
   92fec:	39402023 	ldrb	w3, [x1, #8]
   92ff0:	39402422 	ldrb	w2, [x1, #9]
   92ff4:	2a022062 	orr	w2, w3, w2, lsl #8
   92ff8:	53027c42 	lsr	w2, w2, #2
   92ffc:	b9008802 	str	w2, [x0, #136]
   93000:	7101fc5f 	cmp	w2, #0x7f
   93004:	54000089 	b.ls	93014 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x134>  // b.plast
   93008:	b9412c02 	ldr	w2, [x0, #300]
   9300c:	321c0042 	orr	w2, w2, #0x10
   93010:	b9012c02 	str	w2, [x0, #300]
   93014:	39402823 	ldrb	w3, [x1, #10]
   93018:	39402c22 	ldrb	w2, [x1, #11]
   9301c:	aa022062 	orr	x2, x3, x2, lsl #8
   93020:	93403c42 	sxth	x2, w2
   93024:	11402042 	add	w2, w2, #0x8, lsl #12
   93028:	53087c42 	lsr	w2, w2, #8
   9302c:	b9004c02 	str	w2, [x0, #76]
   93030:	39403023 	ldrb	w3, [x1, #12]
   93034:	39403422 	ldrb	w2, [x1, #13]
   93038:	aa022062 	orr	x2, x3, x2, lsl #8
   9303c:	93403c42 	sxth	x2, w2
   93040:	11402042 	add	w2, w2, #0x8, lsl #12
   93044:	53087c42 	lsr	w2, w2, #8
   93048:	52001c42 	eor	w2, w2, #0xff
   9304c:	b9005802 	str	w2, [x0, #88]
   93050:	39403823 	ldrb	w3, [x1, #14]
   93054:	39403c22 	ldrb	w2, [x1, #15]
   93058:	aa022062 	orr	x2, x3, x2, lsl #8
   9305c:	93403c42 	sxth	x2, w2
   93060:	11402042 	add	w2, w2, #0x8, lsl #12
   93064:	53087c42 	lsr	w2, w2, #8
   93068:	b9006402 	str	w2, [x0, #100]
   9306c:	39404022 	ldrb	w2, [x1, #16]
   93070:	39404421 	ldrb	w1, [x1, #17]
   93074:	aa012041 	orr	x1, x2, x1, lsl #8
   93078:	93403c21 	sxth	x1, w1
   9307c:	11402021 	add	w1, w1, #0x8, lsl #12
   93080:	53087c21 	lsr	w1, w1, #8
   93084:	52001c21 	eor	w1, w1, #0xff
   93088:	b9007001 	str	w1, [x0, #112]
   9308c:	d65f03c0 	ret

0000000000093090 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   93090:	d00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   93094:	9120e021 	add	x1, x1, #0x838
   93098:	f9000001 	str	x1, [x0]
   9309c:	14002ed5 	b	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>

00000000000930a0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   930a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   930a4:	d00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   930a8:	9120e021 	add	x1, x1, #0x838
   930ac:	910003fd 	mov	x29, sp
   930b0:	f9000bf3 	str	x19, [sp, #16]
   930b4:	aa0003f3 	mov	x19, x0
   930b8:	f9000001 	str	x1, [x0]
   930bc:	94002ecd 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   930c0:	aa1303e0 	mov	x0, x19
   930c4:	d2802c01 	mov	x1, #0x160                 	// #352
   930c8:	f9400bf3 	ldr	x19, [sp, #16]
   930cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   930d0:	140062b8 	b	abbb0 <operator delete(void*, unsigned long)>
   930d4:	d503201f 	nop
   930d8:	d503201f 	nop
   930dc:	d503201f 	nop

00000000000930e0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   930e0:	b40007c1 	cbz	x1, 931d8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xf8>
   930e4:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   930e8:	aa0103e5 	mov	x5, x1
   930ec:	7100185f 	cmp	w2, #0x6
   930f0:	910003fd 	mov	x29, sp
   930f4:	54000140 	b.eq	9311c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>  // b.none
   930f8:	f940a403 	ldr	x3, [x0, #328]
   930fc:	a90153f3 	stp	x19, x20, [sp, #16]
   93100:	aa0003f3 	mov	x19, x0
   93104:	f100007f 	cmp	x3, #0x0
   93108:	7a521840 	ccmp	w2, #0x12, #0x0, ne	// ne = any
   9310c:	54000480 	b.eq	9319c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xbc>  // b.none
   93110:	a94153f3 	ldp	x19, x20, [sp, #16]
   93114:	a8c97bfd 	ldp	x29, x30, [sp], #144
   93118:	d65f03c0 	ret
   9311c:	39400021 	ldrb	w1, [x1]
   93120:	71001c3f 	cmp	w1, #0x7
   93124:	54ffff81 	b.ne	93114 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>  // b.any
   93128:	394004a1 	ldrb	w1, [x5, #1]
   9312c:	7100c03f 	cmp	w1, #0x30
   93130:	54ffff21 	b.ne	93114 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>  // b.any
   93134:	91017fe3 	add	x3, sp, #0x5f
   93138:	394008a5 	ldrb	w5, [x5, #2]
   9313c:	927ae464 	and	x4, x3, #0xffffffffffffffc0
   93140:	d2840022 	mov	x2, #0x2001                	// #8193
   93144:	f2a12002 	movk	x2, #0x900, lsl #16
   93148:	d2800003 	mov	x3, #0x0                   	// #0
   9314c:	f2c0e002 	movk	x2, #0x700, lsl #32
   93150:	f2e04402 	movk	x2, #0x220, lsl #48
   93154:	a9000c82 	stp	x2, x3, [x4]
   93158:	aa0403e1 	mov	x1, x4
   9315c:	52800003 	mov	w3, #0x0                   	// #0
   93160:	528001a2 	mov	w2, #0xd                   	// #13
   93164:	39000885 	strb	w5, [x4, #2]
   93168:	a9017c9f 	stp	xzr, xzr, [x4, #16]
   9316c:	a9027c9f 	stp	xzr, xzr, [x4, #32]
   93170:	a9037c9f 	stp	xzr, xzr, [x4, #48]
   93174:	940001cf 	bl	938b0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   93178:	3707fce0 	tbnz	w0, #0, 93114 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>
   9317c:	9400429d 	bl	a3bf0 <CLogger::Get()>
   93180:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   93184:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   93188:	91248063 	add	x3, x3, #0x920
   9318c:	913a4021 	add	x1, x1, #0xe90
   93190:	52800022 	mov	w2, #0x1                   	// #1
   93194:	9400448b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93198:	17ffffdf 	b	93114 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x34>
   9319c:	39400022 	ldrb	w2, [x1]
   931a0:	7100805f 	cmp	w2, #0x20
   931a4:	54fffb61 	b.ne	93110 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x30>  // b.any
   931a8:	aa0003f4 	mov	x20, x0
   931ac:	f8448682 	ldr	x2, [x20], #72
   931b0:	f9404842 	ldr	x2, [x2, #144]
   931b4:	d63f0040 	blr	x2
   931b8:	f940a662 	ldr	x2, [x19, #328]
   931bc:	aa1403e1 	mov	x1, x20
   931c0:	b9415660 	ldr	w0, [x19, #340]
   931c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   931c8:	51000400 	sub	w0, w0, #0x1
   931cc:	a8c97bfd 	ldp	x29, x30, [sp], #144
   931d0:	aa0203f0 	mov	x16, x2
   931d4:	d61f0200 	br	x16
   931d8:	d65f03c0 	ret
   931dc:	d503201f 	nop

00000000000931e0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   931e0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   931e4:	90000122 	adrp	x2, b7000 <_etext+0x49c8>
   931e8:	913a4042 	add	x2, x2, #0xe90
   931ec:	91017fe4 	add	x4, sp, #0x5f
   931f0:	910003fd 	mov	x29, sp
   931f4:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   931f8:	a90153f3 	stp	x19, x20, [sp, #16]
   931fc:	2a0103f4 	mov	w20, w1
   93200:	aa0003f3 	mov	x19, x0
   93204:	91004041 	add	x1, x2, #0x10
   93208:	aa0403e0 	mov	x0, x4
   9320c:	d28001c2 	mov	x2, #0xe                   	// #14
   93210:	94005fee 	bl	ab1c8 <memcpy>
   93214:	4f000400 	movi	v0.4s, #0x0
   93218:	aa0003e4 	mov	x4, x0
   9321c:	91003800 	add	x0, x0, #0xe
   93220:	7100069f 	cmp	w20, #0x1
   93224:	79007c9f 	strh	wzr, [x4, #62]
   93228:	ad000000 	stp	q0, q0, [x0]
   9322c:	3d800800 	str	q0, [x0, #32]
   93230:	54000260 	b.eq	9327c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>  // b.none
   93234:	71000a9f 	cmp	w20, #0x2
   93238:	540001c0 	b.eq	93270 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>  // b.none
   9323c:	35000274 	cbnz	w20, 93288 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xa8>
   93240:	39456265 	ldrb	w5, [x19, #344]
   93244:	aa0403e1 	mov	x1, x4
   93248:	aa1303e0 	mov	x0, x19
   9324c:	52800003 	mov	w3, #0x0                   	// #0
   93250:	110004a2 	add	w2, w5, #0x1
   93254:	39056262 	strb	w2, [x19, #344]
   93258:	528001a2 	mov	w2, #0xd                   	// #13
   9325c:	39000885 	strb	w5, [x4, #2]
   93260:	9400016c 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   93264:	a94153f3 	ldp	x19, x20, [sp, #16]
   93268:	a8c97bfd 	ldp	x29, x30, [sp], #144
   9326c:	d65f03c0 	ret
   93270:	12800000 	mov	w0, #0xffffffff            	// #-1
   93274:	39002080 	strb	w0, [x4, #8]
   93278:	17fffff2 	b	93240 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   9327c:	12800000 	mov	w0, #0xffffffff            	// #-1
   93280:	39002480 	strb	w0, [x4, #9]
   93284:	17ffffef 	b	93240 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x60>
   93288:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9328c:	90000100 	adrp	x0, b3000 <_etext+0x9c8>
   93290:	9124e021 	add	x1, x1, #0x938
   93294:	9135c000 	add	x0, x0, #0xd70
   93298:	52801de2 	mov	w2, #0xef                  	// #239
   9329c:	94003b19 	bl	a1f00 <assertion_failed>

00000000000932a0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   932a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   932a4:	910003fd 	mov	x29, sp
   932a8:	f9000bf3 	str	x19, [sp, #16]
   932ac:	aa0003f3 	mov	x19, x0
   932b0:	94002e3c 	bl	9eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   932b4:	d00001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   932b8:	9120e000 	add	x0, x0, #0x838
   932bc:	f9000260 	str	x0, [x19]
   932c0:	3905627f 	strb	wzr, [x19, #344]
   932c4:	f9400bf3 	ldr	x19, [sp, #16]
   932c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   932cc:	d65f03c0 	ret

00000000000932d0 <CUSBGamePadXboxOneDevice::Configure()>:
   932d0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   932d4:	52800801 	mov	w1, #0x40                  	// #64
   932d8:	910003fd 	mov	x29, sp
   932dc:	a90153f3 	stp	x19, x20, [sp, #16]
   932e0:	aa0003f3 	mov	x19, x0
   932e4:	7902a001 	strh	w1, [x0, #336]
   932e8:	94002dc6 	bl	9ea00 <CUSBGamePadDevice::Configure()>
   932ec:	360005c0 	tbz	w0, #0, 933a4 <CUSBGamePadXboxOneDevice::Configure()+0xd4>
   932f0:	2f00e600 	movi	d0, #0xff00000000
   932f4:	91017ff4 	add	x20, sp, #0x5f
   932f8:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   932fc:	52801fe4 	mov	w4, #0xff                  	// #255
   93300:	528000c0 	mov	w0, #0x6                   	// #6
   93304:	52800265 	mov	w5, #0x13                  	// #19
   93308:	d28400a6 	mov	x6, #0x2005                	// #8197
   9330c:	f2a02006 	movk	x6, #0x100, lsl #16
   93310:	d2800007 	mov	x7, #0x0                   	// #0
   93314:	b9004a60 	str	w0, [x19, #72]
   93318:	290b927f 	stp	wzr, w4, [x19, #92]
   9331c:	aa1403e1 	mov	x1, x20
   93320:	290e927f 	stp	wzr, w4, [x19, #116]
   93324:	aa1303e0 	mov	x0, x19
   93328:	2911927f 	stp	wzr, w4, [x19, #140]
   9332c:	52800003 	mov	w3, #0x0                   	// #0
   93330:	b9010e7f 	str	wzr, [x19, #268]
   93334:	528000a2 	mov	w2, #0x5                   	// #5
   93338:	b9012a65 	str	w5, [x19, #296]
   9333c:	a9001e86 	stp	x6, x7, [x20]
   93340:	a9017e9f 	stp	xzr, xzr, [x20, #16]
   93344:	a9027e9f 	stp	xzr, xzr, [x20, #32]
   93348:	a9037e9f 	stp	xzr, xzr, [x20, #48]
   9334c:	fd002a60 	str	d0, [x19, #80]
   93350:	fd003660 	str	d0, [x19, #104]
   93354:	fd004260 	str	d0, [x19, #128]
   93358:	9400012e 	bl	93810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   9335c:	360000e0 	tbz	w0, #0, 93378 <CUSBGamePadXboxOneDevice::Configure()+0xa8>
   93360:	aa1303e0 	mov	x0, x19
   93364:	940001bb 	bl	93a50 <CUSBHIDDevice::StartRequest()>
   93368:	a94153f3 	ldp	x19, x20, [sp, #16]
   9336c:	12001c00 	and	w0, w0, #0xff
   93370:	a8c97bfd 	ldp	x29, x30, [sp], #144
   93374:	d65f03c0 	ret
   93378:	9400421e 	bl	a3bf0 <CLogger::Get()>
   9337c:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   93380:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   93384:	91254063 	add	x3, x3, #0x950
   93388:	913a4021 	add	x1, x1, #0xe90
   9338c:	52800022 	mov	w2, #0x1                   	// #1
   93390:	9400440c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93394:	52800000 	mov	w0, #0x0                   	// #0
   93398:	a94153f3 	ldp	x19, x20, [sp, #16]
   9339c:	a8c97bfd 	ldp	x29, x30, [sp], #144
   933a0:	d65f03c0 	ret
   933a4:	94004213 	bl	a3bf0 <CLogger::Get()>
   933a8:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   933ac:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   933b0:	911a8063 	add	x3, x3, #0x6a0
   933b4:	913a4021 	add	x1, x1, #0xe90
   933b8:	52800022 	mov	w2, #0x1                   	// #1
   933bc:	94004401 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   933c0:	52800000 	mov	w0, #0x0                   	// #0
   933c4:	17fffff5 	b	93398 <CUSBGamePadXboxOneDevice::Configure()+0xc8>
	...

00000000000933d0 <CUSBGamePadXboxOneDevice::GetProperties()>:
   933d0:	52800120 	mov	w0, #0x9                   	// #9
   933d4:	d65f03c0 	ret
	...

00000000000933e0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   933e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   933e4:	910003fd 	mov	x29, sp
   933e8:	a90153f3 	stp	x19, x20, [sp, #16]
   933ec:	b40002e0 	cbz	x0, 93448 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x68>
   933f0:	aa0103f4 	mov	x20, x1
   933f4:	aa0003f3 	mov	x19, x0
   933f8:	94000e9a 	bl	96e60 <CUSBRequest::GetStatus() const>
   933fc:	34000160 	cbz	w0, 93428 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x48>
   93400:	aa1303e0 	mov	x0, x19
   93404:	94000e7b 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93408:	aa1303e0 	mov	x0, x19
   9340c:	d2801201 	mov	x1, #0x90                  	// #144
   93410:	94000f58 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   93414:	b4000274 	cbz	x20, 93460 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   93418:	aa1403e0 	mov	x0, x20
   9341c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93420:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93424:	140061db 	b	abb90 <operator delete[](void*)>
   93428:	940041f2 	bl	a3bf0 <CLogger::Get()>
   9342c:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   93430:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   93434:	91260063 	add	x3, x3, #0x980
   93438:	913ac021 	add	x1, x1, #0xeb0
   9343c:	52800042 	mov	w2, #0x2                   	// #2
   93440:	940043e0 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93444:	17ffffef 	b	93400 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x20>
   93448:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9344c:	90000100 	adrp	x0, b3000 <_etext+0x9c8>
   93450:	9125a021 	add	x1, x1, #0x968
   93454:	9106c000 	add	x0, x0, #0x1b0
   93458:	52801602 	mov	w2, #0xb0                  	// #176
   9345c:	94003aa9 	bl	a1f00 <assertion_failed>
   93460:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93464:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93468:	9125a021 	add	x1, x1, #0x968
   9346c:	91268000 	add	x0, x0, #0x9a0
   93470:	52801722 	mov	w2, #0xb9                  	// #185
   93474:	94003aa3 	bl	a1f00 <assertion_failed>
   93478:	d503201f 	nop
   9347c:	d503201f 	nop

0000000000093480 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   93480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93484:	910003fd 	mov	x29, sp
   93488:	a90153f3 	stp	x19, x20, [sp, #16]
   9348c:	aa0003f3 	mov	x19, x0
   93490:	2a0203f4 	mov	w20, w2
   93494:	97fff3fb 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   93498:	d00001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9349c:	91238000 	add	x0, x0, #0x8e0
   934a0:	f9000260 	str	x0, [x19]
   934a4:	b9002a74 	str	w20, [x19, #40]
   934a8:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   934ac:	f900227f 	str	xzr, [x19, #64]
   934b0:	35000094 	cbnz	w20, 934c0 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   934b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   934b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   934bc:	d65f03c0 	ret
   934c0:	2a1403e0 	mov	w0, w20
   934c4:	940061a3 	bl	abb50 <operator new[](unsigned long)>
   934c8:	f9002260 	str	x0, [x19, #64]
   934cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   934d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   934d4:	d65f03c0 	ret
   934d8:	d503201f 	nop
   934dc:	d503201f 	nop

00000000000934e0 <CUSBHIDDevice::~CUSBHIDDevice()>:
   934e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   934e4:	d00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   934e8:	91238021 	add	x1, x1, #0x8e0
   934ec:	910003fd 	mov	x29, sp
   934f0:	a90153f3 	stp	x19, x20, [sp, #16]
   934f4:	aa0003f3 	mov	x19, x0
   934f8:	f9402000 	ldr	x0, [x0, #64]
   934fc:	f9000261 	str	x1, [x19]
   93500:	b4000040 	cbz	x0, 93508 <CUSBHIDDevice::~CUSBHIDDevice()+0x28>
   93504:	940061a3 	bl	abb90 <operator delete[](void*)>
   93508:	f9401e74 	ldr	x20, [x19, #56]
   9350c:	f900227f 	str	xzr, [x19, #64]
   93510:	b40000d4 	cbz	x20, 93528 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   93514:	aa1403e0 	mov	x0, x20
   93518:	97fff2b2 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9351c:	aa1403e0 	mov	x0, x20
   93520:	d2800401 	mov	x1, #0x20                  	// #32
   93524:	940061a3 	bl	abbb0 <operator delete(void*, unsigned long)>
   93528:	f9401a74 	ldr	x20, [x19, #48]
   9352c:	f9001e7f 	str	xzr, [x19, #56]
   93530:	b40000d4 	cbz	x20, 93548 <CUSBHIDDevice::~CUSBHIDDevice()+0x68>
   93534:	aa1403e0 	mov	x0, x20
   93538:	97fff2aa 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9353c:	aa1403e0 	mov	x0, x20
   93540:	d2800401 	mov	x1, #0x20                  	// #32
   93544:	9400619b 	bl	abbb0 <operator delete(void*, unsigned long)>
   93548:	f9001a7f 	str	xzr, [x19, #48]
   9354c:	aa1303e0 	mov	x0, x19
   93550:	a94153f3 	ldp	x19, x20, [sp, #16]
   93554:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93558:	17fff326 	b	901f0 <CUSBFunction::~CUSBFunction()>
   9355c:	d503201f 	nop

0000000000093560 <CUSBHIDDevice::~CUSBHIDDevice()>:
   93560:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93564:	910003fd 	mov	x29, sp
   93568:	f9000bf3 	str	x19, [sp, #16]
   9356c:	aa0003f3 	mov	x19, x0
   93570:	97ffffdc 	bl	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   93574:	aa1303e0 	mov	x0, x19
   93578:	d2800901 	mov	x1, #0x48                  	// #72
   9357c:	f9400bf3 	ldr	x19, [sp, #16]
   93580:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93584:	1400618b 	b	abbb0 <operator delete(void*, unsigned long)>
   93588:	d503201f 	nop
   9358c:	d503201f 	nop

0000000000093590 <CUSBHIDDevice::ConfigureHID(unsigned int)>:
   93590:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   93594:	910003fd 	mov	x29, sp
   93598:	a90153f3 	stp	x19, x20, [sp, #16]
   9359c:	aa0003f4 	mov	x20, x0
   935a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   935a4:	2a0103f6 	mov	w22, w1
   935a8:	97fff40e 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   935ac:	72001c1f 	tst	w0, #0xff
   935b0:	540000c1 	b.ne	935c8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>  // b.any
   935b4:	14000048 	b	936d4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   935b8:	39400e62 	ldrb	w2, [x19, #3]
   935bc:	12001442 	and	w2, w2, #0x3f
   935c0:	71000c5f 	cmp	w2, #0x3
   935c4:	540003e0 	b.eq	93640 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xb0>  // b.none
   935c8:	aa1403e0 	mov	x0, x20
   935cc:	528000a1 	mov	w1, #0x5                   	// #5
   935d0:	97fff434 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   935d4:	aa0003f3 	mov	x19, x0
   935d8:	b5ffff00 	cbnz	x0, 935b8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x28>
   935dc:	f9401a80 	ldr	x0, [x20, #48]
   935e0:	b40007a0 	cbz	x0, 936d4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   935e4:	aa1403e0 	mov	x0, x20
   935e8:	97fff33a 	bl	902d0 <CUSBFunction::Configure()>
   935ec:	12001c13 	and	w19, w0, #0xff
   935f0:	36000600 	tbz	w0, #0, 936b0 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x120>
   935f4:	aa1403e0 	mov	x0, x20
   935f8:	97fff48e 	bl	90830 <CUSBFunction::GetInterfaceClass() const>
   935fc:	12001c00 	and	w0, w0, #0xff
   93600:	71000c1f 	cmp	w0, #0x3
   93604:	54000880 	b.eq	93714 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x184>  // b.none
   93608:	b9402a80 	ldr	w0, [x20, #40]
   9360c:	35000700 	cbnz	w0, 936ec <CUSBHIDDevice::ConfigureHID(unsigned int)+0x15c>
   93610:	b9002a96 	str	w22, [x20, #40]
   93614:	34000c96 	cbz	w22, 937a4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x214>
   93618:	f9402280 	ldr	x0, [x20, #64]
   9361c:	b5000d40 	cbnz	x0, 937c4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x234>
   93620:	2a1603e0 	mov	w0, w22
   93624:	9400614b 	bl	abb50 <operator new[](unsigned long)>
   93628:	f9002280 	str	x0, [x20, #64]
   9362c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93630:	2a1303e0 	mov	w0, w19
   93634:	a94153f3 	ldp	x19, x20, [sp, #16]
   93638:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9363c:	d65f03c0 	ret
   93640:	39c00a60 	ldrsb	w0, [x19, #2]
   93644:	37f801c0 	tbnz	w0, #31, 9367c <CUSBHIDDevice::ConfigureHID(unsigned int)+0xec>
   93648:	f9401e80 	ldr	x0, [x20, #56]
   9364c:	b5000440 	cbnz	x0, 936d4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   93650:	d2800400 	mov	x0, #0x20                  	// #32
   93654:	94006137 	bl	abb30 <operator new(unsigned long)>
   93658:	aa0003f5 	mov	x21, x0
   9365c:	aa1403e0 	mov	x0, x20
   93660:	97fff3ec 	bl	90610 <CUSBFunction::GetDevice() const>
   93664:	aa0003e1 	mov	x1, x0
   93668:	aa1303e2 	mov	x2, x19
   9366c:	aa1503e0 	mov	x0, x21
   93670:	97fff1d0 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   93674:	f9001e95 	str	x21, [x20, #56]
   93678:	17ffffd4 	b	935c8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>
   9367c:	f9401a80 	ldr	x0, [x20, #48]
   93680:	b50002a0 	cbnz	x0, 936d4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   93684:	d2800400 	mov	x0, #0x20                  	// #32
   93688:	9400612a 	bl	abb30 <operator new(unsigned long)>
   9368c:	aa0003f5 	mov	x21, x0
   93690:	aa1403e0 	mov	x0, x20
   93694:	97fff3df 	bl	90610 <CUSBFunction::GetDevice() const>
   93698:	aa0003e1 	mov	x1, x0
   9369c:	aa1303e2 	mov	x2, x19
   936a0:	aa1503e0 	mov	x0, x21
   936a4:	97fff1c3 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   936a8:	f9001a95 	str	x21, [x20, #48]
   936ac:	17ffffc7 	b	935c8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>
   936b0:	94004150 	bl	a3bf0 <CLogger::Get()>
   936b4:	52800013 	mov	w19, #0x0                   	// #0
   936b8:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   936bc:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   936c0:	91182063 	add	x3, x3, #0x608
   936c4:	913ac021 	add	x1, x1, #0xeb0
   936c8:	52800022 	mov	w2, #0x1                   	// #1
   936cc:	9400433d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   936d0:	17ffffd7 	b	9362c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x9c>
   936d4:	aa1403e0 	mov	x0, x20
   936d8:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   936dc:	913ac021 	add	x1, x1, #0xeb0
   936e0:	52800013 	mov	w19, #0x0                   	// #0
   936e4:	97fff3fb 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   936e8:	17ffffd1 	b	9362c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x9c>
   936ec:	f9402280 	ldr	x0, [x20, #64]
   936f0:	b5fff9e0 	cbnz	x0, 9362c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x9c>
   936f4:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   936f8:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   936fc:	9125a021 	add	x1, x1, #0x968
   93700:	91280000 	add	x0, x0, #0xa00
   93704:	52801062 	mov	w2, #0x83                  	// #131
   93708:	a90363f7 	stp	x23, x24, [sp, #48]
   9370c:	f90023f9 	str	x25, [sp, #64]
   93710:	940039fc 	bl	a1f00 <assertion_failed>
   93714:	aa1403e0 	mov	x0, x20
   93718:	97fff452 	bl	90860 <CUSBFunction::GetInterfaceSubClass() const>
   9371c:	12001c15 	and	w21, w0, #0xff
   93720:	710006bf 	cmp	w21, #0x1
   93724:	54fff721 	b.ne	93608 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>  // b.any
   93728:	aa1403e0 	mov	x0, x20
   9372c:	97fff459 	bl	90890 <CUSBFunction::GetInterfaceProtocol() const>
   93730:	72001c1f 	tst	w0, #0xff
   93734:	54fff6a0 	b.eq	93608 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>  // b.none
   93738:	aa1403e0 	mov	x0, x20
   9373c:	a90363f7 	stp	x23, x24, [sp, #48]
   93740:	f90023f9 	str	x25, [sp, #64]
   93744:	97fff3cb 	bl	90670 <CUSBFunction::GetHost() const>
   93748:	aa0003f7 	mov	x23, x0
   9374c:	aa1403e0 	mov	x0, x20
   93750:	97fff3bc 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   93754:	aa0003f9 	mov	x25, x0
   93758:	aa1403e0 	mov	x0, x20
   9375c:	97fff44d 	bl	90890 <CUSBFunction::GetInterfaceProtocol() const>
   93760:	12001c18 	and	w24, w0, #0xff
   93764:	aa1403e0 	mov	x0, x20
   93768:	97fff426 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   9376c:	12001c05 	and	w5, w0, #0xff
   93770:	71000b1f 	cmp	w24, #0x2
   93774:	aa1903e1 	mov	x1, x25
   93778:	1a9f17e4 	cset	w4, eq	// eq = none
   9377c:	aa1703e0 	mov	x0, x23
   93780:	52800007 	mov	w7, #0x0                   	// #0
   93784:	d2800006 	mov	x6, #0x0                   	// #0
   93788:	52800163 	mov	w3, #0xb                   	// #11
   9378c:	52800422 	mov	w2, #0x21                  	// #33
   93790:	940001c0 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   93794:	37f80280 	tbnz	w0, #31, 937e4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x254>
   93798:	a94363f7 	ldp	x23, x24, [sp, #48]
   9379c:	f94023f9 	ldr	x25, [sp, #64]
   937a0:	17ffff9a 	b	93608 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>
   937a4:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   937a8:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   937ac:	9125a021 	add	x1, x1, #0x968
   937b0:	91274000 	add	x0, x0, #0x9d0
   937b4:	52800fc2 	mov	w2, #0x7e                  	// #126
   937b8:	a90363f7 	stp	x23, x24, [sp, #48]
   937bc:	f90023f9 	str	x25, [sp, #64]
   937c0:	940039d0 	bl	a1f00 <assertion_failed>
   937c4:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   937c8:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   937cc:	9125a021 	add	x1, x1, #0x968
   937d0:	9127a000 	add	x0, x0, #0x9e8
   937d4:	52801002 	mov	w2, #0x80                  	// #128
   937d8:	a90363f7 	stp	x23, x24, [sp, #48]
   937dc:	f90023f9 	str	x25, [sp, #64]
   937e0:	940039c8 	bl	a1f00 <assertion_failed>
   937e4:	94004103 	bl	a3bf0 <CLogger::Get()>
   937e8:	52800013 	mov	w19, #0x0                   	// #0
   937ec:	2a1503e2 	mov	w2, w21
   937f0:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   937f4:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   937f8:	9126e063 	add	x3, x3, #0x9b8
   937fc:	913ac021 	add	x1, x1, #0xeb0
   93800:	940042f0 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93804:	a94363f7 	ldp	x23, x24, [sp, #48]
   93808:	f94023f9 	ldr	x25, [sp, #64]
   9380c:	17ffff88 	b	9362c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x9c>

0000000000093810 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   93810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93814:	910003fd 	mov	x29, sp
   93818:	a90153f3 	stp	x19, x20, [sp, #16]
   9381c:	aa0103f4 	mov	x20, x1
   93820:	f9401c01 	ldr	x1, [x0, #56]
   93824:	b4000261 	cbz	x1, 93870 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   93828:	a9025bf5 	stp	x21, x22, [sp, #32]
   9382c:	b40002b4 	cbz	x20, 93880 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x70>
   93830:	2a0203f5 	mov	w21, w2
   93834:	34000322 	cbz	w2, 93898 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   93838:	aa0003f3 	mov	x19, x0
   9383c:	2a0303f6 	mov	w22, w3
   93840:	97fff38c 	bl	90670 <CUSBFunction::GetHost() const>
   93844:	2a1603e4 	mov	w4, w22
   93848:	2a1503e3 	mov	w3, w21
   9384c:	f9401e61 	ldr	x1, [x19, #56]
   93850:	aa1403e2 	mov	x2, x20
   93854:	9400020b 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   93858:	2a2003e0 	mvn	w0, w0
   9385c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93860:	531f7c00 	lsr	w0, w0, #31
   93864:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93868:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9386c:	d65f03c0 	ret
   93870:	a94153f3 	ldp	x19, x20, [sp, #16]
   93874:	52800000 	mov	w0, #0x0                   	// #0
   93878:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9387c:	d65f03c0 	ret
   93880:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93884:	f00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   93888:	9125a021 	add	x1, x1, #0x968
   9388c:	91384000 	add	x0, x0, #0xe10
   93890:	528011e2 	mov	w2, #0x8f                  	// #143
   93894:	9400399b 	bl	a1f00 <assertion_failed>
   93898:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9389c:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   938a0:	9125a021 	add	x1, x1, #0x968
   938a4:	91286000 	add	x0, x0, #0xa18
   938a8:	52801202 	mov	w2, #0x90                  	// #144
   938ac:	94003995 	bl	a1f00 <assertion_failed>

00000000000938b0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   938b0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   938b4:	910003fd 	mov	x29, sp
   938b8:	a90153f3 	stp	x19, x20, [sp, #16]
   938bc:	aa0003f3 	mov	x19, x0
   938c0:	f9401c00 	ldr	x0, [x0, #56]
   938c4:	b4000520 	cbz	x0, 93968 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   938c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   938cc:	aa0103f5 	mov	x21, x1
   938d0:	f9001bf7 	str	x23, [sp, #48]
   938d4:	b4000521 	cbz	x1, 93978 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   938d8:	2a0203f4 	mov	w20, w2
   938dc:	340005a2 	cbz	w2, 93990 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   938e0:	2a0203f7 	mov	w23, w2
   938e4:	2a0303f6 	mov	w22, w3
   938e8:	aa1703e0 	mov	x0, x23
   938ec:	94006099 	bl	abb50 <operator new[](unsigned long)>
   938f0:	aa1703e2 	mov	x2, x23
   938f4:	aa1503e1 	mov	x1, x21
   938f8:	aa0003f5 	mov	x21, x0
   938fc:	94005e33 	bl	ab1c8 <memcpy>
   93900:	d2801200 	mov	x0, #0x90                  	// #144
   93904:	94000e03 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   93908:	f9401e61 	ldr	x1, [x19, #56]
   9390c:	d2800004 	mov	x4, #0x0                   	// #0
   93910:	2a1403e3 	mov	w3, w20
   93914:	aa1503e2 	mov	x2, x21
   93918:	aa0003f4 	mov	x20, x0
   9391c:	94000d15 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   93920:	aa1503e2 	mov	x2, x21
   93924:	aa1303e3 	mov	x3, x19
   93928:	90000001 	adrp	x1, 93000 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x120>
   9392c:	910f8021 	add	x1, x1, #0x3e0
   93930:	aa1403e0 	mov	x0, x20
   93934:	94000dd3 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   93938:	aa1303e0 	mov	x0, x19
   9393c:	97fff34d 	bl	90670 <CUSBFunction::GetHost() const>
   93940:	f9400003 	ldr	x3, [x0]
   93944:	2a1603e2 	mov	w2, w22
   93948:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9394c:	aa1403e1 	mov	x1, x20
   93950:	a94153f3 	ldp	x19, x20, [sp, #16]
   93954:	f9401bf7 	ldr	x23, [sp, #48]
   93958:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9395c:	f9401463 	ldr	x3, [x3, #40]
   93960:	aa0303f0 	mov	x16, x3
   93964:	d61f0200 	br	x16
   93968:	a94153f3 	ldp	x19, x20, [sp, #16]
   9396c:	52800000 	mov	w0, #0x0                   	// #0
   93970:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93974:	d65f03c0 	ret
   93978:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   9397c:	f00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   93980:	9125a021 	add	x1, x1, #0x968
   93984:	91384000 	add	x0, x0, #0xe10
   93988:	52801422 	mov	w2, #0xa1                  	// #161
   9398c:	9400395d 	bl	a1f00 <assertion_failed>
   93990:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93994:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93998:	9125a021 	add	x1, x1, #0x968
   9399c:	91286000 	add	x0, x0, #0xa18
   939a0:	52801442 	mov	w2, #0xa2                  	// #162
   939a4:	94003957 	bl	a1f00 <assertion_failed>
   939a8:	d503201f 	nop
   939ac:	d503201f 	nop

00000000000939b0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   939b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   939b4:	910003fd 	mov	x29, sp
   939b8:	a90153f3 	stp	x19, x20, [sp, #16]
   939bc:	aa0103f4 	mov	x20, x1
   939c0:	f9401801 	ldr	x1, [x0, #48]
   939c4:	a9025bf5 	stp	x21, x22, [sp, #32]
   939c8:	b40001e1 	cbz	x1, 93a04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x54>
   939cc:	b4000294 	cbz	x20, 93a1c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x6c>
   939d0:	2a0203f5 	mov	w21, w2
   939d4:	34000302 	cbz	w2, 93a34 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   939d8:	aa0003f3 	mov	x19, x0
   939dc:	2a0303f6 	mov	w22, w3
   939e0:	97fff324 	bl	90670 <CUSBFunction::GetHost() const>
   939e4:	2a1603e4 	mov	w4, w22
   939e8:	2a1503e3 	mov	w3, w21
   939ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   939f0:	aa1403e2 	mov	x2, x20
   939f4:	f9401a61 	ldr	x1, [x19, #48]
   939f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   939fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93a00:	140001a0 	b	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   93a04:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93a08:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93a0c:	9125a021 	add	x1, x1, #0x968
   93a10:	9128a000 	add	x0, x0, #0xa28
   93a14:	528017e2 	mov	w2, #0xbf                  	// #191
   93a18:	9400393a 	bl	a1f00 <assertion_failed>
   93a1c:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93a20:	f00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   93a24:	9125a021 	add	x1, x1, #0x968
   93a28:	91384000 	add	x0, x0, #0xe10
   93a2c:	52801802 	mov	w2, #0xc0                  	// #192
   93a30:	94003934 	bl	a1f00 <assertion_failed>
   93a34:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93a38:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93a3c:	9125a021 	add	x1, x1, #0x968
   93a40:	91286000 	add	x0, x0, #0xa18
   93a44:	52801822 	mov	w2, #0xc1                  	// #193
   93a48:	9400392e 	bl	a1f00 <assertion_failed>
   93a4c:	d503201f 	nop

0000000000093a50 <CUSBHIDDevice::StartRequest()>:
   93a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93a54:	910003fd 	mov	x29, sp
   93a58:	a90153f3 	stp	x19, x20, [sp, #16]
   93a5c:	aa0003f3 	mov	x19, x0
   93a60:	f9401800 	ldr	x0, [x0, #48]
   93a64:	b40003a0 	cbz	x0, 93ad8 <CUSBHIDDevice::StartRequest()+0x88>
   93a68:	f9402260 	ldr	x0, [x19, #64]
   93a6c:	b4000420 	cbz	x0, 93af0 <CUSBHIDDevice::StartRequest()+0xa0>
   93a70:	b9402a60 	ldr	w0, [x19, #40]
   93a74:	340004a0 	cbz	w0, 93b08 <CUSBHIDDevice::StartRequest()+0xb8>
   93a78:	d2801200 	mov	x0, #0x90                  	// #144
   93a7c:	94000da5 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   93a80:	f9401a61 	ldr	x1, [x19, #48]
   93a84:	aa0003f4 	mov	x20, x0
   93a88:	f9402262 	ldr	x2, [x19, #64]
   93a8c:	d2800004 	mov	x4, #0x0                   	// #0
   93a90:	b9402a63 	ldr	w3, [x19, #40]
   93a94:	94000cb7 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   93a98:	aa1303e3 	mov	x3, x19
   93a9c:	90000001 	adrp	x1, 93000 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x120>
   93aa0:	91318021 	add	x1, x1, #0xc60
   93aa4:	d2800002 	mov	x2, #0x0                   	// #0
   93aa8:	aa1403e0 	mov	x0, x20
   93aac:	94000d75 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   93ab0:	aa1303e0 	mov	x0, x19
   93ab4:	97fff2ef 	bl	90670 <CUSBFunction::GetHost() const>
   93ab8:	f9400003 	ldr	x3, [x0]
   93abc:	aa1403e1 	mov	x1, x20
   93ac0:	a94153f3 	ldp	x19, x20, [sp, #16]
   93ac4:	52800002 	mov	w2, #0x0                   	// #0
   93ac8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93acc:	f9401463 	ldr	x3, [x3, #40]
   93ad0:	aa0303f0 	mov	x16, x3
   93ad4:	d61f0200 	br	x16
   93ad8:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93adc:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93ae0:	9125a021 	add	x1, x1, #0x968
   93ae4:	9128a000 	add	x0, x0, #0xa28
   93ae8:	528018e2 	mov	w2, #0xc7                  	// #199
   93aec:	94003905 	bl	a1f00 <assertion_failed>
   93af0:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93af4:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93af8:	9125a021 	add	x1, x1, #0x968
   93afc:	91280000 	add	x0, x0, #0xa00
   93b00:	52801902 	mov	w2, #0xc8                  	// #200
   93b04:	940038ff 	bl	a1f00 <assertion_failed>
   93b08:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93b0c:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93b10:	9125a021 	add	x1, x1, #0x968
   93b14:	91274000 	add	x0, x0, #0x9d0
   93b18:	52801942 	mov	w2, #0xca                  	// #202
   93b1c:	940038f9 	bl	a1f00 <assertion_failed>

0000000000093b20 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   93b20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93b24:	910003fd 	mov	x29, sp
   93b28:	a90153f3 	stp	x19, x20, [sp, #16]
   93b2c:	b4000801 	cbz	x1, 93c2c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   93b30:	aa0003f4 	mov	x20, x0
   93b34:	aa0103f3 	mov	x19, x1
   93b38:	aa0103e0 	mov	x0, x1
   93b3c:	94000cc9 	bl	96e60 <CUSBRequest::GetStatus() const>
   93b40:	350002c0 	cbnz	w0, 93b98 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x78>
   93b44:	aa1403e0 	mov	x0, x20
   93b48:	97fff2ca 	bl	90670 <CUSBFunction::GetHost() const>
   93b4c:	9400016d 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   93b50:	37000580 	tbnz	w0, #0, 93c00 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   93b54:	f9400283 	ldr	x3, [x20]
   93b58:	d2800001 	mov	x1, #0x0                   	// #0
   93b5c:	52800002 	mov	w2, #0x0                   	// #0
   93b60:	aa1403e0 	mov	x0, x20
   93b64:	f9402c63 	ldr	x3, [x3, #88]
   93b68:	d63f0060 	blr	x3
   93b6c:	aa1303e0 	mov	x0, x19
   93b70:	94000ca0 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93b74:	aa1303e0 	mov	x0, x19
   93b78:	d2801201 	mov	x1, #0x90                  	// #144
   93b7c:	94000d7d 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   93b80:	aa1403e0 	mov	x0, x20
   93b84:	97ffffb3 	bl	93a50 <CUSBHIDDevice::StartRequest()>
   93b88:	360002a0 	tbz	w0, #0, 93bdc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   93b8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93b90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93b94:	d65f03c0 	ret
   93b98:	f9400281 	ldr	x1, [x20]
   93b9c:	a9025bf5 	stp	x21, x22, [sp, #32]
   93ba0:	aa1303e0 	mov	x0, x19
   93ba4:	f9402296 	ldr	x22, [x20, #64]
   93ba8:	f9402c35 	ldr	x21, [x1, #88]
   93bac:	94000cb1 	bl	96e70 <CUSBRequest::GetResultLength() const>
   93bb0:	aa1603e1 	mov	x1, x22
   93bb4:	2a0003e2 	mov	w2, w0
   93bb8:	aa1403e0 	mov	x0, x20
   93bbc:	d63f02a0 	blr	x21
   93bc0:	aa1303e0 	mov	x0, x19
   93bc4:	94000c8b 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93bc8:	aa1303e0 	mov	x0, x19
   93bcc:	d2801201 	mov	x1, #0x90                  	// #144
   93bd0:	94000d68 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   93bd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93bd8:	17ffffea 	b	93b80 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   93bdc:	94004005 	bl	a3bf0 <CLogger::Get()>
   93be0:	a94153f3 	ldp	x19, x20, [sp, #16]
   93be4:	b0000103 	adrp	x3, b4000 <_etext+0x19c8>
   93be8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93bec:	91290063 	add	x3, x3, #0xa40
   93bf0:	90000121 	adrp	x1, b7000 <_etext+0x49c8>
   93bf4:	52800022 	mov	w2, #0x1                   	// #1
   93bf8:	913ac021 	add	x1, x1, #0xeb0
   93bfc:	140041f1 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93c00:	aa1303e0 	mov	x0, x19
   93c04:	94000ca7 	bl	96ea0 <CUSBRequest::GetUSBError() const>
   93c08:	71000c1f 	cmp	w0, #0x3
   93c0c:	aa1303e0 	mov	x0, x19
   93c10:	540001c0 	b.eq	93c48 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x128>  // b.none
   93c14:	94000c77 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93c18:	aa1303e0 	mov	x0, x19
   93c1c:	d2801201 	mov	x1, #0x90                  	// #144
   93c20:	a94153f3 	ldp	x19, x20, [sp, #16]
   93c24:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93c28:	14000d52 	b	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   93c2c:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93c30:	90000100 	adrp	x0, b3000 <_etext+0x9c8>
   93c34:	9125a021 	add	x1, x1, #0x968
   93c38:	9106c000 	add	x0, x0, #0x1b0
   93c3c:	52801a82 	mov	w2, #0xd4                  	// #212
   93c40:	a9025bf5 	stp	x21, x22, [sp, #32]
   93c44:	940038af 	bl	a1f00 <assertion_failed>
   93c48:	94000c6a 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93c4c:	aa1303e0 	mov	x0, x19
   93c50:	d2801201 	mov	x1, #0x90                  	// #144
   93c54:	94000d47 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   93c58:	17ffffca 	b	93b80 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   93c5c:	d503201f 	nop

0000000000093c60 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   93c60:	b4000082 	cbz	x2, 93c70 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   93c64:	aa0003e1 	mov	x1, x0
   93c68:	aa0203e0 	mov	x0, x2
   93c6c:	17ffffad 	b	93b20 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   93c70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93c74:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93c78:	f00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   93c7c:	910003fd 	mov	x29, sp
   93c80:	9125a021 	add	x1, x1, #0x968
   93c84:	91288000 	add	x0, x0, #0xa20
   93c88:	52801ee2 	mov	w2, #0xf7                  	// #247
   93c8c:	9400389d 	bl	a1f00 <assertion_failed>

0000000000093c90 <CUSBHostController::UpdatePlugAndPlay()>:
   93c90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   93c94:	910003fd 	mov	x29, sp
   93c98:	a9025bf5 	stp	x21, x22, [sp, #32]
   93c9c:	39402016 	ldrb	w22, [x0, #8]
   93ca0:	a90153f3 	stp	x19, x20, [sp, #16]
   93ca4:	f9001bf7 	str	x23, [sp, #48]
   93ca8:	36000776 	tbz	w22, #0, 93d94 <CUSBHostController::UpdatePlugAndPlay()+0x104>
   93cac:	39402417 	ldrb	w23, [x0, #9]
   93cb0:	aa0003f4 	mov	x20, x0
   93cb4:	3900241f 	strb	wzr, [x0, #9]
   93cb8:	b9401800 	ldr	w0, [x0, #24]
   93cbc:	35000500 	cbnz	w0, 93d5c <CUSBHostController::UpdatePlugAndPlay()+0xcc>
   93cc0:	91004295 	add	x21, x20, #0x10
   93cc4:	aa1503e0 	mov	x0, x21
   93cc8:	9400449e 	bl	a4f40 <CPtrList::GetFirst() const>
   93ccc:	aa0003f3 	mov	x19, x0
   93cd0:	b40006e0 	cbz	x0, 93dac <CUSBHostController::UpdatePlugAndPlay()+0x11c>
   93cd4:	940044b7 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   93cd8:	aa1303e1 	mov	x1, x19
   93cdc:	aa0003f3 	mov	x19, x0
   93ce0:	aa1503e0 	mov	x0, x21
   93ce4:	9400454b 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   93ce8:	b9401a80 	ldr	w0, [x20, #24]
   93cec:	35000220 	cbnz	w0, 93d30 <CUSBHostController::UpdatePlugAndPlay()+0xa0>
   93cf0:	b4000253 	cbz	x19, 93d38 <CUSBHostController::UpdatePlugAndPlay()+0xa8>
   93cf4:	39400261 	ldrb	w1, [x19]
   93cf8:	f9400660 	ldr	x0, [x19, #8]
   93cfc:	360002a1 	tbz	w1, #0, 93d50 <CUSBHostController::UpdatePlugAndPlay()+0xc0>
   93d00:	b40003e0 	cbz	x0, 93d7c <CUSBHostController::UpdatePlugAndPlay()+0xec>
   93d04:	f9400001 	ldr	x1, [x0]
   93d08:	f9401021 	ldr	x1, [x1, #32]
   93d0c:	d63f0020 	blr	x1
   93d10:	aa1303e0 	mov	x0, x19
   93d14:	d2800201 	mov	x1, #0x10                  	// #16
   93d18:	94005fa6 	bl	abbb0 <operator delete(void*, unsigned long)>
   93d1c:	2a1603f7 	mov	w23, w22
   93d20:	b9401a80 	ldr	w0, [x20, #24]
   93d24:	34fffd00 	cbz	w0, 93cc4 <CUSBHostController::UpdatePlugAndPlay()+0x34>
   93d28:	940064d6 	bl	ad080 <EnterCritical>
   93d2c:	17ffffe6 	b	93cc4 <CUSBHostController::UpdatePlugAndPlay()+0x34>
   93d30:	94006504 	bl	ad140 <LeaveCritical>
   93d34:	b5fffe13 	cbnz	x19, 93cf4 <CUSBHostController::UpdatePlugAndPlay()+0x64>
   93d38:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93d3c:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93d40:	91296021 	add	x1, x1, #0xa58
   93d44:	912a0000 	add	x0, x0, #0xa80
   93d48:	528014c2 	mov	w2, #0xa6                  	// #166
   93d4c:	9400386d 	bl	a1f00 <assertion_failed>
   93d50:	b40000a0 	cbz	x0, 93d64 <CUSBHostController::UpdatePlugAndPlay()+0xd4>
   93d54:	940010e7 	bl	980f0 <CUSBStandardHub::HandlePortStatusChange()>
   93d58:	17ffffee 	b	93d10 <CUSBHostController::UpdatePlugAndPlay()+0x80>
   93d5c:	940064c9 	bl	ad080 <EnterCritical>
   93d60:	17ffffd8 	b	93cc0 <CUSBHostController::UpdatePlugAndPlay()+0x30>
   93d64:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93d68:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93d6c:	91296021 	add	x1, x1, #0xa58
   93d70:	912aa000 	add	x0, x0, #0xaa8
   93d74:	528015c2 	mov	w2, #0xae                  	// #174
   93d78:	94003862 	bl	a1f00 <assertion_failed>
   93d7c:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93d80:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93d84:	91296021 	add	x1, x1, #0xa58
   93d88:	912a4000 	add	x0, x0, #0xa90
   93d8c:	52801522 	mov	w2, #0xa9                  	// #169
   93d90:	9400385c 	bl	a1f00 <assertion_failed>
   93d94:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93d98:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93d9c:	91296021 	add	x1, x1, #0xa58
   93da0:	9129c000 	add	x0, x0, #0xa70
   93da4:	528012c2 	mov	w2, #0x96                  	// #150
   93da8:	94003856 	bl	a1f00 <assertion_failed>
   93dac:	b9401a80 	ldr	w0, [x20, #24]
   93db0:	350000e0 	cbnz	w0, 93dcc <CUSBHostController::UpdatePlugAndPlay()+0x13c>
   93db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   93db8:	2a1703e0 	mov	w0, w23
   93dbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93dc0:	f9401bf7 	ldr	x23, [sp, #48]
   93dc4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93dc8:	d65f03c0 	ret
   93dcc:	940064dd 	bl	ad140 <LeaveCritical>
   93dd0:	17fffff9 	b	93db4 <CUSBHostController::UpdatePlugAndPlay()+0x124>
   93dd4:	d503201f 	nop
   93dd8:	d503201f 	nop
   93ddc:	d503201f 	nop

0000000000093de0 <CUSBHostController::CUSBHostController(bool)>:
   93de0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93de4:	d00001a2 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   93de8:	91254042 	add	x2, x2, #0x950
   93dec:	910003fd 	mov	x29, sp
   93df0:	f9000bf3 	str	x19, [sp, #16]
   93df4:	aa0003f3 	mov	x19, x0
   93df8:	52800023 	mov	w3, #0x1                   	// #1
   93dfc:	91004000 	add	x0, x0, #0x10
   93e00:	f9000262 	str	x2, [x19]
   93e04:	39002261 	strb	w1, [x19, #8]
   93e08:	39002663 	strb	w3, [x19, #9]
   93e0c:	9400443d 	bl	a4f00 <CPtrList::CPtrList()>
   93e10:	f00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   93e14:	52800021 	mov	w1, #0x1                   	// #1
   93e18:	b9001a61 	str	w1, [x19, #24]
   93e1c:	f905e413 	str	x19, [x0, #3016]
   93e20:	f9400bf3 	ldr	x19, [sp, #16]
   93e24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93e28:	d65f03c0 	ret
   93e2c:	d503201f 	nop

0000000000093e30 <CUSBHostController::~CUSBHostController()>:
   93e30:	f00001a2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   93e34:	d00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   93e38:	91254021 	add	x1, x1, #0x950
   93e3c:	f8010401 	str	x1, [x0], #16
   93e40:	f905e45f 	str	xzr, [x2, #3016]
   93e44:	14004433 	b	a4f10 <CPtrList::~CPtrList()>
   93e48:	d503201f 	nop
   93e4c:	d503201f 	nop

0000000000093e50 <CUSBHostController::~CUSBHostController()>:
   93e50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93e54:	d00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   93e58:	91254021 	add	x1, x1, #0x950
   93e5c:	910003fd 	mov	x29, sp
   93e60:	f9000bf3 	str	x19, [sp, #16]
   93e64:	f00001a2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   93e68:	aa0003f3 	mov	x19, x0
   93e6c:	f8010401 	str	x1, [x0], #16
   93e70:	f905e45f 	str	xzr, [x2, #3016]
   93e74:	94004427 	bl	a4f10 <CPtrList::~CPtrList()>
   93e78:	aa1303e0 	mov	x0, x19
   93e7c:	d2800401 	mov	x1, #0x20                  	// #32
   93e80:	f9400bf3 	ldr	x19, [sp, #16]
   93e84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93e88:	14005f4a 	b	abbb0 <operator delete(void*, unsigned long)>
   93e8c:	d503201f 	nop

0000000000093e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   93e90:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   93e94:	910003fd 	mov	x29, sp
   93e98:	a90153f3 	stp	x19, x20, [sp, #16]
   93e9c:	aa0103f4 	mov	x20, x1
   93ea0:	a9025bf5 	stp	x21, x22, [sp, #32]
   93ea4:	aa0003f5 	mov	x21, x0
   93ea8:	d2800100 	mov	x0, #0x8                   	// #8
   93eac:	a90363f7 	stp	x23, x24, [sp, #48]
   93eb0:	12003cf7 	and	w23, w7, #0xffff
   93eb4:	aa0603f8 	mov	x24, x6
   93eb8:	a9046bf9 	stp	x25, x26, [sp, #64]
   93ebc:	12003c9a 	and	w26, w4, #0xffff
   93ec0:	12003cb9 	and	w25, w5, #0xffff
   93ec4:	a90573fb 	stp	x27, x28, [sp, #80]
   93ec8:	12001c5c 	and	w28, w2, #0xff
   93ecc:	12001c7b 	and	w27, w3, #0xff
   93ed0:	94005f18 	bl	abb30 <operator new(unsigned long)>
   93ed4:	aa0003f3 	mov	x19, x0
   93ed8:	53087f47 	lsr	w7, w26, #8
   93edc:	53087f26 	lsr	w6, w25, #8
   93ee0:	53087ee5 	lsr	w5, w23, #8
   93ee4:	910183f6 	add	x22, sp, #0x60
   93ee8:	3900027c 	strb	w28, [x19]
   93eec:	aa1803e2 	mov	x2, x24
   93ef0:	3900067b 	strb	w27, [x19, #1]
   93ef4:	2a1703e3 	mov	w3, w23
   93ef8:	39000a7a 	strb	w26, [x19, #2]
   93efc:	aa1603e0 	mov	x0, x22
   93f00:	39000e67 	strb	w7, [x19, #3]
   93f04:	aa1403e1 	mov	x1, x20
   93f08:	39001279 	strb	w25, [x19, #4]
   93f0c:	aa1303e4 	mov	x4, x19
   93f10:	39001666 	strb	w6, [x19, #5]
   93f14:	39001a77 	strb	w23, [x19, #6]
   93f18:	39001e65 	strb	w5, [x19, #7]
   93f1c:	94000b95 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   93f20:	f94002a3 	ldr	x3, [x21]
   93f24:	aa1503e0 	mov	x0, x21
   93f28:	aa1603e1 	mov	x1, x22
   93f2c:	52800002 	mov	w2, #0x0                   	// #0
   93f30:	f9401063 	ldr	x3, [x3, #32]
   93f34:	d63f0060 	blr	x3
   93f38:	37000240 	tbnz	w0, #0, 93f80 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xf0>
   93f3c:	b40002b4 	cbz	x20, 93f90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x100>
   93f40:	aa1403e0 	mov	x0, x20
   93f44:	12800014 	mov	w20, #0xffffffff            	// #-1
   93f48:	97fff092 	bl	90190 <CUSBEndpoint::ResetPID()>
   93f4c:	d2800101 	mov	x1, #0x8                   	// #8
   93f50:	aa1303e0 	mov	x0, x19
   93f54:	94005f17 	bl	abbb0 <operator delete(void*, unsigned long)>
   93f58:	aa1603e0 	mov	x0, x22
   93f5c:	94000ba5 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   93f60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93f64:	2a1403e0 	mov	w0, w20
   93f68:	a94153f3 	ldp	x19, x20, [sp, #16]
   93f6c:	a94363f7 	ldp	x23, x24, [sp, #48]
   93f70:	a9446bf9 	ldp	x25, x26, [sp, #64]
   93f74:	a94573fb 	ldp	x27, x28, [sp, #80]
   93f78:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   93f7c:	d65f03c0 	ret
   93f80:	aa1603e0 	mov	x0, x22
   93f84:	94000bbb 	bl	96e70 <CUSBRequest::GetResultLength() const>
   93f88:	2a0003f4 	mov	w20, w0
   93f8c:	17fffff0 	b	93f4c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xbc>
   93f90:	b0000101 	adrp	x1, b4000 <_etext+0x19c8>
   93f94:	b0000100 	adrp	x0, b4000 <_etext+0x19c8>
   93f98:	91296021 	add	x1, x1, #0xa58
   93f9c:	912b0000 	add	x0, x0, #0xac0
   93fa0:	52800f22 	mov	w2, #0x79                  	// #121
   93fa4:	940037d7 	bl	a1f00 <assertion_failed>
   93fa8:	d503201f 	nop
   93fac:	d503201f 	nop

0000000000093fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   93fb0:	12001cc8 	and	w8, w6, #0xff
   93fb4:	12003ce9 	and	w9, w7, #0xffff
   93fb8:	12001c63 	and	w3, w3, #0xff
   93fbc:	53181c42 	ubfiz	w2, w2, #8, #8
   93fc0:	aa0403e6 	mov	x6, x4
   93fc4:	2a0503e7 	mov	w7, w5
   93fc8:	2a020064 	orr	w4, w3, w2
   93fcc:	2a0903e5 	mov	w5, w9
   93fd0:	2a0803e2 	mov	w2, w8
   93fd4:	528000c3 	mov	w3, #0x6                   	// #6
   93fd8:	17ffffae 	b	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   93fdc:	d503201f 	nop

0000000000093fe0 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   93fe0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93fe4:	12001c44 	and	w4, w2, #0xff
   93fe8:	52800007 	mov	w7, #0x0                   	// #0
   93fec:	910003fd 	mov	x29, sp
   93ff0:	d2800006 	mov	x6, #0x0                   	// #0
   93ff4:	52800005 	mov	w5, #0x0                   	// #0
   93ff8:	528000a3 	mov	w3, #0x5                   	// #5
   93ffc:	52800002 	mov	w2, #0x0                   	// #0
   94000:	97ffffa4 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94004:	37f800e0 	tbnz	w0, #31, 94020 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x40>
   94008:	94005ab2 	bl	aaad0 <CTimer::Get()>
   9400c:	52800640 	mov	w0, #0x32                  	// #50
   94010:	94005a54 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   94014:	52800020 	mov	w0, #0x1                   	// #1
   94018:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9401c:	d65f03c0 	ret
   94020:	52800000 	mov	w0, #0x0                   	// #0
   94024:	a8c17bfd 	ldp	x29, x30, [sp], #16
   94028:	d65f03c0 	ret
   9402c:	d503201f 	nop

0000000000094030 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   94030:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   94034:	12001c44 	and	w4, w2, #0xff
   94038:	52800007 	mov	w7, #0x0                   	// #0
   9403c:	910003fd 	mov	x29, sp
   94040:	d2800006 	mov	x6, #0x0                   	// #0
   94044:	52800005 	mov	w5, #0x0                   	// #0
   94048:	52800123 	mov	w3, #0x9                   	// #9
   9404c:	52800002 	mov	w2, #0x0                   	// #0
   94050:	97ffff90 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94054:	37f800e0 	tbnz	w0, #31, 94070 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x40>
   94058:	94005a9e 	bl	aaad0 <CTimer::Get()>
   9405c:	52800640 	mov	w0, #0x32                  	// #50
   94060:	94005a40 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   94064:	52800020 	mov	w0, #0x1                   	// #1
   94068:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9406c:	d65f03c0 	ret
   94070:	52800000 	mov	w0, #0x0                   	// #0
   94074:	a8c17bfd 	ldp	x29, x30, [sp], #16
   94078:	d65f03c0 	ret
   9407c:	d503201f 	nop

0000000000094080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   94080:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   94084:	910003fd 	mov	x29, sp
   94088:	a90153f3 	stp	x19, x20, [sp, #16]
   9408c:	aa0003f3 	mov	x19, x0
   94090:	9100c3f4 	add	x20, sp, #0x30
   94094:	aa1403e0 	mov	x0, x20
   94098:	f90013f5 	str	x21, [sp, #32]
   9409c:	2a0403f5 	mov	w21, w4
   940a0:	d2800004 	mov	x4, #0x0                   	// #0
   940a4:	94000b33 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   940a8:	f9400263 	ldr	x3, [x19]
   940ac:	2a1503e2 	mov	w2, w21
   940b0:	aa1303e0 	mov	x0, x19
   940b4:	aa1403e1 	mov	x1, x20
   940b8:	f9401063 	ldr	x3, [x3, #32]
   940bc:	d63f0060 	blr	x3
   940c0:	36000160 	tbz	w0, #0, 940ec <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x6c>
   940c4:	aa1403e0 	mov	x0, x20
   940c8:	94000b6a 	bl	96e70 <CUSBRequest::GetResultLength() const>
   940cc:	2a0003f3 	mov	w19, w0
   940d0:	aa1403e0 	mov	x0, x20
   940d4:	94000b47 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   940d8:	f94013f5 	ldr	x21, [sp, #32]
   940dc:	2a1303e0 	mov	w0, w19
   940e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   940e4:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   940e8:	d65f03c0 	ret
   940ec:	12800013 	mov	w19, #0xffffffff            	// #-1
   940f0:	17fffff8 	b	940d0 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x50>
   940f4:	d503201f 	nop
   940f8:	d503201f 	nop
   940fc:	d503201f 	nop

0000000000094100 <CUSBHostController::IsPlugAndPlay() const>:
   94100:	39402000 	ldrb	w0, [x0, #8]
   94104:	d65f03c0 	ret
   94108:	d503201f 	nop
   9410c:	d503201f 	nop

0000000000094110 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>:
   94110:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94114:	910003fd 	mov	x29, sp
   94118:	a9025bf5 	stp	x21, x22, [sp, #32]
   9411c:	aa0003f5 	mov	x21, x0
   94120:	39402000 	ldrb	w0, [x0, #8]
   94124:	a90153f3 	stp	x19, x20, [sp, #16]
   94128:	360004c0 	tbz	w0, #0, 941c0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xb0>
   9412c:	aa0103f3 	mov	x19, x1
   94130:	b4000541 	cbz	x1, 941d8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xc8>
   94134:	d2800200 	mov	x0, #0x10                  	// #16
   94138:	94005e7e 	bl	abb30 <operator new(unsigned long)>
   9413c:	aa0003f6 	mov	x22, x0
   94140:	b9401aa1 	ldr	w1, [x21, #24]
   94144:	52800020 	mov	w0, #0x1                   	// #1
   94148:	390002c0 	strb	w0, [x22]
   9414c:	f90006d3 	str	x19, [x22, #8]
   94150:	350002a1 	cbnz	w1, 941a4 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x94>
   94154:	910042b4 	add	x20, x21, #0x10
   94158:	aa1403e0 	mov	x0, x20
   9415c:	94004379 	bl	a4f40 <CPtrList::GetFirst() const>
   94160:	b4000480 	cbz	x0, 941f0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xe0>
   94164:	d503201f 	nop
   94168:	aa0003f3 	mov	x19, x0
   9416c:	aa0003e1 	mov	x1, x0
   94170:	aa1403e0 	mov	x0, x20
   94174:	94004377 	bl	a4f50 <CPtrList::GetNext(TPtrListElement*) const>
   94178:	b5ffff80 	cbnz	x0, 94168 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x58>
   9417c:	aa1403e0 	mov	x0, x20
   94180:	aa1603e2 	mov	x2, x22
   94184:	aa1303e1 	mov	x1, x19
   94188:	940043e2 	bl	a5110 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   9418c:	b9401aa0 	ldr	w0, [x21, #24]
   94190:	35000100 	cbnz	w0, 941b0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xa0>
   94194:	a94153f3 	ldp	x19, x20, [sp, #16]
   94198:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9419c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   941a0:	d65f03c0 	ret
   941a4:	2a0103e0 	mov	w0, w1
   941a8:	940063b6 	bl	ad080 <EnterCritical>
   941ac:	17ffffea 	b	94154 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x44>
   941b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   941b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   941b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   941bc:	140063e1 	b	ad140 <LeaveCritical>
   941c0:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   941c4:	90000100 	adrp	x0, b4000 <_etext+0x19c8>
   941c8:	91296021 	add	x1, x1, #0xa58
   941cc:	9129c000 	add	x0, x0, #0xa70
   941d0:	52801802 	mov	w2, #0xc0                  	// #192
   941d4:	9400374b 	bl	a1f00 <assertion_failed>
   941d8:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   941dc:	90000100 	adrp	x0, b4000 <_etext+0x19c8>
   941e0:	91296021 	add	x1, x1, #0xa58
   941e4:	912a6000 	add	x0, x0, #0xa98
   941e8:	52801822 	mov	w2, #0xc1                  	// #193
   941ec:	94003745 	bl	a1f00 <assertion_failed>
   941f0:	d2800013 	mov	x19, #0x0                   	// #0
   941f4:	17ffffe2 	b	9417c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x6c>
   941f8:	d503201f 	nop
   941fc:	d503201f 	nop

0000000000094200 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>:
   94200:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94204:	910003fd 	mov	x29, sp
   94208:	a9025bf5 	stp	x21, x22, [sp, #32]
   9420c:	aa0003f5 	mov	x21, x0
   94210:	39402000 	ldrb	w0, [x0, #8]
   94214:	a90153f3 	stp	x19, x20, [sp, #16]
   94218:	36000480 	tbz	w0, #0, 942a8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xa8>
   9421c:	aa0103f3 	mov	x19, x1
   94220:	b4000501 	cbz	x1, 942c0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xc0>
   94224:	d2800200 	mov	x0, #0x10                  	// #16
   94228:	94005e42 	bl	abb30 <operator new(unsigned long)>
   9422c:	b9401aa1 	ldr	w1, [x21, #24]
   94230:	aa0003f6 	mov	x22, x0
   94234:	3900001f 	strb	wzr, [x0]
   94238:	f9000413 	str	x19, [x0, #8]
   9423c:	35000281 	cbnz	w1, 9428c <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x8c>
   94240:	910042b4 	add	x20, x21, #0x10
   94244:	aa1403e0 	mov	x0, x20
   94248:	9400433e 	bl	a4f40 <CPtrList::GetFirst() const>
   9424c:	b4000460 	cbz	x0, 942d8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xd8>
   94250:	aa0003f3 	mov	x19, x0
   94254:	aa0003e1 	mov	x1, x0
   94258:	aa1403e0 	mov	x0, x20
   9425c:	9400433d 	bl	a4f50 <CPtrList::GetNext(TPtrListElement*) const>
   94260:	b5ffff80 	cbnz	x0, 94250 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x50>
   94264:	aa1403e0 	mov	x0, x20
   94268:	aa1603e2 	mov	x2, x22
   9426c:	aa1303e1 	mov	x1, x19
   94270:	940043a8 	bl	a5110 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   94274:	b9401aa0 	ldr	w0, [x21, #24]
   94278:	35000100 	cbnz	w0, 94298 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x98>
   9427c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94280:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94284:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94288:	d65f03c0 	ret
   9428c:	2a0103e0 	mov	w0, w1
   94290:	9400637c 	bl	ad080 <EnterCritical>
   94294:	17ffffeb 	b	94240 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x40>
   94298:	a94153f3 	ldp	x19, x20, [sp, #16]
   9429c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   942a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   942a4:	140063a7 	b	ad140 <LeaveCritical>
   942a8:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   942ac:	90000100 	adrp	x0, b4000 <_etext+0x19c8>
   942b0:	91296021 	add	x1, x1, #0xa58
   942b4:	9129c000 	add	x0, x0, #0xa70
   942b8:	52801b22 	mov	w2, #0xd9                  	// #217
   942bc:	94003711 	bl	a1f00 <assertion_failed>
   942c0:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   942c4:	90000100 	adrp	x0, b4000 <_etext+0x19c8>
   942c8:	91296021 	add	x1, x1, #0xa58
   942cc:	912ac000 	add	x0, x0, #0xab0
   942d0:	52801b42 	mov	w2, #0xda                  	// #218
   942d4:	9400370b 	bl	a1f00 <assertion_failed>
   942d8:	d2800013 	mov	x19, #0x0                   	// #0
   942dc:	17ffffe2 	b	94264 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x64>

00000000000942e0 <CUSBHostController::Get()>:
   942e0:	d00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   942e4:	f945e400 	ldr	x0, [x0, #3016]
   942e8:	b4000040 	cbz	x0, 942f0 <CUSBHostController::Get()+0x10>
   942ec:	d65f03c0 	ret
   942f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   942f4:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   942f8:	d00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   942fc:	910003fd 	mov	x29, sp
   94300:	91296021 	add	x1, x1, #0xa58
   94304:	91260000 	add	x0, x0, #0x980
   94308:	52801e82 	mov	w2, #0xf4                  	// #244
   9430c:	940036fd 	bl	a1f00 <assertion_failed>

0000000000094310 <proxy_handler(unsigned char, unsigned char const*, void*)>:
   94310:	aa0203f0 	mov	x16, x2
   94314:	d61f0200 	br	x16
   94318:	d503201f 	nop
   9431c:	d503201f 	nop

0000000000094320 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   94320:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94324:	b00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   94328:	91266021 	add	x1, x1, #0x998
   9432c:	910003fd 	mov	x29, sp
   94330:	f9000bf3 	str	x19, [sp, #16]
   94334:	aa0003f3 	mov	x19, x0
   94338:	b9459400 	ldr	w0, [x0, #1428]
   9433c:	f9000261 	str	x1, [x19]
   94340:	f902be7f 	str	xzr, [x19, #1400]
   94344:	350000e0 	cbnz	w0, 94360 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x40>
   94348:	91012260 	add	x0, x19, #0x48
   9434c:	94002ff1 	bl	a0310 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   94350:	aa1303e0 	mov	x0, x19
   94354:	f9400bf3 	ldr	x19, [sp, #16]
   94358:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9435c:	17fffc61 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   94360:	94003ad4 	bl	a2eb0 <CDeviceNameService::Get()>
   94364:	b9459662 	ldr	w2, [x19, #1428]
   94368:	52800003 	mov	w3, #0x0                   	// #0
   9436c:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94370:	913ae021 	add	x1, x1, #0xeb8
   94374:	94003aff 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   94378:	b9459661 	ldr	w1, [x19, #1428]
   9437c:	d00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   94380:	912f4000 	add	x0, x0, #0xbd0
   94384:	94005fb3 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   94388:	91012260 	add	x0, x19, #0x48
   9438c:	94002fe1 	bl	a0310 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   94390:	aa1303e0 	mov	x0, x19
   94394:	f9400bf3 	ldr	x19, [sp, #16]
   94398:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9439c:	17fffc51 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>

00000000000943a0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   943a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   943a4:	910003fd 	mov	x29, sp
   943a8:	f9000bf3 	str	x19, [sp, #16]
   943ac:	aa0003f3 	mov	x19, x0
   943b0:	97ffffdc 	bl	94320 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   943b4:	aa1303e0 	mov	x0, x19
   943b8:	d280b301 	mov	x1, #0x598                 	// #1432
   943bc:	f9400bf3 	ldr	x19, [sp, #16]
   943c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   943c4:	14005dfb 	b	abbb0 <operator delete(void*, unsigned long)>
   943c8:	d503201f 	nop
   943cc:	d503201f 	nop

00000000000943d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   943d0:	f100003f 	cmp	x1, #0x0
   943d4:	7a481840 	ccmp	w2, #0x8, #0x0, ne	// ne = any
   943d8:	54000d01 	b.ne	94578 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x1a8>  // b.any
   943dc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   943e0:	910003fd 	mov	x29, sp
   943e4:	f942bc03 	ldr	x3, [x0, #1400]
   943e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   943ec:	aa0103f5 	mov	x21, x1
   943f0:	a90363f7 	stp	x23, x24, [sp, #48]
   943f4:	aa0003f7 	mov	x23, x0
   943f8:	f90023f9 	str	x25, [sp, #64]
   943fc:	aa0103f9 	mov	x25, x1
   94400:	384026a0 	ldrb	w0, [x21], #2
   94404:	b4000b63 	cbz	x3, 94570 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x1a0>
   94408:	f942c2e2 	ldr	x2, [x23, #1408]
   9440c:	aa1503e1 	mov	x1, x21
   94410:	d63f0060 	blr	x3
   94414:	395622e0 	ldrb	w0, [x23, #1416]
   94418:	36000a20 	tbz	w0, #0, 9455c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x18c>
   9441c:	a90153f3 	stp	x19, x20, [sp, #16]
   94420:	39400320 	ldrb	w0, [x25]
   94424:	910122f6 	add	x22, x23, #0x48
   94428:	52801013 	mov	w19, #0x80                  	// #128
   9442c:	52800014 	mov	w20, #0x0                   	// #0
   94430:	52800038 	mov	w24, #0x1                   	// #1
   94434:	14000008 	b	94454 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   94438:	35000582 	cbnz	w2, 944e8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
   9443c:	11000694 	add	w20, w20, #0x1
   94440:	11000673 	add	w19, w19, #0x1
   94444:	7100229f 	cmp	w20, #0x8
   94448:	12001e73 	and	w19, w19, #0xff
   9444c:	54000220 	b.eq	94490 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>  // b.none
   94450:	39400320 	ldrb	w0, [x25]
   94454:	395626e2 	ldrb	w2, [x23, #1417]
   94458:	1ad42303 	lsl	w3, w24, w20
   9445c:	6a03001f 	tst	w0, w3
   94460:	0a030042 	and	w2, w2, w3
   94464:	54fffea0 	b.eq	94438 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>  // b.none
   94468:	35fffea2 	cbnz	w2, 9443c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   9446c:	2a1303e1 	mov	w1, w19
   94470:	aa1603e0 	mov	x0, x22
   94474:	11000694 	add	w20, w20, #0x1
   94478:	11000673 	add	w19, w19, #0x1
   9447c:	94003039 	bl	a0560 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   94480:	12001e73 	and	w19, w19, #0xff
   94484:	7100229f 	cmp	w20, #0x8
   94488:	54fffe41 	b.ne	94450 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x80>  // b.any
   9448c:	d503201f 	nop
   94490:	91162ef8 	add	x24, x23, #0x58b
   94494:	911646f6 	add	x22, x23, #0x591
   94498:	aa1803f3 	mov	x19, x24
   9449c:	91002334 	add	x20, x25, #0x8
   944a0:	14000004 	b	944b0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   944a4:	91000673 	add	x19, x19, #0x1
   944a8:	eb16027f 	cmp	x19, x22
   944ac:	540003a0 	b.eq	94520 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x150>  // b.none
   944b0:	39400261 	ldrb	w1, [x19]
   944b4:	aa1503e2 	mov	x2, x21
   944b8:	34ffff61 	cbz	w1, 944a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   944bc:	eb02029f 	cmp	x20, x2
   944c0:	540000e0 	b.eq	944dc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x10c>  // b.none
   944c4:	d503201f 	nop
   944c8:	38401443 	ldrb	w3, [x2], #1
   944cc:	6b01007f 	cmp	w3, w1
   944d0:	54fffea0 	b.eq	944a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>  // b.none
   944d4:	eb02029f 	cmp	x20, x2
   944d8:	54ffff81 	b.ne	944c8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf8>  // b.any
   944dc:	910122e0 	add	x0, x23, #0x48
   944e0:	94003034 	bl	a05b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   944e4:	17fffff0 	b	944a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   944e8:	2a1303e1 	mov	w1, w19
   944ec:	aa1603e0 	mov	x0, x22
   944f0:	94003030 	bl	a05b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   944f4:	17ffffd2 	b	9443c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   944f8:	38401443 	ldrb	w3, [x2], #1
   944fc:	6b01007f 	cmp	w3, w1
   94500:	540000a0 	b.eq	94514 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>  // b.none
   94504:	eb16005f 	cmp	x2, x22
   94508:	54ffff81 	b.ne	944f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>  // b.any
   9450c:	910122e0 	add	x0, x23, #0x48
   94510:	94003014 	bl	a0560 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   94514:	910006b5 	add	x21, x21, #0x1
   94518:	eb15029f 	cmp	x20, x21
   9451c:	540000e0 	b.eq	94538 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x168>  // b.none
   94520:	394002a1 	ldrb	w1, [x21]
   94524:	aa1803e2 	mov	x2, x24
   94528:	35fffee1 	cbnz	w1, 94504 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x134>
   9452c:	910006b5 	add	x21, x21, #0x1
   94530:	eb15029f 	cmp	x20, x21
   94534:	54ffff61 	b.ne	94520 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x150>  // b.any
   94538:	a94153f3 	ldp	x19, x20, [sp, #16]
   9453c:	aa1903e1 	mov	x1, x25
   94540:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94544:	911626e0 	add	x0, x23, #0x589
   94548:	a94363f7 	ldp	x23, x24, [sp, #48]
   9454c:	d2800102 	mov	x2, #0x8                   	// #8
   94550:	f94023f9 	ldr	x25, [sp, #64]
   94554:	a8c57bfd 	ldp	x29, x30, [sp], #80
   94558:	14005b1c 	b	ab1c8 <memcpy>
   9455c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94560:	a94363f7 	ldp	x23, x24, [sp, #48]
   94564:	f94023f9 	ldr	x25, [sp, #64]
   94568:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9456c:	d65f03c0 	ret
   94570:	a90153f3 	stp	x19, x20, [sp, #16]
   94574:	17ffffac 	b	94424 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
   94578:	d65f03c0 	ret
   9457c:	d503201f 	nop

0000000000094580 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   94580:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94584:	52800102 	mov	w2, #0x8                   	// #8
   94588:	910003fd 	mov	x29, sp
   9458c:	f9000bf3 	str	x19, [sp, #16]
   94590:	aa0003f3 	mov	x19, x0
   94594:	97fffbbb 	bl	93480 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   94598:	aa1303e0 	mov	x0, x19
   9459c:	b00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   945a0:	91266021 	add	x1, x1, #0x998
   945a4:	f8048401 	str	x1, [x0], #72
   945a8:	94002f52 	bl	a02f0 <CKeyboardBehaviour::CKeyboardBehaviour()>
   945ac:	f902be7f 	str	xzr, [x19, #1400]
   945b0:	f902c27f 	str	xzr, [x19, #1408]
   945b4:	91162660 	add	x0, x19, #0x589
   945b8:	3916227f 	strb	wzr, [x19, #1416]
   945bc:	d2800102 	mov	x2, #0x8                   	// #8
   945c0:	3916467f 	strb	wzr, [x19, #1425]
   945c4:	52800001 	mov	w1, #0x0                   	// #0
   945c8:	b905967f 	str	wzr, [x19, #1428]
   945cc:	f9400bf3 	ldr	x19, [sp, #16]
   945d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   945d4:	14005ae5 	b	ab168 <memset>
   945d8:	d503201f 	nop
   945dc:	d503201f 	nop

00000000000945e0 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   945e0:	91012000 	add	x0, x0, #0x48
   945e4:	14002f53 	b	a0330 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>
   945e8:	d503201f 	nop
   945ec:	d503201f 	nop

00000000000945f0 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   945f0:	91012000 	add	x0, x0, #0x48
   945f4:	14002f5b 	b	a0360 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>
   945f8:	d503201f 	nop
   945fc:	d503201f 	nop

0000000000094600 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   94600:	91012000 	add	x0, x0, #0x48
   94604:	14002f63 	b	a0390 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>
   94608:	d503201f 	nop
   9460c:	d503201f 	nop

0000000000094610 <CUSBKeyboardDevice::GetLEDStatus() const>:
   94610:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   94614:	91012000 	add	x0, x0, #0x48
   94618:	910003fd 	mov	x29, sp
   9461c:	94002f69 	bl	a03c0 <CKeyboardBehaviour::GetLEDStatus() const>
   94620:	12000001 	and	w1, w0, #0x1
   94624:	721f0003 	ands	w3, w0, #0x2
   94628:	321f0022 	orr	w2, w1, #0x2
   9462c:	1a820021 	csel	w1, w1, w2, eq	// eq = none
   94630:	721e0000 	ands	w0, w0, #0x4
   94634:	321e0022 	orr	w2, w1, #0x4
   94638:	12001c40 	and	w0, w2, #0xff
   9463c:	1a811000 	csel	w0, w0, w1, ne	// ne = any
   94640:	a8c17bfd 	ldp	x29, x30, [sp], #16
   94644:	d65f03c0 	ret
   94648:	d503201f 	nop
   9464c:	d503201f 	nop

0000000000094650 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)>:
   94650:	b40000c1 	cbz	x1, 94668 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)+0x18>
   94654:	12001c42 	and	w2, w2, #0xff
   94658:	f902bc01 	str	x1, [x0, #1400]
   9465c:	f902c003 	str	x3, [x0, #1408]
   94660:	39162002 	strb	w2, [x0, #1416]
   94664:	d65f03c0 	ret
   94668:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9466c:	90000101 	adrp	x1, b4000 <_etext+0x19c8>
   94670:	90000100 	adrp	x0, b4000 <_etext+0x19c8>
   94674:	910003fd 	mov	x29, sp
   94678:	912b4021 	add	x1, x1, #0xad0
   9467c:	912b8000 	add	x0, x0, #0xae0
   94680:	528010e2 	mov	w2, #0x87                  	// #135
   94684:	9400361f 	bl	a1f00 <assertion_failed>
   94688:	d503201f 	nop
   9468c:	d503201f 	nop

0000000000094690 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>:
   94690:	90000003 	adrp	x3, 94000 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x20>
   94694:	910c4063 	add	x3, x3, #0x310
   94698:	f902bc03 	str	x3, [x0, #1400]
   9469c:	f902c001 	str	x1, [x0, #1408]
   946a0:	39162002 	strb	w2, [x0, #1416]
   946a4:	d65f03c0 	ret
   946a8:	d503201f 	nop
   946ac:	d503201f 	nop

00000000000946b0 <CUSBKeyboardDevice::UnregisterKeyStatusHandlerRaw()>:
   946b0:	f902bc1f 	str	xzr, [x0, #1400]
   946b4:	f902c01f 	str	xzr, [x0, #1408]
   946b8:	d65f03c0 	ret
   946bc:	d503201f 	nop

00000000000946c0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   946c0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   946c4:	910003fd 	mov	x29, sp
   946c8:	a90153f3 	stp	x19, x20, [sp, #16]
   946cc:	9101bff3 	add	x19, sp, #0x6f
   946d0:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   946d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   946d8:	aa0003f4 	mov	x20, x0
   946dc:	a9007e7f 	stp	xzr, xzr, [x19]
   946e0:	39000261 	strb	w1, [x19]
   946e4:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   946e8:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   946ec:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   946f0:	97ffefe0 	bl	90670 <CUSBFunction::GetHost() const>
   946f4:	aa0003f5 	mov	x21, x0
   946f8:	aa1403e0 	mov	x0, x20
   946fc:	97ffefd1 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   94700:	aa0003f6 	mov	x22, x0
   94704:	aa1403e0 	mov	x0, x20
   94708:	97fff03e 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   9470c:	12001c05 	and	w5, w0, #0xff
   94710:	aa1303e6 	mov	x6, x19
   94714:	aa1603e1 	mov	x1, x22
   94718:	aa1503e0 	mov	x0, x21
   9471c:	52800027 	mov	w7, #0x1                   	// #1
   94720:	52804004 	mov	w4, #0x200                 	// #512
   94724:	52800123 	mov	w3, #0x9                   	// #9
   94728:	52800422 	mov	w2, #0x21                  	// #33
   9472c:	97fffdd9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94730:	2a2003e0 	mvn	w0, w0
   94734:	a94153f3 	ldp	x19, x20, [sp, #16]
   94738:	531f7c00 	lsr	w0, w0, #31
   9473c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94740:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   94744:	d65f03c0 	ret
   94748:	d503201f 	nop
   9474c:	d503201f 	nop

0000000000094750 <CUSBKeyboardDevice::Configure()>:
   94750:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94754:	52800001 	mov	w1, #0x0                   	// #0
   94758:	910003fd 	mov	x29, sp
   9475c:	a90153f3 	stp	x19, x20, [sp, #16]
   94760:	aa0003f3 	mov	x19, x0
   94764:	97fffb8b 	bl	93590 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   94768:	2a0003f4 	mov	w20, w0
   9476c:	360002d4 	tbz	w20, #0, 947c4 <CUSBKeyboardDevice::Configure()+0x74>
   94770:	39564661 	ldrb	w1, [x19, #1425]
   94774:	aa1303e0 	mov	x0, x19
   94778:	f0000114 	adrp	x20, b7000 <_etext+0x49c8>
   9477c:	913ae294 	add	x20, x20, #0xeb8
   94780:	97ffffd0 	bl	946c0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   94784:	91002282 	add	x2, x20, #0x8
   94788:	52800021 	mov	w1, #0x1                   	// #1
   9478c:	d00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   94790:	912f4000 	add	x0, x0, #0xbd0
   94794:	94005e7f 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   94798:	b9059660 	str	w0, [x19, #1428]
   9479c:	940039c5 	bl	a2eb0 <CDeviceNameService::Get()>
   947a0:	b9459662 	ldr	w2, [x19, #1428]
   947a4:	aa1403e1 	mov	x1, x20
   947a8:	aa1303e3 	mov	x3, x19
   947ac:	52800004 	mov	w4, #0x0                   	// #0
   947b0:	940039cc 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   947b4:	aa1303e0 	mov	x0, x19
   947b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   947bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   947c0:	17fffca4 	b	93a50 <CUSBHIDDevice::StartRequest()>
   947c4:	94003d0b 	bl	a3bf0 <CLogger::Get()>
   947c8:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   947cc:	913ae021 	add	x1, x1, #0xeb8
   947d0:	91002021 	add	x1, x1, #0x8
   947d4:	52800022 	mov	w2, #0x1                   	// #1
   947d8:	90000103 	adrp	x3, b4000 <_etext+0x19c8>
   947dc:	912c0063 	add	x3, x3, #0xb00
   947e0:	94003ef8 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   947e4:	2a1403e0 	mov	w0, w20
   947e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   947ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   947f0:	d65f03c0 	ret
   947f4:	d503201f 	nop
   947f8:	d503201f 	nop
   947fc:	d503201f 	nop

0000000000094800 <CUSBKeyboardDevice::UpdateLEDs()>:
   94800:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94804:	910003fd 	mov	x29, sp
   94808:	f9000bf3 	str	x19, [sp, #16]
   9480c:	aa0003f3 	mov	x19, x0
   94810:	f942bc00 	ldr	x0, [x0, #1400]
   94814:	b4000060 	cbz	x0, 94820 <CUSBKeyboardDevice::UpdateLEDs()+0x20>
   94818:	39562260 	ldrb	w0, [x19, #1416]
   9481c:	360001c0 	tbz	w0, #0, 94854 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   94820:	91012260 	add	x0, x19, #0x48
   94824:	94002ee7 	bl	a03c0 <CKeyboardBehaviour::GetLEDStatus() const>
   94828:	12000001 	and	w1, w0, #0x1
   9482c:	721f0004 	ands	w4, w0, #0x2
   94830:	321f0022 	orr	w2, w1, #0x2
   94834:	39564663 	ldrb	w3, [x19, #1425]
   94838:	1a820021 	csel	w1, w1, w2, eq	// eq = none
   9483c:	721e0000 	ands	w0, w0, #0x4
   94840:	321e0022 	orr	w2, w1, #0x4
   94844:	12001c40 	and	w0, w2, #0xff
   94848:	1a811001 	csel	w1, w0, w1, ne	// ne = any
   9484c:	6b01007f 	cmp	w3, w1
   94850:	54000081 	b.ne	94860 <CUSBKeyboardDevice::UpdateLEDs()+0x60>  // b.any
   94854:	f9400bf3 	ldr	x19, [sp, #16]
   94858:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9485c:	d65f03c0 	ret
   94860:	39164661 	strb	w1, [x19, #1425]
   94864:	aa1303e0 	mov	x0, x19
   94868:	97ffff96 	bl	946c0 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   9486c:	3707ff40 	tbnz	w0, #0, 94854 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   94870:	94003ce0 	bl	a3bf0 <CLogger::Get()>
   94874:	f9400bf3 	ldr	x19, [sp, #16]
   94878:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   9487c:	913ae021 	add	x1, x1, #0xeb8
   94880:	90000103 	adrp	x3, b4000 <_etext+0x19c8>
   94884:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94888:	91002021 	add	x1, x1, #0x8
   9488c:	912c8063 	add	x3, x3, #0xb20
   94890:	52800022 	mov	w2, #0x1                   	// #1
   94894:	14003ecb 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94898:	d503201f 	nop
   9489c:	d503201f 	nop

00000000000948a0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   948a0:	12001c21 	and	w1, w1, #0xff
   948a4:	8b224002 	add	x2, x0, w2, uxtw
   948a8:	14000004 	b	948b8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x18>
   948ac:	38401403 	ldrb	w3, [x0], #1
   948b0:	6b01007f 	cmp	w3, w1
   948b4:	540000a0 	b.eq	948c8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x28>  // b.none
   948b8:	eb02001f 	cmp	x0, x2
   948bc:	54ffff81 	b.ne	948ac <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0xc>  // b.any
   948c0:	52800000 	mov	w0, #0x0                   	// #0
   948c4:	d65f03c0 	ret
   948c8:	52800020 	mov	w0, #0x1                   	// #1
   948cc:	d65f03c0 	ret

00000000000948d0 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE>:
   948d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   948d4:	528007e2 	mov	w2, #0x3f                  	// #63
   948d8:	52800021 	mov	w1, #0x1                   	// #1
   948dc:	910003fd 	mov	x29, sp
   948e0:	f9000bf3 	str	x19, [sp, #16]
   948e4:	d00001b3 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   948e8:	912f4273 	add	x19, x19, #0xbd0
   948ec:	aa1303e0 	mov	x0, x19
   948f0:	94005e0c 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   948f4:	aa1303e1 	mov	x1, x19
   948f8:	d00001a2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   948fc:	91336042 	add	x2, x2, #0xcd8
   94900:	f9400bf3 	ldr	x19, [sp, #16]
   94904:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94908:	d00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9490c:	f945a400 	ldr	x0, [x0, #2888]
   94910:	1400542c 	b	a99c0 <__cxa_atexit>
	...

0000000000094920 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long)>:
   94920:	aa0003e2 	mov	x2, x0
   94924:	aa0103e0 	mov	x0, x1
   94928:	f9002041 	str	x1, [x2, #64]
   9492c:	d65f03c0 	ret

0000000000094930 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   94930:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94934:	b00001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   94938:	91282021 	add	x1, x1, #0xa08
   9493c:	910003fd 	mov	x29, sp
   94940:	a90153f3 	stp	x19, x20, [sp, #16]
   94944:	aa0003f3 	mov	x19, x0
   94948:	b9405000 	ldr	w0, [x0, #80]
   9494c:	f9000261 	str	x1, [x19]
   94950:	350003a0 	cbnz	w0, 949c4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x94>
   94954:	f9402674 	ldr	x20, [x19, #72]
   94958:	b40000d4 	cbz	x20, 94970 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x40>
   9495c:	aa1403e0 	mov	x0, x20
   94960:	94003390 	bl	a17a0 <CPartitionManager::~CPartitionManager()>
   94964:	aa1403e0 	mov	x0, x20
   94968:	d2800901 	mov	x1, #0x48                  	// #72
   9496c:	94005c91 	bl	abbb0 <operator delete(void*, unsigned long)>
   94970:	f9401a74 	ldr	x20, [x19, #48]
   94974:	f900267f 	str	xzr, [x19, #72]
   94978:	b40000d4 	cbz	x20, 94990 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x60>
   9497c:	aa1403e0 	mov	x0, x20
   94980:	97ffed98 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   94984:	aa1403e0 	mov	x0, x20
   94988:	d2800401 	mov	x1, #0x20                  	// #32
   9498c:	94005c89 	bl	abbb0 <operator delete(void*, unsigned long)>
   94990:	f9401674 	ldr	x20, [x19, #40]
   94994:	f9001a7f 	str	xzr, [x19, #48]
   94998:	b40000d4 	cbz	x20, 949b0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
   9499c:	aa1403e0 	mov	x0, x20
   949a0:	97ffed90 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   949a4:	aa1403e0 	mov	x0, x20
   949a8:	d2800401 	mov	x1, #0x20                  	// #32
   949ac:	94005c81 	bl	abbb0 <operator delete(void*, unsigned long)>
   949b0:	f900167f 	str	xzr, [x19, #40]
   949b4:	aa1303e0 	mov	x0, x19
   949b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   949bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   949c0:	17ffee0c 	b	901f0 <CUSBFunction::~CUSBFunction()>
   949c4:	9400393b 	bl	a2eb0 <CDeviceNameService::Get()>
   949c8:	b9405262 	ldr	w2, [x19, #80]
   949cc:	52800023 	mov	w3, #0x1                   	// #1
   949d0:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   949d4:	913b2021 	add	x1, x1, #0xec8
   949d8:	94003966 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   949dc:	b9405261 	ldr	w1, [x19, #80]
   949e0:	d00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   949e4:	912f8000 	add	x0, x0, #0xbe0
   949e8:	94005e1a 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   949ec:	b900527f 	str	wzr, [x19, #80]
   949f0:	17ffffd9 	b	94954 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x24>
   949f4:	d503201f 	nop
   949f8:	d503201f 	nop
   949fc:	d503201f 	nop

0000000000094a00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   94a00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94a04:	910003fd 	mov	x29, sp
   94a08:	f9000bf3 	str	x19, [sp, #16]
   94a0c:	aa0003f3 	mov	x19, x0
   94a10:	97ffffc8 	bl	94930 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   94a14:	aa1303e0 	mov	x0, x19
   94a18:	d2800b01 	mov	x1, #0x58                  	// #88
   94a1c:	f9400bf3 	ldr	x19, [sp, #16]
   94a20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94a24:	14005c63 	b	abbb0 <operator delete(void*, unsigned long)>
   94a28:	d503201f 	nop
   94a2c:	d503201f 	nop

0000000000094a30 <CUSBBulkOnlyMassStorageDevice::GetSize() const>:
   94a30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   94a34:	910003fd 	mov	x29, sp
   94a38:	b9403c00 	ldr	w0, [x0, #60]
   94a3c:	340000c0 	cbz	w0, 94a54 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x24>
   94a40:	3100041f 	cmn	w0, #0x1
   94a44:	54000140 	b.eq	94a6c <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x3c>  // b.none
   94a48:	d3777c00 	ubfiz	x0, x0, #9, #32
   94a4c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   94a50:	d65f03c0 	ret
   94a54:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94a58:	913b2000 	add	x0, x0, #0xec8
   94a5c:	91002001 	add	x1, x0, #0x8
   94a60:	52803c82 	mov	w2, #0x1e4                 	// #484
   94a64:	91008000 	add	x0, x0, #0x20
   94a68:	94003526 	bl	a1f00 <assertion_failed>
   94a6c:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94a70:	913b2000 	add	x0, x0, #0xec8
   94a74:	91002001 	add	x1, x0, #0x8
   94a78:	52803ca2 	mov	w2, #0x1e5                 	// #485
   94a7c:	9100e000 	add	x0, x0, #0x38
   94a80:	94003520 	bl	a1f00 <assertion_failed>
   94a84:	d503201f 	nop
   94a88:	d503201f 	nop
   94a8c:	d503201f 	nop

0000000000094a90 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   94a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94a94:	910003fd 	mov	x29, sp
   94a98:	f9000bf3 	str	x19, [sp, #16]
   94a9c:	aa0003f3 	mov	x19, x0
   94aa0:	97ffee78 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   94aa4:	b00001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   94aa8:	91282000 	add	x0, x0, #0xa08
   94aac:	f9000260 	str	x0, [x19]
   94ab0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   94ab4:	f9001e7f 	str	xzr, [x19, #56]
   94ab8:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   94abc:	b900527f 	str	wzr, [x19, #80]
   94ac0:	f9400bf3 	ldr	x19, [sp, #16]
   94ac4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94ac8:	d65f03c0 	ret
   94acc:	d503201f 	nop

0000000000094ad0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   94ad0:	b9403c00 	ldr	w0, [x0, #60]
   94ad4:	d65f03c0 	ret
   94ad8:	d503201f 	nop
   94adc:	d503201f 	nop

0000000000094ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>:
   94ae0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   94ae4:	910003fd 	mov	x29, sp
   94ae8:	a90153f3 	stp	x19, x20, [sp, #16]
   94aec:	a9025bf5 	stp	x21, x22, [sp, #32]
   94af0:	a90363f7 	stp	x23, x24, [sp, #48]
   94af4:	a9046bf9 	stp	x25, x26, [sp, #64]
   94af8:	b40015c1 	cbz	x1, 94db0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2d0>
   94afc:	aa0003f7 	mov	x23, x0
   94b00:	d1001840 	sub	x0, x2, #0x6
   94b04:	aa0203f5 	mov	x21, x2
   94b08:	f100281f 	cmp	x0, #0xa
   94b0c:	54001688 	b.hi	94ddc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2fc>  // b.pmore
   94b10:	f100009f 	cmp	x4, #0x0
   94b14:	aa0303f9 	mov	x25, x3
   94b18:	aa0403f8 	mov	x24, x4
   94b1c:	fa401860 	ccmp	x3, #0x0, #0x0, ne	// ne = any
   94b20:	540016a0 	b.eq	94df4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x314>  // b.none
   94b24:	91023ff3 	add	x19, sp, #0x8f
   94b28:	12001cba 	and	w26, w5, #0xff
   94b2c:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   94b30:	aa0103f6 	mov	x22, x1
   94b34:	91010274 	add	x20, x19, #0x40
   94b38:	d28003e2 	mov	x2, #0x1f                  	// #31
   94b3c:	52800001 	mov	w1, #0x0                   	// #0
   94b40:	aa1403e0 	mov	x0, x20
   94b44:	94005989 	bl	ab168 <memset>
   94b48:	b9403ae3 	ldr	w3, [x23, #56]
   94b4c:	528a6aa0 	mov	w0, #0x5355                	// #21333
   94b50:	72a86840 	movk	w0, #0x4342, lsl #16
   94b54:	b9004260 	str	w0, [x19, #64]
   94b58:	11000463 	add	w3, w3, #0x1
   94b5c:	b9003ae3 	str	w3, [x23, #56]
   94b60:	53190346 	ubfiz	w6, w26, #7, #1
   94b64:	aa1503e2 	mov	x2, x21
   94b68:	39403a85 	ldrb	w5, [x20, #14]
   94b6c:	aa1603e1 	mov	x1, x22
   94b70:	39403684 	ldrb	w4, [x20, #13]
   94b74:	91013e60 	add	x0, x19, #0x4f
   94b78:	2900e283 	stp	w3, w24, [x20, #4]
   94b7c:	330012a5 	bfxil	w5, w21, #0, #5
   94b80:	121c6c84 	and	w4, w4, #0xfffffff0
   94b84:	39003684 	strb	w4, [x20, #13]
   94b88:	39003a85 	strb	w5, [x20, #14]
   94b8c:	39003286 	strb	w6, [x20, #12]
   94b90:	9400598e 	bl	ab1c8 <memcpy>
   94b94:	aa1703e0 	mov	x0, x23
   94b98:	97ffeeb6 	bl	90670 <CUSBFunction::GetHost() const>
   94b9c:	aa0003f5 	mov	x21, x0
   94ba0:	b4001360 	cbz	x0, 94e0c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x32c>
   94ba4:	f9401ae1 	ldr	x1, [x23, #48]
   94ba8:	aa1403e2 	mov	x2, x20
   94bac:	52800004 	mov	w4, #0x0                   	// #0
   94bb0:	528003e3 	mov	w3, #0x1f                  	// #31
   94bb4:	97fffd33 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94bb8:	37f81860 	tbnz	w0, #31, 94ec4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3e4>
   94bbc:	b40003b8 	cbz	x24, 94c30 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x150>
   94bc0:	b4001339 	cbz	x25, 94e24 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x344>
   94bc4:	aa180320 	orr	x0, x25, x24
   94bc8:	92401400 	and	x0, x0, #0x3f
   94bcc:	b4000b00 	cbz	x0, 94d2c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x24c>
   94bd0:	aa1803e0 	mov	x0, x24
   94bd4:	52800001 	mov	w1, #0x0                   	// #0
   94bd8:	94005bc2 	bl	abae0 <operator new[](unsigned long, int)>
   94bdc:	aa0003f6 	mov	x22, x0
   94be0:	36000cda 	tbz	w26, #0, 94d78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x298>
   94be4:	f94016e1 	ldr	x1, [x23, #40]
   94be8:	aa0003e2 	mov	x2, x0
   94bec:	2a1803e3 	mov	w3, w24
   94bf0:	aa1503e0 	mov	x0, x21
   94bf4:	52800004 	mov	w4, #0x0                   	// #0
   94bf8:	97fffd22 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94bfc:	2a0003f4 	mov	w20, w0
   94c00:	36f80e40 	tbz	w0, #31, 94dc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2e8>
   94c04:	94003bfb 	bl	a3bf0 <CLogger::Get()>
   94c08:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94c0c:	913b2021 	add	x1, x1, #0xec8
   94c10:	9103c023 	add	x3, x1, #0xf0
   94c14:	91036021 	add	x1, x1, #0xd8
   94c18:	52800022 	mov	w2, #0x1                   	// #1
   94c1c:	94003de9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94c20:	aa1603e0 	mov	x0, x22
   94c24:	94005bdb 	bl	abb90 <operator delete[](void*)>
   94c28:	12800014 	mov	w20, #0xffffffff            	// #-1
   94c2c:	14000039 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94c30:	52800014 	mov	w20, #0x0                   	// #0
   94c34:	f94016e1 	ldr	x1, [x23, #40]
   94c38:	aa1303e2 	mov	x2, x19
   94c3c:	aa1503e0 	mov	x0, x21
   94c40:	52800004 	mov	w4, #0x0                   	// #0
   94c44:	528001a3 	mov	w3, #0xd                   	// #13
   94c48:	97fffd0e 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94c4c:	7100341f 	cmp	w0, #0xd
   94c50:	54000460 	b.eq	94cdc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1fc>  // b.none
   94c54:	f0000116 	adrp	x22, b7000 <_etext+0x49c8>
   94c58:	913b22d6 	add	x22, x22, #0xec8
   94c5c:	94003be5 	bl	a3bf0 <CLogger::Get()>
   94c60:	910362d9 	add	x25, x22, #0xd8
   94c64:	910422c3 	add	x3, x22, #0x108
   94c68:	aa1903e1 	mov	x1, x25
   94c6c:	52800022 	mov	w2, #0x1                   	// #1
   94c70:	94003dd4 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94c74:	aa1703e0 	mov	x0, x23
   94c78:	97ffee72 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   94c7c:	aa0003f8 	mov	x24, x0
   94c80:	f94016e0 	ldr	x0, [x23, #40]
   94c84:	97ffece7 	bl	90020 <CUSBEndpoint::GetNumber() const>
   94c88:	32196005 	orr	w5, w0, #0xffffff80
   94c8c:	aa1803e1 	mov	x1, x24
   94c90:	12001ca5 	and	w5, w5, #0xff
   94c94:	aa1503e0 	mov	x0, x21
   94c98:	52800007 	mov	w7, #0x0                   	// #0
   94c9c:	d2800006 	mov	x6, #0x0                   	// #0
   94ca0:	52800004 	mov	w4, #0x0                   	// #0
   94ca4:	52800023 	mov	w3, #0x1                   	// #1
   94ca8:	52800042 	mov	w2, #0x2                   	// #2
   94cac:	97fffc79 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94cb0:	37f811c0 	tbnz	w0, #31, 94ee8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x408>
   94cb4:	f94016e0 	ldr	x0, [x23, #40]
   94cb8:	97ffed36 	bl	90190 <CUSBEndpoint::ResetPID()>
   94cbc:	f94016e1 	ldr	x1, [x23, #40]
   94cc0:	aa1503e0 	mov	x0, x21
   94cc4:	aa1303e2 	mov	x2, x19
   94cc8:	52800004 	mov	w4, #0x0                   	// #0
   94ccc:	528001a3 	mov	w3, #0xd                   	// #13
   94cd0:	97fffcec 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94cd4:	7100341f 	cmp	w0, #0xd
   94cd8:	54000e81 	b.ne	94ea8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3c8>  // b.any
   94cdc:	b9400261 	ldr	w1, [x19]
   94ce0:	528a6aa0 	mov	w0, #0x5355                	// #21333
   94ce4:	72aa6840 	movk	w0, #0x5342, lsl #16
   94ce8:	6b00003f 	cmp	w1, w0
   94cec:	54000ba1 	b.ne	94e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x380>  // b.any
   94cf0:	b9400661 	ldr	w1, [x19, #4]
   94cf4:	b9403ae0 	ldr	w0, [x23, #56]
   94cf8:	6b00003f 	cmp	w1, w0
   94cfc:	54000a01 	b.ne	94e3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x35c>  // b.any
   94d00:	39403260 	ldrb	w0, [x19, #12]
   94d04:	35fff920 	cbnz	w0, 94c28 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x148>
   94d08:	b9400a60 	ldr	w0, [x19, #8]
   94d0c:	35000bc0 	cbnz	w0, 94e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3a4>
   94d10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94d14:	2a1403e0 	mov	w0, w20
   94d18:	a94153f3 	ldp	x19, x20, [sp, #16]
   94d1c:	a94363f7 	ldp	x23, x24, [sp, #48]
   94d20:	a9446bf9 	ldp	x25, x26, [sp, #64]
   94d24:	a8d07bfd 	ldp	x29, x30, [sp], #256
   94d28:	d65f03c0 	ret
   94d2c:	a94282e1 	ldp	x1, x0, [x23, #40]
   94d30:	7200035a 	ands	w26, w26, #0x1
   94d34:	2a1803e3 	mov	w3, w24
   94d38:	aa1903e2 	mov	x2, x25
   94d3c:	52800004 	mov	w4, #0x0                   	// #0
   94d40:	9a801021 	csel	x1, x1, x0, ne	// ne = any
   94d44:	aa1503e0 	mov	x0, x21
   94d48:	97fffcce 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94d4c:	2a0003f4 	mov	w20, w0
   94d50:	36fff720 	tbz	w0, #31, 94c34 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x154>
   94d54:	94003ba7 	bl	a3bf0 <CLogger::Get()>
   94d58:	12800014 	mov	w20, #0xffffffff            	// #-1
   94d5c:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94d60:	913b2021 	add	x1, x1, #0xec8
   94d64:	9103c023 	add	x3, x1, #0xf0
   94d68:	52800022 	mov	w2, #0x1                   	// #1
   94d6c:	91036021 	add	x1, x1, #0xd8
   94d70:	94003d94 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94d74:	17ffffe7 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94d78:	aa1903e1 	mov	x1, x25
   94d7c:	aa1803e2 	mov	x2, x24
   94d80:	94005912 	bl	ab1c8 <memcpy>
   94d84:	f9401ae1 	ldr	x1, [x23, #48]
   94d88:	2a1803e3 	mov	w3, w24
   94d8c:	aa1603e2 	mov	x2, x22
   94d90:	aa1503e0 	mov	x0, x21
   94d94:	52800004 	mov	w4, #0x0                   	// #0
   94d98:	97fffcba 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   94d9c:	2a0003f4 	mov	w20, w0
   94da0:	37fff320 	tbnz	w0, #31, 94c04 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x124>
   94da4:	aa1603e0 	mov	x0, x22
   94da8:	94005b7a 	bl	abb90 <operator delete[](void*)>
   94dac:	17ffffa2 	b	94c34 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x154>
   94db0:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94db4:	913b2000 	add	x0, x0, #0xec8
   94db8:	91002001 	add	x1, x0, #0x8
   94dbc:	52804782 	mov	w2, #0x23c                 	// #572
   94dc0:	91016000 	add	x0, x0, #0x58
   94dc4:	9400344f 	bl	a1f00 <assertion_failed>
   94dc8:	aa1803e2 	mov	x2, x24
   94dcc:	aa1903e0 	mov	x0, x25
   94dd0:	aa1603e1 	mov	x1, x22
   94dd4:	940058fd 	bl	ab1c8 <memcpy>
   94dd8:	17fffff3 	b	94da4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2c4>
   94ddc:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94de0:	913b2000 	add	x0, x0, #0xec8
   94de4:	91002001 	add	x1, x0, #0x8
   94de8:	528047a2 	mov	w2, #0x23d                 	// #573
   94dec:	9101a000 	add	x0, x0, #0x68
   94df0:	94003444 	bl	a1f00 <assertion_failed>
   94df4:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94df8:	913b2000 	add	x0, x0, #0xec8
   94dfc:	91002001 	add	x1, x0, #0x8
   94e00:	528047c2 	mov	w2, #0x23e                 	// #574
   94e04:	91024000 	add	x0, x0, #0x90
   94e08:	9400343e 	bl	a1f00 <assertion_failed>
   94e0c:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94e10:	913b2000 	add	x0, x0, #0xec8
   94e14:	91002001 	add	x1, x0, #0x8
   94e18:	528049c2 	mov	w2, #0x24e                 	// #590
   94e1c:	9102c000 	add	x0, x0, #0xb0
   94e20:	94003438 	bl	a1f00 <assertion_failed>
   94e24:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94e28:	913b2000 	add	x0, x0, #0xec8
   94e2c:	91002001 	add	x1, x0, #0x8
   94e30:	52804b62 	mov	w2, #0x25b                 	// #603
   94e34:	91038000 	add	x0, x0, #0xe0
   94e38:	94003432 	bl	a1f00 <assertion_failed>
   94e3c:	94003b6d 	bl	a3bf0 <CLogger::Get()>
   94e40:	12800014 	mov	w20, #0xffffffff            	// #-1
   94e44:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94e48:	913b2021 	add	x1, x1, #0xec8
   94e4c:	91060023 	add	x3, x1, #0x180
   94e50:	52800022 	mov	w2, #0x1                   	// #1
   94e54:	91036021 	add	x1, x1, #0xd8
   94e58:	94003d5a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94e5c:	17ffffad 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94e60:	94003b64 	bl	a3bf0 <CLogger::Get()>
   94e64:	12800014 	mov	w20, #0xffffffff            	// #-1
   94e68:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94e6c:	913b2021 	add	x1, x1, #0xec8
   94e70:	9105a023 	add	x3, x1, #0x168
   94e74:	52800022 	mov	w2, #0x1                   	// #1
   94e78:	91036021 	add	x1, x1, #0xd8
   94e7c:	94003d51 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94e80:	17ffffa4 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94e84:	94003b5b 	bl	a3bf0 <CLogger::Get()>
   94e88:	12800014 	mov	w20, #0xffffffff            	// #-1
   94e8c:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94e90:	913b2021 	add	x1, x1, #0xec8
   94e94:	91066023 	add	x3, x1, #0x198
   94e98:	52800022 	mov	w2, #0x1                   	// #1
   94e9c:	91036021 	add	x1, x1, #0xd8
   94ea0:	94003d48 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94ea4:	17ffff9b 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94ea8:	94003b52 	bl	a3bf0 <CLogger::Get()>
   94eac:	12800014 	mov	w20, #0xffffffff            	// #-1
   94eb0:	910522c3 	add	x3, x22, #0x148
   94eb4:	aa1903e1 	mov	x1, x25
   94eb8:	52800022 	mov	w2, #0x1                   	// #1
   94ebc:	94003d41 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94ec0:	17ffff94 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94ec4:	94003b4b 	bl	a3bf0 <CLogger::Get()>
   94ec8:	12800014 	mov	w20, #0xffffffff            	// #-1
   94ecc:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94ed0:	913b2021 	add	x1, x1, #0xec8
   94ed4:	91030023 	add	x3, x1, #0xc0
   94ed8:	52800022 	mov	w2, #0x1                   	// #1
   94edc:	91036021 	add	x1, x1, #0xd8
   94ee0:	94003d38 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94ee4:	17ffff8b 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94ee8:	94003b42 	bl	a3bf0 <CLogger::Get()>
   94eec:	12800014 	mov	w20, #0xffffffff            	// #-1
   94ef0:	910482c3 	add	x3, x22, #0x120
   94ef4:	aa1903e1 	mov	x1, x25
   94ef8:	52800082 	mov	w2, #0x4                   	// #4
   94efc:	94003d31 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94f00:	17ffff84 	b	94d10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   94f04:	d503201f 	nop
   94f08:	d503201f 	nop
   94f0c:	d503201f 	nop

0000000000094f10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>:
   94f10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94f14:	aa0103e3 	mov	x3, x1
   94f18:	910003fd 	mov	x29, sp
   94f1c:	f9000bf3 	str	x19, [sp, #16]
   94f20:	b4000481 	cbz	x1, 94fb0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xa0>
   94f24:	f9402005 	ldr	x5, [x0, #64]
   94f28:	aa0203f3 	mov	x19, x2
   94f2c:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   94f30:	f24020a2 	ands	x2, x5, #0x1ff
   94f34:	fa4100a2 	ccmp	x5, x1, #0x2, eq	// eq = none
   94f38:	54000588 	b.hi	94fe8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xd8>  // b.pmore
   94f3c:	d349fca5 	lsr	x5, x5, #9
   94f40:	92402261 	and	x1, x19, #0x1ff
   94f44:	b5000521 	cbnz	x1, 94fe8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xd8>
   94f48:	d349fe67 	lsr	x7, x19, #9
   94f4c:	5ac008a8 	rev	w8, w5
   94f50:	5ac004e7 	rev16	w7, w7
   94f54:	5ac008a6 	rev	w6, w5
   94f58:	53107d08 	lsr	w8, w8, #16
   94f5c:	5280050a 	mov	w10, #0x28                  	// #40
   94f60:	d3483ce9 	ubfx	x9, x7, #8, #8
   94f64:	910083e1 	add	x1, sp, #0x20
   94f68:	aa1303e4 	mov	x4, x19
   94f6c:	52800025 	mov	w5, #0x1                   	// #1
   94f70:	d2800142 	mov	x2, #0xa                   	// #10
   94f74:	790043ea 	strh	w10, [sp, #32]
   94f78:	790047e6 	strh	w6, [sp, #34]
   94f7c:	79004be8 	strh	w8, [sp, #36]
   94f80:	39009bff 	strb	wzr, [sp, #38]
   94f84:	39009fe7 	strb	w7, [sp, #39]
   94f88:	3900a3e9 	strb	w9, [sp, #40]
   94f8c:	3900a7ff 	strb	wzr, [sp, #41]
   94f90:	97fffed4 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   94f94:	2a0003e1 	mov	w1, w0
   94f98:	2a1303e0 	mov	w0, w19
   94f9c:	6b13003f 	cmp	w1, w19
   94fa0:	54000141 	b.ne	94fc8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xb8>  // b.any
   94fa4:	f9400bf3 	ldr	x19, [sp, #16]
   94fa8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94fac:	d65f03c0 	ret
   94fb0:	f0000100 	adrp	x0, b7000 <_etext+0x49c8>
   94fb4:	913b2000 	add	x0, x0, #0xec8
   94fb8:	91002001 	add	x1, x0, #0x8
   94fbc:	52803e22 	mov	w2, #0x1f1                 	// #497
   94fc0:	91038000 	add	x0, x0, #0xe0
   94fc4:	940033cf 	bl	a1f00 <assertion_failed>
   94fc8:	94003b0a 	bl	a3bf0 <CLogger::Get()>
   94fcc:	f0000101 	adrp	x1, b7000 <_etext+0x49c8>
   94fd0:	913b2021 	add	x1, x1, #0xec8
   94fd4:	9106c023 	add	x3, x1, #0x1b0
   94fd8:	52800022 	mov	w2, #0x1                   	// #1
   94fdc:	91036021 	add	x1, x1, #0xd8
   94fe0:	94003cf8 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94fe4:	d503201f 	nop
   94fe8:	12800000 	mov	w0, #0xffffffff            	// #-1
   94fec:	17ffffee 	b	94fa4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x94>

0000000000094ff0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>:
   94ff0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94ff4:	aa0103e3 	mov	x3, x1
   94ff8:	910003fd 	mov	x29, sp
   94ffc:	f9000bf3 	str	x19, [sp, #16]
   95000:	b4000441 	cbz	x1, 95088 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x98>
   95004:	aa0203f3 	mov	x19, x2
   95008:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   9500c:	f9402002 	ldr	x2, [x0, #64]
   95010:	f2402044 	ands	x4, x2, #0x1ff
   95014:	fa410042 	ccmp	x2, x1, #0x2, eq	// eq = none
   95018:	54000548 	b.hi	950c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xd0>  // b.pmore
   9501c:	d349fc42 	lsr	x2, x2, #9
   95020:	92402261 	and	x1, x19, #0x1ff
   95024:	b50004e1 	cbnz	x1, 950c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xd0>
   95028:	d349fe67 	lsr	x7, x19, #9
   9502c:	5ac00848 	rev	w8, w2
   95030:	5ac004e7 	rev16	w7, w7
   95034:	5ac00846 	rev	w6, w2
   95038:	53107d08 	lsr	w8, w8, #16
   9503c:	5281054a 	mov	w10, #0x82a                 	// #2090
   95040:	d3483ce9 	ubfx	x9, x7, #8, #8
   95044:	aa1303e4 	mov	x4, x19
   95048:	910083e1 	add	x1, sp, #0x20
   9504c:	52800005 	mov	w5, #0x0                   	// #0
   95050:	d2800142 	mov	x2, #0xa                   	// #10
   95054:	790043ea 	strh	w10, [sp, #32]
   95058:	790047e6 	strh	w6, [sp, #34]
   9505c:	79004be8 	strh	w8, [sp, #36]
   95060:	39009bff 	strb	wzr, [sp, #38]
   95064:	39009fe7 	strb	w7, [sp, #39]
   95068:	3900a3e9 	strb	w9, [sp, #40]
   9506c:	3900a7ff 	strb	wzr, [sp, #41]
   95070:	97fffe9c 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   95074:	37f80160 	tbnz	w0, #31, 950a0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xb0>
   95078:	2a1303e0 	mov	w0, w19
   9507c:	f9400bf3 	ldr	x19, [sp, #16]
   95080:	a8c37bfd 	ldp	x29, x30, [sp], #48
   95084:	d65f03c0 	ret
   95088:	d0000100 	adrp	x0, b7000 <_etext+0x49c8>
   9508c:	913b2000 	add	x0, x0, #0xec8
   95090:	91002001 	add	x1, x0, #0x8
   95094:	528042c2 	mov	w2, #0x216                 	// #534
   95098:	91038000 	add	x0, x0, #0xe0
   9509c:	94003399 	bl	a1f00 <assertion_failed>
   950a0:	94003ad4 	bl	a3bf0 <CLogger::Get()>
   950a4:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   950a8:	913b2021 	add	x1, x1, #0xec8
   950ac:	91070023 	add	x3, x1, #0x1c0
   950b0:	52800022 	mov	w2, #0x1                   	// #1
   950b4:	91036021 	add	x1, x1, #0xd8
   950b8:	94003cc2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   950bc:	d503201f 	nop
   950c0:	12800013 	mov	w19, #0xffffffff            	// #-1
   950c4:	17ffffed 	b	95078 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x88>
   950c8:	d503201f 	nop
   950cc:	d503201f 	nop

00000000000950d0 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   950d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   950d4:	910003fd 	mov	x29, sp
   950d8:	a90153f3 	stp	x19, x20, [sp, #16]
   950dc:	aa0003f3 	mov	x19, x0
   950e0:	f90013f5 	str	x21, [sp, #32]
   950e4:	97ffed63 	bl	90670 <CUSBFunction::GetHost() const>
   950e8:	b4000780 	cbz	x0, 951d8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x108>
   950ec:	aa0003f4 	mov	x20, x0
   950f0:	aa1303e0 	mov	x0, x19
   950f4:	97ffed53 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   950f8:	aa0003f5 	mov	x21, x0
   950fc:	aa1303e0 	mov	x0, x19
   95100:	97ffedc0 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   95104:	aa1503e1 	mov	x1, x21
   95108:	12001c05 	and	w5, w0, #0xff
   9510c:	52800007 	mov	w7, #0x0                   	// #0
   95110:	aa1403e0 	mov	x0, x20
   95114:	d2800006 	mov	x6, #0x0                   	// #0
   95118:	52800004 	mov	w4, #0x0                   	// #0
   9511c:	12800003 	mov	w3, #0xffffffff            	// #-1
   95120:	52800422 	mov	w2, #0x21                  	// #33
   95124:	97fffb5b 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   95128:	37f80640 	tbnz	w0, #31, 951f0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x120>
   9512c:	94005669 	bl	aaad0 <CTimer::Get()>
   95130:	52800c80 	mov	w0, #0x64                  	// #100
   95134:	9400560b 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   95138:	aa1303e0 	mov	x0, x19
   9513c:	97ffed41 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   95140:	aa0003f5 	mov	x21, x0
   95144:	f9401660 	ldr	x0, [x19, #40]
   95148:	97ffebb6 	bl	90020 <CUSBEndpoint::GetNumber() const>
   9514c:	32196005 	orr	w5, w0, #0xffffff80
   95150:	aa1503e1 	mov	x1, x21
   95154:	12001ca5 	and	w5, w5, #0xff
   95158:	aa1403e0 	mov	x0, x20
   9515c:	52800007 	mov	w7, #0x0                   	// #0
   95160:	d2800006 	mov	x6, #0x0                   	// #0
   95164:	52800004 	mov	w4, #0x0                   	// #0
   95168:	52800023 	mov	w3, #0x1                   	// #1
   9516c:	52800042 	mov	w2, #0x2                   	// #2
   95170:	97fffb48 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   95174:	37f80620 	tbnz	w0, #31, 95238 <CUSBBulkOnlyMassStorageDevice::Reset()+0x168>
   95178:	aa1303e0 	mov	x0, x19
   9517c:	97ffed31 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   95180:	aa0003f5 	mov	x21, x0
   95184:	f9401a60 	ldr	x0, [x19, #48]
   95188:	97ffeba6 	bl	90020 <CUSBEndpoint::GetNumber() const>
   9518c:	12001c05 	and	w5, w0, #0xff
   95190:	aa1503e1 	mov	x1, x21
   95194:	aa1403e0 	mov	x0, x20
   95198:	52800007 	mov	w7, #0x0                   	// #0
   9519c:	d2800006 	mov	x6, #0x0                   	// #0
   951a0:	52800004 	mov	w4, #0x0                   	// #0
   951a4:	52800023 	mov	w3, #0x1                   	// #1
   951a8:	52800042 	mov	w2, #0x2                   	// #2
   951ac:	97fffb39 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   951b0:	37f80320 	tbnz	w0, #31, 95214 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   951b4:	f9401660 	ldr	x0, [x19, #40]
   951b8:	97ffebf6 	bl	90190 <CUSBEndpoint::ResetPID()>
   951bc:	f9401a60 	ldr	x0, [x19, #48]
   951c0:	97ffebf4 	bl	90190 <CUSBEndpoint::ResetPID()>
   951c4:	52800000 	mov	w0, #0x0                   	// #0
   951c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   951cc:	f94013f5 	ldr	x21, [sp, #32]
   951d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   951d4:	d65f03c0 	ret
   951d8:	d0000100 	adrp	x0, b7000 <_etext+0x49c8>
   951dc:	913b2000 	add	x0, x0, #0xec8
   951e0:	91002001 	add	x1, x0, #0x8
   951e4:	52805762 	mov	w2, #0x2bb                 	// #699
   951e8:	9102c000 	add	x0, x0, #0xb0
   951ec:	94003345 	bl	a1f00 <assertion_failed>
   951f0:	94003a80 	bl	a3bf0 <CLogger::Get()>
   951f4:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   951f8:	913b2021 	add	x1, x1, #0xec8
   951fc:	91074023 	add	x3, x1, #0x1d0
   95200:	52800082 	mov	w2, #0x4                   	// #4
   95204:	91036021 	add	x1, x1, #0xd8
   95208:	94003c6e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9520c:	12800000 	mov	w0, #0xffffffff            	// #-1
   95210:	17ffffee 	b	951c8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   95214:	94003a77 	bl	a3bf0 <CLogger::Get()>
   95218:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   9521c:	913b2021 	add	x1, x1, #0xec8
   95220:	9107a023 	add	x3, x1, #0x1e8
   95224:	52800082 	mov	w2, #0x4                   	// #4
   95228:	91036021 	add	x1, x1, #0xd8
   9522c:	94003c65 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95230:	12800000 	mov	w0, #0xffffffff            	// #-1
   95234:	17ffffe5 	b	951c8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   95238:	94003a6e 	bl	a3bf0 <CLogger::Get()>
   9523c:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   95240:	913b2021 	add	x1, x1, #0xec8
   95244:	91048023 	add	x3, x1, #0x120
   95248:	52800082 	mov	w2, #0x4                   	// #4
   9524c:	91036021 	add	x1, x1, #0xd8
   95250:	94003c5c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95254:	12800000 	mov	w0, #0xffffffff            	// #-1
   95258:	17ffffdc 	b	951c8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   9525c:	d503201f 	nop

0000000000095260 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)>:
   95260:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95264:	910003fd 	mov	x29, sp
   95268:	a90153f3 	stp	x19, x20, [sp, #16]
   9526c:	aa0003f4 	mov	x20, x0
   95270:	a9025bf5 	stp	x21, x22, [sp, #32]
   95274:	2a0203f6 	mov	w22, w2
   95278:	52800115 	mov	w21, #0x8                   	// #8
   9527c:	a90363f7 	stp	x23, x24, [sp, #48]
   95280:	aa0203f7 	mov	x23, x2
   95284:	aa0103f8 	mov	x24, x1
   95288:	aa1703e2 	mov	x2, x23
   9528c:	aa1803e1 	mov	x1, x24
   95290:	aa1403e0 	mov	x0, x20
   95294:	97ffff1f 	bl	94f10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>
   95298:	2a0003f3 	mov	w19, w0
   9529c:	aa1403e0 	mov	x0, x20
   952a0:	6b16027f 	cmp	w19, w22
   952a4:	540000e1 	b.ne	952c0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x60>  // b.any
   952a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   952ac:	2a1603e0 	mov	w0, w22
   952b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   952b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   952b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   952bc:	d65f03c0 	ret
   952c0:	97ffff84 	bl	950d0 <CUSBBulkOnlyMassStorageDevice::Reset()>
   952c4:	35000140 	cbnz	w0, 952ec <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x8c>
   952c8:	710006b5 	subs	w21, w21, #0x1
   952cc:	54fffde1 	b.ne	95288 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x28>  // b.any
   952d0:	2a1303f6 	mov	w22, w19
   952d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   952d8:	2a1603e0 	mov	w0, w22
   952dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   952e0:	a94363f7 	ldp	x23, x24, [sp, #48]
   952e4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   952e8:	d65f03c0 	ret
   952ec:	2a0003f6 	mov	w22, w0
   952f0:	17ffffee 	b	952a8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x48>
   952f4:	d503201f 	nop
   952f8:	d503201f 	nop
   952fc:	d503201f 	nop

0000000000095300 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)>:
   95300:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95304:	910003fd 	mov	x29, sp
   95308:	a90153f3 	stp	x19, x20, [sp, #16]
   9530c:	aa0003f4 	mov	x20, x0
   95310:	a9025bf5 	stp	x21, x22, [sp, #32]
   95314:	2a0203f6 	mov	w22, w2
   95318:	52800115 	mov	w21, #0x8                   	// #8
   9531c:	a90363f7 	stp	x23, x24, [sp, #48]
   95320:	aa0203f7 	mov	x23, x2
   95324:	aa0103f8 	mov	x24, x1
   95328:	aa1703e2 	mov	x2, x23
   9532c:	aa1803e1 	mov	x1, x24
   95330:	aa1403e0 	mov	x0, x20
   95334:	97ffff2f 	bl	94ff0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>
   95338:	2a0003f3 	mov	w19, w0
   9533c:	aa1403e0 	mov	x0, x20
   95340:	6b16027f 	cmp	w19, w22
   95344:	540000e1 	b.ne	95360 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x60>  // b.any
   95348:	a94153f3 	ldp	x19, x20, [sp, #16]
   9534c:	2a1603e0 	mov	w0, w22
   95350:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95354:	a94363f7 	ldp	x23, x24, [sp, #48]
   95358:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9535c:	d65f03c0 	ret
   95360:	97ffff5c 	bl	950d0 <CUSBBulkOnlyMassStorageDevice::Reset()>
   95364:	35000140 	cbnz	w0, 9538c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x8c>
   95368:	710006b5 	subs	w21, w21, #0x1
   9536c:	54fffde1 	b.ne	95328 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x28>  // b.any
   95370:	2a1303f6 	mov	w22, w19
   95374:	a94153f3 	ldp	x19, x20, [sp, #16]
   95378:	2a1603e0 	mov	w0, w22
   9537c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95380:	a94363f7 	ldp	x23, x24, [sp, #48]
   95384:	a8c47bfd 	ldp	x29, x30, [sp], #64
   95388:	d65f03c0 	ret
   9538c:	2a0003f6 	mov	w22, w0
   95390:	17ffffee 	b	95348 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x48>
   95394:	d503201f 	nop
   95398:	d503201f 	nop
   9539c:	d503201f 	nop

00000000000953a0 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   953a0:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   953a4:	910003fd 	mov	x29, sp
   953a8:	a90153f3 	stp	x19, x20, [sp, #16]
   953ac:	aa0003f4 	mov	x20, x0
   953b0:	97ffec8c 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   953b4:	12001c00 	and	w0, w0, #0xff
   953b8:	7100041f 	cmp	w0, #0x1
   953bc:	540018a9 	b.ls	956d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>  // b.plast
   953c0:	a9025bf5 	stp	x21, x22, [sp, #32]
   953c4:	14000005 	b	953d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   953c8:	39400e61 	ldrb	w1, [x19, #3]
   953cc:	12001421 	and	w1, w1, #0x3f
   953d0:	7100083f 	cmp	w1, #0x2
   953d4:	540011e0 	b.eq	95610 <CUSBBulkOnlyMassStorageDevice::Configure()+0x270>  // b.none
   953d8:	aa1403e0 	mov	x0, x20
   953dc:	528000a1 	mov	w1, #0x5                   	// #5
   953e0:	97ffecb0 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   953e4:	aa0003f3 	mov	x19, x0
   953e8:	b5ffff00 	cbnz	x0, 953c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x28>
   953ec:	f9401680 	ldr	x0, [x20, #40]
   953f0:	b4001480 	cbz	x0, 95680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   953f4:	f9401a80 	ldr	x0, [x20, #48]
   953f8:	b4001440 	cbz	x0, 95680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   953fc:	aa1403e0 	mov	x0, x20
   95400:	97ffebb4 	bl	902d0 <CUSBFunction::Configure()>
   95404:	36001540 	tbz	w0, #0, 956ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x30c>
   95408:	52800486 	mov	w6, #0x24                  	// #36
   9540c:	910263e3 	add	x3, sp, #0x98
   95410:	910163e1 	add	x1, sp, #0x58
   95414:	aa1403e0 	mov	x0, x20
   95418:	52800255 	mov	w21, #0x12                  	// #18
   9541c:	52800025 	mov	w5, #0x1                   	// #1
   95420:	d2800484 	mov	x4, #0x24                  	// #36
   95424:	d28000c2 	mov	x2, #0x6                   	// #6
   95428:	b9005bf5 	str	w21, [sp, #88]
   9542c:	7900bbe6 	strh	w6, [sp, #92]
   95430:	97fffdac 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   95434:	7100901f 	cmp	w0, #0x24
   95438:	54001581 	b.ne	956e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x348>  // b.any
   9543c:	394263e0 	ldrb	w0, [sp, #152]
   95440:	12001000 	and	w0, w0, #0x1f
   95444:	350017a0 	cbnz	w0, 95738 <CUSBBulkOnlyMassStorageDevice::Configure()+0x398>
   95448:	910183f6 	add	x22, sp, #0x60
   9544c:	52800c73 	mov	w19, #0x63                  	// #99
   95450:	a90363f7 	stp	x23, x24, [sp, #48]
   95454:	9101a3f7 	add	x23, sp, #0x68
   95458:	52800078 	mov	w24, #0x3                   	// #3
   9545c:	f90023f9 	str	x25, [sp, #64]
   95460:	9101e3f9 	add	x25, sp, #0x78
   95464:	1400000d 	b	95498 <CUSBBulkOnlyMassStorageDevice::Configure()+0xf8>
   95468:	aa1903e3 	mov	x3, x25
   9546c:	aa1703e1 	mov	x1, x23
   95470:	aa1403e0 	mov	x0, x20
   95474:	52800025 	mov	w5, #0x1                   	// #1
   95478:	d2800244 	mov	x4, #0x12                  	// #18
   9547c:	d28000c2 	mov	x2, #0x6                   	// #6
   95480:	b9006bf8 	str	w24, [sp, #104]
   95484:	7900dbf5 	strh	w21, [sp, #108]
   95488:	97fffd96 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   9548c:	37f81400 	tbnz	w0, #31, 9570c <CUSBBulkOnlyMassStorageDevice::Configure()+0x36c>
   95490:	71000673 	subs	w19, w19, #0x1
   95494:	54001800 	b.eq	95794 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f4>  // b.none
   95498:	9400558e 	bl	aaad0 <CTimer::Get()>
   9549c:	52800c80 	mov	w0, #0x64                  	// #100
   954a0:	94005530 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   954a4:	aa1603e1 	mov	x1, x22
   954a8:	aa1403e0 	mov	x0, x20
   954ac:	52800005 	mov	w5, #0x0                   	// #0
   954b0:	d2800004 	mov	x4, #0x0                   	// #0
   954b4:	d2800003 	mov	x3, #0x0                   	// #0
   954b8:	d28000c2 	mov	x2, #0x6                   	// #6
   954bc:	b90063ff 	str	wzr, [sp, #96]
   954c0:	7900cbff 	strh	wzr, [sp, #100]
   954c4:	97fffd87 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   954c8:	37fffd00 	tbnz	w0, #31, 95468 <CUSBBulkOnlyMassStorageDevice::Configure()+0xc8>
   954cc:	d28004a6 	mov	x6, #0x25                  	// #37
   954d0:	aa1603e3 	mov	x3, x22
   954d4:	aa1703e1 	mov	x1, x23
   954d8:	aa1403e0 	mov	x0, x20
   954dc:	52800025 	mov	w5, #0x1                   	// #1
   954e0:	d2800104 	mov	x4, #0x8                   	// #8
   954e4:	d2800142 	mov	x2, #0xa                   	// #10
   954e8:	f90037e6 	str	x6, [sp, #104]
   954ec:	7900e3ff 	strh	wzr, [sp, #112]
   954f0:	97fffd7c 	bl	94ae0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   954f4:	7100201f 	cmp	w0, #0x8
   954f8:	540015a1 	b.ne	957ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x40c>  // b.any
   954fc:	b94067f3 	ldr	w19, [sp, #100]
   95500:	7140827f 	cmp	w19, #0x20, lsl #12
   95504:	54001301 	b.ne	95764 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c4>  // b.any
   95508:	b94063e1 	ldr	w1, [sp, #96]
   9550c:	5ac00820 	rev	w0, w1
   95510:	b9003e80 	str	w0, [x20, #60]
   95514:	3100043f 	cmn	w1, #0x1
   95518:	54001600 	b.eq	957d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x438>  // b.none
   9551c:	11000400 	add	w0, w0, #0x1
   95520:	b9003e80 	str	w0, [x20, #60]
   95524:	d0000113 	adrp	x19, b7000 <_etext+0x49c8>
   95528:	913b2273 	add	x19, x19, #0xec8
   9552c:	91036275 	add	x21, x19, #0xd8
   95530:	b00001b6 	adrp	x22, ca000 <vtable for CLAN7800Device+0x28>
   95534:	912f82d6 	add	x22, x22, #0xbe0
   95538:	940039ae 	bl	a3bf0 <CLogger::Get()>
   9553c:	b9403e84 	ldr	w4, [x20, #60]
   95540:	910ba263 	add	x3, x19, #0x2e8
   95544:	aa1503e1 	mov	x1, x21
   95548:	52800082 	mov	w2, #0x4                   	// #4
   9554c:	530b7c84 	lsr	w4, w4, #11
   95550:	94003b9c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95554:	910c0262 	add	x2, x19, #0x300
   95558:	aa1603e0 	mov	x0, x22
   9555c:	52800001 	mov	w1, #0x0                   	// #0
   95560:	94005b0c 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   95564:	7101001f 	cmp	w0, #0x40
   95568:	54001440 	b.eq	957f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x450>  // b.none
   9556c:	b9405281 	ldr	w1, [x20, #80]
   95570:	35001501 	cbnz	w1, 95810 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   95574:	b9005280 	str	w0, [x20, #80]
   95578:	9101e3f5 	add	x21, sp, #0x78
   9557c:	aa1503e0 	mov	x0, x21
   95580:	94004ae8 	bl	a8120 <CString::CString()>
   95584:	b9405282 	ldr	w2, [x20, #80]
   95588:	aa1503e0 	mov	x0, x21
   9558c:	910ce261 	add	x1, x19, #0x338
   95590:	940050ec 	bl	a9940 <CString::Format(char const*, ...)>
   95594:	f9402680 	ldr	x0, [x20, #72]
   95598:	b5001340 	cbnz	x0, 95800 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   9559c:	d2800900 	mov	x0, #0x48                  	// #72
   955a0:	94005964 	bl	abb30 <operator new(unsigned long)>
   955a4:	aa0003f3 	mov	x19, x0
   955a8:	aa1503e0 	mov	x0, x21
   955ac:	94004b21 	bl	a8230 <CString::operator char const*() const>
   955b0:	aa0003e2 	mov	x2, x0
   955b4:	aa1403e1 	mov	x1, x20
   955b8:	aa1303e0 	mov	x0, x19
   955bc:	94003069 	bl	a1760 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   955c0:	f9002693 	str	x19, [x20, #72]
   955c4:	aa1303e0 	mov	x0, x19
   955c8:	940030ae 	bl	a1880 <CPartitionManager::Initialize()>
   955cc:	12001c13 	and	w19, w0, #0xff
   955d0:	36000fa0 	tbz	w0, #0, 957c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x424>
   955d4:	94003637 	bl	a2eb0 <CDeviceNameService::Get()>
   955d8:	aa0003f6 	mov	x22, x0
   955dc:	aa1503e0 	mov	x0, x21
   955e0:	94004b14 	bl	a8230 <CString::operator char const*() const>
   955e4:	aa1403e2 	mov	x2, x20
   955e8:	aa0003e1 	mov	x1, x0
   955ec:	52800023 	mov	w3, #0x1                   	// #1
   955f0:	aa1603e0 	mov	x0, x22
   955f4:	9400353f 	bl	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   955f8:	aa1503e0 	mov	x0, x21
   955fc:	94004a8d 	bl	a8030 <CString::~CString()>
   95600:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95604:	a94363f7 	ldp	x23, x24, [sp, #48]
   95608:	f94023f9 	ldr	x25, [sp, #64]
   9560c:	14000024 	b	9569c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2fc>
   95610:	39c00a60 	ldrsb	w0, [x19, #2]
   95614:	37f801c0 	tbnz	w0, #31, 9564c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2ac>
   95618:	f9401a80 	ldr	x0, [x20, #48]
   9561c:	b5000320 	cbnz	x0, 95680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   95620:	d2800400 	mov	x0, #0x20                  	// #32
   95624:	94005943 	bl	abb30 <operator new(unsigned long)>
   95628:	aa0003f5 	mov	x21, x0
   9562c:	aa1403e0 	mov	x0, x20
   95630:	97ffebf8 	bl	90610 <CUSBFunction::GetDevice() const>
   95634:	aa0003e1 	mov	x1, x0
   95638:	aa1303e2 	mov	x2, x19
   9563c:	aa1503e0 	mov	x0, x21
   95640:	97ffe9dc 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   95644:	f9001a95 	str	x21, [x20, #48]
   95648:	17ffff64 	b	953d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   9564c:	f9401680 	ldr	x0, [x20, #40]
   95650:	b5000180 	cbnz	x0, 95680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   95654:	d2800400 	mov	x0, #0x20                  	// #32
   95658:	94005936 	bl	abb30 <operator new(unsigned long)>
   9565c:	aa0003f5 	mov	x21, x0
   95660:	aa1403e0 	mov	x0, x20
   95664:	97ffebeb 	bl	90610 <CUSBFunction::GetDevice() const>
   95668:	aa0003e1 	mov	x1, x0
   9566c:	aa1303e2 	mov	x2, x19
   95670:	aa1503e0 	mov	x0, x21
   95674:	97ffe9cf 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   95678:	f9001695 	str	x21, [x20, #40]
   9567c:	17ffff57 	b	953d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   95680:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   95684:	913b2021 	add	x1, x1, #0xec8
   95688:	aa1403e0 	mov	x0, x20
   9568c:	91036021 	add	x1, x1, #0xd8
   95690:	97ffec10 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   95694:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95698:	52800013 	mov	w19, #0x0                   	// #0
   9569c:	2a1303e0 	mov	w0, w19
   956a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   956a4:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   956a8:	d65f03c0 	ret
   956ac:	94003951 	bl	a3bf0 <CLogger::Get()>
   956b0:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   956b4:	913b2021 	add	x1, x1, #0xec8
   956b8:	91084023 	add	x3, x1, #0x210
   956bc:	52800022 	mov	w2, #0x1                   	// #1
   956c0:	91036021 	add	x1, x1, #0xd8
   956c4:	94003b3f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   956c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   956cc:	17fffff3 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   956d0:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   956d4:	913b2021 	add	x1, x1, #0xec8
   956d8:	aa1403e0 	mov	x0, x20
   956dc:	91036021 	add	x1, x1, #0xd8
   956e0:	97ffebfc 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   956e4:	17ffffed 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   956e8:	94003942 	bl	a3bf0 <CLogger::Get()>
   956ec:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   956f0:	913b2021 	add	x1, x1, #0xec8
   956f4:	9108a023 	add	x3, x1, #0x228
   956f8:	52800022 	mov	w2, #0x1                   	// #1
   956fc:	91036021 	add	x1, x1, #0xd8
   95700:	94003b30 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95704:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95708:	17ffffe4 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   9570c:	94003939 	bl	a3bf0 <CLogger::Get()>
   95710:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   95714:	913b2021 	add	x1, x1, #0xec8
   95718:	91098023 	add	x3, x1, #0x260
   9571c:	91036021 	add	x1, x1, #0xd8
   95720:	52800022 	mov	w2, #0x1                   	// #1
   95724:	94003b27 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95728:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9572c:	a94363f7 	ldp	x23, x24, [sp, #48]
   95730:	f94023f9 	ldr	x25, [sp, #64]
   95734:	17ffffd9 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   95738:	9400392e 	bl	a3bf0 <CLogger::Get()>
   9573c:	f9404fe4 	ldr	x4, [sp, #152]
   95740:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   95744:	913b2021 	add	x1, x1, #0xec8
   95748:	52800022 	mov	w2, #0x1                   	// #1
   9574c:	91090023 	add	x3, x1, #0x240
   95750:	12001084 	and	w4, w4, #0x1f
   95754:	91036021 	add	x1, x1, #0xd8
   95758:	94003b1a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9575c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95760:	17ffffce 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   95764:	94003923 	bl	a3bf0 <CLogger::Get()>
   95768:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   9576c:	913b2021 	add	x1, x1, #0xec8
   95770:	910aa023 	add	x3, x1, #0x2a8
   95774:	5ac00a64 	rev	w4, w19
   95778:	91036021 	add	x1, x1, #0xd8
   9577c:	52800022 	mov	w2, #0x1                   	// #1
   95780:	94003b10 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95784:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95788:	a94363f7 	ldp	x23, x24, [sp, #48]
   9578c:	f94023f9 	ldr	x25, [sp, #64]
   95790:	17ffffc2 	b	95698 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f8>
   95794:	94003917 	bl	a3bf0 <CLogger::Get()>
   95798:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   9579c:	913b2021 	add	x1, x1, #0xec8
   957a0:	9109e023 	add	x3, x1, #0x278
   957a4:	91036021 	add	x1, x1, #0xd8
   957a8:	17ffffde 	b	95720 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   957ac:	94003911 	bl	a3bf0 <CLogger::Get()>
   957b0:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   957b4:	913b2021 	add	x1, x1, #0xec8
   957b8:	910a4023 	add	x3, x1, #0x290
   957bc:	91036021 	add	x1, x1, #0xd8
   957c0:	17ffffd8 	b	95720 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   957c4:	b9405281 	ldr	w1, [x20, #80]
   957c8:	aa1603e0 	mov	x0, x22
   957cc:	94005aa1 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   957d0:	b900529f 	str	wzr, [x20, #80]
   957d4:	17ffff89 	b	955f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x258>
   957d8:	94003906 	bl	a3bf0 <CLogger::Get()>
   957dc:	d0000101 	adrp	x1, b7000 <_etext+0x49c8>
   957e0:	913b2021 	add	x1, x1, #0xec8
   957e4:	910b2023 	add	x3, x1, #0x2c8
   957e8:	91036021 	add	x1, x1, #0xd8
   957ec:	17ffffcd 	b	95720 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   957f0:	94003900 	bl	a3bf0 <CLogger::Get()>
   957f4:	910c2263 	add	x3, x19, #0x308
   957f8:	aa1503e1 	mov	x1, x21
   957fc:	17ffffc9 	b	95720 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   95800:	91002261 	add	x1, x19, #0x8
   95804:	910d0260 	add	x0, x19, #0x340
   95808:	52803322 	mov	w2, #0x199                 	// #409
   9580c:	940031bd 	bl	a1f00 <assertion_failed>
   95810:	91002261 	add	x1, x19, #0x8
   95814:	910c8260 	add	x0, x19, #0x320
   95818:	52803262 	mov	w2, #0x193                 	// #403
   9581c:	940031b9 	bl	a1f00 <assertion_failed>

0000000000095820 <_GLOBAL__sub_I__ZN29CUSBBulkOnlyMassStorageDevice18s_DeviceNumberPoolE>:
   95820:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95824:	528007e2 	mov	w2, #0x3f                  	// #63
   95828:	52800021 	mov	w1, #0x1                   	// #1
   9582c:	910003fd 	mov	x29, sp
   95830:	f9000bf3 	str	x19, [sp, #16]
   95834:	b00001b3 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   95838:	912f8273 	add	x19, x19, #0xbe0
   9583c:	aa1303e0 	mov	x0, x19
   95840:	94005a38 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   95844:	aa1303e1 	mov	x1, x19
   95848:	b00001a2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9584c:	91336042 	add	x2, x2, #0xcd8
   95850:	f9400bf3 	ldr	x19, [sp, #16]
   95854:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95858:	b00001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9585c:	f945a400 	ldr	x0, [x0, #2888]
   95860:	14005058 	b	a99c0 <__cxa_atexit>
	...

0000000000095870 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   95870:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95874:	900001a1 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   95878:	9129c021 	add	x1, x1, #0xa70
   9587c:	910003fd 	mov	x29, sp
   95880:	a90153f3 	stp	x19, x20, [sp, #16]
   95884:	aa0003f3 	mov	x19, x0
   95888:	f9402800 	ldr	x0, [x0, #80]
   9588c:	f9000261 	str	x1, [x19]
   95890:	b50003e0 	cbnz	x0, 9590c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x9c>
   95894:	f9401660 	ldr	x0, [x19, #40]
   95898:	b4000080 	cbz	x0, 958a8 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x38>
   9589c:	f9400001 	ldr	x1, [x0]
   958a0:	f9400421 	ldr	x1, [x1, #8]
   958a4:	d63f0020 	blr	x1
   958a8:	f9402660 	ldr	x0, [x19, #72]
   958ac:	f900167f 	str	xzr, [x19, #40]
   958b0:	b4000040 	cbz	x0, 958b8 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x48>
   958b4:	940058b7 	bl	abb90 <operator delete[](void*)>
   958b8:	f9401a74 	ldr	x20, [x19, #48]
   958bc:	f900267f 	str	xzr, [x19, #72]
   958c0:	b40000d4 	cbz	x20, 958d8 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x68>
   958c4:	aa1403e0 	mov	x0, x20
   958c8:	97ffe9c6 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   958cc:	aa1403e0 	mov	x0, x20
   958d0:	d2800401 	mov	x1, #0x20                  	// #32
   958d4:	940058b7 	bl	abbb0 <operator delete(void*, unsigned long)>
   958d8:	f9401e74 	ldr	x20, [x19, #56]
   958dc:	f9001a7f 	str	xzr, [x19, #48]
   958e0:	b40000d4 	cbz	x20, 958f8 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x88>
   958e4:	aa1403e0 	mov	x0, x20
   958e8:	97ffe9be 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   958ec:	aa1403e0 	mov	x0, x20
   958f0:	d2800401 	mov	x1, #0x20                  	// #32
   958f4:	940058af 	bl	abbb0 <operator delete(void*, unsigned long)>
   958f8:	f9001e7f 	str	xzr, [x19, #56]
   958fc:	aa1303e0 	mov	x0, x19
   95900:	a94153f3 	ldp	x19, x20, [sp, #16]
   95904:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95908:	17ffea3a 	b	901f0 <CUSBFunction::~CUSBFunction()>
   9590c:	94005471 	bl	aaad0 <CTimer::Get()>
   95910:	f9402a61 	ldr	x1, [x19, #80]
   95914:	940052ab 	bl	aa3c0 <CTimer::CancelKernelTimer(unsigned long)>
   95918:	f9002a7f 	str	xzr, [x19, #80]
   9591c:	17ffffde 	b	95894 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x24>

0000000000095920 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   95920:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95924:	910003fd 	mov	x29, sp
   95928:	f9000bf3 	str	x19, [sp, #16]
   9592c:	aa0003f3 	mov	x19, x0
   95930:	97ffffd0 	bl	95870 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>
   95934:	aa1303e0 	mov	x0, x19
   95938:	d2800b01 	mov	x1, #0x58                  	// #88
   9593c:	f9400bf3 	ldr	x19, [sp, #16]
   95940:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95944:	1400589b 	b	abbb0 <operator delete(void*, unsigned long)>
   95948:	d503201f 	nop
   9594c:	d503201f 	nop

0000000000095950 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)>:
   95950:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   95954:	910003fd 	mov	x29, sp
   95958:	a90153f3 	stp	x19, x20, [sp, #16]
   9595c:	f90013f5 	str	x21, [sp, #32]
   95960:	d10043ff 	sub	sp, sp, #0x10
   95964:	b4000622 	cbz	x2, 95a28 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xd8>
   95968:	aa0003e4 	mov	x4, x0
   9596c:	b40006a0 	cbz	x0, 95a40 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xf0>
   95970:	2a0103f3 	mov	w19, w1
   95974:	34000721 	cbz	w1, 95a58 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x108>
   95978:	12000420 	and	w0, w1, #0x3
   9597c:	350007a0 	cbnz	w0, 95a70 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x120>
   95980:	f9401c41 	ldr	x1, [x2, #56]
   95984:	aa0203f4 	mov	x20, x2
   95988:	52800000 	mov	w0, #0x0                   	// #0
   9598c:	b4000441 	cbz	x1, 95a14 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xc4>
   95990:	2a1303e2 	mov	w2, w19
   95994:	d1000443 	sub	x3, x2, #0x1
   95998:	b2401463 	orr	x3, x3, #0x3f
   9599c:	91010063 	add	x3, x3, #0x40
   959a0:	9270bc60 	and	x0, x3, #0xffffffffffff0000
   959a4:	927cec63 	and	x3, x3, #0xfffffffffffffff0
   959a8:	cb2063e0 	sub	x0, sp, x0
   959ac:	eb2063ff 	cmp	sp, x0
   959b0:	540000a0 	b.eq	959c4 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x74>  // b.none
   959b4:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   959b8:	eb2063ff 	cmp	sp, x0
   959bc:	f90203ff 	str	xzr, [sp, #1024]
   959c0:	54ffffa1 	b.ne	959b4 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x64>  // b.any
   959c4:	92403c63 	and	x3, x3, #0xffff
   959c8:	cb2363ff 	sub	sp, sp, x3
   959cc:	f110007f 	cmp	x3, #0x400
   959d0:	f90003ff 	str	xzr, [sp]
   959d4:	54000043 	b.cc	959dc <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x8c>  // b.lo, b.ul, b.last
   959d8:	f90203ff 	str	xzr, [sp, #1024]
   959dc:	aa0403e1 	mov	x1, x4
   959e0:	91013ff5 	add	x21, sp, #0x4f
   959e4:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   959e8:	aa1503e0 	mov	x0, x21
   959ec:	940055f7 	bl	ab1c8 <memcpy>
   959f0:	aa1403e0 	mov	x0, x20
   959f4:	97ffeb1f 	bl	90670 <CUSBFunction::GetHost() const>
   959f8:	f9401e81 	ldr	x1, [x20, #56]
   959fc:	2a1303e3 	mov	w3, w19
   95a00:	aa1503e2 	mov	x2, x21
   95a04:	52800004 	mov	w4, #0x0                   	// #0
   95a08:	97fff99e 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   95a0c:	2a2003e0 	mvn	w0, w0
   95a10:	531f7c00 	lsr	w0, w0, #31
   95a14:	910003bf 	mov	sp, x29
   95a18:	a94153f3 	ldp	x19, x20, [sp, #16]
   95a1c:	f94013f5 	ldr	x21, [sp, #32]
   95a20:	a8c37bfd 	ldp	x29, x30, [sp], #48
   95a24:	d65f03c0 	ret
   95a28:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95a2c:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95a30:	912ce021 	add	x1, x1, #0xb38
   95a34:	912d2000 	add	x0, x0, #0xb48
   95a38:	52801562 	mov	w2, #0xab                  	// #171
   95a3c:	94003131 	bl	a1f00 <assertion_failed>
   95a40:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95a44:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95a48:	912ce021 	add	x1, x1, #0xb38
   95a4c:	912d4000 	add	x0, x0, #0xb50
   95a50:	528015a2 	mov	w2, #0xad                  	// #173
   95a54:	9400312b 	bl	a1f00 <assertion_failed>
   95a58:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95a5c:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95a60:	912ce021 	add	x1, x1, #0xb38
   95a64:	912d8000 	add	x0, x0, #0xb60
   95a68:	528015c2 	mov	w2, #0xae                  	// #174
   95a6c:	94003125 	bl	a1f00 <assertion_failed>
   95a70:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95a74:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95a78:	912ce021 	add	x1, x1, #0xb38
   95a7c:	912dc000 	add	x0, x0, #0xb70
   95a80:	528015e2 	mov	w2, #0xaf                  	// #175
   95a84:	9400311f 	bl	a1f00 <assertion_failed>
   95a88:	d503201f 	nop
   95a8c:	d503201f 	nop

0000000000095a90 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>:
   95a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95a94:	910003fd 	mov	x29, sp
   95a98:	f9000bf3 	str	x19, [sp, #16]
   95a9c:	aa0003f3 	mov	x19, x0
   95aa0:	97ffea78 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   95aa4:	900001a0 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   95aa8:	9129c000 	add	x0, x0, #0xa70
   95aac:	f9000260 	str	x0, [x19]
   95ab0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   95ab4:	f9001e7f 	str	xzr, [x19, #56]
   95ab8:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   95abc:	f9400bf3 	ldr	x19, [sp, #16]
   95ac0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95ac4:	d65f03c0 	ret
   95ac8:	d503201f 	nop
   95acc:	d503201f 	nop

0000000000095ad0 <CUSBMIDIHostDevice::StartRequest()>:
   95ad0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95ad4:	910003fd 	mov	x29, sp
   95ad8:	a90153f3 	stp	x19, x20, [sp, #16]
   95adc:	aa0003f3 	mov	x19, x0
   95ae0:	f9401800 	ldr	x0, [x0, #48]
   95ae4:	b40003e0 	cbz	x0, 95b60 <CUSBMIDIHostDevice::StartRequest()+0x90>
   95ae8:	f9402660 	ldr	x0, [x19, #72]
   95aec:	b4000460 	cbz	x0, 95b78 <CUSBMIDIHostDevice::StartRequest()+0xa8>
   95af0:	79408260 	ldrh	w0, [x19, #64]
   95af4:	340004e0 	cbz	w0, 95b90 <CUSBMIDIHostDevice::StartRequest()+0xc0>
   95af8:	d2801200 	mov	x0, #0x90                  	// #144
   95afc:	94000585 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   95b00:	f9401a61 	ldr	x1, [x19, #48]
   95b04:	aa0003f4 	mov	x20, x0
   95b08:	f9402662 	ldr	x2, [x19, #72]
   95b0c:	d2800004 	mov	x4, #0x0                   	// #0
   95b10:	79408263 	ldrh	w3, [x19, #64]
   95b14:	94000497 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   95b18:	aa1303e3 	mov	x3, x19
   95b1c:	90000001 	adrp	x1, 95000 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x10>
   95b20:	91390021 	add	x1, x1, #0xe40
   95b24:	d2800002 	mov	x2, #0x0                   	// #0
   95b28:	aa1403e0 	mov	x0, x20
   95b2c:	94000555 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   95b30:	aa1403e0 	mov	x0, x20
   95b34:	9400056f 	bl	970f0 <CUSBRequest::SetCompleteOnNAK()>
   95b38:	aa1303e0 	mov	x0, x19
   95b3c:	97ffeacd 	bl	90670 <CUSBFunction::GetHost() const>
   95b40:	f9400003 	ldr	x3, [x0]
   95b44:	aa1403e1 	mov	x1, x20
   95b48:	a94153f3 	ldp	x19, x20, [sp, #16]
   95b4c:	52800002 	mov	w2, #0x0                   	// #0
   95b50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95b54:	f9401463 	ldr	x3, [x3, #40]
   95b58:	aa0303f0 	mov	x16, x3
   95b5c:	d61f0200 	br	x16
   95b60:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95b64:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95b68:	912ce021 	add	x1, x1, #0xb38
   95b6c:	912e2000 	add	x0, x0, #0xb88
   95b70:	528017c2 	mov	w2, #0xbe                  	// #190
   95b74:	940030e3 	bl	a1f00 <assertion_failed>
   95b78:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95b7c:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95b80:	912ce021 	add	x1, x1, #0xb38
   95b84:	912e8000 	add	x0, x0, #0xba0
   95b88:	528017e2 	mov	w2, #0xbf                  	// #191
   95b8c:	940030dd 	bl	a1f00 <assertion_failed>
   95b90:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95b94:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95b98:	912ce021 	add	x1, x1, #0xb38
   95b9c:	912ee000 	add	x0, x0, #0xbb8
   95ba0:	52801822 	mov	w2, #0xc1                  	// #193
   95ba4:	940030d7 	bl	a1f00 <assertion_failed>
   95ba8:	d503201f 	nop
   95bac:	d503201f 	nop

0000000000095bb0 <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)>:
   95bb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   95bb4:	910003fd 	mov	x29, sp
   95bb8:	b4000122 	cbz	x2, 95bdc <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)+0x2c>
   95bbc:	aa0003e1 	mov	x1, x0
   95bc0:	aa0203e0 	mov	x0, x2
   95bc4:	f9402842 	ldr	x2, [x2, #80]
   95bc8:	eb02003f 	cmp	x1, x2
   95bcc:	54000141 	b.ne	95bf4 <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)+0x44>  // b.any
   95bd0:	f900281f 	str	xzr, [x0, #80]
   95bd4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   95bd8:	17ffffbe 	b	95ad0 <CUSBMIDIHostDevice::StartRequest()>
   95bdc:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95be0:	b00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   95be4:	912ce021 	add	x1, x1, #0xb38
   95be8:	91288000 	add	x0, x0, #0xa20
   95bec:	528020e2 	mov	w2, #0x107                 	// #263
   95bf0:	940030c4 	bl	a1f00 <assertion_failed>
   95bf4:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95bf8:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95bfc:	912ce021 	add	x1, x1, #0xb38
   95c00:	912f4000 	add	x0, x0, #0xbd0
   95c04:	52801fc2 	mov	w2, #0xfe                  	// #254
   95c08:	940030be 	bl	a1f00 <assertion_failed>
   95c0c:	d503201f 	nop

0000000000095c10 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>:
   95c10:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   95c14:	910003fd 	mov	x29, sp
   95c18:	b4000c01 	cbz	x1, 95d98 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x188>
   95c1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   95c20:	aa0003f5 	mov	x21, x0
   95c24:	f9401400 	ldr	x0, [x0, #40]
   95c28:	a90153f3 	stp	x19, x20, [sp, #16]
   95c2c:	b4000ca0 	cbz	x0, 95dc0 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   95c30:	aa0103f3 	mov	x19, x1
   95c34:	aa0103e0 	mov	x0, x1
   95c38:	9400048a 	bl	96e60 <CUSBRequest::GetStatus() const>
   95c3c:	34000340 	cbz	w0, 95ca4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x94>
   95c40:	aa1303e0 	mov	x0, x19
   95c44:	9400048b 	bl	96e70 <CUSBRequest::GetResultLength() const>
   95c48:	12000400 	and	w0, w0, #0x3
   95c4c:	350002c0 	cbnz	w0, 95ca4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x94>
   95c50:	f94026b4 	ldr	x20, [x21, #72]
   95c54:	b4000c74 	cbz	x20, 95de0 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1d0>
   95c58:	f94016b6 	ldr	x22, [x21, #40]
   95c5c:	aa1303e0 	mov	x0, x19
   95c60:	94000484 	bl	96e70 <CUSBRequest::GetResultLength() const>
   95c64:	2a0003e2 	mov	w2, w0
   95c68:	aa1403e1 	mov	x1, x20
   95c6c:	aa1603e0 	mov	x0, x22
   95c70:	9400259c 	bl	9f2e0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   95c74:	12001c14 	and	w20, w0, #0xff
   95c78:	aa1303e0 	mov	x0, x19
   95c7c:	9400045d 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   95c80:	aa1303e0 	mov	x0, x19
   95c84:	d2801201 	mov	x1, #0x90                  	// #144
   95c88:	9400053a 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   95c8c:	360001d4 	tbz	w20, #0, 95cc4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   95c90:	a94153f3 	ldp	x19, x20, [sp, #16]
   95c94:	aa1503e0 	mov	x0, x21
   95c98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95c9c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   95ca0:	17ffff8c 	b	95ad0 <CUSBMIDIHostDevice::StartRequest()>
   95ca4:	f94016a0 	ldr	x0, [x21, #40]
   95ca8:	940025da 	bl	9f410 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>
   95cac:	37000300 	tbnz	w0, #0, 95d0c <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   95cb0:	aa1303e0 	mov	x0, x19
   95cb4:	9400044f 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   95cb8:	aa1303e0 	mov	x0, x19
   95cbc:	d2801201 	mov	x1, #0x90                  	// #144
   95cc0:	9400052c 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   95cc4:	940035bf 	bl	a33c0 <CKernelOptions::Get()>
   95cc8:	9400357a 	bl	a32b0 <CKernelOptions::GetUSBBoost() const>
   95ccc:	3707fe20 	tbnz	w0, #0, 95c90 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x80>
   95cd0:	f9402aa0 	ldr	x0, [x21, #80]
   95cd4:	b5000960 	cbnz	x0, 95e00 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1f0>
   95cd8:	9400537e 	bl	aaad0 <CTimer::Get()>
   95cdc:	aa1503e4 	mov	x4, x21
   95ce0:	90000002 	adrp	x2, 95000 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x10>
   95ce4:	d2800003 	mov	x3, #0x0                   	// #0
   95ce8:	912ec042 	add	x2, x2, #0xbb0
   95cec:	52800021 	mov	w1, #0x1                   	// #1
   95cf0:	9400515c 	bl	aa260 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   95cf4:	f9002aa0 	str	x0, [x21, #80]
   95cf8:	b4000940 	cbz	x0, 95e20 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x210>
   95cfc:	a94153f3 	ldp	x19, x20, [sp, #16]
   95d00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95d04:	a8c67bfd 	ldp	x29, x30, [sp], #96
   95d08:	d65f03c0 	ret
   95d0c:	aa1303e0 	mov	x0, x19
   95d10:	94000454 	bl	96e60 <CUSBRequest::GetStatus() const>
   95d14:	35fffce0 	cbnz	w0, 95cb0 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa0>
   95d18:	aa1303e0 	mov	x0, x19
   95d1c:	94000461 	bl	96ea0 <CUSBRequest::GetUSBError() const>
   95d20:	7100241f 	cmp	w0, #0x9
   95d24:	54fffc60 	b.eq	95cb0 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa0>  // b.none
   95d28:	f90023f9 	str	x25, [sp, #64]
   95d2c:	910163f9 	add	x25, sp, #0x58
   95d30:	52800014 	mov	w20, #0x0                   	// #0
   95d34:	128009f6 	mov	w22, #0xffffffb0            	// #-80
   95d38:	a90363f7 	stp	x23, x24, [sp, #48]
   95d3c:	52800178 	mov	w24, #0xb                   	// #11
   95d40:	52800f17 	mov	w23, #0x78                  	// #120
   95d44:	d503201f 	nop
   95d48:	f94016a0 	ldr	x0, [x21, #40]
   95d4c:	2a160283 	orr	w3, w20, w22
   95d50:	11000694 	add	w20, w20, #0x1
   95d54:	aa1903e1 	mov	x1, x25
   95d58:	12001e94 	and	w20, w20, #0xff
   95d5c:	52800082 	mov	w2, #0x4                   	// #4
   95d60:	390163f8 	strb	w24, [sp, #88]
   95d64:	390167e3 	strb	w3, [sp, #89]
   95d68:	7900b7f7 	strh	w23, [sp, #90]
   95d6c:	9400255d 	bl	9f2e0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   95d70:	7100429f 	cmp	w20, #0x10
   95d74:	54fffea1 	b.ne	95d48 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x138>  // b.any
   95d78:	aa1303e0 	mov	x0, x19
   95d7c:	9400041d 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   95d80:	aa1303e0 	mov	x0, x19
   95d84:	d2801201 	mov	x1, #0x90                  	// #144
   95d88:	940004fa 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   95d8c:	a94363f7 	ldp	x23, x24, [sp, #48]
   95d90:	f94023f9 	ldr	x25, [sp, #64]
   95d94:	17ffffcc 	b	95cc4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   95d98:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95d9c:	d00000e0 	adrp	x0, b3000 <_etext+0x9c8>
   95da0:	912ce021 	add	x1, x1, #0xb38
   95da4:	9106c000 	add	x0, x0, #0x1b0
   95da8:	528019a2 	mov	w2, #0xcd                  	// #205
   95dac:	a90153f3 	stp	x19, x20, [sp, #16]
   95db0:	a9025bf5 	stp	x21, x22, [sp, #32]
   95db4:	a90363f7 	stp	x23, x24, [sp, #48]
   95db8:	f90023f9 	str	x25, [sp, #64]
   95dbc:	94003051 	bl	a1f00 <assertion_failed>
   95dc0:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95dc4:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95dc8:	912ce021 	add	x1, x1, #0xb38
   95dcc:	912fa000 	add	x0, x0, #0xbe8
   95dd0:	528019c2 	mov	w2, #0xce                  	// #206
   95dd4:	a90363f7 	stp	x23, x24, [sp, #48]
   95dd8:	f90023f9 	str	x25, [sp, #64]
   95ddc:	94003049 	bl	a1f00 <assertion_failed>
   95de0:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95de4:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95de8:	912ce021 	add	x1, x1, #0xb38
   95dec:	912e8000 	add	x0, x0, #0xba0
   95df0:	52801aa2 	mov	w2, #0xd5                  	// #213
   95df4:	a90363f7 	stp	x23, x24, [sp, #48]
   95df8:	f90023f9 	str	x25, [sp, #64]
   95dfc:	94003041 	bl	a1f00 <assertion_failed>
   95e00:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95e04:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95e08:	912ce021 	add	x1, x1, #0xb38
   95e0c:	91300000 	add	x0, x0, #0xc00
   95e10:	52801dc2 	mov	w2, #0xee                  	// #238
   95e14:	a90363f7 	stp	x23, x24, [sp, #48]
   95e18:	f90023f9 	str	x25, [sp, #64]
   95e1c:	94003039 	bl	a1f00 <assertion_failed>
   95e20:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95e24:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95e28:	912ce021 	add	x1, x1, #0xb38
   95e2c:	91304000 	add	x0, x0, #0xc10
   95e30:	52801e02 	mov	w2, #0xf0                  	// #240
   95e34:	a90363f7 	stp	x23, x24, [sp, #48]
   95e38:	f90023f9 	str	x25, [sp, #64]
   95e3c:	94003031 	bl	a1f00 <assertion_failed>

0000000000095e40 <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   95e40:	b4000082 	cbz	x2, 95e50 <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   95e44:	aa0003e1 	mov	x1, x0
   95e48:	aa0203e0 	mov	x0, x2
   95e4c:	17ffff71 	b	95c10 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>
   95e50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   95e54:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95e58:	b00000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   95e5c:	910003fd 	mov	x29, sp
   95e60:	912ce021 	add	x1, x1, #0xb38
   95e64:	91288000 	add	x0, x0, #0xa20
   95e68:	52801ee2 	mov	w2, #0xf7                  	// #247
   95e6c:	94003025 	bl	a1f00 <assertion_failed>

0000000000095e70 <CUSBMIDIHostDevice::TimerHandler(unsigned long)>:
   95e70:	f9402803 	ldr	x3, [x0, #80]
   95e74:	eb01007f 	cmp	x3, x1
   95e78:	54000061 	b.ne	95e84 <CUSBMIDIHostDevice::TimerHandler(unsigned long)+0x14>  // b.any
   95e7c:	f900281f 	str	xzr, [x0, #80]
   95e80:	17ffff14 	b	95ad0 <CUSBMIDIHostDevice::StartRequest()>
   95e84:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   95e88:	f00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   95e8c:	f00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   95e90:	910003fd 	mov	x29, sp
   95e94:	912ce021 	add	x1, x1, #0xb38
   95e98:	912f4000 	add	x0, x0, #0xbd0
   95e9c:	52801fc2 	mov	w2, #0xfe                  	// #254
   95ea0:	94003018 	bl	a1f00 <assertion_failed>
   95ea4:	d503201f 	nop
   95ea8:	d503201f 	nop
   95eac:	d503201f 	nop

0000000000095eb0 <CUSBMIDIHostDevice::Configure()>:
   95eb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   95eb4:	910003fd 	mov	x29, sp
   95eb8:	a90153f3 	stp	x19, x20, [sp, #16]
   95ebc:	aa0003f4 	mov	x20, x0
   95ec0:	97ffe9c8 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   95ec4:	72001c1f 	tst	w0, #0xff
   95ec8:	54000d00 	b.eq	96068 <CUSBMIDIHostDevice::Configure()+0x1b8>  // b.none
   95ecc:	aa1403e0 	mov	x0, x20
   95ed0:	a9025bf5 	stp	x21, x22, [sp, #32]
   95ed4:	97ffe9cf 	bl	90610 <CUSBFunction::GetDevice() const>
   95ed8:	97ffe1da 	bl	8e640 <CUSBDevice::GetDeviceDescriptor() const>
   95edc:	b4000f40 	cbz	x0, 960c4 <CUSBMIDIHostDevice::Configure()+0x214>
   95ee0:	39402002 	ldrb	w2, [x0, #8]
   95ee4:	52800016 	mov	w22, #0x0                   	// #0
   95ee8:	39402401 	ldrb	w1, [x0, #9]
   95eec:	2a012041 	orr	w1, w2, w1, lsl #8
   95ef0:	7116083f 	cmp	w1, #0x582
   95ef4:	54000ae0 	b.eq	96050 <CUSBMIDIHostDevice::Configure()+0x1a0>  // b.none
   95ef8:	120002d6 	and	w22, w22, #0x1
   95efc:	d503201f 	nop
   95f00:	aa1403e0 	mov	x0, x20
   95f04:	528000a1 	mov	w1, #0x5                   	// #5
   95f08:	97ffe9e6 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   95f0c:	aa0003f3 	mov	x19, x0
   95f10:	b4000320 	cbz	x0, 95f74 <CUSBMIDIHostDevice::Configure()+0xc4>
   95f14:	39400e61 	ldrb	w1, [x19, #3]
   95f18:	121f1021 	and	w1, w1, #0x3e
   95f1c:	7100083f 	cmp	w1, #0x2
   95f20:	54ffff01 	b.ne	95f00 <CUSBMIDIHostDevice::Configure()+0x50>  // b.any
   95f24:	34000556 	cbz	w22, 95fcc <CUSBMIDIHostDevice::Configure()+0x11c>
   95f28:	39c00a60 	ldrsb	w0, [x19, #2]
   95f2c:	37f80660 	tbnz	w0, #31, 95ff8 <CUSBMIDIHostDevice::Configure()+0x148>
   95f30:	f9401e80 	ldr	x0, [x20, #56]
   95f34:	b5000aa0 	cbnz	x0, 96088 <CUSBMIDIHostDevice::Configure()+0x1d8>
   95f38:	d2800400 	mov	x0, #0x20                  	// #32
   95f3c:	940056fd 	bl	abb30 <operator new(unsigned long)>
   95f40:	aa0003f5 	mov	x21, x0
   95f44:	aa1403e0 	mov	x0, x20
   95f48:	97ffe9b2 	bl	90610 <CUSBFunction::GetDevice() const>
   95f4c:	aa0003e1 	mov	x1, x0
   95f50:	aa1303e2 	mov	x2, x19
   95f54:	aa1503e0 	mov	x0, x21
   95f58:	97ffe796 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   95f5c:	f9001e95 	str	x21, [x20, #56]
   95f60:	aa1403e0 	mov	x0, x20
   95f64:	528000a1 	mov	w1, #0x5                   	// #5
   95f68:	97ffe9ce 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   95f6c:	aa0003f3 	mov	x19, x0
   95f70:	b5fffd20 	cbnz	x0, 95f14 <CUSBMIDIHostDevice::Configure()+0x64>
   95f74:	f9401a80 	ldr	x0, [x20, #48]
   95f78:	b4000880 	cbz	x0, 96088 <CUSBMIDIHostDevice::Configure()+0x1d8>
   95f7c:	aa1403e0 	mov	x0, x20
   95f80:	97ffe8d4 	bl	902d0 <CUSBFunction::Configure()>
   95f84:	36000ac0 	tbz	w0, #0, 960dc <CUSBMIDIHostDevice::Configure()+0x22c>
   95f88:	f9401680 	ldr	x0, [x20, #40]
   95f8c:	b5000ba0 	cbnz	x0, 96100 <CUSBMIDIHostDevice::Configure()+0x250>
   95f90:	d2800700 	mov	x0, #0x38                  	// #56
   95f94:	940056e7 	bl	abb30 <operator new(unsigned long)>
   95f98:	aa0003f3 	mov	x19, x0
   95f9c:	94002391 	bl	9ede0 <CUSBMIDIDevice::CUSBMIDIDevice()>
   95fa0:	f9001693 	str	x19, [x20, #40]
   95fa4:	aa1303e0 	mov	x0, x19
   95fa8:	aa1403e2 	mov	x2, x20
   95fac:	90000001 	adrp	x1, 95000 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x10>
   95fb0:	91254021 	add	x1, x1, #0x950
   95fb4:	940024ff 	bl	9f3b0 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>
   95fb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95fbc:	aa1403e0 	mov	x0, x20
   95fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   95fc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   95fc8:	17fffec2 	b	95ad0 <CUSBMIDIHostDevice::StartRequest()>
   95fcc:	aa1403e0 	mov	x0, x20
   95fd0:	528004a1 	mov	w1, #0x25                  	// #37
   95fd4:	97ffe9b3 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   95fd8:	b4fff940 	cbz	x0, 95f00 <CUSBMIDIHostDevice::Configure()+0x50>
   95fdc:	39400261 	ldrb	w1, [x19]
   95fe0:	8b010261 	add	x1, x19, x1
   95fe4:	eb01001f 	cmp	x0, x1
   95fe8:	54fff8c1 	b.ne	95f00 <CUSBMIDIHostDevice::Configure()+0x50>  // b.any
   95fec:	39c00a60 	ldrsb	w0, [x19, #2]
   95ff0:	36fffa00 	tbz	w0, #31, 95f30 <CUSBMIDIHostDevice::Configure()+0x80>
   95ff4:	d503201f 	nop
   95ff8:	f9401a80 	ldr	x0, [x20, #48]
   95ffc:	b5000460 	cbnz	x0, 96088 <CUSBMIDIHostDevice::Configure()+0x1d8>
   96000:	d2800400 	mov	x0, #0x20                  	// #32
   96004:	940056cb 	bl	abb30 <operator new(unsigned long)>
   96008:	aa0003f5 	mov	x21, x0
   9600c:	aa1403e0 	mov	x0, x20
   96010:	97ffe980 	bl	90610 <CUSBFunction::GetDevice() const>
   96014:	aa0003e1 	mov	x1, x0
   96018:	aa1303e2 	mov	x2, x19
   9601c:	aa1503e0 	mov	x0, x21
   96020:	97ffe764 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   96024:	f9001a95 	str	x21, [x20, #48]
   96028:	f9402681 	ldr	x1, [x20, #72]
   9602c:	39401262 	ldrb	w2, [x19, #4]
   96030:	39401660 	ldrb	w0, [x19, #5]
   96034:	aa002040 	orr	x0, x2, x0, lsl #8
   96038:	121e3400 	and	w0, w0, #0xfffc
   9603c:	79008280 	strh	w0, [x20, #64]
   96040:	b5000361 	cbnz	x1, 960ac <CUSBMIDIHostDevice::Configure()+0x1fc>
   96044:	940056c3 	bl	abb50 <operator new[](unsigned long)>
   96048:	f9002680 	str	x0, [x20, #72]
   9604c:	17ffffad 	b	95f00 <CUSBMIDIHostDevice::Configure()+0x50>
   96050:	39402801 	ldrb	w1, [x0, #10]
   96054:	39402c00 	ldrb	w0, [x0, #11]
   96058:	2a002020 	orr	w0, w1, w0, lsl #8
   9605c:	7104a81f 	cmp	w0, #0x12a
   96060:	1a9f17f6 	cset	w22, eq	// eq = none
   96064:	17ffffa5 	b	95ef8 <CUSBMIDIHostDevice::Configure()+0x48>
   96068:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   9606c:	9108a021 	add	x1, x1, #0x228
   96070:	aa1403e0 	mov	x0, x20
   96074:	97ffe997 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   96078:	a94153f3 	ldp	x19, x20, [sp, #16]
   9607c:	52800000 	mov	w0, #0x0                   	// #0
   96080:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96084:	d65f03c0 	ret
   96088:	aa1403e0 	mov	x0, x20
   9608c:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96090:	9108a021 	add	x1, x1, #0x228
   96094:	97ffe98f 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   96098:	a94153f3 	ldp	x19, x20, [sp, #16]
   9609c:	52800000 	mov	w0, #0x0                   	// #0
   960a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   960a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   960a8:	d65f03c0 	ret
   960ac:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   960b0:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   960b4:	912ce021 	add	x1, x1, #0xb38
   960b8:	9130e000 	add	x0, x0, #0xc38
   960bc:	52800fc2 	mov	w2, #0x7e                  	// #126
   960c0:	94002f90 	bl	a1f00 <assertion_failed>
   960c4:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   960c8:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   960cc:	912ce021 	add	x1, x1, #0xb38
   960d0:	91308000 	add	x0, x0, #0xc20
   960d4:	52800a02 	mov	w2, #0x50                  	// #80
   960d8:	94002f8a 	bl	a1f00 <assertion_failed>
   960dc:	940036c5 	bl	a3bf0 <CLogger::Get()>
   960e0:	d00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   960e4:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   960e8:	91182063 	add	x3, x3, #0x608
   960ec:	9108a021 	add	x1, x1, #0x228
   960f0:	52800022 	mov	w2, #0x1                   	// #1
   960f4:	940038b3 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   960f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   960fc:	17ffffdf 	b	96078 <CUSBMIDIHostDevice::Configure()+0x1c8>
   96100:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96104:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96108:	912ce021 	add	x1, x1, #0xb38
   9610c:	91314000 	add	x0, x0, #0xc50
   96110:	52801402 	mov	w2, #0xa0                  	// #160
   96114:	94002f7b 	bl	a1f00 <assertion_failed>
	...

0000000000096120 <CUSBMouseDevice::~CUSBMouseDevice()>:
   96120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96124:	f0000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   96128:	912b6021 	add	x1, x1, #0xad8
   9612c:	910003fd 	mov	x29, sp
   96130:	f9000bf3 	str	x19, [sp, #16]
   96134:	aa0003f3 	mov	x19, x0
   96138:	f9402400 	ldr	x0, [x0, #72]
   9613c:	f9000261 	str	x1, [x19]
   96140:	b4000080 	cbz	x0, 96150 <CUSBMouseDevice::~CUSBMouseDevice()+0x30>
   96144:	f9400001 	ldr	x1, [x0]
   96148:	f9400421 	ldr	x1, [x1, #8]
   9614c:	d63f0020 	blr	x1
   96150:	f9402a60 	ldr	x0, [x19, #80]
   96154:	f900267f 	str	xzr, [x19, #72]
   96158:	b4000040 	cbz	x0, 96160 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   9615c:	9400568d 	bl	abb90 <operator delete[](void*)>
   96160:	f9002a7f 	str	xzr, [x19, #80]
   96164:	aa1303e0 	mov	x0, x19
   96168:	f9400bf3 	ldr	x19, [sp, #16]
   9616c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96170:	17fff4dc 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   96174:	d503201f 	nop
   96178:	d503201f 	nop
   9617c:	d503201f 	nop

0000000000096180 <CUSBMouseDevice::~CUSBMouseDevice()>:
   96180:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96184:	910003fd 	mov	x29, sp
   96188:	f9000bf3 	str	x19, [sp, #16]
   9618c:	aa0003f3 	mov	x19, x0
   96190:	97ffffe4 	bl	96120 <CUSBMouseDevice::~CUSBMouseDevice()>
   96194:	aa1303e0 	mov	x0, x19
   96198:	d2801101 	mov	x1, #0x88                  	// #136
   9619c:	f9400bf3 	ldr	x19, [sp, #16]
   961a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   961a4:	14005683 	b	abbb0 <operator delete(void*, unsigned long)>
   961a8:	d503201f 	nop
   961ac:	d503201f 	nop

00000000000961b0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   961b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   961b4:	52800002 	mov	w2, #0x0                   	// #0
   961b8:	910003fd 	mov	x29, sp
   961bc:	f9000bf3 	str	x19, [sp, #16]
   961c0:	aa0003f3 	mov	x19, x0
   961c4:	97fff4af 	bl	93480 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   961c8:	f0000180 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   961cc:	912b6000 	add	x0, x0, #0xad8
   961d0:	f9000260 	str	x0, [x19]
   961d4:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   961d8:	f9400bf3 	ldr	x19, [sp, #16]
   961dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   961e0:	d65f03c0 	ret
   961e4:	d503201f 	nop
   961e8:	d503201f 	nop
   961ec:	d503201f 	nop

00000000000961f0 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>:
   961f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   961f4:	910003fd 	mov	x29, sp
   961f8:	b40003c1 	cbz	x1, 96270 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x80>
   961fc:	7100807f 	cmp	w3, #0x20
   96200:	54000448 	b.hi	96288 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x98>  // b.pmore
   96204:	52800000 	mov	w0, #0x0                   	// #0
   96208:	34000243 	cbz	w3, 96250 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x60>
   9620c:	53037c40 	lsr	w0, w2, #3
   96210:	12000842 	and	w2, w2, #0x7
   96214:	aa0003e4 	mov	x4, x0
   96218:	8b000020 	add	x0, x1, x0
   9621c:	7100607f 	cmp	w3, #0x18
   96220:	b8644821 	ldr	w1, [x1, w4, uxtw]
   96224:	1ac22421 	lsr	w1, w1, w2
   96228:	54000189 	b.ls	96258 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x68>  // b.plast
   9622c:	b8403004 	ldur	w4, [x0, #3]
   96230:	51006063 	sub	w3, w3, #0x18
   96234:	52800020 	mov	w0, #0x1                   	// #1
   96238:	12005c21 	and	w1, w1, #0xffffff
   9623c:	1ac32000 	lsl	w0, w0, w3
   96240:	51000400 	sub	w0, w0, #0x1
   96244:	1ac22482 	lsr	w2, w4, w2
   96248:	0a020000 	and	w0, w0, w2
   9624c:	2a006020 	orr	w0, w1, w0, lsl #24
   96250:	a8c17bfd 	ldp	x29, x30, [sp], #16
   96254:	d65f03c0 	ret
   96258:	52800020 	mov	w0, #0x1                   	// #1
   9625c:	1ac32000 	lsl	w0, w0, w3
   96260:	51000400 	sub	w0, w0, #0x1
   96264:	0a010000 	and	w0, w0, w1
   96268:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9626c:	d65f03c0 	ret
   96270:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96274:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96278:	9131a021 	add	x1, x1, #0xc68
   9627c:	911de000 	add	x0, x0, #0x778
   96280:	52801582 	mov	w2, #0xac                  	// #172
   96284:	94002f1f 	bl	a1f00 <assertion_failed>
   96288:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   9628c:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96290:	9131a021 	add	x1, x1, #0xc68
   96294:	911e2000 	add	x0, x0, #0x788
   96298:	528015a2 	mov	w2, #0xad                  	// #173
   9629c:	94002f19 	bl	a1f00 <assertion_failed>

00000000000962a0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>:
   962a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   962a4:	910003fd 	mov	x29, sp
   962a8:	b40005c1 	cbz	x1, 96360 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xc0>
   962ac:	7100807f 	cmp	w3, #0x20
   962b0:	54000648 	b.hi	96378 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xd8>  // b.pmore
   962b4:	52800000 	mov	w0, #0x0                   	// #0
   962b8:	34000363 	cbz	w3, 96324 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x84>
   962bc:	53037c40 	lsr	w0, w2, #3
   962c0:	12000842 	and	w2, w2, #0x7
   962c4:	8b000024 	add	x4, x1, x0
   962c8:	7100607f 	cmp	w3, #0x18
   962cc:	b8604820 	ldr	w0, [x1, w0, uxtw]
   962d0:	1ac22401 	lsr	w1, w0, w2
   962d4:	540002c9 	b.ls	9632c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x8c>  // b.plast
   962d8:	b8403084 	ldur	w4, [x4, #3]
   962dc:	51006065 	sub	w5, w3, #0x18
   962e0:	52800020 	mov	w0, #0x1                   	// #1
   962e4:	12005c21 	and	w1, w1, #0xffffff
   962e8:	1ac52000 	lsl	w0, w0, w5
   962ec:	51000400 	sub	w0, w0, #0x1
   962f0:	1ac22482 	lsr	w2, w4, w2
   962f4:	0a020000 	and	w0, w0, w2
   962f8:	7100807f 	cmp	w3, #0x20
   962fc:	2a006020 	orr	w0, w1, w0, lsl #24
   96300:	54000120 	b.eq	96324 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x84>  // b.none
   96304:	51000462 	sub	w2, w3, #0x1
   96308:	52800021 	mov	w1, #0x1                   	// #1
   9630c:	1ac32023 	lsl	w3, w1, w3
   96310:	4b0303e3 	neg	w3, w3
   96314:	2a030003 	orr	w3, w0, w3
   96318:	1ac22021 	lsl	w1, w1, w2
   9631c:	6a00003f 	tst	w1, w0
   96320:	1a801060 	csel	w0, w3, w0, ne	// ne = any
   96324:	a8c17bfd 	ldp	x29, x30, [sp], #16
   96328:	d65f03c0 	ret
   9632c:	52800020 	mov	w0, #0x1                   	// #1
   96330:	51000462 	sub	w2, w3, #0x1
   96334:	1ac32000 	lsl	w0, w0, w3
   96338:	51000400 	sub	w0, w0, #0x1
   9633c:	0a010000 	and	w0, w0, w1
   96340:	52800021 	mov	w1, #0x1                   	// #1
   96344:	1ac32023 	lsl	w3, w1, w3
   96348:	4b0303e3 	neg	w3, w3
   9634c:	2a030003 	orr	w3, w0, w3
   96350:	1ac22021 	lsl	w1, w1, w2
   96354:	6a00003f 	tst	w1, w0
   96358:	1a801060 	csel	w0, w3, w0, ne	// ne = any
   9635c:	17fffff2 	b	96324 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x84>
   96360:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96364:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96368:	9131a021 	add	x1, x1, #0xc68
   9636c:	911de000 	add	x0, x0, #0x778
   96370:	528019e2 	mov	w2, #0xcf                  	// #207
   96374:	94002ee3 	bl	a1f00 <assertion_failed>
   96378:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   9637c:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96380:	9131a021 	add	x1, x1, #0xc68
   96384:	911e2000 	add	x0, x0, #0x788
   96388:	52801a02 	mov	w2, #0xd0                  	// #208
   9638c:	94002edd 	bl	a1f00 <assertion_failed>

0000000000096390 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   96390:	b4000881 	cbz	x1, 964a0 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   96394:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   96398:	910003fd 	mov	x29, sp
   9639c:	b9406003 	ldr	w3, [x0, #96]
   963a0:	a90153f3 	stp	x19, x20, [sp, #16]
   963a4:	aa0003f3 	mov	x19, x0
   963a8:	6b02007f 	cmp	w3, w2
   963ac:	54000080 	b.eq	963bc <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.none
   963b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   963b4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   963b8:	d65f03c0 	ret
   963bc:	a90363f7 	stp	x23, x24, [sp, #48]
   963c0:	f9402417 	ldr	x23, [x0, #72]
   963c4:	b4000717 	cbz	x23, 964a4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x114>
   963c8:	294c8803 	ldp	w3, w2, [x0, #100]
   963cc:	aa0103f4 	mov	x20, x1
   963d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   963d4:	52800ff8 	mov	w24, #0x7f                  	// #127
   963d8:	f90023f9 	str	x25, [sp, #64]
   963dc:	97ffff85 	bl	961f0 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   963e0:	294d8a63 	ldp	w3, w2, [x19, #108]
   963e4:	2a0003f6 	mov	w22, w0
   963e8:	aa1403e1 	mov	x1, x20
   963ec:	aa1303e0 	mov	x0, x19
   963f0:	12800fd9 	mov	w25, #0xffffff81            	// #-127
   963f4:	97ffffab 	bl	962a0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   963f8:	3101fc1f 	cmn	w0, #0x7f
   963fc:	294e8a63 	ldp	w3, w2, [x19, #116]
   96400:	1a99a015 	csel	w21, w0, w25, ge	// ge = tcont
   96404:	7101febf 	cmp	w21, #0x7f
   96408:	aa1403e1 	mov	x1, x20
   9640c:	1a98d2b5 	csel	w21, w21, w24, le
   96410:	aa1303e0 	mov	x0, x19
   96414:	97ffffa3 	bl	962a0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   96418:	6b19001f 	cmp	w0, w25
   9641c:	294f8a63 	ldp	w3, w2, [x19, #124]
   96420:	1a99a019 	csel	w25, w0, w25, ge	// ge = tcont
   96424:	6b18033f 	cmp	w25, w24
   96428:	aa1403e1 	mov	x1, x20
   9642c:	1a98d339 	csel	w25, w25, w24, le
   96430:	aa1303e0 	mov	x0, x19
   96434:	97ffff9b 	bl	962a0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   96438:	2a0003e4 	mov	w4, w0
   9643c:	120002c1 	and	w1, w22, #0x1
   96440:	721f02c0 	ands	w0, w22, #0x2
   96444:	321f0022 	orr	w2, w1, #0x2
   96448:	121e02c0 	and	w0, w22, #0x4
   9644c:	1a811041 	csel	w1, w2, w1, ne	// ne = any
   96450:	7100001f 	cmp	w0, #0x0
   96454:	321e0022 	orr	w2, w1, #0x4
   96458:	121d02c0 	and	w0, w22, #0x8
   9645c:	1a811041 	csel	w1, w2, w1, ne	// ne = any
   96460:	121c02d6 	and	w22, w22, #0x10
   96464:	7100001f 	cmp	w0, #0x0
   96468:	321d0020 	orr	w0, w1, #0x8
   9646c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96470:	1a811001 	csel	w1, w0, w1, ne	// ne = any
   96474:	2a1903e3 	mov	w3, w25
   96478:	710002df 	cmp	w22, #0x0
   9647c:	f94023f9 	ldr	x25, [sp, #64]
   96480:	2a1503e2 	mov	w2, w21
   96484:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96488:	aa1703e0 	mov	x0, x23
   9648c:	a94363f7 	ldp	x23, x24, [sp, #48]
   96490:	321c0025 	orr	w5, w1, #0x10
   96494:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96498:	1a8110a1 	csel	w1, w5, w1, ne	// ne = any
   9649c:	14002a39 	b	a0d80 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   964a0:	d65f03c0 	ret
   964a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   964a8:	a94363f7 	ldp	x23, x24, [sp, #48]
   964ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
   964b0:	d65f03c0 	ret
   964b4:	d503201f 	nop
   964b8:	d503201f 	nop
   964bc:	d503201f 	nop

00000000000964c0 <CUSBMouseDevice::DecodeReport()>:
   964c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   964c4:	910003fd 	mov	x29, sp
   964c8:	f9402808 	ldr	x8, [x0, #80]
   964cc:	a9017fff 	stp	xzr, xzr, [sp, #16]
   964d0:	b40015c8 	cbz	x8, 96788 <CUSBMouseDevice::DecodeReport()+0x2c8>
   964d4:	7940b002 	ldrh	w2, [x0, #88]
   964d8:	34001642 	cbz	w2, 967a0 <CUSBMouseDevice::DecodeReport()+0x2e0>
   964dc:	5280000c 	mov	w12, #0x0                   	// #0
   964e0:	5280000a 	mov	w10, #0x0                   	// #0
   964e4:	d2800006 	mov	x6, #0x0                   	// #0
   964e8:	52800009 	mov	w9, #0x0                   	// #0
   964ec:	5280000d 	mov	w13, #0x0                   	// #0
   964f0:	5280000f 	mov	w15, #0x0                   	// #0
   964f4:	5280000e 	mov	w14, #0x0                   	// #0
   964f8:	5280000b 	mov	w11, #0x0                   	// #0
   964fc:	d503201f 	nop
   96500:	39c00101 	ldrsb	w1, [x8]
   96504:	12000423 	and	w3, w1, #0x3
   96508:	7100047f 	cmp	w3, #0x1
   9650c:	54000720 	b.eq	965f0 <CUSBMouseDevice::DecodeReport()+0x130>  // b.none
   96510:	7100087f 	cmp	w3, #0x2
   96514:	54000600 	b.eq	965d4 <CUSBMouseDevice::DecodeReport()+0x114>  // b.none
   96518:	350003c3 	cbnz	w3, 96590 <CUSBMouseDevice::DecodeReport()+0xd0>
   9651c:	51000442 	sub	w2, w2, #0x1
   96520:	91000508 	add	x8, x8, #0x1
   96524:	12003c42 	and	w2, w2, #0xffff
   96528:	121e1421 	and	w1, w1, #0xfc
   9652c:	7102803f 	cmp	w1, #0xa0
   96530:	540004c0 	b.eq	965c8 <CUSBMouseDevice::DecodeReport()+0x108>  // b.none
   96534:	5400022c 	b.gt	96578 <CUSBMouseDevice::DecodeReport()+0xb8>
   96538:	7100203f 	cmp	w1, #0x8
   9653c:	54000640 	b.eq	96604 <CUSBMouseDevice::DecodeReport()+0x144>  // b.none
   96540:	7102103f 	cmp	w1, #0x84
   96544:	540008e1 	b.ne	96660 <CUSBMouseDevice::DecodeReport()+0x1a0>  // b.any
   96548:	340000cc 	cbz	w12, 96560 <CUSBMouseDevice::DecodeReport()+0xa0>
   9654c:	35000b6d 	cbnz	w13, 966b8 <CUSBMouseDevice::DecodeReport()+0x1f8>
   96550:	2a0303ed 	mov	w13, w3
   96554:	1100216b 	add	w11, w11, #0x8
   96558:	2a0c03ea 	mov	w10, w12
   9655c:	d503201f 	nop
   96560:	35fffd02 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   96564:	11001d61 	add	w1, w11, #0x7
   96568:	53037c21 	lsr	w1, w1, #3
   9656c:	290b840d 	stp	w13, w1, [x0, #92]
   96570:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96574:	d65f03c0 	ret
   96578:	7103003f 	cmp	w1, #0xc0
   9657c:	54ffff21 	b.ne	96560 <CUSBMouseDevice::DecodeReport()+0xa0>  // b.any
   96580:	71000529 	subs	w9, w9, #0x1
   96584:	1a9f114a 	csel	w10, w10, wzr, ne	// ne = any
   96588:	35fffbc2 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   9658c:	17fffff6 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   96590:	39c00d05 	ldrsb	w5, [x8, #3]
   96594:	51001442 	sub	w2, w2, #0x5
   96598:	39c00903 	ldrsb	w3, [x8, #2]
   9659c:	121e1421 	and	w1, w1, #0xfc
   965a0:	39c01104 	ldrsb	w4, [x8, #4]
   965a4:	12003c42 	and	w2, w2, #0xffff
   965a8:	39c00507 	ldrsb	w7, [x8, #1]
   965ac:	53103ca5 	lsl	w5, w5, #16
   965b0:	2a0320a3 	orr	w3, w5, w3, lsl #8
   965b4:	91001508 	add	x8, x8, #0x5
   965b8:	7102803f 	cmp	w1, #0xa0
   965bc:	2a0460e4 	orr	w4, w7, w4, lsl #24
   965c0:	2a040063 	orr	w3, w3, w4
   965c4:	54fffb81 	b.ne	96534 <CUSBMouseDevice::DecodeReport()+0x74>  // b.any
   965c8:	11000529 	add	w9, w9, #0x1
   965cc:	35fff9a2 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   965d0:	17ffffe5 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   965d4:	39400504 	ldrb	w4, [x8, #1]
   965d8:	51000c42 	sub	w2, w2, #0x3
   965dc:	39c00903 	ldrsb	w3, [x8, #2]
   965e0:	12003c42 	and	w2, w2, #0xffff
   965e4:	91000d08 	add	x8, x8, #0x3
   965e8:	2a032083 	orr	w3, w4, w3, lsl #8
   965ec:	17ffffcf 	b	96528 <CUSBMouseDevice::DecodeReport()+0x68>
   965f0:	51000842 	sub	w2, w2, #0x2
   965f4:	39c00503 	ldrsb	w3, [x8, #1]
   965f8:	12003c42 	and	w2, w2, #0xffff
   965fc:	91000908 	add	x8, x8, #0x2
   96600:	17ffffca 	b	96528 <CUSBMouseDevice::DecodeReport()+0x68>
   96604:	7100087f 	cmp	w3, #0x2
   96608:	54000520 	b.eq	966ac <CUSBMouseDevice::DecodeReport()+0x1ec>  // b.none
   9660c:	7100047f 	cmp	w3, #0x1
   96610:	540005c0 	b.eq	966c8 <CUSBMouseDevice::DecodeReport()+0x208>  // b.none
   96614:	3607fa6a 	tbz	w10, #0, 96560 <CUSBMouseDevice::DecodeReport()+0xa0>
   96618:	7100c47f 	cmp	w3, #0x31
   9661c:	54000160 	b.eq	96648 <CUSBMouseDevice::DecodeReport()+0x188>  // b.none
   96620:	7100e07f 	cmp	w3, #0x38
   96624:	54000a00 	b.eq	96764 <CUSBMouseDevice::DecodeReport()+0x2a4>  // b.none
   96628:	7100c07f 	cmp	w3, #0x30
   9662c:	54fff9a1 	b.ne	96560 <CUSBMouseDevice::DecodeReport()+0xa0>  // b.any
   96630:	910043e4 	add	x4, sp, #0x10
   96634:	52800021 	mov	w1, #0x1                   	// #1
   96638:	b8265881 	str	w1, [x4, w6, uxtw #2]
   9663c:	0b0100c6 	add	w6, w6, w1
   96640:	35fff602 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   96644:	17ffffc8 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   96648:	910043e4 	add	x4, sp, #0x10
   9664c:	52800041 	mov	w1, #0x2                   	// #2
   96650:	b8265881 	str	w1, [x4, w6, uxtw #2]
   96654:	110004c6 	add	w6, w6, #0x1
   96658:	35fff542 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   9665c:	17ffffc2 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   96660:	3607f80a 	tbz	w10, #0, 96560 <CUSBMouseDevice::DecodeReport()+0xa0>
   96664:	7101d03f 	cmp	w1, #0x74
   96668:	54000081 	b.ne	96678 <CUSBMouseDevice::DecodeReport()+0x1b8>  // b.any
   9666c:	2a0303ee 	mov	w14, w3
   96670:	35fff482 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   96674:	17ffffbc 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   96678:	5400030d 	b.le	966d8 <CUSBMouseDevice::DecodeReport()+0x218>
   9667c:	7102003f 	cmp	w1, #0x80
   96680:	540000a0 	b.eq	96694 <CUSBMouseDevice::DecodeReport()+0x1d4>  // b.none
   96684:	7102503f 	cmp	w1, #0x94
   96688:	1a8311ef 	csel	w15, w15, w3, ne	// ne = any
   9668c:	35fff3a2 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   96690:	17ffffb5 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   96694:	12000463 	and	w3, w3, #0x3
   96698:	7100087f 	cmp	w3, #0x2
   9669c:	54000300 	b.eq	966fc <CUSBMouseDevice::DecodeReport()+0x23c>  // b.none
   966a0:	1b0f2dcb 	madd	w11, w14, w15, w11
   966a4:	35fff2e2 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   966a8:	17ffffaf 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   966ac:	5280002c 	mov	w12, #0x1                   	// #1
   966b0:	35fff282 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   966b4:	17ffffac 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   966b8:	6b0d007f 	cmp	w3, w13
   966bc:	1a9f17ea 	cset	w10, eq	// eq = none
   966c0:	35fff202 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   966c4:	17ffffa8 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   966c8:	710001bf 	cmp	w13, #0x0
   966cc:	1a83114a 	csel	w10, w10, w3, ne	// ne = any
   966d0:	35fff182 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   966d4:	17ffffa4 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   966d8:	7100103f 	cmp	w1, #0x4
   966dc:	54000741 	b.ne	967c4 <CUSBMouseDevice::DecodeReport()+0x304>  // b.any
   966e0:	7100247f 	cmp	w3, #0x9
   966e4:	54fff3e1 	b.ne	96560 <CUSBMouseDevice::DecodeReport()+0xa0>  // b.any
   966e8:	910043e4 	add	x4, sp, #0x10
   966ec:	b826589f 	str	wzr, [x4, w6, uxtw #2]
   966f0:	110004c6 	add	w6, w6, #0x1
   966f4:	35fff062 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   966f8:	17ffff9b 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   966fc:	71000cdf 	cmp	w6, #0x3
   96700:	54000568 	b.hi	967ac <CUSBMouseDevice::DecodeReport()+0x2ec>  // b.pmore
   96704:	2a0b03e5 	mov	w5, w11
   96708:	910043e4 	add	x4, sp, #0x10
   9670c:	d2800021 	mov	x1, #0x1                   	// #1
   96710:	35000166 	cbnz	w6, 9673c <CUSBMouseDevice::DecodeReport()+0x27c>
   96714:	1400001a 	b	9677c <CUSBMouseDevice::DecodeReport()+0x2bc>
   96718:	8b234c07 	add	x7, x0, w3, uxtw #3
   9671c:	7100007f 	cmp	w3, #0x0
   96720:	1a8e01e3 	csel	w3, w15, w14, eq	// eq = none
   96724:	91000430 	add	x16, x1, #0x1
   96728:	eb0100df 	cmp	x6, x1
   9672c:	290c94e3 	stp	w3, w5, [x7, #100]
   96730:	0b0300a5 	add	w5, w5, w3
   96734:	54000240 	b.eq	9677c <CUSBMouseDevice::DecodeReport()+0x2bc>  // b.none
   96738:	aa1003e1 	mov	x1, x16
   9673c:	8b010883 	add	x3, x4, x1, lsl #2
   96740:	b85fc063 	ldur	w3, [x3, #-4]
   96744:	71000c7f 	cmp	w3, #0x3
   96748:	54fffe89 	b.ls	96718 <CUSBMouseDevice::DecodeReport()+0x258>  // b.plast
   9674c:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96750:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96754:	9131a021 	add	x1, x1, #0xc68
   96758:	91326000 	add	x0, x0, #0xc98
   9675c:	52802d22 	mov	w2, #0x169                 	// #361
   96760:	94002de8 	bl	a1f00 <assertion_failed>
   96764:	910043e4 	add	x4, sp, #0x10
   96768:	52800061 	mov	w1, #0x3                   	// #3
   9676c:	b8265881 	str	w1, [x4, w6, uxtw #2]
   96770:	110004c6 	add	w6, w6, #0x1
   96774:	35ffec62 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   96778:	17ffff7b 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>
   9677c:	1b0f2dcb 	madd	w11, w14, w15, w11
   96780:	d2800006 	mov	x6, #0x0                   	// #0
   96784:	17ffffc8 	b	966a4 <CUSBMouseDevice::DecodeReport()+0x1e4>
   96788:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   9678c:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96790:	9131a021 	add	x1, x1, #0xc68
   96794:	911e6000 	add	x0, x0, #0x798
   96798:	52801d62 	mov	w2, #0xeb                  	// #235
   9679c:	94002dd9 	bl	a1f00 <assertion_failed>
   967a0:	52800001 	mov	w1, #0x0                   	// #0
   967a4:	5280000d 	mov	w13, #0x0                   	// #0
   967a8:	17ffff71 	b	9656c <CUSBMouseDevice::DecodeReport()+0xac>
   967ac:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   967b0:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   967b4:	9131a021 	add	x1, x1, #0xc68
   967b8:	9131e000 	add	x0, x0, #0xc78
   967bc:	52802ca2 	mov	w2, #0x165                 	// #357
   967c0:	94002dd0 	bl	a1f00 <assertion_failed>
   967c4:	5280002a 	mov	w10, #0x1                   	// #1
   967c8:	35ffe9c2 	cbnz	w2, 96500 <CUSBMouseDevice::DecodeReport()+0x40>
   967cc:	17ffff66 	b	96564 <CUSBMouseDevice::DecodeReport()+0xa4>

00000000000967d0 <CUSBMouseDevice::Configure()>:
   967d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   967d4:	52800421 	mov	w1, #0x21                  	// #33
   967d8:	910003fd 	mov	x29, sp
   967dc:	a90153f3 	stp	x19, x20, [sp, #16]
   967e0:	aa0003f3 	mov	x19, x0
   967e4:	97ffe7af 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   967e8:	b40000c0 	cbz	x0, 96800 <CUSBMouseDevice::Configure()+0x30>
   967ec:	39401c01 	ldrb	w1, [x0, #7]
   967f0:	aa0003f4 	mov	x20, x0
   967f4:	39402000 	ldrb	w0, [x0, #8]
   967f8:	2a002020 	orr	w0, w1, w0, lsl #8
   967fc:	35000120 	cbnz	w0, 96820 <CUSBMouseDevice::Configure()+0x50>
   96800:	aa1303e0 	mov	x0, x19
   96804:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96808:	9108e021 	add	x1, x1, #0x238
   9680c:	97ffe7b1 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   96810:	a94153f3 	ldp	x19, x20, [sp, #16]
   96814:	52800000 	mov	w0, #0x0                   	// #0
   96818:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9681c:	d65f03c0 	ret
   96820:	a9025bf5 	stp	x21, x22, [sp, #32]
   96824:	a90363f7 	stp	x23, x24, [sp, #48]
   96828:	7900b260 	strh	w0, [x19, #88]
   9682c:	92403c00 	and	x0, x0, #0xffff
   96830:	940054c8 	bl	abb50 <operator new[](unsigned long)>
   96834:	f9002a60 	str	x0, [x19, #80]
   96838:	aa1303e0 	mov	x0, x19
   9683c:	97ffe78d 	bl	90670 <CUSBFunction::GetHost() const>
   96840:	aa0003f5 	mov	x21, x0
   96844:	aa1303e0 	mov	x0, x19
   96848:	97ffe77e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9684c:	f9402a77 	ldr	x23, [x19, #80]
   96850:	aa0003f6 	mov	x22, x0
   96854:	39401a94 	ldrb	w20, [x20, #6]
   96858:	aa1303e0 	mov	x0, x19
   9685c:	7940b278 	ldrh	w24, [x19, #88]
   96860:	97ffe7e8 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   96864:	aa1603e1 	mov	x1, x22
   96868:	12001c07 	and	w7, w0, #0xff
   9686c:	2a1803e5 	mov	w5, w24
   96870:	aa1703e4 	mov	x4, x23
   96874:	2a1403e2 	mov	w2, w20
   96878:	aa1503e0 	mov	x0, x21
   9687c:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   96880:	52800003 	mov	w3, #0x0                   	// #0
   96884:	97fff5cb 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   96888:	7940b261 	ldrh	w1, [x19, #88]
   9688c:	6b01001f 	cmp	w0, w1
   96890:	540001c0 	b.eq	968c8 <CUSBMouseDevice::Configure()+0xf8>  // b.none
   96894:	940034d7 	bl	a3bf0 <CLogger::Get()>
   96898:	d00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   9689c:	9107a063 	add	x3, x3, #0x1e8
   968a0:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   968a4:	9108e021 	add	x1, x1, #0x238
   968a8:	52800022 	mov	w2, #0x1                   	// #1
   968ac:	940036c5 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   968b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   968b4:	52800000 	mov	w0, #0x0                   	// #0
   968b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   968bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   968c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   968c4:	d65f03c0 	ret
   968c8:	aa1303e0 	mov	x0, x19
   968cc:	97fffefd 	bl	964c0 <CUSBMouseDevice::DecodeReport()>
   968d0:	b9406261 	ldr	w1, [x19, #96]
   968d4:	350000e1 	cbnz	w1, 968f0 <CUSBMouseDevice::Configure()+0x120>
   968d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   968dc:	52800000 	mov	w0, #0x0                   	// #0
   968e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   968e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   968e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   968ec:	d65f03c0 	ret
   968f0:	aa1303e0 	mov	x0, x19
   968f4:	97fff327 	bl	93590 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   968f8:	36000200 	tbz	w0, #0, 96938 <CUSBMouseDevice::Configure()+0x168>
   968fc:	d2800a00 	mov	x0, #0x50                  	// #80
   96900:	9400548c 	bl	abb30 <operator new(unsigned long)>
   96904:	b9407e62 	ldr	w2, [x19, #124]
   96908:	aa0003f4 	mov	x20, x0
   9690c:	b9406661 	ldr	w1, [x19, #100]
   96910:	7100005f 	cmp	w2, #0x0
   96914:	1a9f07e2 	cset	w2, ne	// ne = any
   96918:	940028ba 	bl	a0c00 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   9691c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96920:	aa1303e0 	mov	x0, x19
   96924:	a94363f7 	ldp	x23, x24, [sp, #48]
   96928:	f9002674 	str	x20, [x19, #72]
   9692c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96930:	a8c47bfd 	ldp	x29, x30, [sp], #64
   96934:	17fff447 	b	93a50 <CUSBHIDDevice::StartRequest()>
   96938:	940034ae 	bl	a3bf0 <CLogger::Get()>
   9693c:	d00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   96940:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96944:	912c0063 	add	x3, x3, #0xb00
   96948:	17ffffd7 	b	968a4 <CUSBMouseDevice::Configure()+0xd4>
   9694c:	00000000 	udf	#0

0000000000096950 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   96950:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96954:	f0000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   96958:	912d2021 	add	x1, x1, #0xb48
   9695c:	910003fd 	mov	x29, sp
   96960:	a90153f3 	stp	x19, x20, [sp, #16]
   96964:	aa0003f3 	mov	x19, x0
   96968:	b9404000 	ldr	w0, [x0, #64]
   9696c:	f9000261 	str	x1, [x19]
   96970:	350002a0 	cbnz	w0, 969c4 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x74>
   96974:	f9401e74 	ldr	x20, [x19, #56]
   96978:	b40000d4 	cbz	x20, 96990 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x40>
   9697c:	aa1403e0 	mov	x0, x20
   96980:	97ffe598 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   96984:	aa1403e0 	mov	x0, x20
   96988:	d2800401 	mov	x1, #0x20                  	// #32
   9698c:	94005489 	bl	abbb0 <operator delete(void*, unsigned long)>
   96990:	f9401a74 	ldr	x20, [x19, #48]
   96994:	f9001e7f 	str	xzr, [x19, #56]
   96998:	b40000d4 	cbz	x20, 969b0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x60>
   9699c:	aa1403e0 	mov	x0, x20
   969a0:	97ffe590 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   969a4:	aa1403e0 	mov	x0, x20
   969a8:	d2800401 	mov	x1, #0x20                  	// #32
   969ac:	94005481 	bl	abbb0 <operator delete(void*, unsigned long)>
   969b0:	f9001a7f 	str	xzr, [x19, #48]
   969b4:	aa1303e0 	mov	x0, x19
   969b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   969bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   969c0:	17ffe60c 	b	901f0 <CUSBFunction::~CUSBFunction()>
   969c4:	9400313b 	bl	a2eb0 <CDeviceNameService::Get()>
   969c8:	b9404262 	ldr	w2, [x19, #64]
   969cc:	52800003 	mov	w3, #0x0                   	// #0
   969d0:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   969d4:	91090021 	add	x1, x1, #0x240
   969d8:	94003166 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   969dc:	b9404261 	ldr	w1, [x19, #64]
   969e0:	900001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   969e4:	912fc000 	add	x0, x0, #0xbf0
   969e8:	9400561a 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   969ec:	17ffffe2 	b	96974 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x24>

00000000000969f0 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   969f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   969f4:	910003fd 	mov	x29, sp
   969f8:	f9000bf3 	str	x19, [sp, #16]
   969fc:	aa0003f3 	mov	x19, x0
   96a00:	97ffffd4 	bl	96950 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   96a04:	aa1303e0 	mov	x0, x19
   96a08:	d2800901 	mov	x1, #0x48                  	// #72
   96a0c:	f9400bf3 	ldr	x19, [sp, #16]
   96a10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96a14:	14005467 	b	abbb0 <operator delete(void*, unsigned long)>
   96a18:	d503201f 	nop
   96a1c:	d503201f 	nop

0000000000096a20 <CUSBPrinterDevice::Write(void const*, unsigned long)>:
   96a20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96a24:	910003fd 	mov	x29, sp
   96a28:	a90153f3 	stp	x19, x20, [sp, #16]
   96a2c:	f90013f5 	str	x21, [sp, #32]
   96a30:	b4000241 	cbz	x1, 96a78 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x58>
   96a34:	aa0203f3 	mov	x19, x2
   96a38:	b40002c2 	cbz	x2, 96a90 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x70>
   96a3c:	aa0103f4 	mov	x20, x1
   96a40:	aa0003f5 	mov	x21, x0
   96a44:	97ffe70b 	bl	90670 <CUSBFunction::GetHost() const>
   96a48:	b4000300 	cbz	x0, 96aa8 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x88>
   96a4c:	f9401ea1 	ldr	x1, [x21, #56]
   96a50:	aa1403e2 	mov	x2, x20
   96a54:	2a1303e3 	mov	w3, w19
   96a58:	52800004 	mov	w4, #0x0                   	// #0
   96a5c:	97fff589 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   96a60:	7100001f 	cmp	w0, #0x0
   96a64:	f94013f5 	ldr	x21, [sp, #32]
   96a68:	5a9fa260 	csinv	w0, w19, wzr, ge	// ge = tcont
   96a6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96a70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96a74:	d65f03c0 	ret
   96a78:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96a7c:	900000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   96a80:	9132c021 	add	x1, x1, #0xcb0
   96a84:	91384000 	add	x0, x0, #0xe10
   96a88:	52801102 	mov	w2, #0x88                  	// #136
   96a8c:	94002d1d 	bl	a1f00 <assertion_failed>
   96a90:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96a94:	900000e0 	adrp	x0, b2000 <SErrorStub+0xc>
   96a98:	9132c021 	add	x1, x1, #0xcb0
   96a9c:	91376000 	add	x0, x0, #0xdd8
   96aa0:	52801122 	mov	w2, #0x89                  	// #137
   96aa4:	94002d17 	bl	a1f00 <assertion_failed>
   96aa8:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96aac:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96ab0:	9132c021 	add	x1, x1, #0xcb0
   96ab4:	91330000 	add	x0, x0, #0xcc0
   96ab8:	52801182 	mov	w2, #0x8c                  	// #140
   96abc:	94002d11 	bl	a1f00 <assertion_failed>

0000000000096ac0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   96ac0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96ac4:	910003fd 	mov	x29, sp
   96ac8:	f9000bf3 	str	x19, [sp, #16]
   96acc:	aa0003f3 	mov	x19, x0
   96ad0:	97ffe66c 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   96ad4:	f0000180 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   96ad8:	912d2000 	add	x0, x0, #0xb48
   96adc:	f9000260 	str	x0, [x19]
   96ae0:	b9002a7f 	str	wzr, [x19, #40]
   96ae4:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   96ae8:	b900427f 	str	wzr, [x19, #64]
   96aec:	f9400bf3 	ldr	x19, [sp, #16]
   96af0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96af4:	d65f03c0 	ret
   96af8:	d503201f 	nop
   96afc:	d503201f 	nop

0000000000096b00 <CUSBPrinterDevice::Configure()>:
   96b00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96b04:	910003fd 	mov	x29, sp
   96b08:	a90153f3 	stp	x19, x20, [sp, #16]
   96b0c:	aa0003f4 	mov	x20, x0
   96b10:	97ffe760 	bl	90890 <CUSBFunction::GetInterfaceProtocol() const>
   96b14:	72001c00 	ands	w0, w0, #0xff
   96b18:	321e73e1 	mov	w1, #0x7ffffffc            	// #2147483644
   96b1c:	b9002a80 	str	w0, [x20, #40]
   96b20:	51000c00 	sub	w0, w0, #0x3
   96b24:	7a411000 	ccmp	w0, w1, #0x0, ne	// ne = any
   96b28:	54000869 	b.ls	96c34 <CUSBPrinterDevice::Configure()+0x134>  // b.plast
   96b2c:	aa1403e0 	mov	x0, x20
   96b30:	97ffe6ac 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   96b34:	b9402a81 	ldr	w1, [x20, #40]
   96b38:	7100043f 	cmp	w1, #0x1
   96b3c:	1a9f07e1 	cset	w1, ne	// ne = any
   96b40:	11000421 	add	w1, w1, #0x1
   96b44:	6b20003f 	cmp	w1, w0, uxtb
   96b48:	54000bcc 	b.gt	96cc0 <CUSBPrinterDevice::Configure()+0x1c0>
   96b4c:	f90013f5 	str	x21, [sp, #32]
   96b50:	14000005 	b	96b64 <CUSBPrinterDevice::Configure()+0x64>
   96b54:	39400e61 	ldrb	w1, [x19, #3]
   96b58:	12001421 	and	w1, w1, #0x3f
   96b5c:	7100083f 	cmp	w1, #0x2
   96b60:	540004c0 	b.eq	96bf8 <CUSBPrinterDevice::Configure()+0xf8>  // b.none
   96b64:	aa1403e0 	mov	x0, x20
   96b68:	528000a1 	mov	w1, #0x5                   	// #5
   96b6c:	97ffe6cd 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   96b70:	aa0003f3 	mov	x19, x0
   96b74:	b5ffff00 	cbnz	x0, 96b54 <CUSBPrinterDevice::Configure()+0x54>
   96b78:	f9401e80 	ldr	x0, [x20, #56]
   96b7c:	b4000780 	cbz	x0, 96c6c <CUSBPrinterDevice::Configure()+0x16c>
   96b80:	b9402a80 	ldr	w0, [x20, #40]
   96b84:	7100041f 	cmp	w0, #0x1
   96b88:	54000060 	b.eq	96b94 <CUSBPrinterDevice::Configure()+0x94>  // b.none
   96b8c:	f9401a80 	ldr	x0, [x20, #48]
   96b90:	b40006e0 	cbz	x0, 96c6c <CUSBPrinterDevice::Configure()+0x16c>
   96b94:	aa1403e0 	mov	x0, x20
   96b98:	97ffe5ce 	bl	902d0 <CUSBFunction::Configure()>
   96b9c:	12001c13 	and	w19, w0, #0xff
   96ba0:	360009e0 	tbz	w0, #0, 96cdc <CUSBPrinterDevice::Configure()+0x1dc>
   96ba4:	b9404280 	ldr	w0, [x20, #64]
   96ba8:	35000b00 	cbnz	w0, 96d08 <CUSBPrinterDevice::Configure()+0x208>
   96bac:	d0000115 	adrp	x21, b8000 <FromUmsd+0x60>
   96bb0:	910902b5 	add	x21, x21, #0x240
   96bb4:	910022a2 	add	x2, x21, #0x8
   96bb8:	52800021 	mov	w1, #0x1                   	// #1
   96bbc:	900001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   96bc0:	912fc000 	add	x0, x0, #0xbf0
   96bc4:	94005573 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   96bc8:	b9004280 	str	w0, [x20, #64]
   96bcc:	940030b9 	bl	a2eb0 <CDeviceNameService::Get()>
   96bd0:	b9404282 	ldr	w2, [x20, #64]
   96bd4:	aa1503e1 	mov	x1, x21
   96bd8:	aa1403e3 	mov	x3, x20
   96bdc:	52800004 	mov	w4, #0x0                   	// #0
   96be0:	940030c0 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   96be4:	f94013f5 	ldr	x21, [sp, #32]
   96be8:	2a1303e0 	mov	w0, w19
   96bec:	a94153f3 	ldp	x19, x20, [sp, #16]
   96bf0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96bf4:	d65f03c0 	ret
   96bf8:	39c00a60 	ldrsb	w0, [x19, #2]
   96bfc:	37f80480 	tbnz	w0, #31, 96c8c <CUSBPrinterDevice::Configure()+0x18c>
   96c00:	f9401e80 	ldr	x0, [x20, #56]
   96c04:	b5000340 	cbnz	x0, 96c6c <CUSBPrinterDevice::Configure()+0x16c>
   96c08:	d2800400 	mov	x0, #0x20                  	// #32
   96c0c:	940053c9 	bl	abb30 <operator new(unsigned long)>
   96c10:	aa0003f5 	mov	x21, x0
   96c14:	aa1403e0 	mov	x0, x20
   96c18:	97ffe67e 	bl	90610 <CUSBFunction::GetDevice() const>
   96c1c:	aa0003e1 	mov	x1, x0
   96c20:	aa1303e2 	mov	x2, x19
   96c24:	aa1503e0 	mov	x0, x21
   96c28:	97ffe462 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   96c2c:	f9001e95 	str	x21, [x20, #56]
   96c30:	17ffffcd 	b	96b64 <CUSBPrinterDevice::Configure()+0x64>
   96c34:	940033ef 	bl	a3bf0 <CLogger::Get()>
   96c38:	52800013 	mov	w19, #0x0                   	// #0
   96c3c:	b9402a84 	ldr	w4, [x20, #40]
   96c40:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96c44:	91090021 	add	x1, x1, #0x240
   96c48:	d00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   96c4c:	91002021 	add	x1, x1, #0x8
   96c50:	91334063 	add	x3, x3, #0xcd0
   96c54:	52800022 	mov	w2, #0x1                   	// #1
   96c58:	940035da 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96c5c:	2a1303e0 	mov	w0, w19
   96c60:	a94153f3 	ldp	x19, x20, [sp, #16]
   96c64:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96c68:	d65f03c0 	ret
   96c6c:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96c70:	91090021 	add	x1, x1, #0x240
   96c74:	aa1403e0 	mov	x0, x20
   96c78:	91002021 	add	x1, x1, #0x8
   96c7c:	52800013 	mov	w19, #0x0                   	// #0
   96c80:	97ffe694 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   96c84:	f94013f5 	ldr	x21, [sp, #32]
   96c88:	17fffff5 	b	96c5c <CUSBPrinterDevice::Configure()+0x15c>
   96c8c:	f9401a80 	ldr	x0, [x20, #48]
   96c90:	b5fffee0 	cbnz	x0, 96c6c <CUSBPrinterDevice::Configure()+0x16c>
   96c94:	d2800400 	mov	x0, #0x20                  	// #32
   96c98:	940053a6 	bl	abb30 <operator new(unsigned long)>
   96c9c:	aa0003f5 	mov	x21, x0
   96ca0:	aa1403e0 	mov	x0, x20
   96ca4:	97ffe65b 	bl	90610 <CUSBFunction::GetDevice() const>
   96ca8:	aa0003e1 	mov	x1, x0
   96cac:	aa1303e2 	mov	x2, x19
   96cb0:	aa1503e0 	mov	x0, x21
   96cb4:	97ffe43f 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   96cb8:	f9001a95 	str	x21, [x20, #48]
   96cbc:	17ffffaa 	b	96b64 <CUSBPrinterDevice::Configure()+0x64>
   96cc0:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96cc4:	91090021 	add	x1, x1, #0x240
   96cc8:	aa1403e0 	mov	x0, x20
   96ccc:	91002021 	add	x1, x1, #0x8
   96cd0:	52800013 	mov	w19, #0x0                   	// #0
   96cd4:	97ffe67f 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   96cd8:	17ffffe1 	b	96c5c <CUSBPrinterDevice::Configure()+0x15c>
   96cdc:	940033c5 	bl	a3bf0 <CLogger::Get()>
   96ce0:	52800013 	mov	w19, #0x0                   	// #0
   96ce4:	d0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   96ce8:	91090021 	add	x1, x1, #0x240
   96cec:	91002021 	add	x1, x1, #0x8
   96cf0:	d00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   96cf4:	52800022 	mov	w2, #0x1                   	// #1
   96cf8:	91182063 	add	x3, x3, #0x608
   96cfc:	940035b1 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96d00:	f94013f5 	ldr	x21, [sp, #32]
   96d04:	17ffffd6 	b	96c5c <CUSBPrinterDevice::Configure()+0x15c>
   96d08:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96d0c:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96d10:	9132c021 	add	x1, x1, #0xcb0
   96d14:	9133c000 	add	x0, x0, #0xcf0
   96d18:	52800fc2 	mov	w2, #0x7e                  	// #126
   96d1c:	94002c79 	bl	a1f00 <assertion_failed>

0000000000096d20 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE>:
   96d20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96d24:	528007e2 	mov	w2, #0x3f                  	// #63
   96d28:	52800021 	mov	w1, #0x1                   	// #1
   96d2c:	910003fd 	mov	x29, sp
   96d30:	f9000bf3 	str	x19, [sp, #16]
   96d34:	900001b3 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   96d38:	912fc273 	add	x19, x19, #0xbf0
   96d3c:	aa1303e0 	mov	x0, x19
   96d40:	940054f8 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   96d44:	aa1303e1 	mov	x1, x19
   96d48:	900001a2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   96d4c:	91336042 	add	x2, x2, #0xcd8
   96d50:	f9400bf3 	ldr	x19, [sp, #16]
   96d54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96d58:	900001a0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   96d5c:	f945a400 	ldr	x0, [x0, #2888]
   96d60:	14004b18 	b	a99c0 <__cxa_atexit>
	...

0000000000096d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   96d70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96d74:	910003fd 	mov	x29, sp
   96d78:	b0000105 	adrp	x5, b7000 <_etext+0x49c8>
   96d7c:	fd412ca0 	ldr	d0, [x5, #600]
   96d80:	a9001001 	stp	x1, x4, [x0]
   96d84:	f9000802 	str	x2, [x0, #16]
   96d88:	29037c03 	stp	w3, wzr, [x0, #24]
   96d8c:	b900281f 	str	wzr, [x0, #40]
   96d90:	a9077c1f 	stp	xzr, xzr, [x0, #112]
   96d94:	f900401f 	str	xzr, [x0, #128]
   96d98:	3902201f 	strb	wzr, [x0, #136]
   96d9c:	fd001000 	str	d0, [x0, #32]
   96da0:	b40000c1 	cbz	x1, 96db8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
   96da4:	7100007f 	cmp	w3, #0x0
   96da8:	fa401840 	ccmp	x2, #0x0, #0x0, ne	// ne = any
   96dac:	54000120 	b.eq	96dd0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x60>  // b.none
   96db0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   96db4:	d65f03c0 	ret
   96db8:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96dbc:	b00000e0 	adrp	x0, b3000 <_etext+0x9c8>
   96dc0:	91342021 	add	x1, x1, #0xd08
   96dc4:	912b2000 	add	x0, x0, #0xac8
   96dc8:	528004a2 	mov	w2, #0x25                  	// #37
   96dcc:	94002c4d 	bl	a1f00 <assertion_failed>
   96dd0:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96dd4:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96dd8:	91342021 	add	x1, x1, #0xd08
   96ddc:	91346000 	add	x0, x0, #0xd18
   96de0:	528004c2 	mov	w2, #0x26                  	// #38
   96de4:	94002c47 	bl	a1f00 <assertion_failed>
   96de8:	d503201f 	nop
   96dec:	d503201f 	nop

0000000000096df0 <CUSBRequest::~CUSBRequest()>:
   96df0:	d65f03c0 	ret
   96df4:	d503201f 	nop
   96df8:	d503201f 	nop
   96dfc:	d503201f 	nop

0000000000096e00 <CUSBRequest::GetEndpoint() const>:
   96e00:	f9400000 	ldr	x0, [x0]
   96e04:	b4000040 	cbz	x0, 96e0c <CUSBRequest::GetEndpoint() const+0xc>
   96e08:	d65f03c0 	ret
   96e0c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96e10:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96e14:	b00000e0 	adrp	x0, b3000 <_etext+0x9c8>
   96e18:	910003fd 	mov	x29, sp
   96e1c:	91342021 	add	x1, x1, #0xd08
   96e20:	912b2000 	add	x0, x0, #0xac8
   96e24:	52800662 	mov	w2, #0x33                  	// #51
   96e28:	94002c36 	bl	a1f00 <assertion_failed>
   96e2c:	d503201f 	nop

0000000000096e30 <CUSBRequest::SetStatus(int)>:
   96e30:	b9001c01 	str	w1, [x0, #28]
   96e34:	d65f03c0 	ret
   96e38:	d503201f 	nop
   96e3c:	d503201f 	nop

0000000000096e40 <CUSBRequest::SetResultLen(unsigned int)>:
   96e40:	b9002001 	str	w1, [x0, #32]
   96e44:	d65f03c0 	ret
   96e48:	d503201f 	nop
   96e4c:	d503201f 	nop

0000000000096e50 <CUSBRequest::SetUSBError(TUSBError)>:
   96e50:	b9002401 	str	w1, [x0, #36]
   96e54:	d65f03c0 	ret
   96e58:	d503201f 	nop
   96e5c:	d503201f 	nop

0000000000096e60 <CUSBRequest::GetStatus() const>:
   96e60:	b9401c00 	ldr	w0, [x0, #28]
   96e64:	d65f03c0 	ret
   96e68:	d503201f 	nop
   96e6c:	d503201f 	nop

0000000000096e70 <CUSBRequest::GetResultLength() const>:
   96e70:	b9401c01 	ldr	w1, [x0, #28]
   96e74:	34000061 	cbz	w1, 96e80 <CUSBRequest::GetResultLength() const+0x10>
   96e78:	b9402000 	ldr	w0, [x0, #32]
   96e7c:	d65f03c0 	ret
   96e80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96e84:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96e88:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96e8c:	910003fd 	mov	x29, sp
   96e90:	91342021 	add	x1, x1, #0xd08
   96e94:	91350000 	add	x0, x0, #0xd40
   96e98:	528009a2 	mov	w2, #0x4d                  	// #77
   96e9c:	94002c19 	bl	a1f00 <assertion_failed>

0000000000096ea0 <CUSBRequest::GetUSBError() const>:
   96ea0:	b9401c01 	ldr	w1, [x0, #28]
   96ea4:	35000061 	cbnz	w1, 96eb0 <CUSBRequest::GetUSBError() const+0x10>
   96ea8:	b9402400 	ldr	w0, [x0, #36]
   96eac:	d65f03c0 	ret
   96eb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96eb4:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96eb8:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96ebc:	910003fd 	mov	x29, sp
   96ec0:	91342021 	add	x1, x1, #0xd08
   96ec4:	91354000 	add	x0, x0, #0xd50
   96ec8:	52800a82 	mov	w2, #0x54                  	// #84
   96ecc:	94002c0d 	bl	a1f00 <assertion_failed>

0000000000096ed0 <CUSBRequest::GetSetupData()>:
   96ed0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96ed4:	910003fd 	mov	x29, sp
   96ed8:	f9000bf3 	str	x19, [sp, #16]
   96edc:	aa0003f3 	mov	x19, x0
   96ee0:	f9400000 	ldr	x0, [x0]
   96ee4:	97ffe453 	bl	90030 <CUSBEndpoint::GetType() const>
   96ee8:	350000c0 	cbnz	w0, 96f00 <CUSBRequest::GetSetupData()+0x30>
   96eec:	f9400660 	ldr	x0, [x19, #8]
   96ef0:	b4000140 	cbz	x0, 96f18 <CUSBRequest::GetSetupData()+0x48>
   96ef4:	f9400bf3 	ldr	x19, [sp, #16]
   96ef8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96efc:	d65f03c0 	ret
   96f00:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96f04:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96f08:	91342021 	add	x1, x1, #0xd08
   96f0c:	91358000 	add	x0, x0, #0xd60
   96f10:	52800b62 	mov	w2, #0x5b                  	// #91
   96f14:	94002bfb 	bl	a1f00 <assertion_failed>
   96f18:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96f1c:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96f20:	91342021 	add	x1, x1, #0xd08
   96f24:	91364000 	add	x0, x0, #0xd90
   96f28:	52800b82 	mov	w2, #0x5c                  	// #92
   96f2c:	94002bf5 	bl	a1f00 <assertion_failed>

0000000000096f30 <CUSBRequest::GetBuffer()>:
   96f30:	aa0003e1 	mov	x1, x0
   96f34:	f9400800 	ldr	x0, [x0, #16]
   96f38:	b4000040 	cbz	x0, 96f40 <CUSBRequest::GetBuffer()+0x10>
   96f3c:	d65f03c0 	ret
   96f40:	b9401821 	ldr	w1, [x1, #24]
   96f44:	34ffffc1 	cbz	w1, 96f3c <CUSBRequest::GetBuffer()+0xc>
   96f48:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96f4c:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96f50:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96f54:	910003fd 	mov	x29, sp
   96f58:	91342021 	add	x1, x1, #0xd08
   96f5c:	91346000 	add	x0, x0, #0xd18
   96f60:	52800c62 	mov	w2, #0x63                  	// #99
   96f64:	94002be7 	bl	a1f00 <assertion_failed>
   96f68:	d503201f 	nop
   96f6c:	d503201f 	nop

0000000000096f70 <CUSBRequest::GetBufLen() const>:
   96f70:	b9401800 	ldr	w0, [x0, #24]
   96f74:	d65f03c0 	ret
   96f78:	d503201f 	nop
   96f7c:	d503201f 	nop

0000000000096f80 <CUSBRequest::AddIsoPacket(unsigned short)>:
   96f80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96f84:	910003fd 	mov	x29, sp
   96f88:	b9402802 	ldr	w2, [x0, #40]
   96f8c:	71007c5f 	cmp	w2, #0x1f
   96f90:	54000188 	b.hi	96fc0 <CUSBRequest::AddIsoPacket(unsigned short)+0x40>  // b.pmore
   96f94:	12003c21 	and	w1, w1, #0xffff
   96f98:	34000201 	cbz	w1, 96fd8 <CUSBRequest::AddIsoPacket(unsigned short)+0x58>
   96f9c:	b9401803 	ldr	w3, [x0, #24]
   96fa0:	6b03003f 	cmp	w1, w3
   96fa4:	54000268 	b.hi	96ff0 <CUSBRequest::AddIsoPacket(unsigned short)+0x70>  // b.pmore
   96fa8:	8b224403 	add	x3, x0, w2, uxtw #1
   96fac:	11000442 	add	w2, w2, #0x1
   96fb0:	b9002802 	str	w2, [x0, #40]
   96fb4:	79005861 	strh	w1, [x3, #44]
   96fb8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   96fbc:	d65f03c0 	ret
   96fc0:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96fc4:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96fc8:	91342021 	add	x1, x1, #0xd08
   96fcc:	9136a000 	add	x0, x0, #0xda8
   96fd0:	52800e02 	mov	w2, #0x70                  	// #112
   96fd4:	94002bcb 	bl	a1f00 <assertion_failed>
   96fd8:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96fdc:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96fe0:	91342021 	add	x1, x1, #0xd08
   96fe4:	91374000 	add	x0, x0, #0xdd0
   96fe8:	52800e22 	mov	w2, #0x71                  	// #113
   96fec:	94002bc5 	bl	a1f00 <assertion_failed>
   96ff0:	d00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   96ff4:	d00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   96ff8:	91342021 	add	x1, x1, #0xd08
   96ffc:	9137a000 	add	x0, x0, #0xde8
   97000:	52800e42 	mov	w2, #0x72                  	// #114
   97004:	94002bbf 	bl	a1f00 <assertion_failed>
   97008:	d503201f 	nop
   9700c:	d503201f 	nop

0000000000097010 <CUSBRequest::GetNumIsoPackets() const>:
   97010:	b9402800 	ldr	w0, [x0, #40]
   97014:	34000040 	cbz	w0, 9701c <CUSBRequest::GetNumIsoPackets() const+0xc>
   97018:	d65f03c0 	ret
   9701c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97020:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97024:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97028:	910003fd 	mov	x29, sp
   9702c:	91342021 	add	x1, x1, #0xd08
   97030:	91382000 	add	x0, x0, #0xe08
   97034:	52800f22 	mov	w2, #0x79                  	// #121
   97038:	94002bb2 	bl	a1f00 <assertion_failed>
   9703c:	d503201f 	nop

0000000000097040 <CUSBRequest::GetIsoPacketSize(unsigned int) const>:
   97040:	b9402802 	ldr	w2, [x0, #40]
   97044:	6b01005f 	cmp	w2, w1
   97048:	54000089 	b.ls	97058 <CUSBRequest::GetIsoPacketSize(unsigned int) const+0x18>  // b.plast
   9704c:	8b214401 	add	x1, x0, w1, uxtw #1
   97050:	79405820 	ldrh	w0, [x1, #44]
   97054:	d65f03c0 	ret
   97058:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9705c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97060:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97064:	910003fd 	mov	x29, sp
   97068:	91342021 	add	x1, x1, #0xd08
   9706c:	91388000 	add	x0, x0, #0xe20
   97070:	52801002 	mov	w2, #0x80                  	// #128
   97074:	94002ba3 	bl	a1f00 <assertion_failed>
   97078:	d503201f 	nop
   9707c:	d503201f 	nop

0000000000097080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   97080:	a9070801 	stp	x1, x2, [x0, #112]
   97084:	f9004003 	str	x3, [x0, #128]
   97088:	b4000041 	cbz	x1, 97090 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x10>
   9708c:	d65f03c0 	ret
   97090:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97094:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97098:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   9709c:	910003fd 	mov	x29, sp
   970a0:	91342021 	add	x1, x1, #0xd08
   970a4:	91390000 	add	x0, x0, #0xe40
   970a8:	52801162 	mov	w2, #0x8b                  	// #139
   970ac:	94002b95 	bl	a1f00 <assertion_failed>

00000000000970b0 <CUSBRequest::CallCompletionRoutine()>:
   970b0:	f9403803 	ldr	x3, [x0, #112]
   970b4:	b4000083 	cbz	x3, 970c4 <CUSBRequest::CallCompletionRoutine()+0x14>
   970b8:	a9478801 	ldp	x1, x2, [x0, #120]
   970bc:	aa0303f0 	mov	x16, x3
   970c0:	d61f0200 	br	x16
   970c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   970c8:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   970cc:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   970d0:	910003fd 	mov	x29, sp
   970d4:	91342021 	add	x1, x1, #0xd08
   970d8:	91390000 	add	x0, x0, #0xe40
   970dc:	52801202 	mov	w2, #0x90                  	// #144
   970e0:	94002b88 	bl	a1f00 <assertion_failed>
   970e4:	d503201f 	nop
   970e8:	d503201f 	nop
   970ec:	d503201f 	nop

00000000000970f0 <CUSBRequest::SetCompleteOnNAK()>:
   970f0:	52800021 	mov	w1, #0x1                   	// #1
   970f4:	39022001 	strb	w1, [x0, #136]
   970f8:	d65f03c0 	ret
   970fc:	d503201f 	nop

0000000000097100 <CUSBRequest::IsCompleteOnNAK() const>:
   97100:	39422000 	ldrb	w0, [x0, #136]
   97104:	d65f03c0 	ret
   97108:	d503201f 	nop
   9710c:	d503201f 	nop

0000000000097110 <CUSBRequest::operator new(unsigned long)>:
   97110:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97114:	f102401f 	cmp	x0, #0x90
   97118:	910003fd 	mov	x29, sp
   9711c:	540000c1 	b.ne	97134 <CUSBRequest::operator new(unsigned long)+0x24>  // b.any
   97120:	f0000180 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   97124:	f9460000 	ldr	x0, [x0, #3072]
   97128:	b4000120 	cbz	x0, 9714c <CUSBRequest::operator new(unsigned long)+0x3c>
   9712c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   97130:	14002cdc 	b	a24a0 <CClassAllocator::Allocate()>
   97134:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97138:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   9713c:	91342021 	add	x1, x1, #0xd08
   97140:	91398000 	add	x0, x0, #0xe60
   97144:	528013e2 	mov	w2, #0x9f                  	// #159
   97148:	94002b6e 	bl	a1f00 <assertion_failed>
   9714c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97150:	900000e0 	adrp	x0, b3000 <_etext+0x9c8>
   97154:	91342021 	add	x1, x1, #0xd08
   97158:	911ca000 	add	x0, x0, #0x728
   9715c:	528013e2 	mov	w2, #0x9f                  	// #159
   97160:	94002b68 	bl	a1f00 <assertion_failed>
   97164:	d503201f 	nop
   97168:	d503201f 	nop
   9716c:	d503201f 	nop

0000000000097170 <CUSBRequest::operator delete(void*, unsigned long)>:
   97170:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97174:	f102403f 	cmp	x1, #0x90
   97178:	910003fd 	mov	x29, sp
   9717c:	54000101 	b.ne	9719c <CUSBRequest::operator delete(void*, unsigned long)+0x2c>  // b.any
   97180:	aa0003e2 	mov	x2, x0
   97184:	f0000180 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   97188:	f9460000 	ldr	x0, [x0, #3072]
   9718c:	b4000140 	cbz	x0, 971b4 <CUSBRequest::operator delete(void*, unsigned long)+0x44>
   97190:	a8c17bfd 	ldp	x29, x30, [sp], #16
   97194:	aa0203e1 	mov	x1, x2
   97198:	14002cf6 	b	a2570 <CClassAllocator::Free(void*)>
   9719c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   971a0:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   971a4:	91342021 	add	x1, x1, #0xd08
   971a8:	91398000 	add	x0, x0, #0xe60
   971ac:	528013e2 	mov	w2, #0x9f                  	// #159
   971b0:	94002b54 	bl	a1f00 <assertion_failed>
   971b4:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   971b8:	900000e0 	adrp	x0, b3000 <_etext+0x9c8>
   971bc:	91342021 	add	x1, x1, #0xd08
   971c0:	911ca000 	add	x0, x0, #0x728
   971c4:	528013e2 	mov	w2, #0x9f                  	// #159
   971c8:	94002b4e 	bl	a1f00 <assertion_failed>
   971cc:	d503201f 	nop

00000000000971d0 <CUSBRequest::InitAllocator(unsigned int)>:
   971d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   971d4:	910003fd 	mov	x29, sp
   971d8:	a90153f3 	stp	x19, x20, [sp, #16]
   971dc:	f0000194 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   971e0:	f9460281 	ldr	x1, [x20, #3072]
   971e4:	b50001c1 	cbnz	x1, 9721c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   971e8:	2a0003f3 	mov	w19, w0
   971ec:	d2800700 	mov	x0, #0x38                  	// #56
   971f0:	94005250 	bl	abb30 <operator new(unsigned long)>
   971f4:	2a1303e2 	mov	w2, w19
   971f8:	d2801201 	mov	x1, #0x90                  	// #144
   971fc:	aa0003f3 	mov	x19, x0
   97200:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   97204:	913a0063 	add	x3, x3, #0xe80
   97208:	94002c4a 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   9720c:	f9060293 	str	x19, [x20, #3072]
   97210:	a94153f3 	ldp	x19, x20, [sp, #16]
   97214:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97218:	d65f03c0 	ret
   9721c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97220:	900000e0 	adrp	x0, b3000 <_etext+0x9c8>
   97224:	91342021 	add	x1, x1, #0xd08
   97228:	911de000 	add	x0, x0, #0x778
   9722c:	528013e2 	mov	w2, #0x9f                  	// #159
   97230:	94002b34 	bl	a1f00 <assertion_failed>
   97234:	d503201f 	nop
   97238:	d503201f 	nop
   9723c:	d503201f 	nop

0000000000097240 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   97240:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97244:	910003fd 	mov	x29, sp
   97248:	f90013f5 	str	x21, [sp, #32]
   9724c:	f0000195 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   97250:	f94602a3 	ldr	x3, [x21, #3072]
   97254:	a90153f3 	stp	x19, x20, [sp, #16]
   97258:	2a0003f3 	mov	w19, w0
   9725c:	2a0103f4 	mov	w20, w1
   97260:	b4000103 	cbz	x3, 97280 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   97264:	a94153f3 	ldp	x19, x20, [sp, #16]
   97268:	2a0103e2 	mov	w2, w1
   9726c:	f94013f5 	ldr	x21, [sp, #32]
   97270:	2a0003e1 	mov	w1, w0
   97274:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97278:	aa0303e0 	mov	x0, x3
   9727c:	14002c3d 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   97280:	d2800700 	mov	x0, #0x38                  	// #56
   97284:	9400522b 	bl	abb30 <operator new(unsigned long)>
   97288:	2a1403e3 	mov	w3, w20
   9728c:	2a1303e2 	mov	w2, w19
   97290:	d2801201 	mov	x1, #0x90                  	// #144
   97294:	aa0003f3 	mov	x19, x0
   97298:	b00000e4 	adrp	x4, b4000 <_etext+0x19c8>
   9729c:	913a0084 	add	x4, x4, #0xe80
   972a0:	94002c2c 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   972a4:	f90602b3 	str	x19, [x21, #3072]
   972a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   972ac:	f94013f5 	ldr	x21, [sp, #32]
   972b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   972b4:	d65f03c0 	ret
	...

00000000000972c0 <CUSBStandardHub::~CUSBStandardHub()>:
   972c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   972c4:	d0000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   972c8:	912ec021 	add	x1, x1, #0xbb0
   972cc:	910003fd 	mov	x29, sp
   972d0:	f90013f5 	str	x21, [sp, #32]
   972d4:	aa0003f5 	mov	x21, x0
   972d8:	b940d000 	ldr	w0, [x0, #208]
   972dc:	a90153f3 	stp	x19, x20, [sp, #16]
   972e0:	f90002a1 	str	x1, [x21]
   972e4:	350005a0 	cbnz	w0, 97398 <CUSBStandardHub::~CUSBStandardHub()+0xd8>
   972e8:	b94042a0 	ldr	w0, [x21, #64]
   972ec:	34000280 	cbz	w0, 9733c <CUSBStandardHub::~CUSBStandardHub()+0x7c>
   972f0:	910222b3 	add	x19, x21, #0x88
   972f4:	52800014 	mov	w20, #0x0                   	// #0
   972f8:	f9400260 	ldr	x0, [x19]
   972fc:	d2800081 	mov	x1, #0x4                   	// #4
   97300:	b4000040 	cbz	x0, 97308 <CUSBStandardHub::~CUSBStandardHub()+0x48>
   97304:	9400522b 	bl	abbb0 <operator delete(void*, unsigned long)>
   97308:	f85c0261 	ldur	x1, [x19, #-64]
   9730c:	f900027f 	str	xzr, [x19]
   97310:	aa0103e0 	mov	x0, x1
   97314:	b4000081 	cbz	x1, 97324 <CUSBStandardHub::~CUSBStandardHub()+0x64>
   97318:	f9400021 	ldr	x1, [x1]
   9731c:	f9400421 	ldr	x1, [x1, #8]
   97320:	d63f0020 	blr	x1
   97324:	b94042a0 	ldr	w0, [x21, #64]
   97328:	11000694 	add	w20, w20, #0x1
   9732c:	f81c027f 	stur	xzr, [x19, #-64]
   97330:	91002273 	add	x19, x19, #0x8
   97334:	6b14001f 	cmp	w0, w20
   97338:	54fffe08 	b.hi	972f8 <CUSBStandardHub::~CUSBStandardHub()+0x38>  // b.pmore
   9733c:	f9401ea0 	ldr	x0, [x21, #56]
   97340:	b90042bf 	str	wzr, [x21, #64]
   97344:	b4000040 	cbz	x0, 9734c <CUSBStandardHub::~CUSBStandardHub()+0x8c>
   97348:	94005212 	bl	abb90 <operator delete[](void*)>
   9734c:	f9401ab3 	ldr	x19, [x21, #48]
   97350:	f9001ebf 	str	xzr, [x21, #56]
   97354:	b40000d3 	cbz	x19, 9736c <CUSBStandardHub::~CUSBStandardHub()+0xac>
   97358:	aa1303e0 	mov	x0, x19
   9735c:	97ffe321 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   97360:	aa1303e0 	mov	x0, x19
   97364:	d2800401 	mov	x1, #0x20                  	// #32
   97368:	94005212 	bl	abbb0 <operator delete(void*, unsigned long)>
   9736c:	f94016a0 	ldr	x0, [x21, #40]
   97370:	f9001abf 	str	xzr, [x21, #48]
   97374:	b4000060 	cbz	x0, 97380 <CUSBStandardHub::~CUSBStandardHub()+0xc0>
   97378:	d2800121 	mov	x1, #0x9                   	// #9
   9737c:	9400520d 	bl	abbb0 <operator delete(void*, unsigned long)>
   97380:	a94153f3 	ldp	x19, x20, [sp, #16]
   97384:	f90016bf 	str	xzr, [x21, #40]
   97388:	aa1503e0 	mov	x0, x21
   9738c:	f94013f5 	ldr	x21, [sp, #32]
   97390:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97394:	17ffe397 	b	901f0 <CUSBFunction::~CUSBFunction()>
   97398:	94002ec6 	bl	a2eb0 <CDeviceNameService::Get()>
   9739c:	b940d2a2 	ldr	w2, [x21, #208]
   973a0:	52800003 	mov	w3, #0x0                   	// #0
   973a4:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   973a8:	91094021 	add	x1, x1, #0x250
   973ac:	94002ef1 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   973b0:	b940d2a1 	ldr	w1, [x21, #208]
   973b4:	f0000180 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   973b8:	91302000 	add	x0, x0, #0xc08
   973bc:	940053a5 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   973c0:	17ffffca 	b	972e8 <CUSBStandardHub::~CUSBStandardHub()+0x28>
   973c4:	d503201f 	nop
   973c8:	d503201f 	nop
   973cc:	d503201f 	nop

00000000000973d0 <CUSBStandardHub::~CUSBStandardHub()>:
   973d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   973d4:	910003fd 	mov	x29, sp
   973d8:	f9000bf3 	str	x19, [sp, #16]
   973dc:	aa0003f3 	mov	x19, x0
   973e0:	97ffffb8 	bl	972c0 <CUSBStandardHub::~CUSBStandardHub()>
   973e4:	aa1303e0 	mov	x0, x19
   973e8:	d2801b01 	mov	x1, #0xd8                  	// #216
   973ec:	f9400bf3 	ldr	x19, [sp, #16]
   973f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   973f4:	140051ef 	b	abbb0 <operator delete(void*, unsigned long)>
   973f8:	d503201f 	nop
   973fc:	d503201f 	nop

0000000000097400 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   97400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97404:	910003fd 	mov	x29, sp
   97408:	f9000bf3 	str	x19, [sp, #16]
   9740c:	aa0003f3 	mov	x19, x0
   97410:	97ffe41c 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   97414:	91012263 	add	x3, x19, #0x48
   97418:	91022262 	add	x2, x19, #0x88
   9741c:	91032260 	add	x0, x19, #0xc8
   97420:	d0000184 	adrp	x4, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   97424:	912ec084 	add	x4, x4, #0xbb0
   97428:	d2800001 	mov	x1, #0x0                   	// #0
   9742c:	f9000264 	str	x4, [x19]
   97430:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   97434:	f9001e7f 	str	xzr, [x19, #56]
   97438:	b900427f 	str	wzr, [x19, #64]
   9743c:	3901127f 	strb	wzr, [x19, #68]
   97440:	b900d27f 	str	wzr, [x19, #208]
   97444:	d503201f 	nop
   97448:	f821787f 	str	xzr, [x3, x1, lsl #3]
   9744c:	f821785f 	str	xzr, [x2, x1, lsl #3]
   97450:	3821681f 	strb	wzr, [x0, x1]
   97454:	91000421 	add	x1, x1, #0x1
   97458:	f100203f 	cmp	x1, #0x8
   9745c:	54ffff61 	b.ne	97448 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>  // b.any
   97460:	f9400bf3 	ldr	x19, [sp, #16]
   97464:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97468:	d65f03c0 	ret
   9746c:	d503201f 	nop

0000000000097470 <CUSBStandardHub::DisablePort(unsigned int)>:
   97470:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97474:	910003fd 	mov	x29, sp
   97478:	a90153f3 	stp	x19, x20, [sp, #16]
   9747c:	2a0103f3 	mov	w19, w1
   97480:	b9404001 	ldr	w1, [x0, #64]
   97484:	a9025bf5 	stp	x21, x22, [sp, #32]
   97488:	6b13003f 	cmp	w1, w19
   9748c:	540004c9 	b.ls	97524 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>  // b.plast
   97490:	aa0003f4 	mov	x20, x0
   97494:	97ffe477 	bl	90670 <CUSBFunction::GetHost() const>
   97498:	11000676 	add	w22, w19, #0x1
   9749c:	aa0003f5 	mov	x21, x0
   974a0:	aa1403e0 	mov	x0, x20
   974a4:	97ffe467 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   974a8:	52800024 	mov	w4, #0x1                   	// #1
   974ac:	aa0003e1 	mov	x1, x0
   974b0:	2a1603e5 	mov	w5, w22
   974b4:	aa1503e0 	mov	x0, x21
   974b8:	2a0403e3 	mov	w3, w4
   974bc:	52800007 	mov	w7, #0x0                   	// #0
   974c0:	d2800006 	mov	x6, #0x0                   	// #0
   974c4:	52800462 	mov	w2, #0x23                  	// #35
   974c8:	97fff272 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   974cc:	37f80100 	tbnz	w0, #31, 974ec <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   974d0:	8b334293 	add	x19, x20, w19, uxtw
   974d4:	52800020 	mov	w0, #0x1                   	// #1
   974d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   974dc:	3903227f 	strb	wzr, [x19, #200]
   974e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   974e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   974e8:	d65f03c0 	ret
   974ec:	940031c1 	bl	a3bf0 <CLogger::Get()>
   974f0:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   974f4:	91094021 	add	x1, x1, #0x250
   974f8:	2a1603e4 	mov	w4, w22
   974fc:	91002021 	add	x1, x1, #0x8
   97500:	52800022 	mov	w2, #0x1                   	// #1
   97504:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   97508:	913b0063 	add	x3, x3, #0xec0
   9750c:	940033ad 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97510:	a94153f3 	ldp	x19, x20, [sp, #16]
   97514:	52800000 	mov	w0, #0x0                   	// #0
   97518:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9751c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97520:	d65f03c0 	ret
   97524:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97528:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   9752c:	913a4021 	add	x1, x1, #0xe90
   97530:	913aa000 	add	x0, x0, #0xea8
   97534:	52801b62 	mov	w2, #0xdb                  	// #219
   97538:	94002a72 	bl	a1f00 <assertion_failed>
   9753c:	d503201f 	nop

0000000000097540 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>:
   97540:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97544:	910003fd 	mov	x29, sp
   97548:	a90153f3 	stp	x19, x20, [sp, #16]
   9754c:	2a0103f3 	mov	w19, w1
   97550:	f90013f5 	str	x21, [sp, #32]
   97554:	aa0003f5 	mov	x21, x0
   97558:	97ffffc6 	bl	97470 <CUSBStandardHub::DisablePort(unsigned int)>
   9755c:	2a0003f4 	mov	w20, w0
   97560:	36000114 	tbz	w20, #0, 97580 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x40>
   97564:	8b334eb3 	add	x19, x21, w19, uxtw #3
   97568:	f9402660 	ldr	x0, [x19, #72]
   9756c:	b4000080 	cbz	x0, 9757c <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x3c>
   97570:	f9400001 	ldr	x1, [x0]
   97574:	f9400421 	ldr	x1, [x1, #8]
   97578:	d63f0020 	blr	x1
   9757c:	f900267f 	str	xzr, [x19, #72]
   97580:	f94013f5 	ldr	x21, [sp, #32]
   97584:	2a1403e0 	mov	w0, w20
   97588:	a94153f3 	ldp	x19, x20, [sp, #16]
   9758c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97590:	d65f03c0 	ret
   97594:	d503201f 	nop
   97598:	d503201f 	nop
   9759c:	d503201f 	nop

00000000000975a0 <CUSBStandardHub::StartStatusChangeRequest()>:
   975a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   975a4:	910003fd 	mov	x29, sp
   975a8:	b9404003 	ldr	w3, [x0, #64]
   975ac:	a90153f3 	stp	x19, x20, [sp, #16]
   975b0:	34000463 	cbz	w3, 9763c <CUSBStandardHub::StartStatusChangeRequest()+0x9c>
   975b4:	aa0003f3 	mov	x19, x0
   975b8:	11002063 	add	w3, w3, #0x8
   975bc:	f9401c00 	ldr	x0, [x0, #56]
   975c0:	53037c74 	lsr	w20, w3, #3
   975c4:	b4000340 	cbz	x0, 9762c <CUSBStandardHub::StartStatusChangeRequest()+0x8c>
   975c8:	f9401a60 	ldr	x0, [x19, #48]
   975cc:	b4000440 	cbz	x0, 97654 <CUSBStandardHub::StartStatusChangeRequest()+0xb4>
   975d0:	d2801200 	mov	x0, #0x90                  	// #144
   975d4:	97fffecf 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   975d8:	a9430a61 	ldp	x1, x2, [x19, #48]
   975dc:	d2800004 	mov	x4, #0x0                   	// #0
   975e0:	2a1403e3 	mov	w3, w20
   975e4:	aa0003f4 	mov	x20, x0
   975e8:	97fffde2 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   975ec:	aa1303e3 	mov	x3, x19
   975f0:	90000001 	adrp	x1, 97000 <CUSBRequest::AddIsoPacket(unsigned short)+0x80>
   975f4:	911d0021 	add	x1, x1, #0x740
   975f8:	d2800002 	mov	x2, #0x0                   	// #0
   975fc:	aa1403e0 	mov	x0, x20
   97600:	97fffea0 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   97604:	aa1303e0 	mov	x0, x19
   97608:	97ffe41a 	bl	90670 <CUSBFunction::GetHost() const>
   9760c:	f9400003 	ldr	x3, [x0]
   97610:	aa1403e1 	mov	x1, x20
   97614:	a94153f3 	ldp	x19, x20, [sp, #16]
   97618:	52800002 	mov	w2, #0x0                   	// #0
   9761c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97620:	f9401463 	ldr	x3, [x3, #40]
   97624:	aa0303f0 	mov	x16, x3
   97628:	d61f0200 	br	x16
   9762c:	92407280 	and	x0, x20, #0x1fffffff
   97630:	94005148 	bl	abb50 <operator new[](unsigned long)>
   97634:	f9001e60 	str	x0, [x19, #56]
   97638:	17ffffe4 	b	975c8 <CUSBStandardHub::StartStatusChangeRequest()+0x28>
   9763c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97640:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97644:	913a4021 	add	x1, x1, #0xe90
   97648:	913b6000 	add	x0, x0, #0xed8
   9764c:	52803c42 	mov	w2, #0x1e2                 	// #482
   97650:	94002a2c 	bl	a1f00 <assertion_failed>
   97654:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97658:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   9765c:	913a4021 	add	x1, x1, #0xe90
   97660:	913ba000 	add	x0, x0, #0xee8
   97664:	52803d62 	mov	w2, #0x1eb                 	// #491
   97668:	94002a26 	bl	a1f00 <assertion_failed>
   9766c:	d503201f 	nop

0000000000097670 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>:
   97670:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97674:	910003fd 	mov	x29, sp
   97678:	a90153f3 	stp	x19, x20, [sp, #16]
   9767c:	b40003e1 	cbz	x1, 976f8 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x88>
   97680:	aa0003f4 	mov	x20, x0
   97684:	aa0103f3 	mov	x19, x1
   97688:	aa0103e0 	mov	x0, x1
   9768c:	97fffdf5 	bl	96e60 <CUSBRequest::GetStatus() const>
   97690:	340001e0 	cbz	w0, 976cc <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x5c>
   97694:	aa1303e0 	mov	x0, x19
   97698:	97fffdf6 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9769c:	34000400 	cbz	w0, 9771c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xac>
   976a0:	aa1403e0 	mov	x0, x20
   976a4:	97ffe3f3 	bl	90670 <CUSBFunction::GetHost() const>
   976a8:	aa1403e1 	mov	x1, x20
   976ac:	97fff2d5 	bl	94200 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>
   976b0:	aa1303e0 	mov	x0, x19
   976b4:	97fffdcf 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   976b8:	aa1303e0 	mov	x0, x19
   976bc:	d2801201 	mov	x1, #0x90                  	// #144
   976c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   976c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   976c8:	17fffeaa 	b	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   976cc:	aa1303e0 	mov	x0, x19
   976d0:	97fffdf4 	bl	96ea0 <CUSBRequest::GetUSBError() const>
   976d4:	71000c1f 	cmp	w0, #0x3
   976d8:	540001c0 	b.eq	97710 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xa0>  // b.none
   976dc:	aa1303e0 	mov	x0, x19
   976e0:	97fffdc4 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   976e4:	aa1303e0 	mov	x0, x19
   976e8:	d2801201 	mov	x1, #0x90                  	// #144
   976ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   976f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   976f4:	17fffe9f 	b	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   976f8:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   976fc:	900000e0 	adrp	x0, b3000 <_etext+0x9c8>
   97700:	913a4021 	add	x1, x1, #0xe90
   97704:	9106c000 	add	x0, x0, #0x1b0
   97708:	52803ea2 	mov	w2, #0x1f5                 	// #501
   9770c:	940029fd 	bl	a1f00 <assertion_failed>
   97710:	aa1403e0 	mov	x0, x20
   97714:	97ffffa3 	bl	975a0 <CUSBStandardHub::StartStatusChangeRequest()>
   97718:	17fffff1 	b	976dc <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x6c>
   9771c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97720:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97724:	913a4021 	add	x1, x1, #0xe90
   97728:	913c2000 	add	x0, x0, #0xf08
   9772c:	52803f22 	mov	w2, #0x1f9                 	// #505
   97730:	940029f4 	bl	a1f00 <assertion_failed>
   97734:	d503201f 	nop
   97738:	d503201f 	nop
   9773c:	d503201f 	nop

0000000000097740 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)>:
   97740:	b4000082 	cbz	x2, 97750 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   97744:	aa0003e1 	mov	x1, x0
   97748:	aa0203e0 	mov	x0, x2
   9774c:	17ffffc9 	b	97670 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>
   97750:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97754:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97758:	f00000c0 	adrp	x0, b2000 <SErrorStub+0xc>
   9775c:	910003fd 	mov	x29, sp
   97760:	913a4021 	add	x1, x1, #0xe90
   97764:	91288000 	add	x0, x0, #0xa20
   97768:	52804162 	mov	w2, #0x20b                 	// #523
   9776c:	940029e5 	bl	a1f00 <assertion_failed>

0000000000097770 <CUSBStandardHub::Initialize()>:
   97770:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97774:	910003fd 	mov	x29, sp
   97778:	a90153f3 	stp	x19, x20, [sp, #16]
   9777c:	aa0003f3 	mov	x19, x0
   97780:	f90013f5 	str	x21, [sp, #32]
   97784:	97ffe293 	bl	901d0 <CUSBFunction::Initialize()>
   97788:	360005c0 	tbz	w0, #0, 97840 <CUSBStandardHub::Initialize()+0xd0>
   9778c:	12001c15 	and	w21, w0, #0xff
   97790:	f9401660 	ldr	x0, [x19, #40]
   97794:	b50007c0 	cbnz	x0, 9788c <CUSBStandardHub::Initialize()+0x11c>
   97798:	d2800120 	mov	x0, #0x9                   	// #9
   9779c:	940050e5 	bl	abb30 <operator new(unsigned long)>
   977a0:	f9001660 	str	x0, [x19, #40]
   977a4:	aa1303e0 	mov	x0, x19
   977a8:	97ffe3b2 	bl	90670 <CUSBFunction::GetHost() const>
   977ac:	aa0003f4 	mov	x20, x0
   977b0:	aa1303e0 	mov	x0, x19
   977b4:	97ffe3a3 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   977b8:	f9401664 	ldr	x4, [x19, #40]
   977bc:	aa0003e1 	mov	x1, x0
   977c0:	52800007 	mov	w7, #0x0                   	// #0
   977c4:	aa1403e0 	mov	x0, x20
   977c8:	12800be6 	mov	w6, #0xffffffa0            	// #-96
   977cc:	52800125 	mov	w5, #0x9                   	// #9
   977d0:	52800003 	mov	w3, #0x0                   	// #0
   977d4:	52800522 	mov	w2, #0x29                  	// #41
   977d8:	97fff1f6 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   977dc:	7100241f 	cmp	w0, #0x9
   977e0:	54000161 	b.ne	9780c <CUSBStandardHub::Initialize()+0x9c>  // b.any
   977e4:	f9401660 	ldr	x0, [x19, #40]
   977e8:	39400800 	ldrb	w0, [x0, #2]
   977ec:	b9004260 	str	w0, [x19, #64]
   977f0:	7100201f 	cmp	w0, #0x8
   977f4:	54000328 	b.hi	97858 <CUSBStandardHub::Initialize()+0xe8>  // b.pmore
   977f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   977fc:	2a1503e0 	mov	w0, w21
   97800:	f94013f5 	ldr	x21, [sp, #32]
   97804:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97808:	d65f03c0 	ret
   9780c:	940030f9 	bl	a3bf0 <CLogger::Get()>
   97810:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97814:	91094021 	add	x1, x1, #0x250
   97818:	91002021 	add	x1, x1, #0x8
   9781c:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   97820:	52800022 	mov	w2, #0x1                   	// #1
   97824:	913ce063 	add	x3, x3, #0xf38
   97828:	940032e6 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9782c:	f9401660 	ldr	x0, [x19, #40]
   97830:	b4000060 	cbz	x0, 9783c <CUSBStandardHub::Initialize()+0xcc>
   97834:	d2800121 	mov	x1, #0x9                   	// #9
   97838:	940050de 	bl	abbb0 <operator delete(void*, unsigned long)>
   9783c:	f900167f 	str	xzr, [x19, #40]
   97840:	52800015 	mov	w21, #0x0                   	// #0
   97844:	2a1503e0 	mov	w0, w21
   97848:	a94153f3 	ldp	x19, x20, [sp, #16]
   9784c:	f94013f5 	ldr	x21, [sp, #32]
   97850:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97854:	d65f03c0 	ret
   97858:	940030e6 	bl	a3bf0 <CLogger::Get()>
   9785c:	b9404264 	ldr	w4, [x19, #64]
   97860:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97864:	91094021 	add	x1, x1, #0x250
   97868:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   9786c:	91002021 	add	x1, x1, #0x8
   97870:	913d6063 	add	x3, x3, #0xf58
   97874:	52800022 	mov	w2, #0x1                   	// #1
   97878:	940032d2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9787c:	f9401660 	ldr	x0, [x19, #40]
   97880:	b5fffda0 	cbnz	x0, 97834 <CUSBStandardHub::Initialize()+0xc4>
   97884:	f900167f 	str	xzr, [x19, #40]
   97888:	17ffffee 	b	97840 <CUSBStandardHub::Initialize()+0xd0>
   9788c:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97890:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97894:	913a4021 	add	x1, x1, #0xe90
   97898:	913ca000 	add	x0, x0, #0xf28
   9789c:	52800c42 	mov	w2, #0x62                  	// #98
   978a0:	94002998 	bl	a1f00 <assertion_failed>
   978a4:	d503201f 	nop
   978a8:	d503201f 	nop
   978ac:	d503201f 	nop

00000000000978b0 <CUSBStandardHub::EnumeratePorts()>:
   978b0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   978b4:	910003fd 	mov	x29, sp
   978b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   978bc:	aa0003f6 	mov	x22, x0
   978c0:	97ffe36c 	bl	90670 <CUSBFunction::GetHost() const>
   978c4:	b40025a0 	cbz	x0, 97d78 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   978c8:	a90363f7 	stp	x23, x24, [sp, #48]
   978cc:	aa0003f7 	mov	x23, x0
   978d0:	aa1603e0 	mov	x0, x22
   978d4:	97ffe35b 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   978d8:	aa0003f8 	mov	x24, x0
   978dc:	b4002620 	cbz	x0, 97da0 <CUSBStandardHub::EnumeratePorts()+0x4f0>
   978e0:	b94042c0 	ldr	w0, [x22, #64]
   978e4:	a90153f3 	stp	x19, x20, [sp, #16]
   978e8:	a9046bf9 	stp	x25, x26, [sp, #64]
   978ec:	340026c0 	cbz	w0, 97dc4 <CUSBStandardHub::EnumeratePorts()+0x514>
   978f0:	394112c0 	ldrb	w0, [x22, #68]
   978f4:	36001a40 	tbz	w0, #0, 97c3c <CUSBStandardHub::EnumeratePorts()+0x38c>
   978f8:	a90573fb 	stp	x27, x28, [sp, #80]
   978fc:	910122dc 	add	x28, x22, #0x48
   97900:	aa1c03f3 	mov	x19, x28
   97904:	b000011a 	adrp	x26, b8000 <FromUmsd+0x60>
   97908:	9109435a 	add	x26, x26, #0x250
   9790c:	b00000fb 	adrp	x27, b4000 <_etext+0x19c8>
   97910:	913e637b 	add	x27, x27, #0xf98
   97914:	f9400260 	ldr	x0, [x19]
   97918:	9100235a 	add	x26, x26, #0x8
   9791c:	52800034 	mov	w20, #0x1                   	// #1
   97920:	b5000980 	cbnz	x0, 97a50 <CUSBStandardHub::EnumeratePorts()+0x1a0>
   97924:	d503201f 	nop
   97928:	f9402266 	ldr	x6, [x19, #64]
   9792c:	b4001786 	cbz	x6, 97c1c <CUSBStandardHub::EnumeratePorts()+0x36c>
   97930:	12003e99 	and	w25, w20, #0xffff
   97934:	aa1803e1 	mov	x1, x24
   97938:	2a1903e5 	mov	w5, w25
   9793c:	aa1703e0 	mov	x0, x23
   97940:	52800087 	mov	w7, #0x4                   	// #4
   97944:	52800004 	mov	w4, #0x0                   	// #0
   97948:	52800003 	mov	w3, #0x0                   	// #0
   9794c:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   97950:	97fff150 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97954:	2a0003f5 	mov	w21, w0
   97958:	7100101f 	cmp	w0, #0x4
   9795c:	54001521 	b.ne	97c00 <CUSBStandardHub::EnumeratePorts()+0x350>  // b.any
   97960:	f9402260 	ldr	x0, [x19, #64]
   97964:	39400401 	ldrb	w1, [x0, #1]
   97968:	39400000 	ldrb	w0, [x0]
   9796c:	2a012000 	orr	w0, w0, w1, lsl #8
   97970:	36001bc1 	tbz	w1, #0, 97ce8 <CUSBStandardHub::EnumeratePorts()+0x438>
   97974:	360005e0 	tbz	w0, #0, 97a30 <CUSBStandardHub::EnumeratePorts()+0x180>
   97978:	2a1903e5 	mov	w5, w25
   9797c:	2a1503e4 	mov	w4, w21
   97980:	aa1803e1 	mov	x1, x24
   97984:	aa1703e0 	mov	x0, x23
   97988:	52800007 	mov	w7, #0x0                   	// #0
   9798c:	d2800006 	mov	x6, #0x0                   	// #0
   97990:	52800063 	mov	w3, #0x3                   	// #3
   97994:	52800462 	mov	w2, #0x23                  	// #35
   97998:	97fff13e 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9799c:	37f81920 	tbnz	w0, #31, 97cc0 <CUSBStandardHub::EnumeratePorts()+0x410>
   979a0:	94004c4c 	bl	aaad0 <CTimer::Get()>
   979a4:	52800c80 	mov	w0, #0x64                  	// #100
   979a8:	94004bee 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   979ac:	f9402266 	ldr	x6, [x19, #64]
   979b0:	2a1503e7 	mov	w7, w21
   979b4:	2a1903e5 	mov	w5, w25
   979b8:	aa1803e1 	mov	x1, x24
   979bc:	aa1703e0 	mov	x0, x23
   979c0:	52800004 	mov	w4, #0x0                   	// #0
   979c4:	52800003 	mov	w3, #0x0                   	// #0
   979c8:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   979cc:	97fff131 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   979d0:	7100101f 	cmp	w0, #0x4
   979d4:	54002961 	b.ne	97f00 <CUSBStandardHub::EnumeratePorts()+0x650>  // b.any
   979d8:	f9402260 	ldr	x0, [x19, #64]
   979dc:	39400001 	ldrb	w1, [x0]
   979e0:	39400400 	ldrb	w0, [x0, #1]
   979e4:	2a002020 	orr	w0, w1, w0, lsl #8
   979e8:	36081b41 	tbz	w1, #1, 97d50 <CUSBStandardHub::EnumeratePorts()+0x4a0>
   979ec:	371828e0 	tbnz	w0, #3, 97f08 <CUSBStandardHub::EnumeratePorts()+0x658>
   979f0:	52800015 	mov	w21, #0x0                   	// #0
   979f4:	364811e0 	tbz	w0, #9, 97c30 <CUSBStandardHub::EnumeratePorts()+0x380>
   979f8:	f9400260 	ldr	x0, [x19]
   979fc:	b5001f20 	cbnz	x0, 97de0 <CUSBStandardHub::EnumeratePorts()+0x530>
   97a00:	d2801600 	mov	x0, #0xb0                  	// #176
   97a04:	9400504b 	bl	abb30 <operator new(unsigned long)>
   97a08:	2a1503e2 	mov	w2, w21
   97a0c:	51000684 	sub	w4, w20, #0x1
   97a10:	aa1603e3 	mov	x3, x22
   97a14:	aa1703e1 	mov	x1, x23
   97a18:	aa0003f5 	mov	x21, x0
   97a1c:	97ffd9b1 	bl	8e0e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   97a20:	f9000275 	str	x21, [x19]
   97a24:	aa1503e0 	mov	x0, x21
   97a28:	97ffdc16 	bl	8ea80 <CUSBDevice::Initialize()>
   97a2c:	360013c0 	tbz	w0, #0, 97ca4 <CUSBStandardHub::EnumeratePorts()+0x3f4>
   97a30:	b94042c1 	ldr	w1, [x22, #64]
   97a34:	91002273 	add	x19, x19, #0x8
   97a38:	11000680 	add	w0, w20, #0x1
   97a3c:	6b14003f 	cmp	w1, w20
   97a40:	54000149 	b.ls	97a68 <CUSBStandardHub::EnumeratePorts()+0x1b8>  // b.plast
   97a44:	2a0003f4 	mov	w20, w0
   97a48:	f9400260 	ldr	x0, [x19]
   97a4c:	b4fff6e0 	cbz	x0, 97928 <CUSBStandardHub::EnumeratePorts()+0x78>
   97a50:	97ffd9f8 	bl	8e230 <CUSBDevice::ReScanDevices()>
   97a54:	91002273 	add	x19, x19, #0x8
   97a58:	b94042c1 	ldr	w1, [x22, #64]
   97a5c:	11000680 	add	w0, w20, #0x1
   97a60:	6b14003f 	cmp	w1, w20
   97a64:	54ffff08 	b.hi	97a44 <CUSBStandardHub::EnumeratePorts()+0x194>  // b.pmore
   97a68:	34000601 	cbz	w1, 97b28 <CUSBStandardHub::EnumeratePorts()+0x278>
   97a6c:	b0000114 	adrp	x20, b8000 <FromUmsd+0x60>
   97a70:	91094294 	add	x20, x20, #0x250
   97a74:	d00000f5 	adrp	x21, b5000 <_etext+0x29c8>
   97a78:	910222b5 	add	x21, x21, #0x88
   97a7c:	91002294 	add	x20, x20, #0x8
   97a80:	d2800013 	mov	x19, #0x0                   	// #0
   97a84:	1400000b 	b	97ab0 <CUSBStandardHub::EnumeratePorts()+0x200>
   97a88:	9400305a 	bl	a3bf0 <CLogger::Get()>
   97a8c:	aa1403e1 	mov	x1, x20
   97a90:	2a1903e4 	mov	w4, w25
   97a94:	aa1503e3 	mov	x3, x21
   97a98:	52800082 	mov	w2, #0x4                   	// #4
   97a9c:	94003249 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97aa0:	b94042c1 	ldr	w1, [x22, #64]
   97aa4:	91000673 	add	x19, x19, #0x1
   97aa8:	6b13003f 	cmp	w1, w19
   97aac:	540003e9 	b.ls	97b28 <CUSBStandardHub::EnumeratePorts()+0x278>  // b.plast
   97ab0:	f8737b80 	ldr	x0, [x28, x19, lsl #3]
   97ab4:	b4ffff80 	cbz	x0, 97aa4 <CUSBStandardHub::EnumeratePorts()+0x1f4>
   97ab8:	910322c2 	add	x2, x22, #0xc8
   97abc:	38736843 	ldrb	w3, [x2, x19]
   97ac0:	3707ff23 	tbnz	w3, #0, 97aa4 <CUSBStandardHub::EnumeratePorts()+0x1f4>
   97ac4:	f9400001 	ldr	x1, [x0]
   97ac8:	52800023 	mov	w3, #0x1                   	// #1
   97acc:	38336843 	strb	w3, [x2, x19]
   97ad0:	11000679 	add	w25, w19, #0x1
   97ad4:	f9400c21 	ldr	x1, [x1, #24]
   97ad8:	d63f0020 	blr	x1
   97adc:	3707fd60 	tbnz	w0, #0, 97a88 <CUSBStandardHub::EnumeratePorts()+0x1d8>
   97ae0:	94003044 	bl	a3bf0 <CLogger::Get()>
   97ae4:	2a1903e4 	mov	w4, w25
   97ae8:	aa1403e1 	mov	x1, x20
   97aec:	d00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   97af0:	52800042 	mov	w2, #0x2                   	// #2
   97af4:	91018063 	add	x3, x3, #0x60
   97af8:	94003232 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97afc:	f8737b80 	ldr	x0, [x28, x19, lsl #3]
   97b00:	b4000080 	cbz	x0, 97b10 <CUSBStandardHub::EnumeratePorts()+0x260>
   97b04:	f9400001 	ldr	x1, [x0]
   97b08:	f9400421 	ldr	x1, [x1, #8]
   97b0c:	d63f0020 	blr	x1
   97b10:	b94042c1 	ldr	w1, [x22, #64]
   97b14:	f8337b9f 	str	xzr, [x28, x19, lsl #3]
   97b18:	91000673 	add	x19, x19, #0x1
   97b1c:	6b13003f 	cmp	w1, w19
   97b20:	54fffc88 	b.hi	97ab0 <CUSBStandardHub::EnumeratePorts()+0x200>  // b.pmore
   97b24:	d503201f 	nop
   97b28:	a94573fb 	ldp	x27, x28, [sp, #80]
   97b2c:	d2800080 	mov	x0, #0x4                   	// #4
   97b30:	94005000 	bl	abb30 <operator new(unsigned long)>
   97b34:	aa0003f4 	mov	x20, x0
   97b38:	aa1803e1 	mov	x1, x24
   97b3c:	aa1703e0 	mov	x0, x23
   97b40:	aa1403e6 	mov	x6, x20
   97b44:	52800087 	mov	w7, #0x4                   	// #4
   97b48:	52800005 	mov	w5, #0x0                   	// #0
   97b4c:	52800004 	mov	w4, #0x0                   	// #0
   97b50:	52800003 	mov	w3, #0x0                   	// #0
   97b54:	12800be2 	mov	w2, #0xffffffa0            	// #-96
   97b58:	97fff0ce 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97b5c:	7100101f 	cmp	w0, #0x4
   97b60:	540014c1 	b.ne	97df8 <CUSBStandardHub::EnumeratePorts()+0x548>  // b.any
   97b64:	39400280 	ldrb	w0, [x20]
   97b68:	36081600 	tbz	w0, #1, 97e28 <CUSBStandardHub::EnumeratePorts()+0x578>
   97b6c:	b94042c0 	ldr	w0, [x22, #64]
   97b70:	52800001 	mov	w1, #0x0                   	// #0
   97b74:	340001e0 	cbz	w0, 97bb0 <CUSBStandardHub::EnumeratePorts()+0x300>
   97b78:	11000433 	add	w19, w1, #0x1
   97b7c:	aa1703e0 	mov	x0, x23
   97b80:	aa1803e1 	mov	x1, x24
   97b84:	2a1303e5 	mov	w5, w19
   97b88:	52800007 	mov	w7, #0x0                   	// #0
   97b8c:	d2800006 	mov	x6, #0x0                   	// #0
   97b90:	52800104 	mov	w4, #0x8                   	// #8
   97b94:	52800023 	mov	w3, #0x1                   	// #1
   97b98:	52800462 	mov	w2, #0x23                  	// #35
   97b9c:	97fff0bd 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97ba0:	b94042c0 	ldr	w0, [x22, #64]
   97ba4:	2a1303e1 	mov	w1, w19
   97ba8:	6b13001f 	cmp	w0, w19
   97bac:	54fffe68 	b.hi	97b78 <CUSBStandardHub::EnumeratePorts()+0x2c8>  // b.pmore
   97bb0:	94003010 	bl	a3bf0 <CLogger::Get()>
   97bb4:	d00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   97bb8:	91030063 	add	x3, x3, #0xc0
   97bbc:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97bc0:	91094021 	add	x1, x1, #0x250
   97bc4:	52800022 	mov	w2, #0x1                   	// #1
   97bc8:	91002021 	add	x1, x1, #0x8
   97bcc:	940031fd 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97bd0:	aa1403e0 	mov	x0, x20
   97bd4:	d2800081 	mov	x1, #0x4                   	// #4
   97bd8:	94004ff6 	bl	abbb0 <operator delete(void*, unsigned long)>
   97bdc:	d503201f 	nop
   97be0:	52800019 	mov	w25, #0x0                   	// #0
   97be4:	a94153f3 	ldp	x19, x20, [sp, #16]
   97be8:	2a1903e0 	mov	w0, w25
   97bec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97bf0:	a94363f7 	ldp	x23, x24, [sp, #48]
   97bf4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97bf8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   97bfc:	d65f03c0 	ret
   97c00:	94002ffc 	bl	a3bf0 <CLogger::Get()>
   97c04:	2a1403e4 	mov	w4, w20
   97c08:	aa1b03e3 	mov	x3, x27
   97c0c:	aa1a03e1 	mov	x1, x26
   97c10:	52800022 	mov	w2, #0x1                   	// #1
   97c14:	940031eb 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97c18:	17ffff86 	b	97a30 <CUSBStandardHub::EnumeratePorts()+0x180>
   97c1c:	d2800080 	mov	x0, #0x4                   	// #4
   97c20:	94004fc4 	bl	abb30 <operator new(unsigned long)>
   97c24:	aa0003e6 	mov	x6, x0
   97c28:	f9002260 	str	x0, [x19, #64]
   97c2c:	17ffff41 	b	97930 <CUSBStandardHub::EnumeratePorts()+0x80>
   97c30:	d34a2800 	ubfx	x0, x0, #10, #1
   97c34:	11000415 	add	w21, w0, #0x1
   97c38:	17ffff70 	b	979f8 <CUSBStandardHub::EnumeratePorts()+0x148>
   97c3c:	52800013 	mov	w19, #0x0                   	// #0
   97c40:	14000004 	b	97c50 <CUSBStandardHub::EnumeratePorts()+0x3a0>
   97c44:	b94042c0 	ldr	w0, [x22, #64]
   97c48:	6b13001f 	cmp	w0, w19
   97c4c:	540005a9 	b.ls	97d00 <CUSBStandardHub::EnumeratePorts()+0x450>  // b.plast
   97c50:	11000673 	add	w19, w19, #0x1
   97c54:	aa1803e1 	mov	x1, x24
   97c58:	2a1303e5 	mov	w5, w19
   97c5c:	aa1703e0 	mov	x0, x23
   97c60:	52800007 	mov	w7, #0x0                   	// #0
   97c64:	d2800006 	mov	x6, #0x0                   	// #0
   97c68:	52800104 	mov	w4, #0x8                   	// #8
   97c6c:	52800063 	mov	w3, #0x3                   	// #3
   97c70:	52800462 	mov	w2, #0x23                  	// #35
   97c74:	97fff087 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97c78:	36fffe60 	tbz	w0, #31, 97c44 <CUSBStandardHub::EnumeratePorts()+0x394>
   97c7c:	94002fdd 	bl	a3bf0 <CLogger::Get()>
   97c80:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97c84:	91094021 	add	x1, x1, #0x250
   97c88:	2a1303e4 	mov	w4, w19
   97c8c:	91002021 	add	x1, x1, #0x8
   97c90:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   97c94:	52800022 	mov	w2, #0x1                   	// #1
   97c98:	913e0063 	add	x3, x3, #0xf80
   97c9c:	940031c9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97ca0:	17ffffd0 	b	97be0 <CUSBStandardHub::EnumeratePorts()+0x330>
   97ca4:	f9400260 	ldr	x0, [x19]
   97ca8:	b4000080 	cbz	x0, 97cb8 <CUSBStandardHub::EnumeratePorts()+0x408>
   97cac:	f9400001 	ldr	x1, [x0]
   97cb0:	f9400421 	ldr	x1, [x1, #8]
   97cb4:	d63f0020 	blr	x1
   97cb8:	f900027f 	str	xzr, [x19]
   97cbc:	17ffff5d 	b	97a30 <CUSBStandardHub::EnumeratePorts()+0x180>
   97cc0:	94002fcc 	bl	a3bf0 <CLogger::Get()>
   97cc4:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97cc8:	91094021 	add	x1, x1, #0x250
   97ccc:	2a1403e4 	mov	w4, w20
   97cd0:	91002021 	add	x1, x1, #0x8
   97cd4:	b00000e3 	adrp	x3, b4000 <_etext+0x19c8>
   97cd8:	52800022 	mov	w2, #0x1                   	// #1
   97cdc:	913fc063 	add	x3, x3, #0xff0
   97ce0:	940031b8 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97ce4:	17ffff53 	b	97a30 <CUSBStandardHub::EnumeratePorts()+0x180>
   97ce8:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97cec:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97cf0:	913a4021 	add	x1, x1, #0xe90
   97cf4:	913ee000 	add	x0, x0, #0xfb8
   97cf8:	52802722 	mov	w2, #0x139                 	// #313
   97cfc:	94002881 	bl	a1f00 <assertion_failed>
   97d00:	52800020 	mov	w0, #0x1                   	// #1
   97d04:	390112c0 	strb	w0, [x22, #68]
   97d08:	94002dae 	bl	a33c0 <CKernelOptions::Get()>
   97d0c:	b4000140 	cbz	x0, 97d34 <CUSBStandardHub::EnumeratePorts()+0x484>
   97d10:	94002d60 	bl	a3290 <CKernelOptions::GetUSBPowerDelay() const>
   97d14:	2a0003f3 	mov	w19, w0
   97d18:	340000e0 	cbz	w0, 97d34 <CUSBStandardHub::EnumeratePorts()+0x484>
   97d1c:	94004b6d 	bl	aaad0 <CTimer::Get()>
   97d20:	2a1303e0 	mov	w0, w19
   97d24:	94004b0f 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   97d28:	b94042c0 	ldr	w0, [x22, #64]
   97d2c:	35ffde60 	cbnz	w0, 978f8 <CUSBStandardHub::EnumeratePorts()+0x48>
   97d30:	17ffff7f 	b	97b2c <CUSBStandardHub::EnumeratePorts()+0x27c>
   97d34:	94004b67 	bl	aaad0 <CTimer::Get()>
   97d38:	52803fd3 	mov	w19, #0x1fe                 	// #510
   97d3c:	2a1303e0 	mov	w0, w19
   97d40:	94004b08 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   97d44:	b94042c0 	ldr	w0, [x22, #64]
   97d48:	35ffdd80 	cbnz	w0, 978f8 <CUSBStandardHub::EnumeratePorts()+0x48>
   97d4c:	17ffff78 	b	97b2c <CUSBStandardHub::EnumeratePorts()+0x27c>
   97d50:	94002fa8 	bl	a3bf0 <CLogger::Get()>
   97d54:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97d58:	91094021 	add	x1, x1, #0x250
   97d5c:	2a1403e4 	mov	w4, w20
   97d60:	91002021 	add	x1, x1, #0x8
   97d64:	d00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   97d68:	52800022 	mov	w2, #0x1                   	// #1
   97d6c:	91002063 	add	x3, x3, #0x8
   97d70:	94003194 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97d74:	17ffff2f 	b	97a30 <CUSBStandardHub::EnumeratePorts()+0x180>
   97d78:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97d7c:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97d80:	913a4021 	add	x1, x1, #0xe90
   97d84:	91330000 	add	x0, x0, #0xcc0
   97d88:	52801ee2 	mov	w2, #0xf7                  	// #247
   97d8c:	a90153f3 	stp	x19, x20, [sp, #16]
   97d90:	a90363f7 	stp	x23, x24, [sp, #48]
   97d94:	a9046bf9 	stp	x25, x26, [sp, #64]
   97d98:	a90573fb 	stp	x27, x28, [sp, #80]
   97d9c:	94002859 	bl	a1f00 <assertion_failed>
   97da0:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97da4:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97da8:	913a4021 	add	x1, x1, #0xe90
   97dac:	913dc000 	add	x0, x0, #0xf70
   97db0:	52801f42 	mov	w2, #0xfa                  	// #250
   97db4:	a90153f3 	stp	x19, x20, [sp, #16]
   97db8:	a9046bf9 	stp	x25, x26, [sp, #64]
   97dbc:	a90573fb 	stp	x27, x28, [sp, #80]
   97dc0:	94002850 	bl	a1f00 <assertion_failed>
   97dc4:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97dc8:	b00000e0 	adrp	x0, b4000 <_etext+0x19c8>
   97dcc:	913a4021 	add	x1, x1, #0xe90
   97dd0:	913b6000 	add	x0, x0, #0xed8
   97dd4:	52801f82 	mov	w2, #0xfc                  	// #252
   97dd8:	a90573fb 	stp	x27, x28, [sp, #80]
   97ddc:	94002849 	bl	a1f00 <assertion_failed>
   97de0:	b00000e1 	adrp	x1, b4000 <_etext+0x19c8>
   97de4:	d00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   97de8:	913a4021 	add	x1, x1, #0xe90
   97dec:	91012000 	add	x0, x0, #0x48
   97df0:	52802ec2 	mov	w2, #0x176                 	// #374
   97df4:	94002843 	bl	a1f00 <assertion_failed>
   97df8:	94002f7e 	bl	a3bf0 <CLogger::Get()>
   97dfc:	d00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   97e00:	9102a063 	add	x3, x3, #0xa8
   97e04:	52800022 	mov	w2, #0x1                   	// #1
   97e08:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97e0c:	91094021 	add	x1, x1, #0x250
   97e10:	91002021 	add	x1, x1, #0x8
   97e14:	9400316b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97e18:	aa1403e0 	mov	x0, x20
   97e1c:	d2800081 	mov	x1, #0x4                   	// #4
   97e20:	94004f64 	bl	abbb0 <operator delete(void*, unsigned long)>
   97e24:	17ffff6f 	b	97be0 <CUSBStandardHub::EnumeratePorts()+0x330>
   97e28:	aa1403e0 	mov	x0, x20
   97e2c:	d2800081 	mov	x1, #0x4                   	// #4
   97e30:	94004f60 	bl	abbb0 <operator delete(void*, unsigned long)>
   97e34:	b94042c0 	ldr	w0, [x22, #64]
   97e38:	34000900 	cbz	w0, 97f58 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   97e3c:	b000011a 	adrp	x26, b8000 <FromUmsd+0x60>
   97e40:	9109435a 	add	x26, x26, #0x250
   97e44:	d2800033 	mov	x19, #0x1                   	// #1
   97e48:	9100235a 	add	x26, x26, #0x8
   97e4c:	2a1303f9 	mov	w25, w19
   97e50:	910202d5 	add	x21, x22, #0x80
   97e54:	a90573fb 	stp	x27, x28, [sp, #80]
   97e58:	d00000fb 	adrp	x27, b5000 <_etext+0x29c8>
   97e5c:	9100837b 	add	x27, x27, #0x20
   97e60:	14000006 	b	97e78 <CUSBStandardHub::EnumeratePorts()+0x5c8>
   97e64:	b94042c0 	ldr	w0, [x22, #64]
   97e68:	91000673 	add	x19, x19, #0x1
   97e6c:	51000661 	sub	w1, w19, #0x1
   97e70:	6b00003f 	cmp	w1, w0
   97e74:	54000422 	b.cs	97ef8 <CUSBStandardHub::EnumeratePorts()+0x648>  // b.hs, b.nlast
   97e78:	f8737aa6 	ldr	x6, [x21, x19, lsl #3]
   97e7c:	12003e74 	and	w20, w19, #0xffff
   97e80:	2a1403e5 	mov	w5, w20
   97e84:	aa1803e1 	mov	x1, x24
   97e88:	aa1703e0 	mov	x0, x23
   97e8c:	52800087 	mov	w7, #0x4                   	// #4
   97e90:	52800004 	mov	w4, #0x0                   	// #0
   97e94:	52800003 	mov	w3, #0x0                   	// #0
   97e98:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   97e9c:	97ffeffd 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97ea0:	7100101f 	cmp	w0, #0x4
   97ea4:	54fffe01 	b.ne	97e64 <CUSBStandardHub::EnumeratePorts()+0x5b4>  // b.any
   97ea8:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   97eac:	39400000 	ldrb	w0, [x0]
   97eb0:	361ffda0 	tbz	w0, #3, 97e64 <CUSBStandardHub::EnumeratePorts()+0x5b4>
   97eb4:	2a1403e5 	mov	w5, w20
   97eb8:	aa1803e1 	mov	x1, x24
   97ebc:	52800007 	mov	w7, #0x0                   	// #0
   97ec0:	d2800006 	mov	x6, #0x0                   	// #0
   97ec4:	52800104 	mov	w4, #0x8                   	// #8
   97ec8:	52800023 	mov	w3, #0x1                   	// #1
   97ecc:	52800462 	mov	w2, #0x23                  	// #35
   97ed0:	aa1703e0 	mov	x0, x23
   97ed4:	97ffefef 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97ed8:	52800019 	mov	w25, #0x0                   	// #0
   97edc:	94002f45 	bl	a3bf0 <CLogger::Get()>
   97ee0:	2a1303e4 	mov	w4, w19
   97ee4:	aa1b03e3 	mov	x3, x27
   97ee8:	aa1a03e1 	mov	x1, x26
   97eec:	52800022 	mov	w2, #0x1                   	// #1
   97ef0:	94003134 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97ef4:	17ffffdc 	b	97e64 <CUSBStandardHub::EnumeratePorts()+0x5b4>
   97ef8:	a94573fb 	ldp	x27, x28, [sp, #80]
   97efc:	17ffff3a 	b	97be4 <CUSBStandardHub::EnumeratePorts()+0x334>
   97f00:	a94573fb 	ldp	x27, x28, [sp, #80]
   97f04:	17ffff37 	b	97be0 <CUSBStandardHub::EnumeratePorts()+0x330>
   97f08:	2a1903e5 	mov	w5, w25
   97f0c:	aa1803e1 	mov	x1, x24
   97f10:	52800007 	mov	w7, #0x0                   	// #0
   97f14:	d2800006 	mov	x6, #0x0                   	// #0
   97f18:	52800104 	mov	w4, #0x8                   	// #8
   97f1c:	52800023 	mov	w3, #0x1                   	// #1
   97f20:	52800462 	mov	w2, #0x23                  	// #35
   97f24:	aa1703e0 	mov	x0, x23
   97f28:	97ffefda 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97f2c:	94002f31 	bl	a3bf0 <CLogger::Get()>
   97f30:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97f34:	91094021 	add	x1, x1, #0x250
   97f38:	2a1403e4 	mov	w4, w20
   97f3c:	91002021 	add	x1, x1, #0x8
   97f40:	d00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   97f44:	52800022 	mov	w2, #0x1                   	// #1
   97f48:	91008063 	add	x3, x3, #0x20
   97f4c:	9400311d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97f50:	a94573fb 	ldp	x27, x28, [sp, #80]
   97f54:	17ffff23 	b	97be0 <CUSBStandardHub::EnumeratePorts()+0x330>
   97f58:	52800039 	mov	w25, #0x1                   	// #1
   97f5c:	17ffff22 	b	97be4 <CUSBStandardHub::EnumeratePorts()+0x334>

0000000000097f60 <CUSBStandardHub::ReScanDevices()>:
   97f60:	17fffe54 	b	978b0 <CUSBStandardHub::EnumeratePorts()>
   97f64:	d503201f 	nop
   97f68:	d503201f 	nop
   97f6c:	d503201f 	nop

0000000000097f70 <CUSBStandardHub::Configure()>:
   97f70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97f74:	910003fd 	mov	x29, sp
   97f78:	a90153f3 	stp	x19, x20, [sp, #16]
   97f7c:	aa0003f3 	mov	x19, x0
   97f80:	a9025bf5 	stp	x21, x22, [sp, #32]
   97f84:	97ffe197 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   97f88:	12001c14 	and	w20, w0, #0xff
   97f8c:	7100069f 	cmp	w20, #0x1
   97f90:	54000181 	b.ne	97fc0 <CUSBStandardHub::Configure()+0x50>  // b.any
   97f94:	aa1303e0 	mov	x0, x19
   97f98:	528000a1 	mov	w1, #0x5                   	// #5
   97f9c:	97ffe1c1 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   97fa0:	aa0003f5 	mov	x21, x0
   97fa4:	b40000e0 	cbz	x0, 97fc0 <CUSBStandardHub::Configure()+0x50>
   97fa8:	39c00800 	ldrsb	w0, [x0, #2]
   97fac:	36f800a0 	tbz	w0, #31, 97fc0 <CUSBStandardHub::Configure()+0x50>
   97fb0:	39400ea0 	ldrb	w0, [x21, #3]
   97fb4:	12001400 	and	w0, w0, #0x3f
   97fb8:	71000c1f 	cmp	w0, #0x3
   97fbc:	54000180 	b.eq	97fec <CUSBStandardHub::Configure()+0x7c>  // b.none
   97fc0:	b0000101 	adrp	x1, b8000 <FromUmsd+0x60>
   97fc4:	91094021 	add	x1, x1, #0x250
   97fc8:	aa1303e0 	mov	x0, x19
   97fcc:	91002021 	add	x1, x1, #0x8
   97fd0:	97ffe1c0 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   97fd4:	52800015 	mov	w21, #0x0                   	// #0
   97fd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   97fdc:	2a1503e0 	mov	w0, w21
   97fe0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97fe4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97fe8:	d65f03c0 	ret
   97fec:	d2800400 	mov	x0, #0x20                  	// #32
   97ff0:	94004ed0 	bl	abb30 <operator new(unsigned long)>
   97ff4:	aa0003f6 	mov	x22, x0
   97ff8:	aa1303e0 	mov	x0, x19
   97ffc:	97ffe185 	bl	90610 <CUSBFunction::GetDevice() const>
   98000:	aa0003e1 	mov	x1, x0
   98004:	aa1503e2 	mov	x2, x21
   98008:	aa1603e0 	mov	x0, x22
   9800c:	97ffdf69 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   98010:	f9001a76 	str	x22, [x19, #48]
   98014:	aa1303e0 	mov	x0, x19
   98018:	97ffe0ae 	bl	902d0 <CUSBFunction::Configure()>
   9801c:	36000520 	tbz	w0, #0, 980c0 <CUSBStandardHub::Configure()+0x150>
   98020:	90000115 	adrp	x21, b8000 <FromUmsd+0x60>
   98024:	910942b5 	add	x21, x21, #0x250
   98028:	910022b6 	add	x22, x21, #0x8
   9802c:	2a1403e1 	mov	w1, w20
   98030:	aa1603e2 	mov	x2, x22
   98034:	d0000180 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   98038:	91302000 	add	x0, x0, #0xc08
   9803c:	94005055 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   98040:	b900d260 	str	w0, [x19, #208]
   98044:	94002b9b 	bl	a2eb0 <CDeviceNameService::Get()>
   98048:	b940d262 	ldr	w2, [x19, #208]
   9804c:	aa1503e1 	mov	x1, x21
   98050:	aa1303e3 	mov	x3, x19
   98054:	52800004 	mov	w4, #0x0                   	// #0
   98058:	94002ba2 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9805c:	aa1303e0 	mov	x0, x19
   98060:	97fffe14 	bl	978b0 <CUSBStandardHub::EnumeratePorts()>
   98064:	12001c15 	and	w21, w0, #0xff
   98068:	360001e0 	tbz	w0, #0, 980a4 <CUSBStandardHub::Configure()+0x134>
   9806c:	aa1303e0 	mov	x0, x19
   98070:	97ffe180 	bl	90670 <CUSBFunction::GetHost() const>
   98074:	97fff023 	bl	94100 <CUSBHostController::IsPlugAndPlay() const>
   98078:	3607fb00 	tbz	w0, #0, 97fd8 <CUSBStandardHub::Configure()+0x68>
   9807c:	aa1303e0 	mov	x0, x19
   98080:	97fffd48 	bl	975a0 <CUSBStandardHub::StartStatusChangeRequest()>
   98084:	3707faa0 	tbnz	w0, #0, 97fd8 <CUSBStandardHub::Configure()+0x68>
   98088:	94002eda 	bl	a3bf0 <CLogger::Get()>
   9808c:	2a1403e2 	mov	w2, w20
   98090:	aa1603e1 	mov	x1, x22
   98094:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98098:	9103e063 	add	x3, x3, #0xf8
   9809c:	940030c9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   980a0:	17ffffcd 	b	97fd4 <CUSBStandardHub::Configure()+0x64>
   980a4:	94002ed3 	bl	a3bf0 <CLogger::Get()>
   980a8:	2a1403e2 	mov	w2, w20
   980ac:	aa1603e1 	mov	x1, x22
   980b0:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   980b4:	91038063 	add	x3, x3, #0xe0
   980b8:	940030c2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   980bc:	17ffffc6 	b	97fd4 <CUSBStandardHub::Configure()+0x64>
   980c0:	94002ecc 	bl	a3bf0 <CLogger::Get()>
   980c4:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   980c8:	91094021 	add	x1, x1, #0x250
   980cc:	2a1403e2 	mov	w2, w20
   980d0:	91002021 	add	x1, x1, #0x8
   980d4:	900000e3 	adrp	x3, b4000 <_etext+0x19c8>
   980d8:	91182063 	add	x3, x3, #0x608
   980dc:	940030b9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   980e0:	17ffffbd 	b	97fd4 <CUSBStandardHub::Configure()+0x64>
   980e4:	d503201f 	nop
   980e8:	d503201f 	nop
   980ec:	d503201f 	nop

00000000000980f0 <CUSBStandardHub::HandlePortStatusChange()>:
   980f0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   980f4:	910003fd 	mov	x29, sp
   980f8:	a90153f3 	stp	x19, x20, [sp, #16]
   980fc:	aa0003f4 	mov	x20, x0
   98100:	f9401c00 	ldr	x0, [x0, #56]
   98104:	a9025bf5 	stp	x21, x22, [sp, #32]
   98108:	b4001a60 	cbz	x0, 98454 <CUSBStandardHub::HandlePortStatusChange()+0x364>
   9810c:	b9404281 	ldr	w1, [x20, #64]
   98110:	39400016 	ldrb	w22, [x0]
   98114:	71001c3f 	cmp	w1, #0x7
   98118:	54000849 	b.ls	98220 <CUSBStandardHub::HandlePortStatusChange()+0x130>  // b.plast
   9811c:	71003c3f 	cmp	w1, #0xf
   98120:	54001ac8 	b.hi	98478 <CUSBStandardHub::HandlePortStatusChange()+0x388>  // b.pmore
   98124:	39400002 	ldrb	w2, [x0]
   98128:	39400416 	ldrb	w22, [x0, #1]
   9812c:	2a162056 	orr	w22, w2, w22, lsl #8
   98130:	37001222 	tbnz	w2, #0, 98374 <CUSBStandardHub::HandlePortStatusChange()+0x284>
   98134:	a90363f7 	stp	x23, x24, [sp, #48]
   98138:	90000118 	adrp	x24, b8000 <FromUmsd+0x60>
   9813c:	91094318 	add	x24, x24, #0x250
   98140:	91002318 	add	x24, x24, #0x8
   98144:	a9046bf9 	stp	x25, x26, [sp, #64]
   98148:	b00000f9 	adrp	x25, b5000 <_etext+0x29c8>
   9814c:	91058339 	add	x25, x25, #0x160
   98150:	52800013 	mov	w19, #0x0                   	// #0
   98154:	a90573fb 	stp	x27, x28, [sp, #80]
   98158:	2a1303f7 	mov	w23, w19
   9815c:	11000673 	add	w19, w19, #0x1
   98160:	1ad32ac0 	asr	w0, w22, w19
   98164:	36000460 	tbz	w0, #0, 981f0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   98168:	8b374e9a 	add	x26, x20, w23, uxtw #3
   9816c:	aa1403e0 	mov	x0, x20
   98170:	97ffe140 	bl	90670 <CUSBFunction::GetHost() const>
   98174:	aa0003f5 	mov	x21, x0
   98178:	aa1403e0 	mov	x0, x20
   9817c:	97ffe131 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98180:	f9404746 	ldr	x6, [x26, #136]
   98184:	12003e7b 	and	w27, w19, #0xffff
   98188:	aa0003e1 	mov	x1, x0
   9818c:	2a1b03e5 	mov	w5, w27
   98190:	aa1503e0 	mov	x0, x21
   98194:	52800087 	mov	w7, #0x4                   	// #4
   98198:	52800004 	mov	w4, #0x0                   	// #0
   9819c:	52800003 	mov	w3, #0x0                   	// #0
   981a0:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   981a4:	97ffef3b 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   981a8:	7100101f 	cmp	w0, #0x4
   981ac:	540000e0 	b.eq	981c8 <CUSBStandardHub::HandlePortStatusChange()+0xd8>  // b.none
   981b0:	94002e90 	bl	a3bf0 <CLogger::Get()>
   981b4:	2a1303e4 	mov	w4, w19
   981b8:	aa1903e3 	mov	x3, x25
   981bc:	aa1803e1 	mov	x1, x24
   981c0:	52800002 	mov	w2, #0x0                   	// #0
   981c4:	9400307f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   981c8:	f9404741 	ldr	x1, [x26, #136]
   981cc:	39400820 	ldrb	w0, [x1, #2]
   981d0:	39400c35 	ldrb	w21, [x1, #3]
   981d4:	2a152015 	orr	w21, w0, w21, lsl #8
   981d8:	37100fc0 	tbnz	w0, #2, 983d0 <CUSBStandardHub::HandlePortStatusChange()+0x2e0>
   981dc:	37181075 	tbnz	w21, #3, 983e8 <CUSBStandardHub::HandlePortStatusChange()+0x2f8>
   981e0:	37080975 	tbnz	w21, #1, 9830c <CUSBStandardHub::HandlePortStatusChange()+0x21c>
   981e4:	37200615 	tbnz	w21, #4, 982a4 <CUSBStandardHub::HandlePortStatusChange()+0x1b4>
   981e8:	37000235 	tbnz	w21, #0, 9822c <CUSBStandardHub::HandlePortStatusChange()+0x13c>
   981ec:	b9404281 	ldr	w1, [x20, #64]
   981f0:	6b01027f 	cmp	w19, w1
   981f4:	54fffb23 	b.cc	98158 <CUSBStandardHub::HandlePortStatusChange()+0x68>  // b.lo, b.ul, b.last
   981f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   981fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   98200:	a94573fb 	ldp	x27, x28, [sp, #80]
   98204:	aa1403e0 	mov	x0, x20
   98208:	97fffce6 	bl	975a0 <CUSBStandardHub::StartStatusChangeRequest()>
   9820c:	360010e0 	tbz	w0, #0, 98428 <CUSBStandardHub::HandlePortStatusChange()+0x338>
   98210:	a94153f3 	ldp	x19, x20, [sp, #16]
   98214:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98218:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9821c:	d65f03c0 	ret
   98220:	37000ab6 	tbnz	w22, #0, 98374 <CUSBStandardHub::HandlePortStatusChange()+0x284>
   98224:	35fff881 	cbnz	w1, 98134 <CUSBStandardHub::HandlePortStatusChange()+0x44>
   98228:	17fffff7 	b	98204 <CUSBStandardHub::HandlePortStatusChange()+0x114>
   9822c:	aa1403e0 	mov	x0, x20
   98230:	97ffe110 	bl	90670 <CUSBFunction::GetHost() const>
   98234:	aa0003f5 	mov	x21, x0
   98238:	aa1403e0 	mov	x0, x20
   9823c:	97ffe101 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98240:	aa0003e1 	mov	x1, x0
   98244:	2a1b03e5 	mov	w5, w27
   98248:	aa1503e0 	mov	x0, x21
   9824c:	52800007 	mov	w7, #0x0                   	// #0
   98250:	d2800006 	mov	x6, #0x0                   	// #0
   98254:	52800204 	mov	w4, #0x10                  	// #16
   98258:	52800023 	mov	w3, #0x1                   	// #1
   9825c:	52800462 	mov	w2, #0x23                  	// #35
   98260:	97ffef0c 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98264:	37f80ce0 	tbnz	w0, #31, 98400 <CUSBStandardHub::HandlePortStatusChange()+0x310>
   98268:	f9404741 	ldr	x1, [x26, #136]
   9826c:	f9402740 	ldr	x0, [x26, #72]
   98270:	39400021 	ldrb	w1, [x1]
   98274:	36000961 	tbz	w1, #0, 983a0 <CUSBStandardHub::HandlePortStatusChange()+0x2b0>
   98278:	b5fffba0 	cbnz	x0, 981ec <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   9827c:	f9400281 	ldr	x1, [x20]
   98280:	f0ffffe0 	adrp	x0, 97000 <CUSBRequest::AddIsoPacket(unsigned short)+0x80>
   98284:	913d8000 	add	x0, x0, #0xf60
   98288:	f9402821 	ldr	x1, [x1, #80]
   9828c:	eb00003f 	cmp	x1, x0
   98290:	aa1403e0 	mov	x0, x20
   98294:	54001041 	b.ne	9849c <CUSBStandardHub::HandlePortStatusChange()+0x3ac>  // b.any
   98298:	97fffd86 	bl	978b0 <CUSBStandardHub::EnumeratePorts()>
   9829c:	b9404281 	ldr	w1, [x20, #64]
   982a0:	17ffffd4 	b	981f0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   982a4:	aa1403e0 	mov	x0, x20
   982a8:	97ffe0f2 	bl	90670 <CUSBFunction::GetHost() const>
   982ac:	aa0003fc 	mov	x28, x0
   982b0:	aa1403e0 	mov	x0, x20
   982b4:	97ffe0e3 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   982b8:	aa0003e1 	mov	x1, x0
   982bc:	2a1b03e5 	mov	w5, w27
   982c0:	aa1c03e0 	mov	x0, x28
   982c4:	52800007 	mov	w7, #0x0                   	// #0
   982c8:	d2800006 	mov	x6, #0x0                   	// #0
   982cc:	52800284 	mov	w4, #0x14                  	// #20
   982d0:	52800023 	mov	w3, #0x1                   	// #1
   982d4:	52800462 	mov	w2, #0x23                  	// #35
   982d8:	97ffeeee 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   982dc:	36fff860 	tbz	w0, #31, 981e8 <CUSBStandardHub::HandlePortStatusChange()+0xf8>
   982e0:	94002e44 	bl	a3bf0 <CLogger::Get()>
   982e4:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   982e8:	91094021 	add	x1, x1, #0x250
   982ec:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   982f0:	2a1303e4 	mov	w4, w19
   982f4:	91002021 	add	x1, x1, #0x8
   982f8:	91084063 	add	x3, x3, #0x210
   982fc:	52800002 	mov	w2, #0x0                   	// #0
   98300:	94003030 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98304:	3607f755 	tbz	w21, #0, 981ec <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   98308:	17ffffc9 	b	9822c <CUSBStandardHub::HandlePortStatusChange()+0x13c>
   9830c:	aa1403e0 	mov	x0, x20
   98310:	97ffe0d8 	bl	90670 <CUSBFunction::GetHost() const>
   98314:	aa0003fc 	mov	x28, x0
   98318:	aa1403e0 	mov	x0, x20
   9831c:	97ffe0c9 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98320:	aa0003e1 	mov	x1, x0
   98324:	2a1b03e5 	mov	w5, w27
   98328:	aa1c03e0 	mov	x0, x28
   9832c:	52800007 	mov	w7, #0x0                   	// #0
   98330:	d2800006 	mov	x6, #0x0                   	// #0
   98334:	52800224 	mov	w4, #0x11                  	// #17
   98338:	52800023 	mov	w3, #0x1                   	// #1
   9833c:	52800462 	mov	w2, #0x23                  	// #35
   98340:	97ffeed4 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98344:	36fff500 	tbz	w0, #31, 981e4 <CUSBStandardHub::HandlePortStatusChange()+0xf4>
   98348:	94002e2a 	bl	a3bf0 <CLogger::Get()>
   9834c:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98350:	91094021 	add	x1, x1, #0x250
   98354:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98358:	2a1303e4 	mov	w4, w19
   9835c:	91002021 	add	x1, x1, #0x8
   98360:	9107a063 	add	x3, x3, #0x1e8
   98364:	52800002 	mov	w2, #0x0                   	// #0
   98368:	94003016 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9836c:	3627f3f5 	tbz	w21, #4, 981e8 <CUSBStandardHub::HandlePortStatusChange()+0xf8>
   98370:	17ffffcd 	b	982a4 <CUSBStandardHub::HandlePortStatusChange()+0x1b4>
   98374:	94002e1f 	bl	a3bf0 <CLogger::Get()>
   98378:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   9837c:	91094021 	add	x1, x1, #0x250
   98380:	91002021 	add	x1, x1, #0x8
   98384:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98388:	52800002 	mov	w2, #0x0                   	// #0
   9838c:	91050063 	add	x3, x3, #0x140
   98390:	9400300c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98394:	b9404281 	ldr	w1, [x20, #64]
   98398:	35ffece1 	cbnz	w1, 98134 <CUSBStandardHub::HandlePortStatusChange()+0x44>
   9839c:	17ffff9a 	b	98204 <CUSBStandardHub::HandlePortStatusChange()+0x114>
   983a0:	b4fff260 	cbz	x0, 981ec <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   983a4:	2a1703e1 	mov	w1, w23
   983a8:	aa1403e0 	mov	x0, x20
   983ac:	97fffc31 	bl	97470 <CUSBStandardHub::DisablePort(unsigned int)>
   983b0:	3607f1e0 	tbz	w0, #0, 981ec <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   983b4:	f9402740 	ldr	x0, [x26, #72]
   983b8:	b4000080 	cbz	x0, 983c8 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
   983bc:	f9400001 	ldr	x1, [x0]
   983c0:	f9400421 	ldr	x1, [x1, #8]
   983c4:	d63f0020 	blr	x1
   983c8:	f900275f 	str	xzr, [x26, #72]
   983cc:	17ffff88 	b	981ec <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   983d0:	900000e1 	adrp	x1, b4000 <_etext+0x19c8>
   983d4:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   983d8:	913a4021 	add	x1, x1, #0xe90
   983dc:	91062000 	add	x0, x0, #0x188
   983e0:	528046c2 	mov	w2, #0x236                 	// #566
   983e4:	940026c7 	bl	a1f00 <assertion_failed>
   983e8:	900000e1 	adrp	x1, b4000 <_etext+0x19c8>
   983ec:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   983f0:	913a4021 	add	x1, x1, #0xe90
   983f4:	9106e000 	add	x0, x0, #0x1b8
   983f8:	528046e2 	mov	w2, #0x237                 	// #567
   983fc:	940026c1 	bl	a1f00 <assertion_failed>
   98400:	94002dfc 	bl	a3bf0 <CLogger::Get()>
   98404:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98408:	91094021 	add	x1, x1, #0x250
   9840c:	2a1303e4 	mov	w4, w19
   98410:	91002021 	add	x1, x1, #0x8
   98414:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98418:	52800002 	mov	w2, #0x0                   	// #0
   9841c:	9108e063 	add	x3, x3, #0x238
   98420:	94002fe8 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98424:	17ffff91 	b	98268 <CUSBStandardHub::HandlePortStatusChange()+0x178>
   98428:	94002df2 	bl	a3bf0 <CLogger::Get()>
   9842c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98430:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98434:	91094021 	add	x1, x1, #0x250
   98438:	900000e3 	adrp	x3, b4000 <_etext+0x19c8>
   9843c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98440:	91002021 	add	x1, x1, #0x8
   98444:	a8c67bfd 	ldp	x29, x30, [sp], #96
   98448:	91290063 	add	x3, x3, #0xa40
   9844c:	52800022 	mov	w2, #0x1                   	// #1
   98450:	14002fdc 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98454:	900000e1 	adrp	x1, b4000 <_etext+0x19c8>
   98458:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   9845c:	913a4021 	add	x1, x1, #0xe90
   98460:	91044000 	add	x0, x0, #0x110
   98464:	52804242 	mov	w2, #0x212                 	// #530
   98468:	a90363f7 	stp	x23, x24, [sp, #48]
   9846c:	a9046bf9 	stp	x25, x26, [sp, #64]
   98470:	a90573fb 	stp	x27, x28, [sp, #80]
   98474:	940026a3 	bl	a1f00 <assertion_failed>
   98478:	900000e1 	adrp	x1, b4000 <_etext+0x19c8>
   9847c:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   98480:	913a4021 	add	x1, x1, #0xe90
   98484:	9104c000 	add	x0, x0, #0x130
   98488:	528042c2 	mov	w2, #0x216                 	// #534
   9848c:	a90363f7 	stp	x23, x24, [sp, #48]
   98490:	a9046bf9 	stp	x25, x26, [sp, #64]
   98494:	a90573fb 	stp	x27, x28, [sp, #80]
   98498:	9400269a 	bl	a1f00 <assertion_failed>
   9849c:	d63f0020 	blr	x1
   984a0:	b9404281 	ldr	w1, [x20, #64]
   984a4:	17ffff53 	b	981f0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
	...

00000000000984b0 <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE>:
   984b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   984b4:	528007e2 	mov	w2, #0x3f                  	// #63
   984b8:	52800021 	mov	w1, #0x1                   	// #1
   984bc:	910003fd 	mov	x29, sp
   984c0:	f9000bf3 	str	x19, [sp, #16]
   984c4:	d0000193 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   984c8:	91302273 	add	x19, x19, #0xc08
   984cc:	aa1303e0 	mov	x0, x19
   984d0:	94004f14 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   984d4:	aa1303e1 	mov	x1, x19
   984d8:	d0000182 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   984dc:	91336042 	add	x2, x2, #0xcd8
   984e0:	f9400bf3 	ldr	x19, [sp, #16]
   984e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   984e8:	d0000180 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   984ec:	f945a400 	ldr	x0, [x0, #2888]
   984f0:	14004534 	b	a99c0 <__cxa_atexit>
	...

0000000000098500 <CUSBString::CUSBString(CUSBDevice*)>:
   98500:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98504:	910003fd 	mov	x29, sp
   98508:	a90153f3 	stp	x19, x20, [sp, #16]
   9850c:	aa0003f3 	mov	x19, x0
   98510:	d2800400 	mov	x0, #0x20                  	// #32
   98514:	a9007e61 	stp	x1, xzr, [x19]
   98518:	94004d86 	bl	abb30 <operator new(unsigned long)>
   9851c:	aa0003f4 	mov	x20, x0
   98520:	94003f00 	bl	a8120 <CString::CString()>
   98524:	f9000a74 	str	x20, [x19, #16]
   98528:	f9400260 	ldr	x0, [x19]
   9852c:	b4000080 	cbz	x0, 9853c <CUSBString::CUSBString(CUSBDevice*)+0x3c>
   98530:	a94153f3 	ldp	x19, x20, [sp, #16]
   98534:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98538:	d65f03c0 	ret
   9853c:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98540:	f00000c0 	adrp	x0, b3000 <_etext+0x9c8>
   98544:	9109a021 	add	x1, x1, #0x268
   98548:	912b8000 	add	x0, x0, #0xae0
   9854c:	52800462 	mov	w2, #0x23                  	// #35
   98550:	9400266c 	bl	a1f00 <assertion_failed>
   98554:	d503201f 	nop
   98558:	d503201f 	nop
   9855c:	d503201f 	nop

0000000000098560 <CUSBString::CUSBString(CUSBString*)>:
   98560:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98564:	910003fd 	mov	x29, sp
   98568:	a90153f3 	stp	x19, x20, [sp, #16]
   9856c:	aa0003f3 	mov	x19, x0
   98570:	aa0103f4 	mov	x20, x1
   98574:	f90013f5 	str	x21, [sp, #32]
   98578:	d2800400 	mov	x0, #0x20                  	// #32
   9857c:	f900067f 	str	xzr, [x19, #8]
   98580:	94004d6c 	bl	abb30 <operator new(unsigned long)>
   98584:	aa0003f5 	mov	x21, x0
   98588:	94003ee6 	bl	a8120 <CString::CString()>
   9858c:	f9000a75 	str	x21, [x19, #16]
   98590:	b4000334 	cbz	x20, 985f4 <CUSBString::CUSBString(CUSBString*)+0x94>
   98594:	a9400281 	ldp	x1, x0, [x20]
   98598:	f9000261 	str	x1, [x19]
   9859c:	b4000120 	cbz	x0, 985c0 <CUSBString::CUSBString(CUSBString*)+0x60>
   985a0:	39400000 	ldrb	w0, [x0]
   985a4:	94004d6b 	bl	abb50 <operator new[](unsigned long)>
   985a8:	f9000660 	str	x0, [x19, #8]
   985ac:	f9400681 	ldr	x1, [x20, #8]
   985b0:	39400022 	ldrb	w2, [x1]
   985b4:	94004b05 	bl	ab1c8 <memcpy>
   985b8:	f9400a60 	ldr	x0, [x19, #16]
   985bc:	b4000100 	cbz	x0, 985dc <CUSBString::CUSBString(CUSBString*)+0x7c>
   985c0:	f9400a80 	ldr	x0, [x20, #16]
   985c4:	b4000240 	cbz	x0, 9860c <CUSBString::CUSBString(CUSBString*)+0xac>
   985c8:	f94013f5 	ldr	x21, [sp, #32]
   985cc:	f9000a60 	str	x0, [x19, #16]
   985d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   985d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   985d8:	d65f03c0 	ret
   985dc:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   985e0:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   985e4:	9109a021 	add	x1, x1, #0x268
   985e8:	9109e000 	add	x0, x0, #0x278
   985ec:	528006a2 	mov	w2, #0x35                  	// #53
   985f0:	94002644 	bl	a1f00 <assertion_failed>
   985f4:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   985f8:	900000e0 	adrp	x0, b4000 <_etext+0x19c8>
   985fc:	9109a021 	add	x1, x1, #0x268
   98600:	9108a000 	add	x0, x0, #0x228
   98604:	52800562 	mov	w2, #0x2b                  	// #43
   98608:	9400263e 	bl	a1f00 <assertion_failed>
   9860c:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98610:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   98614:	9109a021 	add	x1, x1, #0x268
   98618:	910a2000 	add	x0, x0, #0x288
   9861c:	528006c2 	mov	w2, #0x36                  	// #54
   98620:	94002638 	bl	a1f00 <assertion_failed>
   98624:	d503201f 	nop
   98628:	d503201f 	nop
   9862c:	d503201f 	nop

0000000000098630 <CUSBString::~CUSBString()>:
   98630:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98634:	910003fd 	mov	x29, sp
   98638:	f9000bf3 	str	x19, [sp, #16]
   9863c:	aa0003f3 	mov	x19, x0
   98640:	f9400800 	ldr	x0, [x0, #16]
   98644:	b4000080 	cbz	x0, 98654 <CUSBString::~CUSBString()+0x24>
   98648:	f9400001 	ldr	x1, [x0]
   9864c:	f9400421 	ldr	x1, [x1, #8]
   98650:	d63f0020 	blr	x1
   98654:	f9400660 	ldr	x0, [x19, #8]
   98658:	f9000a7f 	str	xzr, [x19, #16]
   9865c:	b4000080 	cbz	x0, 9866c <CUSBString::~CUSBString()+0x3c>
   98660:	f9400bf3 	ldr	x19, [sp, #16]
   98664:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98668:	14004d4a 	b	abb90 <operator delete[](void*)>
   9866c:	f9400bf3 	ldr	x19, [sp, #16]
   98670:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98674:	d65f03c0 	ret
   98678:	d503201f 	nop
   9867c:	d503201f 	nop

0000000000098680 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   98680:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   98684:	910003fd 	mov	x29, sp
   98688:	a90153f3 	stp	x19, x20, [sp, #16]
   9868c:	a9025bf5 	stp	x21, x22, [sp, #32]
   98690:	72001c35 	ands	w21, w1, #0xff
   98694:	a90363f7 	stp	x23, x24, [sp, #48]
   98698:	d10043ff 	sub	sp, sp, #0x10
   9869c:	540009c0 	b.eq	987d4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>  // b.none
   986a0:	aa0003f3 	mov	x19, x0
   986a4:	12003c56 	and	w22, w2, #0xffff
   986a8:	f9400400 	ldr	x0, [x0, #8]
   986ac:	b4000040 	cbz	x0, 986b4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x34>
   986b0:	94004d38 	bl	abb90 <operator delete[](void*)>
   986b4:	d2800080 	mov	x0, #0x4                   	// #4
   986b8:	94004d26 	bl	abb50 <operator new[](unsigned long)>
   986bc:	f9000660 	str	x0, [x19, #8]
   986c0:	f9400260 	ldr	x0, [x19]
   986c4:	b4000940 	cbz	x0, 987ec <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   986c8:	97ffd7d2 	bl	8e610 <CUSBDevice::GetHost() const>
   986cc:	aa0003f4 	mov	x20, x0
   986d0:	f9400260 	ldr	x0, [x19]
   986d4:	97ffd7c3 	bl	8e5e0 <CUSBDevice::GetEndpoint0() const>
   986d8:	aa0003e1 	mov	x1, x0
   986dc:	f9400664 	ldr	x4, [x19, #8]
   986e0:	2a1603e7 	mov	w7, w22
   986e4:	aa1403e0 	mov	x0, x20
   986e8:	2a1503e3 	mov	w3, w21
   986ec:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   986f0:	52800085 	mov	w5, #0x4                   	// #4
   986f4:	52800062 	mov	w2, #0x3                   	// #3
   986f8:	97ffee2e 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   986fc:	37f805e0 	tbnz	w0, #31, 987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>
   98700:	f9400660 	ldr	x0, [x19, #8]
   98704:	39400014 	ldrb	w20, [x0]
   98708:	7100069f 	cmp	w20, #0x1
   9870c:	54000569 	b.ls	987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>  // b.plast
   98710:	37000554 	tbnz	w20, #0, 987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>
   98714:	39400417 	ldrb	w23, [x0, #1]
   98718:	71000eff 	cmp	w23, #0x3
   9871c:	540004e1 	b.ne	987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>  // b.any
   98720:	7100129f 	cmp	w20, #0x4
   98724:	54000708 	b.hi	98804 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x184>  // b.pmore
   98728:	71000a9f 	cmp	w20, #0x2
   9872c:	54000d20 	b.eq	988d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x250>  // b.none
   98730:	7100129f 	cmp	w20, #0x4
   98734:	d2800023 	mov	x3, #0x1                   	// #1
   98738:	910123b4 	add	x20, x29, #0x48
   9873c:	54000d61 	b.ne	988e8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x268>  // b.any
   98740:	d2800004 	mov	x4, #0x0                   	// #0
   98744:	52800be1 	mov	w1, #0x5f                  	// #95
   98748:	2a0403e6 	mov	w6, w4
   9874c:	91000484 	add	x4, x4, #0x1
   98750:	8b060402 	add	x2, x0, x6, lsl #1
   98754:	39400845 	ldrb	w5, [x2, #2]
   98758:	39400c42 	ldrb	w2, [x2, #3]
   9875c:	2a0220a2 	orr	w2, w5, w2, lsl #8
   98760:	51008045 	sub	w5, w2, #0x20
   98764:	12003ca5 	and	w5, w5, #0xffff
   98768:	710178bf 	cmp	w5, #0x5e
   9876c:	7a408844 	ccmp	w2, #0x0, #0x4, hi	// hi = pmore
   98770:	1a810042 	csel	w2, w2, w1, eq	// eq = none
   98774:	38266a82 	strb	w2, [x20, x6]
   98778:	eb03009f 	cmp	x4, x3
   9877c:	54fffe61 	b.ne	98748 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc8>  // b.any
   98780:	f9400a60 	ldr	x0, [x19, #16]
   98784:	38246a9f 	strb	wzr, [x20, x4]
   98788:	b4000080 	cbz	x0, 98798 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x118>
   9878c:	f9400001 	ldr	x1, [x0]
   98790:	f9400421 	ldr	x1, [x1, #8]
   98794:	d63f0020 	blr	x1
   98798:	d2800400 	mov	x0, #0x20                  	// #32
   9879c:	94004ce5 	bl	abb30 <operator new(unsigned long)>
   987a0:	aa1403e1 	mov	x1, x20
   987a4:	aa0003f4 	mov	x20, x0
   987a8:	94003e66 	bl	a8140 <CString::CString(char const*)>
   987ac:	f9000a74 	str	x20, [x19, #16]
   987b0:	52800020 	mov	w0, #0x1                   	// #1
   987b4:	14000002 	b	987bc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x13c>
   987b8:	52800000 	mov	w0, #0x0                   	// #0
   987bc:	910003bf 	mov	sp, x29
   987c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   987c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   987c8:	a94363f7 	ldp	x23, x24, [sp, #48]
   987cc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   987d0:	d65f03c0 	ret
   987d4:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   987d8:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   987dc:	9109a021 	add	x1, x1, #0x268
   987e0:	910a8000 	add	x0, x0, #0x2a0
   987e4:	528008e2 	mov	w2, #0x47                  	// #71
   987e8:	940025c6 	bl	a1f00 <assertion_failed>
   987ec:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   987f0:	f00000c0 	adrp	x0, b3000 <_etext+0x9c8>
   987f4:	9109a021 	add	x1, x1, #0x268
   987f8:	912b8000 	add	x0, x0, #0xae0
   987fc:	528009a2 	mov	w2, #0x4d                  	// #77
   98800:	940025c0 	bl	a1f00 <assertion_failed>
   98804:	d2800041 	mov	x1, #0x2                   	// #2
   98808:	94004cea 	bl	abbb0 <operator delete(void*, unsigned long)>
   9880c:	92401e80 	and	x0, x20, #0xff
   98810:	94004cd0 	bl	abb50 <operator new[](unsigned long)>
   98814:	aa0003e1 	mov	x1, x0
   98818:	f9400260 	ldr	x0, [x19]
   9881c:	f9000661 	str	x1, [x19, #8]
   98820:	97ffd77c 	bl	8e610 <CUSBDevice::GetHost() const>
   98824:	aa0003f8 	mov	x24, x0
   98828:	f9400260 	ldr	x0, [x19]
   9882c:	97ffd76d 	bl	8e5e0 <CUSBDevice::GetEndpoint0() const>
   98830:	aa0003e1 	mov	x1, x0
   98834:	f9400664 	ldr	x4, [x19, #8]
   98838:	2a1603e7 	mov	w7, w22
   9883c:	2a1503e3 	mov	w3, w21
   98840:	2a1703e2 	mov	w2, w23
   98844:	aa1803e0 	mov	x0, x24
   98848:	2a1403e5 	mov	w5, w20
   9884c:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   98850:	97ffedd8 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   98854:	6b14001f 	cmp	w0, w20
   98858:	54fffb01 	b.ne	987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>  // b.any
   9885c:	f9400660 	ldr	x0, [x19, #8]
   98860:	39400001 	ldrb	w1, [x0]
   98864:	6b14003f 	cmp	w1, w20
   98868:	54fffa81 	b.ne	987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>  // b.any
   9886c:	39400401 	ldrb	w1, [x0, #1]
   98870:	71000c3f 	cmp	w1, #0x3
   98874:	54fffa21 	b.ne	987b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x138>  // b.any
   98878:	37000394 	tbnz	w20, #0, 988e8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x268>
   9887c:	51000a83 	sub	w3, w20, #0x2
   98880:	13017c63 	asr	w3, w3, #1
   98884:	93407c63 	sxtw	x3, w3
   98888:	91004061 	add	x1, x3, #0x10
   9888c:	9270bc22 	and	x2, x1, #0xffffffffffff0000
   98890:	927cec21 	and	x1, x1, #0xfffffffffffffff0
   98894:	cb2263e2 	sub	x2, sp, x2
   98898:	eb2263ff 	cmp	sp, x2
   9889c:	540000a0 	b.eq	988b0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x230>  // b.none
   988a0:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   988a4:	eb2263ff 	cmp	sp, x2
   988a8:	f90203ff 	str	xzr, [sp, #1024]
   988ac:	54ffffa1 	b.ne	988a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x220>  // b.any
   988b0:	92403c21 	and	x1, x1, #0xffff
   988b4:	cb2163ff 	sub	sp, sp, x1
   988b8:	f110003f 	cmp	x1, #0x400
   988bc:	f90003ff 	str	xzr, [sp]
   988c0:	54000043 	b.cc	988c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x248>  // b.lo, b.ul, b.last
   988c4:	f90203ff 	str	xzr, [sp, #1024]
   988c8:	910043f4 	add	x20, sp, #0x10
   988cc:	17ffff9d 	b	98740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc0>
   988d0:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   988d4:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   988d8:	9109a021 	add	x1, x1, #0x268
   988dc:	910ac000 	add	x0, x0, #0x2b0
   988e0:	52800ea2 	mov	w2, #0x75                  	// #117
   988e4:	94002587 	bl	a1f00 <assertion_failed>
   988e8:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   988ec:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   988f0:	9109a021 	add	x1, x1, #0x268
   988f4:	910b4000 	add	x0, x0, #0x2d0
   988f8:	52800ec2 	mov	w2, #0x76                  	// #118
   988fc:	94002581 	bl	a1f00 <assertion_failed>

0000000000098900 <CUSBString::Get() const>:
   98900:	f9400800 	ldr	x0, [x0, #16]
   98904:	14003e4b 	b	a8230 <CString::operator char const*() const>
   98908:	d503201f 	nop
   9890c:	d503201f 	nop

0000000000098910 <CUSBString::GetLanguageID()>:
   98910:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98914:	910003fd 	mov	x29, sp
   98918:	a9025bf5 	stp	x21, x22, [sp, #32]
   9891c:	aa0003f5 	mov	x21, x0
   98920:	d2800080 	mov	x0, #0x4                   	// #4
   98924:	a90153f3 	stp	x19, x20, [sp, #16]
   98928:	94004c8a 	bl	abb50 <operator new[](unsigned long)>
   9892c:	f94002a1 	ldr	x1, [x21]
   98930:	b4000ba1 	cbz	x1, 98aa4 <CUSBString::GetLanguageID()+0x194>
   98934:	aa0003f3 	mov	x19, x0
   98938:	aa0103e0 	mov	x0, x1
   9893c:	97ffd735 	bl	8e610 <CUSBDevice::GetHost() const>
   98940:	aa0003f4 	mov	x20, x0
   98944:	f94002a0 	ldr	x0, [x21]
   98948:	97ffd726 	bl	8e5e0 <CUSBDevice::GetEndpoint0() const>
   9894c:	aa0003e1 	mov	x1, x0
   98950:	aa1303e4 	mov	x4, x19
   98954:	aa1403e0 	mov	x0, x20
   98958:	52800007 	mov	w7, #0x0                   	// #0
   9895c:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   98960:	52800085 	mov	w5, #0x4                   	// #4
   98964:	52800003 	mov	w3, #0x0                   	// #0
   98968:	52800062 	mov	w2, #0x3                   	// #3
   9896c:	97ffed91 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   98970:	37f80300 	tbnz	w0, #31, 989d0 <CUSBString::GetLanguageID()+0xc0>
   98974:	39400274 	ldrb	w20, [x19]
   98978:	71000e9f 	cmp	w20, #0x3
   9897c:	540002a9 	b.ls	989d0 <CUSBString::GetLanguageID()+0xc0>  // b.plast
   98980:	37000294 	tbnz	w20, #0, 989d0 <CUSBString::GetLanguageID()+0xc0>
   98984:	39400676 	ldrb	w22, [x19, #1]
   98988:	71000edf 	cmp	w22, #0x3
   9898c:	54000221 	b.ne	989d0 <CUSBString::GetLanguageID()+0xc0>  // b.any
   98990:	7100129f 	cmp	w20, #0x4
   98994:	540002e1 	b.ne	989f0 <CUSBString::GetLanguageID()+0xe0>  // b.any
   98998:	51000a82 	sub	w2, w20, #0x2
   9899c:	d2800001 	mov	x1, #0x0                   	// #0
   989a0:	13017c42 	asr	w2, w2, #1
   989a4:	93407c42 	sxtw	x2, w2
   989a8:	14000004 	b	989b8 <CUSBString::GetLanguageID()+0xa8>
   989ac:	91000421 	add	x1, x1, #0x1
   989b0:	eb01005f 	cmp	x2, x1
   989b4:	54000640 	b.eq	98a7c <CUSBString::GetLanguageID()+0x16c>  // b.none
   989b8:	8b214660 	add	x0, x19, w1, uxtw #1
   989bc:	39400803 	ldrb	w3, [x0, #2]
   989c0:	39400c00 	ldrb	w0, [x0, #3]
   989c4:	2a002060 	orr	w0, w3, w0, lsl #8
   989c8:	7110241f 	cmp	w0, #0x409
   989cc:	54ffff01 	b.ne	989ac <CUSBString::GetLanguageID()+0x9c>  // b.any
   989d0:	aa1303e0 	mov	x0, x19
   989d4:	52808133 	mov	w19, #0x409                 	// #1033
   989d8:	94004c6e 	bl	abb90 <operator delete[](void*)>
   989dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   989e0:	2a1303e0 	mov	w0, w19
   989e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   989e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   989ec:	d65f03c0 	ret
   989f0:	aa1303e0 	mov	x0, x19
   989f4:	94004c67 	bl	abb90 <operator delete[](void*)>
   989f8:	92401e80 	and	x0, x20, #0xff
   989fc:	94004c55 	bl	abb50 <operator new[](unsigned long)>
   98a00:	aa0003f3 	mov	x19, x0
   98a04:	f94002a0 	ldr	x0, [x21]
   98a08:	97ffd702 	bl	8e610 <CUSBDevice::GetHost() const>
   98a0c:	aa0003e1 	mov	x1, x0
   98a10:	f94002a0 	ldr	x0, [x21]
   98a14:	aa0103f5 	mov	x21, x1
   98a18:	97ffd6f2 	bl	8e5e0 <CUSBDevice::GetEndpoint0() const>
   98a1c:	aa0003e1 	mov	x1, x0
   98a20:	2a1603e2 	mov	w2, w22
   98a24:	aa1503e0 	mov	x0, x21
   98a28:	2a1403e5 	mov	w5, w20
   98a2c:	aa1303e4 	mov	x4, x19
   98a30:	52800007 	mov	w7, #0x0                   	// #0
   98a34:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   98a38:	52800003 	mov	w3, #0x0                   	// #0
   98a3c:	97ffed5d 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   98a40:	6b14001f 	cmp	w0, w20
   98a44:	54fffc61 	b.ne	989d0 <CUSBString::GetLanguageID()+0xc0>  // b.any
   98a48:	39400260 	ldrb	w0, [x19]
   98a4c:	6b14001f 	cmp	w0, w20
   98a50:	54fffc01 	b.ne	989d0 <CUSBString::GetLanguageID()+0xc0>  // b.any
   98a54:	39400660 	ldrb	w0, [x19, #1]
   98a58:	71000c1f 	cmp	w0, #0x3
   98a5c:	54fffba1 	b.ne	989d0 <CUSBString::GetLanguageID()+0xc0>  // b.any
   98a60:	3607f9d4 	tbz	w20, #0, 98998 <CUSBString::GetLanguageID()+0x88>
   98a64:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98a68:	b00000e0 	adrp	x0, b5000 <_etext+0x29c8>
   98a6c:	9109a021 	add	x1, x1, #0x268
   98a70:	910be000 	add	x0, x0, #0x2f8
   98a74:	52801922 	mov	w2, #0xc9                  	// #201
   98a78:	94002522 	bl	a1f00 <assertion_failed>
   98a7c:	39400a61 	ldrb	w1, [x19, #2]
   98a80:	aa1303e0 	mov	x0, x19
   98a84:	39400e73 	ldrb	w19, [x19, #3]
   98a88:	2a132033 	orr	w19, w1, w19, lsl #8
   98a8c:	94004c41 	bl	abb90 <operator delete[](void*)>
   98a90:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98a94:	2a1303e0 	mov	w0, w19
   98a98:	a94153f3 	ldp	x19, x20, [sp, #16]
   98a9c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98aa0:	d65f03c0 	ret
   98aa4:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98aa8:	f00000c0 	adrp	x0, b3000 <_etext+0x9c8>
   98aac:	9109a021 	add	x1, x1, #0x268
   98ab0:	912b8000 	add	x0, x0, #0xae0
   98ab4:	52801362 	mov	w2, #0x9b                  	// #155
   98ab8:	94002512 	bl	a1f00 <assertion_failed>
   98abc:	00000000 	udf	#0

0000000000098ac0 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   98ac0:	b0000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   98ac4:	91306021 	add	x1, x1, #0xc18
   98ac8:	f9000001 	str	x1, [x0]
   98acc:	14001a71 	b	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000098ad0 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   98ad0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98ad4:	b0000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   98ad8:	91306021 	add	x1, x1, #0xc18
   98adc:	910003fd 	mov	x29, sp
   98ae0:	f9000bf3 	str	x19, [sp, #16]
   98ae4:	aa0003f3 	mov	x19, x0
   98ae8:	f9000001 	str	x1, [x0]
   98aec:	94001a69 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   98af0:	aa1303e0 	mov	x0, x19
   98af4:	d2800f01 	mov	x1, #0x78                  	// #120
   98af8:	f9400bf3 	ldr	x19, [sp, #16]
   98afc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98b00:	14004c2c 	b	abbb0 <operator delete(void*, unsigned long)>
   98b04:	d503201f 	nop
   98b08:	d503201f 	nop
   98b0c:	d503201f 	nop

0000000000098b10 <CUSBSerialCH341Device::SetBaudRate(unsigned int)>:
   98b10:	529e0003 	mov	w3, #0xf000                	// #61440
   98b14:	72ab6b23 	movk	w3, #0x5b59, lsl #16
   98b18:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98b1c:	529ffe04 	mov	w4, #0xfff0                	// #65520
   98b20:	52800062 	mov	w2, #0x3                   	// #3
   98b24:	1ac10863 	udiv	w3, w3, w1
   98b28:	910003fd 	mov	x29, sp
   98b2c:	a90153f3 	stp	x19, x20, [sp, #16]
   98b30:	aa0003f4 	mov	x20, x0
   98b34:	a9025bf5 	stp	x21, x22, [sp, #32]
   98b38:	6b04007f 	cmp	w3, w4
   98b3c:	2a0103f5 	mov	w21, w1
   98b40:	54000129 	b.ls	98b64 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x54>  // b.plast
   98b44:	d503201f 	nop
   98b48:	51000442 	sub	w2, w2, #0x1
   98b4c:	53037c63 	lsr	w3, w3, #3
   98b50:	72003c42 	ands	w2, w2, #0xffff
   98b54:	7a441060 	ccmp	w3, w4, #0x0, ne	// ne = any
   98b58:	54ffff88 	b.hi	98b48 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x38>  // b.pmore
   98b5c:	6b04007f 	cmp	w3, w4
   98b60:	54000368 	b.hi	98bcc <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xbc>  // b.pmore
   98b64:	4b0303e5 	neg	w5, w3
   98b68:	aa1403e0 	mov	x0, x20
   98b6c:	12181ca5 	and	w5, w5, #0xff00
   98b70:	2a0200a5 	orr	w5, w5, w2
   98b74:	321900b3 	orr	w19, w5, #0x80
   98b78:	97ffdebe 	bl	90670 <CUSBFunction::GetHost() const>
   98b7c:	aa0003f6 	mov	x22, x0
   98b80:	b40004a0 	cbz	x0, 98c14 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x104>
   98b84:	aa1403e0 	mov	x0, x20
   98b88:	97ffdeae 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98b8c:	2a1303e5 	mov	w5, w19
   98b90:	aa0003e1 	mov	x1, x0
   98b94:	52800007 	mov	w7, #0x0                   	// #0
   98b98:	aa1603e0 	mov	x0, x22
   98b9c:	d2800006 	mov	x6, #0x0                   	// #0
   98ba0:	52826244 	mov	w4, #0x1312                	// #4882
   98ba4:	12800ca3 	mov	w3, #0xffffff9a            	// #-102
   98ba8:	52800802 	mov	w2, #0x40                  	// #64
   98bac:	97ffecb9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98bb0:	37f80200 	tbnz	w0, #31, 98bf0 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xe0>
   98bb4:	52800020 	mov	w0, #0x1                   	// #1
   98bb8:	b9002a95 	str	w21, [x20, #40]
   98bbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   98bc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98bc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98bc8:	d65f03c0 	ret
   98bcc:	94002c09 	bl	a3bf0 <CLogger::Get()>
   98bd0:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98bd4:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98bd8:	910c8063 	add	x3, x3, #0x320
   98bdc:	91098021 	add	x1, x1, #0x260
   98be0:	52800022 	mov	w2, #0x1                   	// #1
   98be4:	94002df7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98be8:	52800000 	mov	w0, #0x0                   	// #0
   98bec:	17fffff4 	b	98bbc <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xac>
   98bf0:	94002c00 	bl	a3bf0 <CLogger::Get()>
   98bf4:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98bf8:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98bfc:	910d2063 	add	x3, x3, #0x348
   98c00:	91098021 	add	x1, x1, #0x260
   98c04:	52800022 	mov	w2, #0x1                   	// #1
   98c08:	94002dee 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98c0c:	52800000 	mov	w0, #0x0                   	// #0
   98c10:	17ffffeb 	b	98bbc <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xac>
   98c14:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98c18:	900000e0 	adrp	x0, b4000 <_etext+0x19c8>
   98c1c:	910cc021 	add	x1, x1, #0x330
   98c20:	91330000 	add	x0, x0, #0xcc0
   98c24:	528010e2 	mov	w2, #0x87                  	// #135
   98c28:	940024b6 	bl	a1f00 <assertion_failed>
   98c2c:	d503201f 	nop

0000000000098c30 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>:
   98c30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98c34:	d2800002 	mov	x2, #0x0                   	// #0
   98c38:	910003fd 	mov	x29, sp
   98c3c:	f9000bf3 	str	x19, [sp, #16]
   98c40:	aa0003f3 	mov	x19, x0
   98c44:	94001b97 	bl	9faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   98c48:	b0000180 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   98c4c:	91306000 	add	x0, x0, #0xc18
   98c50:	f9000260 	str	x0, [x19]
   98c54:	f9400bf3 	ldr	x19, [sp, #16]
   98c58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98c5c:	d65f03c0 	ret

0000000000098c60 <CUSBSerialCH341Device::GetDeviceIDTable()>:
   98c60:	90000100 	adrp	x0, b8000 <FromUmsd+0x60>
   98c64:	91098000 	add	x0, x0, #0x260
   98c68:	91002000 	add	x0, x0, #0x8
   98c6c:	d65f03c0 	ret

0000000000098c70 <CUSBSerialCH341Device::Configure()>:
   98c70:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   98c74:	910003fd 	mov	x29, sp
   98c78:	a90153f3 	stp	x19, x20, [sp, #16]
   98c7c:	aa0003f4 	mov	x20, x0
   98c80:	94001bf0 	bl	9fc40 <CUSBSerialHostDevice::Configure()>
   98c84:	36000980 	tbz	w0, #0, 98db4 <CUSBSerialCH341Device::Configure()+0x144>
   98c88:	aa1403e0 	mov	x0, x20
   98c8c:	f90013f5 	str	x21, [sp, #32]
   98c90:	97ffde78 	bl	90670 <CUSBFunction::GetHost() const>
   98c94:	aa0003f5 	mov	x21, x0
   98c98:	b4000a20 	cbz	x0, 98ddc <CUSBSerialCH341Device::Configure()+0x16c>
   98c9c:	9101bff3 	add	x19, sp, #0x6f
   98ca0:	aa1403e0 	mov	x0, x20
   98ca4:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   98ca8:	a9007e7f 	stp	xzr, xzr, [x19]
   98cac:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   98cb0:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   98cb4:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   98cb8:	97ffde62 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98cbc:	aa1303e6 	mov	x6, x19
   98cc0:	aa0003e1 	mov	x1, x0
   98cc4:	52800047 	mov	w7, #0x2                   	// #2
   98cc8:	aa1503e0 	mov	x0, x21
   98ccc:	52800005 	mov	w5, #0x0                   	// #0
   98cd0:	52800004 	mov	w4, #0x0                   	// #0
   98cd4:	52800be3 	mov	w3, #0x5f                  	// #95
   98cd8:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98cdc:	97ffec6d 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98ce0:	7100081f 	cmp	w0, #0x2
   98ce4:	54000501 	b.ne	98d84 <CUSBSerialCH341Device::Configure()+0x114>  // b.any
   98ce8:	94002bc2 	bl	a3bf0 <CLogger::Get()>
   98cec:	39400264 	ldrb	w4, [x19]
   98cf0:	90000113 	adrp	x19, b8000 <FromUmsd+0x60>
   98cf4:	91098273 	add	x19, x19, #0x260
   98cf8:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98cfc:	aa1303e1 	mov	x1, x19
   98d00:	910e8063 	add	x3, x3, #0x3a0
   98d04:	52800062 	mov	w2, #0x3                   	// #3
   98d08:	94002dae 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98d0c:	aa1403e0 	mov	x0, x20
   98d10:	97ffde4c 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98d14:	52800007 	mov	w7, #0x0                   	// #0
   98d18:	aa0003e1 	mov	x1, x0
   98d1c:	d2800006 	mov	x6, #0x0                   	// #0
   98d20:	aa1503e0 	mov	x0, x21
   98d24:	52800005 	mov	w5, #0x0                   	// #0
   98d28:	52800004 	mov	w4, #0x0                   	// #0
   98d2c:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98d30:	52800802 	mov	w2, #0x40                  	// #64
   98d34:	97ffec57 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98d38:	37f805e0 	tbnz	w0, #31, 98df4 <CUSBSerialCH341Device::Configure()+0x184>
   98d3c:	f9400282 	ldr	x2, [x20]
   98d40:	aa1403e0 	mov	x0, x20
   98d44:	5284b001 	mov	w1, #0x2580                	// #9600
   98d48:	f9402c42 	ldr	x2, [x2, #88]
   98d4c:	d63f0040 	blr	x2
   98d50:	36000420 	tbz	w0, #0, 98dd4 <CUSBSerialCH341Device::Configure()+0x164>
   98d54:	f9400284 	ldr	x4, [x20]
   98d58:	aa1403e0 	mov	x0, x20
   98d5c:	52800023 	mov	w3, #0x1                   	// #1
   98d60:	52800002 	mov	w2, #0x0                   	// #0
   98d64:	52800101 	mov	w1, #0x8                   	// #8
   98d68:	f9403084 	ldr	x4, [x4, #96]
   98d6c:	d63f0080 	blr	x4
   98d70:	12001c00 	and	w0, w0, #0xff
   98d74:	a94153f3 	ldp	x19, x20, [sp, #16]
   98d78:	f94013f5 	ldr	x21, [sp, #32]
   98d7c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   98d80:	d65f03c0 	ret
   98d84:	94002b9b 	bl	a3bf0 <CLogger::Get()>
   98d88:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98d8c:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98d90:	910e0063 	add	x3, x3, #0x380
   98d94:	91098021 	add	x1, x1, #0x260
   98d98:	52800022 	mov	w2, #0x1                   	// #1
   98d9c:	94002d89 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98da0:	f94013f5 	ldr	x21, [sp, #32]
   98da4:	52800000 	mov	w0, #0x0                   	// #0
   98da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   98dac:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   98db0:	d65f03c0 	ret
   98db4:	94002b8f 	bl	a3bf0 <CLogger::Get()>
   98db8:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98dbc:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98dc0:	910d8063 	add	x3, x3, #0x360
   98dc4:	91098021 	add	x1, x1, #0x260
   98dc8:	52800022 	mov	w2, #0x1                   	// #1
   98dcc:	94002d7d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98dd0:	17fffff5 	b	98da4 <CUSBSerialCH341Device::Configure()+0x134>
   98dd4:	f94013f5 	ldr	x21, [sp, #32]
   98dd8:	17fffff3 	b	98da4 <CUSBSerialCH341Device::Configure()+0x134>
   98ddc:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98de0:	900000e0 	adrp	x0, b4000 <_etext+0x19c8>
   98de4:	910cc021 	add	x1, x1, #0x330
   98de8:	91330000 	add	x0, x0, #0xcc0
   98dec:	52800882 	mov	w2, #0x44                  	// #68
   98df0:	94002444 	bl	a1f00 <assertion_failed>
   98df4:	94002b7f 	bl	a3bf0 <CLogger::Get()>
   98df8:	aa1303e1 	mov	x1, x19
   98dfc:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98e00:	910ee063 	add	x3, x3, #0x3b8
   98e04:	52800022 	mov	w2, #0x1                   	// #1
   98e08:	94002d6e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98e0c:	f94013f5 	ldr	x21, [sp, #32]
   98e10:	17ffffe5 	b	98da4 <CUSBSerialCH341Device::Configure()+0x134>
   98e14:	d503201f 	nop
   98e18:	d503201f 	nop
   98e1c:	d503201f 	nop

0000000000098e20 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   98e20:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   98e24:	910003fd 	mov	x29, sp
   98e28:	a90153f3 	stp	x19, x20, [sp, #16]
   98e2c:	2a0103f3 	mov	w19, w1
   98e30:	a9025bf5 	stp	x21, x22, [sp, #32]
   98e34:	2a0203f6 	mov	w22, w2
   98e38:	a90363f7 	stp	x23, x24, [sp, #48]
   98e3c:	aa0003f8 	mov	x24, x0
   98e40:	f90023f9 	str	x25, [sp, #64]
   98e44:	2a0303f9 	mov	w25, w3
   98e48:	97ffde0a 	bl	90670 <CUSBFunction::GetHost() const>
   98e4c:	b4000e80 	cbz	x0, 9901c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1fc>
   98e50:	910143f7 	add	x23, sp, #0x50
   98e54:	aa0003f4 	mov	x20, x0
   98e58:	aa1703e0 	mov	x0, x23
   98e5c:	94003cb1 	bl	a8120 <CString::CString()>
   98e60:	51001660 	sub	w0, w19, #0x5
   98e64:	71000c1f 	cmp	w0, #0x3
   98e68:	54000508 	b.hi	98f08 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe8>  // b.pmore
   98e6c:	51011675 	sub	w21, w19, #0x45
   98e70:	2a1303e2 	mov	w2, w19
   98e74:	aa1703e0 	mov	x0, x23
   98e78:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98e7c:	910f4021 	add	x1, x1, #0x3d0
   98e80:	940042b0 	bl	a9940 <CString::Format(char const*, ...)>
   98e84:	12001eb5 	and	w21, w21, #0xff
   98e88:	710006df 	cmp	w22, #0x1
   98e8c:	540007a0 	b.eq	98f80 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x160>  // b.none
   98e90:	71000adf 	cmp	w22, #0x2
   98e94:	540005e0 	b.eq	98f50 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x130>  // b.none
   98e98:	350004b6 	cbnz	w22, 98f2c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x10c>
   98e9c:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98ea0:	910fc021 	add	x1, x1, #0x3f0
   98ea4:	aa1703e0 	mov	x0, x23
   98ea8:	94003d36 	bl	a8380 <CString::Append(char const*)>
   98eac:	7100073f 	cmp	w25, #0x1
   98eb0:	540005e0 	b.eq	98f6c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x14c>  // b.none
   98eb4:	71000b3f 	cmp	w25, #0x2
   98eb8:	54000700 	b.eq	98f98 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x178>  // b.none
   98ebc:	94002b4d 	bl	a3bf0 <CLogger::Get()>
   98ec0:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98ec4:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98ec8:	2a1903e4 	mov	w4, w25
   98ecc:	91108063 	add	x3, x3, #0x420
   98ed0:	91098021 	add	x1, x1, #0x260
   98ed4:	52800022 	mov	w2, #0x1                   	// #1
   98ed8:	94002d3a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98edc:	d503201f 	nop
   98ee0:	52800014 	mov	w20, #0x0                   	// #0
   98ee4:	aa1703e0 	mov	x0, x23
   98ee8:	94003c52 	bl	a8030 <CString::~CString()>
   98eec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98ef0:	2a1403e0 	mov	w0, w20
   98ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   98ef8:	a94363f7 	ldp	x23, x24, [sp, #48]
   98efc:	f94023f9 	ldr	x25, [sp, #64]
   98f00:	a8c77bfd 	ldp	x29, x30, [sp], #112
   98f04:	d65f03c0 	ret
   98f08:	94002b3a 	bl	a3bf0 <CLogger::Get()>
   98f0c:	2a1303e4 	mov	w4, w19
   98f10:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98f14:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98f18:	910f6063 	add	x3, x3, #0x3d8
   98f1c:	91098021 	add	x1, x1, #0x260
   98f20:	52800022 	mov	w2, #0x1                   	// #1
   98f24:	94002d27 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98f28:	17ffffee 	b	98ee0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   98f2c:	94002b31 	bl	a3bf0 <CLogger::Get()>
   98f30:	2a1603e4 	mov	w4, w22
   98f34:	b00000e3 	adrp	x3, b5000 <_etext+0x29c8>
   98f38:	90000101 	adrp	x1, b8000 <FromUmsd+0x60>
   98f3c:	91102063 	add	x3, x3, #0x408
   98f40:	91098021 	add	x1, x1, #0x260
   98f44:	52800022 	mov	w2, #0x1                   	// #1
   98f48:	94002d1e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98f4c:	17ffffe5 	b	98ee0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   98f50:	aa1703e0 	mov	x0, x23
   98f54:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98f58:	91100021 	add	x1, x1, #0x400
   98f5c:	94003d09 	bl	a8380 <CString::Append(char const*)>
   98f60:	321d06b5 	orr	w21, w21, #0x18
   98f64:	7100073f 	cmp	w25, #0x1
   98f68:	54fffa61 	b.ne	98eb4 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x94>  // b.any
   98f6c:	aa1703e0 	mov	x0, x23
   98f70:	900000e1 	adrp	x1, b4000 <_etext+0x19c8>
   98f74:	91104021 	add	x1, x1, #0x410
   98f78:	94003d02 	bl	a8380 <CString::Append(char const*)>
   98f7c:	1400000c 	b	98fac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x18c>
   98f80:	321d02b5 	orr	w21, w21, #0x8
   98f84:	aa1703e0 	mov	x0, x23
   98f88:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98f8c:	910fe021 	add	x1, x1, #0x3f8
   98f90:	94003cfc 	bl	a8380 <CString::Append(char const*)>
   98f94:	17ffffc6 	b	98eac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x8c>
   98f98:	b00000e1 	adrp	x1, b5000 <_etext+0x29c8>
   98f9c:	910b2021 	add	x1, x1, #0x2c8
   98fa0:	321e02b5 	orr	w21, w21, #0x4
   98fa4:	aa1703e0 	mov	x0, x23
   98fa8:	94003cf6 	bl	a8380 <CString::Append(char const*)>
   98fac:	aa1803e0 	mov	x0, x24
   98fb0:	97ffdda4 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98fb4:	2a1503e5 	mov	w5, w21
   98fb8:	aa0003e1 	mov	x1, x0
   98fbc:	52800007 	mov	w7, #0x0                   	// #0
   98fc0:	aa1403e0 	mov	x0, x20
   98fc4:	d2800006 	mov	x6, #0x0                   	// #0
   98fc8:	5284a304 	mov	w4, #0x2518                	// #9496
   98fcc:	12800ca3 	mov	w3, #0xffffff9a            	// #-102
   98fd0:	52800802 	mov	w2, #0x40                  	// #64
   98fd4:	97ffebaf 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98fd8:	37f802e0 	tbnz	w0, #31, 99034 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x214>
   98fdc:	aa1803e0 	mov	x0, x24
   98fe0:	97ffdd98 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   98fe4:	52800007 	mov	w7, #0x0                   	// #0
   98fe8:	aa0003e1 	mov	x1, x0
   98fec:	d2800006 	mov	x6, #0x0                   	// #0
   98ff0:	aa1403e0 	mov	x0, x20
   98ff4:	52800005 	mov	w5, #0x0                   	// #0
   98ff8:	12800004 	mov	w4, #0xffffffff            	// #-1
   98ffc:	12800b63 	mov	w3, #0xffffffa4            	// #-92
   99000:	52800802 	mov	w2, #0x40                  	// #64
   99004:	97ffeba3 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99008:	37f80260 	tbnz	w0, #31, 99054 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x234>
   9900c:	52800034 	mov	w20, #0x1                   	// #1
   99010:	2905db13 	stp	w19, w22, [x24, #44]
   99014:	b9003719 	str	w25, [x24, #52]
   99018:	17ffffb3 	b	98ee4 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc4>
   9901c:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99020:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   99024:	910cc021 	add	x1, x1, #0x330
   99028:	91330000 	add	x0, x0, #0xcc0
   9902c:	52801402 	mov	w2, #0xa0                  	// #160
   99030:	940023b4 	bl	a1f00 <assertion_failed>
   99034:	94002aef 	bl	a3bf0 <CLogger::Get()>
   99038:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9903c:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99040:	9110e063 	add	x3, x3, #0x438
   99044:	91098021 	add	x1, x1, #0x260
   99048:	52800022 	mov	w2, #0x1                   	// #1
   9904c:	94002cdd 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99050:	17ffffa4 	b	98ee0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   99054:	94002ae7 	bl	a3bf0 <CLogger::Get()>
   99058:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9905c:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99060:	91116063 	add	x3, x3, #0x458
   99064:	91098021 	add	x1, x1, #0x260
   99068:	52800022 	mov	w2, #0x1                   	// #1
   9906c:	94002cd5 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99070:	17ffff9c 	b	98ee0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
	...

0000000000099080 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   99080:	90000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   99084:	91324021 	add	x1, x1, #0xc90
   99088:	f9000001 	str	x1, [x0]
   9908c:	14001901 	b	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000099090 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   99090:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99094:	90000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   99098:	91324021 	add	x1, x1, #0xc90
   9909c:	910003fd 	mov	x29, sp
   990a0:	f9000bf3 	str	x19, [sp, #16]
   990a4:	aa0003f3 	mov	x19, x0
   990a8:	f9000001 	str	x1, [x0]
   990ac:	940018f9 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   990b0:	aa1303e0 	mov	x0, x19
   990b4:	d2801001 	mov	x1, #0x80                  	// #128
   990b8:	f9400bf3 	ldr	x19, [sp, #16]
   990bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   990c0:	14004abc 	b	abbb0 <operator delete(void*, unsigned long)>
   990c4:	d503201f 	nop
   990c8:	d503201f 	nop
   990cc:	d503201f 	nop

00000000000990d0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)>:
   990d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   990d4:	910003fd 	mov	x29, sp
   990d8:	f9403c02 	ldr	x2, [x0, #120]
   990dc:	b9002fe1 	str	w1, [sp, #44]
   990e0:	b4000702 	cbz	x2, 991c0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xf0>
   990e4:	b9400442 	ldr	w2, [x2, #4]
   990e8:	6b01005f 	cmp	w2, w1
   990ec:	54000403 	b.cc	9916c <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x9c>  // b.lo, b.ul, b.last
   990f0:	a90153f3 	stp	x19, x20, [sp, #16]
   990f4:	aa0003f3 	mov	x19, x0
   990f8:	97ffdd5e 	bl	90670 <CUSBFunction::GetHost() const>
   990fc:	aa0003f4 	mov	x20, x0
   99100:	b40006e0 	cbz	x0, 991dc <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x10c>
   99104:	aa1303e0 	mov	x0, x19
   99108:	97ffdd4e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9910c:	9100b3e6 	add	x6, sp, #0x2c
   99110:	aa0003e1 	mov	x1, x0
   99114:	52800087 	mov	w7, #0x4                   	// #4
   99118:	aa1403e0 	mov	x0, x20
   9911c:	52800005 	mov	w5, #0x0                   	// #0
   99120:	52800004 	mov	w4, #0x0                   	// #0
   99124:	528003c3 	mov	w3, #0x1e                  	// #30
   99128:	52800822 	mov	w2, #0x41                  	// #65
   9912c:	97ffeb59 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99130:	37f80340 	tbnz	w0, #31, 99198 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xc8>
   99134:	b9402fe0 	ldr	w0, [sp, #44]
   99138:	b9002a60 	str	w0, [x19, #40]
   9913c:	94002aad 	bl	a3bf0 <CLogger::Get()>
   99140:	b9402a64 	ldr	w4, [x19, #40]
   99144:	52800082 	mov	w2, #0x4                   	// #4
   99148:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9914c:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99150:	91138063 	add	x3, x3, #0x4e0
   99154:	910a0021 	add	x1, x1, #0x280
   99158:	94002c9a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9915c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99160:	52800020 	mov	w0, #0x1                   	// #1
   99164:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99168:	d65f03c0 	ret
   9916c:	94002aa1 	bl	a3bf0 <CLogger::Get()>
   99170:	b9402fe4 	ldr	w4, [sp, #44]
   99174:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99178:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9917c:	9112a063 	add	x3, x3, #0x4a8
   99180:	910a0021 	add	x1, x1, #0x280
   99184:	52800022 	mov	w2, #0x1                   	// #1
   99188:	94002c8e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9918c:	52800000 	mov	w0, #0x0                   	// #0
   99190:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99194:	d65f03c0 	ret
   99198:	94002a96 	bl	a3bf0 <CLogger::Get()>
   9919c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   991a0:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   991a4:	91132063 	add	x3, x3, #0x4c8
   991a8:	910a0021 	add	x1, x1, #0x280
   991ac:	52800022 	mov	w2, #0x1                   	// #1
   991b0:	94002c84 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   991b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   991b8:	52800000 	mov	w0, #0x0                   	// #0
   991bc:	17fffff5 	b	99190 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xc0>
   991c0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   991c4:	900000e0 	adrp	x0, b5000 <_etext+0x29c8>
   991c8:	9111e021 	add	x1, x1, #0x478
   991cc:	91124000 	add	x0, x0, #0x490
   991d0:	52801382 	mov	w2, #0x9c                  	// #156
   991d4:	a90153f3 	stp	x19, x20, [sp, #16]
   991d8:	9400234a 	bl	a1f00 <assertion_failed>
   991dc:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   991e0:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   991e4:	9111e021 	add	x1, x1, #0x478
   991e8:	91330000 	add	x0, x0, #0xcc0
   991ec:	528014c2 	mov	w2, #0xa6                  	// #166
   991f0:	94002344 	bl	a1f00 <assertion_failed>
   991f4:	d503201f 	nop
   991f8:	d503201f 	nop
   991fc:	d503201f 	nop

0000000000099200 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>:
   99200:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99204:	d2800002 	mov	x2, #0x0                   	// #0
   99208:	910003fd 	mov	x29, sp
   9920c:	f9000bf3 	str	x19, [sp, #16]
   99210:	aa0003f3 	mov	x19, x0
   99214:	94001a23 	bl	9faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   99218:	90000180 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9921c:	91324000 	add	x0, x0, #0xc90
   99220:	f9000260 	str	x0, [x19]
   99224:	f9003e7f 	str	xzr, [x19, #120]
   99228:	f9400bf3 	ldr	x19, [sp, #16]
   9922c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99230:	d65f03c0 	ret
   99234:	d503201f 	nop
   99238:	d503201f 	nop
   9923c:	d503201f 	nop

0000000000099240 <CUSBSerialCP210xDevice::GetDeviceIDTable()>:
   99240:	f00000e0 	adrp	x0, b8000 <FromUmsd+0x60>
   99244:	910a0000 	add	x0, x0, #0x280
   99248:	91002000 	add	x0, x0, #0x8
   9924c:	d65f03c0 	ret

0000000000099250 <CUSBSerialCP210xDevice::Configure()>:
   99250:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   99254:	910003fd 	mov	x29, sp
   99258:	a90153f3 	stp	x19, x20, [sp, #16]
   9925c:	aa0003f4 	mov	x20, x0
   99260:	94001a78 	bl	9fc40 <CUSBSerialHostDevice::Configure()>
   99264:	360009a0 	tbz	w0, #0, 99398 <CUSBSerialCP210xDevice::Configure()+0x148>
   99268:	aa1403e0 	mov	x0, x20
   9926c:	f90013f5 	str	x21, [sp, #32]
   99270:	97ffdd00 	bl	90670 <CUSBFunction::GetHost() const>
   99274:	aa0003f5 	mov	x21, x0
   99278:	b4000d00 	cbz	x0, 99418 <CUSBSerialCP210xDevice::Configure()+0x1c8>
   9927c:	9101bff3 	add	x19, sp, #0x6f
   99280:	aa1403e0 	mov	x0, x20
   99284:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   99288:	a9007e7f 	stp	xzr, xzr, [x19]
   9928c:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   99290:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   99294:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   99298:	97ffdcea 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9929c:	aa1303e6 	mov	x6, x19
   992a0:	aa0003e1 	mov	x1, x0
   992a4:	52800027 	mov	w7, #0x1                   	// #1
   992a8:	aa1503e0 	mov	x0, x21
   992ac:	52800005 	mov	w5, #0x0                   	// #0
   992b0:	5286e164 	mov	w4, #0x370b                	// #14091
   992b4:	12800003 	mov	w3, #0xffffffff            	// #-1
   992b8:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   992bc:	97ffeaf5 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   992c0:	7100041f 	cmp	w0, #0x1
   992c4:	54000801 	b.ne	993c4 <CUSBSerialCP210xDevice::Configure()+0x174>  // b.any
   992c8:	90000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   992cc:	9133e021 	add	x1, x1, #0xcf8
   992d0:	39400263 	ldrb	w3, [x19]
   992d4:	f9003e9f 	str	xzr, [x20, #120]
   992d8:	14000004 	b	992e8 <CUSBSerialCP210xDevice::Configure()+0x98>
   992dc:	b9401c22 	ldr	w2, [x1, #28]
   992e0:	91006021 	add	x1, x1, #0x18
   992e4:	34000862 	cbz	w2, 993f0 <CUSBSerialCP210xDevice::Configure()+0x1a0>
   992e8:	39400022 	ldrb	w2, [x1]
   992ec:	6b03005f 	cmp	w2, w3
   992f0:	54ffff61 	b.ne	992dc <CUSBSerialCP210xDevice::Configure()+0x8c>  // b.any
   992f4:	f9003e81 	str	x1, [x20, #120]
   992f8:	f00000f3 	adrp	x19, b8000 <FromUmsd+0x60>
   992fc:	910a0273 	add	x19, x19, #0x280
   99300:	94002a3c 	bl	a3bf0 <CLogger::Get()>
   99304:	f9403e82 	ldr	x2, [x20, #120]
   99308:	aa1303e1 	mov	x1, x19
   9930c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99310:	91144063 	add	x3, x3, #0x510
   99314:	f9400844 	ldr	x4, [x2, #16]
   99318:	52800062 	mov	w2, #0x3                   	// #3
   9931c:	94002c29 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99320:	aa1403e0 	mov	x0, x20
   99324:	97ffdcc7 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99328:	52800007 	mov	w7, #0x0                   	// #0
   9932c:	aa0003e1 	mov	x1, x0
   99330:	d2800006 	mov	x6, #0x0                   	// #0
   99334:	aa1503e0 	mov	x0, x21
   99338:	52800005 	mov	w5, #0x0                   	// #0
   9933c:	52800024 	mov	w4, #0x1                   	// #1
   99340:	52800003 	mov	w3, #0x0                   	// #0
   99344:	52800822 	mov	w2, #0x41                  	// #65
   99348:	97ffead2 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9934c:	37f80720 	tbnz	w0, #31, 99430 <CUSBSerialCP210xDevice::Configure()+0x1e0>
   99350:	f9400282 	ldr	x2, [x20]
   99354:	aa1403e0 	mov	x0, x20
   99358:	5284b001 	mov	w1, #0x2580                	// #9600
   9935c:	f9402c42 	ldr	x2, [x2, #88]
   99360:	d63f0040 	blr	x2
   99364:	36000420 	tbz	w0, #0, 993e8 <CUSBSerialCP210xDevice::Configure()+0x198>
   99368:	f9400284 	ldr	x4, [x20]
   9936c:	aa1403e0 	mov	x0, x20
   99370:	52800023 	mov	w3, #0x1                   	// #1
   99374:	52800002 	mov	w2, #0x0                   	// #0
   99378:	52800101 	mov	w1, #0x8                   	// #8
   9937c:	f9403084 	ldr	x4, [x4, #96]
   99380:	d63f0080 	blr	x4
   99384:	12001c00 	and	w0, w0, #0xff
   99388:	a94153f3 	ldp	x19, x20, [sp, #16]
   9938c:	f94013f5 	ldr	x21, [sp, #32]
   99390:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   99394:	d65f03c0 	ret
   99398:	94002a16 	bl	a3bf0 <CLogger::Get()>
   9939c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   993a0:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   993a4:	910d8063 	add	x3, x3, #0x360
   993a8:	910a0021 	add	x1, x1, #0x280
   993ac:	52800022 	mov	w2, #0x1                   	// #1
   993b0:	94002c04 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   993b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   993b8:	52800000 	mov	w0, #0x0                   	// #0
   993bc:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   993c0:	d65f03c0 	ret
   993c4:	94002a0b 	bl	a3bf0 <CLogger::Get()>
   993c8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   993cc:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   993d0:	9113c063 	add	x3, x3, #0x4f0
   993d4:	910a0021 	add	x1, x1, #0x280
   993d8:	52800022 	mov	w2, #0x1                   	// #1
   993dc:	94002bf9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   993e0:	f94013f5 	ldr	x21, [sp, #32]
   993e4:	17fffff4 	b	993b4 <CUSBSerialCP210xDevice::Configure()+0x164>
   993e8:	f94013f5 	ldr	x21, [sp, #32]
   993ec:	17fffff2 	b	993b4 <CUSBSerialCP210xDevice::Configure()+0x164>
   993f0:	94002a00 	bl	a3bf0 <CLogger::Get()>
   993f4:	39400264 	ldrb	w4, [x19]
   993f8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   993fc:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99400:	91148063 	add	x3, x3, #0x520
   99404:	910a0021 	add	x1, x1, #0x280
   99408:	52800022 	mov	w2, #0x1                   	// #1
   9940c:	94002bed 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99410:	f94013f5 	ldr	x21, [sp, #32]
   99414:	17ffffe8 	b	993b4 <CUSBSerialCP210xDevice::Configure()+0x164>
   99418:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   9941c:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   99420:	9111e021 	add	x1, x1, #0x478
   99424:	91330000 	add	x0, x0, #0xcc0
   99428:	52800ba2 	mov	w2, #0x5d                  	// #93
   9942c:	940022b5 	bl	a1f00 <assertion_failed>
   99430:	940029f0 	bl	a3bf0 <CLogger::Get()>
   99434:	aa1303e1 	mov	x1, x19
   99438:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9943c:	91150063 	add	x3, x3, #0x540
   99440:	52800022 	mov	w2, #0x1                   	// #1
   99444:	94002bdf 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99448:	f94013f5 	ldr	x21, [sp, #32]
   9944c:	17ffffda 	b	993b4 <CUSBSerialCP210xDevice::Configure()+0x164>

0000000000099450 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   99450:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   99454:	910003fd 	mov	x29, sp
   99458:	a90153f3 	stp	x19, x20, [sp, #16]
   9945c:	2a0103f3 	mov	w19, w1
   99460:	f9403c01 	ldr	x1, [x0, #120]
   99464:	a9025bf5 	stp	x21, x22, [sp, #32]
   99468:	a90363f7 	stp	x23, x24, [sp, #48]
   9946c:	b4000cc1 	cbz	x1, 99604 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b4>
   99470:	2a0203f5 	mov	w21, w2
   99474:	b9400822 	ldr	w2, [x1, #8]
   99478:	6b13005f 	cmp	w2, w19
   9947c:	54000b2c 	b.gt	995e0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x190>
   99480:	b9400c21 	ldr	w1, [x1, #12]
   99484:	2a0303f4 	mov	w20, w3
   99488:	6b03003f 	cmp	w1, w3
   9948c:	5400054b 	b.lt	99534 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe4>  // b.tstop
   99490:	aa0003f6 	mov	x22, x0
   99494:	97ffdc77 	bl	90670 <CUSBFunction::GetHost() const>
   99498:	aa0003f7 	mov	x23, x0
   9949c:	b40010e0 	cbz	x0, 996b8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x268>
   994a0:	910143f8 	add	x24, sp, #0x50
   994a4:	aa1803e0 	mov	x0, x24
   994a8:	94003b1e 	bl	a8120 <CString::CString()>
   994ac:	51001660 	sub	w0, w19, #0x5
   994b0:	71000c1f 	cmp	w0, #0x3
   994b4:	540005e8 	b.hi	99570 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>  // b.pmore
   994b8:	2a1303e2 	mov	w2, w19
   994bc:	aa1803e0 	mov	x0, x24
   994c0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   994c4:	910f4021 	add	x1, x1, #0x3d0
   994c8:	f90023f9 	str	x25, [sp, #64]
   994cc:	9400411d 	bl	a9940 <CString::Format(char const*, ...)>
   994d0:	53181e79 	ubfiz	w25, w19, #8, #8
   994d4:	710006bf 	cmp	w21, #0x1
   994d8:	540005e0 	b.eq	99594 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x144>  // b.none
   994dc:	71000abf 	cmp	w21, #0x2
   994e0:	54000aa0 	b.eq	99634 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>  // b.none
   994e4:	340009f5 	cbz	w21, 99620 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d0>
   994e8:	940029c2 	bl	a3bf0 <CLogger::Get()>
   994ec:	2a1503e4 	mov	w4, w21
   994f0:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   994f4:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   994f8:	91102063 	add	x3, x3, #0x408
   994fc:	910a0021 	add	x1, x1, #0x280
   99500:	52800022 	mov	w2, #0x1                   	// #1
   99504:	94002baf 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99508:	f94023f9 	ldr	x25, [sp, #64]
   9950c:	d503201f 	nop
   99510:	52800017 	mov	w23, #0x0                   	// #0
   99514:	aa1803e0 	mov	x0, x24
   99518:	94003ac6 	bl	a8030 <CString::~CString()>
   9951c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99520:	2a1703e0 	mov	w0, w23
   99524:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99528:	a94363f7 	ldp	x23, x24, [sp, #48]
   9952c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   99530:	d65f03c0 	ret
   99534:	940029af 	bl	a3bf0 <CLogger::Get()>
   99538:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9953c:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99540:	2a1403e4 	mov	w4, w20
   99544:	91160063 	add	x3, x3, #0x580
   99548:	910a0021 	add	x1, x1, #0x280
   9954c:	52800022 	mov	w2, #0x1                   	// #1
   99550:	94002b9c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99554:	52800017 	mov	w23, #0x0                   	// #0
   99558:	2a1703e0 	mov	w0, w23
   9955c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99560:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99564:	a94363f7 	ldp	x23, x24, [sp, #48]
   99568:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9956c:	d65f03c0 	ret
   99570:	940029a0 	bl	a3bf0 <CLogger::Get()>
   99574:	2a1303e4 	mov	w4, w19
   99578:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   9957c:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99580:	910f6063 	add	x3, x3, #0x3d8
   99584:	910a0021 	add	x1, x1, #0x280
   99588:	52800022 	mov	w2, #0x1                   	// #1
   9958c:	94002b8d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99590:	17ffffe0 	b	99510 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   99594:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99598:	910fe021 	add	x1, x1, #0x3f8
   9959c:	321c0339 	orr	w25, w25, #0x10
   995a0:	aa1803e0 	mov	x0, x24
   995a4:	94003b77 	bl	a8380 <CString::Append(char const*)>
   995a8:	7100069f 	cmp	w20, #0x1
   995ac:	540007c0 	b.eq	996a4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x254>  // b.none
   995b0:	71000a9f 	cmp	w20, #0x2
   995b4:	540004c0 	b.eq	9964c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1fc>  // b.none
   995b8:	9400298e 	bl	a3bf0 <CLogger::Get()>
   995bc:	2a1403e4 	mov	w4, w20
   995c0:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   995c4:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   995c8:	91108063 	add	x3, x3, #0x420
   995cc:	910a0021 	add	x1, x1, #0x280
   995d0:	52800022 	mov	w2, #0x1                   	// #1
   995d4:	94002b7b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   995d8:	f94023f9 	ldr	x25, [sp, #64]
   995dc:	17ffffcd 	b	99510 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   995e0:	94002984 	bl	a3bf0 <CLogger::Get()>
   995e4:	2a1303e4 	mov	w4, w19
   995e8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   995ec:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   995f0:	91158063 	add	x3, x3, #0x560
   995f4:	910a0021 	add	x1, x1, #0x280
   995f8:	52800022 	mov	w2, #0x1                   	// #1
   995fc:	94002b71 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99600:	17ffffd5 	b	99554 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x104>
   99604:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99608:	900000e0 	adrp	x0, b5000 <_etext+0x29c8>
   9960c:	9111e021 	add	x1, x1, #0x478
   99610:	91124000 	add	x0, x0, #0x490
   99614:	528017c2 	mov	w2, #0xbe                  	// #190
   99618:	f90023f9 	str	x25, [sp, #64]
   9961c:	94002239 	bl	a1f00 <assertion_failed>
   99620:	aa1803e0 	mov	x0, x24
   99624:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99628:	910fc021 	add	x1, x1, #0x3f0
   9962c:	94003b55 	bl	a8380 <CString::Append(char const*)>
   99630:	17ffffde 	b	995a8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x158>
   99634:	321b0339 	orr	w25, w25, #0x20
   99638:	aa1803e0 	mov	x0, x24
   9963c:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99640:	91100021 	add	x1, x1, #0x400
   99644:	94003b4f 	bl	a8380 <CString::Append(char const*)>
   99648:	17ffffd8 	b	995a8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x158>
   9964c:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99650:	910b2021 	add	x1, x1, #0x2c8
   99654:	321f0339 	orr	w25, w25, #0x2
   99658:	aa1803e0 	mov	x0, x24
   9965c:	94003b49 	bl	a8380 <CString::Append(char const*)>
   99660:	aa1603e0 	mov	x0, x22
   99664:	97ffdbf7 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99668:	2a1903e4 	mov	w4, w25
   9966c:	aa0003e1 	mov	x1, x0
   99670:	52800007 	mov	w7, #0x0                   	// #0
   99674:	aa1703e0 	mov	x0, x23
   99678:	d2800006 	mov	x6, #0x0                   	// #0
   9967c:	52800005 	mov	w5, #0x0                   	// #0
   99680:	52800063 	mov	w3, #0x3                   	// #3
   99684:	52800822 	mov	w2, #0x41                  	// #65
   99688:	97ffea02 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9968c:	37f80240 	tbnz	w0, #31, 996d4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   99690:	f94023f9 	ldr	x25, [sp, #64]
   99694:	52800037 	mov	w23, #0x1                   	// #1
   99698:	2905d6d3 	stp	w19, w21, [x22, #44]
   9969c:	b90036d4 	str	w20, [x22, #52]
   996a0:	17ffff9d 	b	99514 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc4>
   996a4:	aa1803e0 	mov	x0, x24
   996a8:	f00000c1 	adrp	x1, b4000 <_etext+0x19c8>
   996ac:	91104021 	add	x1, x1, #0x410
   996b0:	94003b34 	bl	a8380 <CString::Append(char const*)>
   996b4:	17ffffeb 	b	99660 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   996b8:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   996bc:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   996c0:	9111e021 	add	x1, x1, #0x478
   996c4:	91330000 	add	x0, x0, #0xcc0
   996c8:	528019c2 	mov	w2, #0xce                  	// #206
   996cc:	f90023f9 	str	x25, [sp, #64]
   996d0:	9400220c 	bl	a1f00 <assertion_failed>
   996d4:	94002947 	bl	a3bf0 <CLogger::Get()>
   996d8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   996dc:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   996e0:	91168063 	add	x3, x3, #0x5a0
   996e4:	910a0021 	add	x1, x1, #0x280
   996e8:	52800022 	mov	w2, #0x1                   	// #1
   996ec:	94002b35 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   996f0:	f94023f9 	ldr	x25, [sp, #64]
   996f4:	17ffff87 	b	99510 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
	...

0000000000099700 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   99700:	90000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   99704:	91384021 	add	x1, x1, #0xe10
   99708:	f9000001 	str	x1, [x0]
   9970c:	14001761 	b	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000099710 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   99710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99714:	90000181 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   99718:	91384021 	add	x1, x1, #0xe10
   9971c:	910003fd 	mov	x29, sp
   99720:	f9000bf3 	str	x19, [sp, #16]
   99724:	aa0003f3 	mov	x19, x0
   99728:	f9000001 	str	x1, [x0]
   9972c:	94001759 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   99730:	aa1303e0 	mov	x0, x19
   99734:	d2800f01 	mov	x1, #0x78                  	// #120
   99738:	f9400bf3 	ldr	x19, [sp, #16]
   9973c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99740:	1400491c 	b	abbb0 <operator delete(void*, unsigned long)>
   99744:	d503201f 	nop
   99748:	d503201f 	nop
   9974c:	d503201f 	nop

0000000000099750 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)>:
   99750:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   99754:	910003fd 	mov	x29, sp
   99758:	a90153f3 	stp	x19, x20, [sp, #16]
   9975c:	a9025bf5 	stp	x21, x22, [sp, #32]
   99760:	aa0003f5 	mov	x21, x0
   99764:	b9003fe1 	str	w1, [sp, #60]
   99768:	97ffdbc2 	bl	90670 <CUSBFunction::GetHost() const>
   9976c:	b40006c0 	cbz	x0, 99844 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xf4>
   99770:	9101fff3 	add	x19, sp, #0x7f
   99774:	aa0003f4 	mov	x20, x0
   99778:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   9977c:	aa1503e0 	mov	x0, x21
   99780:	a9007e7f 	stp	xzr, xzr, [x19]
   99784:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   99788:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   9978c:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   99790:	97ffdbac 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99794:	aa1303e6 	mov	x6, x19
   99798:	aa0003e1 	mov	x1, x0
   9979c:	528000e7 	mov	w7, #0x7                   	// #7
   997a0:	aa1403e0 	mov	x0, x20
   997a4:	52800005 	mov	w5, #0x0                   	// #0
   997a8:	52800004 	mov	w4, #0x0                   	// #0
   997ac:	52800423 	mov	w3, #0x21                  	// #33
   997b0:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   997b4:	97ffe9b7 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   997b8:	2a0003f6 	mov	w22, w0
   997bc:	71001c1f 	cmp	w0, #0x7
   997c0:	54000301 	b.ne	99820 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xd0>  // b.any
   997c4:	9100f3e1 	add	x1, sp, #0x3c
   997c8:	d2800082 	mov	x2, #0x4                   	// #4
   997cc:	aa1303e0 	mov	x0, x19
   997d0:	9400467e 	bl	ab1c8 <memcpy>
   997d4:	aa1503e0 	mov	x0, x21
   997d8:	97ffdb9a 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   997dc:	aa0003e1 	mov	x1, x0
   997e0:	2a1603e7 	mov	w7, w22
   997e4:	aa1303e6 	mov	x6, x19
   997e8:	aa1403e0 	mov	x0, x20
   997ec:	52800005 	mov	w5, #0x0                   	// #0
   997f0:	52800004 	mov	w4, #0x0                   	// #0
   997f4:	52800403 	mov	w3, #0x20                  	// #32
   997f8:	52800422 	mov	w2, #0x21                  	// #33
   997fc:	97ffe9a5 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99800:	37f802e0 	tbnz	w0, #31, 9985c <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x10c>
   99804:	b9403fe1 	ldr	w1, [sp, #60]
   99808:	52800020 	mov	w0, #0x1                   	// #1
   9980c:	b9002aa1 	str	w1, [x21, #40]
   99810:	a94153f3 	ldp	x19, x20, [sp, #16]
   99814:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99818:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   9981c:	d65f03c0 	ret
   99820:	940028f4 	bl	a3bf0 <CLogger::Get()>
   99824:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99828:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9982c:	91186063 	add	x3, x3, #0x618
   99830:	910a4021 	add	x1, x1, #0x290
   99834:	52800022 	mov	w2, #0x1                   	// #1
   99838:	94002ae2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9983c:	52800000 	mov	w0, #0x0                   	// #0
   99840:	17fffff4 	b	99810 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xc0>
   99844:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99848:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   9984c:	91180021 	add	x1, x1, #0x600
   99850:	91330000 	add	x0, x0, #0xcc0
   99854:	52801da2 	mov	w2, #0xed                  	// #237
   99858:	940021aa 	bl	a1f00 <assertion_failed>
   9985c:	940028e5 	bl	a3bf0 <CLogger::Get()>
   99860:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99864:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99868:	91132063 	add	x3, x3, #0x4c8
   9986c:	910a4021 	add	x1, x1, #0x290
   99870:	52800022 	mov	w2, #0x1                   	// #1
   99874:	94002ad3 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99878:	52800000 	mov	w0, #0x0                   	// #0
   9987c:	17ffffe5 	b	99810 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xc0>

0000000000099880 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>:
   99880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99884:	d2800002 	mov	x2, #0x0                   	// #0
   99888:	910003fd 	mov	x29, sp
   9988c:	f9000bf3 	str	x19, [sp, #16]
   99890:	aa0003f3 	mov	x19, x0
   99894:	94001883 	bl	9faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   99898:	90000180 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9989c:	91384000 	add	x0, x0, #0xe10
   998a0:	f9000260 	str	x0, [x19]
   998a4:	f9400bf3 	ldr	x19, [sp, #16]
   998a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   998ac:	d65f03c0 	ret

00000000000998b0 <CUSBSerialPL2303Device::GetDeviceIDTable()>:
   998b0:	f00000e0 	adrp	x0, b8000 <FromUmsd+0x60>
   998b4:	910a4000 	add	x0, x0, #0x290
   998b8:	91002000 	add	x0, x0, #0x8
   998bc:	d65f03c0 	ret

00000000000998c0 <CUSBSerialPL2303Device::Configure()>:
   998c0:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   998c4:	910003fd 	mov	x29, sp
   998c8:	a90153f3 	stp	x19, x20, [sp, #16]
   998cc:	aa0003f4 	mov	x20, x0
   998d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   998d4:	940018db 	bl	9fc40 <CUSBSerialHostDevice::Configure()>
   998d8:	36000980 	tbz	w0, #0, 99a08 <CUSBSerialPL2303Device::Configure()+0x148>
   998dc:	aa1403e0 	mov	x0, x20
   998e0:	a90363f7 	stp	x23, x24, [sp, #48]
   998e4:	d00000d6 	adrp	x22, b3000 <_etext+0x9c8>
   998e8:	9135c2d6 	add	x22, x22, #0xd70
   998ec:	a9046bf9 	stp	x25, x26, [sp, #64]
   998f0:	97ffdb48 	bl	90610 <CUSBFunction::GetDevice() const>
   998f4:	97ffd353 	bl	8e640 <CUSBDevice::GetDeviceDescriptor() const>
   998f8:	aa0003f5 	mov	x21, x0
   998fc:	910143f7 	add	x23, sp, #0x50
   99900:	aa1603e1 	mov	x1, x22
   99904:	aa1703e0 	mov	x0, x23
   99908:	94003a0e 	bl	a8140 <CString::CString(char const*)>
   9990c:	394012a2 	ldrb	w2, [x21, #4]
   99910:	9102bff3 	add	x19, sp, #0xaf
   99914:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   99918:	7100085f 	cmp	w2, #0x2
   9991c:	540012c0 	b.eq	99b74 <CUSBSerialPL2303Device::Configure()+0x2b4>  // b.none
   99920:	39401ea0 	ldrb	w0, [x21, #7]
   99924:	7101001f 	cmp	w0, #0x40
   99928:	54001120 	b.eq	99b4c <CUSBSerialPL2303Device::Configure()+0x28c>  // b.none
   9992c:	51000442 	sub	w2, w2, #0x1
   99930:	12001c42 	and	w2, w2, #0xff
   99934:	7103f45f 	cmp	w2, #0xfd
   99938:	54001148 	b.hi	99b60 <CUSBSerialPL2303Device::Configure()+0x2a0>  // b.pmore
   9993c:	940028ad 	bl	a3bf0 <CLogger::Get()>
   99940:	f00000f9 	adrp	x25, b8000 <FromUmsd+0x60>
   99944:	910a4338 	add	x24, x25, #0x290
   99948:	aa0003f5 	mov	x21, x0
   9994c:	aa1703e0 	mov	x0, x23
   99950:	94003a38 	bl	a8230 <CString::operator char const*() const>
   99954:	aa1803e1 	mov	x1, x24
   99958:	aa0003e4 	mov	x4, x0
   9995c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99960:	9118e063 	add	x3, x3, #0x638
   99964:	52800062 	mov	w2, #0x3                   	// #3
   99968:	aa1503e0 	mov	x0, x21
   9996c:	94002a95 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99970:	aa1403e0 	mov	x0, x20
   99974:	97ffdb3f 	bl	90670 <CUSBFunction::GetHost() const>
   99978:	aa0003f5 	mov	x21, x0
   9997c:	b4001120 	cbz	x0, 99ba0 <CUSBSerialPL2303Device::Configure()+0x2e0>
   99980:	aa1403e0 	mov	x0, x20
   99984:	a9007e7f 	stp	xzr, xzr, [x19]
   99988:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   9998c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   99990:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   99994:	97ffdb2b 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99998:	52800027 	mov	w7, #0x1                   	// #1
   9999c:	aa0003e1 	mov	x1, x0
   999a0:	aa1303e6 	mov	x6, x19
   999a4:	aa1503e0 	mov	x0, x21
   999a8:	2a0703e3 	mov	w3, w7
   999ac:	52800005 	mov	w5, #0x0                   	// #0
   999b0:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   999b4:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   999b8:	97ffe936 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   999bc:	2a0003f6 	mov	w22, w0
   999c0:	7100041f 	cmp	w0, #0x1
   999c4:	540003c0 	b.eq	99a3c <CUSBSerialPL2303Device::Configure()+0x17c>  // b.none
   999c8:	9400288a 	bl	a3bf0 <CLogger::Get()>
   999cc:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   999d0:	91196063 	add	x3, x3, #0x658
   999d4:	aa1803e1 	mov	x1, x24
   999d8:	52800022 	mov	w2, #0x1                   	// #1
   999dc:	94002a79 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   999e0:	52800015 	mov	w21, #0x0                   	// #0
   999e4:	aa1703e0 	mov	x0, x23
   999e8:	94003992 	bl	a8030 <CString::~CString()>
   999ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   999f0:	2a1503e0 	mov	w0, w21
   999f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   999f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   999fc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   99a00:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   99a04:	d65f03c0 	ret
   99a08:	12001c15 	and	w21, w0, #0xff
   99a0c:	94002879 	bl	a3bf0 <CLogger::Get()>
   99a10:	52800022 	mov	w2, #0x1                   	// #1
   99a14:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99a18:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99a1c:	910d8063 	add	x3, x3, #0x360
   99a20:	910a4021 	add	x1, x1, #0x290
   99a24:	94002a67 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99a28:	a94153f3 	ldp	x19, x20, [sp, #16]
   99a2c:	2a1503e0 	mov	w0, w21
   99a30:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99a34:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   99a38:	d65f03c0 	ret
   99a3c:	aa1403e0 	mov	x0, x20
   99a40:	97ffdb00 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99a44:	2a1603e3 	mov	w3, w22
   99a48:	aa0003e1 	mov	x1, x0
   99a4c:	52800007 	mov	w7, #0x0                   	// #0
   99a50:	aa1503e0 	mov	x0, x21
   99a54:	d2800006 	mov	x6, #0x0                   	// #0
   99a58:	52800005 	mov	w5, #0x0                   	// #0
   99a5c:	52808084 	mov	w4, #0x404                 	// #1028
   99a60:	52800802 	mov	w2, #0x40                  	// #64
   99a64:	97ffe90b 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99a68:	37f808e0 	tbnz	w0, #31, 99b84 <CUSBSerialPL2303Device::Configure()+0x2c4>
   99a6c:	aa1403e0 	mov	x0, x20
   99a70:	97ffdaf4 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99a74:	2a1603e7 	mov	w7, w22
   99a78:	aa0003e1 	mov	x1, x0
   99a7c:	aa1303e6 	mov	x6, x19
   99a80:	2a1603e3 	mov	w3, w22
   99a84:	aa1503e0 	mov	x0, x21
   99a88:	52800005 	mov	w5, #0x0                   	// #0
   99a8c:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   99a90:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   99a94:	97ffe8ff 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99a98:	2a0003fa 	mov	w26, w0
   99a9c:	7100041f 	cmp	w0, #0x1
   99aa0:	54000481 	b.ne	99b30 <CUSBSerialPL2303Device::Configure()+0x270>  // b.any
   99aa4:	aa1403e0 	mov	x0, x20
   99aa8:	97ffdae6 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99aac:	2a1a03e7 	mov	w7, w26
   99ab0:	aa0003e1 	mov	x1, x0
   99ab4:	aa1303e6 	mov	x6, x19
   99ab8:	2a1a03e3 	mov	w3, w26
   99abc:	aa1503e0 	mov	x0, x21
   99ac0:	52800005 	mov	w5, #0x0                   	// #0
   99ac4:	128f8f84 	mov	w4, #0xffff8383            	// #-31869
   99ac8:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   99acc:	97ffe8f1 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99ad0:	2a0003f6 	mov	w22, w0
   99ad4:	7100041f 	cmp	w0, #0x1
   99ad8:	54000100 	b.eq	99af8 <CUSBSerialPL2303Device::Configure()+0x238>  // b.none
   99adc:	94002845 	bl	a3bf0 <CLogger::Get()>
   99ae0:	2a1a03e2 	mov	w2, w26
   99ae4:	aa1803e1 	mov	x1, x24
   99ae8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99aec:	911a2063 	add	x3, x3, #0x688
   99af0:	94002a34 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99af4:	17ffffbb 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99af8:	aa1403e0 	mov	x0, x20
   99afc:	97ffdad1 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99b00:	2a1603e7 	mov	w7, w22
   99b04:	aa0003e1 	mov	x1, x0
   99b08:	aa1303e6 	mov	x6, x19
   99b0c:	2a1603e3 	mov	w3, w22
   99b10:	aa1503e0 	mov	x0, x21
   99b14:	52800005 	mov	w5, #0x0                   	// #0
   99b18:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   99b1c:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   99b20:	97ffe8dc 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99b24:	2a0003fa 	mov	w26, w0
   99b28:	7100041f 	cmp	w0, #0x1
   99b2c:	54000460 	b.eq	99bb8 <CUSBSerialPL2303Device::Configure()+0x2f8>  // b.none
   99b30:	94002830 	bl	a3bf0 <CLogger::Get()>
   99b34:	2a1603e2 	mov	w2, w22
   99b38:	aa1803e1 	mov	x1, x24
   99b3c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99b40:	91196063 	add	x3, x3, #0x658
   99b44:	94002a1f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99b48:	17ffffa6 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99b4c:	aa1703e0 	mov	x0, x23
   99b50:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99b54:	9118c021 	add	x1, x1, #0x630
   99b58:	940039be 	bl	a8250 <CString::operator=(char const*)>
   99b5c:	17ffff78 	b	9993c <CUSBSerialPL2303Device::Configure()+0x7c>
   99b60:	aa1703e0 	mov	x0, x23
   99b64:	f00000c1 	adrp	x1, b4000 <_etext+0x19c8>
   99b68:	91104021 	add	x1, x1, #0x410
   99b6c:	940039b9 	bl	a8250 <CString::operator=(char const*)>
   99b70:	17ffff73 	b	9993c <CUSBSerialPL2303Device::Configure()+0x7c>
   99b74:	aa1603e1 	mov	x1, x22
   99b78:	aa1703e0 	mov	x0, x23
   99b7c:	940039b5 	bl	a8250 <CString::operator=(char const*)>
   99b80:	17ffff6f 	b	9993c <CUSBSerialPL2303Device::Configure()+0x7c>
   99b84:	9400281b 	bl	a3bf0 <CLogger::Get()>
   99b88:	2a1603e2 	mov	w2, w22
   99b8c:	aa1803e1 	mov	x1, x24
   99b90:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99b94:	9119c063 	add	x3, x3, #0x670
   99b98:	94002a0a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99b9c:	17ffff91 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99ba0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99ba4:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   99ba8:	91180021 	add	x1, x1, #0x600
   99bac:	91330000 	add	x0, x0, #0xcc0
   99bb0:	52800942 	mov	w2, #0x4a                  	// #74
   99bb4:	940020d3 	bl	a1f00 <assertion_failed>
   99bb8:	aa1403e0 	mov	x0, x20
   99bbc:	97ffdaa1 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99bc0:	2a1a03e5 	mov	w5, w26
   99bc4:	aa0003e1 	mov	x1, x0
   99bc8:	2a1a03e3 	mov	w3, w26
   99bcc:	aa1503e0 	mov	x0, x21
   99bd0:	52800007 	mov	w7, #0x0                   	// #0
   99bd4:	d2800006 	mov	x6, #0x0                   	// #0
   99bd8:	52808084 	mov	w4, #0x404                 	// #1028
   99bdc:	52800802 	mov	w2, #0x40                  	// #64
   99be0:	97ffe8ac 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99be4:	37f80560 	tbnz	w0, #31, 99c90 <CUSBSerialPL2303Device::Configure()+0x3d0>
   99be8:	aa1403e0 	mov	x0, x20
   99bec:	97ffda95 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99bf0:	2a1a03e7 	mov	w7, w26
   99bf4:	aa0003e1 	mov	x1, x0
   99bf8:	aa1303e6 	mov	x6, x19
   99bfc:	2a1a03e3 	mov	w3, w26
   99c00:	aa1503e0 	mov	x0, x21
   99c04:	52800005 	mov	w5, #0x0                   	// #0
   99c08:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   99c0c:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   99c10:	97ffe8a0 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99c14:	2a0003f6 	mov	w22, w0
   99c18:	7100041f 	cmp	w0, #0x1
   99c1c:	54000100 	b.eq	99c3c <CUSBSerialPL2303Device::Configure()+0x37c>  // b.none
   99c20:	940027f4 	bl	a3bf0 <CLogger::Get()>
   99c24:	2a1a03e2 	mov	w2, w26
   99c28:	aa1803e1 	mov	x1, x24
   99c2c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99c30:	91196063 	add	x3, x3, #0x658
   99c34:	940029e3 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99c38:	17ffff6a 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99c3c:	aa1403e0 	mov	x0, x20
   99c40:	97ffda80 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99c44:	aa1303e6 	mov	x6, x19
   99c48:	aa0003e1 	mov	x1, x0
   99c4c:	2a1603e7 	mov	w7, w22
   99c50:	2a1603e3 	mov	w3, w22
   99c54:	aa1503e0 	mov	x0, x21
   99c58:	52800005 	mov	w5, #0x0                   	// #0
   99c5c:	128f8f84 	mov	w4, #0xffff8383            	// #-31869
   99c60:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   99c64:	97ffe88b 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99c68:	2a0003f3 	mov	w19, w0
   99c6c:	7100041f 	cmp	w0, #0x1
   99c70:	540001e0 	b.eq	99cac <CUSBSerialPL2303Device::Configure()+0x3ec>  // b.none
   99c74:	940027df 	bl	a3bf0 <CLogger::Get()>
   99c78:	2a1603e2 	mov	w2, w22
   99c7c:	aa1803e1 	mov	x1, x24
   99c80:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99c84:	911a2063 	add	x3, x3, #0x688
   99c88:	940029ce 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99c8c:	17ffff55 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99c90:	940027d8 	bl	a3bf0 <CLogger::Get()>
   99c94:	2a1a03e2 	mov	w2, w26
   99c98:	aa1803e1 	mov	x1, x24
   99c9c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99ca0:	9119c063 	add	x3, x3, #0x670
   99ca4:	940029c7 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99ca8:	17ffff4e 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99cac:	aa1403e0 	mov	x0, x20
   99cb0:	97ffda64 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99cb4:	2a1303e5 	mov	w5, w19
   99cb8:	aa0003e1 	mov	x1, x0
   99cbc:	2a1303e3 	mov	w3, w19
   99cc0:	aa1503e0 	mov	x0, x21
   99cc4:	52800007 	mov	w7, #0x0                   	// #0
   99cc8:	d2800006 	mov	x6, #0x0                   	// #0
   99ccc:	52800004 	mov	w4, #0x0                   	// #0
   99cd0:	52800802 	mov	w2, #0x40                  	// #64
   99cd4:	97ffe86f 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99cd8:	37f80680 	tbnz	w0, #31, 99da8 <CUSBSerialPL2303Device::Configure()+0x4e8>
   99cdc:	aa1403e0 	mov	x0, x20
   99ce0:	97ffda58 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99ce4:	52800024 	mov	w4, #0x1                   	// #1
   99ce8:	aa0003e1 	mov	x1, x0
   99cec:	2a0403e3 	mov	w3, w4
   99cf0:	aa1503e0 	mov	x0, x21
   99cf4:	52800007 	mov	w7, #0x0                   	// #0
   99cf8:	d2800006 	mov	x6, #0x0                   	// #0
   99cfc:	52800005 	mov	w5, #0x0                   	// #0
   99d00:	52800802 	mov	w2, #0x40                  	// #64
   99d04:	97ffe863 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99d08:	37f805e0 	tbnz	w0, #31, 99dc4 <CUSBSerialPL2303Device::Configure()+0x504>
   99d0c:	aa1403e0 	mov	x0, x20
   99d10:	97ffda4c 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99d14:	52800007 	mov	w7, #0x0                   	// #0
   99d18:	aa0003e1 	mov	x1, x0
   99d1c:	d2800006 	mov	x6, #0x0                   	// #0
   99d20:	aa1503e0 	mov	x0, x21
   99d24:	52800885 	mov	w5, #0x44                  	// #68
   99d28:	52800044 	mov	w4, #0x2                   	// #2
   99d2c:	52800023 	mov	w3, #0x1                   	// #1
   99d30:	52800802 	mov	w2, #0x40                  	// #64
   99d34:	97ffe857 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99d38:	37f80540 	tbnz	w0, #31, 99de0 <CUSBSerialPL2303Device::Configure()+0x520>
   99d3c:	aa1403e0 	mov	x0, x20
   99d40:	97ffda40 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99d44:	52800007 	mov	w7, #0x0                   	// #0
   99d48:	aa0003e1 	mov	x1, x0
   99d4c:	d2800006 	mov	x6, #0x0                   	// #0
   99d50:	aa1503e0 	mov	x0, x21
   99d54:	52800005 	mov	w5, #0x0                   	// #0
   99d58:	52800004 	mov	w4, #0x0                   	// #0
   99d5c:	52800023 	mov	w3, #0x1                   	// #1
   99d60:	52800802 	mov	w2, #0x40                  	// #64
   99d64:	97ffe84b 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99d68:	37f80200 	tbnz	w0, #31, 99da8 <CUSBSerialPL2303Device::Configure()+0x4e8>
   99d6c:	f9400282 	ldr	x2, [x20]
   99d70:	aa1403e0 	mov	x0, x20
   99d74:	5284b001 	mov	w1, #0x2580                	// #9600
   99d78:	f9402c42 	ldr	x2, [x2, #88]
   99d7c:	d63f0040 	blr	x2
   99d80:	3607e300 	tbz	w0, #0, 999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99d84:	f9400284 	ldr	x4, [x20]
   99d88:	aa1403e0 	mov	x0, x20
   99d8c:	52800023 	mov	w3, #0x1                   	// #1
   99d90:	52800002 	mov	w2, #0x0                   	// #0
   99d94:	52800101 	mov	w1, #0x8                   	// #8
   99d98:	f9403084 	ldr	x4, [x4, #96]
   99d9c:	d63f0080 	blr	x4
   99da0:	12001c15 	and	w21, w0, #0xff
   99da4:	17ffff10 	b	999e4 <CUSBSerialPL2303Device::Configure()+0x124>
   99da8:	94002792 	bl	a3bf0 <CLogger::Get()>
   99dac:	910a4321 	add	x1, x25, #0x290
   99db0:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99db4:	911a8063 	add	x3, x3, #0x6a0
   99db8:	52800022 	mov	w2, #0x1                   	// #1
   99dbc:	94002981 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99dc0:	17ffff08 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99dc4:	9400278b 	bl	a3bf0 <CLogger::Get()>
   99dc8:	910a4321 	add	x1, x25, #0x290
   99dcc:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99dd0:	911ac063 	add	x3, x3, #0x6b0
   99dd4:	52800022 	mov	w2, #0x1                   	// #1
   99dd8:	9400297a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99ddc:	17ffff01 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99de0:	94002784 	bl	a3bf0 <CLogger::Get()>
   99de4:	910a4321 	add	x1, x25, #0x290
   99de8:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99dec:	911b0063 	add	x3, x3, #0x6c0
   99df0:	52800022 	mov	w2, #0x1                   	// #1
   99df4:	94002973 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99df8:	17fffefa 	b	999e0 <CUSBSerialPL2303Device::Configure()+0x120>
   99dfc:	d503201f 	nop

0000000000099e00 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   99e00:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   99e04:	910003fd 	mov	x29, sp
   99e08:	a90153f3 	stp	x19, x20, [sp, #16]
   99e0c:	a9025bf5 	stp	x21, x22, [sp, #32]
   99e10:	2a0103f6 	mov	w22, w1
   99e14:	a90363f7 	stp	x23, x24, [sp, #48]
   99e18:	2a0203f8 	mov	w24, w2
   99e1c:	aa0003f7 	mov	x23, x0
   99e20:	f90023f9 	str	x25, [sp, #64]
   99e24:	2a0303f9 	mov	w25, w3
   99e28:	97ffda12 	bl	90670 <CUSBFunction::GetHost() const>
   99e2c:	b4000ca0 	cbz	x0, 99fc0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c0>
   99e30:	9102bff3 	add	x19, sp, #0xaf
   99e34:	aa0003f4 	mov	x20, x0
   99e38:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   99e3c:	aa1703e0 	mov	x0, x23
   99e40:	a9007e7f 	stp	xzr, xzr, [x19]
   99e44:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   99e48:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   99e4c:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   99e50:	97ffd9fc 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   99e54:	aa1303e6 	mov	x6, x19
   99e58:	aa0003e1 	mov	x1, x0
   99e5c:	528000e7 	mov	w7, #0x7                   	// #7
   99e60:	aa1403e0 	mov	x0, x20
   99e64:	52800005 	mov	w5, #0x0                   	// #0
   99e68:	52800004 	mov	w4, #0x0                   	// #0
   99e6c:	52800423 	mov	w3, #0x21                  	// #33
   99e70:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   99e74:	97ffe807 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99e78:	71001c1f 	cmp	w0, #0x7
   99e7c:	54000621 	b.ne	99f40 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x140>  // b.any
   99e80:	910143f5 	add	x21, sp, #0x50
   99e84:	aa1503e0 	mov	x0, x21
   99e88:	940038a6 	bl	a8120 <CString::CString()>
   99e8c:	71001edf 	cmp	w22, #0x7
   99e90:	540000c0 	b.eq	99ea8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa8>  // b.none
   99e94:	54000808 	b.hi	99f94 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x194>  // b.pmore
   99e98:	710016df 	cmp	w22, #0x5
   99e9c:	54000060 	b.eq	99ea8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa8>  // b.none
   99ea0:	71001adf 	cmp	w22, #0x6
   99ea4:	540007c1 	b.ne	99f9c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x19c>  // b.any
   99ea8:	2a1603e2 	mov	w2, w22
   99eac:	aa1503e0 	mov	x0, x21
   99eb0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99eb4:	910f4021 	add	x1, x1, #0x3d0
   99eb8:	39001a76 	strb	w22, [x19, #6]
   99ebc:	94003ea1 	bl	a9940 <CString::Format(char const*, ...)>
   99ec0:	7100071f 	cmp	w24, #0x1
   99ec4:	540008a0 	b.eq	99fd8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d8>  // b.none
   99ec8:	71000b1f 	cmp	w24, #0x2
   99ecc:	54000580 	b.eq	99f7c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x17c>  // b.none
   99ed0:	35000c78 	cbnz	w24, 9a05c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   99ed4:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99ed8:	910fc021 	add	x1, x1, #0x3f0
   99edc:	aa1503e0 	mov	x0, x21
   99ee0:	3900167f 	strb	wzr, [x19, #5]
   99ee4:	94003927 	bl	a8380 <CString::Append(char const*)>
   99ee8:	7100073f 	cmp	w25, #0x1
   99eec:	54000ac0 	b.eq	9a044 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x244>  // b.none
   99ef0:	71000b3f 	cmp	w25, #0x2
   99ef4:	540007e0 	b.eq	99ff0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>  // b.none
   99ef8:	9400273e 	bl	a3bf0 <CLogger::Get()>
   99efc:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99f00:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99f04:	2a1903e4 	mov	w4, w25
   99f08:	91108063 	add	x3, x3, #0x420
   99f0c:	910a4021 	add	x1, x1, #0x290
   99f10:	52800022 	mov	w2, #0x1                   	// #1
   99f14:	9400292b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99f18:	52800013 	mov	w19, #0x0                   	// #0
   99f1c:	aa1503e0 	mov	x0, x21
   99f20:	94003844 	bl	a8030 <CString::~CString()>
   99f24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99f28:	2a1303e0 	mov	w0, w19
   99f2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99f30:	a94363f7 	ldp	x23, x24, [sp, #48]
   99f34:	f94023f9 	ldr	x25, [sp, #64]
   99f38:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   99f3c:	d65f03c0 	ret
   99f40:	9400272c 	bl	a3bf0 <CLogger::Get()>
   99f44:	52800013 	mov	w19, #0x0                   	// #0
   99f48:	52800022 	mov	w2, #0x1                   	// #1
   99f4c:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99f50:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99f54:	911b4063 	add	x3, x3, #0x6d0
   99f58:	910a4021 	add	x1, x1, #0x290
   99f5c:	94002919 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99f60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99f64:	2a1303e0 	mov	w0, w19
   99f68:	a94153f3 	ldp	x19, x20, [sp, #16]
   99f6c:	a94363f7 	ldp	x23, x24, [sp, #48]
   99f70:	f94023f9 	ldr	x25, [sp, #64]
   99f74:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   99f78:	d65f03c0 	ret
   99f7c:	aa1503e0 	mov	x0, x21
   99f80:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99f84:	91100021 	add	x1, x1, #0x400
   99f88:	39001678 	strb	w24, [x19, #5]
   99f8c:	940038fd 	bl	a8380 <CString::Append(char const*)>
   99f90:	17ffffd6 	b	99ee8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe8>
   99f94:	710022df 	cmp	w22, #0x8
   99f98:	54fff880 	b.eq	99ea8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa8>  // b.none
   99f9c:	94002715 	bl	a3bf0 <CLogger::Get()>
   99fa0:	2a1603e4 	mov	w4, w22
   99fa4:	900000e3 	adrp	x3, b5000 <_etext+0x29c8>
   99fa8:	f00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   99fac:	910f6063 	add	x3, x3, #0x3d8
   99fb0:	910a4021 	add	x1, x1, #0x290
   99fb4:	52800022 	mov	w2, #0x1                   	// #1
   99fb8:	94002902 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99fbc:	17ffffd7 	b	99f18 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>
   99fc0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99fc4:	f00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   99fc8:	91180021 	add	x1, x1, #0x600
   99fcc:	91330000 	add	x0, x0, #0xcc0
   99fd0:	528022a2 	mov	w2, #0x115                 	// #277
   99fd4:	94001fcb 	bl	a1f00 <assertion_failed>
   99fd8:	aa1503e0 	mov	x0, x21
   99fdc:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99fe0:	910fe021 	add	x1, x1, #0x3f8
   99fe4:	39001678 	strb	w24, [x19, #5]
   99fe8:	940038e6 	bl	a8380 <CString::Append(char const*)>
   99fec:	17ffffbf 	b	99ee8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe8>
   99ff0:	900000e1 	adrp	x1, b5000 <_etext+0x29c8>
   99ff4:	910b2021 	add	x1, x1, #0x2c8
   99ff8:	aa1503e0 	mov	x0, x21
   99ffc:	39001279 	strb	w25, [x19, #4]
   9a000:	940038e0 	bl	a8380 <CString::Append(char const*)>
   9a004:	aa1703e0 	mov	x0, x23
   9a008:	97ffd98e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a00c:	aa1303e6 	mov	x6, x19
   9a010:	aa0003e1 	mov	x1, x0
   9a014:	528000e7 	mov	w7, #0x7                   	// #7
   9a018:	aa1403e0 	mov	x0, x20
   9a01c:	52800005 	mov	w5, #0x0                   	// #0
   9a020:	52800004 	mov	w4, #0x0                   	// #0
   9a024:	52800403 	mov	w3, #0x20                  	// #32
   9a028:	52800422 	mov	w2, #0x21                  	// #33
   9a02c:	97ffe799 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a030:	37f80280 	tbnz	w0, #31, 9a080 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   9a034:	52800033 	mov	w19, #0x1                   	// #1
   9a038:	2905e2f6 	stp	w22, w24, [x23, #44]
   9a03c:	b90036f9 	str	w25, [x23, #52]
   9a040:	17ffffb7 	b	99f1c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>
   9a044:	aa1503e0 	mov	x0, x21
   9a048:	d00000c1 	adrp	x1, b4000 <_etext+0x19c8>
   9a04c:	91104021 	add	x1, x1, #0x410
   9a050:	3900127f 	strb	wzr, [x19, #4]
   9a054:	940038cb 	bl	a8380 <CString::Append(char const*)>
   9a058:	17ffffeb 	b	9a004 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x204>
   9a05c:	940026e5 	bl	a3bf0 <CLogger::Get()>
   9a060:	2a1803e4 	mov	w4, w24
   9a064:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a068:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a06c:	91102063 	add	x3, x3, #0x408
   9a070:	910a4021 	add	x1, x1, #0x290
   9a074:	52800022 	mov	w2, #0x1                   	// #1
   9a078:	940028d2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a07c:	17ffffa7 	b	99f18 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>
   9a080:	940026dc 	bl	a3bf0 <CLogger::Get()>
   9a084:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a088:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a08c:	91168063 	add	x3, x3, #0x5a0
   9a090:	910a4021 	add	x1, x1, #0x290
   9a094:	52800022 	mov	w2, #0x1                   	// #1
   9a098:	940028ca 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a09c:	17ffff9f 	b	99f18 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>

000000000009a0a0 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   9a0a0:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a0a4:	913a2021 	add	x1, x1, #0xe88
   9a0a8:	f9000001 	str	x1, [x0]
   9a0ac:	140014f9 	b	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

000000000009a0b0 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   9a0b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a0b4:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a0b8:	913a2021 	add	x1, x1, #0xe88
   9a0bc:	910003fd 	mov	x29, sp
   9a0c0:	f9000bf3 	str	x19, [sp, #16]
   9a0c4:	aa0003f3 	mov	x19, x0
   9a0c8:	f9000001 	str	x1, [x0]
   9a0cc:	940014f1 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   9a0d0:	aa1303e0 	mov	x0, x19
   9a0d4:	d2800f01 	mov	x1, #0x78                  	// #120
   9a0d8:	f9400bf3 	ldr	x19, [sp, #16]
   9a0dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a0e0:	140046b4 	b	abbb0 <operator delete(void*, unsigned long)>
   9a0e4:	d503201f 	nop
   9a0e8:	d503201f 	nop
   9a0ec:	d503201f 	nop

000000000009a0f0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)>:
   9a0f0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9a0f4:	910003fd 	mov	x29, sp
   9a0f8:	a90153f3 	stp	x19, x20, [sp, #16]
   9a0fc:	aa0003f4 	mov	x20, x0
   9a100:	a9025bf5 	stp	x21, x22, [sp, #32]
   9a104:	2a0103f6 	mov	w22, w1
   9a108:	f9001bf7 	str	x23, [sp, #48]
   9a10c:	97ffd959 	bl	90670 <CUSBFunction::GetHost() const>
   9a110:	b4000880 	cbz	x0, 9a220 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x130>
   9a114:	5286c005 	mov	w5, #0x3600                	// #13824
   9a118:	72a02dc5 	movk	w5, #0x16e, lsl #16
   9a11c:	d2806001 	mov	x1, #0x300                 	// #768
   9a120:	f2a08041 	movk	x1, #0x402, lsl #16
   9a124:	1ad608a5 	udiv	w5, w5, w22
   9a128:	f2c0a021 	movk	x1, #0x501, lsl #32
   9a12c:	f2e0e0c1 	movk	x1, #0x706, lsl #48
   9a130:	aa0003f5 	mov	x21, x0
   9a134:	910123e0 	add	x0, sp, #0x48
   9a138:	f90027e1 	str	x1, [sp, #72]
   9a13c:	120008a1 	and	w1, w5, #0x7
   9a140:	3861c800 	ldrb	w0, [x0, w1, sxtw]
   9a144:	53124400 	lsl	w0, w0, #14
   9a148:	2a450c05 	orr	w5, w0, w5, lsr #3
   9a14c:	710004bf 	cmp	w5, #0x1
   9a150:	54000480 	b.eq	9a1e0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xf0>  // b.none
   9a154:	52880020 	mov	w0, #0x4001                	// #16385
   9a158:	6b0000bf 	cmp	w5, w0
   9a15c:	540003c0 	b.eq	9a1d4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xe4>  // b.none
   9a160:	12003cb7 	and	w23, w5, #0xffff
   9a164:	53107cb3 	lsr	w19, w5, #16
   9a168:	aa1403e0 	mov	x0, x20
   9a16c:	97ffd935 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a170:	2a1303e5 	mov	w5, w19
   9a174:	aa0003e1 	mov	x1, x0
   9a178:	2a1703e4 	mov	w4, w23
   9a17c:	aa1503e0 	mov	x0, x21
   9a180:	52800007 	mov	w7, #0x0                   	// #0
   9a184:	d2800006 	mov	x6, #0x0                   	// #0
   9a188:	52800063 	mov	w3, #0x3                   	// #3
   9a18c:	52800802 	mov	w2, #0x40                  	// #64
   9a190:	97ffe740 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a194:	37f802c0 	tbnz	w0, #31, 9a1ec <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xfc>
   9a198:	b9002a96 	str	w22, [x20, #40]
   9a19c:	94002695 	bl	a3bf0 <CLogger::Get()>
   9a1a0:	b9402a84 	ldr	w4, [x20, #40]
   9a1a4:	52800082 	mov	w2, #0x4                   	// #4
   9a1a8:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a1ac:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a1b0:	91138063 	add	x3, x3, #0x4e0
   9a1b4:	910a8021 	add	x1, x1, #0x2a0
   9a1b8:	94002882 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a1bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a1c0:	52800020 	mov	w0, #0x1                   	// #1
   9a1c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9a1c8:	f9401bf7 	ldr	x23, [sp, #48]
   9a1cc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a1d0:	d65f03c0 	ret
   9a1d4:	52800013 	mov	w19, #0x0                   	// #0
   9a1d8:	52800037 	mov	w23, #0x1                   	// #1
   9a1dc:	17ffffe3 	b	9a168 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x78>
   9a1e0:	52800013 	mov	w19, #0x0                   	// #0
   9a1e4:	52800017 	mov	w23, #0x0                   	// #0
   9a1e8:	17ffffe0 	b	9a168 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x78>
   9a1ec:	94002681 	bl	a3bf0 <CLogger::Get()>
   9a1f0:	52800022 	mov	w2, #0x1                   	// #1
   9a1f4:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a1f8:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a1fc:	91132063 	add	x3, x3, #0x4c8
   9a200:	910a8021 	add	x1, x1, #0x2a0
   9a204:	9400286f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a208:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a20c:	52800000 	mov	w0, #0x0                   	// #0
   9a210:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9a214:	f9401bf7 	ldr	x23, [sp, #48]
   9a218:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a21c:	d65f03c0 	ret
   9a220:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a224:	d00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   9a228:	911bc021 	add	x1, x1, #0x6f0
   9a22c:	91330000 	add	x0, x0, #0xcc0
   9a230:	52800f62 	mov	w2, #0x7b                  	// #123
   9a234:	94001f33 	bl	a1f00 <assertion_failed>
   9a238:	d503201f 	nop
   9a23c:	d503201f 	nop

000000000009a240 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>:
   9a240:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a244:	d2800042 	mov	x2, #0x2                   	// #2
   9a248:	910003fd 	mov	x29, sp
   9a24c:	f9000bf3 	str	x19, [sp, #16]
   9a250:	aa0003f3 	mov	x19, x0
   9a254:	94001613 	bl	9faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   9a258:	f0000160 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a25c:	913a2000 	add	x0, x0, #0xe88
   9a260:	f9000260 	str	x0, [x19]
   9a264:	f9400bf3 	ldr	x19, [sp, #16]
   9a268:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a26c:	d65f03c0 	ret

000000000009a270 <CUSBSerialFT231XDevice::GetDeviceIDTable()>:
   9a270:	d00000e0 	adrp	x0, b8000 <FromUmsd+0x60>
   9a274:	910a8000 	add	x0, x0, #0x2a0
   9a278:	91002000 	add	x0, x0, #0x8
   9a27c:	d65f03c0 	ret

000000000009a280 <CUSBSerialFT231XDevice::Configure()>:
   9a280:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9a284:	910003fd 	mov	x29, sp
   9a288:	a90153f3 	stp	x19, x20, [sp, #16]
   9a28c:	aa0003f3 	mov	x19, x0
   9a290:	9400166c 	bl	9fc40 <CUSBSerialHostDevice::Configure()>
   9a294:	36000a80 	tbz	w0, #0, 9a3e4 <CUSBSerialFT231XDevice::Configure()+0x164>
   9a298:	aa1303e0 	mov	x0, x19
   9a29c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9a2a0:	97ffd8dc 	bl	90610 <CUSBFunction::GetDevice() const>
   9a2a4:	97ffd0e7 	bl	8e640 <CUSBDevice::GetDeviceDescriptor() const>
   9a2a8:	aa0003f4 	mov	x20, x0
   9a2ac:	9100c3f5 	add	x21, sp, #0x30
   9a2b0:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a2b4:	911c2021 	add	x1, x1, #0x708
   9a2b8:	aa1503e0 	mov	x0, x21
   9a2bc:	940037a1 	bl	a8140 <CString::CString(char const*)>
   9a2c0:	39403281 	ldrb	w1, [x20, #12]
   9a2c4:	39403680 	ldrb	w0, [x20, #13]
   9a2c8:	2a002020 	orr	w0, w1, w0, lsl #8
   9a2cc:	7140041f 	cmp	w0, #0x1, lsl #12
   9a2d0:	54000c60 	b.eq	9a45c <CUSBSerialFT231XDevice::Configure()+0x1dc>  // b.none
   9a2d4:	7118001f 	cmp	w0, #0x600
   9a2d8:	540009e0 	b.eq	9a414 <CUSBSerialFT231XDevice::Configure()+0x194>  // b.none
   9a2dc:	511c0000 	sub	w0, w0, #0x700
   9a2e0:	529fbfe1 	mov	w1, #0xfdff                	// #65023
   9a2e4:	6a01001f 	tst	w0, w1
   9a2e8:	54000b00 	b.eq	9a448 <CUSBSerialFT231XDevice::Configure()+0x1c8>  // b.none
   9a2ec:	94002641 	bl	a3bf0 <CLogger::Get()>
   9a2f0:	d00000f6 	adrp	x22, b8000 <FromUmsd+0x60>
   9a2f4:	910a82d6 	add	x22, x22, #0x2a0
   9a2f8:	aa0003f4 	mov	x20, x0
   9a2fc:	aa1503e0 	mov	x0, x21
   9a300:	940037cc 	bl	a8230 <CString::operator char const*() const>
   9a304:	aa1603e1 	mov	x1, x22
   9a308:	aa0003e4 	mov	x4, x0
   9a30c:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a310:	91144063 	add	x3, x3, #0x510
   9a314:	52800062 	mov	w2, #0x3                   	// #3
   9a318:	aa1403e0 	mov	x0, x20
   9a31c:	94002829 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a320:	aa1303e0 	mov	x0, x19
   9a324:	97ffd8d3 	bl	90670 <CUSBFunction::GetHost() const>
   9a328:	aa0003f4 	mov	x20, x0
   9a32c:	b4000a20 	cbz	x0, 9a470 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   9a330:	aa1303e0 	mov	x0, x19
   9a334:	97ffd8c3 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a338:	52800007 	mov	w7, #0x0                   	// #0
   9a33c:	aa0003e1 	mov	x1, x0
   9a340:	d2800006 	mov	x6, #0x0                   	// #0
   9a344:	aa1403e0 	mov	x0, x20
   9a348:	52800005 	mov	w5, #0x0                   	// #0
   9a34c:	52800004 	mov	w4, #0x0                   	// #0
   9a350:	52800003 	mov	w3, #0x0                   	// #0
   9a354:	52800802 	mov	w2, #0x40                  	// #64
   9a358:	97ffe6ce 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a35c:	37f80660 	tbnz	w0, #31, 9a428 <CUSBSerialFT231XDevice::Configure()+0x1a8>
   9a360:	aa1303e0 	mov	x0, x19
   9a364:	97ffd8b7 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a368:	52800007 	mov	w7, #0x0                   	// #0
   9a36c:	aa0003e1 	mov	x1, x0
   9a370:	d2800006 	mov	x6, #0x0                   	// #0
   9a374:	aa1403e0 	mov	x0, x20
   9a378:	52800005 	mov	w5, #0x0                   	// #0
   9a37c:	52800004 	mov	w4, #0x0                   	// #0
   9a380:	52800043 	mov	w3, #0x2                   	// #2
   9a384:	52800802 	mov	w2, #0x40                  	// #64
   9a388:	97ffe6c2 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a38c:	37f807e0 	tbnz	w0, #31, 9a488 <CUSBSerialFT231XDevice::Configure()+0x208>
   9a390:	f9400262 	ldr	x2, [x19]
   9a394:	aa1303e0 	mov	x0, x19
   9a398:	5284b001 	mov	w1, #0x2580                	// #9600
   9a39c:	f9402c42 	ldr	x2, [x2, #88]
   9a3a0:	d63f0040 	blr	x2
   9a3a4:	360004e0 	tbz	w0, #0, 9a440 <CUSBSerialFT231XDevice::Configure()+0x1c0>
   9a3a8:	f9400264 	ldr	x4, [x19]
   9a3ac:	aa1303e0 	mov	x0, x19
   9a3b0:	52800023 	mov	w3, #0x1                   	// #1
   9a3b4:	52800002 	mov	w2, #0x0                   	// #0
   9a3b8:	52800101 	mov	w1, #0x8                   	// #8
   9a3bc:	f9403084 	ldr	x4, [x4, #96]
   9a3c0:	d63f0080 	blr	x4
   9a3c4:	12001c14 	and	w20, w0, #0xff
   9a3c8:	aa1503e0 	mov	x0, x21
   9a3cc:	94003719 	bl	a8030 <CString::~CString()>
   9a3d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9a3d4:	2a1403e0 	mov	w0, w20
   9a3d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a3dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a3e0:	d65f03c0 	ret
   9a3e4:	12001c14 	and	w20, w0, #0xff
   9a3e8:	94002602 	bl	a3bf0 <CLogger::Get()>
   9a3ec:	52800022 	mov	w2, #0x1                   	// #1
   9a3f0:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a3f4:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a3f8:	910d8063 	add	x3, x3, #0x360
   9a3fc:	910a8021 	add	x1, x1, #0x2a0
   9a400:	940027f0 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a404:	2a1403e0 	mov	w0, w20
   9a408:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a40c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a410:	d65f03c0 	ret
   9a414:	aa1503e0 	mov	x0, x21
   9a418:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a41c:	911c6021 	add	x1, x1, #0x718
   9a420:	9400378c 	bl	a8250 <CString::operator=(char const*)>
   9a424:	17ffffb2 	b	9a2ec <CUSBSerialFT231XDevice::Configure()+0x6c>
   9a428:	940025f2 	bl	a3bf0 <CLogger::Get()>
   9a42c:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a430:	911ca063 	add	x3, x3, #0x728
   9a434:	aa1603e1 	mov	x1, x22
   9a438:	52800022 	mov	w2, #0x1                   	// #1
   9a43c:	940027e1 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a440:	52800014 	mov	w20, #0x0                   	// #0
   9a444:	17ffffe1 	b	9a3c8 <CUSBSerialFT231XDevice::Configure()+0x148>
   9a448:	aa1503e0 	mov	x0, x21
   9a44c:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a450:	911c8021 	add	x1, x1, #0x720
   9a454:	9400377f 	bl	a8250 <CString::operator=(char const*)>
   9a458:	17ffffa5 	b	9a2ec <CUSBSerialFT231XDevice::Configure()+0x6c>
   9a45c:	aa1503e0 	mov	x0, x21
   9a460:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a464:	911c4021 	add	x1, x1, #0x710
   9a468:	9400377a 	bl	a8250 <CString::operator=(char const*)>
   9a46c:	17ffffa0 	b	9a2ec <CUSBSerialFT231XDevice::Configure()+0x6c>
   9a470:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a474:	d00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   9a478:	911bc021 	add	x1, x1, #0x6f0
   9a47c:	91330000 	add	x0, x0, #0xcc0
   9a480:	52800a22 	mov	w2, #0x51                  	// #81
   9a484:	94001e9f 	bl	a1f00 <assertion_failed>
   9a488:	940025da 	bl	a3bf0 <CLogger::Get()>
   9a48c:	52800014 	mov	w20, #0x0                   	// #0
   9a490:	aa1603e1 	mov	x1, x22
   9a494:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a498:	911d0063 	add	x3, x3, #0x740
   9a49c:	52800022 	mov	w2, #0x1                   	// #1
   9a4a0:	940027c8 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a4a4:	17ffffc9 	b	9a3c8 <CUSBSerialFT231XDevice::Configure()+0x148>
   9a4a8:	d503201f 	nop
   9a4ac:	d503201f 	nop

000000000009a4b0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   9a4b0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9a4b4:	910003fd 	mov	x29, sp
   9a4b8:	a90153f3 	stp	x19, x20, [sp, #16]
   9a4bc:	2a0103f3 	mov	w19, w1
   9a4c0:	2a0203f4 	mov	w20, w2
   9a4c4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9a4c8:	a90363f7 	stp	x23, x24, [sp, #48]
   9a4cc:	aa0003f8 	mov	x24, x0
   9a4d0:	f90023f9 	str	x25, [sp, #64]
   9a4d4:	2a0303f9 	mov	w25, w3
   9a4d8:	97ffd866 	bl	90670 <CUSBFunction::GetHost() const>
   9a4dc:	b4000ea0 	cbz	x0, 9a6b0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x200>
   9a4e0:	910143f7 	add	x23, sp, #0x50
   9a4e4:	aa0003f5 	mov	x21, x0
   9a4e8:	aa1703e0 	mov	x0, x23
   9a4ec:	9400370d 	bl	a8120 <CString::CString()>
   9a4f0:	71001e7f 	cmp	w19, #0x7
   9a4f4:	540002a0 	b.eq	9a548 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x98>  // b.none
   9a4f8:	7100227f 	cmp	w19, #0x8
   9a4fc:	54000260 	b.eq	9a548 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x98>  // b.none
   9a500:	940025bc 	bl	a3bf0 <CLogger::Get()>
   9a504:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a508:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a50c:	2a1303e4 	mov	w4, w19
   9a510:	91158063 	add	x3, x3, #0x560
   9a514:	910a8021 	add	x1, x1, #0x2a0
   9a518:	52800022 	mov	w2, #0x1                   	// #1
   9a51c:	940027a9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a520:	52800013 	mov	w19, #0x0                   	// #0
   9a524:	aa1703e0 	mov	x0, x23
   9a528:	940036c2 	bl	a8030 <CString::~CString()>
   9a52c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9a530:	2a1303e0 	mov	w0, w19
   9a534:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a538:	a94363f7 	ldp	x23, x24, [sp, #48]
   9a53c:	f94023f9 	ldr	x25, [sp, #64]
   9a540:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9a544:	d65f03c0 	ret
   9a548:	2a1303e2 	mov	w2, w19
   9a54c:	aa1703e0 	mov	x0, x23
   9a550:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a554:	910f4021 	add	x1, x1, #0x3d0
   9a558:	94003cfa 	bl	a9940 <CString::Format(char const*, ...)>
   9a55c:	2a1303f6 	mov	w22, w19
   9a560:	7100069f 	cmp	w20, #0x1
   9a564:	54000560 	b.eq	9a610 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x160>  // b.none
   9a568:	71000a9f 	cmp	w20, #0x2
   9a56c:	54000380 	b.eq	9a5dc <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x12c>  // b.none
   9a570:	35000254 	cbnz	w20, 9a5b8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x108>
   9a574:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a578:	910fc021 	add	x1, x1, #0x3f0
   9a57c:	aa1703e0 	mov	x0, x23
   9a580:	94003780 	bl	a8380 <CString::Append(char const*)>
   9a584:	7100073f 	cmp	w25, #0x1
   9a588:	540003a0 	b.eq	9a5fc <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x14c>  // b.none
   9a58c:	71000b3f 	cmp	w25, #0x2
   9a590:	540004e0 	b.eq	9a62c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x17c>  // b.none
   9a594:	94002597 	bl	a3bf0 <CLogger::Get()>
   9a598:	2a1903e4 	mov	w4, w25
   9a59c:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a5a0:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a5a4:	91108063 	add	x3, x3, #0x420
   9a5a8:	910a8021 	add	x1, x1, #0x2a0
   9a5ac:	52800022 	mov	w2, #0x1                   	// #1
   9a5b0:	94002784 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a5b4:	17ffffdb 	b	9a520 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   9a5b8:	9400258e 	bl	a3bf0 <CLogger::Get()>
   9a5bc:	2a1403e4 	mov	w4, w20
   9a5c0:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a5c4:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a5c8:	91102063 	add	x3, x3, #0x408
   9a5cc:	910a8021 	add	x1, x1, #0x2a0
   9a5d0:	52800022 	mov	w2, #0x1                   	// #1
   9a5d4:	9400277b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a5d8:	17ffffd2 	b	9a520 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   9a5dc:	32170276 	orr	w22, w19, #0x200
   9a5e0:	aa1703e0 	mov	x0, x23
   9a5e4:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a5e8:	91100021 	add	x1, x1, #0x400
   9a5ec:	94003765 	bl	a8380 <CString::Append(char const*)>
   9a5f0:	12003ed6 	and	w22, w22, #0xffff
   9a5f4:	7100073f 	cmp	w25, #0x1
   9a5f8:	54fffca1 	b.ne	9a58c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>  // b.any
   9a5fc:	aa1703e0 	mov	x0, x23
   9a600:	d00000c1 	adrp	x1, b4000 <_etext+0x19c8>
   9a604:	91104021 	add	x1, x1, #0x410
   9a608:	9400375e 	bl	a8380 <CString::Append(char const*)>
   9a60c:	1400000d 	b	9a640 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x190>
   9a610:	32180276 	orr	w22, w19, #0x100
   9a614:	aa1703e0 	mov	x0, x23
   9a618:	12003ed6 	and	w22, w22, #0xffff
   9a61c:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a620:	910fe021 	add	x1, x1, #0x3f8
   9a624:	94003757 	bl	a8380 <CString::Append(char const*)>
   9a628:	17ffffd7 	b	9a584 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd4>
   9a62c:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a630:	910b2021 	add	x1, x1, #0x2c8
   9a634:	321402d6 	orr	w22, w22, #0x1000
   9a638:	aa1703e0 	mov	x0, x23
   9a63c:	94003751 	bl	a8380 <CString::Append(char const*)>
   9a640:	aa1803e0 	mov	x0, x24
   9a644:	97ffd7ff 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a648:	2a1603e4 	mov	w4, w22
   9a64c:	aa0003e1 	mov	x1, x0
   9a650:	52800007 	mov	w7, #0x0                   	// #0
   9a654:	aa1503e0 	mov	x0, x21
   9a658:	d2800006 	mov	x6, #0x0                   	// #0
   9a65c:	52800005 	mov	w5, #0x0                   	// #0
   9a660:	52800083 	mov	w3, #0x4                   	// #4
   9a664:	52800802 	mov	w2, #0x40                  	// #64
   9a668:	97ffe60a 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a66c:	37f802e0 	tbnz	w0, #31, 9a6c8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x218>
   9a670:	2905d313 	stp	w19, w20, [x24, #44]
   9a674:	b9003719 	str	w25, [x24, #52]
   9a678:	9400255e 	bl	a3bf0 <CLogger::Get()>
   9a67c:	aa0003f3 	mov	x19, x0
   9a680:	aa1703e0 	mov	x0, x23
   9a684:	940036eb 	bl	a8230 <CString::operator char const*() const>
   9a688:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a68c:	aa0003e4 	mov	x4, x0
   9a690:	911d8063 	add	x3, x3, #0x760
   9a694:	aa1303e0 	mov	x0, x19
   9a698:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a69c:	52800082 	mov	w2, #0x4                   	// #4
   9a6a0:	910a8021 	add	x1, x1, #0x2a0
   9a6a4:	52800033 	mov	w19, #0x1                   	// #1
   9a6a8:	94002746 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a6ac:	17ffff9e 	b	9a524 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x74>
   9a6b0:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a6b4:	d00000c0 	adrp	x0, b4000 <_etext+0x19c8>
   9a6b8:	911bc021 	add	x1, x1, #0x6f0
   9a6bc:	91330000 	add	x0, x0, #0xcc0
   9a6c0:	52801422 	mov	w2, #0xa1                  	// #161
   9a6c4:	94001e0f 	bl	a1f00 <assertion_failed>
   9a6c8:	9400254a 	bl	a3bf0 <CLogger::Get()>
   9a6cc:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a6d0:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a6d4:	91168063 	add	x3, x3, #0x5a0
   9a6d8:	910a8021 	add	x1, x1, #0x2a0
   9a6dc:	52800022 	mov	w2, #0x1                   	// #1
   9a6e0:	94002738 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a6e4:	17ffff8f 	b	9a520 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
	...

000000000009a6f0 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   9a6f0:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a6f4:	913c0021 	add	x1, x1, #0xf00
   9a6f8:	f9000001 	str	x1, [x0]
   9a6fc:	14001365 	b	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

000000000009a700 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   9a700:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a704:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a708:	913c0021 	add	x1, x1, #0xf00
   9a70c:	910003fd 	mov	x29, sp
   9a710:	f9000bf3 	str	x19, [sp, #16]
   9a714:	aa0003f3 	mov	x19, x0
   9a718:	f9000001 	str	x1, [x0]
   9a71c:	9400135d 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   9a720:	aa1303e0 	mov	x0, x19
   9a724:	d2800f01 	mov	x1, #0x78                  	// #120
   9a728:	f9400bf3 	ldr	x19, [sp, #16]
   9a72c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a730:	14004520 	b	abbb0 <operator delete(void*, unsigned long)>
   9a734:	d503201f 	nop
   9a738:	d503201f 	nop
   9a73c:	d503201f 	nop

000000000009a740 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>:
   9a740:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a744:	d2800002 	mov	x2, #0x0                   	// #0
   9a748:	910003fd 	mov	x29, sp
   9a74c:	f9000bf3 	str	x19, [sp, #16]
   9a750:	aa0003f3 	mov	x19, x0
   9a754:	940014d3 	bl	9faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   9a758:	f0000160 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a75c:	913c0000 	add	x0, x0, #0xf00
   9a760:	f9000260 	str	x0, [x19]
   9a764:	aa1303e0 	mov	x0, x19
   9a768:	97ffd826 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   9a76c:	3901d660 	strb	w0, [x19, #117]
   9a770:	52800003 	mov	w3, #0x0                   	// #0
   9a774:	aa1303e0 	mov	x0, x19
   9a778:	52800002 	mov	w2, #0x0                   	// #0
   9a77c:	52800141 	mov	w1, #0xa                   	// #10
   9a780:	97ffd7e8 	bl	90720 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   9a784:	3901da60 	strb	w0, [x19, #118]
   9a788:	f9400bf3 	ldr	x19, [sp, #16]
   9a78c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a790:	d65f03c0 	ret
   9a794:	d503201f 	nop
   9a798:	d503201f 	nop
   9a79c:	d503201f 	nop

000000000009a7a0 <CUSBSerialCDCDevice::SetLineCoding()>:
   9a7a0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   9a7a4:	910003fd 	mov	x29, sp
   9a7a8:	a90153f3 	stp	x19, x20, [sp, #16]
   9a7ac:	aa0003f4 	mov	x20, x0
   9a7b0:	9101bff3 	add	x19, sp, #0x6f
   9a7b4:	b9403400 	ldr	w0, [x0, #52]
   9a7b8:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   9a7bc:	29450a83 	ldp	w3, w2, [x20, #40]
   9a7c0:	7100041f 	cmp	w0, #0x1
   9a7c4:	b9403281 	ldr	w1, [x20, #48]
   9a7c8:	1a9f07e0 	cset	w0, ne	// ne = any
   9a7cc:	f90013f5 	str	x21, [sp, #32]
   9a7d0:	0b000000 	add	w0, w0, w0
   9a7d4:	b9000263 	str	w3, [x19]
   9a7d8:	7100043f 	cmp	w1, #0x1
   9a7dc:	39001260 	strb	w0, [x19, #4]
   9a7e0:	39001a62 	strb	w2, [x19, #6]
   9a7e4:	54000160 	b.eq	9a810 <CUSBSerialCDCDevice::SetLineCoding()+0x70>  // b.none
   9a7e8:	7100083f 	cmp	w1, #0x2
   9a7ec:	54000120 	b.eq	9a810 <CUSBSerialCDCDevice::SetLineCoding()+0x70>  // b.none
   9a7f0:	52800002 	mov	w2, #0x0                   	// #0
   9a7f4:	34000101 	cbz	w1, 9a814 <CUSBSerialCDCDevice::SetLineCoding()+0x74>
   9a7f8:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9a7fc:	b00000c0 	adrp	x0, b3000 <_etext+0x9c8>
   9a800:	911dc021 	add	x1, x1, #0x770
   9a804:	9135c000 	add	x0, x0, #0xd70
   9a808:	52800ee2 	mov	w2, #0x77                  	// #119
   9a80c:	94001dbd 	bl	a1f00 <assertion_failed>
   9a810:	2a0103e2 	mov	w2, w1
   9a814:	aa1403e0 	mov	x0, x20
   9a818:	39001662 	strb	w2, [x19, #5]
   9a81c:	97ffd795 	bl	90670 <CUSBFunction::GetHost() const>
   9a820:	aa0003f5 	mov	x21, x0
   9a824:	aa1403e0 	mov	x0, x20
   9a828:	97ffd786 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9a82c:	3941d685 	ldrb	w5, [x20, #117]
   9a830:	aa0003e1 	mov	x1, x0
   9a834:	aa1303e6 	mov	x6, x19
   9a838:	aa1503e0 	mov	x0, x21
   9a83c:	528000e7 	mov	w7, #0x7                   	// #7
   9a840:	52800004 	mov	w4, #0x0                   	// #0
   9a844:	52800403 	mov	w3, #0x20                  	// #32
   9a848:	52800422 	mov	w2, #0x21                  	// #33
   9a84c:	97ffe591 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9a850:	52800021 	mov	w1, #0x1                   	// #1
   9a854:	37f800c0 	tbnz	w0, #31, 9a86c <CUSBSerialCDCDevice::SetLineCoding()+0xcc>
   9a858:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a85c:	2a0103e0 	mov	w0, w1
   9a860:	f94013f5 	ldr	x21, [sp, #32]
   9a864:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9a868:	d65f03c0 	ret
   9a86c:	940024e1 	bl	a3bf0 <CLogger::Get()>
   9a870:	52800042 	mov	w2, #0x2                   	// #2
   9a874:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a878:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a87c:	911e2063 	add	x3, x3, #0x788
   9a880:	910b0021 	add	x1, x1, #0x2c0
   9a884:	940026cf 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a888:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a88c:	52800001 	mov	w1, #0x0                   	// #0
   9a890:	f94013f5 	ldr	x21, [sp, #32]
   9a894:	2a0103e0 	mov	w0, w1
   9a898:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9a89c:	d65f03c0 	ret

000000000009a8a0 <CUSBSerialCDCDevice::SetBaudRate(unsigned int)>:
   9a8a0:	b9002801 	str	w1, [x0, #40]
   9a8a4:	17ffffbf 	b	9a7a0 <CUSBSerialCDCDevice::SetLineCoding()>
   9a8a8:	d503201f 	nop
   9a8ac:	d503201f 	nop

000000000009a8b0 <CUSBSerialCDCDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   9a8b0:	29058801 	stp	w1, w2, [x0, #44]
   9a8b4:	b9003403 	str	w3, [x0, #52]
   9a8b8:	17ffffba 	b	9a7a0 <CUSBSerialCDCDevice::SetLineCoding()>
   9a8bc:	d503201f 	nop

000000000009a8c0 <CUSBSerialCDCDevice::Configure()>:
   9a8c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a8c4:	910003fd 	mov	x29, sp
   9a8c8:	3941d801 	ldrb	w1, [x0, #118]
   9a8cc:	36000281 	tbz	w1, #0, 9a91c <CUSBSerialCDCDevice::Configure()+0x5c>
   9a8d0:	f9000bf3 	str	x19, [sp, #16]
   9a8d4:	aa0003f3 	mov	x19, x0
   9a8d8:	940014da 	bl	9fc40 <CUSBSerialHostDevice::Configure()>
   9a8dc:	360000a0 	tbz	w0, #0, 9a8f0 <CUSBSerialCDCDevice::Configure()+0x30>
   9a8e0:	aa1303e0 	mov	x0, x19
   9a8e4:	f9400bf3 	ldr	x19, [sp, #16]
   9a8e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a8ec:	17ffffad 	b	9a7a0 <CUSBSerialCDCDevice::SetLineCoding()>
   9a8f0:	940024c0 	bl	a3bf0 <CLogger::Get()>
   9a8f4:	52800022 	mov	w2, #0x1                   	// #1
   9a8f8:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9a8fc:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a900:	910d8063 	add	x3, x3, #0x360
   9a904:	910b0021 	add	x1, x1, #0x2c0
   9a908:	940026ae 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a90c:	f9400bf3 	ldr	x19, [sp, #16]
   9a910:	52800000 	mov	w0, #0x0                   	// #0
   9a914:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a918:	d65f03c0 	ret
   9a91c:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9a920:	910b0021 	add	x1, x1, #0x2c0
   9a924:	97ffd76b 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9a928:	52800000 	mov	w0, #0x0                   	// #0
   9a92c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a930:	d65f03c0 	ret
	...

000000000009a940 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   9a940:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a944:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a948:	913de021 	add	x1, x1, #0xf78
   9a94c:	910003fd 	mov	x29, sp
   9a950:	f9000bf3 	str	x19, [sp, #16]
   9a954:	aa0003f3 	mov	x19, x0
   9a958:	f9411400 	ldr	x0, [x0, #552]
   9a95c:	f9000261 	str	x1, [x19]
   9a960:	b4000080 	cbz	x0, 9a970 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x30>
   9a964:	f9400001 	ldr	x1, [x0]
   9a968:	f9400421 	ldr	x1, [x1, #8]
   9a96c:	d63f0020 	blr	x1
   9a970:	f901167f 	str	xzr, [x19, #552]
   9a974:	aa1303e0 	mov	x0, x19
   9a978:	f9400bf3 	ldr	x19, [sp, #16]
   9a97c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a980:	17ffe2d8 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   9a984:	d503201f 	nop
   9a988:	d503201f 	nop
   9a98c:	d503201f 	nop

000000000009a990 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   9a990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a994:	f0000161 	adrp	x1, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a998:	913de021 	add	x1, x1, #0xf78
   9a99c:	910003fd 	mov	x29, sp
   9a9a0:	f9000bf3 	str	x19, [sp, #16]
   9a9a4:	aa0003f3 	mov	x19, x0
   9a9a8:	f9411400 	ldr	x0, [x0, #552]
   9a9ac:	f9000261 	str	x1, [x19]
   9a9b0:	b4000080 	cbz	x0, 9a9c0 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x30>
   9a9b4:	f9400001 	ldr	x1, [x0]
   9a9b8:	f9400421 	ldr	x1, [x1, #8]
   9a9bc:	d63f0020 	blr	x1
   9a9c0:	f901167f 	str	xzr, [x19, #552]
   9a9c4:	aa1303e0 	mov	x0, x19
   9a9c8:	97ffe2c6 	bl	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   9a9cc:	aa1303e0 	mov	x0, x19
   9a9d0:	d2804601 	mov	x1, #0x230                 	// #560
   9a9d4:	f9400bf3 	ldr	x19, [sp, #16]
   9a9d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a9dc:	14004475 	b	abbb0 <operator delete(void*, unsigned long)>

000000000009a9e0 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>:
   9a9e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a9e4:	52800002 	mov	w2, #0x0                   	// #0
   9a9e8:	910003fd 	mov	x29, sp
   9a9ec:	f9000bf3 	str	x19, [sp, #16]
   9a9f0:	aa0003f3 	mov	x19, x0
   9a9f4:	97ffe2a3 	bl	93480 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   9a9f8:	f0000160 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9a9fc:	913de000 	add	x0, x0, #0xf78
   9aa00:	f9000260 	str	x0, [x19]
   9aa04:	52800001 	mov	w1, #0x0                   	// #0
   9aa08:	f901167f 	str	xzr, [x19, #552]
   9aa0c:	91012260 	add	x0, x19, #0x48
   9aa10:	d2803482 	mov	x2, #0x1a4                 	// #420
   9aa14:	940041d5 	bl	ab168 <memset>
   9aa18:	9107b261 	add	x1, x19, #0x1ec
   9aa1c:	9107da60 	add	x0, x19, #0x1f6
   9aa20:	3800143f 	strb	wzr, [x1], #1
   9aa24:	eb00003f 	cmp	x1, x0
   9aa28:	54ffffc1 	b.ne	9aa20 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x40>  // b.any
   9aa2c:	f9400bf3 	ldr	x19, [sp, #16]
   9aa30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9aa34:	d65f03c0 	ret
   9aa38:	d503201f 	nop
   9aa3c:	d503201f 	nop

000000000009aa40 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>:
   9aa40:	34001222 	cbz	w2, 9ac84 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x244>
   9aa44:	5280000e 	mov	w14, #0x0                   	// #0
   9aa48:	52800005 	mov	w5, #0x0                   	// #0
   9aa4c:	5280000a 	mov	w10, #0x0                   	// #0
   9aa50:	52800009 	mov	w9, #0x0                   	// #0
   9aa54:	5280000b 	mov	w11, #0x0                   	// #0
   9aa58:	5280000c 	mov	w12, #0x0                   	// #0
   9aa5c:	52800008 	mov	w8, #0x0                   	// #0
   9aa60:	5280000f 	mov	w15, #0x0                   	// #0
   9aa64:	d503201f 	nop
   9aa68:	39400023 	ldrb	w3, [x1]
   9aa6c:	12000464 	and	w4, w3, #0x3
   9aa70:	7100089f 	cmp	w4, #0x2
   9aa74:	540009c0 	b.eq	9abac <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x16c>  // b.none
   9aa78:	71000c9f 	cmp	w4, #0x3
   9aa7c:	54000840 	b.eq	9ab84 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x144>  // b.none
   9aa80:	7100049f 	cmp	w4, #0x1
   9aa84:	54000700 	b.eq	9ab64 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x124>  // b.none
   9aa88:	91000421 	add	x1, x1, #0x1
   9aa8c:	51000442 	sub	w2, w2, #0x1
   9aa90:	52800004 	mov	w4, #0x0                   	// #0
   9aa94:	121e1463 	and	w3, w3, #0xfc
   9aa98:	7101d07f 	cmp	w3, #0x74
   9aa9c:	54000700 	b.eq	9ab7c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x13c>  // b.none
   9aaa0:	540004a8 	b.hi	9ab34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf4>  // b.pmore
   9aaa4:	7100107f 	cmp	w3, #0x4
   9aaa8:	540008e0 	b.eq	9abc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x184>  // b.none
   9aaac:	7100207f 	cmp	w3, #0x8
   9aab0:	54000041 	b.ne	9aab8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x78>  // b.any
   9aab4:	2a0403ec 	mov	w12, w4
   9aab8:	710005ff 	cmp	w15, #0x1
   9aabc:	540004e0 	b.eq	9ab58 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x118>  // b.none
   9aac0:	710009ff 	cmp	w15, #0x2
   9aac4:	54000100 	b.eq	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.none
   9aac8:	7102007f 	cmp	w3, #0x80
   9aacc:	5280000f 	mov	w15, #0x0                   	// #0
   9aad0:	540000a1 	b.ne	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.any
   9aad4:	39413004 	ldrb	w4, [x0, #76]
   9aad8:	1b091543 	madd	w3, w10, w9, w5
   9aadc:	6b0b009f 	cmp	w4, w11
   9aae0:	1a850065 	csel	w5, w3, w5, eq	// eq = none
   9aae4:	35fffc22 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9aae8:	11001ca5 	add	w5, w5, #0x7
   9aaec:	53037ca2 	lsr	w2, w5, #3
   9aaf0:	b9405003 	ldr	w3, [x0, #80]
   9aaf4:	b9004802 	str	w2, [x0, #72]
   9aaf8:	7100047f 	cmp	w3, #0x1
   9aafc:	54000b89 	b.ls	9ac6c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x22c>  // b.plast
   9ab00:	b9405801 	ldr	w1, [x0, #88]
   9ab04:	34000141 	cbz	w1, 9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>
   9ab08:	9101a000 	add	x0, x0, #0x68
   9ab0c:	52800502 	mov	w2, #0x28                  	// #40
   9ab10:	9ba20062 	umaddl	x2, w3, w2, x0
   9ab14:	14000002 	b	9ab1c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xdc>
   9ab18:	54000aa0 	b.eq	9ac6c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x22c>  // b.none
   9ab1c:	b9400001 	ldr	w1, [x0]
   9ab20:	9100a000 	add	x0, x0, #0x28
   9ab24:	eb00005f 	cmp	x2, x0
   9ab28:	35ffff81 	cbnz	w1, 9ab18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xd8>
   9ab2c:	52800000 	mov	w0, #0x0                   	// #0
   9ab30:	d65f03c0 	ret
   9ab34:	7102107f 	cmp	w3, #0x84
   9ab38:	540004a0 	b.eq	9abcc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x18c>  // b.none
   9ab3c:	7102507f 	cmp	w3, #0x94
   9ab40:	54000521 	b.ne	9abe4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a4>  // b.any
   9ab44:	2a0403e9 	mov	w9, w4
   9ab48:	710005ff 	cmp	w15, #0x1
   9ab4c:	54fffba1 	b.ne	9aac0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x80>  // b.any
   9ab50:	2a0403e9 	mov	w9, w4
   9ab54:	d503201f 	nop
   9ab58:	5280002f 	mov	w15, #0x1                   	// #1
   9ab5c:	35fff862 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9ab60:	17ffffe2 	b	9aae8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa8>
   9ab64:	121e1463 	and	w3, w3, #0xfc
   9ab68:	39400424 	ldrb	w4, [x1, #1]
   9ab6c:	51000842 	sub	w2, w2, #0x2
   9ab70:	91000821 	add	x1, x1, #0x2
   9ab74:	7101d07f 	cmp	w3, #0x74
   9ab78:	54fff941 	b.ne	9aaa0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>  // b.any
   9ab7c:	2a0403ea 	mov	w10, w4
   9ab80:	17ffffce 	b	9aab8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x78>
   9ab84:	3940042d 	ldrb	w13, [x1, #1]
   9ab88:	51001442 	sub	w2, w2, #0x5
   9ab8c:	39400827 	ldrb	w7, [x1, #2]
   9ab90:	91001421 	add	x1, x1, #0x5
   9ab94:	385fe026 	ldurb	w6, [x1, #-2]
   9ab98:	385ff024 	ldurb	w4, [x1, #-1]
   9ab9c:	aa0721a7 	orr	x7, x13, x7, lsl #8
   9aba0:	aa0640e6 	orr	x6, x7, x6, lsl #16
   9aba4:	2a0460c4 	orr	w4, w6, w4, lsl #24
   9aba8:	17ffffbb 	b	9aa94 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x54>
   9abac:	39400426 	ldrb	w6, [x1, #1]
   9abb0:	51000c42 	sub	w2, w2, #0x3
   9abb4:	39400824 	ldrb	w4, [x1, #2]
   9abb8:	91000c21 	add	x1, x1, #0x3
   9abbc:	2a0420c4 	orr	w4, w6, w4, lsl #8
   9abc0:	17ffffb5 	b	9aa94 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x54>
   9abc4:	2a0403e8 	mov	w8, w4
   9abc8:	17ffffbc 	b	9aab8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x78>
   9abcc:	2a0403eb 	mov	w11, w4
   9abd0:	710005ff 	cmp	w15, #0x1
   9abd4:	54fff761 	b.ne	9aac0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x80>  // b.any
   9abd8:	2a0903e4 	mov	w4, w9
   9abdc:	2a0403e9 	mov	w9, w4
   9abe0:	17ffffde 	b	9ab58 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x118>
   9abe4:	710005ff 	cmp	w15, #0x1
   9abe8:	54000521 	b.ne	9ac8c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x24c>  // b.any
   9abec:	7102807f 	cmp	w3, #0xa0
   9abf0:	540001c1 	b.ne	9ac28 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1e8>  // b.any
   9abf4:	7100089f 	cmp	w4, #0x2
   9abf8:	7a4d0900 	ccmp	w8, #0xd, #0x0, eq	// eq = none
   9abfc:	54fff741 	b.ne	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.any
   9ac00:	7100899f 	cmp	w12, #0x22
   9ac04:	528001a8 	mov	w8, #0xd                   	// #13
   9ac08:	54fff6e1 	b.ne	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.any
   9ac0c:	39413003 	ldrb	w3, [x0, #76]
   9ac10:	5280004f 	mov	w15, #0x2                   	// #2
   9ac14:	35fff683 	cbnz	w3, 9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>
   9ac18:	3901300b 	strb	w11, [x0, #76]
   9ac1c:	110020a5 	add	w5, w5, #0x8
   9ac20:	35fff242 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9ac24:	17ffffb1 	b	9aae8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa8>
   9ac28:	7103007f 	cmp	w3, #0xc0
   9ac2c:	540001a0 	b.eq	9ac60 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x220>  // b.none
   9ac30:	7102007f 	cmp	w3, #0x80
   9ac34:	54fff921 	b.ne	9ab58 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x118>  // b.any
   9ac38:	12000484 	and	w4, w4, #0x3
   9ac3c:	7100089f 	cmp	w4, #0x2
   9ac40:	54fff4a1 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9ac44:	7101519f 	cmp	w12, #0x54
   9ac48:	7a4d0900 	ccmp	w8, #0xd, #0x0, eq	// eq = none
   9ac4c:	54fff441 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9ac50:	7100053f 	cmp	w9, #0x1
   9ac54:	54fff6c1 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9ac58:	290aa805 	stp	w5, w10, [x0, #84]
   9ac5c:	17ffff9e 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9ac60:	5280000f 	mov	w15, #0x0                   	// #0
   9ac64:	35fff022 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9ac68:	17ffffa0 	b	9aae8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa8>
   9ac6c:	710001ff 	cmp	w15, #0x0
   9ac70:	1a9f17e0 	cset	w0, eq	// eq = none
   9ac74:	7100007f 	cmp	w3, #0x0
   9ac78:	1a9f07e1 	cset	w1, ne	// ne = any
   9ac7c:	0a010000 	and	w0, w0, w1
   9ac80:	d65f03c0 	ret
   9ac84:	5280000f 	mov	w15, #0x0                   	// #0
   9ac88:	17ffff9a 	b	9aaf0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb0>
   9ac8c:	710009ff 	cmp	w15, #0x2
   9ac90:	54000120 	b.eq	9acb4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x274>  // b.none
   9ac94:	7102807f 	cmp	w3, #0xa0
   9ac98:	7a410880 	ccmp	w4, #0x1, #0x0, eq	// eq = none
   9ac9c:	54fff161 	b.ne	9aac8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x88>  // b.any
   9aca0:	7100351f 	cmp	w8, #0xd
   9aca4:	7a440980 	ccmp	w12, #0x4, #0x0, eq	// eq = none
   9aca8:	1a9f17ef 	cset	w15, eq	// eq = none
   9acac:	35ffede2 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9acb0:	17ffff8e 	b	9aae8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa8>
   9acb4:	7102807f 	cmp	w3, #0xa0
   9acb8:	54fff3a0 	b.eq	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.none
   9acbc:	7103007f 	cmp	w3, #0xc0
   9acc0:	54000320 	b.eq	9ad24 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2e4>  // b.none
   9acc4:	7102007f 	cmp	w3, #0x80
   9acc8:	54fff0e1 	b.ne	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.any
   9accc:	12000484 	and	w4, w4, #0x3
   9acd0:	7100089f 	cmp	w4, #0x2
   9acd4:	54fff001 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9acd8:	7100051f 	cmp	w8, #0x1
   9acdc:	54000360 	b.eq	9ad48 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x308>  // b.none
   9ace0:	7100351f 	cmp	w8, #0xd
   9ace4:	54ffef81 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9ace8:	7101099f 	cmp	w12, #0x42
   9acec:	540006c0 	b.eq	9adc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x384>  // b.none
   9acf0:	7101459f 	cmp	w12, #0x51
   9acf4:	54000560 	b.eq	9ada0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x360>  // b.none
   9acf8:	7100c19f 	cmp	w12, #0x30
   9acfc:	54ffeec1 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9ad00:	7100053f 	cmp	w9, #0x1
   9ad04:	54fff141 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9ad08:	710025df 	cmp	w14, #0x9
   9ad0c:	54ffee48 	b.hi	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.pmore
   9ad10:	2a0e03e3 	mov	w3, w14
   9ad14:	d2800504 	mov	x4, #0x28                  	// #40
   9ad18:	9b040063 	madd	x3, x3, x4, x0
   9ad1c:	290da865 	stp	w5, w10, [x3, #108]
   9ad20:	17ffff6d 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9ad24:	710025df 	cmp	w14, #0x9
   9ad28:	5280002f 	mov	w15, #0x1                   	// #1
   9ad2c:	54ffedc8 	b.hi	9aae4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa4>  // b.pmore
   9ad30:	b9405003 	ldr	w3, [x0, #80]
   9ad34:	0b0f01ce 	add	w14, w14, w15
   9ad38:	0b0f0063 	add	w3, w3, w15
   9ad3c:	b9005003 	str	w3, [x0, #80]
   9ad40:	35ffe942 	cbnz	w2, 9aa68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   9ad44:	17ffff69 	b	9aae8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa8>
   9ad48:	7100c19f 	cmp	w12, #0x30
   9ad4c:	54000180 	b.eq	9ad7c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x33c>  // b.none
   9ad50:	7100c59f 	cmp	w12, #0x31
   9ad54:	54ffec01 	b.ne	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.any
   9ad58:	7100053f 	cmp	w9, #0x1
   9ad5c:	54ffee81 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9ad60:	710025df 	cmp	w14, #0x9
   9ad64:	54ffeb88 	b.hi	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.pmore
   9ad68:	2a0e03e3 	mov	w3, w14
   9ad6c:	d2800504 	mov	x4, #0x28                  	// #40
   9ad70:	9b040063 	madd	x3, x3, x4, x0
   9ad74:	290fa865 	stp	w5, w10, [x3, #124]
   9ad78:	17ffff57 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9ad7c:	7100053f 	cmp	w9, #0x1
   9ad80:	54ffed61 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9ad84:	710025df 	cmp	w14, #0x9
   9ad88:	54ffea68 	b.hi	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.pmore
   9ad8c:	2a0e03e3 	mov	w3, w14
   9ad90:	d2800504 	mov	x4, #0x28                  	// #40
   9ad94:	9b040063 	madd	x3, x3, x4, x0
   9ad98:	290ea865 	stp	w5, w10, [x3, #116]
   9ad9c:	17ffff4e 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9ada0:	7100053f 	cmp	w9, #0x1
   9ada4:	54ffec41 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9ada8:	710025df 	cmp	w14, #0x9
   9adac:	54ffe948 	b.hi	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.pmore
   9adb0:	2a0e03e3 	mov	w3, w14
   9adb4:	d2800504 	mov	x4, #0x28                  	// #40
   9adb8:	9b040063 	madd	x3, x3, x4, x0
   9adbc:	290ca865 	stp	w5, w10, [x3, #100]
   9adc0:	17ffff45 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9adc4:	7100053f 	cmp	w9, #0x1
   9adc8:	54ffeb21 	b.ne	9ab2c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xec>  // b.any
   9adcc:	710025df 	cmp	w14, #0x9
   9add0:	54ffe828 	b.hi	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>  // b.pmore
   9add4:	2a0e03e3 	mov	w3, w14
   9add8:	d2800504 	mov	x4, #0x28                  	// #40
   9addc:	9b040063 	madd	x3, x3, x4, x0
   9ade0:	290ba865 	stp	w5, w10, [x3, #92]
   9ade4:	17ffff3c 	b	9aad4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x94>
   9ade8:	d503201f 	nop
   9adec:	d503201f 	nop

000000000009adf0 <CUSBTouchScreenDevice::Configure()>:
   9adf0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9adf4:	52800421 	mov	w1, #0x21                  	// #33
   9adf8:	910003fd 	mov	x29, sp
   9adfc:	a90153f3 	stp	x19, x20, [sp, #16]
   9ae00:	aa0003f4 	mov	x20, x0
   9ae04:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ae08:	a90363f7 	stp	x23, x24, [sp, #48]
   9ae0c:	d10043ff 	sub	sp, sp, #0x10
   9ae10:	97ffd624 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9ae14:	b40000c0 	cbz	x0, 9ae2c <CUSBTouchScreenDevice::Configure()+0x3c>
   9ae18:	aa0003f3 	mov	x19, x0
   9ae1c:	39401c00 	ldrb	w0, [x0, #7]
   9ae20:	39402275 	ldrb	w21, [x19, #8]
   9ae24:	2a152015 	orr	w21, w0, w21, lsl #8
   9ae28:	350001b5 	cbnz	w21, 9ae5c <CUSBTouchScreenDevice::Configure()+0x6c>
   9ae2c:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9ae30:	910b2021 	add	x1, x1, #0x2c8
   9ae34:	aa1403e0 	mov	x0, x20
   9ae38:	97ffd626 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9ae3c:	52800013 	mov	w19, #0x0                   	// #0
   9ae40:	910003bf 	mov	sp, x29
   9ae44:	2a1303e0 	mov	w0, w19
   9ae48:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ae4c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ae50:	a94363f7 	ldp	x23, x24, [sp, #48]
   9ae54:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9ae58:	d65f03c0 	ret
   9ae5c:	2a1503e1 	mov	w1, w21
   9ae60:	d1000421 	sub	x1, x1, #0x1
   9ae64:	b2401421 	orr	x1, x1, #0x3f
   9ae68:	91010021 	add	x1, x1, #0x40
   9ae6c:	9270bc20 	and	x0, x1, #0xffffffffffff0000
   9ae70:	927cec21 	and	x1, x1, #0xfffffffffffffff0
   9ae74:	cb2063e0 	sub	x0, sp, x0
   9ae78:	eb2063ff 	cmp	sp, x0
   9ae7c:	540000a0 	b.eq	9ae90 <CUSBTouchScreenDevice::Configure()+0xa0>  // b.none
   9ae80:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   9ae84:	eb2063ff 	cmp	sp, x0
   9ae88:	f90203ff 	str	xzr, [sp, #1024]
   9ae8c:	54ffffa1 	b.ne	9ae80 <CUSBTouchScreenDevice::Configure()+0x90>  // b.any
   9ae90:	92403c21 	and	x1, x1, #0xffff
   9ae94:	cb2163ff 	sub	sp, sp, x1
   9ae98:	f110003f 	cmp	x1, #0x400
   9ae9c:	f90003ff 	str	xzr, [sp]
   9aea0:	54000043 	b.cc	9aea8 <CUSBTouchScreenDevice::Configure()+0xb8>  // b.lo, b.ul, b.last
   9aea4:	f90203ff 	str	xzr, [sp, #1024]
   9aea8:	aa1403e0 	mov	x0, x20
   9aeac:	97ffd5f1 	bl	90670 <CUSBFunction::GetHost() const>
   9aeb0:	91013ff6 	add	x22, sp, #0x4f
   9aeb4:	aa0003f7 	mov	x23, x0
   9aeb8:	aa1403e0 	mov	x0, x20
   9aebc:	97ffd5e1 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9aec0:	39401a78 	ldrb	w24, [x19, #6]
   9aec4:	927ae6d6 	and	x22, x22, #0xffffffffffffffc0
   9aec8:	aa0003f3 	mov	x19, x0
   9aecc:	aa1403e0 	mov	x0, x20
   9aed0:	97ffd64c 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   9aed4:	12001c07 	and	w7, w0, #0xff
   9aed8:	2a1803e2 	mov	w2, w24
   9aedc:	aa1303e1 	mov	x1, x19
   9aee0:	aa1703e0 	mov	x0, x23
   9aee4:	2a1503e5 	mov	w5, w21
   9aee8:	aa1603e4 	mov	x4, x22
   9aeec:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   9aef0:	52800003 	mov	w3, #0x0                   	// #0
   9aef4:	97ffe42f 	bl	93fb0 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   9aef8:	6b15001f 	cmp	w0, w21
   9aefc:	54000120 	b.eq	9af20 <CUSBTouchScreenDevice::Configure()+0x130>  // b.none
   9af00:	9400233c 	bl	a3bf0 <CLogger::Get()>
   9af04:	d00000c3 	adrp	x3, b4000 <_etext+0x19c8>
   9af08:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9af0c:	9107a063 	add	x3, x3, #0x1e8
   9af10:	910b2021 	add	x1, x1, #0x2c8
   9af14:	52800022 	mov	w2, #0x1                   	// #1
   9af18:	9400252a 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9af1c:	17ffffc8 	b	9ae3c <CUSBTouchScreenDevice::Configure()+0x4c>
   9af20:	2a1503e2 	mov	w2, w21
   9af24:	aa1603e1 	mov	x1, x22
   9af28:	aa1403e0 	mov	x0, x20
   9af2c:	97fffec5 	bl	9aa40 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>
   9af30:	36000260 	tbz	w0, #0, 9af7c <CUSBTouchScreenDevice::Configure()+0x18c>
   9af34:	b9404a81 	ldr	w1, [x20, #72]
   9af38:	aa1403e0 	mov	x0, x20
   9af3c:	97ffe195 	bl	93590 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   9af40:	360002e0 	tbz	w0, #0, 9af9c <CUSBTouchScreenDevice::Configure()+0x1ac>
   9af44:	aa1403e0 	mov	x0, x20
   9af48:	97ffe2c2 	bl	93a50 <CUSBHIDDevice::StartRequest()>
   9af4c:	12001c13 	and	w19, w0, #0xff
   9af50:	3607f760 	tbz	w0, #0, 9ae3c <CUSBTouchScreenDevice::Configure()+0x4c>
   9af54:	f9411680 	ldr	x0, [x20, #552]
   9af58:	b5000320 	cbnz	x0, 9afbc <CUSBTouchScreenDevice::Configure()+0x1cc>
   9af5c:	d2800900 	mov	x0, #0x48                  	// #72
   9af60:	940042f4 	bl	abb30 <operator new(unsigned long)>
   9af64:	d2800002 	mov	x2, #0x0                   	// #0
   9af68:	aa0003f5 	mov	x21, x0
   9af6c:	d2800001 	mov	x1, #0x0                   	// #0
   9af70:	940017f4 	bl	a0f40 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>
   9af74:	f9011695 	str	x21, [x20, #552]
   9af78:	17ffffb2 	b	9ae40 <CUSBTouchScreenDevice::Configure()+0x50>
   9af7c:	9400231d 	bl	a3bf0 <CLogger::Get()>
   9af80:	f00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9af84:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9af88:	911e8063 	add	x3, x3, #0x7a0
   9af8c:	910b2021 	add	x1, x1, #0x2c8
   9af90:	52800022 	mov	w2, #0x1                   	// #1
   9af94:	9400250b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9af98:	17ffffa9 	b	9ae3c <CUSBTouchScreenDevice::Configure()+0x4c>
   9af9c:	94002315 	bl	a3bf0 <CLogger::Get()>
   9afa0:	d00000c3 	adrp	x3, b4000 <_etext+0x19c8>
   9afa4:	d00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9afa8:	912c0063 	add	x3, x3, #0xb00
   9afac:	910b2021 	add	x1, x1, #0x2c8
   9afb0:	52800022 	mov	w2, #0x1                   	// #1
   9afb4:	94002503 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9afb8:	17ffffa1 	b	9ae3c <CUSBTouchScreenDevice::Configure()+0x4c>
   9afbc:	f00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9afc0:	b00000c0 	adrp	x0, b3000 <_etext+0x9c8>
   9afc4:	911f0021 	add	x1, x1, #0x7c0
   9afc8:	91250000 	add	x0, x0, #0x940
   9afcc:	52800f42 	mov	w2, #0x7a                  	// #122
   9afd0:	94001bcc 	bl	a1f00 <assertion_failed>
   9afd4:	d503201f 	nop
   9afd8:	d503201f 	nop
   9afdc:	d503201f 	nop

000000000009afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>:
   9afe0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9afe4:	910003fd 	mov	x29, sp
   9afe8:	b4000400 	cbz	x0, 9b068 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x88>
   9afec:	b9400424 	ldr	w4, [x1, #4]
   9aff0:	7100809f 	cmp	w4, #0x20
   9aff4:	54000468 	b.hi	9b080 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0xa0>  // b.pmore
   9aff8:	aa0003e3 	mov	x3, x0
   9affc:	2a0203e0 	mov	w0, w2
   9b000:	34000244 	cbz	w4, 9b048 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x68>
   9b004:	b9400020 	ldr	w0, [x1]
   9b008:	7100609f 	cmp	w4, #0x18
   9b00c:	12000805 	and	w5, w0, #0x7
   9b010:	53037c01 	lsr	w1, w0, #3
   9b014:	8b010062 	add	x2, x3, x1
   9b018:	b8614860 	ldr	w0, [x3, w1, uxtw]
   9b01c:	1ac52401 	lsr	w1, w0, w5
   9b020:	54000189 	b.ls	9b050 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x70>  // b.plast
   9b024:	b8403042 	ldur	w2, [x2, #3]
   9b028:	51006084 	sub	w4, w4, #0x18
   9b02c:	52800020 	mov	w0, #0x1                   	// #1
   9b030:	12005c21 	and	w1, w1, #0xffffff
   9b034:	1ac42000 	lsl	w0, w0, w4
   9b038:	51000400 	sub	w0, w0, #0x1
   9b03c:	1ac52442 	lsr	w2, w2, w5
   9b040:	0a020000 	and	w0, w0, w2
   9b044:	2a006020 	orr	w0, w1, w0, lsl #24
   9b048:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b04c:	d65f03c0 	ret
   9b050:	52800020 	mov	w0, #0x1                   	// #1
   9b054:	1ac42000 	lsl	w0, w0, w4
   9b058:	51000400 	sub	w0, w0, #0x1
   9b05c:	0a010000 	and	w0, w0, w1
   9b060:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b064:	d65f03c0 	ret
   9b068:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b06c:	f00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9b070:	911f0021 	add	x1, x1, #0x7c0
   9b074:	91384000 	add	x0, x0, #0xe10
   9b078:	52803702 	mov	w2, #0x1b8                 	// #440
   9b07c:	94001ba1 	bl	a1f00 <assertion_failed>
   9b080:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b084:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b088:	911f0021 	add	x1, x1, #0x7c0
   9b08c:	911f6000 	add	x0, x0, #0x7d8
   9b090:	52803782 	mov	w2, #0x1bc                 	// #444
   9b094:	94001b9b 	bl	a1f00 <assertion_failed>
   9b098:	d503201f 	nop
   9b09c:	d503201f 	nop

000000000009b0a0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)>:
   9b0a0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   9b0a4:	910003fd 	mov	x29, sp
   9b0a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b0ac:	aa0003f5 	mov	x21, x0
   9b0b0:	f9411400 	ldr	x0, [x0, #552]
   9b0b4:	a90153f3 	stp	x19, x20, [sp, #16]
   9b0b8:	b4000fc0 	cbz	x0, 9b2b0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x210>
   9b0bc:	aa0103f4 	mov	x20, x1
   9b0c0:	b4000521 	cbz	x1, 9b164 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   9b0c4:	b9404aa0 	ldr	w0, [x21, #72]
   9b0c8:	6b02001f 	cmp	w0, w2
   9b0cc:	540004c1 	b.ne	9b164 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>  // b.any
   9b0d0:	394132a0 	ldrb	w0, [x21, #76]
   9b0d4:	34000080 	cbz	w0, 9b0e4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   9b0d8:	39400021 	ldrb	w1, [x1]
   9b0dc:	6b00003f 	cmp	w1, w0
   9b0e0:	54000421 	b.ne	9b164 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>  // b.any
   9b0e4:	910152a1 	add	x1, x21, #0x54
   9b0e8:	aa1403e0 	mov	x0, x20
   9b0ec:	52800022 	mov	w2, #0x1                   	// #1
   9b0f0:	97ffffbc 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b0f4:	a90363f7 	stp	x23, x24, [sp, #48]
   9b0f8:	2a0003f6 	mov	w22, w0
   9b0fc:	7100281f 	cmp	w0, #0xa
   9b100:	54001268 	b.hi	9b34c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2ac>  // b.pmore
   9b104:	34000240 	cbz	w0, 9b14c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xac>
   9b108:	910172b3 	add	x19, x21, #0x5c
   9b10c:	52800518 	mov	w24, #0x28                  	// #40
   9b110:	9101c3f7 	add	x23, sp, #0x70
   9b114:	a9046bf9 	stp	x25, x26, [sp, #64]
   9b118:	12800019 	mov	w25, #0xffffffff            	// #-1
   9b11c:	9bb84c18 	umaddl	x24, w0, w24, x19
   9b120:	aa1303e1 	mov	x1, x19
   9b124:	aa1403e0 	mov	x0, x20
   9b128:	52800022 	mov	w2, #0x1                   	// #1
   9b12c:	97ffffad 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b130:	350004a0 	cbnz	w0, 9b1c4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   9b134:	390002f9 	strb	w25, [x23]
   9b138:	9100a273 	add	x19, x19, #0x28
   9b13c:	910006f7 	add	x23, x23, #0x1
   9b140:	eb18027f 	cmp	x19, x24
   9b144:	54fffee1 	b.ne	9b120 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x80>  // b.any
   9b148:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9b14c:	9107b2b4 	add	x20, x21, #0x1ec
   9b150:	b94052a4 	ldr	w4, [x21, #80]
   9b154:	9107dab7 	add	x23, x21, #0x1f6
   9b158:	d2800013 	mov	x19, #0x0                   	// #0
   9b15c:	350002e4 	cbnz	w4, 9b1b8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
   9b160:	a94363f7 	ldp	x23, x24, [sp, #48]
   9b164:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b168:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b16c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9b170:	d65f03c0 	ret
   9b174:	34000b16 	cbz	w22, 9b2d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x234>
   9b178:	38736ae0 	ldrb	w0, [x23, x19]
   9b17c:	9101c3e2 	add	x2, sp, #0x70
   9b180:	52800001 	mov	w1, #0x0                   	// #0
   9b184:	14000005 	b	9b198 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xf8>
   9b188:	11000421 	add	w1, w1, #0x1
   9b18c:	91000442 	add	x2, x2, #0x1
   9b190:	6b0102df 	cmp	w22, w1
   9b194:	54000a00 	b.eq	9b2d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x234>  // b.none
   9b198:	39400043 	ldrb	w3, [x2]
   9b19c:	6b00007f 	cmp	w3, w0
   9b1a0:	54ffff41 	b.ne	9b188 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xe8>  // b.any
   9b1a4:	6b0102df 	cmp	w22, w1
   9b1a8:	54000960 	b.eq	9b2d4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x234>  // b.none
   9b1ac:	91000673 	add	x19, x19, #0x1
   9b1b0:	6b13009f 	cmp	w4, w19
   9b1b4:	54fffd69 	b.ls	9b160 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>  // b.plast
   9b1b8:	38736a80 	ldrb	w0, [x20, x19]
   9b1bc:	3607ff80 	tbz	w0, #0, 9b1ac <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x10c>
   9b1c0:	17ffffed 	b	9b174 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   9b1c4:	91004261 	add	x1, x19, #0x10
   9b1c8:	aa1403e0 	mov	x0, x20
   9b1cc:	52800022 	mov	w2, #0x1                   	// #1
   9b1d0:	97ffff84 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b1d4:	34fffb00 	cbz	w0, 9b134 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x94>
   9b1d8:	91002261 	add	x1, x19, #0x8
   9b1dc:	52800002 	mov	w2, #0x0                   	// #0
   9b1e0:	aa1403e0 	mov	x0, x20
   9b1e4:	a90573fb 	stp	x27, x28, [sp, #80]
   9b1e8:	97ffff7e 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b1ec:	12001c1b 	and	w27, w0, #0xff
   9b1f0:	390002fb 	strb	w27, [x23]
   9b1f4:	91006261 	add	x1, x19, #0x18
   9b1f8:	52800002 	mov	w2, #0x0                   	// #0
   9b1fc:	aa1403e0 	mov	x0, x20
   9b200:	97ffff78 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b204:	91008261 	add	x1, x19, #0x20
   9b208:	52800002 	mov	w2, #0x0                   	// #0
   9b20c:	2a0003fa 	mov	w26, w0
   9b210:	aa1403e0 	mov	x0, x20
   9b214:	97ffff73 	bl	9afe0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   9b218:	2a0003e4 	mov	w4, w0
   9b21c:	b94052a5 	ldr	w5, [x21, #80]
   9b220:	9107daa1 	add	x1, x21, #0x1f6
   9b224:	52800002 	mov	w2, #0x0                   	// #0
   9b228:	34000a25 	cbz	w5, 9b36c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2cc>
   9b22c:	d503201f 	nop
   9b230:	385f6023 	ldurb	w3, [x1, #-10]
   9b234:	36000083 	tbz	w3, #0, 9b244 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1a4>
   9b238:	39400023 	ldrb	w3, [x1]
   9b23c:	6b1b007f 	cmp	w3, w27
   9b240:	540005c0 	b.eq	9b2f8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x258>  // b.none
   9b244:	11000442 	add	w2, w2, #0x1
   9b248:	91000421 	add	x1, x1, #0x1
   9b24c:	6b0200bf 	cmp	w5, w2
   9b250:	54ffff01 	b.ne	9b230 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x190>  // b.any
   9b254:	710004a5 	subs	w5, w5, #0x1
   9b258:	540008e0 	b.eq	9b374 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2d4>  // b.none
   9b25c:	9107b2a1 	add	x1, x21, #0x1ec
   9b260:	52800002 	mov	w2, #0x0                   	// #0
   9b264:	14000005 	b	9b278 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1d8>
   9b268:	11000442 	add	w2, w2, #0x1
   9b26c:	91000421 	add	x1, x1, #0x1
   9b270:	6b0200bf 	cmp	w5, w2
   9b274:	54000069 	b.ls	9b280 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1e0>  // b.plast
   9b278:	39400023 	ldrb	w3, [x1]
   9b27c:	3707ff63 	tbnz	w3, #0, 9b268 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c8>
   9b280:	f94116a0 	ldr	x0, [x21, #552]
   9b284:	52800001 	mov	w1, #0x0                   	// #0
   9b288:	2a1a03e3 	mov	w3, w26
   9b28c:	290d13e2 	stp	w2, w4, [sp, #104]
   9b290:	94001798 	bl	a10f0 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   9b294:	294d13e2 	ldp	w2, w4, [sp, #104]
   9b298:	52800021 	mov	w1, #0x1                   	// #1
   9b29c:	2a0203fc 	mov	w28, w2
   9b2a0:	8b1c02a0 	add	x0, x21, x28
   9b2a4:	3907b001 	strb	w1, [x0, #492]
   9b2a8:	3907d81b 	strb	w27, [x0, #502]
   9b2ac:	14000023 	b	9b338 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x298>
   9b2b0:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b2b4:	900000c0 	adrp	x0, b3000 <_etext+0x9c8>
   9b2b8:	911f0021 	add	x1, x1, #0x7c0
   9b2bc:	912b8000 	add	x0, x0, #0xae0
   9b2c0:	52801062 	mov	w2, #0x83                  	// #131
   9b2c4:	a90363f7 	stp	x23, x24, [sp, #48]
   9b2c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   9b2cc:	a90573fb 	stp	x27, x28, [sp, #80]
   9b2d0:	94001b0c 	bl	a1f00 <assertion_failed>
   9b2d4:	f94116a0 	ldr	x0, [x21, #552]
   9b2d8:	52800004 	mov	w4, #0x0                   	// #0
   9b2dc:	2a1303e2 	mov	w2, w19
   9b2e0:	52800003 	mov	w3, #0x0                   	// #0
   9b2e4:	52800021 	mov	w1, #0x1                   	// #1
   9b2e8:	94001782 	bl	a10f0 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   9b2ec:	b94052a4 	ldr	w4, [x21, #80]
   9b2f0:	38336a9f 	strb	wzr, [x20, x19]
   9b2f4:	17ffffae 	b	9b1ac <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x10c>
   9b2f8:	6b05005f 	cmp	w2, w5
   9b2fc:	54fffac0 	b.eq	9b254 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1b4>  // b.none
   9b300:	2a0203fc 	mov	w28, w2
   9b304:	8b1c06a1 	add	x1, x21, x28, lsl #1
   9b308:	79440020 	ldrh	w0, [x1, #512]
   9b30c:	6b00035f 	cmp	w26, w0
   9b310:	54000081 	b.ne	9b320 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x280>  // b.any
   9b314:	79442820 	ldrh	w0, [x1, #532]
   9b318:	6b00009f 	cmp	w4, w0
   9b31c:	540000e0 	b.eq	9b338 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x298>  // b.none
   9b320:	f94116a0 	ldr	x0, [x21, #552]
   9b324:	2a1a03e3 	mov	w3, w26
   9b328:	52800041 	mov	w1, #0x2                   	// #2
   9b32c:	b9006be4 	str	w4, [sp, #104]
   9b330:	94001770 	bl	a10f0 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   9b334:	b9406be4 	ldr	w4, [sp, #104]
   9b338:	8b1c06a1 	add	x1, x21, x28, lsl #1
   9b33c:	7904003a 	strh	w26, [x1, #512]
   9b340:	79042824 	strh	w4, [x1, #532]
   9b344:	a94573fb 	ldp	x27, x28, [sp, #80]
   9b348:	17ffff7c 	b	9b138 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x98>
   9b34c:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b350:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b354:	911f0021 	add	x1, x1, #0x7c0
   9b358:	911fa000 	add	x0, x0, #0x7e8
   9b35c:	52801262 	mov	w2, #0x93                  	// #147
   9b360:	a9046bf9 	stp	x25, x26, [sp, #64]
   9b364:	a90573fb 	stp	x27, x28, [sp, #80]
   9b368:	94001ae6 	bl	a1f00 <assertion_failed>
   9b36c:	12800005 	mov	w5, #0xffffffff            	// #-1
   9b370:	17ffffbb 	b	9b25c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1bc>
   9b374:	52800002 	mov	w2, #0x0                   	// #0
   9b378:	17ffffc2 	b	9b280 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1e0>
   9b37c:	00000000 	udf	#0

000000000009b380 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
   9b380:	3900001f 	strb	wzr, [x0]
   9b384:	b9000401 	str	w1, [x0, #4]
   9b388:	d65f03c0 	ret
   9b38c:	d503201f 	nop

000000000009b390 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
   9b390:	52800023 	mov	w3, #0x1                   	// #1
   9b394:	39000003 	strb	w3, [x0]
   9b398:	29008801 	stp	w1, w2, [x0, #4]
   9b39c:	d65f03c0 	ret

000000000009b3a0 <CDWHCIRegister::~CDWHCIRegister()>:
   9b3a0:	d65f03c0 	ret
   9b3a4:	d503201f 	nop
   9b3a8:	d503201f 	nop
   9b3ac:	d503201f 	nop

000000000009b3b0 <CDWHCIRegister::Read()>:
   9b3b0:	aa0003e1 	mov	x1, x0
   9b3b4:	b9400400 	ldr	w0, [x0, #4]
   9b3b8:	52800022 	mov	w2, #0x1                   	// #1
   9b3bc:	b9400000 	ldr	w0, [x0]
   9b3c0:	39000022 	strb	w2, [x1]
   9b3c4:	b9000820 	str	w0, [x1, #8]
   9b3c8:	d65f03c0 	ret
   9b3cc:	d503201f 	nop

000000000009b3d0 <CDWHCIRegister::Write()>:
   9b3d0:	39400001 	ldrb	w1, [x0]
   9b3d4:	36000081 	tbz	w1, #0, 9b3e4 <CDWHCIRegister::Write()+0x14>
   9b3d8:	29408001 	ldp	w1, w0, [x0, #4]
   9b3dc:	b9000020 	str	w0, [x1]
   9b3e0:	d65f03c0 	ret
   9b3e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b3e8:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b3ec:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b3f0:	910003fd 	mov	x29, sp
   9b3f4:	91204021 	add	x1, x1, #0x810
   9b3f8:	9120a000 	add	x0, x0, #0x828
   9b3fc:	528006a2 	mov	w2, #0x35                  	// #53
   9b400:	94001ac0 	bl	a1f00 <assertion_failed>
   9b404:	d503201f 	nop
   9b408:	d503201f 	nop
   9b40c:	d503201f 	nop

000000000009b410 <CDWHCIRegister::Get() const>:
   9b410:	39400001 	ldrb	w1, [x0]
   9b414:	36000061 	tbz	w1, #0, 9b420 <CDWHCIRegister::Get() const+0x10>
   9b418:	b9400800 	ldr	w0, [x0, #8]
   9b41c:	d65f03c0 	ret
   9b420:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b424:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b428:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b42c:	910003fd 	mov	x29, sp
   9b430:	91204021 	add	x1, x1, #0x810
   9b434:	9120a000 	add	x0, x0, #0x828
   9b438:	52800762 	mov	w2, #0x3b                  	// #59
   9b43c:	94001ab1 	bl	a1f00 <assertion_failed>

000000000009b440 <CDWHCIRegister::Set(unsigned int)>:
   9b440:	52800022 	mov	w2, #0x1                   	// #1
   9b444:	39000002 	strb	w2, [x0]
   9b448:	b9000801 	str	w1, [x0, #8]
   9b44c:	d65f03c0 	ret

000000000009b450 <CDWHCIRegister::IsSet(unsigned int) const>:
   9b450:	39400002 	ldrb	w2, [x0]
   9b454:	360000a2 	tbz	w2, #0, 9b468 <CDWHCIRegister::IsSet(unsigned int) const+0x18>
   9b458:	b9400800 	ldr	w0, [x0, #8]
   9b45c:	6a00003f 	tst	w1, w0
   9b460:	1a9f07e0 	cset	w0, ne	// ne = any
   9b464:	d65f03c0 	ret
   9b468:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b46c:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b470:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b474:	910003fd 	mov	x29, sp
   9b478:	91204021 	add	x1, x1, #0x810
   9b47c:	9120a000 	add	x0, x0, #0x828
   9b480:	528008e2 	mov	w2, #0x47                  	// #71
   9b484:	94001a9f 	bl	a1f00 <assertion_failed>
   9b488:	d503201f 	nop
   9b48c:	d503201f 	nop

000000000009b490 <CDWHCIRegister::And(unsigned int)>:
   9b490:	39400002 	ldrb	w2, [x0]
   9b494:	360000a2 	tbz	w2, #0, 9b4a8 <CDWHCIRegister::And(unsigned int)+0x18>
   9b498:	b9400802 	ldr	w2, [x0, #8]
   9b49c:	0a010041 	and	w1, w2, w1
   9b4a0:	b9000801 	str	w1, [x0, #8]
   9b4a4:	d65f03c0 	ret
   9b4a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b4ac:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b4b0:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b4b4:	910003fd 	mov	x29, sp
   9b4b8:	91204021 	add	x1, x1, #0x810
   9b4bc:	9120a000 	add	x0, x0, #0x828
   9b4c0:	528009a2 	mov	w2, #0x4d                  	// #77
   9b4c4:	94001a8f 	bl	a1f00 <assertion_failed>
   9b4c8:	d503201f 	nop
   9b4cc:	d503201f 	nop

000000000009b4d0 <CDWHCIRegister::Or(unsigned int)>:
   9b4d0:	39400002 	ldrb	w2, [x0]
   9b4d4:	360000a2 	tbz	w2, #0, 9b4e8 <CDWHCIRegister::Or(unsigned int)+0x18>
   9b4d8:	b9400802 	ldr	w2, [x0, #8]
   9b4dc:	2a010041 	orr	w1, w2, w1
   9b4e0:	b9000801 	str	w1, [x0, #8]
   9b4e4:	d65f03c0 	ret
   9b4e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b4ec:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b4f0:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b4f4:	910003fd 	mov	x29, sp
   9b4f8:	91204021 	add	x1, x1, #0x810
   9b4fc:	9120a000 	add	x0, x0, #0x828
   9b500:	52800a62 	mov	w2, #0x53                  	// #83
   9b504:	94001a7f 	bl	a1f00 <assertion_failed>
   9b508:	d503201f 	nop
   9b50c:	d503201f 	nop

000000000009b510 <CDWHCIRegister::ClearBit(unsigned int)>:
   9b510:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b514:	910003fd 	mov	x29, sp
   9b518:	39400002 	ldrb	w2, [x0]
   9b51c:	36000142 	tbz	w2, #0, 9b544 <CDWHCIRegister::ClearBit(unsigned int)+0x34>
   9b520:	71007c3f 	cmp	w1, #0x1f
   9b524:	540001c8 	b.hi	9b55c <CDWHCIRegister::ClearBit(unsigned int)+0x4c>  // b.pmore
   9b528:	b9400803 	ldr	w3, [x0, #8]
   9b52c:	52800022 	mov	w2, #0x1                   	// #1
   9b530:	1ac12041 	lsl	w1, w2, w1
   9b534:	0a210061 	bic	w1, w3, w1
   9b538:	b9000801 	str	w1, [x0, #8]
   9b53c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b540:	d65f03c0 	ret
   9b544:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b548:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b54c:	91204021 	add	x1, x1, #0x810
   9b550:	9120a000 	add	x0, x0, #0x828
   9b554:	52800b22 	mov	w2, #0x59                  	// #89
   9b558:	94001a6a 	bl	a1f00 <assertion_failed>
   9b55c:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b560:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b564:	91204021 	add	x1, x1, #0x810
   9b568:	9120e000 	add	x0, x0, #0x838
   9b56c:	52800b42 	mov	w2, #0x5a                  	// #90
   9b570:	94001a64 	bl	a1f00 <assertion_failed>
   9b574:	d503201f 	nop
   9b578:	d503201f 	nop
   9b57c:	d503201f 	nop

000000000009b580 <CDWHCIRegister::SetBit(unsigned int)>:
   9b580:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b584:	910003fd 	mov	x29, sp
   9b588:	39400002 	ldrb	w2, [x0]
   9b58c:	36000142 	tbz	w2, #0, 9b5b4 <CDWHCIRegister::SetBit(unsigned int)+0x34>
   9b590:	71007c3f 	cmp	w1, #0x1f
   9b594:	540001c8 	b.hi	9b5cc <CDWHCIRegister::SetBit(unsigned int)+0x4c>  // b.pmore
   9b598:	b9400802 	ldr	w2, [x0, #8]
   9b59c:	52800023 	mov	w3, #0x1                   	// #1
   9b5a0:	1ac12061 	lsl	w1, w3, w1
   9b5a4:	2a010041 	orr	w1, w2, w1
   9b5a8:	b9000801 	str	w1, [x0, #8]
   9b5ac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b5b0:	d65f03c0 	ret
   9b5b4:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b5b8:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b5bc:	91204021 	add	x1, x1, #0x810
   9b5c0:	9120a000 	add	x0, x0, #0x828
   9b5c4:	52800c02 	mov	w2, #0x60                  	// #96
   9b5c8:	94001a4e 	bl	a1f00 <assertion_failed>
   9b5cc:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b5d0:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b5d4:	91204021 	add	x1, x1, #0x810
   9b5d8:	9120e000 	add	x0, x0, #0x838
   9b5dc:	52800c22 	mov	w2, #0x61                  	// #97
   9b5e0:	94001a48 	bl	a1f00 <assertion_failed>
   9b5e4:	d503201f 	nop
   9b5e8:	d503201f 	nop
   9b5ec:	d503201f 	nop

000000000009b5f0 <CDWHCIRegister::ClearAll()>:
   9b5f0:	52800021 	mov	w1, #0x1                   	// #1
   9b5f4:	39000001 	strb	w1, [x0]
   9b5f8:	b900081f 	str	wzr, [x0, #8]
   9b5fc:	d65f03c0 	ret

000000000009b600 <CDWHCIRegister::SetAll()>:
   9b600:	12800001 	mov	w1, #0xffffffff            	// #-1
   9b604:	52800022 	mov	w2, #0x1                   	// #1
   9b608:	39000002 	strb	w2, [x0]
   9b60c:	b9000801 	str	w1, [x0, #8]
   9b610:	d65f03c0 	ret
   9b614:	d503201f 	nop
   9b618:	d503201f 	nop
   9b61c:	d503201f 	nop

000000000009b620 <CDWHCIRegister::Dump() const>:
   9b620:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b624:	910003fd 	mov	x29, sp
   9b628:	f9000bf3 	str	x19, [sp, #16]
   9b62c:	aa0003f3 	mov	x19, x0
   9b630:	39400000 	ldrb	w0, [x0]
   9b634:	36000180 	tbz	w0, #0, 9b664 <CDWHCIRegister::Dump() const+0x44>
   9b638:	9400216e 	bl	a3bf0 <CLogger::Get()>
   9b63c:	29409664 	ldp	w4, w5, [x19, #4]
   9b640:	d00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9b644:	91216063 	add	x3, x3, #0x858
   9b648:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b64c:	f9400bf3 	ldr	x19, [sp, #16]
   9b650:	9121e021 	add	x1, x1, #0x878
   9b654:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b658:	12002c84 	and	w4, w4, #0xfff
   9b65c:	52800082 	mov	w2, #0x4                   	// #4
   9b660:	14002358 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9b664:	94002163 	bl	a3bf0 <CLogger::Get()>
   9b668:	b9400664 	ldr	w4, [x19, #4]
   9b66c:	d00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9b670:	f9400bf3 	ldr	x19, [sp, #16]
   9b674:	91220063 	add	x3, x3, #0x880
   9b678:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b67c:	12002c84 	and	w4, w4, #0xfff
   9b680:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b684:	52800082 	mov	w2, #0x4                   	// #4
   9b688:	9121e021 	add	x1, x1, #0x878
   9b68c:	1400234d 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>

000000000009b690 <CLAN7800Device::GetMACAddress() const>:
   9b690:	91010000 	add	x0, x0, #0x40
   9b694:	d65f03c0 	ret
   9b698:	d503201f 	nop
   9b69c:	d503201f 	nop

000000000009b6a0 <CLAN7800Device::~CLAN7800Device()>:
   9b6a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b6a4:	d0000162 	adrp	x2, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9b6a8:	913fa042 	add	x2, x2, #0xfe8
   9b6ac:	910003fd 	mov	x29, sp
   9b6b0:	a90153f3 	stp	x19, x20, [sp, #16]
   9b6b4:	f0000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9b6b8:	9101e021 	add	x1, x1, #0x78
   9b6bc:	f9401c14 	ldr	x20, [x0, #56]
   9b6c0:	f9000002 	str	x2, [x0]
   9b6c4:	f9001401 	str	x1, [x0, #40]
   9b6c8:	aa0003f3 	mov	x19, x0
   9b6cc:	b40000d4 	cbz	x20, 9b6e4 <CLAN7800Device::~CLAN7800Device()+0x44>
   9b6d0:	aa1403e0 	mov	x0, x20
   9b6d4:	97ffd243 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9b6d8:	aa1403e0 	mov	x0, x20
   9b6dc:	d2800401 	mov	x1, #0x20                  	// #32
   9b6e0:	94004134 	bl	abbb0 <operator delete(void*, unsigned long)>
   9b6e4:	f9401a74 	ldr	x20, [x19, #48]
   9b6e8:	f9001e7f 	str	xzr, [x19, #56]
   9b6ec:	b40000d4 	cbz	x20, 9b704 <CLAN7800Device::~CLAN7800Device()+0x64>
   9b6f0:	aa1403e0 	mov	x0, x20
   9b6f4:	97ffd23b 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9b6f8:	aa1403e0 	mov	x0, x20
   9b6fc:	d2800401 	mov	x1, #0x20                  	// #32
   9b700:	9400412c 	bl	abbb0 <operator delete(void*, unsigned long)>
   9b704:	f9001a7f 	str	xzr, [x19, #48]
   9b708:	91010260 	add	x0, x19, #0x40
   9b70c:	94003fd1 	bl	ab650 <CMACAddress::~CMACAddress()>
   9b710:	aa1303e0 	mov	x0, x19
   9b714:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b718:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b71c:	17ffd2b5 	b	901f0 <CUSBFunction::~CUSBFunction()>

000000000009b720 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   9b720:	d100a000 	sub	x0, x0, #0x28
   9b724:	17ffffdf 	b	9b6a0 <CLAN7800Device::~CLAN7800Device()>
   9b728:	d503201f 	nop
   9b72c:	d503201f 	nop

000000000009b730 <CLAN7800Device::~CLAN7800Device()>:
   9b730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b734:	910003fd 	mov	x29, sp
   9b738:	f9000bf3 	str	x19, [sp, #16]
   9b73c:	aa0003f3 	mov	x19, x0
   9b740:	97ffffd8 	bl	9b6a0 <CLAN7800Device::~CLAN7800Device()>
   9b744:	aa1303e0 	mov	x0, x19
   9b748:	d2800901 	mov	x1, #0x48                  	// #72
   9b74c:	f9400bf3 	ldr	x19, [sp, #16]
   9b750:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b754:	14004117 	b	abbb0 <operator delete(void*, unsigned long)>
   9b758:	d503201f 	nop
   9b75c:	d503201f 	nop

000000000009b760 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   9b760:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   9b764:	910003fd 	mov	x29, sp
   9b768:	a90153f3 	stp	x19, x20, [sp, #16]
   9b76c:	aa0103f3 	mov	x19, x1
   9b770:	f9401801 	ldr	x1, [x0, #48]
   9b774:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b778:	b40006e1 	cbz	x1, 9b854 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf4>
   9b77c:	b40007b3 	cbz	x19, 9b870 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x110>
   9b780:	aa0203f6 	mov	x22, x2
   9b784:	aa1303e2 	mov	x2, x19
   9b788:	d2800004 	mov	x4, #0x0                   	// #0
   9b78c:	5280c803 	mov	w3, #0x640                 	// #1600
   9b790:	910103f5 	add	x21, sp, #0x40
   9b794:	aa0003f4 	mov	x20, x0
   9b798:	aa1503e0 	mov	x0, x21
   9b79c:	97ffed75 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9b7a0:	aa1403e0 	mov	x0, x20
   9b7a4:	97ffd3b3 	bl	90670 <CUSBFunction::GetHost() const>
   9b7a8:	f9400003 	ldr	x3, [x0]
   9b7ac:	aa1503e1 	mov	x1, x21
   9b7b0:	52800002 	mov	w2, #0x0                   	// #0
   9b7b4:	f9401063 	ldr	x3, [x3, #32]
   9b7b8:	d63f0060 	blr	x3
   9b7bc:	12001c14 	and	w20, w0, #0xff
   9b7c0:	37000120 	tbnz	w0, #0, 9b7e4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x84>
   9b7c4:	aa1503e0 	mov	x0, x21
   9b7c8:	52800014 	mov	w20, #0x0                   	// #0
   9b7cc:	97ffed89 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9b7d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b7d4:	2a1403e0 	mov	w0, w20
   9b7d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b7dc:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   9b7e0:	d65f03c0 	ret
   9b7e4:	aa1503e0 	mov	x0, x21
   9b7e8:	97ffeda2 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9b7ec:	7100241f 	cmp	w0, #0x9
   9b7f0:	54fffea9 	b.ls	9b7c4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>  // b.plast
   9b7f4:	f9001bf7 	str	x23, [sp, #48]
   9b7f8:	b9400277 	ldr	w23, [x19]
   9b7fc:	37b00497 	tbnz	w23, #22, 9b88c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x12c>
   9b800:	120036f7 	and	w23, w23, #0x3fff
   9b804:	51002801 	sub	w1, w0, #0xa
   9b808:	6b17003f 	cmp	w1, w23
   9b80c:	54000541 	b.ne	9b8b4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>  // b.any
   9b810:	7100103f 	cmp	w1, #0x4
   9b814:	540005c9 	b.ls	9b8cc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>  // b.plast
   9b818:	51003817 	sub	w23, w0, #0xe
   9b81c:	51003802 	sub	w2, w0, #0xe
   9b820:	91002a61 	add	x1, x19, #0xa
   9b824:	aa1303e0 	mov	x0, x19
   9b828:	94003e68 	bl	ab1c8 <memcpy>
   9b82c:	b40005d6 	cbz	x22, 9b8e4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x184>
   9b830:	b90002d7 	str	w23, [x22]
   9b834:	aa1503e0 	mov	x0, x21
   9b838:	f9401bf7 	ldr	x23, [sp, #48]
   9b83c:	97ffed6d 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9b840:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b844:	2a1403e0 	mov	w0, w20
   9b848:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b84c:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   9b850:	d65f03c0 	ret
   9b854:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b858:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b85c:	91228021 	add	x1, x1, #0x8a0
   9b860:	9122c000 	add	x0, x0, #0x8b0
   9b864:	52803802 	mov	w2, #0x1c0                 	// #448
   9b868:	f9001bf7 	str	x23, [sp, #48]
   9b86c:	940019a5 	bl	a1f00 <assertion_failed>
   9b870:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b874:	f00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9b878:	91228021 	add	x1, x1, #0x8a0
   9b87c:	91384000 	add	x0, x0, #0xe10
   9b880:	52803822 	mov	w2, #0x1c1                 	// #449
   9b884:	f9001bf7 	str	x23, [sp, #48]
   9b888:	9400199e 	bl	a1f00 <assertion_failed>
   9b88c:	940020d9 	bl	a3bf0 <CLogger::Get()>
   9b890:	2a1703e4 	mov	w4, w23
   9b894:	d00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9b898:	b00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9b89c:	91232063 	add	x3, x3, #0x8c8
   9b8a0:	910b4021 	add	x1, x1, #0x2d0
   9b8a4:	52800042 	mov	w2, #0x2                   	// #2
   9b8a8:	940022c6 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9b8ac:	f9401bf7 	ldr	x23, [sp, #48]
   9b8b0:	17ffffc5 	b	9b7c4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   9b8b4:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b8b8:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b8bc:	91228021 	add	x1, x1, #0x8a0
   9b8c0:	91238000 	add	x0, x0, #0x8e0
   9b8c4:	52803b02 	mov	w2, #0x1d8                 	// #472
   9b8c8:	9400198e 	bl	a1f00 <assertion_failed>
   9b8cc:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b8d0:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b8d4:	91228021 	add	x1, x1, #0x8a0
   9b8d8:	91244000 	add	x0, x0, #0x910
   9b8dc:	52803b22 	mov	w2, #0x1d9                 	// #473
   9b8e0:	94001988 	bl	a1f00 <assertion_failed>
   9b8e4:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b8e8:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b8ec:	91228021 	add	x1, x1, #0x8a0
   9b8f0:	9124a000 	add	x0, x0, #0x928
   9b8f4:	52803c82 	mov	w2, #0x1e4                 	// #484
   9b8f8:	94001982 	bl	a1f00 <assertion_failed>
   9b8fc:	d503201f 	nop

000000000009b900 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   9b900:	d100a000 	sub	x0, x0, #0x28
   9b904:	17ffff97 	b	9b760 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>
   9b908:	d503201f 	nop
   9b90c:	d503201f 	nop

000000000009b910 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   9b910:	d11b83ff 	sub	sp, sp, #0x6e0
   9b914:	2a0203e2 	mov	w2, w2
   9b918:	a9007bfd 	stp	x29, x30, [sp]
   9b91c:	910003fd 	mov	x29, sp
   9b920:	a90153f3 	stp	x19, x20, [sp, #16]
   9b924:	9101bff3 	add	x19, sp, #0x6f
   9b928:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   9b92c:	f90013f5 	str	x21, [sp, #32]
   9b930:	aa0003f5 	mov	x21, x0
   9b934:	aa0203f4 	mov	x20, x2
   9b938:	91002260 	add	x0, x19, #0x8
   9b93c:	94003e23 	bl	ab1c8 <memcpy>
   9b940:	f9401ea0 	ldr	x0, [x21, #56]
   9b944:	320a0281 	orr	w1, w20, #0x400000
   9b948:	29007e61 	stp	w1, wzr, [x19]
   9b94c:	b40001e0 	cbz	x0, 9b988 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x78>
   9b950:	aa1503e0 	mov	x0, x21
   9b954:	97ffd347 	bl	90670 <CUSBFunction::GetHost() const>
   9b958:	f9401ea1 	ldr	x1, [x21, #56]
   9b95c:	11002283 	add	w3, w20, #0x8
   9b960:	aa1303e2 	mov	x2, x19
   9b964:	52800004 	mov	w4, #0x0                   	// #0
   9b968:	97ffe1c6 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9b96c:	2a2003e0 	mvn	w0, w0
   9b970:	a9407bfd 	ldp	x29, x30, [sp]
   9b974:	531f7c00 	lsr	w0, w0, #31
   9b978:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b97c:	f94013f5 	ldr	x21, [sp, #32]
   9b980:	911b83ff 	add	sp, sp, #0x6e0
   9b984:	d65f03c0 	ret
   9b988:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b98c:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9b990:	91228021 	add	x1, x1, #0x8a0
   9b994:	91250000 	add	x0, x0, #0x940
   9b998:	52803742 	mov	w2, #0x1ba                 	// #442
   9b99c:	94001959 	bl	a1f00 <assertion_failed>

000000000009b9a0 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   9b9a0:	7119005f 	cmp	w2, #0x640
   9b9a4:	54000068 	b.hi	9b9b0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x10>  // b.pmore
   9b9a8:	b4000081 	cbz	x1, 9b9b8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x18>
   9b9ac:	17ffffd9 	b	9b910 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   9b9b0:	52800000 	mov	w0, #0x0                   	// #0
   9b9b4:	d65f03c0 	ret
   9b9b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b9bc:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9b9c0:	f00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9b9c4:	910003fd 	mov	x29, sp
   9b9c8:	91228021 	add	x1, x1, #0x8a0
   9b9cc:	91384000 	add	x0, x0, #0xe10
   9b9d0:	52803662 	mov	w2, #0x1b3                 	// #435
   9b9d4:	9400194b 	bl	a1f00 <assertion_failed>
   9b9d8:	d503201f 	nop
   9b9dc:	d503201f 	nop

000000000009b9e0 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   9b9e0:	91006000 	add	x0, x0, #0x18
   9b9e4:	d65f03c0 	ret
   9b9e8:	d503201f 	nop
   9b9ec:	d503201f 	nop

000000000009b9f0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   9b9f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b9f4:	910003fd 	mov	x29, sp
   9b9f8:	f9000bf3 	str	x19, [sp, #16]
   9b9fc:	d100a013 	sub	x19, x0, #0x28
   9ba00:	aa1303e0 	mov	x0, x19
   9ba04:	97ffff27 	bl	9b6a0 <CLAN7800Device::~CLAN7800Device()>
   9ba08:	aa1303e0 	mov	x0, x19
   9ba0c:	d2800901 	mov	x1, #0x48                  	// #72
   9ba10:	f9400bf3 	ldr	x19, [sp, #16]
   9ba14:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ba18:	14004066 	b	abbb0 <operator delete(void*, unsigned long)>
   9ba1c:	d503201f 	nop

000000000009ba20 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   9ba20:	7119005f 	cmp	w2, #0x640
   9ba24:	54000088 	b.hi	9ba34 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x14>  // b.pmore
   9ba28:	b40000a1 	cbz	x1, 9ba3c <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x1c>
   9ba2c:	d100a000 	sub	x0, x0, #0x28
   9ba30:	17ffffb8 	b	9b910 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   9ba34:	52800000 	mov	w0, #0x0                   	// #0
   9ba38:	d65f03c0 	ret
   9ba3c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ba40:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9ba44:	f00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9ba48:	910003fd 	mov	x29, sp
   9ba4c:	91228021 	add	x1, x1, #0x8a0
   9ba50:	91384000 	add	x0, x0, #0xe10
   9ba54:	52803662 	mov	w2, #0x1b3                 	// #435
   9ba58:	9400192a 	bl	a1f00 <assertion_failed>
   9ba5c:	d503201f 	nop

000000000009ba60 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   9ba60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ba64:	910003fd 	mov	x29, sp
   9ba68:	f9000bf3 	str	x19, [sp, #16]
   9ba6c:	aa0003f3 	mov	x19, x0
   9ba70:	97ffd284 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9ba74:	d0000160 	adrp	x0, c9000 <vtable for CHDMISoundBaseDevice+0x38>
   9ba78:	913fa000 	add	x0, x0, #0xfe8
   9ba7c:	f0000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ba80:	9101e021 	add	x1, x1, #0x78
   9ba84:	f9000260 	str	x0, [x19]
   9ba88:	91010260 	add	x0, x19, #0x40
   9ba8c:	a902fe61 	stp	x1, xzr, [x19, #40]
   9ba90:	f9001e7f 	str	xzr, [x19, #56]
   9ba94:	f9400bf3 	ldr	x19, [sp, #16]
   9ba98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ba9c:	14003ed5 	b	ab5f0 <CMACAddress::CMACAddress()>

000000000009baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   9baa0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9baa4:	910003fd 	mov	x29, sp
   9baa8:	a90153f3 	stp	x19, x20, [sp, #16]
   9baac:	2a0103f3 	mov	w19, w1
   9bab0:	f90013f5 	str	x21, [sp, #32]
   9bab4:	aa0003f5 	mov	x21, x0
   9bab8:	b9003fe2 	str	w2, [sp, #60]
   9babc:	97ffd2ed 	bl	90670 <CUSBFunction::GetHost() const>
   9bac0:	aa0003f4 	mov	x20, x0
   9bac4:	aa1503e0 	mov	x0, x21
   9bac8:	97ffd2de 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9bacc:	aa0003e1 	mov	x1, x0
   9bad0:	9100f3e6 	add	x6, sp, #0x3c
   9bad4:	aa1403e0 	mov	x0, x20
   9bad8:	2a1303e5 	mov	w5, w19
   9badc:	52800087 	mov	w7, #0x4                   	// #4
   9bae0:	52800004 	mov	w4, #0x0                   	// #0
   9bae4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9bae8:	52800802 	mov	w2, #0x40                  	// #64
   9baec:	97ffe0e9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9baf0:	37f800c0 	tbnz	w0, #31, 9bb08 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x68>
   9baf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9baf8:	52800020 	mov	w0, #0x1                   	// #1
   9bafc:	f94013f5 	ldr	x21, [sp, #32]
   9bb00:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9bb04:	d65f03c0 	ret
   9bb08:	9400203a 	bl	a3bf0 <CLogger::Get()>
   9bb0c:	2a1303e4 	mov	w4, w19
   9bb10:	52800042 	mov	w2, #0x2                   	// #2
   9bb14:	d00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9bb18:	b00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9bb1c:	91256063 	add	x3, x3, #0x958
   9bb20:	910b4021 	add	x1, x1, #0x2d0
   9bb24:	94002227 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9bb28:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bb2c:	52800000 	mov	w0, #0x0                   	// #0
   9bb30:	f94013f5 	ldr	x21, [sp, #32]
   9bb34:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9bb38:	d65f03c0 	ret
   9bb3c:	d503201f 	nop

000000000009bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   9bb40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9bb44:	910003fd 	mov	x29, sp
   9bb48:	a90153f3 	stp	x19, x20, [sp, #16]
   9bb4c:	2a0103f3 	mov	w19, w1
   9bb50:	a9025bf5 	stp	x21, x22, [sp, #32]
   9bb54:	aa0203f5 	mov	x21, x2
   9bb58:	aa0003f6 	mov	x22, x0
   9bb5c:	97ffd2c5 	bl	90670 <CUSBFunction::GetHost() const>
   9bb60:	aa0003f4 	mov	x20, x0
   9bb64:	aa1603e0 	mov	x0, x22
   9bb68:	97ffd2b6 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9bb6c:	aa1503e6 	mov	x6, x21
   9bb70:	aa0003e1 	mov	x1, x0
   9bb74:	2a1303e5 	mov	w5, w19
   9bb78:	aa1403e0 	mov	x0, x20
   9bb7c:	52800087 	mov	w7, #0x4                   	// #4
   9bb80:	52800004 	mov	w4, #0x0                   	// #0
   9bb84:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9bb88:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9bb8c:	97ffe0c1 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9bb90:	7100101f 	cmp	w0, #0x4
   9bb94:	540000c1 	b.ne	9bbac <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x6c>  // b.any
   9bb98:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bb9c:	52800020 	mov	w0, #0x1                   	// #1
   9bba0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bba4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bba8:	d65f03c0 	ret
   9bbac:	94002011 	bl	a3bf0 <CLogger::Get()>
   9bbb0:	2a1303e4 	mov	w4, w19
   9bbb4:	52800042 	mov	w2, #0x2                   	// #2
   9bbb8:	d00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9bbbc:	b00000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9bbc0:	9125e063 	add	x3, x3, #0x978
   9bbc4:	910b4021 	add	x1, x1, #0x2d0
   9bbc8:	940021fe 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9bbcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bbd0:	52800000 	mov	w0, #0x0                   	// #0
   9bbd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bbd8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bbdc:	d65f03c0 	ret

000000000009bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   9bbe0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9bbe4:	910003fd 	mov	x29, sp
   9bbe8:	a90153f3 	stp	x19, x20, [sp, #16]
   9bbec:	2a0403f3 	mov	w19, w4
   9bbf0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9bbf4:	2a0503f5 	mov	w21, w5
   9bbf8:	a90363f7 	stp	x23, x24, [sp, #48]
   9bbfc:	aa0003f7 	mov	x23, x0
   9bc00:	2a0103f8 	mov	w24, w1
   9bc04:	a9046bf9 	stp	x25, x26, [sp, #64]
   9bc08:	2a0203f9 	mov	w25, w2
   9bc0c:	2a0303fa 	mov	w26, w3
   9bc10:	f9002bfb 	str	x27, [sp, #80]
   9bc14:	94003baf 	bl	aaad0 <CTimer::Get()>
   9bc18:	b40005c0 	cbz	x0, 9bcd0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xf0>
   9bc1c:	aa0003f4 	mov	x20, x0
   9bc20:	9101b3fb 	add	x27, sp, #0x6c
   9bc24:	94003883 	bl	a9e30 <CTimer::GetTicks() const>
   9bc28:	2a0003f6 	mov	w22, w0
   9bc2c:	d503201f 	nop
   9bc30:	35000313 	cbnz	w19, 9bc90 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>
   9bc34:	aa1403e0 	mov	x0, x20
   9bc38:	9400387e 	bl	a9e30 <CTimer::GetTicks() const>
   9bc3c:	4b160006 	sub	w6, w0, w22
   9bc40:	6b1500df 	cmp	w6, w21
   9bc44:	54000342 	b.cs	9bcac <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>  // b.hs, b.nlast
   9bc48:	aa1b03e2 	mov	x2, x27
   9bc4c:	2a1803e1 	mov	w1, w24
   9bc50:	aa1703e0 	mov	x0, x23
   9bc54:	97ffffbb 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9bc58:	12001c02 	and	w2, w0, #0xff
   9bc5c:	36000280 	tbz	w0, #0, 9bcac <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
   9bc60:	b9406fe1 	ldr	w1, [sp, #108]
   9bc64:	0a010321 	and	w1, w25, w1
   9bc68:	6b1a003f 	cmp	w1, w26
   9bc6c:	54fffe21 	b.ne	9bc30 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x50>  // b.any
   9bc70:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bc74:	2a0203e0 	mov	w0, w2
   9bc78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bc7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9bc80:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9bc84:	f9402bfb 	ldr	x27, [sp, #80]
   9bc88:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9bc8c:	d65f03c0 	ret
   9bc90:	2a1303e0 	mov	w0, w19
   9bc94:	94003b4b 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   9bc98:	aa1403e0 	mov	x0, x20
   9bc9c:	94003865 	bl	a9e30 <CTimer::GetTicks() const>
   9bca0:	4b160006 	sub	w6, w0, w22
   9bca4:	6b1500df 	cmp	w6, w21
   9bca8:	54fffd03 	b.cc	9bc48 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x68>  // b.lo, b.ul, b.last
   9bcac:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bcb0:	52800002 	mov	w2, #0x0                   	// #0
   9bcb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9bcb8:	2a0203e0 	mov	w0, w2
   9bcbc:	a94363f7 	ldp	x23, x24, [sp, #48]
   9bcc0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9bcc4:	f9402bfb 	ldr	x27, [sp, #80]
   9bcc8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9bccc:	d65f03c0 	ret
   9bcd0:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9bcd4:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9bcd8:	91228021 	add	x1, x1, #0x8a0
   9bcdc:	91266000 	add	x0, x0, #0x998
   9bce0:	528051e2 	mov	w2, #0x28f                 	// #655
   9bce4:	94001887 	bl	a1f00 <assertion_failed>
   9bce8:	d503201f 	nop
   9bcec:	d503201f 	nop

000000000009bcf0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   9bcf0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9bcf4:	910003fd 	mov	x29, sp
   9bcf8:	a90153f3 	stp	x19, x20, [sp, #16]
   9bcfc:	12001c34 	and	w20, w1, #0xff
   9bd00:	71007e9f 	cmp	w20, #0x1f
   9bd04:	f90013f5 	str	x21, [sp, #32]
   9bd08:	54000488 	b.hi	9bd98 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa8>  // b.pmore
   9bd0c:	12003c55 	and	w21, w2, #0xffff
   9bd10:	aa0003f3 	mov	x19, x0
   9bd14:	52800c85 	mov	w5, #0x64                  	// #100
   9bd18:	52800004 	mov	w4, #0x0                   	// #0
   9bd1c:	52800003 	mov	w3, #0x0                   	// #0
   9bd20:	52800022 	mov	w2, #0x1                   	// #1
   9bd24:	52802401 	mov	w1, #0x120                 	// #288
   9bd28:	97ffffae 	bl	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9bd2c:	370000c0 	tbnz	w0, #0, 9bd44 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x54>
   9bd30:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bd34:	52800000 	mov	w0, #0x0                   	// #0
   9bd38:	f94013f5 	ldr	x21, [sp, #32]
   9bd3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bd40:	d65f03c0 	ret
   9bd44:	2a1503e2 	mov	w2, w21
   9bd48:	aa1303e0 	mov	x0, x19
   9bd4c:	52802481 	mov	w1, #0x124                 	// #292
   9bd50:	97ffff54 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9bd54:	3607fee0 	tbz	w0, #0, 9bd30 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   9bd58:	52810062 	mov	w2, #0x803                 	// #2051
   9bd5c:	aa1303e0 	mov	x0, x19
   9bd60:	2a141842 	orr	w2, w2, w20, lsl #6
   9bd64:	52802401 	mov	w1, #0x120                 	// #288
   9bd68:	97ffff4e 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9bd6c:	3607fe20 	tbz	w0, #0, 9bd30 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   9bd70:	f94013f5 	ldr	x21, [sp, #32]
   9bd74:	aa1303e0 	mov	x0, x19
   9bd78:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bd7c:	52800c85 	mov	w5, #0x64                  	// #100
   9bd80:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bd84:	52800004 	mov	w4, #0x0                   	// #0
   9bd88:	52800003 	mov	w3, #0x0                   	// #0
   9bd8c:	52800022 	mov	w2, #0x1                   	// #1
   9bd90:	52802401 	mov	w1, #0x120                 	// #288
   9bd94:	17ffff93 	b	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9bd98:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9bd9c:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9bda0:	91228021 	add	x1, x1, #0x8a0
   9bda4:	9126a000 	add	x0, x0, #0x9a8
   9bda8:	52804b42 	mov	w2, #0x25a                 	// #602
   9bdac:	94001855 	bl	a1f00 <assertion_failed>

000000000009bdb0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   9bdb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9bdb4:	910003fd 	mov	x29, sp
   9bdb8:	a90153f3 	stp	x19, x20, [sp, #16]
   9bdbc:	12001c34 	and	w20, w1, #0xff
   9bdc0:	71007e9f 	cmp	w20, #0x1f
   9bdc4:	f90013f5 	str	x21, [sp, #32]
   9bdc8:	54000508 	b.hi	9be68 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xb8>  // b.pmore
   9bdcc:	aa0203f5 	mov	x21, x2
   9bdd0:	aa0003f3 	mov	x19, x0
   9bdd4:	52800c85 	mov	w5, #0x64                  	// #100
   9bdd8:	52800004 	mov	w4, #0x0                   	// #0
   9bddc:	52800003 	mov	w3, #0x0                   	// #0
   9bde0:	52800022 	mov	w2, #0x1                   	// #1
   9bde4:	52802401 	mov	w1, #0x120                 	// #288
   9bde8:	97ffff7e 	bl	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9bdec:	370000c0 	tbnz	w0, #0, 9be04 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x54>
   9bdf0:	52800000 	mov	w0, #0x0                   	// #0
   9bdf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bdf8:	f94013f5 	ldr	x21, [sp, #32]
   9bdfc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9be00:	d65f03c0 	ret
   9be04:	52810022 	mov	w2, #0x801                 	// #2049
   9be08:	aa1303e0 	mov	x0, x19
   9be0c:	2a141842 	orr	w2, w2, w20, lsl #6
   9be10:	52802401 	mov	w1, #0x120                 	// #288
   9be14:	97ffff23 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9be18:	3607fec0 	tbz	w0, #0, 9bdf0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   9be1c:	aa1303e0 	mov	x0, x19
   9be20:	52800c85 	mov	w5, #0x64                  	// #100
   9be24:	52800004 	mov	w4, #0x0                   	// #0
   9be28:	52800003 	mov	w3, #0x0                   	// #0
   9be2c:	52800022 	mov	w2, #0x1                   	// #1
   9be30:	52802401 	mov	w1, #0x120                 	// #288
   9be34:	97ffff6b 	bl	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9be38:	3607fdc0 	tbz	w0, #0, 9bdf0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   9be3c:	52802481 	mov	w1, #0x124                 	// #292
   9be40:	aa1303e0 	mov	x0, x19
   9be44:	9100f3e2 	add	x2, sp, #0x3c
   9be48:	97ffff3e 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9be4c:	2a0003e1 	mov	w1, w0
   9be50:	12001c00 	and	w0, w0, #0xff
   9be54:	3607fce1 	tbz	w1, #0, 9bdf0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   9be58:	b4000155 	cbz	x21, 9be80 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   9be5c:	b9403fe1 	ldr	w1, [sp, #60]
   9be60:	790002a1 	strh	w1, [x21]
   9be64:	17ffffe4 	b	9bdf4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   9be68:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9be6c:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9be70:	91228021 	add	x1, x1, #0x8a0
   9be74:	9126a000 	add	x0, x0, #0x9a8
   9be78:	52804e22 	mov	w2, #0x271                 	// #625
   9be7c:	94001821 	bl	a1f00 <assertion_failed>
   9be80:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9be84:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9be88:	91228021 	add	x1, x1, #0x8a0
   9be8c:	9126e000 	add	x0, x0, #0x9b8
   9be90:	528050a2 	mov	w2, #0x285                 	// #645
   9be94:	9400181b 	bl	a1f00 <assertion_failed>
   9be98:	d503201f 	nop
   9be9c:	d503201f 	nop

000000000009bea0 <CLAN7800Device::IsLinkUp()>:
   9bea0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9bea4:	52800021 	mov	w1, #0x1                   	// #1
   9bea8:	910003fd 	mov	x29, sp
   9beac:	91007be2 	add	x2, sp, #0x1e
   9beb0:	97ffffc0 	bl	9bdb0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   9beb4:	12001c01 	and	w1, w0, #0xff
   9beb8:	36000060 	tbz	w0, #0, 9bec4 <CLAN7800Device::IsLinkUp()+0x24>
   9bebc:	79403fe1 	ldrh	w1, [sp, #30]
   9bec0:	d3420821 	ubfx	x1, x1, #2, #1
   9bec4:	2a0103e0 	mov	w0, w1
   9bec8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9becc:	d65f03c0 	ret

000000000009bed0 <CLAN7800Device::GetLinkSpeed()>:
   9bed0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9bed4:	52800002 	mov	w2, #0x0                   	// #0
   9bed8:	528003e1 	mov	w1, #0x1f                  	// #31
   9bedc:	910003fd 	mov	x29, sp
   9bee0:	f9000bf3 	str	x19, [sp, #16]
   9bee4:	aa0003f3 	mov	x19, x0
   9bee8:	97ffff82 	bl	9bcf0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   9beec:	360003e0 	tbz	w0, #0, 9bf68 <CLAN7800Device::GetLinkSpeed()+0x98>
   9bef0:	aa1303e0 	mov	x0, x19
   9bef4:	9100bbe2 	add	x2, sp, #0x2e
   9bef8:	52800381 	mov	w1, #0x1c                  	// #28
   9befc:	97ffffad 	bl	9bdb0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   9bf00:	36000340 	tbz	w0, #0, 9bf68 <CLAN7800Device::GetLinkSpeed()+0x98>
   9bf04:	79405fe0 	ldrh	w0, [sp, #46]
   9bf08:	37700340 	tbnz	w0, #14, 9bf70 <CLAN7800Device::GetLinkSpeed()+0xa0>
   9bf0c:	367802e0 	tbz	w0, #15, 9bf68 <CLAN7800Device::GetLinkSpeed()+0x98>
   9bf10:	d3431401 	ubfx	x1, x0, #3, #3
   9bf14:	7100103f 	cmp	w1, #0x4
   9bf18:	54000380 	b.eq	9bf88 <CLAN7800Device::GetLinkSpeed()+0xb8>  // b.none
   9bf1c:	54000188 	b.hi	9bf4c <CLAN7800Device::GetLinkSpeed()+0x7c>  // b.pmore
   9bf20:	7100043f 	cmp	w1, #0x1
   9bf24:	52800040 	mov	w0, #0x2                   	// #2
   9bf28:	540000c0 	b.eq	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>  // b.none
   9bf2c:	6b00003f 	cmp	w1, w0
   9bf30:	52800080 	mov	w0, #0x4                   	// #4
   9bf34:	54000060 	b.eq	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>  // b.none
   9bf38:	52800000 	mov	w0, #0x0                   	// #0
   9bf3c:	35000161 	cbnz	w1, 9bf68 <CLAN7800Device::GetLinkSpeed()+0x98>
   9bf40:	f9400bf3 	ldr	x19, [sp, #16]
   9bf44:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bf48:	d65f03c0 	ret
   9bf4c:	7100143f 	cmp	w1, #0x5
   9bf50:	52800060 	mov	w0, #0x3                   	// #3
   9bf54:	54ffff60 	b.eq	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>  // b.none
   9bf58:	7100183f 	cmp	w1, #0x6
   9bf5c:	528000a0 	mov	w0, #0x5                   	// #5
   9bf60:	54ffff00 	b.eq	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>  // b.none
   9bf64:	d503201f 	nop
   9bf68:	528000c0 	mov	w0, #0x6                   	// #6
   9bf6c:	17fffff5 	b	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>
   9bf70:	d00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9bf74:	d00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9bf78:	91228021 	add	x1, x1, #0x8a0
   9bf7c:	91272000 	add	x0, x0, #0x9c8
   9bf80:	52804082 	mov	w2, #0x204                 	// #516
   9bf84:	940017df 	bl	a1f00 <assertion_failed>
   9bf88:	52800020 	mov	w0, #0x1                   	// #1
   9bf8c:	17ffffed 	b	9bf40 <CLAN7800Device::GetLinkSpeed()+0x70>

000000000009bf90 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   9bf90:	d100a000 	sub	x0, x0, #0x28
   9bf94:	17ffffcf 	b	9bed0 <CLAN7800Device::GetLinkSpeed()>
   9bf98:	d503201f 	nop
   9bf9c:	d503201f 	nop

000000000009bfa0 <CLAN7800Device::InitPHY()>:
   9bfa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9bfa4:	52800002 	mov	w2, #0x0                   	// #0
   9bfa8:	528003e1 	mov	w1, #0x1f                  	// #31
   9bfac:	910003fd 	mov	x29, sp
   9bfb0:	f9000bf3 	str	x19, [sp, #16]
   9bfb4:	aa0003f3 	mov	x19, x0
   9bfb8:	97ffff4e 	bl	9bcf0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   9bfbc:	370000a0 	tbnz	w0, #0, 9bfd0 <CLAN7800Device::InitPHY()+0x30>
   9bfc0:	f9400bf3 	ldr	x19, [sp, #16]
   9bfc4:	52800000 	mov	w0, #0x0                   	// #0
   9bfc8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bfcc:	d65f03c0 	ret
   9bfd0:	9100bbe2 	add	x2, sp, #0x2e
   9bfd4:	aa1303e0 	mov	x0, x19
   9bfd8:	528003a1 	mov	w1, #0x1d                  	// #29
   9bfdc:	97ffff75 	bl	9bdb0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   9bfe0:	3607ff00 	tbz	w0, #0, 9bfc0 <CLAN7800Device::InitPHY()+0x20>
   9bfe4:	79405fe2 	ldrh	w2, [sp, #46]
   9bfe8:	aa1303e0 	mov	x0, x19
   9bfec:	f9400bf3 	ldr	x19, [sp, #16]
   9bff0:	12185c42 	and	w2, w2, #0xffffff00
   9bff4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bff8:	52800c23 	mov	w3, #0x61                  	// #97
   9bffc:	528003a1 	mov	w1, #0x1d                  	// #29
   9c000:	2a030042 	orr	w2, w2, w3
   9c004:	17ffff3b 	b	9bcf0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   9c008:	d503201f 	nop
   9c00c:	d503201f 	nop

000000000009c010 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   9c010:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c014:	52800021 	mov	w1, #0x1                   	// #1
   9c018:	d100a000 	sub	x0, x0, #0x28
   9c01c:	910003fd 	mov	x29, sp
   9c020:	91007be2 	add	x2, sp, #0x1e
   9c024:	97ffff63 	bl	9bdb0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   9c028:	12001c01 	and	w1, w0, #0xff
   9c02c:	36000060 	tbz	w0, #0, 9c038 <non-virtual thunk to CLAN7800Device::IsLinkUp()+0x28>
   9c030:	79403fe1 	ldrh	w1, [sp, #30]
   9c034:	d3420821 	ubfx	x1, x1, #2, #1
   9c038:	2a0103e0 	mov	w0, w1
   9c03c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c040:	d65f03c0 	ret
   9c044:	d503201f 	nop
   9c048:	d503201f 	nop
   9c04c:	d503201f 	nop

000000000009c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   9c050:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9c054:	910003fd 	mov	x29, sp
   9c058:	a90153f3 	stp	x19, x20, [sp, #16]
   9c05c:	2a0303f3 	mov	w19, w3
   9c060:	aa0003f4 	mov	x20, x0
   9c064:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c068:	2a0103f5 	mov	w21, w1
   9c06c:	2a0203f6 	mov	w22, w2
   9c070:	9100f3e2 	add	x2, sp, #0x3c
   9c074:	97fffeb3 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9c078:	12001c01 	and	w1, w0, #0xff
   9c07c:	36000120 	tbz	w0, #0, 9c0a0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x50>
   9c080:	b9403fe2 	ldr	w2, [sp, #60]
   9c084:	2a1503e1 	mov	w1, w21
   9c088:	aa1403e0 	mov	x0, x20
   9c08c:	0a020263 	and	w3, w19, w2
   9c090:	2a160062 	orr	w2, w3, w22
   9c094:	b9003fe2 	str	w2, [sp, #60]
   9c098:	97fffe82 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c09c:	12001c01 	and	w1, w0, #0xff
   9c0a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c0a4:	2a0103e0 	mov	w0, w1
   9c0a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c0ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c0b0:	d65f03c0 	ret
   9c0b4:	d503201f 	nop
   9c0b8:	d503201f 	nop
   9c0bc:	d503201f 	nop

000000000009c0c0 <CLAN7800Device::InitMACAddress()>:
   9c0c0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   9c0c4:	52800001 	mov	w1, #0x0                   	// #0
   9c0c8:	910003fd 	mov	x29, sp
   9c0cc:	a90153f3 	stp	x19, x20, [sp, #16]
   9c0d0:	910103f4 	add	x20, sp, #0x40
   9c0d4:	aa0003f3 	mov	x19, x0
   9c0d8:	aa1403e0 	mov	x0, x20
   9c0dc:	940017b1 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9c0e0:	52800061 	mov	w1, #0x3                   	// #3
   9c0e4:	72a00021 	movk	w1, #0x1, lsl #16
   9c0e8:	910123e2 	add	x2, sp, #0x48
   9c0ec:	aa1403e0 	mov	x0, x20
   9c0f0:	52800004 	mov	w4, #0x0                   	// #0
   9c0f4:	52800283 	mov	w3, #0x14                  	// #20
   9c0f8:	9400180a 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9c0fc:	37000100 	tbnz	w0, #0, 9c11c <CLAN7800Device::InitMACAddress()+0x5c>
   9c100:	52800013 	mov	w19, #0x0                   	// #0
   9c104:	aa1403e0 	mov	x0, x20
   9c108:	940017aa 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9c10c:	2a1303e0 	mov	w0, w19
   9c110:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c114:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9c118:	d65f03c0 	ret
   9c11c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c120:	91010276 	add	x22, x19, #0x40
   9c124:	910153e1 	add	x1, sp, #0x54
   9c128:	aa1603e0 	mov	x0, x22
   9c12c:	f9001bf7 	str	x23, [sp, #48]
   9c130:	94003d84 	bl	ab740 <CMACAddress::Set(unsigned char const*)>
   9c134:	b94057f5 	ldr	w21, [sp, #84]
   9c138:	7940b3f7 	ldrh	w23, [sp, #88]
   9c13c:	aa1303e0 	mov	x0, x19
   9c140:	2a1503e2 	mov	w2, w21
   9c144:	52802381 	mov	w1, #0x11c                 	// #284
   9c148:	97fffe56 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c14c:	360000c0 	tbz	w0, #0, 9c164 <CLAN7800Device::InitMACAddress()+0xa4>
   9c150:	2a1703e2 	mov	w2, w23
   9c154:	aa1303e0 	mov	x0, x19
   9c158:	52802301 	mov	w1, #0x118                 	// #280
   9c15c:	97fffe51 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c160:	37000080 	tbnz	w0, #0, 9c170 <CLAN7800Device::InitMACAddress()+0xb0>
   9c164:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c168:	f9401bf7 	ldr	x23, [sp, #48]
   9c16c:	17ffffe5 	b	9c100 <CLAN7800Device::InitMACAddress()+0x40>
   9c170:	2a1503e2 	mov	w2, w21
   9c174:	aa1303e0 	mov	x0, x19
   9c178:	52808081 	mov	w1, #0x404                 	// #1028
   9c17c:	97fffe49 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c180:	3607ff20 	tbz	w0, #0, 9c164 <CLAN7800Device::InitMACAddress()+0xa4>
   9c184:	aa1303e0 	mov	x0, x19
   9c188:	320102e2 	orr	w2, w23, #0x80000000
   9c18c:	52808001 	mov	w1, #0x400                 	// #1024
   9c190:	97fffe44 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c194:	12001c13 	and	w19, w0, #0xff
   9c198:	3607fe60 	tbz	w0, #0, 9c164 <CLAN7800Device::InitMACAddress()+0xa4>
   9c19c:	910183f5 	add	x21, sp, #0x60
   9c1a0:	aa1503e0 	mov	x0, x21
   9c1a4:	94002fdf 	bl	a8120 <CString::CString()>
   9c1a8:	aa1503e1 	mov	x1, x21
   9c1ac:	aa1603e0 	mov	x0, x22
   9c1b0:	94003dc8 	bl	ab8d0 <CMACAddress::Format(CString*) const>
   9c1b4:	94001e8f 	bl	a3bf0 <CLogger::Get()>
   9c1b8:	aa0003f6 	mov	x22, x0
   9c1bc:	aa1503e0 	mov	x0, x21
   9c1c0:	9400301c 	bl	a8230 <CString::operator char const*() const>
   9c1c4:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c1c8:	aa0003e4 	mov	x4, x0
   9c1cc:	9127c063 	add	x3, x3, #0x9f0
   9c1d0:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c1d4:	910b4021 	add	x1, x1, #0x2d0
   9c1d8:	52800082 	mov	w2, #0x4                   	// #4
   9c1dc:	aa1603e0 	mov	x0, x22
   9c1e0:	94002078 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c1e4:	aa1503e0 	mov	x0, x21
   9c1e8:	94002f92 	bl	a8030 <CString::~CString()>
   9c1ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c1f0:	f9401bf7 	ldr	x23, [sp, #48]
   9c1f4:	17ffffc4 	b	9c104 <CLAN7800Device::InitMACAddress()+0x44>
   9c1f8:	d503201f 	nop
   9c1fc:	d503201f 	nop

000000000009c200 <CLAN7800Device::Configure()>:
   9c200:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9c204:	910003fd 	mov	x29, sp
   9c208:	a90153f3 	stp	x19, x20, [sp, #16]
   9c20c:	aa0003f4 	mov	x20, x0
   9c210:	97ffd0f4 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   9c214:	12001c00 	and	w0, w0, #0xff
   9c218:	71000c1f 	cmp	w0, #0x3
   9c21c:	540000c0 	b.eq	9c234 <CLAN7800Device::Configure()+0x34>  // b.none
   9c220:	14000027 	b	9c2bc <CLAN7800Device::Configure()+0xbc>
   9c224:	39400e61 	ldrb	w1, [x19, #3]
   9c228:	12001421 	and	w1, w1, #0x3f
   9c22c:	7100083f 	cmp	w1, #0x2
   9c230:	54000500 	b.eq	9c2d0 <CLAN7800Device::Configure()+0xd0>  // b.none
   9c234:	aa1403e0 	mov	x0, x20
   9c238:	528000a1 	mov	w1, #0x5                   	// #5
   9c23c:	97ffd119 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9c240:	aa0003f3 	mov	x19, x0
   9c244:	b5ffff00 	cbnz	x0, 9c224 <CLAN7800Device::Configure()+0x24>
   9c248:	f9401a80 	ldr	x0, [x20, #48]
   9c24c:	b4000380 	cbz	x0, 9c2bc <CLAN7800Device::Configure()+0xbc>
   9c250:	f9401e80 	ldr	x0, [x20, #56]
   9c254:	b4000340 	cbz	x0, 9c2bc <CLAN7800Device::Configure()+0xbc>
   9c258:	aa1403e0 	mov	x0, x20
   9c25c:	97ffd01d 	bl	902d0 <CUSBFunction::Configure()>
   9c260:	36000920 	tbz	w0, #0, 9c384 <CLAN7800Device::Configure()+0x184>
   9c264:	9100e3e2 	add	x2, sp, #0x38
   9c268:	aa1403e0 	mov	x0, x20
   9c26c:	52800001 	mov	w1, #0x0                   	// #0
   9c270:	97fffe34 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9c274:	360000a0 	tbz	w0, #0, 9c288 <CLAN7800Device::Configure()+0x88>
   9c278:	794077e1 	ldrh	w1, [sp, #58]
   9c27c:	528f0000 	mov	w0, #0x7800                	// #30720
   9c280:	6b00003f 	cmp	w1, w0
   9c284:	54000640 	b.eq	9c34c <CLAN7800Device::Configure()+0x14c>  // b.none
   9c288:	94001e5a 	bl	a3bf0 <CLogger::Get()>
   9c28c:	794077e4 	ldrh	w4, [sp, #58]
   9c290:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c294:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c298:	91282063 	add	x3, x3, #0xa08
   9c29c:	910b4021 	add	x1, x1, #0x2d0
   9c2a0:	52800022 	mov	w2, #0x1                   	// #1
   9c2a4:	94002047 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c2a8:	52800013 	mov	w19, #0x0                   	// #0
   9c2ac:	2a1303e0 	mov	w0, w19
   9c2b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c2b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c2b8:	d65f03c0 	ret
   9c2bc:	aa1403e0 	mov	x0, x20
   9c2c0:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c2c4:	910b4021 	add	x1, x1, #0x2d0
   9c2c8:	97ffd102 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9c2cc:	17fffff7 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c2d0:	39c00a61 	ldrsb	w1, [x19, #2]
   9c2d4:	d2800400 	mov	x0, #0x20                  	// #32
   9c2d8:	37f801e1 	tbnz	w1, #31, 9c314 <CLAN7800Device::Configure()+0x114>
   9c2dc:	f9401e81 	ldr	x1, [x20, #56]
   9c2e0:	b5fffee1 	cbnz	x1, 9c2bc <CLAN7800Device::Configure()+0xbc>
   9c2e4:	f90013f5 	str	x21, [sp, #32]
   9c2e8:	94003e12 	bl	abb30 <operator new(unsigned long)>
   9c2ec:	aa0003f5 	mov	x21, x0
   9c2f0:	aa1403e0 	mov	x0, x20
   9c2f4:	97ffd0c7 	bl	90610 <CUSBFunction::GetDevice() const>
   9c2f8:	aa0003e1 	mov	x1, x0
   9c2fc:	aa1303e2 	mov	x2, x19
   9c300:	aa1503e0 	mov	x0, x21
   9c304:	97ffceab 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9c308:	f9001e95 	str	x21, [x20, #56]
   9c30c:	f94013f5 	ldr	x21, [sp, #32]
   9c310:	17ffffc9 	b	9c234 <CLAN7800Device::Configure()+0x34>
   9c314:	f9401a81 	ldr	x1, [x20, #48]
   9c318:	b5fffd21 	cbnz	x1, 9c2bc <CLAN7800Device::Configure()+0xbc>
   9c31c:	f90013f5 	str	x21, [sp, #32]
   9c320:	94003e04 	bl	abb30 <operator new(unsigned long)>
   9c324:	aa0003f5 	mov	x21, x0
   9c328:	aa1403e0 	mov	x0, x20
   9c32c:	97ffd0b9 	bl	90610 <CUSBFunction::GetDevice() const>
   9c330:	aa0003e1 	mov	x1, x0
   9c334:	aa1303e2 	mov	x2, x19
   9c338:	aa1503e0 	mov	x0, x21
   9c33c:	97ffce9d 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9c340:	f9001a95 	str	x21, [x20, #48]
   9c344:	f94013f5 	ldr	x21, [sp, #32]
   9c348:	17ffffbb 	b	9c234 <CLAN7800Device::Configure()+0x34>
   9c34c:	9100f3f3 	add	x19, sp, #0x3c
   9c350:	aa1403e0 	mov	x0, x20
   9c354:	aa1303e2 	mov	x2, x19
   9c358:	52800201 	mov	w1, #0x10                  	// #16
   9c35c:	97fffdf9 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9c360:	37000220 	tbnz	w0, #0, 9c3a4 <CLAN7800Device::Configure()+0x1a4>
   9c364:	94001e23 	bl	a3bf0 <CLogger::Get()>
   9c368:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c36c:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c370:	91288063 	add	x3, x3, #0xa20
   9c374:	910b4021 	add	x1, x1, #0x2d0
   9c378:	52800022 	mov	w2, #0x1                   	// #1
   9c37c:	94002011 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c380:	17ffffca 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c384:	94001e1b 	bl	a3bf0 <CLogger::Get()>
   9c388:	900000c3 	adrp	x3, b4000 <_etext+0x19c8>
   9c38c:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c390:	91182063 	add	x3, x3, #0x608
   9c394:	910b4021 	add	x1, x1, #0x2d0
   9c398:	52800022 	mov	w2, #0x1                   	// #1
   9c39c:	94002009 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c3a0:	17ffffc2 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c3a4:	b9403fe2 	ldr	w2, [sp, #60]
   9c3a8:	aa1403e0 	mov	x0, x20
   9c3ac:	52800201 	mov	w1, #0x10                  	// #16
   9c3b0:	321f0042 	orr	w2, w2, #0x2
   9c3b4:	b9003fe2 	str	w2, [sp, #60]
   9c3b8:	97fffdba 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c3bc:	3607fd40 	tbz	w0, #0, 9c364 <CLAN7800Device::Configure()+0x164>
   9c3c0:	aa1403e0 	mov	x0, x20
   9c3c4:	52800c85 	mov	w5, #0x64                  	// #100
   9c3c8:	52807d04 	mov	w4, #0x3e8                 	// #1000
   9c3cc:	52800003 	mov	w3, #0x0                   	// #0
   9c3d0:	52800042 	mov	w2, #0x2                   	// #2
   9c3d4:	52800201 	mov	w1, #0x10                  	// #16
   9c3d8:	97fffe02 	bl	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9c3dc:	3607fc40 	tbz	w0, #0, 9c364 <CLAN7800Device::Configure()+0x164>
   9c3e0:	aa1403e0 	mov	x0, x20
   9c3e4:	97ffff37 	bl	9c0c0 <CLAN7800Device::InitMACAddress()>
   9c3e8:	36000fa0 	tbz	w0, #0, 9c5dc <CLAN7800Device::Configure()+0x3dc>
   9c3ec:	aa1403e0 	mov	x0, x20
   9c3f0:	52800302 	mov	w2, #0x18                  	// #24
   9c3f4:	52801201 	mov	w1, #0x90                  	// #144
   9c3f8:	97fffdaa 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c3fc:	3607f560 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c400:	aa1403e0 	mov	x0, x20
   9c404:	52810002 	mov	w2, #0x800                 	// #2048
   9c408:	52801281 	mov	w1, #0x94                  	// #148
   9c40c:	97fffda5 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c410:	3607f4c0 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c414:	aa1303e2 	mov	x2, x19
   9c418:	aa1403e0 	mov	x0, x20
   9c41c:	52800201 	mov	w1, #0x10                  	// #16
   9c420:	97fffdc8 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9c424:	3607f420 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c428:	b9403fe2 	ldr	w2, [sp, #60]
   9c42c:	aa1403e0 	mov	x0, x20
   9c430:	52800201 	mov	w1, #0x10                  	// #16
   9c434:	121b7842 	and	w2, w2, #0xffffffef
   9c438:	320c0442 	orr	w2, w2, #0x300000
   9c43c:	b9003fe2 	str	w2, [sp, #60]
   9c440:	97fffd98 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c444:	3607f320 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c448:	aa1303e2 	mov	x2, x19
   9c44c:	aa1403e0 	mov	x0, x20
   9c450:	52801001 	mov	w1, #0x80                  	// #128
   9c454:	97fffdbb 	bl	9bb40 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9c458:	3607f280 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c45c:	b9403fe2 	ldr	w2, [sp, #60]
   9c460:	aa1403e0 	mov	x0, x20
   9c464:	52801001 	mov	w1, #0x80                  	// #128
   9c468:	12197842 	and	w2, w2, #0xffffffbf
   9c46c:	321b0042 	orr	w2, w2, #0x20
   9c470:	b9003fe2 	str	w2, [sp, #60]
   9c474:	97fffd8b 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c478:	3607f180 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c47c:	aa1403e0 	mov	x0, x20
   9c480:	528002e2 	mov	w2, #0x17                  	// #23
   9c484:	52801901 	mov	w1, #0xc8                  	// #200
   9c488:	97fffd86 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c48c:	3607f0e0 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c490:	aa1403e0 	mov	x0, x20
   9c494:	528002e2 	mov	w2, #0x17                  	// #23
   9c498:	52801981 	mov	w1, #0xcc                  	// #204
   9c49c:	97fffd81 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c4a0:	3607f040 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c4a4:	aa1403e0 	mov	x0, x20
   9c4a8:	52800002 	mov	w2, #0x0                   	// #0
   9c4ac:	52801301 	mov	w1, #0x98                  	// #152
   9c4b0:	97fffd7c 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c4b4:	3607efa0 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c4b8:	aa1403e0 	mov	x0, x20
   9c4bc:	12800002 	mov	w2, #0xffffffff            	// #-1
   9c4c0:	52800181 	mov	w1, #0xc                   	// #12
   9c4c4:	97fffd77 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c4c8:	3607ef00 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c4cc:	aa1403e0 	mov	x0, x20
   9c4d0:	52800002 	mov	w2, #0x0                   	// #0
   9c4d4:	52802181 	mov	w1, #0x10c                 	// #268
   9c4d8:	97fffd72 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c4dc:	3607ee60 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c4e0:	aa1403e0 	mov	x0, x20
   9c4e4:	52800002 	mov	w2, #0x0                   	// #0
   9c4e8:	52801a01 	mov	w1, #0xd0                  	// #208
   9c4ec:	97fffd6d 	bl	9baa0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   9c4f0:	3607edc0 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c4f4:	aa1403e0 	mov	x0, x20
   9c4f8:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c4fc:	52808042 	mov	w2, #0x402                 	// #1026
   9c500:	52801601 	mov	w1, #0xb0                  	// #176
   9c504:	97fffed3 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c508:	3607ed00 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c50c:	aa1403e0 	mov	x0, x20
   9c510:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c514:	52800202 	mov	w2, #0x10                  	// #16
   9c518:	52800281 	mov	w1, #0x14                  	// #20
   9c51c:	97fffecd 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c520:	360007e0 	tbz	w0, #0, 9c61c <CLAN7800Device::Configure()+0x41c>
   9c524:	aa1403e0 	mov	x0, x20
   9c528:	52800c85 	mov	w5, #0x64                  	// #100
   9c52c:	52807d04 	mov	w4, #0x3e8                 	// #1000
   9c530:	52801003 	mov	w3, #0x80                  	// #128
   9c534:	52801202 	mov	w2, #0x90                  	// #144
   9c538:	52800281 	mov	w1, #0x14                  	// #20
   9c53c:	97fffda9 	bl	9bbe0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9c540:	360006e0 	tbz	w0, #0, 9c61c <CLAN7800Device::Configure()+0x41c>
   9c544:	aa1403e0 	mov	x0, x20
   9c548:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c54c:	52830002 	mov	w2, #0x1800                	// #6144
   9c550:	52802001 	mov	w1, #0x100                 	// #256
   9c554:	97fffebf 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c558:	3607ea80 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c55c:	aa1403e0 	mov	x0, x20
   9c560:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c564:	52800022 	mov	w2, #0x1                   	// #1
   9c568:	52802101 	mov	w1, #0x108                 	// #264
   9c56c:	97fffeb9 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c570:	3607e9c0 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c574:	aa1403e0 	mov	x0, x20
   9c578:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c57c:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   9c580:	52801881 	mov	w1, #0xc4                  	// #196
   9c584:	97fffeb3 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c588:	3607e900 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c58c:	52800022 	mov	w2, #0x1                   	// #1
   9c590:	72a0bdc2 	movk	w2, #0x5ee, lsl #16
   9c594:	aa1403e0 	mov	x0, x20
   9c598:	12a7ffe3 	mov	w3, #0xc000ffff            	// #-1073676289
   9c59c:	52802081 	mov	w1, #0x104                 	// #260
   9c5a0:	97fffeac 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c5a4:	3607e820 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c5a8:	aa1403e0 	mov	x0, x20
   9c5ac:	12800003 	mov	w3, #0xffffffff            	// #-1
   9c5b0:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   9c5b4:	52801801 	mov	w1, #0xc0                  	// #192
   9c5b8:	97fffea6 	bl	9c050 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   9c5bc:	3607e760 	tbz	w0, #0, 9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c5c0:	aa1403e0 	mov	x0, x20
   9c5c4:	97fffe77 	bl	9bfa0 <CLAN7800Device::InitPHY()>
   9c5c8:	12001c13 	and	w19, w0, #0xff
   9c5cc:	36000180 	tbz	w0, #0, 9c5fc <CLAN7800Device::Configure()+0x3fc>
   9c5d0:	9100a280 	add	x0, x20, #0x28
   9c5d4:	94003cdf 	bl	ab950 <CNetDevice::AddNetDevice()>
   9c5d8:	17ffff35 	b	9c2ac <CLAN7800Device::Configure()+0xac>
   9c5dc:	94001d85 	bl	a3bf0 <CLogger::Get()>
   9c5e0:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c5e4:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c5e8:	9128c063 	add	x3, x3, #0xa30
   9c5ec:	910b4021 	add	x1, x1, #0x2d0
   9c5f0:	52800022 	mov	w2, #0x1                   	// #1
   9c5f4:	94001f73 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c5f8:	17ffff2c 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c5fc:	94001d7d 	bl	a3bf0 <CLogger::Get()>
   9c600:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c604:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c608:	91298063 	add	x3, x3, #0xa60
   9c60c:	910b4021 	add	x1, x1, #0x2d0
   9c610:	52800022 	mov	w2, #0x1                   	// #1
   9c614:	94001f6b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c618:	17ffff24 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c61c:	94001d75 	bl	a3bf0 <CLogger::Get()>
   9c620:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c624:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c628:	91292063 	add	x3, x3, #0xa48
   9c62c:	910b4021 	add	x1, x1, #0x2d0
   9c630:	52800022 	mov	w2, #0x1                   	// #1
   9c634:	94001f63 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c638:	17ffff1c 	b	9c2a8 <CLAN7800Device::Configure()+0xa8>
   9c63c:	00000000 	udf	#0

000000000009c640 <CNetDevice::GetType()>:
   9c640:	52800000 	mov	w0, #0x0                   	// #0
   9c644:	d65f03c0 	ret
	...

000000000009c650 <CNetDevice::IsSendFrameAdvisable()>:
   9c650:	52800020 	mov	w0, #0x1                   	// #1
   9c654:	d65f03c0 	ret
	...

000000000009c660 <CNetDevice::UpdatePHY()>:
   9c660:	52800000 	mov	w0, #0x0                   	// #0
   9c664:	d65f03c0 	ret
	...

000000000009c670 <CSMSC951xDevice::GetMACAddress() const>:
   9c670:	91010000 	add	x0, x0, #0x40
   9c674:	d65f03c0 	ret
   9c678:	d503201f 	nop
   9c67c:	d503201f 	nop

000000000009c680 <CSMSC951xDevice::~CSMSC951xDevice()>:
   9c680:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c684:	d0000162 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9c688:	91036042 	add	x2, x2, #0xd8
   9c68c:	910003fd 	mov	x29, sp
   9c690:	a90153f3 	stp	x19, x20, [sp, #16]
   9c694:	d0000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9c698:	9105a021 	add	x1, x1, #0x168
   9c69c:	f9401c14 	ldr	x20, [x0, #56]
   9c6a0:	f9000002 	str	x2, [x0]
   9c6a4:	f9001401 	str	x1, [x0, #40]
   9c6a8:	aa0003f3 	mov	x19, x0
   9c6ac:	b40000d4 	cbz	x20, 9c6c4 <CSMSC951xDevice::~CSMSC951xDevice()+0x44>
   9c6b0:	aa1403e0 	mov	x0, x20
   9c6b4:	97ffce4b 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9c6b8:	aa1403e0 	mov	x0, x20
   9c6bc:	d2800401 	mov	x1, #0x20                  	// #32
   9c6c0:	94003d3c 	bl	abbb0 <operator delete(void*, unsigned long)>
   9c6c4:	f9401a74 	ldr	x20, [x19, #48]
   9c6c8:	f9001e7f 	str	xzr, [x19, #56]
   9c6cc:	b40000d4 	cbz	x20, 9c6e4 <CSMSC951xDevice::~CSMSC951xDevice()+0x64>
   9c6d0:	aa1403e0 	mov	x0, x20
   9c6d4:	97ffce43 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9c6d8:	aa1403e0 	mov	x0, x20
   9c6dc:	d2800401 	mov	x1, #0x20                  	// #32
   9c6e0:	94003d34 	bl	abbb0 <operator delete(void*, unsigned long)>
   9c6e4:	f9001a7f 	str	xzr, [x19, #48]
   9c6e8:	91010260 	add	x0, x19, #0x40
   9c6ec:	94003bd9 	bl	ab650 <CMACAddress::~CMACAddress()>
   9c6f0:	aa1303e0 	mov	x0, x19
   9c6f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c6f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c6fc:	17ffcebd 	b	901f0 <CUSBFunction::~CUSBFunction()>

000000000009c700 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   9c700:	d100a000 	sub	x0, x0, #0x28
   9c704:	17ffffdf 	b	9c680 <CSMSC951xDevice::~CSMSC951xDevice()>
   9c708:	d503201f 	nop
   9c70c:	d503201f 	nop

000000000009c710 <CSMSC951xDevice::~CSMSC951xDevice()>:
   9c710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c714:	910003fd 	mov	x29, sp
   9c718:	f9000bf3 	str	x19, [sp, #16]
   9c71c:	aa0003f3 	mov	x19, x0
   9c720:	97ffffd8 	bl	9c680 <CSMSC951xDevice::~CSMSC951xDevice()>
   9c724:	aa1303e0 	mov	x0, x19
   9c728:	d2800901 	mov	x1, #0x48                  	// #72
   9c72c:	f9400bf3 	ldr	x19, [sp, #16]
   9c730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c734:	14003d1f 	b	abbb0 <operator delete(void*, unsigned long)>
   9c738:	d503201f 	nop
   9c73c:	d503201f 	nop

000000000009c740 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   9c740:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   9c744:	910003fd 	mov	x29, sp
   9c748:	a90153f3 	stp	x19, x20, [sp, #16]
   9c74c:	aa0103f3 	mov	x19, x1
   9c750:	f9401801 	ldr	x1, [x0, #48]
   9c754:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c758:	b4000741 	cbz	x1, 9c840 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   9c75c:	b4000813 	cbz	x19, 9c85c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x11c>
   9c760:	aa0203f6 	mov	x22, x2
   9c764:	aa1303e2 	mov	x2, x19
   9c768:	d2800004 	mov	x4, #0x0                   	// #0
   9c76c:	5280c803 	mov	w3, #0x640                 	// #1600
   9c770:	910103f5 	add	x21, sp, #0x40
   9c774:	aa0003f4 	mov	x20, x0
   9c778:	aa1503e0 	mov	x0, x21
   9c77c:	97ffe97d 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9c780:	aa1403e0 	mov	x0, x20
   9c784:	97ffcfbb 	bl	90670 <CUSBFunction::GetHost() const>
   9c788:	f9400003 	ldr	x3, [x0]
   9c78c:	aa1503e1 	mov	x1, x21
   9c790:	52800002 	mov	w2, #0x0                   	// #0
   9c794:	f9401063 	ldr	x3, [x3, #32]
   9c798:	d63f0060 	blr	x3
   9c79c:	12001c14 	and	w20, w0, #0xff
   9c7a0:	37000120 	tbnz	w0, #0, 9c7c4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   9c7a4:	aa1503e0 	mov	x0, x21
   9c7a8:	52800014 	mov	w20, #0x0                   	// #0
   9c7ac:	97ffe991 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9c7b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c7b4:	2a1403e0 	mov	w0, w20
   9c7b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c7bc:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   9c7c0:	d65f03c0 	ret
   9c7c4:	aa1503e0 	mov	x0, x21
   9c7c8:	97ffe9aa 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9c7cc:	71000c1f 	cmp	w0, #0x3
   9c7d0:	54fffea9 	b.ls	9c7a4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>  // b.plast
   9c7d4:	f9001bf7 	str	x23, [sp, #48]
   9c7d8:	52921bc1 	mov	w1, #0x90de                	// #37086
   9c7dc:	72a80001 	movk	w1, #0x4000, lsl #16
   9c7e0:	b9400277 	ldr	w23, [x19]
   9c7e4:	6a0102ff 	tst	w23, w1
   9c7e8:	54000481 	b.ne	9c878 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x138>  // b.any
   9c7ec:	d35076f7 	ubfx	x23, x23, #16, #14
   9c7f0:	51001000 	sub	w0, w0, #0x4
   9c7f4:	6b17001f 	cmp	w0, w23
   9c7f8:	54000541 	b.ne	9c8a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>  // b.any
   9c7fc:	7100101f 	cmp	w0, #0x4
   9c800:	540005c9 	b.ls	9c8b8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>  // b.plast
   9c804:	51001017 	sub	w23, w0, #0x4
   9c808:	51001002 	sub	w2, w0, #0x4
   9c80c:	91001261 	add	x1, x19, #0x4
   9c810:	aa1303e0 	mov	x0, x19
   9c814:	94003a6d 	bl	ab1c8 <memcpy>
   9c818:	b40005d6 	cbz	x22, 9c8d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x190>
   9c81c:	b90002d7 	str	w23, [x22]
   9c820:	aa1503e0 	mov	x0, x21
   9c824:	f9401bf7 	ldr	x23, [sp, #48]
   9c828:	97ffe972 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9c82c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c830:	2a1403e0 	mov	w0, w20
   9c834:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c838:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   9c83c:	d65f03c0 	ret
   9c840:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c844:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9c848:	9129c021 	add	x1, x1, #0xa70
   9c84c:	9122c000 	add	x0, x0, #0x8b0
   9c850:	52802282 	mov	w2, #0x114                 	// #276
   9c854:	f9001bf7 	str	x23, [sp, #48]
   9c858:	940015aa 	bl	a1f00 <assertion_failed>
   9c85c:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c860:	d00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9c864:	9129c021 	add	x1, x1, #0xa70
   9c868:	91384000 	add	x0, x0, #0xe10
   9c86c:	528022a2 	mov	w2, #0x115                 	// #277
   9c870:	f9001bf7 	str	x23, [sp, #48]
   9c874:	940015a3 	bl	a1f00 <assertion_failed>
   9c878:	94001cde 	bl	a3bf0 <CLogger::Get()>
   9c87c:	2a1703e4 	mov	w4, w23
   9c880:	b00000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9c884:	900000e1 	adrp	x1, b8000 <FromUmsd+0x60>
   9c888:	91232063 	add	x3, x3, #0x8c8
   9c88c:	910b6021 	add	x1, x1, #0x2d8
   9c890:	52800042 	mov	w2, #0x2                   	// #2
   9c894:	94001ecb 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9c898:	f9401bf7 	ldr	x23, [sp, #48]
   9c89c:	17ffffc2 	b	9c7a4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   9c8a0:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c8a4:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9c8a8:	9129c021 	add	x1, x1, #0xa70
   9c8ac:	912a0000 	add	x0, x0, #0xa80
   9c8b0:	52802582 	mov	w2, #0x12c                 	// #300
   9c8b4:	94001593 	bl	a1f00 <assertion_failed>
   9c8b8:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c8bc:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9c8c0:	9129c021 	add	x1, x1, #0xa70
   9c8c4:	91244000 	add	x0, x0, #0x910
   9c8c8:	528025a2 	mov	w2, #0x12d                 	// #301
   9c8cc:	9400158d 	bl	a1f00 <assertion_failed>
   9c8d0:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c8d4:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9c8d8:	9129c021 	add	x1, x1, #0xa70
   9c8dc:	9124a000 	add	x0, x0, #0x928
   9c8e0:	52802702 	mov	w2, #0x138                 	// #312
   9c8e4:	94001587 	bl	a1f00 <assertion_failed>
   9c8e8:	d503201f 	nop
   9c8ec:	d503201f 	nop

000000000009c8f0 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   9c8f0:	d100a000 	sub	x0, x0, #0x28
   9c8f4:	17ffff93 	b	9c740 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>
   9c8f8:	d503201f 	nop
   9c8fc:	d503201f 	nop

000000000009c900 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   9c900:	d11b83ff 	sub	sp, sp, #0x6e0
   9c904:	2a0203e2 	mov	w2, w2
   9c908:	a9007bfd 	stp	x29, x30, [sp]
   9c90c:	910003fd 	mov	x29, sp
   9c910:	a90153f3 	stp	x19, x20, [sp, #16]
   9c914:	9101bff3 	add	x19, sp, #0x6f
   9c918:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   9c91c:	f90013f5 	str	x21, [sp, #32]
   9c920:	aa0003f5 	mov	x21, x0
   9c924:	aa0203f4 	mov	x20, x2
   9c928:	91002260 	add	x0, x19, #0x8
   9c92c:	94003a27 	bl	ab1c8 <memcpy>
   9c930:	f9401ea0 	ldr	x0, [x21, #56]
   9c934:	32140681 	orr	w1, w20, #0x3000
   9c938:	29005261 	stp	w1, w20, [x19]
   9c93c:	b40001e0 	cbz	x0, 9c978 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x78>
   9c940:	aa1503e0 	mov	x0, x21
   9c944:	97ffcf4b 	bl	90670 <CUSBFunction::GetHost() const>
   9c948:	f9401ea1 	ldr	x1, [x21, #56]
   9c94c:	11002283 	add	w3, w20, #0x8
   9c950:	aa1303e2 	mov	x2, x19
   9c954:	52800004 	mov	w4, #0x0                   	// #0
   9c958:	97ffddca 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9c95c:	2a2003e0 	mvn	w0, w0
   9c960:	a9407bfd 	ldp	x29, x30, [sp]
   9c964:	531f7c00 	lsr	w0, w0, #31
   9c968:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c96c:	f94013f5 	ldr	x21, [sp, #32]
   9c970:	911b83ff 	add	sp, sp, #0x6e0
   9c974:	d65f03c0 	ret
   9c978:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c97c:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9c980:	9129c021 	add	x1, x1, #0xa70
   9c984:	91250000 	add	x0, x0, #0x940
   9c988:	528021c2 	mov	w2, #0x10e                 	// #270
   9c98c:	9400155d 	bl	a1f00 <assertion_failed>

000000000009c990 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   9c990:	7119005f 	cmp	w2, #0x640
   9c994:	54000068 	b.hi	9c9a0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x10>  // b.pmore
   9c998:	b4000081 	cbz	x1, 9c9a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x18>
   9c99c:	17ffffd9 	b	9c900 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   9c9a0:	52800000 	mov	w0, #0x0                   	// #0
   9c9a4:	d65f03c0 	ret
   9c9a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c9ac:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9c9b0:	d00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9c9b4:	910003fd 	mov	x29, sp
   9c9b8:	9129c021 	add	x1, x1, #0xa70
   9c9bc:	91384000 	add	x0, x0, #0xe10
   9c9c0:	528020e2 	mov	w2, #0x107                 	// #263
   9c9c4:	9400154f 	bl	a1f00 <assertion_failed>
   9c9c8:	d503201f 	nop
   9c9cc:	d503201f 	nop

000000000009c9d0 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   9c9d0:	91006000 	add	x0, x0, #0x18
   9c9d4:	d65f03c0 	ret
   9c9d8:	d503201f 	nop
   9c9dc:	d503201f 	nop

000000000009c9e0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   9c9e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c9e4:	910003fd 	mov	x29, sp
   9c9e8:	f9000bf3 	str	x19, [sp, #16]
   9c9ec:	d100a013 	sub	x19, x0, #0x28
   9c9f0:	aa1303e0 	mov	x0, x19
   9c9f4:	97ffff23 	bl	9c680 <CSMSC951xDevice::~CSMSC951xDevice()>
   9c9f8:	aa1303e0 	mov	x0, x19
   9c9fc:	d2800901 	mov	x1, #0x48                  	// #72
   9ca00:	f9400bf3 	ldr	x19, [sp, #16]
   9ca04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ca08:	14003c6a 	b	abbb0 <operator delete(void*, unsigned long)>
   9ca0c:	d503201f 	nop

000000000009ca10 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   9ca10:	7119005f 	cmp	w2, #0x640
   9ca14:	54000088 	b.hi	9ca24 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x14>  // b.pmore
   9ca18:	b40000a1 	cbz	x1, 9ca2c <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x1c>
   9ca1c:	d100a000 	sub	x0, x0, #0x28
   9ca20:	17ffffb8 	b	9c900 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   9ca24:	52800000 	mov	w0, #0x0                   	// #0
   9ca28:	d65f03c0 	ret
   9ca2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ca30:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9ca34:	d00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9ca38:	910003fd 	mov	x29, sp
   9ca3c:	9129c021 	add	x1, x1, #0xa70
   9ca40:	91384000 	add	x0, x0, #0xe10
   9ca44:	528020e2 	mov	w2, #0x107                 	// #263
   9ca48:	9400152e 	bl	a1f00 <assertion_failed>
   9ca4c:	d503201f 	nop

000000000009ca50 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   9ca50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ca54:	910003fd 	mov	x29, sp
   9ca58:	f9000bf3 	str	x19, [sp, #16]
   9ca5c:	aa0003f3 	mov	x19, x0
   9ca60:	97ffce88 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9ca64:	d0000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ca68:	91036000 	add	x0, x0, #0xd8
   9ca6c:	d0000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ca70:	9105a021 	add	x1, x1, #0x168
   9ca74:	f9000260 	str	x0, [x19]
   9ca78:	91010260 	add	x0, x19, #0x40
   9ca7c:	a902fe61 	stp	x1, xzr, [x19, #40]
   9ca80:	f9001e7f 	str	xzr, [x19, #56]
   9ca84:	f9400bf3 	ldr	x19, [sp, #16]
   9ca88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ca8c:	14003ad9 	b	ab5f0 <CMACAddress::CMACAddress()>

000000000009ca90 <CSMSC951xDevice::PHYWaitNotBusy()>:
   9ca90:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9ca94:	910003fd 	mov	x29, sp
   9ca98:	a90153f3 	stp	x19, x20, [sp, #16]
   9ca9c:	aa0003f4 	mov	x20, x0
   9caa0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9caa4:	f9001bf7 	str	x23, [sp, #48]
   9caa8:	9400380a 	bl	aaad0 <CTimer::Get()>
   9caac:	b4000520 	cbz	x0, 9cb50 <CSMSC951xDevice::PHYWaitNotBusy()+0xc0>
   9cab0:	aa0003f5 	mov	x21, x0
   9cab4:	910133f7 	add	x23, sp, #0x4c
   9cab8:	940034de 	bl	a9e30 <CTimer::GetTicks() const>
   9cabc:	2a0003f6 	mov	w22, w0
   9cac0:	14000013 	b	9cb0c <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   9cac4:	aa1403e0 	mov	x0, x20
   9cac8:	97ffceea 	bl	90670 <CUSBFunction::GetHost() const>
   9cacc:	aa0003f3 	mov	x19, x0
   9cad0:	aa1403e0 	mov	x0, x20
   9cad4:	97ffcedb 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cad8:	aa0003e1 	mov	x1, x0
   9cadc:	aa1703e6 	mov	x6, x23
   9cae0:	aa1303e0 	mov	x0, x19
   9cae4:	52800087 	mov	w7, #0x4                   	// #4
   9cae8:	52802285 	mov	w5, #0x114                 	// #276
   9caec:	52800004 	mov	w4, #0x0                   	// #0
   9caf0:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9caf4:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9caf8:	97ffdce6 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cafc:	7100101f 	cmp	w0, #0x4
   9cb00:	54000101 	b.ne	9cb20 <CSMSC951xDevice::PHYWaitNotBusy()+0x90>  // b.any
   9cb04:	b9404fe0 	ldr	w0, [sp, #76]
   9cb08:	36000180 	tbz	w0, #0, 9cb38 <CSMSC951xDevice::PHYWaitNotBusy()+0xa8>
   9cb0c:	aa1503e0 	mov	x0, x21
   9cb10:	940034c8 	bl	a9e30 <CTimer::GetTicks() const>
   9cb14:	4b160001 	sub	w1, w0, w22
   9cb18:	71018c3f 	cmp	w1, #0x63
   9cb1c:	54fffd49 	b.ls	9cac4 <CSMSC951xDevice::PHYWaitNotBusy()+0x34>  // b.plast
   9cb20:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cb24:	52800000 	mov	w0, #0x0                   	// #0
   9cb28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cb2c:	f9401bf7 	ldr	x23, [sp, #48]
   9cb30:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9cb34:	d65f03c0 	ret
   9cb38:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cb3c:	52800020 	mov	w0, #0x1                   	// #1
   9cb40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cb44:	f9401bf7 	ldr	x23, [sp, #48]
   9cb48:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9cb4c:	d65f03c0 	ret
   9cb50:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9cb54:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9cb58:	9129c021 	add	x1, x1, #0xa70
   9cb5c:	91266000 	add	x0, x0, #0x998
   9cb60:	528031e2 	mov	w2, #0x18f                 	// #399
   9cb64:	940014e7 	bl	a1f00 <assertion_failed>
   9cb68:	d503201f 	nop
   9cb6c:	d503201f 	nop

000000000009cb70 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   9cb70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cb74:	910003fd 	mov	x29, sp
   9cb78:	a90153f3 	stp	x19, x20, [sp, #16]
   9cb7c:	12001c34 	and	w20, w1, #0xff
   9cb80:	71007e9f 	cmp	w20, #0x1f
   9cb84:	a9025bf5 	stp	x21, x22, [sp, #32]
   9cb88:	54000648 	b.hi	9cc50 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0xe0>  // b.pmore
   9cb8c:	12003c55 	and	w21, w2, #0xffff
   9cb90:	aa0003f3 	mov	x19, x0
   9cb94:	97ffffbf 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cb98:	370000c0 	tbnz	w0, #0, 9cbb0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x40>
   9cb9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cba0:	52800000 	mov	w0, #0x0                   	// #0
   9cba4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cba8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cbac:	d65f03c0 	ret
   9cbb0:	aa1303e0 	mov	x0, x19
   9cbb4:	b9003ff5 	str	w21, [sp, #60]
   9cbb8:	97ffceae 	bl	90670 <CUSBFunction::GetHost() const>
   9cbbc:	9100f3f6 	add	x22, sp, #0x3c
   9cbc0:	aa0003f5 	mov	x21, x0
   9cbc4:	aa1303e0 	mov	x0, x19
   9cbc8:	97ffce9e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cbcc:	aa0003e1 	mov	x1, x0
   9cbd0:	aa1603e6 	mov	x6, x22
   9cbd4:	aa1503e0 	mov	x0, x21
   9cbd8:	52800087 	mov	w7, #0x4                   	// #4
   9cbdc:	52802305 	mov	w5, #0x118                 	// #280
   9cbe0:	52800004 	mov	w4, #0x0                   	// #0
   9cbe4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9cbe8:	52800802 	mov	w2, #0x40                  	// #64
   9cbec:	97ffdca9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cbf0:	37fffd60 	tbnz	w0, #31, 9cb9c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   9cbf4:	52810061 	mov	w1, #0x803                 	// #2051
   9cbf8:	aa1303e0 	mov	x0, x19
   9cbfc:	2a141834 	orr	w20, w1, w20, lsl #6
   9cc00:	b9003ff4 	str	w20, [sp, #60]
   9cc04:	97ffce9b 	bl	90670 <CUSBFunction::GetHost() const>
   9cc08:	aa0003f4 	mov	x20, x0
   9cc0c:	aa1303e0 	mov	x0, x19
   9cc10:	97ffce8c 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cc14:	aa1603e6 	mov	x6, x22
   9cc18:	aa0003e1 	mov	x1, x0
   9cc1c:	52800087 	mov	w7, #0x4                   	// #4
   9cc20:	aa1403e0 	mov	x0, x20
   9cc24:	52802285 	mov	w5, #0x114                 	// #276
   9cc28:	52800004 	mov	w4, #0x0                   	// #0
   9cc2c:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9cc30:	52800802 	mov	w2, #0x40                  	// #64
   9cc34:	97ffdc97 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cc38:	37fffb20 	tbnz	w0, #31, 9cb9c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   9cc3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cc40:	aa1303e0 	mov	x0, x19
   9cc44:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cc48:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cc4c:	17ffff91 	b	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cc50:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9cc54:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9cc58:	9129c021 	add	x1, x1, #0xa70
   9cc5c:	9126a000 	add	x0, x0, #0x9a8
   9cc60:	52802c62 	mov	w2, #0x163                 	// #355
   9cc64:	940014a7 	bl	a1f00 <assertion_failed>
   9cc68:	d503201f 	nop
   9cc6c:	d503201f 	nop

000000000009cc70 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   9cc70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cc74:	910003fd 	mov	x29, sp
   9cc78:	a90153f3 	stp	x19, x20, [sp, #16]
   9cc7c:	12001c34 	and	w20, w1, #0xff
   9cc80:	71007e9f 	cmp	w20, #0x1f
   9cc84:	a9025bf5 	stp	x21, x22, [sp, #32]
   9cc88:	540006e8 	b.hi	9cd64 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xf4>  // b.pmore
   9cc8c:	aa0203f5 	mov	x21, x2
   9cc90:	aa0003f3 	mov	x19, x0
   9cc94:	97ffff7f 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cc98:	370000e0 	tbnz	w0, #0, 9ccb4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x44>
   9cc9c:	52800014 	mov	w20, #0x0                   	// #0
   9cca0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cca4:	2a1403e0 	mov	w0, w20
   9cca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ccac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9ccb0:	d65f03c0 	ret
   9ccb4:	52810021 	mov	w1, #0x801                 	// #2049
   9ccb8:	aa1303e0 	mov	x0, x19
   9ccbc:	2a141834 	orr	w20, w1, w20, lsl #6
   9ccc0:	b9003ff4 	str	w20, [sp, #60]
   9ccc4:	97ffce6b 	bl	90670 <CUSBFunction::GetHost() const>
   9ccc8:	9100f3f6 	add	x22, sp, #0x3c
   9cccc:	aa0003f4 	mov	x20, x0
   9ccd0:	aa1303e0 	mov	x0, x19
   9ccd4:	97ffce5b 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9ccd8:	aa0003e1 	mov	x1, x0
   9ccdc:	aa1603e6 	mov	x6, x22
   9cce0:	aa1403e0 	mov	x0, x20
   9cce4:	52800087 	mov	w7, #0x4                   	// #4
   9cce8:	52802285 	mov	w5, #0x114                 	// #276
   9ccec:	52800004 	mov	w4, #0x0                   	// #0
   9ccf0:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9ccf4:	52800802 	mov	w2, #0x40                  	// #64
   9ccf8:	97ffdc66 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9ccfc:	37fffd00 	tbnz	w0, #31, 9cc9c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   9cd00:	aa1303e0 	mov	x0, x19
   9cd04:	97ffff63 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cd08:	12001c14 	and	w20, w0, #0xff
   9cd0c:	3607fc80 	tbz	w0, #0, 9cc9c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   9cd10:	aa1303e0 	mov	x0, x19
   9cd14:	97ffce57 	bl	90670 <CUSBFunction::GetHost() const>
   9cd18:	aa0003e1 	mov	x1, x0
   9cd1c:	aa1303e0 	mov	x0, x19
   9cd20:	aa0103f3 	mov	x19, x1
   9cd24:	97ffce47 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cd28:	aa0003e1 	mov	x1, x0
   9cd2c:	aa1603e6 	mov	x6, x22
   9cd30:	aa1303e0 	mov	x0, x19
   9cd34:	52800087 	mov	w7, #0x4                   	// #4
   9cd38:	52802305 	mov	w5, #0x118                 	// #280
   9cd3c:	52800004 	mov	w4, #0x0                   	// #0
   9cd40:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9cd44:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9cd48:	97ffdc52 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cd4c:	7100101f 	cmp	w0, #0x4
   9cd50:	54fffa61 	b.ne	9cc9c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>  // b.any
   9cd54:	b4000155 	cbz	x21, 9cd7c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x10c>
   9cd58:	b9403fe0 	ldr	w0, [sp, #60]
   9cd5c:	790002a0 	strh	w0, [x21]
   9cd60:	17ffffd0 	b	9cca0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   9cd64:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9cd68:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9cd6c:	9129c021 	add	x1, x1, #0xa70
   9cd70:	9126a000 	add	x0, x0, #0x9a8
   9cd74:	52802ec2 	mov	w2, #0x176                 	// #374
   9cd78:	94001462 	bl	a1f00 <assertion_failed>
   9cd7c:	b00000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9cd80:	b00000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9cd84:	9129c021 	add	x1, x1, #0xa70
   9cd88:	9126e000 	add	x0, x0, #0x9b8
   9cd8c:	528030c2 	mov	w2, #0x186                 	// #390
   9cd90:	9400145c 	bl	a1f00 <assertion_failed>
   9cd94:	d503201f 	nop
   9cd98:	d503201f 	nop
   9cd9c:	d503201f 	nop

000000000009cda0 <CSMSC951xDevice::IsLinkUp()>:
   9cda0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cda4:	910003fd 	mov	x29, sp
   9cda8:	a90153f3 	stp	x19, x20, [sp, #16]
   9cdac:	aa0003f3 	mov	x19, x0
   9cdb0:	97ffff38 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cdb4:	370000a0 	tbnz	w0, #0, 9cdc8 <CSMSC951xDevice::IsLinkUp()+0x28>
   9cdb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cdbc:	52800000 	mov	w0, #0x0                   	// #0
   9cdc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cdc4:	d65f03c0 	ret
   9cdc8:	52810821 	mov	w1, #0x841                 	// #2113
   9cdcc:	aa1303e0 	mov	x0, x19
   9cdd0:	f90013f5 	str	x21, [sp, #32]
   9cdd4:	9100f3f5 	add	x21, sp, #0x3c
   9cdd8:	b9003fe1 	str	w1, [sp, #60]
   9cddc:	97ffce25 	bl	90670 <CUSBFunction::GetHost() const>
   9cde0:	aa0003f4 	mov	x20, x0
   9cde4:	aa1303e0 	mov	x0, x19
   9cde8:	97ffce16 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cdec:	aa0003e1 	mov	x1, x0
   9cdf0:	aa1503e6 	mov	x6, x21
   9cdf4:	aa1403e0 	mov	x0, x20
   9cdf8:	52800087 	mov	w7, #0x4                   	// #4
   9cdfc:	52802285 	mov	w5, #0x114                 	// #276
   9ce00:	52800004 	mov	w4, #0x0                   	// #0
   9ce04:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9ce08:	52800802 	mov	w2, #0x40                  	// #64
   9ce0c:	97ffdc21 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9ce10:	37f80080 	tbnz	w0, #31, 9ce20 <CSMSC951xDevice::IsLinkUp()+0x80>
   9ce14:	aa1303e0 	mov	x0, x19
   9ce18:	97ffff1e 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9ce1c:	37000060 	tbnz	w0, #0, 9ce28 <CSMSC951xDevice::IsLinkUp()+0x88>
   9ce20:	f94013f5 	ldr	x21, [sp, #32]
   9ce24:	17ffffe5 	b	9cdb8 <CSMSC951xDevice::IsLinkUp()+0x18>
   9ce28:	aa1303e0 	mov	x0, x19
   9ce2c:	97ffce11 	bl	90670 <CUSBFunction::GetHost() const>
   9ce30:	aa0003e1 	mov	x1, x0
   9ce34:	aa1303e0 	mov	x0, x19
   9ce38:	aa0103f3 	mov	x19, x1
   9ce3c:	97ffce01 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9ce40:	aa0003e1 	mov	x1, x0
   9ce44:	aa1503e6 	mov	x6, x21
   9ce48:	aa1303e0 	mov	x0, x19
   9ce4c:	52800087 	mov	w7, #0x4                   	// #4
   9ce50:	52802305 	mov	w5, #0x118                 	// #280
   9ce54:	52800004 	mov	w4, #0x0                   	// #0
   9ce58:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9ce5c:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9ce60:	97ffdc0c 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9ce64:	7100101f 	cmp	w0, #0x4
   9ce68:	54fffdc1 	b.ne	9ce20 <CSMSC951xDevice::IsLinkUp()+0x80>  // b.any
   9ce6c:	b9403fe0 	ldr	w0, [sp, #60]
   9ce70:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ce74:	f94013f5 	ldr	x21, [sp, #32]
   9ce78:	d3420800 	ubfx	x0, x0, #2, #1
   9ce7c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9ce80:	d65f03c0 	ret
   9ce84:	d503201f 	nop
   9ce88:	d503201f 	nop
   9ce8c:	d503201f 	nop

000000000009ce90 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   9ce90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9ce94:	910003fd 	mov	x29, sp
   9ce98:	a90153f3 	stp	x19, x20, [sp, #16]
   9ce9c:	d100a013 	sub	x19, x0, #0x28
   9cea0:	aa1303e0 	mov	x0, x19
   9cea4:	97fffefb 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cea8:	370000a0 	tbnz	w0, #0, 9cebc <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x2c>
   9ceac:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ceb0:	52800000 	mov	w0, #0x0                   	// #0
   9ceb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9ceb8:	d65f03c0 	ret
   9cebc:	52810821 	mov	w1, #0x841                 	// #2113
   9cec0:	aa1303e0 	mov	x0, x19
   9cec4:	f90013f5 	str	x21, [sp, #32]
   9cec8:	9100f3f5 	add	x21, sp, #0x3c
   9cecc:	b9003fe1 	str	w1, [sp, #60]
   9ced0:	97ffcde8 	bl	90670 <CUSBFunction::GetHost() const>
   9ced4:	aa0003f4 	mov	x20, x0
   9ced8:	aa1303e0 	mov	x0, x19
   9cedc:	97ffcdd9 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cee0:	aa0003e1 	mov	x1, x0
   9cee4:	aa1503e6 	mov	x6, x21
   9cee8:	aa1403e0 	mov	x0, x20
   9ceec:	52800087 	mov	w7, #0x4                   	// #4
   9cef0:	52802285 	mov	w5, #0x114                 	// #276
   9cef4:	52800004 	mov	w4, #0x0                   	// #0
   9cef8:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9cefc:	52800802 	mov	w2, #0x40                  	// #64
   9cf00:	97ffdbe4 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cf04:	37f80080 	tbnz	w0, #31, 9cf14 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x84>
   9cf08:	aa1303e0 	mov	x0, x19
   9cf0c:	97fffee1 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cf10:	37000060 	tbnz	w0, #0, 9cf1c <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x8c>
   9cf14:	f94013f5 	ldr	x21, [sp, #32]
   9cf18:	17ffffe5 	b	9ceac <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   9cf1c:	aa1303e0 	mov	x0, x19
   9cf20:	97ffcdd4 	bl	90670 <CUSBFunction::GetHost() const>
   9cf24:	aa0003e1 	mov	x1, x0
   9cf28:	aa1303e0 	mov	x0, x19
   9cf2c:	aa0103f3 	mov	x19, x1
   9cf30:	97ffcdc4 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cf34:	aa0003e1 	mov	x1, x0
   9cf38:	aa1503e6 	mov	x6, x21
   9cf3c:	aa1303e0 	mov	x0, x19
   9cf40:	52800087 	mov	w7, #0x4                   	// #4
   9cf44:	52802305 	mov	w5, #0x118                 	// #280
   9cf48:	52800004 	mov	w4, #0x0                   	// #0
   9cf4c:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9cf50:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9cf54:	97ffdbcf 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cf58:	7100101f 	cmp	w0, #0x4
   9cf5c:	54fffdc1 	b.ne	9cf14 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x84>  // b.any
   9cf60:	b9403fe0 	ldr	w0, [sp, #60]
   9cf64:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cf68:	f94013f5 	ldr	x21, [sp, #32]
   9cf6c:	d3420800 	ubfx	x0, x0, #2, #1
   9cf70:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cf74:	d65f03c0 	ret
   9cf78:	d503201f 	nop
   9cf7c:	d503201f 	nop

000000000009cf80 <CSMSC951xDevice::GetLinkSpeed()>:
   9cf80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cf84:	910003fd 	mov	x29, sp
   9cf88:	a90153f3 	stp	x19, x20, [sp, #16]
   9cf8c:	aa0003f3 	mov	x19, x0
   9cf90:	97fffec0 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cf94:	370000a0 	tbnz	w0, #0, 9cfa8 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   9cf98:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cf9c:	528000c0 	mov	w0, #0x6                   	// #6
   9cfa0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cfa4:	d65f03c0 	ret
   9cfa8:	5281f821 	mov	w1, #0xfc1                 	// #4033
   9cfac:	aa1303e0 	mov	x0, x19
   9cfb0:	f90013f5 	str	x21, [sp, #32]
   9cfb4:	9100f3f5 	add	x21, sp, #0x3c
   9cfb8:	b9003fe1 	str	w1, [sp, #60]
   9cfbc:	97ffcdad 	bl	90670 <CUSBFunction::GetHost() const>
   9cfc0:	aa0003f4 	mov	x20, x0
   9cfc4:	aa1303e0 	mov	x0, x19
   9cfc8:	97ffcd9e 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9cfcc:	aa0003e1 	mov	x1, x0
   9cfd0:	aa1503e6 	mov	x6, x21
   9cfd4:	aa1403e0 	mov	x0, x20
   9cfd8:	52800087 	mov	w7, #0x4                   	// #4
   9cfdc:	52802285 	mov	w5, #0x114                 	// #276
   9cfe0:	52800004 	mov	w4, #0x0                   	// #0
   9cfe4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9cfe8:	52800802 	mov	w2, #0x40                  	// #64
   9cfec:	97ffdba9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9cff0:	37f80080 	tbnz	w0, #31, 9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>
   9cff4:	aa1303e0 	mov	x0, x19
   9cff8:	97fffea6 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9cffc:	37000060 	tbnz	w0, #0, 9d008 <CSMSC951xDevice::GetLinkSpeed()+0x88>
   9d000:	f94013f5 	ldr	x21, [sp, #32]
   9d004:	17ffffe5 	b	9cf98 <CSMSC951xDevice::GetLinkSpeed()+0x18>
   9d008:	aa1303e0 	mov	x0, x19
   9d00c:	97ffcd99 	bl	90670 <CUSBFunction::GetHost() const>
   9d010:	aa0003e1 	mov	x1, x0
   9d014:	aa1303e0 	mov	x0, x19
   9d018:	aa0103f3 	mov	x19, x1
   9d01c:	97ffcd89 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d020:	aa0003e1 	mov	x1, x0
   9d024:	aa1503e6 	mov	x6, x21
   9d028:	aa1303e0 	mov	x0, x19
   9d02c:	52800087 	mov	w7, #0x4                   	// #4
   9d030:	52802305 	mov	w5, #0x118                 	// #280
   9d034:	52800004 	mov	w4, #0x0                   	// #0
   9d038:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9d03c:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9d040:	97ffdb94 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d044:	7100101f 	cmp	w0, #0x4
   9d048:	54fffdc1 	b.ne	9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>  // b.any
   9d04c:	79407be0 	ldrh	w0, [sp, #60]
   9d050:	3667fd80 	tbz	w0, #12, 9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>
   9d054:	d3421001 	ubfx	x1, x0, #2, #3
   9d058:	7100143f 	cmp	w1, #0x5
   9d05c:	54000260 	b.eq	9d0a8 <CSMSC951xDevice::GetLinkSpeed()+0x128>  // b.none
   9d060:	54000168 	b.hi	9d08c <CSMSC951xDevice::GetLinkSpeed()+0x10c>  // b.pmore
   9d064:	7100043f 	cmp	w1, #0x1
   9d068:	52800000 	mov	w0, #0x0                   	// #0
   9d06c:	54000080 	b.eq	9d07c <CSMSC951xDevice::GetLinkSpeed()+0xfc>  // b.none
   9d070:	7100083f 	cmp	w1, #0x2
   9d074:	52800040 	mov	w0, #0x2                   	// #2
   9d078:	54fffc41 	b.ne	9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>  // b.any
   9d07c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d080:	f94013f5 	ldr	x21, [sp, #32]
   9d084:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d088:	d65f03c0 	ret
   9d08c:	7100183f 	cmp	w1, #0x6
   9d090:	54fffb81 	b.ne	9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>  // b.any
   9d094:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d098:	52800060 	mov	w0, #0x3                   	// #3
   9d09c:	f94013f5 	ldr	x21, [sp, #32]
   9d0a0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d0a4:	d65f03c0 	ret
   9d0a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d0ac:	52800020 	mov	w0, #0x1                   	// #1
   9d0b0:	f94013f5 	ldr	x21, [sp, #32]
   9d0b4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d0b8:	d65f03c0 	ret
   9d0bc:	d503201f 	nop

000000000009d0c0 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   9d0c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d0c4:	910003fd 	mov	x29, sp
   9d0c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d0cc:	d100a013 	sub	x19, x0, #0x28
   9d0d0:	aa1303e0 	mov	x0, x19
   9d0d4:	97fffe6f 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9d0d8:	370000a0 	tbnz	w0, #0, 9d0ec <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x2c>
   9d0dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d0e0:	528000c0 	mov	w0, #0x6                   	// #6
   9d0e4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d0e8:	d65f03c0 	ret
   9d0ec:	5281f821 	mov	w1, #0xfc1                 	// #4033
   9d0f0:	aa1303e0 	mov	x0, x19
   9d0f4:	f90013f5 	str	x21, [sp, #32]
   9d0f8:	9100f3f5 	add	x21, sp, #0x3c
   9d0fc:	b9003fe1 	str	w1, [sp, #60]
   9d100:	97ffcd5c 	bl	90670 <CUSBFunction::GetHost() const>
   9d104:	aa0003f4 	mov	x20, x0
   9d108:	aa1303e0 	mov	x0, x19
   9d10c:	97ffcd4d 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d110:	aa0003e1 	mov	x1, x0
   9d114:	aa1503e6 	mov	x6, x21
   9d118:	aa1403e0 	mov	x0, x20
   9d11c:	52800087 	mov	w7, #0x4                   	// #4
   9d120:	52802285 	mov	w5, #0x114                 	// #276
   9d124:	52800004 	mov	w4, #0x0                   	// #0
   9d128:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d12c:	52800802 	mov	w2, #0x40                  	// #64
   9d130:	97ffdb58 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d134:	37f800a0 	tbnz	w0, #31, 9d148 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x88>
   9d138:	aa1303e0 	mov	x0, x19
   9d13c:	97fffe55 	bl	9ca90 <CSMSC951xDevice::PHYWaitNotBusy()>
   9d140:	37000080 	tbnz	w0, #0, 9d150 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x90>
   9d144:	d503201f 	nop
   9d148:	f94013f5 	ldr	x21, [sp, #32]
   9d14c:	17ffffe4 	b	9d0dc <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   9d150:	aa1303e0 	mov	x0, x19
   9d154:	97ffcd47 	bl	90670 <CUSBFunction::GetHost() const>
   9d158:	aa0003e1 	mov	x1, x0
   9d15c:	aa1303e0 	mov	x0, x19
   9d160:	aa0103f3 	mov	x19, x1
   9d164:	97ffcd37 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d168:	aa0003e1 	mov	x1, x0
   9d16c:	aa1503e6 	mov	x6, x21
   9d170:	aa1303e0 	mov	x0, x19
   9d174:	52800087 	mov	w7, #0x4                   	// #4
   9d178:	52802305 	mov	w5, #0x118                 	// #280
   9d17c:	52800004 	mov	w4, #0x0                   	// #0
   9d180:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9d184:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9d188:	97ffdb42 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d18c:	7100101f 	cmp	w0, #0x4
   9d190:	54fffdc1 	b.ne	9d148 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x88>  // b.any
   9d194:	79407be0 	ldrh	w0, [sp, #60]
   9d198:	3667fd80 	tbz	w0, #12, 9d148 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x88>
   9d19c:	d3421001 	ubfx	x1, x0, #2, #3
   9d1a0:	7100143f 	cmp	w1, #0x5
   9d1a4:	54000260 	b.eq	9d1f0 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x130>  // b.none
   9d1a8:	54000168 	b.hi	9d1d4 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x114>  // b.pmore
   9d1ac:	7100043f 	cmp	w1, #0x1
   9d1b0:	52800000 	mov	w0, #0x0                   	// #0
   9d1b4:	54000080 	b.eq	9d1c4 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x104>  // b.none
   9d1b8:	7100083f 	cmp	w1, #0x2
   9d1bc:	52800040 	mov	w0, #0x2                   	// #2
   9d1c0:	54fffc41 	b.ne	9d148 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x88>  // b.any
   9d1c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d1c8:	f94013f5 	ldr	x21, [sp, #32]
   9d1cc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d1d0:	d65f03c0 	ret
   9d1d4:	7100183f 	cmp	w1, #0x6
   9d1d8:	54fffb81 	b.ne	9d148 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x88>  // b.any
   9d1dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d1e0:	52800060 	mov	w0, #0x3                   	// #3
   9d1e4:	f94013f5 	ldr	x21, [sp, #32]
   9d1e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d1ec:	d65f03c0 	ret
   9d1f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d1f4:	52800020 	mov	w0, #0x1                   	// #1
   9d1f8:	f94013f5 	ldr	x21, [sp, #32]
   9d1fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d200:	d65f03c0 	ret
   9d204:	d503201f 	nop
   9d208:	d503201f 	nop
   9d20c:	d503201f 	nop

000000000009d210 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   9d210:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d214:	910003fd 	mov	x29, sp
   9d218:	a90153f3 	stp	x19, x20, [sp, #16]
   9d21c:	2a0103f4 	mov	w20, w1
   9d220:	f90013f5 	str	x21, [sp, #32]
   9d224:	aa0003f5 	mov	x21, x0
   9d228:	b9003fe2 	str	w2, [sp, #60]
   9d22c:	97ffcd11 	bl	90670 <CUSBFunction::GetHost() const>
   9d230:	aa0003f3 	mov	x19, x0
   9d234:	aa1503e0 	mov	x0, x21
   9d238:	97ffcd02 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d23c:	aa0003e1 	mov	x1, x0
   9d240:	2a1403e5 	mov	w5, w20
   9d244:	9100f3e6 	add	x6, sp, #0x3c
   9d248:	aa1303e0 	mov	x0, x19
   9d24c:	52800087 	mov	w7, #0x4                   	// #4
   9d250:	52800004 	mov	w4, #0x0                   	// #0
   9d254:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d258:	52800802 	mov	w2, #0x40                  	// #64
   9d25c:	97ffdb0d 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d260:	2a2003e0 	mvn	w0, w0
   9d264:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d268:	531f7c00 	lsr	w0, w0, #31
   9d26c:	f94013f5 	ldr	x21, [sp, #32]
   9d270:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d274:	d65f03c0 	ret
   9d278:	d503201f 	nop
   9d27c:	d503201f 	nop

000000000009d280 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   9d280:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9d284:	910003fd 	mov	x29, sp
   9d288:	a90153f3 	stp	x19, x20, [sp, #16]
   9d28c:	2a0103f4 	mov	w20, w1
   9d290:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d294:	aa0203f5 	mov	x21, x2
   9d298:	aa0003f6 	mov	x22, x0
   9d29c:	97ffccf5 	bl	90670 <CUSBFunction::GetHost() const>
   9d2a0:	aa0003f3 	mov	x19, x0
   9d2a4:	aa1603e0 	mov	x0, x22
   9d2a8:	97ffcce6 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d2ac:	aa1503e6 	mov	x6, x21
   9d2b0:	aa0003e1 	mov	x1, x0
   9d2b4:	2a1403e5 	mov	w5, w20
   9d2b8:	aa1303e0 	mov	x0, x19
   9d2bc:	52800087 	mov	w7, #0x4                   	// #4
   9d2c0:	52800004 	mov	w4, #0x0                   	// #0
   9d2c4:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9d2c8:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9d2cc:	97ffdaf1 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d2d0:	7100101f 	cmp	w0, #0x4
   9d2d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d2d8:	1a9f17e0 	cset	w0, eq	// eq = none
   9d2dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d2e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9d2e4:	d65f03c0 	ret
   9d2e8:	d503201f 	nop
   9d2ec:	d503201f 	nop

000000000009d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   9d2f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d2f4:	910003fd 	mov	x29, sp
   9d2f8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d2fc:	2a0203f4 	mov	w20, w2
   9d300:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d304:	aa0103f6 	mov	x22, x1
   9d308:	aa0003f5 	mov	x21, x0
   9d30c:	97ffccd9 	bl	90670 <CUSBFunction::GetHost() const>
   9d310:	aa0003f3 	mov	x19, x0
   9d314:	aa1503e0 	mov	x0, x21
   9d318:	97ffccca 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d31c:	9100f3e6 	add	x6, sp, #0x3c
   9d320:	aa0003e1 	mov	x1, x0
   9d324:	2a1403e5 	mov	w5, w20
   9d328:	aa1303e0 	mov	x0, x19
   9d32c:	52800087 	mov	w7, #0x4                   	// #4
   9d330:	52800004 	mov	w4, #0x0                   	// #0
   9d334:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   9d338:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9d33c:	97ffdad5 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d340:	7100101f 	cmp	w0, #0x4
   9d344:	540001e1 	b.ne	9d380 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x90>  // b.any
   9d348:	2a0003f3 	mov	w19, w0
   9d34c:	94001a29 	bl	a3bf0 <CLogger::Get()>
   9d350:	b9403fe4 	ldr	w4, [sp, #60]
   9d354:	aa1603e5 	mov	x5, x22
   9d358:	2a1303e2 	mov	w2, w19
   9d35c:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d360:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9d364:	912a8063 	add	x3, x3, #0xaa0
   9d368:	910b6021 	add	x1, x1, #0x2d8
   9d36c:	94001c15 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d370:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d374:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d378:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d37c:	d65f03c0 	ret
   9d380:	94001a1c 	bl	a3bf0 <CLogger::Get()>
   9d384:	2a1403e4 	mov	w4, w20
   9d388:	52800022 	mov	w2, #0x1                   	// #1
   9d38c:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d390:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9d394:	9125e063 	add	x3, x3, #0x978
   9d398:	910b6021 	add	x1, x1, #0x2d8
   9d39c:	94001c09 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d3a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d3a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d3a8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d3ac:	d65f03c0 	ret

000000000009d3b0 <CSMSC951xDevice::DumpRegs()>:
   9d3b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d3b4:	52800002 	mov	w2, #0x0                   	// #0
   9d3b8:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d3bc:	912aa021 	add	x1, x1, #0xaa8
   9d3c0:	910003fd 	mov	x29, sp
   9d3c4:	f9000bf3 	str	x19, [sp, #16]
   9d3c8:	aa0003f3 	mov	x19, x0
   9d3cc:	97ffffc9 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d3d0:	aa1303e0 	mov	x0, x19
   9d3d4:	52800102 	mov	w2, #0x8                   	// #8
   9d3d8:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d3dc:	912ac021 	add	x1, x1, #0xab0
   9d3e0:	97ffffc4 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d3e4:	aa1303e0 	mov	x0, x19
   9d3e8:	52800182 	mov	w2, #0xc                   	// #12
   9d3ec:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d3f0:	912ae021 	add	x1, x1, #0xab8
   9d3f4:	97ffffbf 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d3f8:	aa1303e0 	mov	x0, x19
   9d3fc:	52800202 	mov	w2, #0x10                  	// #16
   9d400:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d404:	912b0021 	add	x1, x1, #0xac0
   9d408:	97ffffba 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d40c:	aa1303e0 	mov	x0, x19
   9d410:	52800282 	mov	w2, #0x14                  	// #20
   9d414:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d418:	912b2021 	add	x1, x1, #0xac8
   9d41c:	97ffffb5 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d420:	aa1303e0 	mov	x0, x19
   9d424:	52800302 	mov	w2, #0x18                  	// #24
   9d428:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d42c:	912b4021 	add	x1, x1, #0xad0
   9d430:	97ffffb0 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d434:	aa1303e0 	mov	x0, x19
   9d438:	52800402 	mov	w2, #0x20                  	// #32
   9d43c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d440:	912b8021 	add	x1, x1, #0xae0
   9d444:	97ffffab 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d448:	aa1303e0 	mov	x0, x19
   9d44c:	52800482 	mov	w2, #0x24                  	// #36
   9d450:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d454:	912ba021 	add	x1, x1, #0xae8
   9d458:	97ffffa6 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d45c:	aa1303e0 	mov	x0, x19
   9d460:	52800502 	mov	w2, #0x28                  	// #40
   9d464:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d468:	912be021 	add	x1, x1, #0xaf8
   9d46c:	97ffffa1 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d470:	aa1303e0 	mov	x0, x19
   9d474:	52800582 	mov	w2, #0x2c                  	// #44
   9d478:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d47c:	912c2021 	add	x1, x1, #0xb08
   9d480:	97ffff9c 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d484:	aa1303e0 	mov	x0, x19
   9d488:	52800702 	mov	w2, #0x38                  	// #56
   9d48c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d490:	912c4021 	add	x1, x1, #0xb10
   9d494:	97ffff97 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d498:	aa1303e0 	mov	x0, x19
   9d49c:	52800d02 	mov	w2, #0x68                  	// #104
   9d4a0:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d4a4:	912c8021 	add	x1, x1, #0xb20
   9d4a8:	97ffff92 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d4ac:	aa1303e0 	mov	x0, x19
   9d4b0:	52800d82 	mov	w2, #0x6c                  	// #108
   9d4b4:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d4b8:	912cc021 	add	x1, x1, #0xb30
   9d4bc:	97ffff8d 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d4c0:	aa1303e0 	mov	x0, x19
   9d4c4:	52802002 	mov	w2, #0x100                 	// #256
   9d4c8:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d4cc:	912d0021 	add	x1, x1, #0xb40
   9d4d0:	97ffff88 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d4d4:	aa1303e0 	mov	x0, x19
   9d4d8:	52802082 	mov	w2, #0x104                 	// #260
   9d4dc:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d4e0:	912d2021 	add	x1, x1, #0xb48
   9d4e4:	97ffff83 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d4e8:	aa1303e0 	mov	x0, x19
   9d4ec:	52802102 	mov	w2, #0x108                 	// #264
   9d4f0:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d4f4:	912d4021 	add	x1, x1, #0xb50
   9d4f8:	97ffff7e 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d4fc:	aa1303e0 	mov	x0, x19
   9d500:	52802182 	mov	w2, #0x10c                 	// #268
   9d504:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d508:	912d6021 	add	x1, x1, #0xb58
   9d50c:	97ffff79 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d510:	aa1303e0 	mov	x0, x19
   9d514:	52802202 	mov	w2, #0x110                 	// #272
   9d518:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d51c:	912d8021 	add	x1, x1, #0xb60
   9d520:	97ffff74 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d524:	aa1303e0 	mov	x0, x19
   9d528:	52802382 	mov	w2, #0x11c                 	// #284
   9d52c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d530:	912da021 	add	x1, x1, #0xb68
   9d534:	97ffff6f 	bl	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d538:	aa1303e0 	mov	x0, x19
   9d53c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9d540:	f9400bf3 	ldr	x19, [sp, #16]
   9d544:	912dc021 	add	x1, x1, #0xb70
   9d548:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d54c:	52802582 	mov	w2, #0x12c                 	// #300
   9d550:	17ffff68 	b	9d2f0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9d554:	d503201f 	nop
   9d558:	d503201f 	nop
   9d55c:	d503201f 	nop

000000000009d560 <CSMSC951xDevice::Configure()>:
   9d560:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   9d564:	52800001 	mov	w1, #0x0                   	// #0
   9d568:	910003fd 	mov	x29, sp
   9d56c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d570:	910183f5 	add	x21, sp, #0x60
   9d574:	a90153f3 	stp	x19, x20, [sp, #16]
   9d578:	aa0003f4 	mov	x20, x0
   9d57c:	aa1503e0 	mov	x0, x21
   9d580:	94001288 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9d584:	52800061 	mov	w1, #0x3                   	// #3
   9d588:	72a00021 	movk	w1, #0x1, lsl #16
   9d58c:	9101a3e2 	add	x2, sp, #0x68
   9d590:	aa1503e0 	mov	x0, x21
   9d594:	52800004 	mov	w4, #0x0                   	// #0
   9d598:	52800283 	mov	w3, #0x14                  	// #20
   9d59c:	940012e1 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9d5a0:	36001560 	tbz	w0, #0, 9d84c <CSMSC951xDevice::Configure()+0x2ec>
   9d5a4:	9101d3e1 	add	x1, sp, #0x74
   9d5a8:	a90363f7 	stp	x23, x24, [sp, #48]
   9d5ac:	91010297 	add	x23, x20, #0x40
   9d5b0:	910203f6 	add	x22, sp, #0x80
   9d5b4:	aa1703e0 	mov	x0, x23
   9d5b8:	a9046bf9 	stp	x25, x26, [sp, #64]
   9d5bc:	94003861 	bl	ab740 <CMACAddress::Set(unsigned char const*)>
   9d5c0:	aa1603e0 	mov	x0, x22
   9d5c4:	94002ad7 	bl	a8120 <CString::CString()>
   9d5c8:	f00000d8 	adrp	x24, b8000 <FromUmsd+0x60>
   9d5cc:	910b6319 	add	x25, x24, #0x2d8
   9d5d0:	aa1603e1 	mov	x1, x22
   9d5d4:	aa1703e0 	mov	x0, x23
   9d5d8:	940038be 	bl	ab8d0 <CMACAddress::Format(CString*) const>
   9d5dc:	94001985 	bl	a3bf0 <CLogger::Get()>
   9d5e0:	aa0003f3 	mov	x19, x0
   9d5e4:	aa1603e0 	mov	x0, x22
   9d5e8:	94002b12 	bl	a8230 <CString::operator char const*() const>
   9d5ec:	aa1903e1 	mov	x1, x25
   9d5f0:	aa0003e4 	mov	x4, x0
   9d5f4:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d5f8:	9127c063 	add	x3, x3, #0x9f0
   9d5fc:	52800082 	mov	w2, #0x4                   	// #4
   9d600:	aa1303e0 	mov	x0, x19
   9d604:	94001b6f 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d608:	aa1403e0 	mov	x0, x20
   9d60c:	97ffcbf5 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   9d610:	12001c00 	and	w0, w0, #0xff
   9d614:	71000c1f 	cmp	w0, #0x3
   9d618:	54000280 	b.eq	9d668 <CSMSC951xDevice::Configure()+0x108>  // b.none
   9d61c:	aa1903e1 	mov	x1, x25
   9d620:	aa1403e0 	mov	x0, x20
   9d624:	97ffcc2b 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9d628:	52800013 	mov	w19, #0x0                   	// #0
   9d62c:	aa1603e0 	mov	x0, x22
   9d630:	94002a80 	bl	a8030 <CString::~CString()>
   9d634:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d638:	aa1503e0 	mov	x0, x21
   9d63c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9d640:	9400125c 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9d644:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d648:	2a1303e0 	mov	w0, w19
   9d64c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d650:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9d654:	d65f03c0 	ret
   9d658:	39400e61 	ldrb	w1, [x19, #3]
   9d65c:	12001421 	and	w1, w1, #0x3f
   9d660:	7100083f 	cmp	w1, #0x2
   9d664:	54000d60 	b.eq	9d810 <CSMSC951xDevice::Configure()+0x2b0>  // b.none
   9d668:	aa1403e0 	mov	x0, x20
   9d66c:	528000a1 	mov	w1, #0x5                   	// #5
   9d670:	97ffcc0c 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9d674:	aa0003f3 	mov	x19, x0
   9d678:	b5ffff00 	cbnz	x0, 9d658 <CSMSC951xDevice::Configure()+0xf8>
   9d67c:	f9401a80 	ldr	x0, [x20, #48]
   9d680:	b4001120 	cbz	x0, 9d8a4 <CSMSC951xDevice::Configure()+0x344>
   9d684:	f9401e80 	ldr	x0, [x20, #56]
   9d688:	b40010e0 	cbz	x0, 9d8a4 <CSMSC951xDevice::Configure()+0x344>
   9d68c:	aa1403e0 	mov	x0, x20
   9d690:	97ffcb10 	bl	902d0 <CUSBFunction::Configure()>
   9d694:	12001c13 	and	w19, w0, #0xff
   9d698:	36000f80 	tbz	w0, #0, 9d888 <CSMSC951xDevice::Configure()+0x328>
   9d69c:	aa1703e0 	mov	x0, x23
   9d6a0:	910163e1 	add	x1, sp, #0x58
   9d6a4:	94003857 	bl	ab800 <CMACAddress::CopyTo(unsigned char*) const>
   9d6a8:	b9405bfa 	ldr	w26, [sp, #88]
   9d6ac:	7940bbe1 	ldrh	w1, [sp, #92]
   9d6b0:	aa1403e0 	mov	x0, x20
   9d6b4:	b90057e1 	str	w1, [sp, #84]
   9d6b8:	910153f9 	add	x25, sp, #0x54
   9d6bc:	97ffcbed 	bl	90670 <CUSBFunction::GetHost() const>
   9d6c0:	aa0003f7 	mov	x23, x0
   9d6c4:	aa1403e0 	mov	x0, x20
   9d6c8:	97ffcbde 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d6cc:	aa1903e6 	mov	x6, x25
   9d6d0:	aa0003e1 	mov	x1, x0
   9d6d4:	52800087 	mov	w7, #0x4                   	// #4
   9d6d8:	aa1703e0 	mov	x0, x23
   9d6dc:	52802085 	mov	w5, #0x104                 	// #260
   9d6e0:	52800004 	mov	w4, #0x0                   	// #0
   9d6e4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d6e8:	52800802 	mov	w2, #0x40                  	// #64
   9d6ec:	97ffd9e9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d6f0:	37f80fa0 	tbnz	w0, #31, 9d8e4 <CSMSC951xDevice::Configure()+0x384>
   9d6f4:	aa1403e0 	mov	x0, x20
   9d6f8:	b90057fa 	str	w26, [sp, #84]
   9d6fc:	97ffcbdd 	bl	90670 <CUSBFunction::GetHost() const>
   9d700:	aa0003f7 	mov	x23, x0
   9d704:	aa1403e0 	mov	x0, x20
   9d708:	97ffcbce 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d70c:	aa1903e6 	mov	x6, x25
   9d710:	aa0003e1 	mov	x1, x0
   9d714:	52800087 	mov	w7, #0x4                   	// #4
   9d718:	aa1703e0 	mov	x0, x23
   9d71c:	52802105 	mov	w5, #0x108                 	// #264
   9d720:	52800004 	mov	w4, #0x0                   	// #0
   9d724:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d728:	52800802 	mov	w2, #0x40                  	// #64
   9d72c:	97ffd9d9 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d730:	37f80da0 	tbnz	w0, #31, 9d8e4 <CSMSC951xDevice::Configure()+0x384>
   9d734:	52a02221 	mov	w1, #0x1110000             	// #17891328
   9d738:	aa1403e0 	mov	x0, x20
   9d73c:	b90057e1 	str	w1, [sp, #84]
   9d740:	97ffcbcc 	bl	90670 <CUSBFunction::GetHost() const>
   9d744:	aa0003f7 	mov	x23, x0
   9d748:	aa1403e0 	mov	x0, x20
   9d74c:	97ffcbbd 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d750:	aa1903e6 	mov	x6, x25
   9d754:	aa0003e1 	mov	x1, x0
   9d758:	52800087 	mov	w7, #0x4                   	// #4
   9d75c:	aa1703e0 	mov	x0, x23
   9d760:	52800485 	mov	w5, #0x24                  	// #36
   9d764:	52800004 	mov	w4, #0x0                   	// #0
   9d768:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d76c:	52800802 	mov	w2, #0x40                  	// #64
   9d770:	97ffd9c8 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d774:	37f80c60 	tbnz	w0, #31, 9d900 <CSMSC951xDevice::Configure()+0x3a0>
   9d778:	52800181 	mov	w1, #0xc                   	// #12
   9d77c:	72a01001 	movk	w1, #0x80, lsl #16
   9d780:	aa1403e0 	mov	x0, x20
   9d784:	b90057e1 	str	w1, [sp, #84]
   9d788:	97ffcbba 	bl	90670 <CUSBFunction::GetHost() const>
   9d78c:	aa0003f7 	mov	x23, x0
   9d790:	aa1403e0 	mov	x0, x20
   9d794:	97ffcbab 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d798:	aa1903e6 	mov	x6, x25
   9d79c:	aa0003e1 	mov	x1, x0
   9d7a0:	52800087 	mov	w7, #0x4                   	// #4
   9d7a4:	aa1703e0 	mov	x0, x23
   9d7a8:	52802005 	mov	w5, #0x100                 	// #256
   9d7ac:	52800004 	mov	w4, #0x0                   	// #0
   9d7b0:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d7b4:	52800802 	mov	w2, #0x40                  	// #64
   9d7b8:	97ffd9b6 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d7bc:	37f80a20 	tbnz	w0, #31, 9d900 <CSMSC951xDevice::Configure()+0x3a0>
   9d7c0:	5280009a 	mov	w26, #0x4                   	// #4
   9d7c4:	aa1403e0 	mov	x0, x20
   9d7c8:	b90057fa 	str	w26, [sp, #84]
   9d7cc:	97ffcba9 	bl	90670 <CUSBFunction::GetHost() const>
   9d7d0:	aa0003f7 	mov	x23, x0
   9d7d4:	aa1403e0 	mov	x0, x20
   9d7d8:	97ffcb9a 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9d7dc:	aa0003e1 	mov	x1, x0
   9d7e0:	2a1a03e7 	mov	w7, w26
   9d7e4:	aa1903e6 	mov	x6, x25
   9d7e8:	aa1703e0 	mov	x0, x23
   9d7ec:	52800205 	mov	w5, #0x10                  	// #16
   9d7f0:	52800004 	mov	w4, #0x0                   	// #0
   9d7f4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   9d7f8:	52800802 	mov	w2, #0x40                  	// #64
   9d7fc:	97ffd9a5 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9d800:	37f80800 	tbnz	w0, #31, 9d900 <CSMSC951xDevice::Configure()+0x3a0>
   9d804:	9100a280 	add	x0, x20, #0x28
   9d808:	94003852 	bl	ab950 <CNetDevice::AddNetDevice()>
   9d80c:	17ffff88 	b	9d62c <CSMSC951xDevice::Configure()+0xcc>
   9d810:	39c00a61 	ldrsb	w1, [x19, #2]
   9d814:	d2800400 	mov	x0, #0x20                  	// #32
   9d818:	37f804e1 	tbnz	w1, #31, 9d8b4 <CSMSC951xDevice::Configure()+0x354>
   9d81c:	f9401e81 	ldr	x1, [x20, #56]
   9d820:	b5000421 	cbnz	x1, 9d8a4 <CSMSC951xDevice::Configure()+0x344>
   9d824:	940038c3 	bl	abb30 <operator new(unsigned long)>
   9d828:	aa0003f9 	mov	x25, x0
   9d82c:	aa1403e0 	mov	x0, x20
   9d830:	97ffcb78 	bl	90610 <CUSBFunction::GetDevice() const>
   9d834:	aa1303e2 	mov	x2, x19
   9d838:	aa0003e1 	mov	x1, x0
   9d83c:	aa1903e0 	mov	x0, x25
   9d840:	97ffc95c 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9d844:	f9001e99 	str	x25, [x20, #56]
   9d848:	17ffff88 	b	9d668 <CSMSC951xDevice::Configure()+0x108>
   9d84c:	12001c13 	and	w19, w0, #0xff
   9d850:	940018e8 	bl	a3bf0 <CLogger::Get()>
   9d854:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d858:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9d85c:	912de063 	add	x3, x3, #0xb78
   9d860:	910b6021 	add	x1, x1, #0x2d8
   9d864:	52800022 	mov	w2, #0x1                   	// #1
   9d868:	94001ad6 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d86c:	aa1503e0 	mov	x0, x21
   9d870:	940011d0 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9d874:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d878:	2a1303e0 	mov	w0, w19
   9d87c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d880:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   9d884:	d65f03c0 	ret
   9d888:	940018da 	bl	a3bf0 <CLogger::Get()>
   9d88c:	910b6301 	add	x1, x24, #0x2d8
   9d890:	f00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9d894:	91182063 	add	x3, x3, #0x608
   9d898:	52800022 	mov	w2, #0x1                   	// #1
   9d89c:	94001ac9 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d8a0:	17ffff62 	b	9d628 <CSMSC951xDevice::Configure()+0xc8>
   9d8a4:	910b6301 	add	x1, x24, #0x2d8
   9d8a8:	aa1403e0 	mov	x0, x20
   9d8ac:	97ffcb89 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9d8b0:	17ffff5e 	b	9d628 <CSMSC951xDevice::Configure()+0xc8>
   9d8b4:	f9401a81 	ldr	x1, [x20, #48]
   9d8b8:	b5ffff61 	cbnz	x1, 9d8a4 <CSMSC951xDevice::Configure()+0x344>
   9d8bc:	9400389d 	bl	abb30 <operator new(unsigned long)>
   9d8c0:	aa0003f9 	mov	x25, x0
   9d8c4:	aa1403e0 	mov	x0, x20
   9d8c8:	97ffcb52 	bl	90610 <CUSBFunction::GetDevice() const>
   9d8cc:	aa1303e2 	mov	x2, x19
   9d8d0:	aa0003e1 	mov	x1, x0
   9d8d4:	aa1903e0 	mov	x0, x25
   9d8d8:	97ffc936 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9d8dc:	f9001a99 	str	x25, [x20, #48]
   9d8e0:	17ffff62 	b	9d668 <CSMSC951xDevice::Configure()+0x108>
   9d8e4:	940018c3 	bl	a3bf0 <CLogger::Get()>
   9d8e8:	910b6301 	add	x1, x24, #0x2d8
   9d8ec:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d8f0:	912e4063 	add	x3, x3, #0xb90
   9d8f4:	52800022 	mov	w2, #0x1                   	// #1
   9d8f8:	94001ab2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d8fc:	17ffff4b 	b	9d628 <CSMSC951xDevice::Configure()+0xc8>
   9d900:	940018bc 	bl	a3bf0 <CLogger::Get()>
   9d904:	910b6301 	add	x1, x24, #0x2d8
   9d908:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9d90c:	912ea063 	add	x3, x3, #0xba8
   9d910:	52800022 	mov	w2, #0x1                   	// #1
   9d914:	94001aab 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d918:	17ffff44 	b	9d628 <CSMSC951xDevice::Configure()+0xc8>
   9d91c:	00000000 	udf	#0

000000000009d920 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   9d920:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d924:	b0000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9d928:	91072021 	add	x1, x1, #0x1c8
   9d92c:	910003fd 	mov	x29, sp
   9d930:	a90153f3 	stp	x19, x20, [sp, #16]
   9d934:	aa0003f3 	mov	x19, x0
   9d938:	b9405000 	ldr	w0, [x0, #80]
   9d93c:	f9000261 	str	x1, [x19]
   9d940:	f900267f 	str	xzr, [x19, #72]
   9d944:	35000420 	cbnz	w0, 9d9c8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa8>
   9d948:	f9402260 	ldr	x0, [x19, #64]
   9d94c:	b4000040 	cbz	x0, 9d954 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x34>
   9d950:	94003890 	bl	abb90 <operator delete[](void*)>
   9d954:	f9401e74 	ldr	x20, [x19, #56]
   9d958:	f900227f 	str	xzr, [x19, #64]
   9d95c:	b40000d4 	cbz	x20, 9d974 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x54>
   9d960:	aa1403e0 	mov	x0, x20
   9d964:	97ffc99f 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9d968:	aa1403e0 	mov	x0, x20
   9d96c:	d2800401 	mov	x1, #0x20                  	// #32
   9d970:	94003890 	bl	abbb0 <operator delete(void*, unsigned long)>
   9d974:	f9401a74 	ldr	x20, [x19, #48]
   9d978:	f9001e7f 	str	xzr, [x19, #56]
   9d97c:	b40000d4 	cbz	x20, 9d994 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x74>
   9d980:	aa1403e0 	mov	x0, x20
   9d984:	97ffc997 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9d988:	aa1403e0 	mov	x0, x20
   9d98c:	d2800401 	mov	x1, #0x20                  	// #32
   9d990:	94003888 	bl	abbb0 <operator delete(void*, unsigned long)>
   9d994:	f9401674 	ldr	x20, [x19, #40]
   9d998:	f9001a7f 	str	xzr, [x19, #48]
   9d99c:	b40000d4 	cbz	x20, 9d9b4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x94>
   9d9a0:	aa1403e0 	mov	x0, x20
   9d9a4:	97ffc98f 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9d9a8:	aa1403e0 	mov	x0, x20
   9d9ac:	d2800401 	mov	x1, #0x20                  	// #32
   9d9b0:	94003880 	bl	abbb0 <operator delete(void*, unsigned long)>
   9d9b4:	f900167f 	str	xzr, [x19, #40]
   9d9b8:	aa1303e0 	mov	x0, x19
   9d9bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d9c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d9c4:	17ffca0b 	b	901f0 <CUSBFunction::~CUSBFunction()>
   9d9c8:	9400153a 	bl	a2eb0 <CDeviceNameService::Get()>
   9d9cc:	b9405262 	ldr	w2, [x19, #80]
   9d9d0:	52800003 	mov	w3, #0x0                   	// #0
   9d9d4:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9d9d8:	910ba021 	add	x1, x1, #0x2e8
   9d9dc:	94001565 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9d9e0:	b9405261 	ldr	w1, [x19, #80]
   9d9e4:	b0000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9d9e8:	91306000 	add	x0, x0, #0xc18
   9d9ec:	94003a19 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   9d9f0:	17ffffd6 	b	9d948 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   9d9f4:	d503201f 	nop
   9d9f8:	d503201f 	nop
   9d9fc:	d503201f 	nop

000000000009da00 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   9da00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9da04:	910003fd 	mov	x29, sp
   9da08:	f9000bf3 	str	x19, [sp, #16]
   9da0c:	aa0003f3 	mov	x19, x0
   9da10:	97ffffc4 	bl	9d920 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   9da14:	aa1303e0 	mov	x0, x19
   9da18:	d2800b01 	mov	x1, #0x58                  	// #88
   9da1c:	f9400bf3 	ldr	x19, [sp, #16]
   9da20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9da24:	14003863 	b	abbb0 <operator delete(void*, unsigned long)>
   9da28:	d503201f 	nop
   9da2c:	d503201f 	nop

000000000009da30 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   9da30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9da34:	910003fd 	mov	x29, sp
   9da38:	f9000bf3 	str	x19, [sp, #16]
   9da3c:	aa0003f3 	mov	x19, x0
   9da40:	97ffca90 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9da44:	b0000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9da48:	91072000 	add	x0, x0, #0x1c8
   9da4c:	f9000260 	str	x0, [x19]
   9da50:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   9da54:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   9da58:	f900267f 	str	xzr, [x19, #72]
   9da5c:	b900527f 	str	wzr, [x19, #80]
   9da60:	f9400bf3 	ldr	x19, [sp, #16]
   9da64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9da68:	d65f03c0 	ret
   9da6c:	d503201f 	nop

000000000009da70 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   9da70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9da74:	910003fd 	mov	x29, sp
   9da78:	a90153f3 	stp	x19, x20, [sp, #16]
   9da7c:	aa0103f4 	mov	x20, x1
   9da80:	a9025bf5 	stp	x21, x22, [sp, #32]
   9da84:	2a0203f5 	mov	w21, w2
   9da88:	aa0003f6 	mov	x22, x0
   9da8c:	97ffcaf9 	bl	90670 <CUSBFunction::GetHost() const>
   9da90:	aa0003f3 	mov	x19, x0
   9da94:	aa1603e0 	mov	x0, x22
   9da98:	97ffcaea 	bl	90640 <CUSBFunction::GetEndpoint0() const>
   9da9c:	2a1503e7 	mov	w7, w21
   9daa0:	aa0003e1 	mov	x1, x0
   9daa4:	aa1403e6 	mov	x6, x20
   9daa8:	aa1303e0 	mov	x0, x19
   9daac:	52800005 	mov	w5, #0x0                   	// #0
   9dab0:	52800004 	mov	w4, #0x0                   	// #0
   9dab4:	52800003 	mov	w3, #0x0                   	// #0
   9dab8:	52800402 	mov	w2, #0x20                  	// #32
   9dabc:	97ffd8f5 	bl	93e90 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9dac0:	2a2003e0 	mvn	w0, w0
   9dac4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dac8:	531f7c00 	lsr	w0, w0, #31
   9dacc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dad0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dad4:	d65f03c0 	ret
   9dad8:	d503201f 	nop
   9dadc:	d503201f 	nop

000000000009dae0 <CUSBBluetoothDevice::StartRequest()>:
   9dae0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dae4:	910003fd 	mov	x29, sp
   9dae8:	a90153f3 	stp	x19, x20, [sp, #16]
   9daec:	aa0003f3 	mov	x19, x0
   9daf0:	f9401400 	ldr	x0, [x0, #40]
   9daf4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9daf8:	b4000420 	cbz	x0, 9db7c <CUSBBluetoothDevice::StartRequest()+0x9c>
   9dafc:	f9402260 	ldr	x0, [x19, #64]
   9db00:	b40004a0 	cbz	x0, 9db94 <CUSBBluetoothDevice::StartRequest()+0xb4>
   9db04:	d2801200 	mov	x0, #0x90                  	// #144
   9db08:	97ffe582 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   9db0c:	f9401675 	ldr	x21, [x19, #40]
   9db10:	aa0003f4 	mov	x20, x0
   9db14:	f9402276 	ldr	x22, [x19, #64]
   9db18:	aa1503e0 	mov	x0, x21
   9db1c:	97ffc951 	bl	90060 <CUSBEndpoint::GetMaxPacketSize() const>
   9db20:	2a0003e3 	mov	w3, w0
   9db24:	d2800004 	mov	x4, #0x0                   	// #0
   9db28:	aa1603e2 	mov	x2, x22
   9db2c:	aa1503e1 	mov	x1, x21
   9db30:	aa1403e0 	mov	x0, x20
   9db34:	97ffe48f 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9db38:	aa1303e3 	mov	x3, x19
   9db3c:	90000001 	adrp	x1, 9d000 <CSMSC951xDevice::GetLinkSpeed()+0x80>
   9db40:	91344021 	add	x1, x1, #0xd10
   9db44:	d2800002 	mov	x2, #0x0                   	// #0
   9db48:	aa1403e0 	mov	x0, x20
   9db4c:	97ffe54d 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   9db50:	aa1303e0 	mov	x0, x19
   9db54:	97ffcac7 	bl	90670 <CUSBFunction::GetHost() const>
   9db58:	f9400003 	ldr	x3, [x0]
   9db5c:	aa1403e1 	mov	x1, x20
   9db60:	a94153f3 	ldp	x19, x20, [sp, #16]
   9db64:	52800002 	mov	w2, #0x0                   	// #0
   9db68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9db6c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9db70:	f9401463 	ldr	x3, [x3, #40]
   9db74:	aa0303f0 	mov	x16, x3
   9db78:	d61f0200 	br	x16
   9db7c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9db80:	900000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9db84:	912f0021 	add	x1, x1, #0xbc0
   9db88:	912f6000 	add	x0, x0, #0xbd8
   9db8c:	52801582 	mov	w2, #0xac                  	// #172
   9db90:	940010dc 	bl	a1f00 <assertion_failed>
   9db94:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9db98:	900000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9db9c:	912f0021 	add	x1, x1, #0xbc0
   9dba0:	912fe000 	add	x0, x0, #0xbf8
   9dba4:	528015a2 	mov	w2, #0xad                  	// #173
   9dba8:	940010d6 	bl	a1f00 <assertion_failed>
   9dbac:	d503201f 	nop

000000000009dbb0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   9dbb0:	f9002401 	str	x1, [x0, #72]
   9dbb4:	b4000041 	cbz	x1, 9dbbc <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0xc>
   9dbb8:	17ffffca 	b	9dae0 <CUSBBluetoothDevice::StartRequest()>
   9dbbc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9dbc0:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9dbc4:	900000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9dbc8:	910003fd 	mov	x29, sp
   9dbcc:	912f0021 	add	x1, x1, #0xbc0
   9dbd0:	91304000 	add	x0, x0, #0xc10
   9dbd4:	528014a2 	mov	w2, #0xa5                  	// #165
   9dbd8:	940010ca 	bl	a1f00 <assertion_failed>
   9dbdc:	d503201f 	nop

000000000009dbe0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   9dbe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dbe4:	910003fd 	mov	x29, sp
   9dbe8:	a90153f3 	stp	x19, x20, [sp, #16]
   9dbec:	b4000621 	cbz	x1, 9dcb0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd0>
   9dbf0:	aa0003f4 	mov	x20, x0
   9dbf4:	aa0103f3 	mov	x19, x1
   9dbf8:	aa0103e0 	mov	x0, x1
   9dbfc:	97ffe499 	bl	96e60 <CUSBRequest::GetStatus() const>
   9dc00:	340002e0 	cbz	w0, 9dc5c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   9dc04:	a9025bf5 	stp	x21, x22, [sp, #32]
   9dc08:	f9402695 	ldr	x21, [x20, #72]
   9dc0c:	b4000775 	cbz	x21, 9dcf8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   9dc10:	f9402296 	ldr	x22, [x20, #64]
   9dc14:	b4000436 	cbz	x22, 9dc98 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   9dc18:	aa1303e0 	mov	x0, x19
   9dc1c:	97ffe495 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9dc20:	2a0003e1 	mov	w1, w0
   9dc24:	aa1603e0 	mov	x0, x22
   9dc28:	d63f02a0 	blr	x21
   9dc2c:	aa1303e0 	mov	x0, x19
   9dc30:	97ffe470 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9dc34:	d2801201 	mov	x1, #0x90                  	// #144
   9dc38:	aa1303e0 	mov	x0, x19
   9dc3c:	97ffe54d 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   9dc40:	aa1403e0 	mov	x0, x20
   9dc44:	97ffffa7 	bl	9dae0 <CUSBBluetoothDevice::StartRequest()>
   9dc48:	36000420 	tbz	w0, #0, 9dccc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xec>
   9dc4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dc50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dc54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dc58:	d65f03c0 	ret
   9dc5c:	940017e5 	bl	a3bf0 <CLogger::Get()>
   9dc60:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9dc64:	910ba021 	add	x1, x1, #0x2e8
   9dc68:	91002021 	add	x1, x1, #0x8
   9dc6c:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9dc70:	9130a063 	add	x3, x3, #0xc28
   9dc74:	52800042 	mov	w2, #0x2                   	// #2
   9dc78:	940019d2 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9dc7c:	aa1303e0 	mov	x0, x19
   9dc80:	97ffe45c 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9dc84:	aa1303e0 	mov	x0, x19
   9dc88:	d2801201 	mov	x1, #0x90                  	// #144
   9dc8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dc90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dc94:	17ffe537 	b	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   9dc98:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9dc9c:	900000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9dca0:	912f0021 	add	x1, x1, #0xbc0
   9dca4:	912fe000 	add	x0, x0, #0xbf8
   9dca8:	52801822 	mov	w2, #0xc1                  	// #193
   9dcac:	94001095 	bl	a1f00 <assertion_failed>
   9dcb0:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9dcb4:	d00000a0 	adrp	x0, b3000 <_etext+0x9c8>
   9dcb8:	912f0021 	add	x1, x1, #0xbc0
   9dcbc:	9106c000 	add	x0, x0, #0x1b0
   9dcc0:	52801742 	mov	w2, #0xba                  	// #186
   9dcc4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9dcc8:	9400108e 	bl	a1f00 <assertion_failed>
   9dccc:	940017c9 	bl	a3bf0 <CLogger::Get()>
   9dcd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dcd4:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9dcd8:	910ba021 	add	x1, x1, #0x2e8
   9dcdc:	f00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9dce0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dce4:	91002021 	add	x1, x1, #0x8
   9dce8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dcec:	91290063 	add	x3, x3, #0xa40
   9dcf0:	52800022 	mov	w2, #0x1                   	// #1
   9dcf4:	140019b3 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9dcf8:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9dcfc:	900000c0 	adrp	x0, b5000 <_etext+0x29c8>
   9dd00:	912f0021 	add	x1, x1, #0xbc0
   9dd04:	91304000 	add	x0, x0, #0xc10
   9dd08:	52801802 	mov	w2, #0xc0                  	// #192
   9dd0c:	9400107d 	bl	a1f00 <assertion_failed>

000000000009dd10 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   9dd10:	b4000082 	cbz	x2, 9dd20 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   9dd14:	aa0003e1 	mov	x1, x0
   9dd18:	aa0203e0 	mov	x0, x2
   9dd1c:	17ffffb1 	b	9dbe0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   9dd20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9dd24:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9dd28:	b00000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9dd2c:	910003fd 	mov	x29, sp
   9dd30:	912f0021 	add	x1, x1, #0xbc0
   9dd34:	91288000 	add	x0, x0, #0xa20
   9dd38:	52801ae2 	mov	w2, #0xd7                  	// #215
   9dd3c:	94001071 	bl	a1f00 <assertion_failed>

000000000009dd40 <CUSBBluetoothDevice::Configure()>:
   9dd40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9dd44:	910003fd 	mov	x29, sp
   9dd48:	a90153f3 	stp	x19, x20, [sp, #16]
   9dd4c:	aa0003f4 	mov	x20, x0
   9dd50:	97ffcaac 	bl	90800 <CUSBFunction::GetInterfaceNumber() const>
   9dd54:	72001c1f 	tst	w0, #0xff
   9dd58:	54000d61 	b.ne	9df04 <CUSBBluetoothDevice::Configure()+0x1c4>  // b.any
   9dd5c:	aa1403e0 	mov	x0, x20
   9dd60:	97ffca20 	bl	905e0 <CUSBFunction::GetNumEndpoints() const>
   9dd64:	12001c00 	and	w0, w0, #0xff
   9dd68:	71000c1f 	cmp	w0, #0x3
   9dd6c:	54000801 	b.ne	9de6c <CUSBBluetoothDevice::Configure()+0x12c>  // b.any
   9dd70:	f90013f5 	str	x21, [sp, #32]
   9dd74:	d503201f 	nop
   9dd78:	aa1403e0 	mov	x0, x20
   9dd7c:	528000a1 	mov	w1, #0x5                   	// #5
   9dd80:	97ffca48 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9dd84:	aa0003f3 	mov	x19, x0
   9dd88:	b4000300 	cbz	x0, 9dde8 <CUSBBluetoothDevice::Configure()+0xa8>
   9dd8c:	39400e61 	ldrb	w1, [x19, #3]
   9dd90:	12001421 	and	w1, w1, #0x3f
   9dd94:	7100083f 	cmp	w1, #0x2
   9dd98:	540007e0 	b.eq	9de94 <CUSBBluetoothDevice::Configure()+0x154>  // b.none
   9dd9c:	71000c3f 	cmp	w1, #0x3
   9dda0:	54fffec1 	b.ne	9dd78 <CUSBBluetoothDevice::Configure()+0x38>  // b.any
   9dda4:	f9401680 	ldr	x0, [x20, #40]
   9dda8:	b5000c00 	cbnz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9ddac:	d2800400 	mov	x0, #0x20                  	// #32
   9ddb0:	94003760 	bl	abb30 <operator new(unsigned long)>
   9ddb4:	aa0003f5 	mov	x21, x0
   9ddb8:	aa1403e0 	mov	x0, x20
   9ddbc:	97ffca15 	bl	90610 <CUSBFunction::GetDevice() const>
   9ddc0:	aa0003e1 	mov	x1, x0
   9ddc4:	aa1303e2 	mov	x2, x19
   9ddc8:	aa1503e0 	mov	x0, x21
   9ddcc:	97ffc7f9 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9ddd0:	f9001695 	str	x21, [x20, #40]
   9ddd4:	aa1403e0 	mov	x0, x20
   9ddd8:	528000a1 	mov	w1, #0x5                   	// #5
   9dddc:	97ffca31 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9dde0:	aa0003f3 	mov	x19, x0
   9dde4:	b5fffd40 	cbnz	x0, 9dd8c <CUSBBluetoothDevice::Configure()+0x4c>
   9dde8:	f9401a80 	ldr	x0, [x20, #48]
   9ddec:	b40009e0 	cbz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9ddf0:	f9401e80 	ldr	x0, [x20, #56]
   9ddf4:	b40009a0 	cbz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9ddf8:	f9401680 	ldr	x0, [x20, #40]
   9ddfc:	b4000960 	cbz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9de00:	aa1403e0 	mov	x0, x20
   9de04:	97ffc933 	bl	902d0 <CUSBFunction::Configure()>
   9de08:	12001c13 	and	w19, w0, #0xff
   9de0c:	360009c0 	tbz	w0, #0, 9df44 <CUSBBluetoothDevice::Configure()+0x204>
   9de10:	f9401680 	ldr	x0, [x20, #40]
   9de14:	97ffc893 	bl	90060 <CUSBEndpoint::GetMaxPacketSize() const>
   9de18:	2a0003e0 	mov	w0, w0
   9de1c:	9400374d 	bl	abb50 <operator new[](unsigned long)>
   9de20:	f9002280 	str	x0, [x20, #64]
   9de24:	b9405281 	ldr	w1, [x20, #80]
   9de28:	35000a21 	cbnz	w1, 9df6c <CUSBBluetoothDevice::Configure()+0x22c>
   9de2c:	f00000d5 	adrp	x21, b8000 <FromUmsd+0x60>
   9de30:	910ba2b5 	add	x21, x21, #0x2e8
   9de34:	910022a2 	add	x2, x21, #0x8
   9de38:	52800021 	mov	w1, #0x1                   	// #1
   9de3c:	b0000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9de40:	91306000 	add	x0, x0, #0xc18
   9de44:	940038d3 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   9de48:	b9005280 	str	w0, [x20, #80]
   9de4c:	94001419 	bl	a2eb0 <CDeviceNameService::Get()>
   9de50:	b9405282 	ldr	w2, [x20, #80]
   9de54:	aa1503e1 	mov	x1, x21
   9de58:	aa1403e3 	mov	x3, x20
   9de5c:	52800004 	mov	w4, #0x0                   	// #0
   9de60:	94001420 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9de64:	f94013f5 	ldr	x21, [sp, #32]
   9de68:	14000007 	b	9de84 <CUSBBluetoothDevice::Configure()+0x144>
   9de6c:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9de70:	910ba021 	add	x1, x1, #0x2e8
   9de74:	aa1403e0 	mov	x0, x20
   9de78:	91002021 	add	x1, x1, #0x8
   9de7c:	97ffca15 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9de80:	52800013 	mov	w19, #0x0                   	// #0
   9de84:	2a1303e0 	mov	w0, w19
   9de88:	a94153f3 	ldp	x19, x20, [sp, #16]
   9de8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9de90:	d65f03c0 	ret
   9de94:	39c00a60 	ldrsb	w0, [x19, #2]
   9de98:	37f801c0 	tbnz	w0, #31, 9ded0 <CUSBBluetoothDevice::Configure()+0x190>
   9de9c:	f9401e80 	ldr	x0, [x20, #56]
   9dea0:	b5000440 	cbnz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9dea4:	d2800400 	mov	x0, #0x20                  	// #32
   9dea8:	94003722 	bl	abb30 <operator new(unsigned long)>
   9deac:	aa0003f5 	mov	x21, x0
   9deb0:	aa1403e0 	mov	x0, x20
   9deb4:	97ffc9d7 	bl	90610 <CUSBFunction::GetDevice() const>
   9deb8:	aa0003e1 	mov	x1, x0
   9debc:	aa1303e2 	mov	x2, x19
   9dec0:	aa1503e0 	mov	x0, x21
   9dec4:	97ffc7bb 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9dec8:	f9001e95 	str	x21, [x20, #56]
   9decc:	17ffffab 	b	9dd78 <CUSBBluetoothDevice::Configure()+0x38>
   9ded0:	f9401a80 	ldr	x0, [x20, #48]
   9ded4:	b50002a0 	cbnz	x0, 9df28 <CUSBBluetoothDevice::Configure()+0x1e8>
   9ded8:	d2800400 	mov	x0, #0x20                  	// #32
   9dedc:	94003715 	bl	abb30 <operator new(unsigned long)>
   9dee0:	aa0003f5 	mov	x21, x0
   9dee4:	aa1403e0 	mov	x0, x20
   9dee8:	97ffc9ca 	bl	90610 <CUSBFunction::GetDevice() const>
   9deec:	aa0003e1 	mov	x1, x0
   9def0:	aa1303e2 	mov	x2, x19
   9def4:	aa1503e0 	mov	x0, x21
   9def8:	97ffc7ae 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9defc:	f9001a95 	str	x21, [x20, #48]
   9df00:	17ffff9e 	b	9dd78 <CUSBBluetoothDevice::Configure()+0x38>
   9df04:	9400173b 	bl	a3bf0 <CLogger::Get()>
   9df08:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9df0c:	910ba021 	add	x1, x1, #0x2e8
   9df10:	91002021 	add	x1, x1, #0x8
   9df14:	900000c3 	adrp	x3, b5000 <_etext+0x29c8>
   9df18:	52800042 	mov	w2, #0x2                   	// #2
   9df1c:	9130e063 	add	x3, x3, #0xc38
   9df20:	94001928 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9df24:	17ffffd7 	b	9de80 <CUSBBluetoothDevice::Configure()+0x140>
   9df28:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9df2c:	910ba021 	add	x1, x1, #0x2e8
   9df30:	aa1403e0 	mov	x0, x20
   9df34:	91002021 	add	x1, x1, #0x8
   9df38:	97ffc9e6 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9df3c:	f94013f5 	ldr	x21, [sp, #32]
   9df40:	17ffffd0 	b	9de80 <CUSBBluetoothDevice::Configure()+0x140>
   9df44:	9400172b 	bl	a3bf0 <CLogger::Get()>
   9df48:	f00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9df4c:	910ba021 	add	x1, x1, #0x2e8
   9df50:	91002021 	add	x1, x1, #0x8
   9df54:	f00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9df58:	52800022 	mov	w2, #0x1                   	// #1
   9df5c:	91182063 	add	x3, x3, #0x608
   9df60:	94001918 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9df64:	f94013f5 	ldr	x21, [sp, #32]
   9df68:	17ffffc6 	b	9de80 <CUSBBluetoothDevice::Configure()+0x140>
   9df6c:	900000c1 	adrp	x1, b5000 <_etext+0x29c8>
   9df70:	f00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9df74:	912f0021 	add	x1, x1, #0xbc0
   9df78:	9133c000 	add	x0, x0, #0xcf0
   9df7c:	528011e2 	mov	w2, #0x8f                  	// #143
   9df80:	94000fe0 	bl	a1f00 <assertion_failed>
	...

000000000009df90 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE>:
   9df90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9df94:	528007e2 	mov	w2, #0x3f                  	// #63
   9df98:	52800021 	mov	w1, #0x1                   	// #1
   9df9c:	910003fd 	mov	x29, sp
   9dfa0:	f9000bf3 	str	x19, [sp, #16]
   9dfa4:	b0000173 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   9dfa8:	91306273 	add	x19, x19, #0xc18
   9dfac:	aa1303e0 	mov	x0, x19
   9dfb0:	9400385c 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9dfb4:	aa1303e1 	mov	x1, x19
   9dfb8:	b0000162 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9dfbc:	91336042 	add	x2, x2, #0xcd8
   9dfc0:	f9400bf3 	ldr	x19, [sp, #16]
   9dfc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9dfc8:	b0000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9dfcc:	f945a400 	ldr	x0, [x0, #2888]
   9dfd0:	14002e7c 	b	a99c0 <__cxa_atexit>
	...

000000000009dfe0 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   9dfe0:	91010000 	add	x0, x0, #0x40
   9dfe4:	d65f03c0 	ret
   9dfe8:	d503201f 	nop
   9dfec:	d503201f 	nop

000000000009dff0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   9dff0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9dff4:	b0000162 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9dff8:	9108c042 	add	x2, x2, #0x230
   9dffc:	910003fd 	mov	x29, sp
   9e000:	a90153f3 	stp	x19, x20, [sp, #16]
   9e004:	90000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9e008:	910ac021 	add	x1, x1, #0x2b0
   9e00c:	f9401c14 	ldr	x20, [x0, #56]
   9e010:	f9000002 	str	x2, [x0]
   9e014:	f9001401 	str	x1, [x0, #40]
   9e018:	aa0003f3 	mov	x19, x0
   9e01c:	b40000d4 	cbz	x20, 9e034 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x44>
   9e020:	aa1403e0 	mov	x0, x20
   9e024:	97ffc7ef 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9e028:	aa1403e0 	mov	x0, x20
   9e02c:	d2800401 	mov	x1, #0x20                  	// #32
   9e030:	940036e0 	bl	abbb0 <operator delete(void*, unsigned long)>
   9e034:	f9401a74 	ldr	x20, [x19, #48]
   9e038:	f9001e7f 	str	xzr, [x19, #56]
   9e03c:	b40000d4 	cbz	x20, 9e054 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x64>
   9e040:	aa1403e0 	mov	x0, x20
   9e044:	97ffc7e7 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9e048:	aa1403e0 	mov	x0, x20
   9e04c:	d2800401 	mov	x1, #0x20                  	// #32
   9e050:	940036d8 	bl	abbb0 <operator delete(void*, unsigned long)>
   9e054:	f9001a7f 	str	xzr, [x19, #48]
   9e058:	91010260 	add	x0, x19, #0x40
   9e05c:	9400357d 	bl	ab650 <CMACAddress::~CMACAddress()>
   9e060:	aa1303e0 	mov	x0, x19
   9e064:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e068:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e06c:	17ffc861 	b	901f0 <CUSBFunction::~CUSBFunction()>

000000000009e070 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   9e070:	d100a000 	sub	x0, x0, #0x28
   9e074:	17ffffdf 	b	9dff0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   9e078:	d503201f 	nop
   9e07c:	d503201f 	nop

000000000009e080 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   9e080:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e084:	910003fd 	mov	x29, sp
   9e088:	f9000bf3 	str	x19, [sp, #16]
   9e08c:	aa0003f3 	mov	x19, x0
   9e090:	97ffffd8 	bl	9dff0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   9e094:	aa1303e0 	mov	x0, x19
   9e098:	d2800901 	mov	x1, #0x48                  	// #72
   9e09c:	f9400bf3 	ldr	x19, [sp, #16]
   9e0a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e0a4:	140036c3 	b	abbb0 <operator delete(void*, unsigned long)>
   9e0a8:	d503201f 	nop
   9e0ac:	d503201f 	nop

000000000009e0b0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   9e0b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e0b4:	910003fd 	mov	x29, sp
   9e0b8:	a90153f3 	stp	x19, x20, [sp, #16]
   9e0bc:	aa0103f4 	mov	x20, x1
   9e0c0:	f9401c01 	ldr	x1, [x0, #56]
   9e0c4:	f90013f5 	str	x21, [sp, #32]
   9e0c8:	b4000241 	cbz	x1, 9e110 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x60>
   9e0cc:	b40002f4 	cbz	x20, 9e128 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x78>
   9e0d0:	2a0203f5 	mov	w21, w2
   9e0d4:	7119005f 	cmp	w2, #0x640
   9e0d8:	54000348 	b.hi	9e140 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>  // b.pmore
   9e0dc:	aa0003f3 	mov	x19, x0
   9e0e0:	97ffc964 	bl	90670 <CUSBFunction::GetHost() const>
   9e0e4:	2a1503e3 	mov	w3, w21
   9e0e8:	aa1403e2 	mov	x2, x20
   9e0ec:	52800004 	mov	w4, #0x0                   	// #0
   9e0f0:	f9401e61 	ldr	x1, [x19, #56]
   9e0f4:	97ffd7e3 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9e0f8:	2a2003e0 	mvn	w0, w0
   9e0fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e100:	531f7c00 	lsr	w0, w0, #31
   9e104:	f94013f5 	ldr	x21, [sp, #32]
   9e108:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e10c:	d65f03c0 	ret
   9e110:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e114:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e118:	91318021 	add	x1, x1, #0xc60
   9e11c:	91250000 	add	x0, x0, #0x940
   9e120:	52801542 	mov	w2, #0xaa                  	// #170
   9e124:	94000f77 	bl	a1f00 <assertion_failed>
   9e128:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e12c:	900000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9e130:	91318021 	add	x1, x1, #0xc60
   9e134:	91384000 	add	x0, x0, #0xe10
   9e138:	52801562 	mov	w2, #0xab                  	// #171
   9e13c:	94000f71 	bl	a1f00 <assertion_failed>
   9e140:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e144:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e148:	91318021 	add	x1, x1, #0xc60
   9e14c:	9131e000 	add	x0, x0, #0xc78
   9e150:	52801582 	mov	w2, #0xac                  	// #172
   9e154:	94000f6b 	bl	a1f00 <assertion_failed>
   9e158:	d503201f 	nop
   9e15c:	d503201f 	nop

000000000009e160 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   9e160:	d100a000 	sub	x0, x0, #0x28
   9e164:	17ffffd3 	b	9e0b0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>
   9e168:	d503201f 	nop
   9e16c:	d503201f 	nop

000000000009e170 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   9e170:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   9e174:	910003fd 	mov	x29, sp
   9e178:	a90153f3 	stp	x19, x20, [sp, #16]
   9e17c:	aa0003f3 	mov	x19, x0
   9e180:	aa0103e0 	mov	x0, x1
   9e184:	f9401a61 	ldr	x1, [x19, #48]
   9e188:	f90013f5 	str	x21, [sp, #32]
   9e18c:	b4000501 	cbz	x1, 9e22c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xbc>
   9e190:	b40005a0 	cbz	x0, 9e244 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   9e194:	aa0203f5 	mov	x21, x2
   9e198:	aa0003e2 	mov	x2, x0
   9e19c:	d2800004 	mov	x4, #0x0                   	// #0
   9e1a0:	5280c803 	mov	w3, #0x640                 	// #1600
   9e1a4:	9100c3f4 	add	x20, sp, #0x30
   9e1a8:	aa1403e0 	mov	x0, x20
   9e1ac:	97ffe2f1 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9e1b0:	aa1403e0 	mov	x0, x20
   9e1b4:	97ffe3cf 	bl	970f0 <CUSBRequest::SetCompleteOnNAK()>
   9e1b8:	aa1303e0 	mov	x0, x19
   9e1bc:	97ffc92d 	bl	90670 <CUSBFunction::GetHost() const>
   9e1c0:	f9400003 	ldr	x3, [x0]
   9e1c4:	aa1403e1 	mov	x1, x20
   9e1c8:	52800002 	mov	w2, #0x0                   	// #0
   9e1cc:	f9401063 	ldr	x3, [x3, #32]
   9e1d0:	d63f0060 	blr	x3
   9e1d4:	12001c13 	and	w19, w0, #0xff
   9e1d8:	37000120 	tbnz	w0, #0, 9e1fc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x8c>
   9e1dc:	aa1403e0 	mov	x0, x20
   9e1e0:	52800013 	mov	w19, #0x0                   	// #0
   9e1e4:	97ffe303 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9e1e8:	f94013f5 	ldr	x21, [sp, #32]
   9e1ec:	2a1303e0 	mov	w0, w19
   9e1f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e1f4:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   9e1f8:	d65f03c0 	ret
   9e1fc:	aa1403e0 	mov	x0, x20
   9e200:	97ffe31c 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9e204:	34fffec0 	cbz	w0, 9e1dc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   9e208:	b40002b5 	cbz	x21, 9e25c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xec>
   9e20c:	b90002a0 	str	w0, [x21]
   9e210:	aa1403e0 	mov	x0, x20
   9e214:	97ffe2f7 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9e218:	f94013f5 	ldr	x21, [sp, #32]
   9e21c:	2a1303e0 	mov	w0, w19
   9e220:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e224:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   9e228:	d65f03c0 	ret
   9e22c:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e230:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e234:	91318021 	add	x1, x1, #0xc60
   9e238:	9122c000 	add	x0, x0, #0x8b0
   9e23c:	52801642 	mov	w2, #0xb2                  	// #178
   9e240:	94000f30 	bl	a1f00 <assertion_failed>
   9e244:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e248:	900000a0 	adrp	x0, b2000 <SErrorStub+0xc>
   9e24c:	91318021 	add	x1, x1, #0xc60
   9e250:	91384000 	add	x0, x0, #0xe10
   9e254:	52801662 	mov	w2, #0xb3                  	// #179
   9e258:	94000f2a 	bl	a1f00 <assertion_failed>
   9e25c:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e260:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e264:	91318021 	add	x1, x1, #0xc60
   9e268:	9124a000 	add	x0, x0, #0x928
   9e26c:	52801862 	mov	w2, #0xc3                  	// #195
   9e270:	94000f24 	bl	a1f00 <assertion_failed>
   9e274:	d503201f 	nop
   9e278:	d503201f 	nop
   9e27c:	d503201f 	nop

000000000009e280 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   9e280:	d100a000 	sub	x0, x0, #0x28
   9e284:	17ffffbb 	b	9e170 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>
   9e288:	d503201f 	nop
   9e28c:	d503201f 	nop

000000000009e290 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   9e290:	91006000 	add	x0, x0, #0x18
   9e294:	d65f03c0 	ret
   9e298:	d503201f 	nop
   9e29c:	d503201f 	nop

000000000009e2a0 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   9e2a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e2a4:	910003fd 	mov	x29, sp
   9e2a8:	f9000bf3 	str	x19, [sp, #16]
   9e2ac:	d100a013 	sub	x19, x0, #0x28
   9e2b0:	aa1303e0 	mov	x0, x19
   9e2b4:	97ffff4f 	bl	9dff0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   9e2b8:	aa1303e0 	mov	x0, x19
   9e2bc:	d2800901 	mov	x1, #0x48                  	// #72
   9e2c0:	f9400bf3 	ldr	x19, [sp, #16]
   9e2c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e2c8:	1400363a 	b	abbb0 <operator delete(void*, unsigned long)>
   9e2cc:	d503201f 	nop

000000000009e2d0 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   9e2d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e2d4:	910003fd 	mov	x29, sp
   9e2d8:	f9000bf3 	str	x19, [sp, #16]
   9e2dc:	aa0003f3 	mov	x19, x0
   9e2e0:	97ffc868 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9e2e4:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9e2e8:	9108c000 	add	x0, x0, #0x230
   9e2ec:	90000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9e2f0:	910ac021 	add	x1, x1, #0x2b0
   9e2f4:	f9000260 	str	x0, [x19]
   9e2f8:	91010260 	add	x0, x19, #0x40
   9e2fc:	a902fe61 	stp	x1, xzr, [x19, #40]
   9e300:	f9001e7f 	str	xzr, [x19, #56]
   9e304:	f9400bf3 	ldr	x19, [sp, #16]
   9e308:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e30c:	140034b9 	b	ab5f0 <CMACAddress::CMACAddress()>

000000000009e310 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   9e310:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9e314:	910003fd 	mov	x29, sp
   9e318:	a90153f3 	stp	x19, x20, [sp, #16]
   9e31c:	aa0003f4 	mov	x20, x0
   9e320:	9100e3f3 	add	x19, sp, #0x38
   9e324:	f90013f5 	str	x21, [sp, #32]
   9e328:	12001c35 	and	w21, w1, #0xff
   9e32c:	97ffc8b9 	bl	90610 <CUSBFunction::GetDevice() const>
   9e330:	aa0003e1 	mov	x1, x0
   9e334:	aa1303e0 	mov	x0, x19
   9e338:	97ffe872 	bl	98500 <CUSBString::CUSBString(CUSBDevice*)>
   9e33c:	35000135 	cbnz	w21, 9e360 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x50>
   9e340:	aa1303e0 	mov	x0, x19
   9e344:	52800015 	mov	w21, #0x0                   	// #0
   9e348:	97ffe8ba 	bl	98630 <CUSBString::~CUSBString()>
   9e34c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e350:	2a1503e0 	mov	w0, w21
   9e354:	f94013f5 	ldr	x21, [sp, #32]
   9e358:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9e35c:	d65f03c0 	ret
   9e360:	aa1303e0 	mov	x0, x19
   9e364:	97ffe96b 	bl	98910 <CUSBString::GetLanguageID()>
   9e368:	2a1503e1 	mov	w1, w21
   9e36c:	2a0003e2 	mov	w2, w0
   9e370:	aa1303e0 	mov	x0, x19
   9e374:	97ffe8c3 	bl	98680 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   9e378:	12001c15 	and	w21, w0, #0xff
   9e37c:	3607fe20 	tbz	w0, #0, 9e340 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x30>
   9e380:	aa1303e0 	mov	x0, x19
   9e384:	97ffe95f 	bl	98900 <CUSBString::Get() const>
   9e388:	9100c3e1 	add	x1, sp, #0x30
   9e38c:	91003006 	add	x6, x0, #0xc
   9e390:	aa0103e5 	mov	x5, x1
   9e394:	b4000480 	cbz	x0, 9e424 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x114>
   9e398:	39c00003 	ldrsb	w3, [x0]
   9e39c:	12001c62 	and	w2, w3, #0xff
   9e3a0:	7100e87f 	cmp	w3, #0x3a
   9e3a4:	51001c43 	sub	w3, w2, #0x7
   9e3a8:	12001c63 	and	w3, w3, #0xff
   9e3ac:	1a83b042 	csel	w2, w2, w3, lt	// lt = tstop
   9e3b0:	5100c042 	sub	w2, w2, #0x30
   9e3b4:	12001c42 	and	w2, w2, #0xff
   9e3b8:	71003c5f 	cmp	w2, #0xf
   9e3bc:	54fffc28 	b.hi	9e340 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x30>  // b.pmore
   9e3c0:	39c00404 	ldrsb	w4, [x0, #1]
   9e3c4:	91000800 	add	x0, x0, #0x2
   9e3c8:	12001c83 	and	w3, w4, #0xff
   9e3cc:	7100e89f 	cmp	w4, #0x3a
   9e3d0:	51001c64 	sub	w4, w3, #0x7
   9e3d4:	12001c84 	and	w4, w4, #0xff
   9e3d8:	1a84b063 	csel	w3, w3, w4, lt	// lt = tstop
   9e3dc:	5100c063 	sub	w3, w3, #0x30
   9e3e0:	12001c63 	and	w3, w3, #0xff
   9e3e4:	71003c7f 	cmp	w3, #0xf
   9e3e8:	54fffac8 	b.hi	9e340 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x30>  // b.pmore
   9e3ec:	531c0c42 	ubfiz	w2, w2, #4, #4
   9e3f0:	eb0000df 	cmp	x6, x0
   9e3f4:	2a020063 	orr	w3, w3, w2
   9e3f8:	380014a3 	strb	w3, [x5], #1
   9e3fc:	54fffce1 	b.ne	9e398 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x88>  // b.any
   9e400:	91010280 	add	x0, x20, #0x40
   9e404:	940034cf 	bl	ab740 <CMACAddress::Set(unsigned char const*)>
   9e408:	aa1303e0 	mov	x0, x19
   9e40c:	97ffe889 	bl	98630 <CUSBString::~CUSBString()>
   9e410:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e414:	2a1503e0 	mov	w0, w21
   9e418:	f94013f5 	ldr	x21, [sp, #32]
   9e41c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9e420:	d65f03c0 	ret
   9e424:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e428:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e42c:	91318021 	add	x1, x1, #0xc60
   9e430:	91326000 	add	x0, x0, #0xc98
   9e434:	52801a62 	mov	w2, #0xd3                  	// #211
   9e438:	94000eb2 	bl	a1f00 <assertion_failed>
   9e43c:	d503201f 	nop

000000000009e440 <CUSBCDCEthernetDevice::Configure()>:
   9e440:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   9e444:	910003fd 	mov	x29, sp
   9e448:	a90153f3 	stp	x19, x20, [sp, #16]
   9e44c:	aa0003f4 	mov	x20, x0
   9e450:	14000004 	b	9e460 <CUSBCDCEthernetDevice::Configure()+0x20>
   9e454:	39400a60 	ldrb	w0, [x19, #2]
   9e458:	71003c1f 	cmp	w0, #0xf
   9e45c:	540002e0 	b.eq	9e4b8 <CUSBCDCEthernetDevice::Configure()+0x78>  // b.none
   9e460:	aa1403e0 	mov	x0, x20
   9e464:	52800481 	mov	w1, #0x24                  	// #36
   9e468:	97ffc88e 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9e46c:	aa0003f3 	mov	x19, x0
   9e470:	b5ffff20 	cbnz	x0, 9e454 <CUSBCDCEthernetDevice::Configure()+0x14>
   9e474:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9e478:	910be021 	add	x1, x1, #0x2f8
   9e47c:	aa1403e0 	mov	x0, x20
   9e480:	97ffc894 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9e484:	52800013 	mov	w19, #0x0                   	// #0
   9e488:	2a1303e0 	mov	w0, w19
   9e48c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e490:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9e494:	d65f03c0 	ret
   9e498:	39401801 	ldrb	w1, [x0, #6]
   9e49c:	350000e1 	cbnz	w1, 9e4b8 <CUSBCDCEthernetDevice::Configure()+0x78>
   9e4a0:	39401c01 	ldrb	w1, [x0, #7]
   9e4a4:	350000a1 	cbnz	w1, 9e4b8 <CUSBCDCEthernetDevice::Configure()+0x78>
   9e4a8:	39401000 	ldrb	w0, [x0, #4]
   9e4ac:	7100041f 	cmp	w0, #0x1
   9e4b0:	54000148 	b.hi	9e4d8 <CUSBCDCEthernetDevice::Configure()+0x98>  // b.pmore
   9e4b4:	d503201f 	nop
   9e4b8:	aa1403e0 	mov	x0, x20
   9e4bc:	52800081 	mov	w1, #0x4                   	// #4
   9e4c0:	97ffc878 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9e4c4:	b4fffd80 	cbz	x0, 9e474 <CUSBCDCEthernetDevice::Configure()+0x34>
   9e4c8:	39401401 	ldrb	w1, [x0, #5]
   9e4cc:	7100283f 	cmp	w1, #0xa
   9e4d0:	54ffff41 	b.ne	9e4b8 <CUSBCDCEthernetDevice::Configure()+0x78>  // b.any
   9e4d4:	17fffff1 	b	9e498 <CUSBCDCEthernetDevice::Configure()+0x58>
   9e4d8:	39400e61 	ldrb	w1, [x19, #3]
   9e4dc:	aa1403e0 	mov	x0, x20
   9e4e0:	97ffff8c 	bl	9e310 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   9e4e4:	360005e0 	tbz	w0, #0, 9e5a0 <CUSBCDCEthernetDevice::Configure()+0x160>
   9e4e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e4ec:	910103f5 	add	x21, sp, #0x40
   9e4f0:	aa1503e0 	mov	x0, x21
   9e4f4:	9400270b 	bl	a8120 <CString::CString()>
   9e4f8:	d00000d6 	adrp	x22, b8000 <FromUmsd+0x60>
   9e4fc:	aa1503e1 	mov	x1, x21
   9e500:	91010280 	add	x0, x20, #0x40
   9e504:	940034f3 	bl	ab8d0 <CMACAddress::Format(CString*) const>
   9e508:	940015ba 	bl	a3bf0 <CLogger::Get()>
   9e50c:	aa0003f3 	mov	x19, x0
   9e510:	aa1503e0 	mov	x0, x21
   9e514:	94002747 	bl	a8230 <CString::operator char const*() const>
   9e518:	910be2c1 	add	x1, x22, #0x2f8
   9e51c:	aa0003e4 	mov	x4, x0
   9e520:	f00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9e524:	aa1303e0 	mov	x0, x19
   9e528:	9127c063 	add	x3, x3, #0x9f0
   9e52c:	52800082 	mov	w2, #0x4                   	// #4
   9e530:	940017a4 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e534:	14000005 	b	9e548 <CUSBCDCEthernetDevice::Configure()+0x108>
   9e538:	39400e60 	ldrb	w0, [x19, #3]
   9e53c:	12001400 	and	w0, w0, #0x3f
   9e540:	7100081f 	cmp	w0, #0x2
   9e544:	540003e0 	b.eq	9e5c0 <CUSBCDCEthernetDevice::Configure()+0x180>  // b.none
   9e548:	aa1403e0 	mov	x0, x20
   9e54c:	528000a1 	mov	w1, #0x5                   	// #5
   9e550:	97ffc854 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9e554:	aa0003f3 	mov	x19, x0
   9e558:	b5ffff00 	cbnz	x0, 9e538 <CUSBCDCEthernetDevice::Configure()+0xf8>
   9e55c:	f9401a80 	ldr	x0, [x20, #48]
   9e560:	b4000620 	cbz	x0, 9e624 <CUSBCDCEthernetDevice::Configure()+0x1e4>
   9e564:	f9401e80 	ldr	x0, [x20, #56]
   9e568:	b40005e0 	cbz	x0, 9e624 <CUSBCDCEthernetDevice::Configure()+0x1e4>
   9e56c:	aa1403e0 	mov	x0, x20
   9e570:	97ffc758 	bl	902d0 <CUSBFunction::Configure()>
   9e574:	12001c13 	and	w19, w0, #0xff
   9e578:	36000460 	tbz	w0, #0, 9e604 <CUSBCDCEthernetDevice::Configure()+0x1c4>
   9e57c:	9100a280 	add	x0, x20, #0x28
   9e580:	940034f4 	bl	ab950 <CNetDevice::AddNetDevice()>
   9e584:	aa1503e0 	mov	x0, x21
   9e588:	940026aa 	bl	a8030 <CString::~CString()>
   9e58c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e590:	2a1303e0 	mov	w0, w19
   9e594:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e598:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9e59c:	d65f03c0 	ret
   9e5a0:	94001594 	bl	a3bf0 <CLogger::Get()>
   9e5a4:	f00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9e5a8:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9e5ac:	912de063 	add	x3, x3, #0xb78
   9e5b0:	910be021 	add	x1, x1, #0x2f8
   9e5b4:	52800022 	mov	w2, #0x1                   	// #1
   9e5b8:	94001782 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e5bc:	17ffffb2 	b	9e484 <CUSBCDCEthernetDevice::Configure()+0x44>
   9e5c0:	39c00a61 	ldrsb	w1, [x19, #2]
   9e5c4:	d2800400 	mov	x0, #0x20                  	// #32
   9e5c8:	37f80381 	tbnz	w1, #31, 9e638 <CUSBCDCEthernetDevice::Configure()+0x1f8>
   9e5cc:	f9401e81 	ldr	x1, [x20, #56]
   9e5d0:	b50002a1 	cbnz	x1, 9e624 <CUSBCDCEthernetDevice::Configure()+0x1e4>
   9e5d4:	f9001bf7 	str	x23, [sp, #48]
   9e5d8:	94003556 	bl	abb30 <operator new(unsigned long)>
   9e5dc:	aa0003f7 	mov	x23, x0
   9e5e0:	aa1403e0 	mov	x0, x20
   9e5e4:	97ffc80b 	bl	90610 <CUSBFunction::GetDevice() const>
   9e5e8:	aa0003e1 	mov	x1, x0
   9e5ec:	aa1303e2 	mov	x2, x19
   9e5f0:	aa1703e0 	mov	x0, x23
   9e5f4:	97ffc5ef 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9e5f8:	f9001e97 	str	x23, [x20, #56]
   9e5fc:	f9401bf7 	ldr	x23, [sp, #48]
   9e600:	17ffffd2 	b	9e548 <CUSBCDCEthernetDevice::Configure()+0x108>
   9e604:	9400157b 	bl	a3bf0 <CLogger::Get()>
   9e608:	52800013 	mov	w19, #0x0                   	// #0
   9e60c:	910be2c1 	add	x1, x22, #0x2f8
   9e610:	d00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9e614:	91182063 	add	x3, x3, #0x608
   9e618:	52800022 	mov	w2, #0x1                   	// #1
   9e61c:	94001769 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e620:	17ffffd9 	b	9e584 <CUSBCDCEthernetDevice::Configure()+0x144>
   9e624:	910be2c1 	add	x1, x22, #0x2f8
   9e628:	aa1403e0 	mov	x0, x20
   9e62c:	52800013 	mov	w19, #0x0                   	// #0
   9e630:	97ffc828 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9e634:	17ffffd4 	b	9e584 <CUSBCDCEthernetDevice::Configure()+0x144>
   9e638:	f9401a81 	ldr	x1, [x20, #48]
   9e63c:	b5ffff41 	cbnz	x1, 9e624 <CUSBCDCEthernetDevice::Configure()+0x1e4>
   9e640:	f9001bf7 	str	x23, [sp, #48]
   9e644:	9400353b 	bl	abb30 <operator new(unsigned long)>
   9e648:	aa0003f7 	mov	x23, x0
   9e64c:	aa1403e0 	mov	x0, x20
   9e650:	97ffc7f0 	bl	90610 <CUSBFunction::GetDevice() const>
   9e654:	aa0003e1 	mov	x1, x0
   9e658:	aa1303e2 	mov	x2, x19
   9e65c:	aa1703e0 	mov	x0, x23
   9e660:	97ffc5d4 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9e664:	f9001a97 	str	x23, [x20, #48]
   9e668:	f9401bf7 	ldr	x23, [sp, #48]
   9e66c:	17ffffb7 	b	9e548 <CUSBCDCEthernetDevice::Configure()+0x108>

000000000009e670 <CNetDevice::IsLinkUp()>:
   9e670:	52800020 	mov	w0, #0x1                   	// #1
   9e674:	d65f03c0 	ret
	...

000000000009e680 <CNetDevice::GetLinkSpeed()>:
   9e680:	528000c0 	mov	w0, #0x6                   	// #6
   9e684:	d65f03c0 	ret
	...

000000000009e690 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   9e690:	8b224024 	add	x4, x1, w2, uxtw
   9e694:	f9000001 	str	x1, [x0]
   9e698:	b9000802 	str	w2, [x0, #8]
   9e69c:	3900301f 	strb	wzr, [x0, #12]
   9e6a0:	a9010404 	stp	x4, x1, [x0, #16]
   9e6a4:	a902041f 	stp	xzr, x1, [x0, #32]
   9e6a8:	b4000881 	cbz	x1, 9e7b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x128>
   9e6ac:	51001043 	sub	w3, w2, #0x4
   9e6b0:	710ff07f 	cmp	w3, #0x3fc
   9e6b4:	54000088 	b.hi	9e6c4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.pmore
   9e6b8:	39400023 	ldrb	w3, [x1]
   9e6bc:	7100247f 	cmp	w3, #0x9
   9e6c0:	54000040 	b.eq	9e6c8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>  // b.none
   9e6c4:	d65f03c0 	ret
   9e6c8:	39400423 	ldrb	w3, [x1, #1]
   9e6cc:	7100087f 	cmp	w3, #0x2
   9e6d0:	54ffffa1 	b.ne	9e6c4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.any
   9e6d4:	39400826 	ldrb	w6, [x1, #2]
   9e6d8:	39400c25 	ldrb	w5, [x1, #3]
   9e6dc:	2a0520c5 	orr	w5, w6, w5, lsl #8
   9e6e0:	6b05005f 	cmp	w2, w5
   9e6e4:	54ffff03 	b.cc	9e6c4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.lo, b.ul, b.last
   9e6e8:	54000069 	b.ls	9e6f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x64>  // b.plast
   9e6ec:	8b252024 	add	x4, x1, w5, uxth
   9e6f0:	f9000804 	str	x4, [x0, #16]
   9e6f4:	91000822 	add	x2, x1, #0x2
   9e6f8:	eb02009f 	cmp	x4, x2
   9e6fc:	540006e9 	b.ls	9e7d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>  // b.plast
   9e700:	52800125 	mov	w5, #0x9                   	// #9
   9e704:	52800007 	mov	w7, #0x0                   	// #0
   9e708:	52800006 	mov	w6, #0x0                   	// #0
   9e70c:	1400000e 	b	9e744 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb4>
   9e710:	7100087f 	cmp	w3, #0x2
   9e714:	540000a1 	b.ne	9e728 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x98>  // b.any
   9e718:	35000346 	cbnz	w6, 9e780 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   9e71c:	52800126 	mov	w6, #0x9                   	// #9
   9e720:	6b0600bf 	cmp	w5, w6
   9e724:	540002e1 	b.ne	9e780 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>  // b.any
   9e728:	91000841 	add	x1, x2, #0x2
   9e72c:	eb01009f 	cmp	x4, x1
   9e730:	54000589 	b.ls	9e7e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x150>  // b.plast
   9e734:	2a0303e6 	mov	w6, w3
   9e738:	39400045 	ldrb	w5, [x2]
   9e73c:	39400443 	ldrb	w3, [x2, #1]
   9e740:	aa0203e1 	mov	x1, x2
   9e744:	8b250022 	add	x2, x1, w5, uxtb
   9e748:	eb04005f 	cmp	x2, x4
   9e74c:	540001a8 	b.hi	9e780 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>  // b.pmore
   9e750:	7100107f 	cmp	w3, #0x4
   9e754:	540001a0 	b.eq	9e788 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf8>  // b.none
   9e758:	7100147f 	cmp	w3, #0x5
   9e75c:	54fffda1 	b.ne	9e710 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>  // b.any
   9e760:	52801fa8 	mov	w8, #0xfd                  	// #253
   9e764:	6a0800df 	tst	w6, w8
   9e768:	540000c0 	b.eq	9e780 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>  // b.none
   9e76c:	34000227 	cbz	w7, 9e7b0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x120>
   9e770:	51001ca5 	sub	w5, w5, #0x7
   9e774:	52801fa6 	mov	w6, #0xfd                  	// #253
   9e778:	6a0600bf 	tst	w5, w6
   9e77c:	54fffd60 	b.eq	9e728 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x98>  // b.none
   9e780:	f9001401 	str	x1, [x0, #40]
   9e784:	d65f03c0 	ret
   9e788:	34ffffc6 	cbz	w6, 9e780 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   9e78c:	39401428 	ldrb	w8, [x1, #5]
   9e790:	52800126 	mov	w6, #0x9                   	// #9
   9e794:	52800007 	mov	w7, #0x0                   	// #0
   9e798:	7100051f 	cmp	w8, #0x1
   9e79c:	54fffc21 	b.ne	9e720 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>  // b.any
   9e7a0:	39401c27 	ldrb	w7, [x1, #7]
   9e7a4:	710080ff 	cmp	w7, #0x20
   9e7a8:	1a9f07e7 	cset	w7, ne	// ne = any
   9e7ac:	17ffffdd 	b	9e720 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   9e7b0:	528000e6 	mov	w6, #0x7                   	// #7
   9e7b4:	17ffffdb 	b	9e720 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   9e7b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e7bc:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e7c0:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e7c4:	910003fd 	mov	x29, sp
   9e7c8:	9132a021 	add	x1, x1, #0xca8
   9e7cc:	91330000 	add	x0, x0, #0xcc0
   9e7d0:	52800482 	mov	w2, #0x24                  	// #36
   9e7d4:	94000dcb 	bl	a1f00 <assertion_failed>
   9e7d8:	aa0103e2 	mov	x2, x1
   9e7dc:	d503201f 	nop
   9e7e0:	eb04005f 	cmp	x2, x4
   9e7e4:	54000060 	b.eq	9e7f0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x160>  // b.none
   9e7e8:	f9001402 	str	x2, [x0, #40]
   9e7ec:	d65f03c0 	ret
   9e7f0:	52800021 	mov	w1, #0x1                   	// #1
   9e7f4:	39003001 	strb	w1, [x0, #12]
   9e7f8:	d65f03c0 	ret
   9e7fc:	d503201f 	nop

000000000009e800 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   9e800:	b40001c1 	cbz	x1, 9e838 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x38>
   9e804:	f9400022 	ldr	x2, [x1]
   9e808:	f9000002 	str	x2, [x0]
   9e80c:	b9400823 	ldr	w3, [x1, #8]
   9e810:	39403022 	ldrb	w2, [x1, #12]
   9e814:	f9400824 	ldr	x4, [x1, #16]
   9e818:	b9000803 	str	w3, [x0, #8]
   9e81c:	39003002 	strb	w2, [x0, #12]
   9e820:	a9418823 	ldp	x3, x2, [x1, #24]
   9e824:	f9000804 	str	x4, [x0, #16]
   9e828:	f9401421 	ldr	x1, [x1, #40]
   9e82c:	a9018803 	stp	x3, x2, [x0, #24]
   9e830:	f9001401 	str	x1, [x0, #40]
   9e834:	d65f03c0 	ret
   9e838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e83c:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e840:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e844:	910003fd 	mov	x29, sp
   9e848:	9132a021 	add	x1, x1, #0xca8
   9e84c:	91334000 	add	x0, x0, #0xcd0
   9e850:	52801162 	mov	w2, #0x8b                  	// #139
   9e854:	94000dab 	bl	a1f00 <assertion_failed>
   9e858:	d503201f 	nop
   9e85c:	d503201f 	nop

000000000009e860 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   9e860:	d65f03c0 	ret
   9e864:	d503201f 	nop
   9e868:	d503201f 	nop
   9e86c:	d503201f 	nop

000000000009e870 <CUSBConfigurationParser::IsValid() const>:
   9e870:	39403000 	ldrb	w0, [x0, #12]
   9e874:	d65f03c0 	ret
   9e878:	d503201f 	nop
   9e87c:	d503201f 	nop

000000000009e880 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   9e880:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e884:	aa0003e5 	mov	x5, x0
   9e888:	910003fd 	mov	x29, sp
   9e88c:	39403000 	ldrb	w0, [x0, #12]
   9e890:	36000440 	tbz	w0, #0, 9e918 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   9e894:	a94108a4 	ldp	x4, x2, [x5, #16]
   9e898:	12001c21 	and	w1, w1, #0xff
   9e89c:	eb02009f 	cmp	x4, x2
   9e8a0:	54000148 	b.hi	9e8c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>  // b.pmore
   9e8a4:	14000019 	b	9e908 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   9e8a8:	7100143f 	cmp	w1, #0x5
   9e8ac:	7a440860 	ccmp	w3, #0x4, #0x0, eq	// eq = none
   9e8b0:	540002c0 	b.eq	9e908 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>  // b.none
   9e8b4:	f9000ca2 	str	x2, [x5, #24]
   9e8b8:	6b01007f 	cmp	w3, w1
   9e8bc:	540001e0 	b.eq	9e8f8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>  // b.none
   9e8c0:	eb02009f 	cmp	x4, x2
   9e8c4:	54000229 	b.ls	9e908 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>  // b.plast
   9e8c8:	39400046 	ldrb	w6, [x2]
   9e8cc:	aa0203e0 	mov	x0, x2
   9e8d0:	39400443 	ldrb	w3, [x2, #1]
   9e8d4:	8b060042 	add	x2, x2, x6
   9e8d8:	eb02009f 	cmp	x4, x2
   9e8dc:	54fffe62 	b.cs	9e8a8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x28>  // b.hs, b.nlast
   9e8e0:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e8e4:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e8e8:	9132a021 	add	x1, x1, #0xca8
   9e8ec:	91338000 	add	x0, x0, #0xce0
   9e8f0:	52801642 	mov	w2, #0xb2                  	// #178
   9e8f4:	94000d83 	bl	a1f00 <assertion_failed>
   9e8f8:	f90010a0 	str	x0, [x5, #32]
   9e8fc:	f90014a0 	str	x0, [x5, #40]
   9e900:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9e904:	d65f03c0 	ret
   9e908:	d2800000 	mov	x0, #0x0                   	// #0
   9e90c:	f90010a0 	str	x0, [x5, #32]
   9e910:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9e914:	d65f03c0 	ret
   9e918:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e91c:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e920:	9132a021 	add	x1, x1, #0xca8
   9e924:	9120a000 	add	x0, x0, #0x828
   9e928:	52801502 	mov	w2, #0xa8                  	// #168
   9e92c:	94000d75 	bl	a1f00 <assertion_failed>

000000000009e930 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   9e930:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e934:	910003fd 	mov	x29, sp
   9e938:	39403001 	ldrb	w1, [x0, #12]
   9e93c:	360000a1 	tbz	w1, #0, 9e950 <CUSBConfigurationParser::GetCurrentDescriptor()+0x20>
   9e940:	f9401000 	ldr	x0, [x0, #32]
   9e944:	b4000120 	cbz	x0, 9e968 <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   9e948:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9e94c:	d65f03c0 	ret
   9e950:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e954:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e958:	9132a021 	add	x1, x1, #0xca8
   9e95c:	9120a000 	add	x0, x0, #0x828
   9e960:	52801a02 	mov	w2, #0xd0                  	// #208
   9e964:	94000d67 	bl	a1f00 <assertion_failed>
   9e968:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e96c:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9e970:	9132a021 	add	x1, x1, #0xca8
   9e974:	91340000 	add	x0, x0, #0xd00
   9e978:	52801a22 	mov	w2, #0xd1                  	// #209
   9e97c:	94000d61 	bl	a1f00 <assertion_failed>

000000000009e980 <CUSBConfigurationParser::Error(char const*) const>:
   9e980:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e984:	910003fd 	mov	x29, sp
   9e988:	a90153f3 	stp	x19, x20, [sp, #16]
   9e98c:	b4000241 	cbz	x1, 9e9d4 <CUSBConfigurationParser::Error(char const*) const+0x54>
   9e990:	aa0003f3 	mov	x19, x0
   9e994:	aa0103f4 	mov	x20, x1
   9e998:	94001496 	bl	a3bf0 <CLogger::Get()>
   9e99c:	aa1403e1 	mov	x1, x20
   9e9a0:	52800022 	mov	w2, #0x1                   	// #1
   9e9a4:	f9401665 	ldr	x5, [x19, #40]
   9e9a8:	f00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9e9ac:	91348063 	add	x3, x3, #0xd20
   9e9b0:	f9400264 	ldr	x4, [x19]
   9e9b4:	4b0400a4 	sub	w4, w5, w4
   9e9b8:	94001682 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e9bc:	f9400260 	ldr	x0, [x19]
   9e9c0:	aa1403e2 	mov	x2, x20
   9e9c4:	b9400a61 	ldr	w1, [x19, #8]
   9e9c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e9cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e9d0:	14000f1c 	b	a2640 <debug_hexdump(void const*, unsigned int, char const*)>
   9e9d4:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9e9d8:	d00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9e9dc:	9132a021 	add	x1, x1, #0xca8
   9e9e0:	9119e000 	add	x0, x0, #0x678
   9e9e4:	52801b02 	mov	w2, #0xd8                  	// #216
   9e9e8:	94000d46 	bl	a1f00 <assertion_failed>
   9e9ec:	00000000 	udf	#0

000000000009e9f0 <CUSBGamePadDevice::GetInitialState()>:
   9e9f0:	91012000 	add	x0, x0, #0x48
   9e9f4:	d65f03c0 	ret
   9e9f8:	d503201f 	nop
   9e9fc:	d503201f 	nop

000000000009ea00 <CUSBGamePadDevice::Configure()>:
   9ea00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ea04:	910003fd 	mov	x29, sp
   9ea08:	7942a001 	ldrh	w1, [x0, #336]
   9ea0c:	a90153f3 	stp	x19, x20, [sp, #16]
   9ea10:	340004c1 	cbz	w1, 9eaa8 <CUSBGamePadDevice::Configure()+0xa8>
   9ea14:	aa0003f3 	mov	x19, x0
   9ea18:	97ffd2de 	bl	93590 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   9ea1c:	2a0003f4 	mov	w20, w0
   9ea20:	360002f4 	tbz	w20, #0, 9ea7c <CUSBGamePadDevice::Configure()+0x7c>
   9ea24:	b9415660 	ldr	w0, [x19, #340]
   9ea28:	f90013f5 	str	x21, [sp, #32]
   9ea2c:	350004c0 	cbnz	w0, 9eac4 <CUSBGamePadDevice::Configure()+0xc4>
   9ea30:	d00000d5 	adrp	x21, b8000 <FromUmsd+0x60>
   9ea34:	910c02b5 	add	x21, x21, #0x300
   9ea38:	aa1503e2 	mov	x2, x21
   9ea3c:	52800021 	mov	w1, #0x1                   	// #1
   9ea40:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ea44:	9130a000 	add	x0, x0, #0xc28
   9ea48:	940035d2 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   9ea4c:	b9015660 	str	w0, [x19, #340]
   9ea50:	94001118 	bl	a2eb0 <CDeviceNameService::Get()>
   9ea54:	b9415662 	ldr	w2, [x19, #340]
   9ea58:	910022a1 	add	x1, x21, #0x8
   9ea5c:	aa1303e3 	mov	x3, x19
   9ea60:	52800004 	mov	w4, #0x0                   	// #0
   9ea64:	9400111f 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9ea68:	f94013f5 	ldr	x21, [sp, #32]
   9ea6c:	2a1403e0 	mov	w0, w20
   9ea70:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ea74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ea78:	d65f03c0 	ret
   9ea7c:	9400145d 	bl	a3bf0 <CLogger::Get()>
   9ea80:	52800022 	mov	w2, #0x1                   	// #1
   9ea84:	d00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9ea88:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9ea8c:	912c0063 	add	x3, x3, #0xb00
   9ea90:	910c0021 	add	x1, x1, #0x300
   9ea94:	9400164b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9ea98:	2a1403e0 	mov	w0, w20
   9ea9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eaa0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9eaa4:	d65f03c0 	ret
   9eaa8:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eaac:	d00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9eab0:	91354021 	add	x1, x1, #0xd50
   9eab4:	911ee000 	add	x0, x0, #0x7b8
   9eab8:	52800742 	mov	w2, #0x3a                  	// #58
   9eabc:	f90013f5 	str	x21, [sp, #32]
   9eac0:	94000d10 	bl	a1f00 <assertion_failed>
   9eac4:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eac8:	d00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9eacc:	91354021 	add	x1, x1, #0xd50
   9ead0:	9133c000 	add	x0, x0, #0xcf0
   9ead4:	52800842 	mov	w2, #0x42                  	// #66
   9ead8:	94000d0a 	bl	a1f00 <assertion_failed>
   9eadc:	d503201f 	nop

000000000009eae0 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   9eae0:	b4000321 	cbz	x1, 9eb44 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   9eae4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9eae8:	910003fd 	mov	x29, sp
   9eaec:	7942a003 	ldrh	w3, [x0, #336]
   9eaf0:	a90153f3 	stp	x19, x20, [sp, #16]
   9eaf4:	aa0003f3 	mov	x19, x0
   9eaf8:	6b02007f 	cmp	w3, w2
   9eafc:	54000080 	b.eq	9eb0c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.none
   9eb00:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eb04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9eb08:	d65f03c0 	ret
   9eb0c:	f940a402 	ldr	x2, [x0, #328]
   9eb10:	b4ffff82 	cbz	x2, 9eb00 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   9eb14:	aa0003f4 	mov	x20, x0
   9eb18:	f8448682 	ldr	x2, [x20], #72
   9eb1c:	f9404842 	ldr	x2, [x2, #144]
   9eb20:	d63f0040 	blr	x2
   9eb24:	f940a662 	ldr	x2, [x19, #328]
   9eb28:	aa1403e1 	mov	x1, x20
   9eb2c:	b9415660 	ldr	w0, [x19, #340]
   9eb30:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eb34:	51000400 	sub	w0, w0, #0x1
   9eb38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9eb3c:	aa0203f0 	mov	x16, x2
   9eb40:	d61f0200 	br	x16
   9eb44:	d65f03c0 	ret
   9eb48:	d503201f 	nop
   9eb4c:	d503201f 	nop

000000000009eb50 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   9eb50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9eb54:	910003fd 	mov	x29, sp
   9eb58:	f940a402 	ldr	x2, [x0, #328]
   9eb5c:	b50000a2 	cbnz	x2, 9eb70 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x20>
   9eb60:	f900a401 	str	x1, [x0, #328]
   9eb64:	b4000121 	cbz	x1, 9eb88 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x38>
   9eb68:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9eb6c:	d65f03c0 	ret
   9eb70:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eb74:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9eb78:	91354021 	add	x1, x1, #0xd50
   9eb7c:	91358000 	add	x0, x0, #0xd60
   9eb80:	52800a22 	mov	w2, #0x51                  	// #81
   9eb84:	94000cdf 	bl	a1f00 <assertion_failed>
   9eb88:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eb8c:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9eb90:	91354021 	add	x1, x1, #0xd50
   9eb94:	9135e000 	add	x0, x0, #0xd78
   9eb98:	52800a62 	mov	w2, #0x53                  	// #83
   9eb9c:	94000cd9 	bl	a1f00 <assertion_failed>

000000000009eba0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   9eba0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9eba4:	52800002 	mov	w2, #0x0                   	// #0
   9eba8:	910003fd 	mov	x29, sp
   9ebac:	f9000bf3 	str	x19, [sp, #16]
   9ebb0:	aa0003f3 	mov	x19, x0
   9ebb4:	97ffd233 	bl	93480 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   9ebb8:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ebbc:	910c4000 	add	x0, x0, #0x310
   9ebc0:	f9000260 	str	x0, [x19]
   9ebc4:	91012260 	add	x0, x19, #0x48
   9ebc8:	f900a67f 	str	xzr, [x19, #328]
   9ebcc:	d2802002 	mov	x2, #0x100                 	// #256
   9ebd0:	7902a27f 	strh	wzr, [x19, #336]
   9ebd4:	52800001 	mov	w1, #0x0                   	// #0
   9ebd8:	b901567f 	str	wzr, [x19, #340]
   9ebdc:	f9400bf3 	ldr	x19, [sp, #16]
   9ebe0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ebe4:	14003161 	b	ab168 <memset>
   9ebe8:	d503201f 	nop
   9ebec:	d503201f 	nop

000000000009ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   9ebf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ebf4:	90000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ebf8:	910c4021 	add	x1, x1, #0x310
   9ebfc:	910003fd 	mov	x29, sp
   9ec00:	f9000bf3 	str	x19, [sp, #16]
   9ec04:	aa0003f3 	mov	x19, x0
   9ec08:	b9415400 	ldr	w0, [x0, #340]
   9ec0c:	f9000261 	str	x1, [x19]
   9ec10:	f900a67f 	str	xzr, [x19, #328]
   9ec14:	350000a0 	cbnz	w0, 9ec28 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x38>
   9ec18:	aa1303e0 	mov	x0, x19
   9ec1c:	f9400bf3 	ldr	x19, [sp, #16]
   9ec20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ec24:	17ffd22f 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   9ec28:	940010a2 	bl	a2eb0 <CDeviceNameService::Get()>
   9ec2c:	b9415662 	ldr	w2, [x19, #340]
   9ec30:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9ec34:	910c0021 	add	x1, x1, #0x300
   9ec38:	52800003 	mov	w3, #0x0                   	// #0
   9ec3c:	91002021 	add	x1, x1, #0x8
   9ec40:	940010cc 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9ec44:	b9415661 	ldr	w1, [x19, #340]
   9ec48:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ec4c:	9130a000 	add	x0, x0, #0xc28
   9ec50:	94003580 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   9ec54:	aa1303e0 	mov	x0, x19
   9ec58:	f9400bf3 	ldr	x19, [sp, #16]
   9ec5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ec60:	17ffd220 	b	934e0 <CUSBHIDDevice::~CUSBHIDDevice()>
   9ec64:	d503201f 	nop
   9ec68:	d503201f 	nop
   9ec6c:	d503201f 	nop

000000000009ec70 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   9ec70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ec74:	910003fd 	mov	x29, sp
   9ec78:	f9000bf3 	str	x19, [sp, #16]
   9ec7c:	aa0003f3 	mov	x19, x0
   9ec80:	97ffffdc 	bl	9ebf0 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   9ec84:	aa1303e0 	mov	x0, x19
   9ec88:	d2802b01 	mov	x1, #0x158                 	// #344
   9ec8c:	f9400bf3 	ldr	x19, [sp, #16]
   9ec90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ec94:	140033c7 	b	abbb0 <operator delete(void*, unsigned long)>
	...

000000000009eca0 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE>:
   9eca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9eca4:	528007e2 	mov	w2, #0x3f                  	// #63
   9eca8:	52800021 	mov	w1, #0x1                   	// #1
   9ecac:	910003fd 	mov	x29, sp
   9ecb0:	f9000bf3 	str	x19, [sp, #16]
   9ecb4:	90000173 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   9ecb8:	9130a273 	add	x19, x19, #0xc28
   9ecbc:	aa1303e0 	mov	x0, x19
   9ecc0:	94003518 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9ecc4:	aa1303e1 	mov	x1, x19
   9ecc8:	90000162 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9eccc:	91336042 	add	x2, x2, #0xcd8
   9ecd0:	f9400bf3 	ldr	x19, [sp, #16]
   9ecd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ecd8:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ecdc:	f945a400 	ldr	x0, [x0, #2888]
   9ece0:	14002b38 	b	a99c0 <__cxa_atexit>
	...

000000000009ecf0 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   9ecf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ecf4:	90000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ecf8:	910ee021 	add	x1, x1, #0x3b8
   9ecfc:	910003fd 	mov	x29, sp
   9ed00:	f9000bf3 	str	x19, [sp, #16]
   9ed04:	aa0003f3 	mov	x19, x0
   9ed08:	f9000001 	str	x1, [x0]
   9ed0c:	94001069 	bl	a2eb0 <CDeviceNameService::Get()>
   9ed10:	b9403662 	ldr	w2, [x19, #52]
   9ed14:	52800003 	mov	w3, #0x0                   	// #0
   9ed18:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9ed1c:	910c4021 	add	x1, x1, #0x310
   9ed20:	94001094 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9ed24:	b9403661 	ldr	w1, [x19, #52]
   9ed28:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ed2c:	9130e000 	add	x0, x0, #0xc38
   9ed30:	94003548 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   9ed34:	aa1303e0 	mov	x0, x19
   9ed38:	f9400bf3 	ldr	x19, [sp, #16]
   9ed3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ed40:	14000ec8 	b	a2860 <CDevice::~CDevice()>
   9ed44:	d503201f 	nop
   9ed48:	d503201f 	nop
   9ed4c:	d503201f 	nop

000000000009ed50 <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)>:
   9ed50:	b4000064 	cbz	x4, 9ed5c <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)+0xc>
   9ed54:	aa0403f0 	mov	x16, x4
   9ed58:	d61f0200 	br	x16
   9ed5c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ed60:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ed64:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ed68:	910003fd 	mov	x29, sp
   9ed6c:	91364021 	add	x1, x1, #0xd90
   9ed70:	91368000 	add	x0, x0, #0xda0
   9ed74:	528007c2 	mov	w2, #0x3e                  	// #62
   9ed78:	94000c62 	bl	a1f00 <assertion_failed>
   9ed7c:	d503201f 	nop

000000000009ed80 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   9ed80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ed84:	90000161 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ed88:	910ee021 	add	x1, x1, #0x3b8
   9ed8c:	910003fd 	mov	x29, sp
   9ed90:	f9000bf3 	str	x19, [sp, #16]
   9ed94:	aa0003f3 	mov	x19, x0
   9ed98:	f9000001 	str	x1, [x0]
   9ed9c:	94001045 	bl	a2eb0 <CDeviceNameService::Get()>
   9eda0:	b9403662 	ldr	w2, [x19, #52]
   9eda4:	52800003 	mov	w3, #0x0                   	// #0
   9eda8:	d00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9edac:	910c4021 	add	x1, x1, #0x310
   9edb0:	94001070 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9edb4:	b9403661 	ldr	w1, [x19, #52]
   9edb8:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9edbc:	9130e000 	add	x0, x0, #0xc38
   9edc0:	94003524 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   9edc4:	aa1303e0 	mov	x0, x19
   9edc8:	94000ea6 	bl	a2860 <CDevice::~CDevice()>
   9edcc:	aa1303e0 	mov	x0, x19
   9edd0:	d2800701 	mov	x1, #0x38                  	// #56
   9edd4:	f9400bf3 	ldr	x19, [sp, #16]
   9edd8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9eddc:	14003375 	b	abbb0 <operator delete(void*, unsigned long)>

000000000009ede0 <CUSBMIDIDevice::CUSBMIDIDevice()>:
   9ede0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ede4:	910003fd 	mov	x29, sp
   9ede8:	a90153f3 	stp	x19, x20, [sp, #16]
   9edec:	aa0003f3 	mov	x19, x0
   9edf0:	94000ed0 	bl	a2930 <CDevice::CDevice()>
   9edf4:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9edf8:	910ee000 	add	x0, x0, #0x3b8
   9edfc:	d00000d4 	adrp	x20, b8000 <FromUmsd+0x60>
   9ee00:	910c4294 	add	x20, x20, #0x310
   9ee04:	f9000260 	str	x0, [x19]
   9ee08:	91002282 	add	x2, x20, #0x8
   9ee0c:	f9000a7f 	str	xzr, [x19, #16]
   9ee10:	52800021 	mov	w1, #0x1                   	// #1
   9ee14:	f900127f 	str	xzr, [x19, #32]
   9ee18:	90000160 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9ee1c:	9130e000 	add	x0, x0, #0xc38
   9ee20:	3900c27f 	strb	wzr, [x19, #48]
   9ee24:	940034db 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   9ee28:	b9003660 	str	w0, [x19, #52]
   9ee2c:	94001021 	bl	a2eb0 <CDeviceNameService::Get()>
   9ee30:	b9403662 	ldr	w2, [x19, #52]
   9ee34:	aa1403e1 	mov	x1, x20
   9ee38:	aa1303e3 	mov	x3, x19
   9ee3c:	52800004 	mov	w4, #0x0                   	// #0
   9ee40:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ee44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ee48:	14001026 	b	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9ee4c:	d503201f 	nop

000000000009ee50 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   9ee50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ee54:	910003fd 	mov	x29, sp
   9ee58:	b4000121 	cbz	x1, 9ee7c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   9ee5c:	f9400802 	ldr	x2, [x0, #16]
   9ee60:	f9000c01 	str	x1, [x0, #24]
   9ee64:	b5000182 	cbnz	x2, 9ee94 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   9ee68:	90000001 	adrp	x1, 9e000 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x10>
   9ee6c:	91354021 	add	x1, x1, #0xd50
   9ee70:	f9000801 	str	x1, [x0, #16]
   9ee74:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ee78:	d65f03c0 	ret
   9ee7c:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ee80:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ee84:	91364021 	add	x1, x1, #0xd90
   9ee88:	9136a000 	add	x0, x0, #0xda8
   9ee8c:	52800882 	mov	w2, #0x44                  	// #68
   9ee90:	94000c1c 	bl	a1f00 <assertion_failed>
   9ee94:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ee98:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ee9c:	91364021 	add	x1, x1, #0xd90
   9eea0:	9136e000 	add	x0, x0, #0xdb8
   9eea4:	52800982 	mov	w2, #0x4c                  	// #76
   9eea8:	94000c16 	bl	a1f00 <assertion_failed>
   9eeac:	d503201f 	nop

000000000009eeb0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)>:
   9eeb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9eeb4:	910003fd 	mov	x29, sp
   9eeb8:	f9400803 	ldr	x3, [x0, #16]
   9eebc:	f9000c02 	str	x2, [x0, #24]
   9eec0:	b50000a3 	cbnz	x3, 9eed4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x24>
   9eec4:	f9000801 	str	x1, [x0, #16]
   9eec8:	b4000121 	cbz	x1, 9eeec <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x3c>
   9eecc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9eed0:	d65f03c0 	ret
   9eed4:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eed8:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9eedc:	91364021 	add	x1, x1, #0xd90
   9eee0:	9136e000 	add	x0, x0, #0xdb8
   9eee4:	52800982 	mov	w2, #0x4c                  	// #76
   9eee8:	94000c06 	bl	a1f00 <assertion_failed>
   9eeec:	f00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9eef0:	f00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9eef4:	91364021 	add	x1, x1, #0xd90
   9eef8:	91374000 	add	x0, x0, #0xdd0
   9eefc:	528009c2 	mov	w2, #0x4e                  	// #78
   9ef00:	94000c00 	bl	a1f00 <assertion_failed>
   9ef04:	d503201f 	nop
   9ef08:	d503201f 	nop
   9ef0c:	d503201f 	nop

000000000009ef10 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)>:
   9ef10:	aa0003e3 	mov	x3, x0
   9ef14:	aa0103e0 	mov	x0, x1
   9ef18:	2a0203e1 	mov	w1, w2
   9ef1c:	f9401064 	ldr	x4, [x3, #32]
   9ef20:	b4000084 	cbz	x4, 9ef30 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x20>
   9ef24:	f9401462 	ldr	x2, [x3, #40]
   9ef28:	aa0403f0 	mov	x16, x4
   9ef2c:	d61f0200 	br	x16
   9ef30:	52800000 	mov	w0, #0x0                   	// #0
   9ef34:	d65f03c0 	ret
   9ef38:	d503201f 	nop
   9ef3c:	d503201f 	nop

000000000009ef40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)>:
   9ef40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ef44:	71003c3f 	cmp	w1, #0xf
   9ef48:	910003fd 	mov	x29, sp
   9ef4c:	a90153f3 	stp	x19, x20, [sp, #16]
   9ef50:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ef54:	d10043ff 	sub	sp, sp, #0x10
   9ef58:	54001828 	b.hi	9f25c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x31c>  // b.pmore
   9ef5c:	b4001a02 	cbz	x2, 9f29c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x35c>
   9ef60:	34001aa3 	cbz	w3, 9f2b4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
   9ef64:	aa0003ea 	mov	x10, x0
   9ef68:	531e7460 	lsl	w0, w3, #2
   9ef6c:	91003c00 	add	x0, x0, #0xf
   9ef70:	92704004 	and	x4, x0, #0x1ffff0000
   9ef74:	927c7000 	and	x0, x0, #0x1fffffff0
   9ef78:	cb2463e4 	sub	x4, sp, x4
   9ef7c:	eb2463ff 	cmp	sp, x4
   9ef80:	540000a0 	b.eq	9ef94 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x54>  // b.none
   9ef84:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   9ef88:	eb2463ff 	cmp	sp, x4
   9ef8c:	f90203ff 	str	xzr, [sp, #1024]
   9ef90:	54ffffa1 	b.ne	9ef84 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x44>  // b.any
   9ef94:	92403c00 	and	x0, x0, #0xffff
   9ef98:	cb2063ff 	sub	sp, sp, x0
   9ef9c:	f110001f 	cmp	x0, #0x400
   9efa0:	f90003ff 	str	xzr, [sp]
   9efa4:	54001482 	b.cs	9f234 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2f4>  // b.hs, b.nlast
   9efa8:	531c0c29 	ubfiz	w9, w1, #4, #4
   9efac:	910043e0 	add	x0, sp, #0x10
   9efb0:	d00000cb 	adrp	x11, b8000 <FromUmsd+0x60>
   9efb4:	910c416b 	add	x11, x11, #0x310
   9efb8:	8b234048 	add	x8, x2, w3, uxtw
   9efbc:	528000b0 	mov	w16, #0x5                   	// #5
   9efc0:	9100416b 	add	x11, x11, #0x10
   9efc4:	321e012d 	orr	w13, w9, #0x4
   9efc8:	321f0136 	orr	w22, w9, #0x2
   9efcc:	2a100130 	orr	w16, w9, w16
   9efd0:	32000535 	orr	w21, w9, #0x3
   9efd4:	aa0003e3 	mov	x3, x0
   9efd8:	d280000c 	mov	x12, #0x0                   	// #0
   9efdc:	52800005 	mov	w5, #0x0                   	// #0
   9efe0:	52800006 	mov	w6, #0x0                   	// #0
   9efe4:	d2800001 	mov	x1, #0x0                   	// #0
   9efe8:	52800032 	mov	w18, #0x1                   	// #1
   9efec:	128001f4 	mov	w20, #0xfffffff0            	// #-16
   9eff0:	d280002f 	mov	x15, #0x1                   	// #1
   9eff4:	d28dd40e 	mov	x14, #0x6ea0                	// #28320
   9eff8:	d28000b1 	mov	x17, #0x5                   	// #5
   9effc:	128001be 	mov	w30, #0xfffffff2            	// #-14
   9f000:	1400000f 	b	9f03c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xfc>
   9f004:	7103be7f 	cmp	w19, #0xef
   9f008:	54000528 	b.hi	9f0ac <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x16c>  // b.pmore
   9f00c:	53047e64 	lsr	w4, w19, #4
   9f010:	91000421 	add	x1, x1, #0x1
   9f014:	2a040125 	orr	w5, w9, w4
   9f018:	38001465 	strb	w5, [x3], #1
   9f01c:	b8647965 	ldr	w5, [x11, x4, lsl #2]
   9f020:	38001473 	strb	w19, [x3], #1
   9f024:	91000421 	add	x1, x1, #0x1
   9f028:	710004a5 	subs	w5, w5, #0x1
   9f02c:	52800026 	mov	w6, #0x1                   	// #1
   9f030:	54000620 	b.eq	9f0f4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1b4>  // b.none
   9f034:	eb02011f 	cmp	x8, x2
   9f038:	54000240 	b.eq	9f080 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x140>  // b.none
   9f03c:	38401453 	ldrb	w19, [x2], #1
   9f040:	710004df 	cmp	w6, #0x1
   9f044:	54fffee0 	b.eq	9f020 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xe0>  // b.none
   9f048:	710008df 	cmp	w6, #0x2
   9f04c:	54fffdc1 	b.ne	9f004 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc4>  // b.any
   9f050:	aa0303e7 	mov	x7, x3
   9f054:	71000cbf 	cmp	w5, #0x3
   9f058:	54000660 	b.eq	9f124 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1e4>  // b.none
   9f05c:	380014f3 	strb	w19, [x7], #1
   9f060:	91000421 	add	x1, x1, #0x1
   9f064:	7103de7f 	cmp	w19, #0xf7
   9f068:	110004a3 	add	w3, w5, #0x1
   9f06c:	540006e0 	b.eq	9f148 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x208>  // b.none
   9f070:	2a0303e5 	mov	w5, w3
   9f074:	eb02011f 	cmp	x8, x2
   9f078:	aa0703e3 	mov	x3, x7
   9f07c:	54fffe01 	b.ne	9f03c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xfc>  // b.any
   9f080:	35000fa6 	cbnz	w6, 9f274 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x334>
   9f084:	f9401143 	ldr	x3, [x10, #32]
   9f088:	b40009e3 	cbz	x3, 9f1c4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x284>
   9f08c:	f9401542 	ldr	x2, [x10, #40]
   9f090:	d63f0060 	blr	x3
   9f094:	12001c00 	and	w0, w0, #0xff
   9f098:	910003bf 	mov	sp, x29
   9f09c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f0a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f0a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f0a8:	d65f03c0 	ret
   9f0ac:	7103c27f 	cmp	w19, #0xf0
   9f0b0:	54000a80 	b.eq	9f200 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2c0>  // b.none
   9f0b4:	11003e64 	add	w4, w19, #0xf
   9f0b8:	9ac421e4 	lsl	x4, x15, x4
   9f0bc:	ea0e009f 	tst	x4, x14
   9f0c0:	54000961 	b.ne	9f1ec <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2ac>  // b.any
   9f0c4:	ea11009f 	tst	x4, x17
   9f0c8:	54000821 	b.ne	9f1cc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x28c>  // b.any
   9f0cc:	7103ca7f 	cmp	w19, #0xf2
   9f0d0:	54000681 	b.ne	9f1a0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x260>  // b.any
   9f0d4:	aa0303e4 	mov	x4, x3
   9f0d8:	91000821 	add	x1, x1, #0x2
   9f0dc:	52800045 	mov	w5, #0x2                   	// #2
   9f0e0:	52800026 	mov	w6, #0x1                   	// #1
   9f0e4:	38002495 	strb	w21, [x4], #2
   9f0e8:	3900047e 	strb	w30, [x3, #1]
   9f0ec:	aa0403e3 	mov	x3, x4
   9f0f0:	17ffffd1 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f0f4:	aa0303e4 	mov	x4, x3
   9f0f8:	aa0403e3 	mov	x3, x4
   9f0fc:	92400424 	and	x4, x1, #0x3
   9f100:	cb030025 	sub	x5, x1, x3
   9f104:	b40000a4 	cbz	x4, 9f118 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1d8>
   9f108:	3800147f 	strb	wzr, [x3], #1
   9f10c:	8b050061 	add	x1, x3, x5
   9f110:	92400424 	and	x4, x1, #0x3
   9f114:	b5ffffa4 	cbnz	x4, 9f108 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1c8>
   9f118:	52800005 	mov	w5, #0x0                   	// #0
   9f11c:	52800006 	mov	w6, #0x0                   	// #0
   9f120:	17ffffc5 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f124:	380024ed 	strb	w13, [x7], #2
   9f128:	91000821 	add	x1, x1, #0x2
   9f12c:	39000473 	strb	w19, [x3, #1]
   9f130:	7103de7f 	cmp	w19, #0xf7
   9f134:	54000840 	b.eq	9f23c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2fc>  // b.none
   9f138:	aa0303ec 	mov	x12, x3
   9f13c:	52800025 	mov	w5, #0x1                   	// #1
   9f140:	aa0703e3 	mov	x3, x7
   9f144:	17ffffbc 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f148:	110014a4 	add	w4, w5, #0x5
   9f14c:	7100087f 	cmp	w3, #0x2
   9f150:	2a040124 	orr	w4, w9, w4
   9f154:	39000184 	strb	w4, [x12]
   9f158:	110008a6 	add	w6, w5, #0x2
   9f15c:	54000648 	b.hi	9f224 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2e4>  // b.pmore
   9f160:	2a0303e4 	mov	w4, w3
   9f164:	aa0703f3 	mov	x19, x7
   9f168:	380014ff 	strb	wzr, [x7], #1
   9f16c:	4b1300e3 	sub	w3, w7, w19
   9f170:	0b040063 	add	w3, w3, w4
   9f174:	7100087f 	cmp	w3, #0x2
   9f178:	54ffff89 	b.ls	9f168 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x228>  // b.plast
   9f17c:	4b050244 	sub	w4, w18, w5
   9f180:	110004c6 	add	w6, w6, #0x1
   9f184:	91000421 	add	x1, x1, #0x1
   9f188:	91000483 	add	x3, x4, #0x1
   9f18c:	0b060085 	add	w5, w4, w6
   9f190:	8b040021 	add	x1, x1, x4
   9f194:	8b030263 	add	x3, x19, x3
   9f198:	52800006 	mov	w6, #0x0                   	// #0
   9f19c:	17ffffa6 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f1a0:	94001294 	bl	a3bf0 <CLogger::Get()>
   9f1a4:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9f1a8:	910c4021 	add	x1, x1, #0x310
   9f1ac:	d00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9f1b0:	2a1303e4 	mov	w4, w19
   9f1b4:	91002021 	add	x1, x1, #0x8
   9f1b8:	9137e063 	add	x3, x3, #0xdf8
   9f1bc:	52800042 	mov	w2, #0x2                   	// #2
   9f1c0:	94001480 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9f1c4:	52800000 	mov	w0, #0x0                   	// #0
   9f1c8:	17ffffb4 	b	9f098 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x158>
   9f1cc:	aa0303e4 	mov	x4, x3
   9f1d0:	52800025 	mov	w5, #0x1                   	// #1
   9f1d4:	91000821 	add	x1, x1, #0x2
   9f1d8:	2a0503e6 	mov	w6, w5
   9f1dc:	38002496 	strb	w22, [x4], #2
   9f1e0:	39000473 	strb	w19, [x3, #1]
   9f1e4:	aa0403e3 	mov	x3, x4
   9f1e8:	17ffff93 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f1ec:	aa0303e4 	mov	x4, x3
   9f1f0:	91000821 	add	x1, x1, #0x2
   9f1f4:	38002490 	strb	w16, [x4], #2
   9f1f8:	39000473 	strb	w19, [x3, #1]
   9f1fc:	17ffffbf 	b	9f0f8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1b8>
   9f200:	aa0303e4 	mov	x4, x3
   9f204:	aa0303ec 	mov	x12, x3
   9f208:	91000821 	add	x1, x1, #0x2
   9f20c:	52800025 	mov	w5, #0x1                   	// #1
   9f210:	52800046 	mov	w6, #0x2                   	// #2
   9f214:	3800248d 	strb	w13, [x4], #2
   9f218:	39000474 	strb	w20, [x3, #1]
   9f21c:	aa0403e3 	mov	x3, x4
   9f220:	17ffff85 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f224:	2a0603e5 	mov	w5, w6
   9f228:	aa0703e3 	mov	x3, x7
   9f22c:	52800006 	mov	w6, #0x0                   	// #0
   9f230:	17ffff81 	b	9f034 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9f234:	f90203ff 	str	xzr, [sp, #1024]
   9f238:	17ffff5c 	b	9efa8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x68>
   9f23c:	528000a4 	mov	w4, #0x5                   	// #5
   9f240:	2a040124 	orr	w4, w9, w4
   9f244:	aa0303ec 	mov	x12, x3
   9f248:	aa0703f3 	mov	x19, x7
   9f24c:	52800005 	mov	w5, #0x0                   	// #0
   9f250:	39000064 	strb	w4, [x3]
   9f254:	52800024 	mov	w4, #0x1                   	// #1
   9f258:	17ffffc4 	b	9f168 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x228>
   9f25c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f260:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f264:	91364021 	add	x1, x1, #0xd90
   9f268:	9137a000 	add	x0, x0, #0xde8
   9f26c:	52800ba2 	mov	w2, #0x5d                  	// #93
   9f270:	94000b24 	bl	a1f00 <assertion_failed>
   9f274:	9400125f 	bl	a3bf0 <CLogger::Get()>
   9f278:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9f27c:	910c4021 	add	x1, x1, #0x310
   9f280:	91002021 	add	x1, x1, #0x8
   9f284:	d00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9f288:	52800042 	mov	w2, #0x2                   	// #2
   9f28c:	91388063 	add	x3, x3, #0xe20
   9f290:	9400144c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9f294:	52800000 	mov	w0, #0x0                   	// #0
   9f298:	17ffff80 	b	9f098 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x158>
   9f29c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f2a0:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9f2a4:	91364021 	add	x1, x1, #0xd90
   9f2a8:	912d4000 	add	x0, x0, #0xb50
   9f2ac:	52800bc2 	mov	w2, #0x5e                  	// #94
   9f2b0:	94000b14 	bl	a1f00 <assertion_failed>
   9f2b4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f2b8:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9f2bc:	91364021 	add	x1, x1, #0xd90
   9f2c0:	912d8000 	add	x0, x0, #0xb60
   9f2c4:	52800be2 	mov	w2, #0x5f                  	// #95
   9f2c8:	94000b0e 	bl	a1f00 <assertion_failed>
   9f2cc:	d503201f 	nop

000000000009f2d0 <CUSBMIDIDevice::SetAllSoundOffOnUSBError(bool)>:
   9f2d0:	3900c001 	strb	w1, [x0, #48]
   9f2d4:	d65f03c0 	ret
   9f2d8:	d503201f 	nop
   9f2dc:	d503201f 	nop

000000000009f2e0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>:
   9f2e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9f2e4:	910003fd 	mov	x29, sp
   9f2e8:	a90153f3 	stp	x19, x20, [sp, #16]
   9f2ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   9f2f0:	b40003e1 	cbz	x1, 9f36c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x8c>
   9f2f4:	aa0003f5 	mov	x21, x0
   9f2f8:	12000440 	and	w0, w2, #0x3
   9f2fc:	35000440 	cbnz	w0, 9f384 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xa4>
   9f300:	8b224034 	add	x20, x1, w2, uxtw
   9f304:	aa0103f3 	mov	x19, x1
   9f308:	eb14003f 	cmp	x1, x20
   9f30c:	54000482 	b.cs	9f39c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xbc>  // b.hs, b.nlast
   9f310:	b00000d6 	adrp	x22, b8000 <FromUmsd+0x60>
   9f314:	910c42d6 	add	x22, x22, #0x310
   9f318:	910042d6 	add	x22, x22, #0x10
   9f31c:	52800000 	mov	w0, #0x0                   	// #0
   9f320:	39400261 	ldrb	w1, [x19]
   9f324:	34000161 	cbz	w1, 9f350 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x70>
   9f328:	f9400aa5 	ldr	x5, [x21, #16]
   9f32c:	b4000105 	cbz	x5, 9f34c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x6c>
   9f330:	92400c22 	and	x2, x1, #0xf
   9f334:	b94036a3 	ldr	w3, [x21, #52]
   9f338:	f9400ea4 	ldr	x4, [x21, #24]
   9f33c:	53047c20 	lsr	w0, w1, #4
   9f340:	b8627ac2 	ldr	w2, [x22, x2, lsl #2]
   9f344:	91000661 	add	x1, x19, #0x1
   9f348:	d63f00a0 	blr	x5
   9f34c:	52800020 	mov	w0, #0x1                   	// #1
   9f350:	91001273 	add	x19, x19, #0x4
   9f354:	eb13029f 	cmp	x20, x19
   9f358:	54fffe48 	b.hi	9f320 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x40>  // b.pmore
   9f35c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f360:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f364:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f368:	d65f03c0 	ret
   9f36c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f370:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f374:	91364021 	add	x1, x1, #0xd90
   9f378:	9138e000 	add	x0, x0, #0xe38
   9f37c:	52801d62 	mov	w2, #0xeb                  	// #235
   9f380:	94000ae0 	bl	a1f00 <assertion_failed>
   9f384:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f388:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f38c:	91364021 	add	x1, x1, #0xd90
   9f390:	91390000 	add	x0, x0, #0xe40
   9f394:	52801d82 	mov	w2, #0xec                  	// #236
   9f398:	94000ada 	bl	a1f00 <assertion_failed>
   9f39c:	52800000 	mov	w0, #0x0                   	// #0
   9f3a0:	17ffffef 	b	9f35c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x7c>
   9f3a4:	d503201f 	nop
   9f3a8:	d503201f 	nop
   9f3ac:	d503201f 	nop

000000000009f3b0 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>:
   9f3b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f3b4:	910003fd 	mov	x29, sp
   9f3b8:	f9401003 	ldr	x3, [x0, #32]
   9f3bc:	f9001402 	str	x2, [x0, #40]
   9f3c0:	b50000a3 	cbnz	x3, 9f3d4 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x24>
   9f3c4:	f9001001 	str	x1, [x0, #32]
   9f3c8:	b4000121 	cbz	x1, 9f3ec <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x3c>
   9f3cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9f3d0:	d65f03c0 	ret
   9f3d4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f3d8:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f3dc:	91364021 	add	x1, x1, #0xd90
   9f3e0:	91398000 	add	x0, x0, #0xe60
   9f3e4:	52802162 	mov	w2, #0x10b                 	// #267
   9f3e8:	94000ac6 	bl	a1f00 <assertion_failed>
   9f3ec:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f3f0:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f3f4:	91364021 	add	x1, x1, #0xd90
   9f3f8:	9139e000 	add	x0, x0, #0xe78
   9f3fc:	528021a2 	mov	w2, #0x10d                 	// #269
   9f400:	94000ac0 	bl	a1f00 <assertion_failed>
   9f404:	d503201f 	nop
   9f408:	d503201f 	nop
   9f40c:	d503201f 	nop

000000000009f410 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>:
   9f410:	3940c000 	ldrb	w0, [x0, #48]
   9f414:	d65f03c0 	ret
	...

000000000009f420 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE>:
   9f420:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9f424:	528007e2 	mov	w2, #0x3f                  	// #63
   9f428:	52800021 	mov	w1, #0x1                   	// #1
   9f42c:	910003fd 	mov	x29, sp
   9f430:	f9000bf3 	str	x19, [sp, #16]
   9f434:	f0000153 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   9f438:	9130e273 	add	x19, x19, #0xc38
   9f43c:	aa1303e0 	mov	x0, x19
   9f440:	94003338 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9f444:	aa1303e1 	mov	x1, x19
   9f448:	f0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   9f44c:	91336042 	add	x2, x2, #0xcd8
   9f450:	f9400bf3 	ldr	x19, [sp, #16]
   9f454:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f458:	f0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9f45c:	f945a400 	ldr	x0, [x0, #2888]
   9f460:	14002958 	b	a99c0 <__cxa_atexit>
	...

000000000009f470 <CUSBSerialHostDevice::SetBaudRate(unsigned int)>:
   9f470:	52800020 	mov	w0, #0x1                   	// #1
   9f474:	d65f03c0 	ret
   9f478:	d503201f 	nop
   9f47c:	d503201f 	nop

000000000009f480 <CUSBSerialHostDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   9f480:	52800020 	mov	w0, #0x1                   	// #1
   9f484:	d65f03c0 	ret
   9f488:	d503201f 	nop
   9f48c:	d503201f 	nop

000000000009f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>:
   9f490:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9f494:	f0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9f498:	91102021 	add	x1, x1, #0x408
   9f49c:	910003fd 	mov	x29, sp
   9f4a0:	a90153f3 	stp	x19, x20, [sp, #16]
   9f4a4:	aa0003f3 	mov	x19, x0
   9f4a8:	f9401c00 	ldr	x0, [x0, #56]
   9f4ac:	f9000261 	str	x1, [x19]
   9f4b0:	b4000080 	cbz	x0, 9f4c0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x30>
   9f4b4:	f9400001 	ldr	x1, [x0]
   9f4b8:	f9400421 	ldr	x1, [x1, #8]
   9f4bc:	d63f0020 	blr	x1
   9f4c0:	f9402a74 	ldr	x20, [x19, #80]
   9f4c4:	f9001e7f 	str	xzr, [x19, #56]
   9f4c8:	b40000d4 	cbz	x20, 9f4e0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x50>
   9f4cc:	aa1403e0 	mov	x0, x20
   9f4d0:	97ffc2c4 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9f4d4:	aa1403e0 	mov	x0, x20
   9f4d8:	d2800401 	mov	x1, #0x20                  	// #32
   9f4dc:	940031b5 	bl	abbb0 <operator delete(void*, unsigned long)>
   9f4e0:	f9402674 	ldr	x20, [x19, #72]
   9f4e4:	f9002a7f 	str	xzr, [x19, #80]
   9f4e8:	b40000d4 	cbz	x20, 9f500 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x70>
   9f4ec:	aa1403e0 	mov	x0, x20
   9f4f0:	97ffc2bc 	bl	8ffe0 <CUSBEndpoint::~CUSBEndpoint()>
   9f4f4:	aa1403e0 	mov	x0, x20
   9f4f8:	d2800401 	mov	x1, #0x20                  	// #32
   9f4fc:	940031ad 	bl	abbb0 <operator delete(void*, unsigned long)>
   9f500:	f9402e60 	ldr	x0, [x19, #88]
   9f504:	f900267f 	str	xzr, [x19, #72]
   9f508:	b4000040 	cbz	x0, 9f510 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x80>
   9f50c:	940031a1 	bl	abb90 <operator delete[](void*)>
   9f510:	a905fe7f 	stp	xzr, xzr, [x19, #88]
   9f514:	aa1303e0 	mov	x0, x19
   9f518:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f51c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f520:	17ffc334 	b	901f0 <CUSBFunction::~CUSBFunction()>
   9f524:	d503201f 	nop
   9f528:	d503201f 	nop
   9f52c:	d503201f 	nop

000000000009f530 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>:
   9f530:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9f534:	910003fd 	mov	x29, sp
   9f538:	f9000bf3 	str	x19, [sp, #16]
   9f53c:	aa0003f3 	mov	x19, x0
   9f540:	97ffffd4 	bl	9f490 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   9f544:	aa1303e0 	mov	x0, x19
   9f548:	d2800f01 	mov	x1, #0x78                  	// #120
   9f54c:	f9400bf3 	ldr	x19, [sp, #16]
   9f550:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f554:	14003197 	b	abbb0 <operator delete(void*, unsigned long)>
   9f558:	d503201f 	nop
   9f55c:	d503201f 	nop

000000000009f560 <CUSBSerialHostDevice::Write(void const*, unsigned long)>:
   9f560:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9f564:	910003fd 	mov	x29, sp
   9f568:	a90153f3 	stp	x19, x20, [sp, #16]
   9f56c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9f570:	d10043ff 	sub	sp, sp, #0x10
   9f574:	b40009c1 	cbz	x1, 9f6ac <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x14c>
   9f578:	aa0003f3 	mov	x19, x0
   9f57c:	aa0103f5 	mov	x21, x1
   9f580:	aa0203f4 	mov	x20, x2
   9f584:	b4000a02 	cbz	x2, 9f6c4 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x164>
   9f588:	d5033fbf 	dmb	sy
   9f58c:	3941d264 	ldrb	w4, [x19, #116]
   9f590:	3707ffc4 	tbnz	w4, #0, 9f588 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x28>
   9f594:	aa1303e0 	mov	x0, x19
   9f598:	97ffc436 	bl	90670 <CUSBFunction::GetHost() const>
   9f59c:	aa0003f6 	mov	x22, x0
   9f5a0:	b40009e0 	cbz	x0, 9f6dc <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x17c>
   9f5a4:	d1000684 	sub	x4, x20, #0x1
   9f5a8:	b2401484 	orr	x4, x4, #0x3f
   9f5ac:	91010084 	add	x4, x4, #0x40
   9f5b0:	9270bc80 	and	x0, x4, #0xffffffffffff0000
   9f5b4:	927cec84 	and	x4, x4, #0xfffffffffffffff0
   9f5b8:	cb2063e0 	sub	x0, sp, x0
   9f5bc:	eb2063ff 	cmp	sp, x0
   9f5c0:	540000a0 	b.eq	9f5d4 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x74>  // b.none
   9f5c4:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   9f5c8:	eb2063ff 	cmp	sp, x0
   9f5cc:	f90203ff 	str	xzr, [sp, #1024]
   9f5d0:	54ffffa1 	b.ne	9f5c4 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x64>  // b.any
   9f5d4:	92403c84 	and	x4, x4, #0xffff
   9f5d8:	cb2463ff 	sub	sp, sp, x4
   9f5dc:	f110009f 	cmp	x4, #0x400
   9f5e0:	f90003ff 	str	xzr, [sp]
   9f5e4:	540002c2 	b.cs	9f63c <CUSBSerialHostDevice::Write(void const*, unsigned long)+0xdc>  // b.hs, b.nlast
   9f5e8:	91013fe0 	add	x0, sp, #0x4f
   9f5ec:	aa1503e1 	mov	x1, x21
   9f5f0:	927ae415 	and	x21, x0, #0xffffffffffffffc0
   9f5f4:	aa1403e2 	mov	x2, x20
   9f5f8:	aa1503e0 	mov	x0, x21
   9f5fc:	94002ef3 	bl	ab1c8 <memcpy>
   9f600:	f9402a61 	ldr	x1, [x19, #80]
   9f604:	b40002e1 	cbz	x1, 9f660 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x100>
   9f608:	2a1403e3 	mov	w3, w20
   9f60c:	aa1503e2 	mov	x2, x21
   9f610:	aa1603e0 	mov	x0, x22
   9f614:	52800004 	mov	w4, #0x0                   	// #0
   9f618:	97ffd29a 	bl	94080 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9f61c:	2a0003f3 	mov	w19, w0
   9f620:	37f802c0 	tbnz	w0, #31, 9f678 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x118>
   9f624:	910003bf 	mov	sp, x29
   9f628:	2a1303e0 	mov	w0, w19
   9f62c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f630:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f634:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f638:	d65f03c0 	ret
   9f63c:	f90203ff 	str	xzr, [sp, #1024]
   9f640:	91013fe0 	add	x0, sp, #0x4f
   9f644:	aa1503e1 	mov	x1, x21
   9f648:	927ae415 	and	x21, x0, #0xffffffffffffffc0
   9f64c:	aa1403e2 	mov	x2, x20
   9f650:	aa1503e0 	mov	x0, x21
   9f654:	94002edd 	bl	ab1c8 <memcpy>
   9f658:	f9402a61 	ldr	x1, [x19, #80]
   9f65c:	b5fffd61 	cbnz	x1, 9f608 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0xa8>
   9f660:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f664:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f668:	913a4021 	add	x1, x1, #0xe90
   9f66c:	913aa000 	add	x0, x0, #0xea8
   9f670:	528012a2 	mov	w2, #0x95                  	// #149
   9f674:	94000a23 	bl	a1f00 <assertion_failed>
   9f678:	9400115e 	bl	a3bf0 <CLogger::Get()>
   9f67c:	52800042 	mov	w2, #0x2                   	// #2
   9f680:	d00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9f684:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9f688:	913b0063 	add	x3, x3, #0xec0
   9f68c:	910d8021 	add	x1, x1, #0x360
   9f690:	9400134c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9f694:	910003bf 	mov	sp, x29
   9f698:	2a1303e0 	mov	w0, w19
   9f69c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f6a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f6a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f6a8:	d65f03c0 	ret
   9f6ac:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f6b0:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f6b4:	913a4021 	add	x1, x1, #0xe90
   9f6b8:	91384000 	add	x0, x0, #0xe10
   9f6bc:	52801042 	mov	w2, #0x82                  	// #130
   9f6c0:	94000a10 	bl	a1f00 <assertion_failed>
   9f6c4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f6c8:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f6cc:	913a4021 	add	x1, x1, #0xe90
   9f6d0:	91376000 	add	x0, x0, #0xdd8
   9f6d4:	52801062 	mov	w2, #0x83                  	// #131
   9f6d8:	94000a0a 	bl	a1f00 <assertion_failed>
   9f6dc:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f6e0:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9f6e4:	913a4021 	add	x1, x1, #0xe90
   9f6e8:	91330000 	add	x0, x0, #0xcc0
   9f6ec:	52801202 	mov	w2, #0x90                  	// #144
   9f6f0:	94000a04 	bl	a1f00 <assertion_failed>
   9f6f4:	d503201f 	nop
   9f6f8:	d503201f 	nop
   9f6fc:	d503201f 	nop

000000000009f700 <CUSBSerialHostDevice::Read(void*, unsigned long)>:
   9f700:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9f704:	910003fd 	mov	x29, sp
   9f708:	a90153f3 	stp	x19, x20, [sp, #16]
   9f70c:	b4000961 	cbz	x1, 9f838 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x138>
   9f710:	b4000a22 	cbz	x2, 9f854 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x154>
   9f714:	aa0103e3 	mov	x3, x1
   9f718:	aa0003f3 	mov	x19, x0
   9f71c:	d5033fbf 	dmb	sy
   9f720:	3941d001 	ldrb	w1, [x0, #116]
   9f724:	37000741 	tbnz	w1, #0, 9f80c <CUSBSerialHostDevice::Read(void*, unsigned long)+0x10c>
   9f728:	f9402c01 	ldr	x1, [x0, #88]
   9f72c:	b4000781 	cbz	x1, 9f81c <CUSBSerialHostDevice::Read(void*, unsigned long)+0x11c>
   9f730:	f9403005 	ldr	x5, [x0, #96]
   9f734:	b40009e5 	cbz	x5, 9f870 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x170>
   9f738:	f9403404 	ldr	x4, [x0, #104]
   9f73c:	eb0400bf 	cmp	x5, x4
   9f740:	54000a63 	b.cc	9f88c <CUSBSerialHostDevice::Read(void*, unsigned long)+0x18c>  // b.lo, b.ul, b.last
   9f744:	b9407005 	ldr	w5, [x0, #112]
   9f748:	eb05009f 	cmp	x4, x5
   9f74c:	54000ae3 	b.cc	9f8a8 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x1a8>  // b.lo, b.ul, b.last
   9f750:	540001e0 	b.eq	9f78c <CUSBSerialHostDevice::Read(void*, unsigned long)+0x8c>  // b.none
   9f754:	cb050084 	sub	x4, x4, x5
   9f758:	8b050021 	add	x1, x1, x5
   9f75c:	eb02009f 	cmp	x4, x2
   9f760:	aa0303e0 	mov	x0, x3
   9f764:	9a829094 	csel	x20, x4, x2, ls	// ls = plast
   9f768:	aa1403e2 	mov	x2, x20
   9f76c:	94002e97 	bl	ab1c8 <memcpy>
   9f770:	b9407261 	ldr	w1, [x19, #112]
   9f774:	2a1403e0 	mov	w0, w20
   9f778:	0b140021 	add	w1, w1, w20
   9f77c:	b9007261 	str	w1, [x19, #112]
   9f780:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f784:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f788:	d65f03c0 	ret
   9f78c:	f90013f5 	str	x21, [sp, #32]
   9f790:	97ffc3b8 	bl	90670 <CUSBFunction::GetHost() const>
   9f794:	aa0003f4 	mov	x20, x0
   9f798:	b4000960 	cbz	x0, 9f8c4 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x1c4>
   9f79c:	f9402660 	ldr	x0, [x19, #72]
   9f7a0:	b40009e0 	cbz	x0, 9f8dc <CUSBSerialHostDevice::Read(void*, unsigned long)+0x1dc>
   9f7a4:	d2801200 	mov	x0, #0x90                  	// #144
   9f7a8:	97ffde5a 	bl	97110 <CUSBRequest::operator new(unsigned long)>
   9f7ac:	f9402661 	ldr	x1, [x19, #72]
   9f7b0:	d2800004 	mov	x4, #0x0                   	// #0
   9f7b4:	f9402e62 	ldr	x2, [x19, #88]
   9f7b8:	aa0003f5 	mov	x21, x0
   9f7bc:	b9406263 	ldr	w3, [x19, #96]
   9f7c0:	97ffdd6c 	bl	96d70 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9f7c4:	aa1503e0 	mov	x0, x21
   9f7c8:	97ffde4a 	bl	970f0 <CUSBRequest::SetCompleteOnNAK()>
   9f7cc:	aa1303e3 	mov	x3, x19
   9f7d0:	aa1503e0 	mov	x0, x21
   9f7d4:	d2800002 	mov	x2, #0x0                   	// #0
   9f7d8:	90000001 	adrp	x1, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9f7dc:	91304021 	add	x1, x1, #0xc10
   9f7e0:	97ffde28 	bl	97080 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   9f7e4:	f9400283 	ldr	x3, [x20]
   9f7e8:	52800021 	mov	w1, #0x1                   	// #1
   9f7ec:	3901d261 	strb	w1, [x19, #116]
   9f7f0:	aa1403e0 	mov	x0, x20
   9f7f4:	aa1503e1 	mov	x1, x21
   9f7f8:	52800002 	mov	w2, #0x0                   	// #0
   9f7fc:	f9401463 	ldr	x3, [x3, #40]
   9f800:	d63f0060 	blr	x3
   9f804:	36000780 	tbz	w0, #0, 9f8f4 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x1f4>
   9f808:	f94013f5 	ldr	x21, [sp, #32]
   9f80c:	52800000 	mov	w0, #0x0                   	// #0
   9f810:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f814:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f818:	d65f03c0 	ret
   9f81c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f820:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f824:	913a4021 	add	x1, x1, #0xe90
   9f828:	913b6000 	add	x0, x0, #0xed8
   9f82c:	52801562 	mov	w2, #0xab                  	// #171
   9f830:	f90013f5 	str	x21, [sp, #32]
   9f834:	940009b3 	bl	a1f00 <assertion_failed>
   9f838:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f83c:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f840:	913a4021 	add	x1, x1, #0xe90
   9f844:	91384000 	add	x0, x0, #0xe10
   9f848:	52801422 	mov	w2, #0xa1                  	// #161
   9f84c:	f90013f5 	str	x21, [sp, #32]
   9f850:	940009ac 	bl	a1f00 <assertion_failed>
   9f854:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f858:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f85c:	913a4021 	add	x1, x1, #0xe90
   9f860:	91376000 	add	x0, x0, #0xdd8
   9f864:	52801442 	mov	w2, #0xa2                  	// #162
   9f868:	f90013f5 	str	x21, [sp, #32]
   9f86c:	940009a5 	bl	a1f00 <assertion_failed>
   9f870:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f874:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f878:	913a4021 	add	x1, x1, #0xe90
   9f87c:	913bc000 	add	x0, x0, #0xef0
   9f880:	52801582 	mov	w2, #0xac                  	// #172
   9f884:	f90013f5 	str	x21, [sp, #32]
   9f888:	9400099e 	bl	a1f00 <assertion_failed>
   9f88c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f890:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f894:	913a4021 	add	x1, x1, #0xe90
   9f898:	913c2000 	add	x0, x0, #0xf08
   9f89c:	528015a2 	mov	w2, #0xad                  	// #173
   9f8a0:	f90013f5 	str	x21, [sp, #32]
   9f8a4:	94000997 	bl	a1f00 <assertion_failed>
   9f8a8:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f8ac:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9f8b0:	913a4021 	add	x1, x1, #0xe90
   9f8b4:	913cc000 	add	x0, x0, #0xf30
   9f8b8:	528015c2 	mov	w2, #0xae                  	// #174
   9f8bc:	f90013f5 	str	x21, [sp, #32]
   9f8c0:	94000990 	bl	a1f00 <assertion_failed>
   9f8c4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f8c8:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9f8cc:	913a4021 	add	x1, x1, #0xe90
   9f8d0:	91330000 	add	x0, x0, #0xcc0
   9f8d4:	52801662 	mov	w2, #0xb3                  	// #179
   9f8d8:	9400098a 	bl	a1f00 <assertion_failed>
   9f8dc:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f8e0:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9f8e4:	913a4021 	add	x1, x1, #0xe90
   9f8e8:	912e2000 	add	x0, x0, #0xb88
   9f8ec:	528016a2 	mov	w2, #0xb5                  	// #181
   9f8f0:	94000984 	bl	a1f00 <assertion_failed>
   9f8f4:	940010bf 	bl	a3bf0 <CLogger::Get()>
   9f8f8:	d00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9f8fc:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9f900:	913d6063 	add	x3, x3, #0xf58
   9f904:	910d8021 	add	x1, x1, #0x360
   9f908:	52800042 	mov	w2, #0x2                   	// #2
   9f90c:	940012ad 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9f910:	3901d27f 	strb	wzr, [x19, #116]
   9f914:	aa1503e0 	mov	x0, x21
   9f918:	97ffdd36 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9f91c:	aa1503e0 	mov	x0, x21
   9f920:	d2801201 	mov	x1, #0x90                  	// #144
   9f924:	97ffde13 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   9f928:	f94013f5 	ldr	x21, [sp, #32]
   9f92c:	12800000 	mov	w0, #0xffffffff            	// #-1
   9f930:	17ffff94 	b	9f780 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x80>
   9f934:	d503201f 	nop
   9f938:	d503201f 	nop
   9f93c:	d503201f 	nop

000000000009f940 <CUSBSerialHostDevice::WriteHandler(void const*, unsigned long, void*)>:
   9f940:	b4000122 	cbz	x2, 9f964 <CUSBSerialHostDevice::WriteHandler(void const*, unsigned long, void*)+0x24>
   9f944:	aa0003e3 	mov	x3, x0
   9f948:	aa0203e0 	mov	x0, x2
   9f94c:	aa0103e2 	mov	x2, x1
   9f950:	aa0303e1 	mov	x1, x3
   9f954:	f9400004 	ldr	x4, [x0]
   9f958:	f9400c83 	ldr	x3, [x4, #24]
   9f95c:	aa0303f0 	mov	x16, x3
   9f960:	d61f0200 	br	x16
   9f964:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f968:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f96c:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f970:	910003fd 	mov	x29, sp
   9f974:	913a4021 	add	x1, x1, #0xe90
   9f978:	91288000 	add	x0, x0, #0xa20
   9f97c:	52802222 	mov	w2, #0x111                 	// #273
   9f980:	94000960 	bl	a1f00 <assertion_failed>
   9f984:	d503201f 	nop
   9f988:	d503201f 	nop
   9f98c:	d503201f 	nop

000000000009f990 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)>:
   9f990:	b4000122 	cbz	x2, 9f9b4 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0x24>
   9f994:	aa0003e3 	mov	x3, x0
   9f998:	aa0203e0 	mov	x0, x2
   9f99c:	aa0103e2 	mov	x2, x1
   9f9a0:	aa0303e1 	mov	x1, x3
   9f9a4:	f9400004 	ldr	x4, [x0]
   9f9a8:	f9400883 	ldr	x3, [x4, #16]
   9f9ac:	aa0303f0 	mov	x16, x3
   9f9b0:	d61f0200 	br	x16
   9f9b4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9f9b8:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9f9bc:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9f9c0:	910003fd 	mov	x29, sp
   9f9c4:	913a4021 	add	x1, x1, #0xe90
   9f9c8:	91288000 	add	x0, x0, #0xa20
   9f9cc:	52802322 	mov	w2, #0x119                 	// #281
   9f9d0:	9400094c 	bl	a1f00 <assertion_failed>
   9f9d4:	d503201f 	nop
   9f9d8:	d503201f 	nop
   9f9dc:	d503201f 	nop

000000000009f9e0 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)>:
   9f9e0:	b4000203 	cbz	x3, 9fa20 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)+0x40>
   9f9e4:	aa0303e4 	mov	x4, x3
   9f9e8:	90000005 	adrp	x5, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9f9ec:	911200a5 	add	x5, x5, #0x480
   9f9f0:	f9400063 	ldr	x3, [x3]
   9f9f4:	f9403066 	ldr	x6, [x3, #96]
   9f9f8:	eb0500df 	cmp	x6, x5
   9f9fc:	54000061 	b.ne	9fa08 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)+0x28>  // b.any
   9fa00:	52800020 	mov	w0, #0x1                   	// #1
   9fa04:	d65f03c0 	ret
   9fa08:	2a0203e3 	mov	w3, w2
   9fa0c:	aa0603f0 	mov	x16, x6
   9fa10:	2a0103e2 	mov	w2, w1
   9fa14:	2a0003e1 	mov	w1, w0
   9fa18:	aa0403e0 	mov	x0, x4
   9fa1c:	d61f0200 	br	x16
   9fa20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9fa24:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fa28:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9fa2c:	910003fd 	mov	x29, sp
   9fa30:	913a4021 	add	x1, x1, #0xe90
   9fa34:	91288000 	add	x0, x0, #0xa20
   9fa38:	52802582 	mov	w2, #0x12c                 	// #300
   9fa3c:	94000931 	bl	a1f00 <assertion_failed>

000000000009fa40 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)>:
   9fa40:	b40001c1 	cbz	x1, 9fa78 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)+0x38>
   9fa44:	aa0103e2 	mov	x2, x1
   9fa48:	90000003 	adrp	x3, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9fa4c:	9111c063 	add	x3, x3, #0x470
   9fa50:	f9400021 	ldr	x1, [x1]
   9fa54:	f9402c24 	ldr	x4, [x1, #88]
   9fa58:	eb03009f 	cmp	x4, x3
   9fa5c:	54000061 	b.ne	9fa68 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)+0x28>  // b.any
   9fa60:	52800020 	mov	w0, #0x1                   	// #1
   9fa64:	d65f03c0 	ret
   9fa68:	2a0003e1 	mov	w1, w0
   9fa6c:	aa0403f0 	mov	x16, x4
   9fa70:	aa0203e0 	mov	x0, x2
   9fa74:	d61f0200 	br	x16
   9fa78:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9fa7c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fa80:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9fa84:	910003fd 	mov	x29, sp
   9fa88:	913a4021 	add	x1, x1, #0xe90
   9fa8c:	91288000 	add	x0, x0, #0xa20
   9fa90:	52802422 	mov	w2, #0x121                 	// #289
   9fa94:	9400091b 	bl	a1f00 <assertion_failed>
   9fa98:	d503201f 	nop
   9fa9c:	d503201f 	nop

000000000009faa0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>:
   9faa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9faa4:	910003fd 	mov	x29, sp
   9faa8:	a90153f3 	stp	x19, x20, [sp, #16]
   9faac:	aa0003f3 	mov	x19, x0
   9fab0:	aa0203f4 	mov	x20, x2
   9fab4:	97ffc273 	bl	90480 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9fab8:	900000c0 	adrp	x0, b7000 <_etext+0x49c8>
   9fabc:	fd413001 	ldr	d1, [x0, #608]
   9fac0:	900000c1 	adrp	x1, b7000 <_etext+0x49c8>
   9fac4:	fd413420 	ldr	d0, [x1, #616]
   9fac8:	f0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9facc:	91102000 	add	x0, x0, #0x408
   9fad0:	f9000260 	str	x0, [x19]
   9fad4:	a903d27f 	stp	xzr, x20, [x19, #56]
   9fad8:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   9fadc:	a905fe7f 	stp	xzr, xzr, [x19, #88]
   9fae0:	f900367f 	str	xzr, [x19, #104]
   9fae4:	b900727f 	str	wzr, [x19, #112]
   9fae8:	3901d27f 	strb	wzr, [x19, #116]
   9faec:	6d028261 	stp	d1, d0, [x19, #40]
   9faf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9faf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9faf8:	d65f03c0 	ret
   9fafc:	d503201f 	nop

000000000009fb00 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)>:
   9fb00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fb04:	910003fd 	mov	x29, sp
   9fb08:	a90153f3 	stp	x19, x20, [sp, #16]
   9fb0c:	b4000581 	cbz	x1, 9fbbc <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   9fb10:	aa0003f3 	mov	x19, x0
   9fb14:	3941d000 	ldrb	w0, [x0, #116]
   9fb18:	360005e0 	tbz	w0, #0, 9fbd4 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   9fb1c:	aa0103f4 	mov	x20, x1
   9fb20:	b9407260 	ldr	w0, [x19, #112]
   9fb24:	f9403661 	ldr	x1, [x19, #104]
   9fb28:	eb00003f 	cmp	x1, x0
   9fb2c:	54000601 	b.ne	9fbec <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xec>  // b.any
   9fb30:	aa1403e0 	mov	x0, x20
   9fb34:	97ffdccb 	bl	96e60 <CUSBRequest::GetStatus() const>
   9fb38:	35000160 	cbnz	w0, 9fb64 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x64>
   9fb3c:	aa1403e0 	mov	x0, x20
   9fb40:	97ffdcac 	bl	96df0 <CUSBRequest::~CUSBRequest()>
   9fb44:	aa1403e0 	mov	x0, x20
   9fb48:	d2801201 	mov	x1, #0x90                  	// #144
   9fb4c:	97ffdd89 	bl	97170 <CUSBRequest::operator delete(void*, unsigned long)>
   9fb50:	3901d27f 	strb	wzr, [x19, #116]
   9fb54:	d5033f9f 	dsb	sy
   9fb58:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fb5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fb60:	d65f03c0 	ret
   9fb64:	aa1403e0 	mov	x0, x20
   9fb68:	97ffdcc2 	bl	96e70 <CUSBRequest::GetResultLength() const>
   9fb6c:	f9402261 	ldr	x1, [x19, #64]
   9fb70:	2a0003e0 	mov	w0, w0
   9fb74:	f9003660 	str	x0, [x19, #104]
   9fb78:	b9007261 	str	w1, [x19, #112]
   9fb7c:	b40001a0 	cbz	x0, 9fbb0 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   9fb80:	92407c21 	and	x1, x1, #0xffffffff
   9fb84:	eb01001f 	cmp	x0, x1
   9fb88:	54000140 	b.eq	9fbb0 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xb0>  // b.none
   9fb8c:	54fffd82 	b.cs	9fb3c <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x3c>  // b.hs, b.nlast
   9fb90:	94001018 	bl	a3bf0 <CLogger::Get()>
   9fb94:	d00000a3 	adrp	x3, b5000 <_etext+0x29c8>
   9fb98:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9fb9c:	913ea063 	add	x3, x3, #0xfa8
   9fba0:	910d8021 	add	x1, x1, #0x360
   9fba4:	52800042 	mov	w2, #0x2                   	// #2
   9fba8:	94001206 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9fbac:	d503201f 	nop
   9fbb0:	f900367f 	str	xzr, [x19, #104]
   9fbb4:	b900727f 	str	wzr, [x19, #112]
   9fbb8:	17ffffe1 	b	9fb3c <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x3c>
   9fbbc:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fbc0:	900000a0 	adrp	x0, b3000 <_etext+0x9c8>
   9fbc4:	913a4021 	add	x1, x1, #0xe90
   9fbc8:	9106c000 	add	x0, x0, #0x1b0
   9fbcc:	52801d02 	mov	w2, #0xe8                  	// #232
   9fbd0:	940008cc 	bl	a1f00 <assertion_failed>
   9fbd4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fbd8:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9fbdc:	913a4021 	add	x1, x1, #0xe90
   9fbe0:	913da000 	add	x0, x0, #0xf68
   9fbe4:	52801d22 	mov	w2, #0xe9                  	// #233
   9fbe8:	940008c6 	bl	a1f00 <assertion_failed>
   9fbec:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fbf0:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9fbf4:	913a4021 	add	x1, x1, #0xe90
   9fbf8:	913e0000 	add	x0, x0, #0xf80
   9fbfc:	52801d42 	mov	w2, #0xea                  	// #234
   9fc00:	940008c0 	bl	a1f00 <assertion_failed>
   9fc04:	d503201f 	nop
   9fc08:	d503201f 	nop
   9fc0c:	d503201f 	nop

000000000009fc10 <CUSBSerialHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   9fc10:	b4000082 	cbz	x2, 9fc20 <CUSBSerialHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   9fc14:	aa0003e1 	mov	x1, x0
   9fc18:	aa0203e0 	mov	x0, x2
   9fc1c:	17ffffb9 	b	9fb00 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)>
   9fc20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9fc24:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fc28:	f0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   9fc2c:	910003fd 	mov	x29, sp
   9fc30:	913a4021 	add	x1, x1, #0xe90
   9fc34:	91288000 	add	x0, x0, #0xa20
   9fc38:	52802122 	mov	w2, #0x109                 	// #265
   9fc3c:	940008b1 	bl	a1f00 <assertion_failed>

000000000009fc40 <CUSBSerialHostDevice::Configure()>:
   9fc40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9fc44:	910003fd 	mov	x29, sp
   9fc48:	a90153f3 	stp	x19, x20, [sp, #16]
   9fc4c:	aa0003f4 	mov	x20, x0
   9fc50:	f90013f5 	str	x21, [sp, #32]
   9fc54:	14000005 	b	9fc68 <CUSBSerialHostDevice::Configure()+0x28>
   9fc58:	39400e61 	ldrb	w1, [x19, #3]
   9fc5c:	12001421 	and	w1, w1, #0x3f
   9fc60:	7100083f 	cmp	w1, #0x2
   9fc64:	54000660 	b.eq	9fd30 <CUSBSerialHostDevice::Configure()+0xf0>  // b.none
   9fc68:	aa1403e0 	mov	x0, x20
   9fc6c:	528000a1 	mov	w1, #0x5                   	// #5
   9fc70:	97ffc28c 	bl	906a0 <CUSBFunction::GetDescriptor(unsigned char)>
   9fc74:	aa0003f3 	mov	x19, x0
   9fc78:	b5ffff00 	cbnz	x0, 9fc58 <CUSBSerialHostDevice::Configure()+0x18>
   9fc7c:	f9402680 	ldr	x0, [x20, #72]
   9fc80:	b4000760 	cbz	x0, 9fd6c <CUSBSerialHostDevice::Configure()+0x12c>
   9fc84:	f9402a81 	ldr	x1, [x20, #80]
   9fc88:	b4000721 	cbz	x1, 9fd6c <CUSBSerialHostDevice::Configure()+0x12c>
   9fc8c:	97ffc0f5 	bl	90060 <CUSBEndpoint::GetMaxPacketSize() const>
   9fc90:	2a0003e0 	mov	w0, w0
   9fc94:	f9003280 	str	x0, [x20, #96]
   9fc98:	94002fae 	bl	abb50 <operator new[](unsigned long)>
   9fc9c:	f9002e80 	str	x0, [x20, #88]
   9fca0:	aa1403e0 	mov	x0, x20
   9fca4:	97ffc18b 	bl	902d0 <CUSBFunction::Configure()>
   9fca8:	12001c15 	and	w21, w0, #0xff
   9fcac:	36000860 	tbz	w0, #0, 9fdb8 <CUSBSerialHostDevice::Configure()+0x178>
   9fcb0:	f9401e80 	ldr	x0, [x20, #56]
   9fcb4:	b5000940 	cbnz	x0, 9fddc <CUSBSerialHostDevice::Configure()+0x19c>
   9fcb8:	d2800b00 	mov	x0, #0x58                  	// #88
   9fcbc:	94002f9d 	bl	abb30 <operator new(unsigned long)>
   9fcc0:	aa0003f3 	mov	x19, x0
   9fcc4:	940000db 	bl	a0030 <CUSBSerialDevice::CUSBSerialDevice()>
   9fcc8:	f9001e93 	str	x19, [x20, #56]
   9fccc:	aa1303e0 	mov	x0, x19
   9fcd0:	aa1403e2 	mov	x2, x20
   9fcd4:	90000001 	adrp	x1, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9fcd8:	91250021 	add	x1, x1, #0x940
   9fcdc:	94000111 	bl	a0120 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)>
   9fce0:	f9401e80 	ldr	x0, [x20, #56]
   9fce4:	aa1403e2 	mov	x2, x20
   9fce8:	90000001 	adrp	x1, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9fcec:	91264021 	add	x1, x1, #0x990
   9fcf0:	94000124 	bl	a0180 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)>
   9fcf4:	f9401e80 	ldr	x0, [x20, #56]
   9fcf8:	aa1403e2 	mov	x2, x20
   9fcfc:	90000001 	adrp	x1, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9fd00:	91290021 	add	x1, x1, #0xa40
   9fd04:	94000137 	bl	a01e0 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)>
   9fd08:	f9401e80 	ldr	x0, [x20, #56]
   9fd0c:	90000001 	adrp	x1, 9f000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc0>
   9fd10:	91278021 	add	x1, x1, #0x9e0
   9fd14:	aa1403e2 	mov	x2, x20
   9fd18:	9400014a 	bl	a0240 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)>
   9fd1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fd20:	2a1503e0 	mov	w0, w21
   9fd24:	f94013f5 	ldr	x21, [sp, #32]
   9fd28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fd2c:	d65f03c0 	ret
   9fd30:	39c00a60 	ldrsb	w0, [x19, #2]
   9fd34:	37f80280 	tbnz	w0, #31, 9fd84 <CUSBSerialHostDevice::Configure()+0x144>
   9fd38:	f9402a80 	ldr	x0, [x20, #80]
   9fd3c:	b5000180 	cbnz	x0, 9fd6c <CUSBSerialHostDevice::Configure()+0x12c>
   9fd40:	d2800400 	mov	x0, #0x20                  	// #32
   9fd44:	94002f7b 	bl	abb30 <operator new(unsigned long)>
   9fd48:	aa0003f5 	mov	x21, x0
   9fd4c:	aa1403e0 	mov	x0, x20
   9fd50:	97ffc230 	bl	90610 <CUSBFunction::GetDevice() const>
   9fd54:	aa0003e1 	mov	x1, x0
   9fd58:	aa1303e2 	mov	x2, x19
   9fd5c:	aa1503e0 	mov	x0, x21
   9fd60:	97ffc014 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9fd64:	f9002a95 	str	x21, [x20, #80]
   9fd68:	17ffffc0 	b	9fc68 <CUSBSerialHostDevice::Configure()+0x28>
   9fd6c:	aa1403e0 	mov	x0, x20
   9fd70:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9fd74:	910d8021 	add	x1, x1, #0x360
   9fd78:	52800015 	mov	w21, #0x0                   	// #0
   9fd7c:	97ffc255 	bl	906d0 <CUSBFunction::ConfigurationError(char const*) const>
   9fd80:	17ffffe7 	b	9fd1c <CUSBSerialHostDevice::Configure()+0xdc>
   9fd84:	f9402680 	ldr	x0, [x20, #72]
   9fd88:	b5ffff20 	cbnz	x0, 9fd6c <CUSBSerialHostDevice::Configure()+0x12c>
   9fd8c:	d2800400 	mov	x0, #0x20                  	// #32
   9fd90:	94002f68 	bl	abb30 <operator new(unsigned long)>
   9fd94:	aa0003f5 	mov	x21, x0
   9fd98:	aa1403e0 	mov	x0, x20
   9fd9c:	97ffc21d 	bl	90610 <CUSBFunction::GetDevice() const>
   9fda0:	aa0003e1 	mov	x1, x0
   9fda4:	aa1303e2 	mov	x2, x19
   9fda8:	aa1503e0 	mov	x0, x21
   9fdac:	97ffc001 	bl	8fdb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9fdb0:	f9002695 	str	x21, [x20, #72]
   9fdb4:	17ffffad 	b	9fc68 <CUSBSerialHostDevice::Configure()+0x28>
   9fdb8:	94000f8e 	bl	a3bf0 <CLogger::Get()>
   9fdbc:	52800015 	mov	w21, #0x0                   	// #0
   9fdc0:	b00000a3 	adrp	x3, b4000 <_etext+0x19c8>
   9fdc4:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9fdc8:	91182063 	add	x3, x3, #0x608
   9fdcc:	910d8021 	add	x1, x1, #0x360
   9fdd0:	52800022 	mov	w2, #0x1                   	// #1
   9fdd4:	9400117b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9fdd8:	17ffffd1 	b	9fd1c <CUSBSerialHostDevice::Configure()+0xdc>
   9fddc:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9fde0:	b00000a0 	adrp	x0, b4000 <_etext+0x19c8>
   9fde4:	913a4021 	add	x1, x1, #0xe90
   9fde8:	91314000 	add	x0, x0, #0xc50
   9fdec:	52800e82 	mov	w2, #0x74                  	// #116
   9fdf0:	94000844 	bl	a1f00 <assertion_failed>
	...

000000000009fe00 <CUSBSerialDevice::~CUSBSerialDevice()>:
   9fe00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fe04:	f0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9fe08:	91120021 	add	x1, x1, #0x480
   9fe0c:	910003fd 	mov	x29, sp
   9fe10:	f9000bf3 	str	x19, [sp, #16]
   9fe14:	aa0003f3 	mov	x19, x0
   9fe18:	f9000001 	str	x1, [x0]
   9fe1c:	94000c25 	bl	a2eb0 <CDeviceNameService::Get()>
   9fe20:	b9405662 	ldr	w2, [x19, #84]
   9fe24:	52800003 	mov	w3, #0x0                   	// #0
   9fe28:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9fe2c:	910dc021 	add	x1, x1, #0x370
   9fe30:	94000c50 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9fe34:	b9405661 	ldr	w1, [x19, #84]
   9fe38:	f0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9fe3c:	91312000 	add	x0, x0, #0xc48
   9fe40:	94003104 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   9fe44:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   9fe48:	aa1303e0 	mov	x0, x19
   9fe4c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   9fe50:	f9400bf3 	ldr	x19, [sp, #16]
   9fe54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fe58:	14000a82 	b	a2860 <CDevice::~CDevice()>
   9fe5c:	d503201f 	nop

000000000009fe60 <CUSBSerialDevice::Write(void const*, unsigned long)>:
   9fe60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9fe64:	910003fd 	mov	x29, sp
   9fe68:	d10043ff 	sub	sp, sp, #0x10
   9fe6c:	f9400807 	ldr	x7, [x0, #16]
   9fe70:	b40006a7 	cbz	x7, 9ff44 <CUSBSerialDevice::Write(void const*, unsigned long)+0xe4>
   9fe74:	aa0003e5 	mov	x5, x0
   9fe78:	b9405000 	ldr	w0, [x0, #80]
   9fe7c:	aa0103e3 	mov	x3, x1
   9fe80:	aa0203e1 	mov	x1, x2
   9fe84:	36000540 	tbz	w0, #0, 9ff2c <CUSBSerialDevice::Write(void const*, unsigned long)+0xcc>
   9fe88:	b40006a3 	cbz	x3, 9ff5c <CUSBSerialDevice::Write(void const*, unsigned long)+0xfc>
   9fe8c:	8b020040 	add	x0, x2, x2
   9fe90:	91003c00 	add	x0, x0, #0xf
   9fe94:	9270bc02 	and	x2, x0, #0xffffffffffff0000
   9fe98:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   9fe9c:	cb2263e2 	sub	x2, sp, x2
   9fea0:	eb2263ff 	cmp	sp, x2
   9fea4:	540000a0 	b.eq	9feb8 <CUSBSerialDevice::Write(void const*, unsigned long)+0x58>  // b.none
   9fea8:	d14043ff 	sub	sp, sp, #0x10, lsl #12
   9feac:	eb2263ff 	cmp	sp, x2
   9feb0:	f90203ff 	str	xzr, [sp, #1024]
   9feb4:	54ffffa1 	b.ne	9fea8 <CUSBSerialDevice::Write(void const*, unsigned long)+0x48>  // b.any
   9feb8:	92403c00 	and	x0, x0, #0xffff
   9febc:	cb2063ff 	sub	sp, sp, x0
   9fec0:	f110001f 	cmp	x0, #0x400
   9fec4:	f90003ff 	str	xzr, [sp]
   9fec8:	54000043 	b.cc	9fed0 <CUSBSerialDevice::Write(void const*, unsigned long)+0x70>  // b.lo, b.ul, b.last
   9fecc:	f90203ff 	str	xzr, [sp, #1024]
   9fed0:	910043e0 	add	x0, sp, #0x10
   9fed4:	b4000221 	cbz	x1, 9ff18 <CUSBSerialDevice::Write(void const*, unsigned long)+0xb8>
   9fed8:	8b010066 	add	x6, x3, x1
   9fedc:	aa0003e2 	mov	x2, x0
   9fee0:	528001a8 	mov	w8, #0xd                   	// #13
   9fee4:	d503201f 	nop
   9fee8:	39c00061 	ldrsb	w1, [x3]
   9feec:	aa0203e4 	mov	x4, x2
   9fef0:	7100283f 	cmp	w1, #0xa
   9fef4:	54000061 	b.ne	9ff00 <CUSBSerialDevice::Write(void const*, unsigned long)+0xa0>  // b.any
   9fef8:	91000444 	add	x4, x2, #0x1
   9fefc:	39000048 	strb	w8, [x2]
   9ff00:	aa0403e2 	mov	x2, x4
   9ff04:	91000463 	add	x3, x3, #0x1
   9ff08:	eb0300df 	cmp	x6, x3
   9ff0c:	38001441 	strb	w1, [x2], #1
   9ff10:	54fffec1 	b.ne	9fee8 <CUSBSerialDevice::Write(void const*, unsigned long)+0x88>  // b.any
   9ff14:	cb000041 	sub	x1, x2, x0
   9ff18:	f94018a2 	ldr	x2, [x5, #48]
   9ff1c:	d63f00e0 	blr	x7
   9ff20:	910003bf 	mov	sp, x29
   9ff24:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ff28:	d65f03c0 	ret
   9ff2c:	f94018a2 	ldr	x2, [x5, #48]
   9ff30:	aa0303e0 	mov	x0, x3
   9ff34:	d63f00e0 	blr	x7
   9ff38:	910003bf 	mov	sp, x29
   9ff3c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ff40:	d65f03c0 	ret
   9ff44:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ff48:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ff4c:	913f0021 	add	x1, x1, #0xfc0
   9ff50:	913f4000 	add	x0, x0, #0xfd0
   9ff54:	528006a2 	mov	w2, #0x35                  	// #53
   9ff58:	940007ea 	bl	a1f00 <assertion_failed>
   9ff5c:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ff60:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ff64:	913f0021 	add	x1, x1, #0xfc0
   9ff68:	913f8000 	add	x0, x0, #0xfe0
   9ff6c:	528007a2 	mov	w2, #0x3d                  	// #61
   9ff70:	940007e4 	bl	a1f00 <assertion_failed>
   9ff74:	d503201f 	nop
   9ff78:	d503201f 	nop
   9ff7c:	d503201f 	nop

000000000009ff80 <CUSBSerialDevice::Read(void*, unsigned long)>:
   9ff80:	f9400c04 	ldr	x4, [x0, #24]
   9ff84:	aa0003e3 	mov	x3, x0
   9ff88:	b40000c4 	cbz	x4, 9ffa0 <CUSBSerialDevice::Read(void*, unsigned long)+0x20>
   9ff8c:	aa0103e0 	mov	x0, x1
   9ff90:	aa0203e1 	mov	x1, x2
   9ff94:	f9401c62 	ldr	x2, [x3, #56]
   9ff98:	aa0403f0 	mov	x16, x4
   9ff9c:	d61f0200 	br	x16
   9ffa0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ffa4:	d00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   9ffa8:	d00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   9ffac:	910003fd 	mov	x29, sp
   9ffb0:	913f0021 	add	x1, x1, #0xfc0
   9ffb4:	913fa000 	add	x0, x0, #0xfe8
   9ffb8:	52800a22 	mov	w2, #0x51                  	// #81
   9ffbc:	940007d1 	bl	a1f00 <assertion_failed>

000000000009ffc0 <CUSBSerialDevice::~CUSBSerialDevice()>:
   9ffc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ffc4:	f0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   9ffc8:	91120021 	add	x1, x1, #0x480
   9ffcc:	910003fd 	mov	x29, sp
   9ffd0:	f9000bf3 	str	x19, [sp, #16]
   9ffd4:	aa0003f3 	mov	x19, x0
   9ffd8:	f9000001 	str	x1, [x0]
   9ffdc:	94000bb5 	bl	a2eb0 <CDeviceNameService::Get()>
   9ffe0:	b9405662 	ldr	w2, [x19, #84]
   9ffe4:	52800003 	mov	w3, #0x0                   	// #0
   9ffe8:	b00000c1 	adrp	x1, b8000 <FromUmsd+0x60>
   9ffec:	910dc021 	add	x1, x1, #0x370
   9fff0:	94000be0 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9fff4:	b9405661 	ldr	w1, [x19, #84]
   9fff8:	f0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   9fffc:	91312000 	add	x0, x0, #0xc48
   a0000:	94003094 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   a0004:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   a0008:	aa1303e0 	mov	x0, x19
   a000c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   a0010:	94000a14 	bl	a2860 <CDevice::~CDevice()>
   a0014:	aa1303e0 	mov	x0, x19
   a0018:	d2800b01 	mov	x1, #0x58                  	// #88
   a001c:	f9400bf3 	ldr	x19, [sp, #16]
   a0020:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0024:	14002ee3 	b	abbb0 <operator delete(void*, unsigned long)>
   a0028:	d503201f 	nop
   a002c:	d503201f 	nop

00000000000a0030 <CUSBSerialDevice::CUSBSerialDevice()>:
   a0030:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0034:	910003fd 	mov	x29, sp
   a0038:	a90153f3 	stp	x19, x20, [sp, #16]
   a003c:	aa0003f3 	mov	x19, x0
   a0040:	94000a3c 	bl	a2930 <CDevice::CDevice()>
   a0044:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0048:	91120000 	add	x0, x0, #0x480
   a004c:	900000d4 	adrp	x20, b8000 <FromUmsd+0x60>
   a0050:	910dc294 	add	x20, x20, #0x370
   a0054:	f9000260 	str	x0, [x19]
   a0058:	91002282 	add	x2, x20, #0x8
   a005c:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   a0060:	52800021 	mov	w1, #0x1                   	// #1
   a0064:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0068:	91312000 	add	x0, x0, #0xc48
   a006c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   a0070:	b900527f 	str	wzr, [x19, #80]
   a0074:	94003047 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   a0078:	b9005660 	str	w0, [x19, #84]
   a007c:	94000b8d 	bl	a2eb0 <CDeviceNameService::Get()>
   a0080:	b9405662 	ldr	w2, [x19, #84]
   a0084:	aa1403e1 	mov	x1, x20
   a0088:	aa1303e3 	mov	x3, x19
   a008c:	52800004 	mov	w4, #0x0                   	// #0
   a0090:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0094:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0098:	14000b92 	b	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   a009c:	d503201f 	nop

00000000000a00a0 <CUSBSerialDevice::SetBaudRate(unsigned int)>:
   a00a0:	aa0003e2 	mov	x2, x0
   a00a4:	2a0103e0 	mov	w0, w1
   a00a8:	f9401043 	ldr	x3, [x2, #32]
   a00ac:	b4000083 	cbz	x3, a00bc <CUSBSerialDevice::SetBaudRate(unsigned int)+0x1c>
   a00b0:	f9402041 	ldr	x1, [x2, #64]
   a00b4:	aa0303f0 	mov	x16, x3
   a00b8:	d61f0200 	br	x16
   a00bc:	52800020 	mov	w0, #0x1                   	// #1
   a00c0:	d65f03c0 	ret
   a00c4:	d503201f 	nop
   a00c8:	d503201f 	nop
   a00cc:	d503201f 	nop

00000000000a00d0 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   a00d0:	aa0003e4 	mov	x4, x0
   a00d4:	2a0103e0 	mov	w0, w1
   a00d8:	2a0203e1 	mov	w1, w2
   a00dc:	2a0303e2 	mov	w2, w3
   a00e0:	f9401485 	ldr	x5, [x4, #40]
   a00e4:	b4000085 	cbz	x5, a00f4 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x24>
   a00e8:	f9402483 	ldr	x3, [x4, #72]
   a00ec:	aa0503f0 	mov	x16, x5
   a00f0:	d61f0200 	br	x16
   a00f4:	52800020 	mov	w0, #0x1                   	// #1
   a00f8:	d65f03c0 	ret
   a00fc:	d503201f 	nop

00000000000a0100 <CUSBSerialDevice::GetOptions() const>:
   a0100:	b9405000 	ldr	w0, [x0, #80]
   a0104:	d65f03c0 	ret
   a0108:	d503201f 	nop
   a010c:	d503201f 	nop

00000000000a0110 <CUSBSerialDevice::SetOptions(unsigned int)>:
   a0110:	b9005001 	str	w1, [x0, #80]
   a0114:	d65f03c0 	ret
   a0118:	d503201f 	nop
   a011c:	d503201f 	nop

00000000000a0120 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)>:
   a0120:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0124:	910003fd 	mov	x29, sp
   a0128:	f9400803 	ldr	x3, [x0, #16]
   a012c:	f9001802 	str	x2, [x0, #48]
   a0130:	b50000a3 	cbnz	x3, a0144 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)+0x24>
   a0134:	f9000801 	str	x1, [x0, #16]
   a0138:	b4000121 	cbz	x1, a015c <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)+0x3c>
   a013c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a0140:	d65f03c0 	ret
   a0144:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0148:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a014c:	913f0021 	add	x1, x1, #0xfc0
   a0150:	913fe000 	add	x0, x0, #0xff8
   a0154:	52800f42 	mov	w2, #0x7a                  	// #122
   a0158:	9400076a 	bl	a1f00 <assertion_failed>
   a015c:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0160:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a0164:	913f0021 	add	x1, x1, #0xfc0
   a0168:	913f4000 	add	x0, x0, #0xfd0
   a016c:	52800f82 	mov	w2, #0x7c                  	// #124
   a0170:	94000764 	bl	a1f00 <assertion_failed>
   a0174:	d503201f 	nop
   a0178:	d503201f 	nop
   a017c:	d503201f 	nop

00000000000a0180 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)>:
   a0180:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0184:	910003fd 	mov	x29, sp
   a0188:	f9400c03 	ldr	x3, [x0, #24]
   a018c:	f9001c02 	str	x2, [x0, #56]
   a0190:	b50000a3 	cbnz	x3, a01a4 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x24>
   a0194:	f9000c01 	str	x1, [x0, #24]
   a0198:	b4000121 	cbz	x1, a01bc <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x3c>
   a019c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a01a0:	d65f03c0 	ret
   a01a4:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a01a8:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a01ac:	913f0021 	add	x1, x1, #0xfc0
   a01b0:	91004000 	add	x0, x0, #0x10
   a01b4:	52801062 	mov	w2, #0x83                  	// #131
   a01b8:	94000752 	bl	a1f00 <assertion_failed>
   a01bc:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a01c0:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a01c4:	913f0021 	add	x1, x1, #0xfc0
   a01c8:	913fa000 	add	x0, x0, #0xfe8
   a01cc:	528010a2 	mov	w2, #0x85                  	// #133
   a01d0:	9400074c 	bl	a1f00 <assertion_failed>
   a01d4:	d503201f 	nop
   a01d8:	d503201f 	nop
   a01dc:	d503201f 	nop

00000000000a01e0 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)>:
   a01e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a01e4:	910003fd 	mov	x29, sp
   a01e8:	f9401003 	ldr	x3, [x0, #32]
   a01ec:	f9002002 	str	x2, [x0, #64]
   a01f0:	b50000a3 	cbnz	x3, a0204 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)+0x24>
   a01f4:	f9001001 	str	x1, [x0, #32]
   a01f8:	b4000121 	cbz	x1, a021c <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)+0x3c>
   a01fc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a0200:	d65f03c0 	ret
   a0204:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0208:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a020c:	913f0021 	add	x1, x1, #0xfc0
   a0210:	91008000 	add	x0, x0, #0x20
   a0214:	52801182 	mov	w2, #0x8c                  	// #140
   a0218:	9400073a 	bl	a1f00 <assertion_failed>
   a021c:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0220:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0224:	913f0021 	add	x1, x1, #0xfc0
   a0228:	9100e000 	add	x0, x0, #0x38
   a022c:	528011c2 	mov	w2, #0x8e                  	// #142
   a0230:	94000734 	bl	a1f00 <assertion_failed>
   a0234:	d503201f 	nop
   a0238:	d503201f 	nop
   a023c:	d503201f 	nop

00000000000a0240 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)>:
   a0240:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0244:	910003fd 	mov	x29, sp
   a0248:	f9401403 	ldr	x3, [x0, #40]
   a024c:	f9002402 	str	x2, [x0, #72]
   a0250:	b50000a3 	cbnz	x3, a0264 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)+0x24>
   a0254:	f9001401 	str	x1, [x0, #40]
   a0258:	b4000121 	cbz	x1, a027c <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)+0x3c>
   a025c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a0260:	d65f03c0 	ret
   a0264:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0268:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a026c:	913f0021 	add	x1, x1, #0xfc0
   a0270:	91014000 	add	x0, x0, #0x50
   a0274:	528012c2 	mov	w2, #0x96                  	// #150
   a0278:	94000722 	bl	a1f00 <assertion_failed>
   a027c:	b00000a1 	adrp	x1, b5000 <_etext+0x29c8>
   a0280:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0284:	913f0021 	add	x1, x1, #0xfc0
   a0288:	9101c000 	add	x0, x0, #0x70
   a028c:	52801302 	mov	w2, #0x98                  	// #152
   a0290:	9400071c 	bl	a1f00 <assertion_failed>
	...

00000000000a02a0 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE>:
   a02a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a02a4:	528007e2 	mov	w2, #0x3f                  	// #63
   a02a8:	52800021 	mov	w1, #0x1                   	// #1
   a02ac:	910003fd 	mov	x29, sp
   a02b0:	f9000bf3 	str	x19, [sp, #16]
   a02b4:	d0000153 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   a02b8:	91312273 	add	x19, x19, #0xc48
   a02bc:	aa1303e0 	mov	x0, x19
   a02c0:	94002f98 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   a02c4:	aa1303e1 	mov	x1, x19
   a02c8:	d0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a02cc:	91336042 	add	x2, x2, #0xcd8
   a02d0:	f9400bf3 	ldr	x19, [sp, #16]
   a02d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a02d8:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a02dc:	f945a400 	ldr	x0, [x0, #2888]
   a02e0:	140025b8 	b	a99c0 <__cxa_atexit>
	...

00000000000a02f0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   a02f0:	aa0003e1 	mov	x1, x0
   a02f4:	9100a000 	add	x0, x0, #0x28
   a02f8:	a9007c3f 	stp	xzr, xzr, [x1]
   a02fc:	f900083f 	str	xzr, [x1, #16]
   a0300:	7900303f 	strh	wzr, [x1, #24]
   a0304:	f900103f 	str	xzr, [x1, #32]
   a0308:	140000ee 	b	a06c0 <CKeyMap::CKeyMap()>
   a030c:	d503201f 	nop

00000000000a0310 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   a0310:	aa0003e1 	mov	x1, x0
   a0314:	9100a000 	add	x0, x0, #0x28
   a0318:	a9007c3f 	stp	xzr, xzr, [x1]
   a031c:	f900083f 	str	xzr, [x1, #16]
   a0320:	14000128 	b	a07c0 <CKeyMap::~CKeyMap()>
   a0324:	d503201f 	nop
   a0328:	d503201f 	nop
   a032c:	d503201f 	nop

00000000000a0330 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   a0330:	b4000061 	cbz	x1, a033c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0xc>
   a0334:	f9000001 	str	x1, [x0]
   a0338:	d65f03c0 	ret
   a033c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0340:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0344:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0348:	910003fd 	mov	x29, sp
   a034c:	91024021 	add	x1, x1, #0x90
   a0350:	9102a000 	add	x0, x0, #0xa8
   a0354:	528005e2 	mov	w2, #0x2f                  	// #47
   a0358:	940006ea 	bl	a1f00 <assertion_failed>
   a035c:	d503201f 	nop

00000000000a0360 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   a0360:	b4000061 	cbz	x1, a036c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0xc>
   a0364:	f9000401 	str	x1, [x0, #8]
   a0368:	d65f03c0 	ret
   a036c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0370:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0374:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0378:	910003fd 	mov	x29, sp
   a037c:	91024021 	add	x1, x1, #0x90
   a0380:	91030000 	add	x0, x0, #0xc0
   a0384:	528006a2 	mov	w2, #0x35                  	// #53
   a0388:	940006de 	bl	a1f00 <assertion_failed>
   a038c:	d503201f 	nop

00000000000a0390 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   a0390:	b4000061 	cbz	x1, a039c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0xc>
   a0394:	f9000801 	str	x1, [x0, #16]
   a0398:	d65f03c0 	ret
   a039c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a03a0:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a03a4:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a03a8:	910003fd 	mov	x29, sp
   a03ac:	91024021 	add	x1, x1, #0x90
   a03b0:	91038000 	add	x0, x0, #0xe0
   a03b4:	52800762 	mov	w2, #0x3b                  	// #59
   a03b8:	940006d2 	bl	a1f00 <assertion_failed>
   a03bc:	d503201f 	nop

00000000000a03c0 <CKeyboardBehaviour::GetLEDStatus() const>:
   a03c0:	9100a000 	add	x0, x0, #0x28
   a03c4:	140001b7 	b	a0aa0 <CKeyMap::GetLEDStatus() const>
   a03c8:	d503201f 	nop
   a03cc:	d503201f 	nop

00000000000a03d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   a03d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a03d4:	910003fd 	mov	x29, sp
   a03d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a03dc:	aa0003f3 	mov	x19, x0
   a03e0:	9100a014 	add	x20, x0, #0x28
   a03e4:	f90013f5 	str	x21, [sp, #32]
   a03e8:	aa1403e0 	mov	x0, x20
   a03ec:	39406275 	ldrb	w21, [x19, #24]
   a03f0:	2a1503e2 	mov	w2, w21
   a03f4:	9400011f 	bl	a0870 <CKeyMap::Translate(unsigned char, unsigned char)>
   a03f8:	12003c02 	and	w2, w0, #0xffff
   a03fc:	7105245f 	cmp	w2, #0x149
   a0400:	54000268 	b.hi	a044c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>  // b.pmore
   a0404:	7104f45f 	cmp	w2, #0x13d
   a0408:	54000128 	b.hi	a042c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x5c>  // b.pmore
   a040c:	5104ec42 	sub	w2, w2, #0x13b
   a0410:	12003c42 	and	w2, w2, #0xffff
   a0414:	7100085f 	cmp	w2, #0x2
   a0418:	540002c8 	b.hi	a0470 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>  // b.pmore
   a041c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0420:	f94013f5 	ldr	x21, [sp, #32]
   a0424:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0428:	d65f03c0 	ret
   a042c:	f9400661 	ldr	x1, [x19, #8]
   a0430:	b4ffff61 	cbz	x1, a041c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   a0434:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0438:	5104f840 	sub	w0, w2, #0x13e
   a043c:	f94013f5 	ldr	x21, [sp, #32]
   a0440:	aa0103f0 	mov	x16, x1
   a0444:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0448:	d61f0200 	br	x16
   a044c:	7105285f 	cmp	w2, #0x14a
   a0450:	54000101 	b.ne	a0470 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>  // b.any
   a0454:	f9400a60 	ldr	x0, [x19, #16]
   a0458:	b4fffe20 	cbz	x0, a041c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   a045c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0460:	aa0003f0 	mov	x16, x0
   a0464:	f94013f5 	ldr	x21, [sp, #32]
   a0468:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a046c:	d61f0200 	br	x16
   a0470:	2a0003e1 	mov	w1, w0
   a0474:	2a1503e2 	mov	w2, w21
   a0478:	aa1403e0 	mov	x0, x20
   a047c:	9100e3e3 	add	x3, sp, #0x38
   a0480:	94000154 	bl	a09d0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   a0484:	b4fffcc0 	cbz	x0, a041c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   a0488:	f9400261 	ldr	x1, [x19]
   a048c:	b4fffc81 	cbz	x1, a041c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   a0490:	d63f0020 	blr	x1
   a0494:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0498:	f94013f5 	ldr	x21, [sp, #32]
   a049c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a04a0:	d65f03c0 	ret
   a04a4:	d503201f 	nop
   a04a8:	d503201f 	nop
   a04ac:	d503201f 	nop

00000000000a04b0 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)>:
   a04b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a04b4:	910003fd 	mov	x29, sp
   a04b8:	f9000bf3 	str	x19, [sp, #16]
   a04bc:	b4000362 	cbz	x2, a0528 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x78>
   a04c0:	f9401041 	ldr	x1, [x2, #32]
   a04c4:	aa0203f3 	mov	x19, x2
   a04c8:	eb01001f 	cmp	x0, x1
   a04cc:	540003a1 	b.ne	a0540 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x90>  // b.any
   a04d0:	39406441 	ldrb	w1, [x2, #25]
   a04d4:	35000081 	cbnz	w1, a04e4 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x34>
   a04d8:	f9400bf3 	ldr	x19, [sp, #16]
   a04dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a04e0:	d65f03c0 	ret
   a04e4:	aa0203e0 	mov	x0, x2
   a04e8:	97ffffba 	bl	a03d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   a04ec:	94002979 	bl	aaad0 <CTimer::Get()>
   a04f0:	aa1303e4 	mov	x4, x19
   a04f4:	90000002 	adrp	x2, a0000 <CUSBSerialDevice::~CUSBSerialDevice()+0x40>
   a04f8:	d2800003 	mov	x3, #0x0                   	// #0
   a04fc:	9112c042 	add	x2, x2, #0x4b0
   a0500:	52800101 	mov	w1, #0x8                   	// #8
   a0504:	94002757 	bl	aa260 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   a0508:	f9001260 	str	x0, [x19, #32]
   a050c:	b5fffe60 	cbnz	x0, a04d8 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x28>
   a0510:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0514:	900000a0 	adrp	x0, b4000 <_etext+0x19c8>
   a0518:	91024021 	add	x1, x1, #0x90
   a051c:	91304000 	add	x0, x0, #0xc10
   a0520:	528016e2 	mov	w2, #0xb7                  	// #183
   a0524:	94000677 	bl	a1f00 <assertion_failed>
   a0528:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a052c:	d0000080 	adrp	x0, b2000 <SErrorStub+0xc>
   a0530:	91024021 	add	x1, x1, #0x90
   a0534:	91288000 	add	x0, x0, #0xa20
   a0538:	528017c2 	mov	w2, #0xbe                  	// #190
   a053c:	94000671 	bl	a1f00 <assertion_failed>
   a0540:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0544:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0548:	91024021 	add	x1, x1, #0x90
   a054c:	9103e000 	add	x0, x0, #0xf8
   a0550:	52801602 	mov	w2, #0xb0                  	// #176
   a0554:	9400066b 	bl	a1f00 <assertion_failed>
   a0558:	d503201f 	nop
   a055c:	d503201f 	nop

00000000000a0560 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   a0560:	12001c21 	and	w1, w1, #0xff
   a0564:	aa0003e2 	mov	x2, x0
   a0568:	51020023 	sub	w3, w1, #0x80
   a056c:	12001c64 	and	w4, w3, #0xff
   a0570:	71001c9f 	cmp	w4, #0x7
   a0574:	540000e8 	b.hi	a0590 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x30>  // b.pmore
   a0578:	39406001 	ldrb	w1, [x0, #24]
   a057c:	52800020 	mov	w0, #0x1                   	// #1
   a0580:	1ac32000 	lsl	w0, w0, w3
   a0584:	2a010000 	orr	w0, w0, w1
   a0588:	39006040 	strb	w0, [x2, #24]
   a058c:	d65f03c0 	ret
   a0590:	39406403 	ldrb	w3, [x0, #25]
   a0594:	6b01007f 	cmp	w3, w1
   a0598:	54ffffa0 	b.eq	a058c <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>  // b.none
   a059c:	39006401 	strb	w1, [x0, #25]
   a05a0:	17ffff8c 	b	a03d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   a05a4:	d503201f 	nop
   a05a8:	d503201f 	nop
   a05ac:	d503201f 	nop

00000000000a05b0 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   a05b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a05b4:	12001c21 	and	w1, w1, #0xff
   a05b8:	51020022 	sub	w2, w1, #0x80
   a05bc:	910003fd 	mov	x29, sp
   a05c0:	f9000bf3 	str	x19, [sp, #16]
   a05c4:	aa0003f3 	mov	x19, x0
   a05c8:	12001c40 	and	w0, w2, #0xff
   a05cc:	71001c1f 	cmp	w0, #0x7
   a05d0:	54000128 	b.hi	a05f4 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>  // b.pmore
   a05d4:	39406261 	ldrb	w1, [x19, #24]
   a05d8:	52800020 	mov	w0, #0x1                   	// #1
   a05dc:	1ac22000 	lsl	w0, w0, w2
   a05e0:	0a200020 	bic	w0, w1, w0
   a05e4:	39006260 	strb	w0, [x19, #24]
   a05e8:	f9400bf3 	ldr	x19, [sp, #16]
   a05ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a05f0:	d65f03c0 	ret
   a05f4:	39406660 	ldrb	w0, [x19, #25]
   a05f8:	6b01001f 	cmp	w0, w1
   a05fc:	54ffff61 	b.ne	a05e8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x38>  // b.any
   a0600:	f9401260 	ldr	x0, [x19, #32]
   a0604:	b50000a0 	cbnz	x0, a0618 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x68>
   a0608:	3900667f 	strb	wzr, [x19, #25]
   a060c:	f9400bf3 	ldr	x19, [sp, #16]
   a0610:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0614:	d65f03c0 	ret
   a0618:	9400292e 	bl	aaad0 <CTimer::Get()>
   a061c:	f9401261 	ldr	x1, [x19, #32]
   a0620:	94002768 	bl	aa3c0 <CTimer::CancelKernelTimer(unsigned long)>
   a0624:	3900667f 	strb	wzr, [x19, #25]
   a0628:	f900127f 	str	xzr, [x19, #32]
   a062c:	17fffff8 	b	a060c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x5c>

00000000000a0630 <CKeyboardBehaviour::TimerHandler(unsigned long)>:
   a0630:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0634:	910003fd 	mov	x29, sp
   a0638:	f9401002 	ldr	x2, [x0, #32]
   a063c:	f9000bf3 	str	x19, [sp, #16]
   a0640:	eb01005f 	cmp	x2, x1
   a0644:	540002e1 	b.ne	a06a0 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x70>  // b.any
   a0648:	39406401 	ldrb	w1, [x0, #25]
   a064c:	aa0003f3 	mov	x19, x0
   a0650:	35000081 	cbnz	w1, a0660 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x30>
   a0654:	f9400bf3 	ldr	x19, [sp, #16]
   a0658:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a065c:	d65f03c0 	ret
   a0660:	97ffff5c 	bl	a03d0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   a0664:	9400291b 	bl	aaad0 <CTimer::Get()>
   a0668:	aa1303e4 	mov	x4, x19
   a066c:	90000002 	adrp	x2, a0000 <CUSBSerialDevice::~CUSBSerialDevice()+0x40>
   a0670:	d2800003 	mov	x3, #0x0                   	// #0
   a0674:	9112c042 	add	x2, x2, #0x4b0
   a0678:	52800101 	mov	w1, #0x8                   	// #8
   a067c:	940026f9 	bl	aa260 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   a0680:	f9001260 	str	x0, [x19, #32]
   a0684:	b5fffe80 	cbnz	x0, a0654 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x24>
   a0688:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a068c:	900000a0 	adrp	x0, b4000 <_etext+0x19c8>
   a0690:	91024021 	add	x1, x1, #0x90
   a0694:	91304000 	add	x0, x0, #0xc10
   a0698:	528016e2 	mov	w2, #0xb7                  	// #183
   a069c:	94000619 	bl	a1f00 <assertion_failed>
   a06a0:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a06a4:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a06a8:	91024021 	add	x1, x1, #0x90
   a06ac:	9103e000 	add	x0, x0, #0xf8
   a06b0:	52801602 	mov	w2, #0xb0                  	// #176
   a06b4:	94000613 	bl	a1f00 <assertion_failed>
	...

00000000000a06c0 <CKeyMap::CKeyMap()>:
   a06c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a06c4:	910003fd 	mov	x29, sp
   a06c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a06cc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a06d0:	aa0003f6 	mov	x22, x0
   a06d4:	f9001bf7 	str	x23, [sp, #48]
   a06d8:	790a001f 	strh	wzr, [x0, #1280]
   a06dc:	3914081f 	strb	wzr, [x0, #1282]
   a06e0:	94000b38 	bl	a33c0 <CKernelOptions::Get()>
   a06e4:	94000ae7 	bl	a3280 <CKernelOptions::GetKeyMap() const>
   a06e8:	b40004e0 	cbz	x0, a0784 <CKeyMap::CKeyMap()+0xc4>
   a06ec:	aa0003f4 	mov	x20, x0
   a06f0:	d0000157 	adrp	x23, ca000 <vtable for CLAN7800Device+0x28>
   a06f4:	f94262e0 	ldr	x0, [x23, #1216]
   a06f8:	911302f5 	add	x21, x23, #0x4c0
   a06fc:	d2800013 	mov	x19, #0x0                   	// #0
   a0700:	b50000a0 	cbnz	x0, a0714 <CKeyMap::CKeyMap()+0x54>
   a0704:	14000026 	b	a079c <CKeyMap::CKeyMap()+0xdc>
   a0708:	91000673 	add	x19, x19, #0x1
   a070c:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   a0710:	b40001e0 	cbz	x0, a074c <CKeyMap::CKeyMap()+0x8c>
   a0714:	aa1403e1 	mov	x1, x20
   a0718:	9400292a 	bl	aabc0 <strcmp>
   a071c:	35ffff60 	cbnz	w0, a0708 <CKeyMap::CKeyMap()+0x48>
   a0720:	900000c0 	adrp	x0, b8000 <FromUmsd+0x60>
   a0724:	910e0000 	add	x0, x0, #0x380
   a0728:	d280a001 	mov	x1, #0x500                 	// #1280
   a072c:	d280a002 	mov	x2, #0x500                 	// #1280
   a0730:	f9401bf7 	ldr	x23, [sp, #48]
   a0734:	9b010261 	madd	x1, x19, x1, x0
   a0738:	a94153f3 	ldp	x19, x20, [sp, #16]
   a073c:	aa1603e0 	mov	x0, x22
   a0740:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0744:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0748:	14002aa0 	b	ab1c8 <memcpy>
   a074c:	f94262e0 	ldr	x0, [x23, #1216]
   a0750:	b4000260 	cbz	x0, a079c <CKeyMap::CKeyMap()+0xdc>
   a0754:	d00000b4 	adrp	x20, b6000 <_etext+0x39c8>
   a0758:	9104c294 	add	x20, x20, #0x130
   a075c:	911302f7 	add	x23, x23, #0x4c0
   a0760:	d2800013 	mov	x19, #0x0                   	// #0
   a0764:	14000004 	b	a0774 <CKeyMap::CKeyMap()+0xb4>
   a0768:	91000673 	add	x19, x19, #0x1
   a076c:	f8737ae0 	ldr	x0, [x23, x19, lsl #3]
   a0770:	b4000160 	cbz	x0, a079c <CKeyMap::CKeyMap()+0xdc>
   a0774:	aa1403e1 	mov	x1, x20
   a0778:	94002912 	bl	aabc0 <strcmp>
   a077c:	35ffff60 	cbnz	w0, a0768 <CKeyMap::CKeyMap()+0xa8>
   a0780:	17ffffe8 	b	a0720 <CKeyMap::CKeyMap()+0x60>
   a0784:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0788:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a078c:	91044021 	add	x1, x1, #0x110
   a0790:	91048000 	add	x0, x0, #0x120
   a0794:	52801142 	mov	w2, #0x8a                  	// #138
   a0798:	940005da 	bl	a1f00 <assertion_failed>
   a079c:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a07a0:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a07a4:	91044021 	add	x1, x1, #0x110
   a07a8:	9104e000 	add	x0, x0, #0x138
   a07ac:	52801202 	mov	w2, #0x90                  	// #144
   a07b0:	940005d4 	bl	a1f00 <assertion_failed>
   a07b4:	d503201f 	nop
   a07b8:	d503201f 	nop
   a07bc:	d503201f 	nop

00000000000a07c0 <CKeyMap::~CKeyMap()>:
   a07c0:	d65f03c0 	ret
   a07c4:	d503201f 	nop
   a07c8:	d503201f 	nop
   a07cc:	d503201f 	nop

00000000000a07d0 <CKeyMap::ClearTable(unsigned char)>:
   a07d0:	12001c21 	and	w1, w1, #0xff
   a07d4:	7100103f 	cmp	w1, #0x4
   a07d8:	54000168 	b.hi	a0804 <CKeyMap::ClearTable(unsigned char)+0x34>  // b.pmore
   a07dc:	d37f1c22 	ubfiz	x2, x1, #1, #8
   a07e0:	91140001 	add	x1, x0, #0x500
   a07e4:	8b020021 	add	x1, x1, x2
   a07e8:	8b020000 	add	x0, x0, x2
   a07ec:	d503201f 	nop
   a07f0:	7800a41f 	strh	wzr, [x0], #10
   a07f4:	eb01001f 	cmp	x0, x1
   a07f8:	54ffffc1 	b.ne	a07f0 <CKeyMap::ClearTable(unsigned char)+0x20>  // b.any
   a07fc:	52800020 	mov	w0, #0x1                   	// #1
   a0800:	d65f03c0 	ret
   a0804:	52800000 	mov	w0, #0x0                   	// #0
   a0808:	d65f03c0 	ret
   a080c:	d503201f 	nop

00000000000a0810 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   a0810:	12001c21 	and	w1, w1, #0xff
   a0814:	13001c45 	sxtb	w5, w2
   a0818:	7100103f 	cmp	w1, #0x4
   a081c:	12003c63 	and	w3, w3, #0xffff
   a0820:	1a9f97e4 	cset	w4, hi	// hi = pmore
   a0824:	710000bf 	cmp	w5, #0x0
   a0828:	1a9fc7e5 	cset	w5, le
   a082c:	12001c42 	and	w2, w2, #0xff
   a0830:	2a050086 	orr	w6, w4, w5
   a0834:	35000146 	cbnz	w6, a085c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x4c>
   a0838:	7104e87f 	cmp	w3, #0x13a
   a083c:	540000c8 	b.hi	a0854 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>  // b.pmore
   a0840:	d37e1c44 	ubfiz	x4, x2, #2, #8
   a0844:	52800026 	mov	w6, #0x1                   	// #1
   a0848:	8b220082 	add	x2, x4, w2, uxtb
   a084c:	8b210041 	add	x1, x2, w1, uxtb
   a0850:	78217803 	strh	w3, [x0, x1, lsl #1]
   a0854:	2a0603e0 	mov	w0, w6
   a0858:	d65f03c0 	ret
   a085c:	52800006 	mov	w6, #0x0                   	// #0
   a0860:	2a0603e0 	mov	w0, w6
   a0864:	d65f03c0 	ret
   a0868:	d503201f 	nop
   a086c:	d503201f 	nop

00000000000a0870 <CKeyMap::Translate(unsigned char, unsigned char)>:
   a0870:	13001c24 	sxtb	w4, w1
   a0874:	aa0003e3 	mov	x3, x0
   a0878:	12001c42 	and	w2, w2, #0xff
   a087c:	7100009f 	cmp	w4, #0x0
   a0880:	12001c21 	and	w1, w1, #0xff
   a0884:	5400050d 	b.le	a0924 <CKeyMap::Translate(unsigned char, unsigned char)+0xb4>
   a0888:	d37e1c20 	ubfiz	x0, x1, #2, #8
   a088c:	93407c24 	sxtw	x4, w1
   a0890:	8b210000 	add	x0, x0, w1, uxtb
   a0894:	78607860 	ldrh	w0, [x3, x0, lsl #1]
   a0898:	7104281f 	cmp	w0, #0x10a
   a089c:	54000380 	b.eq	a090c <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>  // b.none
   a08a0:	51045c05 	sub	w5, w0, #0x117
   a08a4:	12003ca5 	and	w5, w5, #0xffff
   a08a8:	71002cbf 	cmp	w5, #0xb
   a08ac:	54000048 	b.hi	a08b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>  // b.pmore
   a08b0:	371004e2 	tbnz	w2, #2, a094c <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   a08b4:	12800e65 	mov	w5, #0xffffff8c            	// #-116
   a08b8:	6a05005f 	tst	w2, w5
   a08bc:	54000341 	b.ne	a0924 <CKeyMap::Translate(unsigned char, unsigned char)+0xb4>  // b.any
   a08c0:	51014c25 	sub	w5, w1, #0x53
   a08c4:	12001ca5 	and	w5, w5, #0xff
   a08c8:	710040bf 	cmp	w5, #0x10
   a08cc:	54000308 	b.hi	a092c <CKeyMap::Translate(unsigned char, unsigned char)+0xbc>  // b.pmore
   a08d0:	39540460 	ldrb	w0, [x3, #1281]
   a08d4:	8b040884 	add	x4, x4, x4, lsl #2
   a08d8:	8b000084 	add	x4, x4, x0
   a08dc:	78647860 	ldrh	w0, [x3, x4, lsl #1]
   a08e0:	7104981f 	cmp	w0, #0x126
   a08e4:	540005c0 	b.eq	a099c <CKeyMap::Translate(unsigned char, unsigned char)+0x12c>  // b.none
   a08e8:	7104a01f 	cmp	w0, #0x128
   a08ec:	540004e0 	b.eq	a0988 <CKeyMap::Translate(unsigned char, unsigned char)+0x118>  // b.none
   a08f0:	7104901f 	cmp	w0, #0x124
   a08f4:	540000a1 	b.ne	a0908 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>  // b.any
   a08f8:	39540061 	ldrb	w1, [x3, #1280]
   a08fc:	52802760 	mov	w0, #0x13b                 	// #315
   a0900:	52000021 	eor	w1, w1, #0x1
   a0904:	39140061 	strb	w1, [x3, #1280]
   a0908:	d65f03c0 	ret
   a090c:	52800225 	mov	w5, #0x11                  	// #17
   a0910:	6a05005f 	tst	w2, w5
   a0914:	54fffd00 	b.eq	a08b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>  // b.none
   a0918:	3617fce2 	tbz	w2, #2, a08b4 <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   a091c:	52802940 	mov	w0, #0x14a                 	// #330
   a0920:	d65f03c0 	ret
   a0924:	52800000 	mov	w0, #0x0                   	// #0
   a0928:	d65f03c0 	ret
   a092c:	52800445 	mov	w5, #0x22                  	// #34
   a0930:	0a050045 	and	w5, w2, w5
   a0934:	36300122 	tbz	w2, #6, a0958 <CKeyMap::Translate(unsigned char, unsigned char)+0xe8>
   a0938:	8b040884 	add	x4, x4, x4, lsl #2
   a093c:	8b040464 	add	x4, x3, x4, lsl #1
   a0940:	34000405 	cbz	w5, a09c0 <CKeyMap::Translate(unsigned char, unsigned char)+0x150>
   a0944:	79400c80 	ldrh	w0, [x4, #6]
   a0948:	17ffffe6 	b	a08e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x70>
   a094c:	11009c00 	add	w0, w0, #0x27
   a0950:	12003c00 	and	w0, w0, #0xffff
   a0954:	d65f03c0 	ret
   a0958:	350002c5 	cbnz	w5, a09b0 <CKeyMap::Translate(unsigned char, unsigned char)+0x140>
   a095c:	52800225 	mov	w5, #0x11                  	// #17
   a0960:	6a05005f 	tst	w2, w5
   a0964:	54fffbe0 	b.eq	a08e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x70>  // b.none
   a0968:	51001020 	sub	w0, w1, #0x4
   a096c:	8b040884 	add	x4, x4, x4, lsl #2
   a0970:	12001c00 	and	w0, w0, #0xff
   a0974:	7100641f 	cmp	w0, #0x19
   a0978:	9a9f97e0 	cset	x0, hi	// hi = pmore
   a097c:	8b000880 	add	x0, x4, x0, lsl #2
   a0980:	78607860 	ldrh	w0, [x3, x0, lsl #1]
   a0984:	17ffffd7 	b	a08e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x70>
   a0988:	39540461 	ldrb	w1, [x3, #1281]
   a098c:	52802780 	mov	w0, #0x13c                 	// #316
   a0990:	52000021 	eor	w1, w1, #0x1
   a0994:	39140461 	strb	w1, [x3, #1281]
   a0998:	d65f03c0 	ret
   a099c:	39540861 	ldrb	w1, [x3, #1282]
   a09a0:	528027a0 	mov	w0, #0x13d                 	// #317
   a09a4:	52000021 	eor	w1, w1, #0x1
   a09a8:	39140861 	strb	w1, [x3, #1282]
   a09ac:	d65f03c0 	ret
   a09b0:	8b040884 	add	x4, x4, x4, lsl #2
   a09b4:	8b040464 	add	x4, x3, x4, lsl #1
   a09b8:	79400480 	ldrh	w0, [x4, #2]
   a09bc:	17ffffc9 	b	a08e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x70>
   a09c0:	79400880 	ldrh	w0, [x4, #4]
   a09c4:	17ffffc7 	b	a08e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x70>
   a09c8:	d503201f 	nop
   a09cc:	d503201f 	nop

00000000000a09d0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   a09d0:	12003c21 	and	w1, w1, #0xffff
   a09d4:	12001c42 	and	w2, w2, #0xff
   a09d8:	51008424 	sub	w4, w1, #0x21
   a09dc:	12003c84 	and	w4, w4, #0xffff
   a09e0:	7104649f 	cmp	w4, #0x119
   a09e4:	540004c8 	b.hi	a0a7c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xac>  // b.pmore
   a09e8:	51040024 	sub	w4, w1, #0x100
   a09ec:	12003c85 	and	w5, w4, #0xffff
   a09f0:	7100e8bf 	cmp	w5, #0x3a
   a09f4:	540003a9 	b.ls	a0a68 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x98>  // b.plast
   a09f8:	52800224 	mov	w4, #0x11                  	// #17
   a09fc:	13001c25 	sxtb	w5, w1
   a0a00:	6a04005f 	tst	w2, w4
   a0a04:	54000180 	b.eq	a0a34 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x64>  // b.none
   a0a08:	12001c21 	and	w1, w1, #0xff
   a0a0c:	d2800000 	mov	x0, #0x0                   	// #0
   a0a10:	51018422 	sub	w2, w1, #0x61
   a0a14:	12001c42 	and	w2, w2, #0xff
   a0a18:	7100645f 	cmp	w2, #0x19
   a0a1c:	540000a8 	b.hi	a0a30 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>  // b.pmore
   a0a20:	aa0303e0 	mov	x0, x3
   a0a24:	51018021 	sub	w1, w1, #0x60
   a0a28:	39000061 	strb	w1, [x3]
   a0a2c:	3900047f 	strb	wzr, [x3, #1]
   a0a30:	d65f03c0 	ret
   a0a34:	39540000 	ldrb	w0, [x0, #1280]
   a0a38:	36000100 	tbz	w0, #0, a0a58 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   a0a3c:	12001c21 	and	w1, w1, #0xff
   a0a40:	51010420 	sub	w0, w1, #0x41
   a0a44:	12001c00 	and	w0, w0, #0xff
   a0a48:	7100641f 	cmp	w0, #0x19
   a0a4c:	540001c8 	b.hi	a0a84 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>  // b.pmore
   a0a50:	11008021 	add	w1, w1, #0x20
   a0a54:	13001c25 	sxtb	w5, w1
   a0a58:	aa0303e0 	mov	x0, x3
   a0a5c:	39000065 	strb	w5, [x3]
   a0a60:	3900047f 	strb	wzr, [x3, #1]
   a0a64:	17fffff3 	b	a0a30 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   a0a68:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0a6c:	91130000 	add	x0, x0, #0x4c0
   a0a70:	91010000 	add	x0, x0, #0x40
   a0a74:	f864d800 	ldr	x0, [x0, w4, sxtw #3]
   a0a78:	d65f03c0 	ret
   a0a7c:	d2800000 	mov	x0, #0x0                   	// #0
   a0a80:	d65f03c0 	ret
   a0a84:	51018420 	sub	w0, w1, #0x61
   a0a88:	51008021 	sub	w1, w1, #0x20
   a0a8c:	12001c00 	and	w0, w0, #0xff
   a0a90:	7100681f 	cmp	w0, #0x1a
   a0a94:	13001c21 	sxtb	w1, w1
   a0a98:	1a853025 	csel	w5, w1, w5, cc	// cc = lo, ul, last
   a0a9c:	17ffffef 	b	a0a58 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>

00000000000a0aa0 <CKeyMap::GetLEDStatus() const>:
   a0aa0:	39540002 	ldrb	w2, [x0, #1280]
   a0aa4:	39540403 	ldrb	w3, [x0, #1281]
   a0aa8:	39540800 	ldrb	w0, [x0, #1282]
   a0aac:	4b0003e1 	neg	w1, w0
   a0ab0:	2a020462 	orr	w2, w3, w2, lsl #1
   a0ab4:	121e0020 	and	w0, w1, #0x4
   a0ab8:	2a000040 	orr	w0, w2, w0
   a0abc:	d65f03c0 	ret

00000000000a0ac0 <CKeyMap::LookupDefaultMap(char const*)>:
   a0ac0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0ac4:	910003fd 	mov	x29, sp
   a0ac8:	f90013f5 	str	x21, [sp, #32]
   a0acc:	d0000155 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   a0ad0:	f94262a2 	ldr	x2, [x21, #1216]
   a0ad4:	b40003a2 	cbz	x2, a0b48 <CKeyMap::LookupDefaultMap(char const*)+0x88>
   a0ad8:	a90153f3 	stp	x19, x20, [sp, #16]
   a0adc:	911302b5 	add	x21, x21, #0x4c0
   a0ae0:	aa0003f4 	mov	x20, x0
   a0ae4:	d2800013 	mov	x19, #0x0                   	// #0
   a0ae8:	b50000a0 	cbnz	x0, a0afc <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   a0aec:	14000010 	b	a0b2c <CKeyMap::LookupDefaultMap(char const*)+0x6c>
   a0af0:	91000673 	add	x19, x19, #0x1
   a0af4:	f8737aa2 	ldr	x2, [x21, x19, lsl #3]
   a0af8:	b4000262 	cbz	x2, a0b44 <CKeyMap::LookupDefaultMap(char const*)+0x84>
   a0afc:	aa0203e0 	mov	x0, x2
   a0b00:	aa1403e1 	mov	x1, x20
   a0b04:	9400282f 	bl	aabc0 <strcmp>
   a0b08:	35ffff40 	cbnz	w0, a0af0 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   a0b0c:	900000c0 	adrp	x0, b8000 <FromUmsd+0x60>
   a0b10:	910e0000 	add	x0, x0, #0x380
   a0b14:	d280a001 	mov	x1, #0x500                 	// #1280
   a0b18:	f94013f5 	ldr	x21, [sp, #32]
   a0b1c:	9b010260 	madd	x0, x19, x1, x0
   a0b20:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0b24:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0b28:	d65f03c0 	ret
   a0b2c:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0b30:	d00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a0b34:	91044021 	add	x1, x1, #0x110
   a0b38:	91048000 	add	x0, x0, #0x120
   a0b3c:	52802b02 	mov	w2, #0x158                 	// #344
   a0b40:	940004f0 	bl	a1f00 <assertion_failed>
   a0b44:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0b48:	d2800000 	mov	x0, #0x0                   	// #0
   a0b4c:	f94013f5 	ldr	x21, [sp, #32]
   a0b50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0b54:	d65f03c0 	ret
	...

00000000000a0b60 <proxy_handler(unsigned int, int, int, int, void*)>:
   a0b60:	aa0403f0 	mov	x16, x4
   a0b64:	d61f0200 	br	x16
   a0b68:	d503201f 	nop
   a0b6c:	d503201f 	nop

00000000000a0b70 <CMouseDevice::~CMouseDevice()>:
   a0b70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0b74:	d0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a0b78:	911ba021 	add	x1, x1, #0x6e8
   a0b7c:	910003fd 	mov	x29, sp
   a0b80:	f9000bf3 	str	x19, [sp, #16]
   a0b84:	aa0003f3 	mov	x19, x0
   a0b88:	f9000001 	str	x1, [x0]
   a0b8c:	a9037c1f 	stp	xzr, xzr, [x0, #48]
   a0b90:	940008c8 	bl	a2eb0 <CDeviceNameService::Get()>
   a0b94:	b9404262 	ldr	w2, [x19, #64]
   a0b98:	52800003 	mov	w3, #0x0                   	// #0
   a0b9c:	d00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a0ba0:	911a0021 	add	x1, x1, #0x680
   a0ba4:	940008f3 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a0ba8:	b9404261 	ldr	w1, [x19, #64]
   a0bac:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0bb0:	91316000 	add	x0, x0, #0xc58
   a0bb4:	94002da7 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   a0bb8:	91004260 	add	x0, x19, #0x10
   a0bbc:	94000279 	bl	a15a0 <CMouseBehaviour::~CMouseBehaviour()>
   a0bc0:	aa1303e0 	mov	x0, x19
   a0bc4:	f9400bf3 	ldr	x19, [sp, #16]
   a0bc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0bcc:	14000725 	b	a2860 <CDevice::~CDevice()>

00000000000a0bd0 <CMouseDevice::~CMouseDevice()>:
   a0bd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0bd4:	910003fd 	mov	x29, sp
   a0bd8:	f9000bf3 	str	x19, [sp, #16]
   a0bdc:	aa0003f3 	mov	x19, x0
   a0be0:	97ffffe4 	bl	a0b70 <CMouseDevice::~CMouseDevice()>
   a0be4:	aa1303e0 	mov	x0, x19
   a0be8:	d2800a01 	mov	x1, #0x50                  	// #80
   a0bec:	f9400bf3 	ldr	x19, [sp, #16]
   a0bf0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0bf4:	14002bef 	b	abbb0 <operator delete(void*, unsigned long)>
   a0bf8:	d503201f 	nop
   a0bfc:	d503201f 	nop

00000000000a0c00 <CMouseDevice::CMouseDevice(unsigned int, bool)>:
   a0c00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0c04:	910003fd 	mov	x29, sp
   a0c08:	a90153f3 	stp	x19, x20, [sp, #16]
   a0c0c:	aa0003f3 	mov	x19, x0
   a0c10:	d00000d4 	adrp	x20, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a0c14:	911a0294 	add	x20, x20, #0x680
   a0c18:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0c1c:	12001c56 	and	w22, w2, #0xff
   a0c20:	2a0103f5 	mov	w21, w1
   a0c24:	94000743 	bl	a2930 <CDevice::CDevice()>
   a0c28:	aa1303e0 	mov	x0, x19
   a0c2c:	d0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a0c30:	911ba021 	add	x1, x1, #0x6e8
   a0c34:	f8010401 	str	x1, [x0], #16
   a0c38:	94000166 	bl	a11d0 <CMouseBehaviour::CMouseBehaviour()>
   a0c3c:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   a0c40:	91002282 	add	x2, x20, #0x8
   a0c44:	52800021 	mov	w1, #0x1                   	// #1
   a0c48:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0c4c:	91316000 	add	x0, x0, #0xc58
   a0c50:	94002d50 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   a0c54:	29085660 	stp	w0, w21, [x19, #64]
   a0c58:	39012276 	strb	w22, [x19, #72]
   a0c5c:	94000895 	bl	a2eb0 <CDeviceNameService::Get()>
   a0c60:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0c64:	aa1403e1 	mov	x1, x20
   a0c68:	b9404262 	ldr	w2, [x19, #64]
   a0c6c:	aa1303e3 	mov	x3, x19
   a0c70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0c74:	52800004 	mov	w4, #0x0                   	// #0
   a0c78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0c7c:	14000899 	b	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>

00000000000a0c80 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   a0c80:	91004000 	add	x0, x0, #0x10
   a0c84:	1400015b 	b	a11f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>
   a0c88:	d503201f 	nop
   a0c8c:	d503201f 	nop

00000000000a0c90 <CMouseDevice::Release()>:
   a0c90:	91004000 	add	x0, x0, #0x10
   a0c94:	1400024b 	b	a15c0 <CMouseBehaviour::Release()>
   a0c98:	d503201f 	nop
   a0c9c:	d503201f 	nop

00000000000a0ca0 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   a0ca0:	91004000 	add	x0, x0, #0x10
   a0ca4:	1400019b 	b	a1310 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>
   a0ca8:	d503201f 	nop
   a0cac:	d503201f 	nop

00000000000a0cb0 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   a0cb0:	91004000 	add	x0, x0, #0x10
   a0cb4:	1400025b 	b	a1620 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>
   a0cb8:	d503201f 	nop
   a0cbc:	d503201f 	nop

00000000000a0cc0 <CMouseDevice::ShowCursor(bool)>:
   a0cc0:	91004000 	add	x0, x0, #0x10
   a0cc4:	1400027b 	b	a16b0 <CMouseBehaviour::ShowCursor(bool)>
   a0cc8:	d503201f 	nop
   a0ccc:	d503201f 	nop

00000000000a0cd0 <CMouseDevice::UpdateCursor()>:
   a0cd0:	f9401801 	ldr	x1, [x0, #48]
   a0cd4:	b4000041 	cbz	x1, a0cdc <CMouseDevice::UpdateCursor()+0xc>
   a0cd8:	d65f03c0 	ret
   a0cdc:	91004000 	add	x0, x0, #0x10
   a0ce0:	14000294 	b	a1730 <CMouseBehaviour::UpdateCursor()>
   a0ce4:	d503201f 	nop
   a0ce8:	d503201f 	nop
   a0cec:	d503201f 	nop

00000000000a0cf0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)>:
   a0cf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0cf4:	910003fd 	mov	x29, sp
   a0cf8:	f9401803 	ldr	x3, [x0, #48]
   a0cfc:	b50000a3 	cbnz	x3, a0d10 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x20>
   a0d00:	a9030801 	stp	x1, x2, [x0, #48]
   a0d04:	b4000121 	cbz	x1, a0d28 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x38>
   a0d08:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a0d0c:	d65f03c0 	ret
   a0d10:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0d14:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a0d18:	910b8021 	add	x1, x1, #0x2e0
   a0d1c:	91358000 	add	x0, x0, #0xd60
   a0d20:	52800a82 	mov	w2, #0x54                  	// #84
   a0d24:	94000477 	bl	a1f00 <assertion_failed>
   a0d28:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0d2c:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a0d30:	910b8021 	add	x1, x1, #0x2e0
   a0d34:	9135e000 	add	x0, x0, #0xd78
   a0d38:	52800ae2 	mov	w2, #0x57                  	// #87
   a0d3c:	94000471 	bl	a1f00 <assertion_failed>

00000000000a0d40 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))>:
   a0d40:	f9401802 	ldr	x2, [x0, #48]
   a0d44:	b50000a2 	cbnz	x2, a0d58 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x18>
   a0d48:	90000002 	adrp	x2, a0000 <CUSBSerialDevice::~CUSBSerialDevice()+0x40>
   a0d4c:	912d8042 	add	x2, x2, #0xb60
   a0d50:	a9030402 	stp	x2, x1, [x0, #48]
   a0d54:	d65f03c0 	ret
   a0d58:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0d5c:	d00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a0d60:	b00000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a0d64:	910003fd 	mov	x29, sp
   a0d68:	910b8021 	add	x1, x1, #0x2e0
   a0d6c:	91358000 	add	x0, x0, #0xd60
   a0d70:	52800a82 	mov	w2, #0x54                  	// #84
   a0d74:	94000463 	bl	a1f00 <assertion_failed>
   a0d78:	d503201f 	nop
   a0d7c:	d503201f 	nop

00000000000a0d80 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>:
   a0d80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a0d84:	910003fd 	mov	x29, sp
   a0d88:	a90153f3 	stp	x19, x20, [sp, #16]
   a0d8c:	aa0003f3 	mov	x19, x0
   a0d90:	2a0103f4 	mov	w20, w1
   a0d94:	91004000 	add	x0, x0, #0x10
   a0d98:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0d9c:	2a0203f5 	mov	w21, w2
   a0da0:	2a0303f6 	mov	w22, w3
   a0da4:	f9001bf7 	str	x23, [sp, #48]
   a0da8:	2a0403f7 	mov	w23, w4
   a0dac:	9400016d 	bl	a1360 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>
   a0db0:	f9401a65 	ldr	x5, [x19, #48]
   a0db4:	b4000185 	cbz	x5, a0de4 <CMouseDevice::ReportHandler(unsigned int, int, int, int)+0x64>
   a0db8:	f9401e64 	ldr	x4, [x19, #56]
   a0dbc:	2a1703e3 	mov	w3, w23
   a0dc0:	f9401bf7 	ldr	x23, [sp, #48]
   a0dc4:	2a1603e2 	mov	w2, w22
   a0dc8:	2a1503e1 	mov	w1, w21
   a0dcc:	2a1403e0 	mov	w0, w20
   a0dd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0dd4:	aa0503f0 	mov	x16, x5
   a0dd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0ddc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0de0:	d61f0200 	br	x16
   a0de4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0de8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0dec:	f9401bf7 	ldr	x23, [sp, #48]
   a0df0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0df4:	d65f03c0 	ret
   a0df8:	d503201f 	nop
   a0dfc:	d503201f 	nop

00000000000a0e00 <CMouseDevice::GetButtonCount() const>:
   a0e00:	b9404400 	ldr	w0, [x0, #68]
   a0e04:	d65f03c0 	ret
   a0e08:	d503201f 	nop
   a0e0c:	d503201f 	nop

00000000000a0e10 <CMouseDevice::HasWheel() const>:
   a0e10:	39412000 	ldrb	w0, [x0, #72]
   a0e14:	d65f03c0 	ret
	...

00000000000a0e20 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE>:
   a0e20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0e24:	528007e2 	mov	w2, #0x3f                  	// #63
   a0e28:	52800021 	mov	w1, #0x1                   	// #1
   a0e2c:	910003fd 	mov	x29, sp
   a0e30:	f9000bf3 	str	x19, [sp, #16]
   a0e34:	d0000153 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   a0e38:	91316273 	add	x19, x19, #0xc58
   a0e3c:	aa1303e0 	mov	x0, x19
   a0e40:	94002cb8 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   a0e44:	aa1303e1 	mov	x1, x19
   a0e48:	d0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a0e4c:	91336042 	add	x2, x2, #0xcd8
   a0e50:	f9400bf3 	ldr	x19, [sp, #16]
   a0e54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0e58:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0e5c:	f945a400 	ldr	x0, [x0, #2888]
   a0e60:	140022d8 	b	a99c0 <__cxa_atexit>
	...

00000000000a0e70 <CTouchScreenDevice::~CTouchScreenDevice()>:
   a0e70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0e74:	d0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a0e78:	911ce021 	add	x1, x1, #0x738
   a0e7c:	910003fd 	mov	x29, sp
   a0e80:	f9000bf3 	str	x19, [sp, #16]
   a0e84:	aa0003f3 	mov	x19, x0
   a0e88:	f9000001 	str	x1, [x0]
   a0e8c:	f900081f 	str	xzr, [x0, #16]
   a0e90:	f900101f 	str	xzr, [x0, #32]
   a0e94:	94000807 	bl	a2eb0 <CDeviceNameService::Get()>
   a0e98:	b9404262 	ldr	w2, [x19, #64]
   a0e9c:	52800003 	mov	w3, #0x0                   	// #0
   a0ea0:	d00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a0ea4:	911a4021 	add	x1, x1, #0x690
   a0ea8:	94000832 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a0eac:	b9404261 	ldr	w1, [x19, #64]
   a0eb0:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0eb4:	9131a000 	add	x0, x0, #0xc68
   a0eb8:	94002ce6 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   a0ebc:	aa1303e0 	mov	x0, x19
   a0ec0:	f9400bf3 	ldr	x19, [sp, #16]
   a0ec4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0ec8:	14000666 	b	a2860 <CDevice::~CDevice()>
   a0ecc:	d503201f 	nop

00000000000a0ed0 <CTouchScreenDevice::~CTouchScreenDevice()>:
   a0ed0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0ed4:	d0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a0ed8:	911ce021 	add	x1, x1, #0x738
   a0edc:	910003fd 	mov	x29, sp
   a0ee0:	f9000bf3 	str	x19, [sp, #16]
   a0ee4:	aa0003f3 	mov	x19, x0
   a0ee8:	f9000001 	str	x1, [x0]
   a0eec:	f900081f 	str	xzr, [x0, #16]
   a0ef0:	f900101f 	str	xzr, [x0, #32]
   a0ef4:	940007ef 	bl	a2eb0 <CDeviceNameService::Get()>
   a0ef8:	b9404262 	ldr	w2, [x19, #64]
   a0efc:	52800003 	mov	w3, #0x0                   	// #0
   a0f00:	d00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a0f04:	911a4021 	add	x1, x1, #0x690
   a0f08:	9400081a 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a0f0c:	b9404261 	ldr	w1, [x19, #64]
   a0f10:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0f14:	9131a000 	add	x0, x0, #0xc68
   a0f18:	94002cce 	bl	ac250 <CNumberPool::FreeNumber(unsigned int)>
   a0f1c:	aa1303e0 	mov	x0, x19
   a0f20:	94000650 	bl	a2860 <CDevice::~CDevice()>
   a0f24:	aa1303e0 	mov	x0, x19
   a0f28:	d2800901 	mov	x1, #0x48                  	// #72
   a0f2c:	f9400bf3 	ldr	x19, [sp, #16]
   a0f30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a0f34:	14002b1f 	b	abbb0 <operator delete(void*, unsigned long)>
   a0f38:	d503201f 	nop
   a0f3c:	d503201f 	nop

00000000000a0f40 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>:
   a0f40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a0f44:	910003fd 	mov	x29, sp
   a0f48:	a90153f3 	stp	x19, x20, [sp, #16]
   a0f4c:	aa0003f3 	mov	x19, x0
   a0f50:	aa0103f4 	mov	x20, x1
   a0f54:	f90013f5 	str	x21, [sp, #32]
   a0f58:	aa0203f5 	mov	x21, x2
   a0f5c:	94000675 	bl	a2930 <CDevice::CDevice()>
   a0f60:	a9015674 	stp	x20, x21, [x19, #16]
   a0f64:	f00000a0 	adrp	x0, b7000 <_etext+0x49c8>
   a0f68:	3dc08c01 	ldr	q1, [x0, #560]
   a0f6c:	f00000a1 	adrp	x1, b7000 <_etext+0x49c8>
   a0f70:	fd413820 	ldr	d0, [x1, #624]
   a0f74:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0f78:	911ce000 	add	x0, x0, #0x738
   a0f7c:	d00000d4 	adrp	x20, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a0f80:	911a4294 	add	x20, x20, #0x690
   a0f84:	f9000260 	str	x0, [x19]
   a0f88:	f900127f 	str	xzr, [x19, #32]
   a0f8c:	aa1403e2 	mov	x2, x20
   a0f90:	52800021 	mov	w1, #0x1                   	// #1
   a0f94:	d0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a0f98:	9131a000 	add	x0, x0, #0xc68
   a0f9c:	3c828261 	stur	q1, [x19, #40]
   a0fa0:	fd001e60 	str	d0, [x19, #56]
   a0fa4:	94002c7b 	bl	ac190 <CNumberPool::AllocateNumber(bool, char const*)>
   a0fa8:	b9004260 	str	w0, [x19, #64]
   a0fac:	940007c1 	bl	a2eb0 <CDeviceNameService::Get()>
   a0fb0:	f94013f5 	ldr	x21, [sp, #32]
   a0fb4:	aa1403e1 	mov	x1, x20
   a0fb8:	b9404262 	ldr	w2, [x19, #64]
   a0fbc:	aa1303e3 	mov	x3, x19
   a0fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0fc4:	52800004 	mov	w4, #0x0                   	// #0
   a0fc8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0fcc:	140007c5 	b	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>

00000000000a0fd0 <CTouchScreenDevice::Update()>:
   a0fd0:	f9400801 	ldr	x1, [x0, #16]
   a0fd4:	b4000081 	cbz	x1, a0fe4 <CTouchScreenDevice::Update()+0x14>
   a0fd8:	f9400c00 	ldr	x0, [x0, #24]
   a0fdc:	aa0103f0 	mov	x16, x1
   a0fe0:	d61f0200 	br	x16
   a0fe4:	d65f03c0 	ret
   a0fe8:	d503201f 	nop
   a0fec:	d503201f 	nop

00000000000a0ff0 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>:
   a0ff0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0ff4:	910003fd 	mov	x29, sp
   a0ff8:	f9401002 	ldr	x2, [x0, #32]
   a0ffc:	b50000a2 	cbnz	x2, a1010 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x20>
   a1000:	f9001001 	str	x1, [x0, #32]
   a1004:	b4000121 	cbz	x1, a1028 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x38>
   a1008:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a100c:	d65f03c0 	ret
   a1010:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1014:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1018:	910bc021 	add	x1, x1, #0x2f0
   a101c:	910c0000 	add	x0, x0, #0x300
   a1020:	528007e2 	mov	w2, #0x3f                  	// #63
   a1024:	940003b7 	bl	a1f00 <assertion_failed>
   a1028:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a102c:	900000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a1030:	910bc021 	add	x1, x1, #0x2f0
   a1034:	91304000 	add	x0, x0, #0xc10
   a1038:	52800822 	mov	w2, #0x41                  	// #65
   a103c:	940003b1 	bl	a1f00 <assertion_failed>

00000000000a1040 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)>:
   a1040:	29401026 	ldp	w6, w4, [x1]
   a1044:	aa0003e8 	mov	x8, x0
   a1048:	6b0400df 	cmp	w6, w4
   a104c:	540004c2 	b.cs	a10e4 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa4>  // b.hs, b.nlast
   a1050:	29411429 	ldp	w9, w5, [x1, #8]
   a1054:	52800000 	mov	w0, #0x0                   	// #0
   a1058:	6b05013f 	cmp	w9, w5
   a105c:	54000422 	b.cs	a10e0 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa0>  // b.hs, b.nlast
   a1060:	7100005f 	cmp	w2, #0x0
   a1064:	1a9f17e7 	cset	w7, eq	// eq = none
   a1068:	7100007f 	cmp	w3, #0x0
   a106c:	1a9f17ea 	cset	w10, eq	// eq = none
   a1070:	2a0a00e0 	orr	w0, w7, w10
   a1074:	35000380 	cbnz	w0, a10e4 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa4>
   a1078:	11000484 	add	w4, w4, #0x1
   a107c:	110004a5 	add	w5, w5, #0x1
   a1080:	6b060084 	subs	w4, w4, w6
   a1084:	4b0900a5 	sub	w5, w5, w9
   a1088:	7a4018a4 	ccmp	w5, #0x0, #0x4, ne	// ne = any
   a108c:	540002a0 	b.eq	a10e0 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa0>  // b.none
   a1090:	52807d06 	mov	w6, #0x3e8                 	// #1000
   a1094:	5289ba69 	mov	w9, #0x4dd3                	// #19923
   a1098:	72a20c49 	movk	w9, #0x1062, lsl #16
   a109c:	52800020 	mov	w0, #0x1                   	// #1
   a10a0:	1b067c47 	mul	w7, w2, w6
   a10a4:	1b067c66 	mul	w6, w3, w6
   a10a8:	1ac408e7 	udiv	w7, w7, w4
   a10ac:	1ac508c4 	udiv	w4, w6, w5
   a10b0:	b9002907 	str	w7, [x8, #40]
   a10b4:	b9400025 	ldr	w5, [x1]
   a10b8:	1b057ce7 	mul	w7, w7, w5
   a10bc:	9ba97ce7 	umull	x7, w7, w9
   a10c0:	d366fce7 	lsr	x7, x7, #38
   a10c4:	29059d04 	stp	w4, w7, [x8, #44]
   a10c8:	b9400821 	ldr	w1, [x1, #8]
   a10cc:	b9003d03 	str	w3, [x8, #60]
   a10d0:	1b017c84 	mul	w4, w4, w1
   a10d4:	9ba97c84 	umull	x4, w4, w9
   a10d8:	d366fc84 	lsr	x4, x4, #38
   a10dc:	29068904 	stp	w4, w2, [x8, #52]
   a10e0:	d65f03c0 	ret
   a10e4:	52800000 	mov	w0, #0x0                   	// #0
   a10e8:	d65f03c0 	ret
   a10ec:	d503201f 	nop

00000000000a10f0 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>:
   a10f0:	aa0003e6 	mov	x6, x0
   a10f4:	2a0103e0 	mov	w0, w1
   a10f8:	2a0203e1 	mov	w1, w2
   a10fc:	f94010c7 	ldr	x7, [x6, #32]
   a1100:	b4000347 	cbz	x7, a1168 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>
   a1104:	7100041f 	cmp	w0, #0x1
   a1108:	54000320 	b.eq	a116c <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x7c>  // b.none
   a110c:	b94028c5 	ldr	w5, [x6, #40]
   a1110:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   a1114:	72a20c42 	movk	w2, #0x1062, lsl #16
   a1118:	b94030c9 	ldr	w9, [x6, #48]
   a111c:	b94038c8 	ldr	w8, [x6, #56]
   a1120:	1b057c63 	mul	w3, w3, w5
   a1124:	9ba27c65 	umull	x5, w3, w2
   a1128:	d366fca5 	lsr	x5, x5, #38
   a112c:	4b0900a5 	sub	w5, w5, w9
   a1130:	6b05011f 	cmp	w8, w5
   a1134:	540001a9 	b.ls	a1168 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>  // b.plast
   a1138:	b9402cc3 	ldr	w3, [x6, #44]
   a113c:	b94034c8 	ldr	w8, [x6, #52]
   a1140:	b9403cc6 	ldr	w6, [x6, #60]
   a1144:	1b037c83 	mul	w3, w4, w3
   a1148:	9ba27c63 	umull	x3, w3, w2
   a114c:	d366fc63 	lsr	x3, x3, #38
   a1150:	4b080063 	sub	w3, w3, w8
   a1154:	6b0300df 	cmp	w6, w3
   a1158:	54000089 	b.ls	a1168 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>  // b.plast
   a115c:	2a0503e2 	mov	w2, w5
   a1160:	aa0703f0 	mov	x16, x7
   a1164:	d61f0200 	br	x16
   a1168:	d65f03c0 	ret
   a116c:	aa0703f0 	mov	x16, x7
   a1170:	52800003 	mov	w3, #0x0                   	// #0
   a1174:	52800002 	mov	w2, #0x0                   	// #0
   a1178:	d61f0200 	br	x16
   a117c:	00000000 	udf	#0

00000000000a1180 <_GLOBAL__sub_I__ZN18CTouchScreenDevice18s_DeviceNumberPoolE>:
   a1180:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1184:	528007e2 	mov	w2, #0x3f                  	// #63
   a1188:	52800021 	mov	w1, #0x1                   	// #1
   a118c:	910003fd 	mov	x29, sp
   a1190:	f9000bf3 	str	x19, [sp, #16]
   a1194:	b0000153 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   a1198:	9131a273 	add	x19, x19, #0xc68
   a119c:	aa1303e0 	mov	x0, x19
   a11a0:	94002be0 	bl	ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   a11a4:	aa1303e1 	mov	x1, x19
   a11a8:	b0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a11ac:	91336042 	add	x2, x2, #0xcd8
   a11b0:	f9400bf3 	ldr	x19, [sp, #16]
   a11b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a11b8:	b0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a11bc:	f945a400 	ldr	x0, [x0, #2888]
   a11c0:	14002200 	b	a99c0 <__cxa_atexit>
	...

00000000000a11d0 <CMouseBehaviour::CMouseBehaviour()>:
   a11d0:	a9007c1f 	stp	xzr, xzr, [x0]
   a11d4:	7900201f 	strh	wzr, [x0, #16]
   a11d8:	b900141f 	str	wzr, [x0, #20]
   a11dc:	f9000c1f 	str	xzr, [x0, #24]
   a11e0:	d65f03c0 	ret
   a11e4:	d503201f 	nop
   a11e8:	d503201f 	nop
   a11ec:	d503201f 	nop

00000000000a11f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   a11f0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a11f4:	aa0003e3 	mov	x3, x0
   a11f8:	910003fd 	mov	x29, sp
   a11fc:	b9400000 	ldr	w0, [x0]
   a1200:	a90153f3 	stp	x19, x20, [sp, #16]
   a1204:	35000520 	cbnz	w0, a12a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xb8>
   a1208:	b9000061 	str	w1, [x3]
   a120c:	340005a1 	cbz	w1, a12c0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd0>
   a1210:	b9400460 	ldr	w0, [x3, #4]
   a1214:	35000620 	cbnz	w0, a12d8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe8>
   a1218:	b9000462 	str	w2, [x3, #4]
   a121c:	340006a2 	cbz	w2, a12f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x100>
   a1220:	1e270020 	fmov	s0, w1
   a1224:	0f000421 	movi	v1.2s, #0x1
   a1228:	910083f3 	add	x19, sp, #0x20
   a122c:	52800001 	mov	w1, #0x0                   	// #0
   a1230:	4e0c1c40 	mov	v0.s[1], w2
   a1234:	aa1303e0 	mov	x0, x19
   a1238:	0ea18400 	add	v0.2s, v0.2s, v1.2s
   a123c:	2f3f0400 	ushr	v0.2s, v0.2s, #1
   a1240:	fd000460 	str	d0, [x3, #8]
   a1244:	94000357 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a1248:	0f000600 	movi	v0.2s, #0x10
   a124c:	b00000c5 	adrp	x5, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a1250:	911a80a5 	add	x5, x5, #0x6a0
   a1254:	9100a3e2 	add	x2, sp, #0x28
   a1258:	320204a5 	orr	w5, w5, #0xc0000000
   a125c:	aa1303e0 	mov	x0, x19
   a1260:	52800304 	mov	w4, #0x18                  	// #24
   a1264:	52800483 	mov	w3, #0x24                  	// #36
   a1268:	52900201 	mov	w1, #0x8010                	// #32784
   a126c:	fc0343e0 	stur	d0, [sp, #52]
   a1270:	290797ff 	stp	wzr, w5, [sp, #60]
   a1274:	f80443ff 	stur	xzr, [sp, #68]
   a1278:	940003aa 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a127c:	12001c14 	and	w20, w0, #0xff
   a1280:	36000080 	tbz	w0, #0, a1290 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xa0>
   a1284:	b94037e0 	ldr	w0, [sp, #52]
   a1288:	7100001f 	cmp	w0, #0x0
   a128c:	1a9f17f4 	cset	w20, eq	// eq = none
   a1290:	aa1303e0 	mov	x0, x19
   a1294:	94000347 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a1298:	2a1403e0 	mov	w0, w20
   a129c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a12a0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a12a4:	d65f03c0 	ret
   a12a8:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a12ac:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a12b0:	910c6021 	add	x1, x1, #0x318
   a12b4:	910cc000 	add	x0, x0, #0x330
   a12b8:	52800aa2 	mov	w2, #0x55                  	// #85
   a12bc:	94000311 	bl	a1f00 <assertion_failed>
   a12c0:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a12c4:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a12c8:	910c6021 	add	x1, x1, #0x318
   a12cc:	910d2000 	add	x0, x0, #0x348
   a12d0:	52800ae2 	mov	w2, #0x57                  	// #87
   a12d4:	9400030b 	bl	a1f00 <assertion_failed>
   a12d8:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a12dc:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a12e0:	910c6021 	add	x1, x1, #0x318
   a12e4:	910d8000 	add	x0, x0, #0x360
   a12e8:	52800b22 	mov	w2, #0x59                  	// #89
   a12ec:	94000305 	bl	a1f00 <assertion_failed>
   a12f0:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a12f4:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a12f8:	910c6021 	add	x1, x1, #0x318
   a12fc:	910de000 	add	x0, x0, #0x378
   a1300:	52800b62 	mov	w2, #0x5b                  	// #91
   a1304:	940002ff 	bl	a1f00 <assertion_failed>
   a1308:	d503201f 	nop
   a130c:	d503201f 	nop

00000000000a1310 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   a1310:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1314:	910003fd 	mov	x29, sp
   a1318:	f9400c02 	ldr	x2, [x0, #24]
   a131c:	b50000a2 	cbnz	x2, a1330 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x20>
   a1320:	f9000c01 	str	x1, [x0, #24]
   a1324:	b4000121 	cbz	x1, a1348 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x38>
   a1328:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a132c:	d65f03c0 	ret
   a1330:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1334:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1338:	910c6021 	add	x1, x1, #0x318
   a133c:	910c0000 	add	x0, x0, #0x300
   a1340:	528011e2 	mov	w2, #0x8f                  	// #143
   a1344:	940002ef 	bl	a1f00 <assertion_failed>
   a1348:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a134c:	900000a0 	adrp	x0, b5000 <_etext+0x29c8>
   a1350:	910c6021 	add	x1, x1, #0x318
   a1354:	91304000 	add	x0, x0, #0xc10
   a1358:	52801222 	mov	w2, #0x91                  	// #145
   a135c:	940002e9 	bl	a1f00 <assertion_failed>

00000000000a1360 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>:
   a1360:	b9400005 	ldr	w5, [x0]
   a1364:	34000ae5 	cbz	w5, a14c0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x160>
   a1368:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a136c:	910003fd 	mov	x29, sp
   a1370:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1374:	2a0403f6 	mov	w22, w4
   a1378:	b9400404 	ldr	w4, [x0, #4]
   a137c:	a90153f3 	stp	x19, x20, [sp, #16]
   a1380:	aa0003f3 	mov	x19, x0
   a1384:	34000964 	cbz	w4, a14b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x150>
   a1388:	52800240 	mov	w0, #0x12                  	// #18
   a138c:	2a0103f4 	mov	w20, w1
   a1390:	528ccce1 	mov	w1, #0x6667                	// #26215
   a1394:	72acccc1 	movk	w1, #0x6666, lsl #16
   a1398:	1b007c42 	mul	w2, w2, w0
   a139c:	1b007c60 	mul	w0, w3, w0
   a13a0:	29411e68 	ldp	w8, w7, [x19, #8]
   a13a4:	9b217c46 	smull	x6, w2, w1
   a13a8:	9b217c01 	smull	x1, w0, w1
   a13ac:	9362fcc6 	asr	x6, x6, #34
   a13b0:	4b827cc2 	sub	w2, w6, w2, asr #31
   a13b4:	9362fc21 	asr	x1, x1, #34
   a13b8:	0b080042 	add	w2, w2, w8
   a13bc:	4b807c20 	sub	w0, w1, w0, asr #31
   a13c0:	6b0200bf 	cmp	w5, w2
   a13c4:	54000809 	b.ls	a14c4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x164>  // b.plast
   a13c8:	b9000a62 	str	w2, [x19, #8]
   a13cc:	0b0000e0 	add	w0, w7, w0
   a13d0:	6b00009f 	cmp	w4, w0
   a13d4:	54000908 	b.hi	a14f4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x194>  // b.pmore
   a13d8:	b9000e67 	str	w7, [x19, #12]
   a13dc:	6b08005f 	cmp	w2, w8
   a13e0:	54000140 	b.eq	a1408 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>  // b.none
   a13e4:	f9400e65 	ldr	x5, [x19, #24]
   a13e8:	52800020 	mov	w0, #0x1                   	// #1
   a13ec:	39004260 	strb	w0, [x19, #16]
   a13f0:	b40000c5 	cbz	x5, a1408 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>
   a13f4:	2a0703e3 	mov	w3, w7
   a13f8:	2a1603e4 	mov	w4, w22
   a13fc:	2a1403e1 	mov	w1, w20
   a1400:	52800000 	mov	w0, #0x0                   	// #0
   a1404:	d63f00a0 	blr	x5
   a1408:	b9401660 	ldr	w0, [x19, #20]
   a140c:	6b14001f 	cmp	w0, w20
   a1410:	540003e0 	b.eq	a148c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x12c>  // b.none
   a1414:	f9400e61 	ldr	x1, [x19, #24]
   a1418:	f9001bf7 	str	x23, [sp, #48]
   a141c:	52800015 	mov	w21, #0x0                   	// #0
   a1420:	52800037 	mov	w23, #0x1                   	// #1
   a1424:	b5000181 	cbnz	x1, a1454 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf4>
   a1428:	14000038 	b	a1508 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x1a8>
   a142c:	350000c0 	cbnz	w0, a1444 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe4>
   a1430:	f9400e65 	ldr	x5, [x19, #24]
   a1434:	2a1603e4 	mov	w4, w22
   a1438:	29410e62 	ldp	w2, w3, [x19, #8]
   a143c:	52800040 	mov	w0, #0x2                   	// #2
   a1440:	d63f00a0 	blr	x5
   a1444:	110006b5 	add	w21, w21, #0x1
   a1448:	710016bf 	cmp	w21, #0x5
   a144c:	540001e0 	b.eq	a1488 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x128>  // b.none
   a1450:	b9401660 	ldr	w0, [x19, #20]
   a1454:	1ad522e1 	lsl	w1, w23, w21
   a1458:	6a01001f 	tst	w0, w1
   a145c:	0a010280 	and	w0, w20, w1
   a1460:	54fffe61 	b.ne	a142c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xcc>  // b.any
   a1464:	34ffff00 	cbz	w0, a1444 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe4>
   a1468:	f9400e65 	ldr	x5, [x19, #24]
   a146c:	2a1603e4 	mov	w4, w22
   a1470:	29410e62 	ldp	w2, w3, [x19, #8]
   a1474:	110006b5 	add	w21, w21, #0x1
   a1478:	52800020 	mov	w0, #0x1                   	// #1
   a147c:	d63f00a0 	blr	x5
   a1480:	710016bf 	cmp	w21, #0x5
   a1484:	54fffe61 	b.ne	a1450 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf0>  // b.any
   a1488:	f9401bf7 	ldr	x23, [sp, #48]
   a148c:	34000116 	cbz	w22, a14ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x14c>
   a1490:	f9400e65 	ldr	x5, [x19, #24]
   a1494:	b40000c5 	cbz	x5, a14ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x14c>
   a1498:	29410e62 	ldp	w2, w3, [x19, #8]
   a149c:	2a1603e4 	mov	w4, w22
   a14a0:	2a1403e1 	mov	w1, w20
   a14a4:	52800060 	mov	w0, #0x3                   	// #3
   a14a8:	d63f00a0 	blr	x5
   a14ac:	b9001674 	str	w20, [x19, #20]
   a14b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a14b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a14b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a14bc:	d65f03c0 	ret
   a14c0:	d65f03c0 	ret
   a14c4:	b9000a68 	str	w8, [x19, #8]
   a14c8:	0b0000e0 	add	w0, w7, w0
   a14cc:	6b00009f 	cmp	w4, w0
   a14d0:	540000e9 	b.ls	a14ec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x18c>  // b.plast
   a14d4:	2a0803e2 	mov	w2, w8
   a14d8:	b9000e60 	str	w0, [x19, #12]
   a14dc:	6b07001f 	cmp	w0, w7
   a14e0:	54fff940 	b.eq	a1408 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>  // b.none
   a14e4:	2a0003e7 	mov	w7, w0
   a14e8:	17ffffbf 	b	a13e4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x84>
   a14ec:	b9000e67 	str	w7, [x19, #12]
   a14f0:	17ffffc6 	b	a1408 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>
   a14f4:	b9000e60 	str	w0, [x19, #12]
   a14f8:	6b08005f 	cmp	w2, w8
   a14fc:	54ffff00 	b.eq	a14dc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x17c>  // b.none
   a1500:	2a0003e7 	mov	w7, w0
   a1504:	17ffffb8 	b	a13e4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x84>
   a1508:	f9401bf7 	ldr	x23, [sp, #48]
   a150c:	b9001674 	str	w20, [x19, #20]
   a1510:	17ffffe8 	b	a14b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x150>
   a1514:	d503201f 	nop
   a1518:	d503201f 	nop
   a151c:	d503201f 	nop

00000000000a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   a1520:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a1524:	910003fd 	mov	x29, sp
   a1528:	a90153f3 	stp	x19, x20, [sp, #16]
   a152c:	9100e3f3 	add	x19, sp, #0x38
   a1530:	2a0103f4 	mov	w20, w1
   a1534:	52800001 	mov	w1, #0x0                   	// #0
   a1538:	a9025bf5 	stp	x21, x22, [sp, #32]
   a153c:	12001c56 	and	w22, w2, #0xff
   a1540:	2a0003f5 	mov	w21, w0
   a1544:	aa1303e0 	mov	x0, x19
   a1548:	94000296 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a154c:	2909d7f6 	stp	w22, w21, [sp, #76]
   a1550:	52800025 	mov	w5, #0x1                   	// #1
   a1554:	910103e2 	add	x2, sp, #0x40
   a1558:	aa1303e0 	mov	x0, x19
   a155c:	52800204 	mov	w4, #0x10                  	// #16
   a1560:	52800383 	mov	w3, #0x1c                  	// #28
   a1564:	52900221 	mov	w1, #0x8011                	// #32785
   a1568:	290a97f4 	stp	w20, w5, [sp, #84]
   a156c:	940002ed 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a1570:	12001c14 	and	w20, w0, #0xff
   a1574:	36000080 	tbz	w0, #0, a1584 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x64>
   a1578:	b9404fe0 	ldr	w0, [sp, #76]
   a157c:	7100001f 	cmp	w0, #0x0
   a1580:	1a9f17f4 	cset	w20, eq	// eq = none
   a1584:	aa1303e0 	mov	x0, x19
   a1588:	9400028a 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a158c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1590:	2a1403e0 	mov	w0, w20
   a1594:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1598:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a159c:	d65f03c0 	ret

00000000000a15a0 <CMouseBehaviour::~CMouseBehaviour()>:
   a15a0:	39404401 	ldrb	w1, [x0, #17]
   a15a4:	f9000c1f 	str	xzr, [x0, #24]
   a15a8:	37000041 	tbnz	w1, #0, a15b0 <CMouseBehaviour::~CMouseBehaviour()+0x10>
   a15ac:	d65f03c0 	ret
   a15b0:	52800002 	mov	w2, #0x0                   	// #0
   a15b4:	52800001 	mov	w1, #0x0                   	// #0
   a15b8:	52800000 	mov	w0, #0x0                   	// #0
   a15bc:	17ffffd9 	b	a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00000000000a15c0 <CMouseBehaviour::Release()>:
   a15c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a15c4:	910003fd 	mov	x29, sp
   a15c8:	f9000bf3 	str	x19, [sp, #16]
   a15cc:	aa0003f3 	mov	x19, x0
   a15d0:	b9400000 	ldr	w0, [x0]
   a15d4:	34000100 	cbz	w0, a15f4 <CMouseBehaviour::Release()+0x34>
   a15d8:	b9400660 	ldr	w0, [x19, #4]
   a15dc:	340000c0 	cbz	w0, a15f4 <CMouseBehaviour::Release()+0x34>
   a15e0:	39404660 	ldrb	w0, [x19, #17]
   a15e4:	370000e0 	tbnz	w0, #0, a1600 <CMouseBehaviour::Release()+0x40>
   a15e8:	a9007e7f 	stp	xzr, xzr, [x19]
   a15ec:	7900227f 	strh	wzr, [x19, #16]
   a15f0:	b900167f 	str	wzr, [x19, #20]
   a15f4:	f9400bf3 	ldr	x19, [sp, #16]
   a15f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a15fc:	d65f03c0 	ret
   a1600:	52800002 	mov	w2, #0x0                   	// #0
   a1604:	52800001 	mov	w1, #0x0                   	// #0
   a1608:	52800000 	mov	w0, #0x0                   	// #0
   a160c:	97ffffc5 	bl	a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   a1610:	17fffff6 	b	a15e8 <CMouseBehaviour::Release()+0x28>
   a1614:	d503201f 	nop
   a1618:	d503201f 	nop
   a161c:	d503201f 	nop

00000000000a1620 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   a1620:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1624:	910003fd 	mov	x29, sp
   a1628:	b9400005 	ldr	w5, [x0]
   a162c:	34000285 	cbz	w5, a167c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   a1630:	aa0003e3 	mov	x3, x0
   a1634:	b9400400 	ldr	w0, [x0, #4]
   a1638:	340002e0 	cbz	w0, a1694 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   a163c:	2a0103e4 	mov	w4, w1
   a1640:	6b02001f 	cmp	w0, w2
   a1644:	2a0203e1 	mov	w1, w2
   a1648:	7a4480a0 	ccmp	w5, w4, #0x0, hi	// hi = pmore
   a164c:	52800000 	mov	w0, #0x0                   	// #0
   a1650:	54000068 	b.hi	a165c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x3c>  // b.pmore
   a1654:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a1658:	d65f03c0 	ret
   a165c:	39404462 	ldrb	w2, [x3, #17]
   a1660:	52800020 	mov	w0, #0x1                   	// #1
   a1664:	29010464 	stp	w4, w1, [x3, #8]
   a1668:	3607ff62 	tbz	w2, #0, a1654 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   a166c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a1670:	2a0003e2 	mov	w2, w0
   a1674:	2a0403e0 	mov	w0, w4
   a1678:	17ffffaa 	b	a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   a167c:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1680:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1684:	910c6021 	add	x1, x1, #0x318
   a1688:	910d2000 	add	x0, x0, #0x348
   a168c:	528012c2 	mov	w2, #0x96                  	// #150
   a1690:	9400021c 	bl	a1f00 <assertion_failed>
   a1694:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1698:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a169c:	910c6021 	add	x1, x1, #0x318
   a16a0:	910de000 	add	x0, x0, #0x378
   a16a4:	528012e2 	mov	w2, #0x97                  	// #151
   a16a8:	94000216 	bl	a1f00 <assertion_failed>
   a16ac:	d503201f 	nop

00000000000a16b0 <CMouseBehaviour::ShowCursor(bool)>:
   a16b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a16b4:	aa0003e3 	mov	x3, x0
   a16b8:	12001c22 	and	w2, w1, #0xff
   a16bc:	910003fd 	mov	x29, sp
   a16c0:	b9400001 	ldr	w1, [x0]
   a16c4:	b9400800 	ldr	w0, [x0, #8]
   a16c8:	f9000bf3 	str	x19, [sp, #16]
   a16cc:	39404473 	ldrb	w19, [x3, #17]
   a16d0:	6b01001f 	cmp	w0, w1
   a16d4:	39004462 	strb	w2, [x3, #17]
   a16d8:	54000142 	b.cs	a1700 <CMouseBehaviour::ShowCursor(bool)+0x50>  // b.hs, b.nlast
   a16dc:	b9400464 	ldr	w4, [x3, #4]
   a16e0:	b9400c61 	ldr	w1, [x3, #12]
   a16e4:	6b04003f 	cmp	w1, w4
   a16e8:	54000182 	b.cs	a1718 <CMouseBehaviour::ShowCursor(bool)+0x68>  // b.hs, b.nlast
   a16ec:	97ffff8d 	bl	a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   a16f0:	2a1303e0 	mov	w0, w19
   a16f4:	f9400bf3 	ldr	x19, [sp, #16]
   a16f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a16fc:	d65f03c0 	ret
   a1700:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1704:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1708:	910c6021 	add	x1, x1, #0x318
   a170c:	910e4000 	add	x0, x0, #0x390
   a1710:	528015c2 	mov	w2, #0xae                  	// #174
   a1714:	940001fb 	bl	a1f00 <assertion_failed>
   a1718:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a171c:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1720:	910c6021 	add	x1, x1, #0x318
   a1724:	910ec000 	add	x0, x0, #0x3b0
   a1728:	528015e2 	mov	w2, #0xaf                  	// #175
   a172c:	940001f5 	bl	a1f00 <assertion_failed>

00000000000a1730 <CMouseBehaviour::UpdateCursor()>:
   a1730:	aa0003e3 	mov	x3, x0
   a1734:	39404400 	ldrb	w0, [x0, #17]
   a1738:	36000060 	tbz	w0, #0, a1744 <CMouseBehaviour::UpdateCursor()+0x14>
   a173c:	39404060 	ldrb	w0, [x3, #16]
   a1740:	37000040 	tbnz	w0, #0, a1748 <CMouseBehaviour::UpdateCursor()+0x18>
   a1744:	d65f03c0 	ret
   a1748:	29410460 	ldp	w0, w1, [x3, #8]
   a174c:	3900407f 	strb	wzr, [x3, #16]
   a1750:	52800022 	mov	w2, #0x1                   	// #1
   a1754:	17ffff73 	b	a1520 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
	...

00000000000a1760 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   a1760:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1764:	aa0103e3 	mov	x3, x1
   a1768:	aa0203e1 	mov	x1, x2
   a176c:	910003fd 	mov	x29, sp
   a1770:	f9000bf3 	str	x19, [sp, #16]
   a1774:	aa0003f3 	mov	x19, x0
   a1778:	f8008403 	str	x3, [x0], #8
   a177c:	94001a71 	bl	a8140 <CString::CString(char const*)>
   a1780:	4f000400 	movi	v0.4s, #0x0
   a1784:	3c828260 	stur	q0, [x19, #40]
   a1788:	3c838260 	stur	q0, [x19, #56]
   a178c:	f9400bf3 	ldr	x19, [sp, #16]
   a1790:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1794:	d65f03c0 	ret
   a1798:	d503201f 	nop
   a179c:	d503201f 	nop

00000000000a17a0 <CPartitionManager::~CPartitionManager()>:
   a17a0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a17a4:	910003fd 	mov	x29, sp
   a17a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a17ac:	9100a013 	add	x19, x0, #0x28
   a17b0:	910143f4 	add	x20, sp, #0x50
   a17b4:	a90363f7 	stp	x23, x24, [sp, #48]
   a17b8:	b00000b8 	adrp	x24, b6000 <_etext+0x39c8>
   a17bc:	910f4318 	add	x24, x24, #0x3d0
   a17c0:	aa0003f7 	mov	x23, x0
   a17c4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a17c8:	91012019 	add	x25, x0, #0x48
   a17cc:	9100201a 	add	x26, x0, #0x8
   a17d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a17d4:	52800016 	mov	w22, #0x0                   	// #0
   a17d8:	f9400262 	ldr	x2, [x19]
   a17dc:	aa1403e0 	mov	x0, x20
   a17e0:	b4000362 	cbz	x2, a184c <CPartitionManager::~CPartitionManager()+0xac>
   a17e4:	94001a4f 	bl	a8120 <CString::CString()>
   a17e8:	110006d6 	add	w22, w22, #0x1
   a17ec:	aa1a03e0 	mov	x0, x26
   a17f0:	94001a90 	bl	a8230 <CString::operator char const*() const>
   a17f4:	2a1603e3 	mov	w3, w22
   a17f8:	aa0003e2 	mov	x2, x0
   a17fc:	aa1803e1 	mov	x1, x24
   a1800:	aa1403e0 	mov	x0, x20
   a1804:	9400204f 	bl	a9940 <CString::Format(char const*, ...)>
   a1808:	940005aa 	bl	a2eb0 <CDeviceNameService::Get()>
   a180c:	aa0003f5 	mov	x21, x0
   a1810:	aa1403e0 	mov	x0, x20
   a1814:	94001a87 	bl	a8230 <CString::operator char const*() const>
   a1818:	52800022 	mov	w2, #0x1                   	// #1
   a181c:	aa0003e1 	mov	x1, x0
   a1820:	aa1503e0 	mov	x0, x21
   a1824:	940004ef 	bl	a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   a1828:	f9400261 	ldr	x1, [x19]
   a182c:	aa0103e0 	mov	x0, x1
   a1830:	b4000081 	cbz	x1, a1840 <CPartitionManager::~CPartitionManager()+0xa0>
   a1834:	f9400021 	ldr	x1, [x1]
   a1838:	f9400421 	ldr	x1, [x1, #8]
   a183c:	d63f0020 	blr	x1
   a1840:	f900027f 	str	xzr, [x19]
   a1844:	aa1403e0 	mov	x0, x20
   a1848:	940019fa 	bl	a8030 <CString::~CString()>
   a184c:	91002273 	add	x19, x19, #0x8
   a1850:	eb19027f 	cmp	x19, x25
   a1854:	54fffc21 	b.ne	a17d8 <CPartitionManager::~CPartitionManager()+0x38>  // b.any
   a1858:	a94153f3 	ldp	x19, x20, [sp, #16]
   a185c:	aa1a03e0 	mov	x0, x26
   a1860:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1864:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a1868:	f90002ff 	str	xzr, [x23]
   a186c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a1870:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a1874:	140019ef 	b	a8030 <CString::~CString()>
   a1878:	d503201f 	nop
   a187c:	d503201f 	nop

00000000000a1880 <CPartitionManager::Initialize()>:
   a1880:	d109c3ff 	sub	sp, sp, #0x270
   a1884:	d2800001 	mov	x1, #0x0                   	// #0
   a1888:	a9007bfd 	stp	x29, x30, [sp]
   a188c:	910003fd 	mov	x29, sp
   a1890:	a90153f3 	stp	x19, x20, [sp, #16]
   a1894:	aa0003f3 	mov	x19, x0
   a1898:	f9400000 	ldr	x0, [x0]
   a189c:	f9400002 	ldr	x2, [x0]
   a18a0:	f9401042 	ldr	x2, [x2, #32]
   a18a4:	d63f0040 	blr	x2
   a18a8:	b5000480 	cbnz	x0, a1938 <CPartitionManager::Initialize()+0xb8>
   a18ac:	f9400260 	ldr	x0, [x19]
   a18b0:	9101c3e1 	add	x1, sp, #0x70
   a18b4:	d2804002 	mov	x2, #0x200                 	// #512
   a18b8:	f9400003 	ldr	x3, [x0]
   a18bc:	f9400863 	ldr	x3, [x3, #16]
   a18c0:	d63f0060 	blr	x3
   a18c4:	7108001f 	cmp	w0, #0x200
   a18c8:	54000381 	b.ne	a1938 <CPartitionManager::Initialize()+0xb8>  // b.any
   a18cc:	7944dfe1 	ldrh	w1, [sp, #622]
   a18d0:	52954aa0 	mov	w0, #0xaa55                	// #43605
   a18d4:	6b00003f 	cmp	w1, w0
   a18d8:	54000a01 	b.ne	a1a18 <CPartitionManager::Initialize()+0x198>  // b.any
   a18dc:	9108cbf4 	add	x20, sp, #0x232
   a18e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a18e4:	9100a275 	add	x21, x19, #0x28
   a18e8:	a90363f7 	stp	x23, x24, [sp, #48]
   a18ec:	91012278 	add	x24, x19, #0x48
   a18f0:	52800017 	mov	w23, #0x0                   	// #0
   a18f4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a18f8:	d290043a 	mov	x26, #0x8021                	// #32801
   a18fc:	39400280 	ldrb	w0, [x20]
   a1900:	71003c1f 	cmp	w0, #0xf
   a1904:	54000328 	b.hi	a1968 <CPartitionManager::Initialize()+0xe8>  // b.pmore
   a1908:	9ac02740 	lsr	x0, x26, x0
   a190c:	36000320 	tbz	w0, #0, a1970 <CPartitionManager::Initialize()+0xf0>
   a1910:	910022b5 	add	x21, x21, #0x8
   a1914:	91004294 	add	x20, x20, #0x10
   a1918:	eb1802bf 	cmp	x21, x24
   a191c:	54ffff01 	b.ne	a18fc <CPartitionManager::Initialize()+0x7c>  // b.any
   a1920:	340008f7 	cbz	w23, a1a3c <CPartitionManager::Initialize()+0x1bc>
   a1924:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1928:	52800020 	mov	w0, #0x1                   	// #1
   a192c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a1930:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a1934:	14000009 	b	a1958 <CPartitionManager::Initialize()+0xd8>
   a1938:	940008ae 	bl	a3bf0 <CLogger::Get()>
   a193c:	b00000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a1940:	b00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a1944:	910f6063 	add	x3, x3, #0x3d8
   a1948:	912a8021 	add	x1, x1, #0xaa0
   a194c:	52800022 	mov	w2, #0x1                   	// #1
   a1950:	94000a9c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a1954:	52800000 	mov	w0, #0x0                   	// #0
   a1958:	a9407bfd 	ldp	x29, x30, [sp]
   a195c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1960:	9109c3ff 	add	sp, sp, #0x270
   a1964:	d65f03c0 	ret
   a1968:	7103bc1f 	cmp	w0, #0xef
   a196c:	54fffd20 	b.eq	a1910 <CPartitionManager::Initialize()+0x90>  // b.none
   a1970:	b9400680 	ldr	w0, [x20, #4]
   a1974:	34fffce0 	cbz	w0, a1910 <CPartitionManager::Initialize()+0x90>
   a1978:	b9400a80 	ldr	w0, [x20, #8]
   a197c:	34fffca0 	cbz	w0, a1910 <CPartitionManager::Initialize()+0x90>
   a1980:	f94002a0 	ldr	x0, [x21]
   a1984:	b5000740 	cbnz	x0, a1a6c <CPartitionManager::Initialize()+0x1ec>
   a1988:	aa1303f9 	mov	x25, x19
   a198c:	d2800600 	mov	x0, #0x30                  	// #48
   a1990:	94002868 	bl	abb30 <operator new(unsigned long)>
   a1994:	aa0003f6 	mov	x22, x0
   a1998:	29408e82 	ldp	w2, w3, [x20, #4]
   a199c:	110006f7 	add	w23, w23, #0x1
   a19a0:	f8408721 	ldr	x1, [x25], #8
   a19a4:	910022b5 	add	x21, x21, #0x8
   a19a8:	91004294 	add	x20, x20, #0x10
   a19ac:	940000ad 	bl	a1c60 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   a19b0:	f81f82b6 	stur	x22, [x21, #-8]
   a19b4:	910143f6 	add	x22, sp, #0x50
   a19b8:	aa1603e0 	mov	x0, x22
   a19bc:	940019d9 	bl	a8120 <CString::CString()>
   a19c0:	aa1903e0 	mov	x0, x25
   a19c4:	94001a1b 	bl	a8230 <CString::operator char const*() const>
   a19c8:	2a1703e3 	mov	w3, w23
   a19cc:	aa0003e2 	mov	x2, x0
   a19d0:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a19d4:	910f4021 	add	x1, x1, #0x3d0
   a19d8:	aa1603e0 	mov	x0, x22
   a19dc:	94001fd9 	bl	a9940 <CString::Format(char const*, ...)>
   a19e0:	94000534 	bl	a2eb0 <CDeviceNameService::Get()>
   a19e4:	aa0003f9 	mov	x25, x0
   a19e8:	aa1603e0 	mov	x0, x22
   a19ec:	94001a11 	bl	a8230 <CString::operator char const*() const>
   a19f0:	f85f82a2 	ldur	x2, [x21, #-8]
   a19f4:	aa0003e1 	mov	x1, x0
   a19f8:	52800023 	mov	w3, #0x1                   	// #1
   a19fc:	aa1903e0 	mov	x0, x25
   a1a00:	9400043c 	bl	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   a1a04:	aa1603e0 	mov	x0, x22
   a1a08:	9400198a 	bl	a8030 <CString::~CString()>
   a1a0c:	eb1802bf 	cmp	x21, x24
   a1a10:	54fff761 	b.ne	a18fc <CPartitionManager::Initialize()+0x7c>  // b.any
   a1a14:	17ffffc3 	b	a1920 <CPartitionManager::Initialize()+0xa0>
   a1a18:	94000876 	bl	a3bf0 <CLogger::Get()>
   a1a1c:	b00000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a1a20:	b00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a1a24:	910fa063 	add	x3, x3, #0x3e8
   a1a28:	912a8021 	add	x1, x1, #0xaa0
   a1a2c:	52800042 	mov	w2, #0x2                   	// #2
   a1a30:	94000a64 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a1a34:	52800020 	mov	w0, #0x1                   	// #1
   a1a38:	17ffffc8 	b	a1958 <CPartitionManager::Initialize()+0xd8>
   a1a3c:	9400086d 	bl	a3bf0 <CLogger::Get()>
   a1a40:	b00000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a1a44:	b00000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a1a48:	9110c063 	add	x3, x3, #0x430
   a1a4c:	912a8021 	add	x1, x1, #0xaa0
   a1a50:	52800042 	mov	w2, #0x2                   	// #2
   a1a54:	94000a5b 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a1a58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1a5c:	52800020 	mov	w0, #0x1                   	// #1
   a1a60:	a94363f7 	ldp	x23, x24, [sp, #48]
   a1a64:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a1a68:	17ffffbc 	b	a1958 <CPartitionManager::Initialize()+0xd8>
   a1a6c:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1a70:	b00000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a1a74:	91100021 	add	x1, x1, #0x400
   a1a78:	91106000 	add	x0, x0, #0x418
   a1a7c:	52800f02 	mov	w2, #0x78                  	// #120
   a1a80:	94000120 	bl	a1f00 <assertion_failed>
	...

00000000000a1a90 <CPartition::Read(void*, unsigned long)>:
   a1a90:	3940a004 	ldrb	w4, [x0, #40]
   a1a94:	370002a4 	tbnz	w4, #0, a1ae8 <CPartition::Read(void*, unsigned long)+0x58>
   a1a98:	f9401005 	ldr	x5, [x0, #32]
   a1a9c:	9107fc43 	add	x3, x2, #0x1ff
   a1aa0:	b9401c04 	ldr	w4, [x0, #28]
   a1aa4:	8b050063 	add	x3, x3, x5
   a1aa8:	eb43249f 	cmp	x4, x3, lsr #9
   a1aac:	540001e3 	b.cc	a1ae8 <CPartition::Read(void*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   a1ab0:	f9400800 	ldr	x0, [x0, #16]
   a1ab4:	b40000a0 	cbz	x0, a1ac8 <CPartition::Read(void*, unsigned long)+0x38>
   a1ab8:	f9400003 	ldr	x3, [x0]
   a1abc:	f9400863 	ldr	x3, [x3, #16]
   a1ac0:	aa0303f0 	mov	x16, x3
   a1ac4:	d61f0200 	br	x16
   a1ac8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1acc:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1ad0:	d0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a1ad4:	910003fd 	mov	x29, sp
   a1ad8:	91116021 	add	x1, x1, #0x458
   a1adc:	912b8000 	add	x0, x0, #0xae0
   a1ae0:	528006a2 	mov	w2, #0x35                  	// #53
   a1ae4:	94000107 	bl	a1f00 <assertion_failed>
   a1ae8:	12800000 	mov	w0, #0xffffffff            	// #-1
   a1aec:	d65f03c0 	ret

00000000000a1af0 <CPartition::Write(void const*, unsigned long)>:
   a1af0:	3940a004 	ldrb	w4, [x0, #40]
   a1af4:	370002a4 	tbnz	w4, #0, a1b48 <CPartition::Write(void const*, unsigned long)+0x58>
   a1af8:	f9401005 	ldr	x5, [x0, #32]
   a1afc:	9107fc43 	add	x3, x2, #0x1ff
   a1b00:	b9401c04 	ldr	w4, [x0, #28]
   a1b04:	8b050063 	add	x3, x3, x5
   a1b08:	eb43249f 	cmp	x4, x3, lsr #9
   a1b0c:	540001e3 	b.cc	a1b48 <CPartition::Write(void const*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   a1b10:	f9400800 	ldr	x0, [x0, #16]
   a1b14:	b40000a0 	cbz	x0, a1b28 <CPartition::Write(void const*, unsigned long)+0x38>
   a1b18:	f9400003 	ldr	x3, [x0]
   a1b1c:	f9400c63 	ldr	x3, [x3, #24]
   a1b20:	aa0303f0 	mov	x16, x3
   a1b24:	d61f0200 	br	x16
   a1b28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1b2c:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1b30:	d0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a1b34:	910003fd 	mov	x29, sp
   a1b38:	91116021 	add	x1, x1, #0x458
   a1b3c:	912b8000 	add	x0, x0, #0xae0
   a1b40:	528008e2 	mov	w2, #0x47                  	// #71
   a1b44:	940000ef 	bl	a1f00 <assertion_failed>
   a1b48:	12800000 	mov	w0, #0xffffffff            	// #-1
   a1b4c:	d65f03c0 	ret

00000000000a1b50 <CPartition::Seek(unsigned long)>:
   a1b50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1b54:	52800022 	mov	w2, #0x1                   	// #1
   a1b58:	910003fd 	mov	x29, sp
   a1b5c:	a90153f3 	stp	x19, x20, [sp, #16]
   a1b60:	aa0003f3 	mov	x19, x0
   a1b64:	92402020 	and	x0, x1, #0x1ff
   a1b68:	3900a262 	strb	w2, [x19, #40]
   a1b6c:	b5000300 	cbnz	x0, a1bcc <CPartition::Seek(unsigned long)+0x7c>
   a1b70:	b9401e60 	ldr	w0, [x19, #28]
   a1b74:	aa0103f4 	mov	x20, x1
   a1b78:	eb41241f 	cmp	x0, x1, lsr #9
   a1b7c:	54000289 	b.ls	a1bcc <CPartition::Seek(unsigned long)+0x7c>  // b.plast
   a1b80:	f9400a60 	ldr	x0, [x19, #16]
   a1b84:	f90013f5 	str	x21, [sp, #32]
   a1b88:	b9401a75 	ldr	w21, [x19, #24]
   a1b8c:	8b152435 	add	x21, x1, x21, lsl #9
   a1b90:	b4000260 	cbz	x0, a1bdc <CPartition::Seek(unsigned long)+0x8c>
   a1b94:	f9400002 	ldr	x2, [x0]
   a1b98:	aa1503e1 	mov	x1, x21
   a1b9c:	f9401042 	ldr	x2, [x2, #32]
   a1ba0:	d63f0040 	blr	x2
   a1ba4:	eb15001f 	cmp	x0, x21
   a1ba8:	54000101 	b.ne	a1bc8 <CPartition::Seek(unsigned long)+0x78>  // b.any
   a1bac:	f94013f5 	ldr	x21, [sp, #32]
   a1bb0:	f9001274 	str	x20, [x19, #32]
   a1bb4:	3900a27f 	strb	wzr, [x19, #40]
   a1bb8:	aa1403e0 	mov	x0, x20
   a1bbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1bc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1bc4:	d65f03c0 	ret
   a1bc8:	f94013f5 	ldr	x21, [sp, #32]
   a1bcc:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a1bd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1bd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1bd8:	d65f03c0 	ret
   a1bdc:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1be0:	d0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a1be4:	91116021 	add	x1, x1, #0x458
   a1be8:	912b8000 	add	x0, x0, #0xae0
   a1bec:	52800b22 	mov	w2, #0x59                  	// #89
   a1bf0:	940000c4 	bl	a1f00 <assertion_failed>
   a1bf4:	d503201f 	nop
   a1bf8:	d503201f 	nop
   a1bfc:	d503201f 	nop

00000000000a1c00 <CPartition::~CPartition()>:
   a1c00:	b0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a1c04:	911e2042 	add	x2, x2, #0x788
   a1c08:	f9000002 	str	x2, [x0]
   a1c0c:	f900081f 	str	xzr, [x0, #16]
   a1c10:	14000314 	b	a2860 <CDevice::~CDevice()>
   a1c14:	d503201f 	nop
   a1c18:	d503201f 	nop
   a1c1c:	d503201f 	nop

00000000000a1c20 <CPartition::~CPartition()>:
   a1c20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1c24:	b0000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a1c28:	911e2021 	add	x1, x1, #0x788
   a1c2c:	910003fd 	mov	x29, sp
   a1c30:	f9000bf3 	str	x19, [sp, #16]
   a1c34:	aa0003f3 	mov	x19, x0
   a1c38:	f9000001 	str	x1, [x0]
   a1c3c:	f900081f 	str	xzr, [x0, #16]
   a1c40:	94000308 	bl	a2860 <CDevice::~CDevice()>
   a1c44:	aa1303e0 	mov	x0, x19
   a1c48:	d2800601 	mov	x1, #0x30                  	// #48
   a1c4c:	f9400bf3 	ldr	x19, [sp, #16]
   a1c50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1c54:	140027d7 	b	abbb0 <operator delete(void*, unsigned long)>
   a1c58:	d503201f 	nop
   a1c5c:	d503201f 	nop

00000000000a1c60 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   a1c60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1c64:	910003fd 	mov	x29, sp
   a1c68:	a90153f3 	stp	x19, x20, [sp, #16]
   a1c6c:	aa0003f3 	mov	x19, x0
   a1c70:	aa0103f4 	mov	x20, x1
   a1c74:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1c78:	2a0203f6 	mov	w22, w2
   a1c7c:	2a0303f5 	mov	w21, w3
   a1c80:	9400032c 	bl	a2930 <CDevice::CDevice()>
   a1c84:	f9000a74 	str	x20, [x19, #16]
   a1c88:	b0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a1c8c:	911e2000 	add	x0, x0, #0x788
   a1c90:	52800021 	mov	w1, #0x1                   	// #1
   a1c94:	f9000260 	str	x0, [x19]
   a1c98:	29035676 	stp	w22, w21, [x19, #24]
   a1c9c:	f900127f 	str	xzr, [x19, #32]
   a1ca0:	3900a261 	strb	w1, [x19, #40]
   a1ca4:	b40000b4 	cbz	x20, a1cb8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x58>
   a1ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1cac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1cb0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1cb4:	d65f03c0 	ret
   a1cb8:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1cbc:	d0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a1cc0:	91116021 	add	x1, x1, #0x458
   a1cc4:	912b8000 	add	x0, x0, #0xae0
   a1cc8:	528003e2 	mov	w2, #0x1f                  	// #31
   a1ccc:	9400008d 	bl	a1f00 <assertion_failed>

00000000000a1cd0 <CActLED::CActLED(bool)>:
   a1cd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1cd4:	b0000142 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a1cd8:	910003fd 	mov	x29, sp
   a1cdc:	a90153f3 	stp	x19, x20, [sp, #16]
   a1ce0:	aa0003f4 	mov	x20, x0
   a1ce4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1ce8:	12001c35 	and	w21, w1, #0xff
   a1cec:	a9007c1f 	stp	xzr, xzr, [x0]
   a1cf0:	f9063c40 	str	x0, [x2, #3192]
   a1cf4:	94000c77 	bl	a4ed0 <CMachineInfo::Get()>
   a1cf8:	94000b56 	bl	a4a50 <CMachineInfo::GetActLEDInfo() const>
   a1cfc:	2a0003f3 	mov	w19, w0
   a1d00:	363802b3 	tbz	w19, #7, a1d54 <CActLED::CActLED(bool)+0x84>
   a1d04:	d2800300 	mov	x0, #0x18                  	// #24
   a1d08:	9400278a 	bl	abb30 <operator new(unsigned long)>
   a1d0c:	2a1503e2 	mov	w2, w21
   a1d10:	aa0003f6 	mov	x22, x0
   a1d14:	12001661 	and	w1, w19, #0x3f
   a1d18:	940025a2 	bl	ab3a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   a1d1c:	f9400295 	ldr	x21, [x20]
   a1d20:	721a0273 	ands	w19, w19, #0x40
   a1d24:	1a9f17e0 	cset	w0, eq	// eq = none
   a1d28:	f9000696 	str	x22, [x20, #8]
   a1d2c:	39004280 	strb	w0, [x20, #16]
   a1d30:	b5000295 	cbnz	x21, a1d80 <CActLED::CActLED(bool)+0xb0>
   a1d34:	b4000356 	cbz	x22, a1d9c <CActLED::CActLED(bool)+0xcc>
   a1d38:	7100027f 	cmp	w19, #0x0
   a1d3c:	aa1603e0 	mov	x0, x22
   a1d40:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1d44:	1a9f07e1 	cset	w1, ne	// ne = any
   a1d48:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1d4c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1d50:	14002540 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   a1d54:	d2800900 	mov	x0, #0x48                  	// #72
   a1d58:	94002776 	bl	abb30 <operator new(unsigned long)>
   a1d5c:	12001661 	and	w1, w19, #0x3f
   a1d60:	aa0003f5 	mov	x21, x0
   a1d64:	d2800003 	mov	x3, #0x0                   	// #0
   a1d68:	52800022 	mov	w2, #0x1                   	// #1
   a1d6c:	94003521 	bl	af1f0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   a1d70:	f9000295 	str	x21, [x20]
   a1d74:	721a0273 	ands	w19, w19, #0x40
   a1d78:	1a9f17e0 	cset	w0, eq	// eq = none
   a1d7c:	39004280 	strb	w0, [x20, #16]
   a1d80:	7100027f 	cmp	w19, #0x0
   a1d84:	aa1503e0 	mov	x0, x21
   a1d88:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1d8c:	1a9f07e1 	cset	w1, ne	// ne = any
   a1d90:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1d94:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1d98:	14003226 	b	ae630 <CGPIOPin::Write(unsigned int)>
   a1d9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1da0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1da4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1da8:	d65f03c0 	ret
   a1dac:	d503201f 	nop

00000000000a1db0 <CActLED::~CActLED()>:
   a1db0:	b0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a1db4:	f9063c1f 	str	xzr, [x0, #3192]
   a1db8:	d65f03c0 	ret
   a1dbc:	d503201f 	nop

00000000000a1dc0 <CActLED::On()>:
   a1dc0:	39404001 	ldrb	w1, [x0, #16]
   a1dc4:	aa0003e2 	mov	x2, x0
   a1dc8:	f9400000 	ldr	x0, [x0]
   a1dcc:	b4000040 	cbz	x0, a1dd4 <CActLED::On()+0x14>
   a1dd0:	14003218 	b	ae630 <CGPIOPin::Write(unsigned int)>
   a1dd4:	f9400440 	ldr	x0, [x2, #8]
   a1dd8:	b4000040 	cbz	x0, a1de0 <CActLED::On()+0x20>
   a1ddc:	1400251d 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   a1de0:	d65f03c0 	ret
   a1de4:	d503201f 	nop
   a1de8:	d503201f 	nop
   a1dec:	d503201f 	nop

00000000000a1df0 <CActLED::Off()>:
   a1df0:	39404001 	ldrb	w1, [x0, #16]
   a1df4:	aa0003e2 	mov	x2, x0
   a1df8:	f9400000 	ldr	x0, [x0]
   a1dfc:	b4000060 	cbz	x0, a1e08 <CActLED::Off()+0x18>
   a1e00:	52000021 	eor	w1, w1, #0x1
   a1e04:	1400320b 	b	ae630 <CGPIOPin::Write(unsigned int)>
   a1e08:	f9400440 	ldr	x0, [x2, #8]
   a1e0c:	b4000060 	cbz	x0, a1e18 <CActLED::Off()+0x28>
   a1e10:	52000021 	eor	w1, w1, #0x1
   a1e14:	1400250f 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   a1e18:	d65f03c0 	ret
   a1e1c:	d503201f 	nop

00000000000a1e20 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   a1e20:	34000641 	cbz	w1, a1ee8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xc8>
   a1e24:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a1e28:	910003fd 	mov	x29, sp
   a1e2c:	a90153f3 	stp	x19, x20, [sp, #16]
   a1e30:	aa0003f3 	mov	x19, x0
   a1e34:	52800034 	mov	w20, #0x1                   	// #1
   a1e38:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1e3c:	2a0103f5 	mov	w21, w1
   a1e40:	2a0303f6 	mov	w22, w3
   a1e44:	f9001bf7 	str	x23, [sp, #48]
   a1e48:	2a0203f7 	mov	w23, w2
   a1e4c:	1400000e 	b	a1e84 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x64>
   a1e50:	940031f8 	bl	ae630 <CGPIOPin::Write(unsigned int)>
   a1e54:	2a1703e0 	mov	w0, w23
   a1e58:	940022c2 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   a1e5c:	f9400260 	ldr	x0, [x19]
   a1e60:	b4000260 	cbz	x0, a1eac <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x8c>
   a1e64:	39404261 	ldrb	w1, [x19, #16]
   a1e68:	52000021 	eor	w1, w1, #0x1
   a1e6c:	940031f1 	bl	ae630 <CGPIOPin::Write(unsigned int)>
   a1e70:	2a1603e0 	mov	w0, w22
   a1e74:	11000694 	add	w20, w20, #0x1
   a1e78:	940022ba 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   a1e7c:	6b1402bf 	cmp	w21, w20
   a1e80:	540002a3 	b.cc	a1ed4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xb4>  // b.lo, b.ul, b.last
   a1e84:	f9400260 	ldr	x0, [x19]
   a1e88:	39404261 	ldrb	w1, [x19, #16]
   a1e8c:	b5fffe20 	cbnz	x0, a1e50 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x30>
   a1e90:	f9400660 	ldr	x0, [x19, #8]
   a1e94:	b4fffe00 	cbz	x0, a1e54 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x34>
   a1e98:	940024ee 	bl	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   a1e9c:	2a1703e0 	mov	w0, w23
   a1ea0:	940022b0 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   a1ea4:	f9400260 	ldr	x0, [x19]
   a1ea8:	b5fffde0 	cbnz	x0, a1e64 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>
   a1eac:	f9400660 	ldr	x0, [x19, #8]
   a1eb0:	b4fffe00 	cbz	x0, a1e70 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x50>
   a1eb4:	39404261 	ldrb	w1, [x19, #16]
   a1eb8:	11000694 	add	w20, w20, #0x1
   a1ebc:	52000021 	eor	w1, w1, #0x1
   a1ec0:	940024e4 	bl	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   a1ec4:	2a1603e0 	mov	w0, w22
   a1ec8:	940022a6 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   a1ecc:	6b1402bf 	cmp	w21, w20
   a1ed0:	54fffda2 	b.cs	a1e84 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x64>  // b.hs, b.nlast
   a1ed4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1ed8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1edc:	f9401bf7 	ldr	x23, [sp, #48]
   a1ee0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1ee4:	d65f03c0 	ret
   a1ee8:	d65f03c0 	ret
   a1eec:	d503201f 	nop

00000000000a1ef0 <CActLED::Get()>:
   a1ef0:	b0000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a1ef4:	f9463c00 	ldr	x0, [x0, #3192]
   a1ef8:	d65f03c0 	ret
   a1efc:	00000000 	udf	#0

00000000000a1f00 <assertion_failed>:
   a1f00:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a1f04:	910003fd 	mov	x29, sp
   a1f08:	a90153f3 	stp	x19, x20, [sp, #16]
   a1f0c:	aa0103f4 	mov	x20, x1
   a1f10:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1f14:	aa0003f5 	mov	x21, x0
   a1f18:	2a0203f6 	mov	w22, w2
   a1f1c:	f9001bf7 	str	x23, [sp, #48]
   a1f20:	910003f7 	mov	x23, sp
   a1f24:	94003067 	bl	ae0c0 <CInterruptSystem::DisableFIQ()>
   a1f28:	d50341ff 	msr	daifclr, #0x1
   a1f2c:	910103f3 	add	x19, sp, #0x40
   a1f30:	aa1303e0 	mov	x0, x19
   a1f34:	9400187b 	bl	a8120 <CString::CString()>
   a1f38:	aa1403e2 	mov	x2, x20
   a1f3c:	2a1603e3 	mov	w3, w22
   a1f40:	b00000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a1f44:	9111a021 	add	x1, x1, #0x468
   a1f48:	aa1303e0 	mov	x0, x19
   a1f4c:	94001e7d 	bl	a9940 <CString::Format(char const*, ...)>
   a1f50:	aa1303e0 	mov	x0, x19
   a1f54:	940018b7 	bl	a8230 <CString::operator char const*() const>
   a1f58:	aa0003e1 	mov	x1, x0
   a1f5c:	aa1703e0 	mov	x0, x23
   a1f60:	94000200 	bl	a2760 <debug_stacktrace(unsigned long const*, char const*)>
   a1f64:	94000723 	bl	a3bf0 <CLogger::Get()>
   a1f68:	aa0003f4 	mov	x20, x0
   a1f6c:	aa1303e0 	mov	x0, x19
   a1f70:	940018b0 	bl	a8230 <CString::operator char const*() const>
   a1f74:	b00000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a1f78:	aa0003e1 	mov	x1, x0
   a1f7c:	aa1503e4 	mov	x4, x21
   a1f80:	aa1403e0 	mov	x0, x20
   a1f84:	9111c063 	add	x3, x3, #0x470
   a1f88:	52800002 	mov	w2, #0x0                   	// #0
   a1f8c:	9400090d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a1f90:	14000000 	b	a1f90 <assertion_failed+0x90>
	...

00000000000a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   a1fa0:	2a0103e2 	mov	w2, w1
   a1fa4:	52800101 	mov	w1, #0x8                   	// #8
   a1fa8:	140038ee 	b	b0360 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   a1fac:	d503201f 	nop

00000000000a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>:
   a1fb0:	140038f0 	b	b0370 <CBcmMailBox::~CBcmMailBox()>
   a1fb4:	d503201f 	nop
   a1fb8:	d503201f 	nop
   a1fbc:	d503201f 	nop

00000000000a1fc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   a1fc0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a1fc4:	910003fd 	mov	x29, sp
   a1fc8:	a90153f3 	stp	x19, x20, [sp, #16]
   a1fcc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1fd0:	a90363f7 	stp	x23, x24, [sp, #48]
   a1fd4:	f90023f9 	str	x25, [sp, #64]
   a1fd8:	b4000841 	cbz	x1, a20e0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   a1fdc:	2a0203f4 	mov	w20, w2
   a1fe0:	71003c5f 	cmp	w2, #0xf
   a1fe4:	54000889 	b.ls	a20f4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x134>  // b.plast
   a1fe8:	aa0003f6 	mov	x22, x0
   a1fec:	11003057 	add	w23, w2, #0xc
   a1ff0:	12000440 	and	w0, w2, #0x3
   a1ff4:	350008a0 	cbnz	w0, a2108 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x148>
   a1ff8:	aa0103f5 	mov	x21, x1
   a1ffc:	52800000 	mov	w0, #0x0                   	// #0
   a2000:	94002c14 	bl	ad050 <CMemorySystem::GetCoherentPage(unsigned int)>
   a2004:	aa0003f3 	mov	x19, x0
   a2008:	d3505ee4 	ubfx	x4, x23, #16, #8
   a200c:	53187ee3 	lsr	w3, w23, #24
   a2010:	91002018 	add	x24, x0, #0x8
   a2014:	d3483ee1 	ubfx	x1, x23, #8, #8
   a2018:	39000277 	strb	w23, [x19]
   a201c:	2a1403f9 	mov	w25, w20
   a2020:	39000661 	strb	w1, [x19, #1]
   a2024:	aa1803e0 	mov	x0, x24
   a2028:	39000a64 	strb	w4, [x19, #2]
   a202c:	aa1903e2 	mov	x2, x25
   a2030:	39000e63 	strb	w3, [x19, #3]
   a2034:	aa1503e1 	mov	x1, x21
   a2038:	3900127f 	strb	wzr, [x19, #4]
   a203c:	3900167f 	strb	wzr, [x19, #5]
   a2040:	39001a7f 	strb	wzr, [x19, #6]
   a2044:	39001e7f 	strb	wzr, [x19, #7]
   a2048:	94002460 	bl	ab1c8 <memcpy>
   a204c:	b8344b1f 	str	wzr, [x24, w20, uxtw]
   a2050:	d5033f9f 	dsb	sy
   a2054:	32020674 	orr	w20, w19, #0xc0000000
   a2058:	aa1603e0 	mov	x0, x22
   a205c:	2a1403e1 	mov	w1, w20
   a2060:	940038c8 	bl	b0380 <CBcmMailBox::WriteRead(unsigned int)>
   a2064:	6b14001f 	cmp	w0, w20
   a2068:	54000100 	b.eq	a2088 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc8>  // b.none
   a206c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2070:	52800000 	mov	w0, #0x0                   	// #0
   a2074:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2078:	a94363f7 	ldp	x23, x24, [sp, #48]
   a207c:	f94023f9 	ldr	x25, [sp, #64]
   a2080:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a2084:	d65f03c0 	ret
   a2088:	d5033fbf 	dmb	sy
   a208c:	39401264 	ldrb	w4, [x19, #4]
   a2090:	52b00003 	mov	w3, #0x80000000            	// #-2147483648
   a2094:	39401662 	ldrb	w2, [x19, #5]
   a2098:	39401a61 	ldrb	w1, [x19, #6]
   a209c:	39401e60 	ldrb	w0, [x19, #7]
   a20a0:	aa022082 	orr	x2, x4, x2, lsl #8
   a20a4:	aa014041 	orr	x1, x2, x1, lsl #16
   a20a8:	aa006020 	orr	x0, x1, x0, lsl #24
   a20ac:	6b03001f 	cmp	w0, w3
   a20b0:	54fffde1 	b.ne	a206c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>  // b.any
   a20b4:	aa1903e2 	mov	x2, x25
   a20b8:	aa1803e1 	mov	x1, x24
   a20bc:	aa1503e0 	mov	x0, x21
   a20c0:	94002442 	bl	ab1c8 <memcpy>
   a20c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a20c8:	52800020 	mov	w0, #0x1                   	// #1
   a20cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a20d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a20d4:	f94023f9 	ldr	x25, [sp, #64]
   a20d8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a20dc:	d65f03c0 	ret
   a20e0:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a20e4:	912aa021 	add	x1, x1, #0xaa8
   a20e8:	91006020 	add	x0, x1, #0x18
   a20ec:	52800962 	mov	w2, #0x4b                  	// #75
   a20f0:	97ffff84 	bl	a1f00 <assertion_failed>
   a20f4:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a20f8:	912aa021 	add	x1, x1, #0xaa8
   a20fc:	9100a020 	add	x0, x1, #0x28
   a2100:	52800982 	mov	w2, #0x4c                  	// #76
   a2104:	97ffff7f 	bl	a1f00 <assertion_failed>
   a2108:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a210c:	912aa021 	add	x1, x1, #0xaa8
   a2110:	91016020 	add	x0, x1, #0x58
   a2114:	528009c2 	mov	w2, #0x4e                  	// #78
   a2118:	97ffff7a 	bl	a1f00 <assertion_failed>
   a211c:	d503201f 	nop

00000000000a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   a2120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2124:	910003fd 	mov	x29, sp
   a2128:	f9000bf3 	str	x19, [sp, #16]
   a212c:	aa0203f3 	mov	x19, x2
   a2130:	b4000662 	cbz	x2, a21fc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xdc>
   a2134:	2a0303e2 	mov	w2, w3
   a2138:	71003c7f 	cmp	w3, #0xf
   a213c:	540006a9 	b.ls	a2210 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>  // b.plast
   a2140:	51003063 	sub	w3, w3, #0xc
   a2144:	d3483c2d 	ubfx	x13, x1, #8, #8
   a2148:	d3505c2c 	ubfx	x12, x1, #16, #8
   a214c:	53187c2b 	lsr	w11, w1, #24
   a2150:	d3483c69 	ubfx	x9, x3, #8, #8
   a2154:	d3505c68 	ubfx	x8, x3, #16, #8
   a2158:	5100304a 	sub	w10, w2, #0xc
   a215c:	53187c63 	lsr	w3, w3, #24
   a2160:	d3483c87 	ubfx	x7, x4, #8, #8
   a2164:	d3505c86 	ubfx	x6, x4, #16, #8
   a2168:	d3587885 	ubfx	x5, x4, #24, #7
   a216c:	39000261 	strb	w1, [x19]
   a2170:	3900066d 	strb	w13, [x19, #1]
   a2174:	aa1303e1 	mov	x1, x19
   a2178:	39000a6c 	strb	w12, [x19, #2]
   a217c:	39000e6b 	strb	w11, [x19, #3]
   a2180:	3900126a 	strb	w10, [x19, #4]
   a2184:	39001669 	strb	w9, [x19, #5]
   a2188:	39001a68 	strb	w8, [x19, #6]
   a218c:	39001e63 	strb	w3, [x19, #7]
   a2190:	39002264 	strb	w4, [x19, #8]
   a2194:	39002667 	strb	w7, [x19, #9]
   a2198:	39002a66 	strb	w6, [x19, #10]
   a219c:	39002e65 	strb	w5, [x19, #11]
   a21a0:	97ffff88 	bl	a1fc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   a21a4:	12001c02 	and	w2, w0, #0xff
   a21a8:	36000220 	tbz	w0, #0, a21ec <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>
   a21ac:	39402263 	ldrb	w3, [x19, #8]
   a21b0:	39402662 	ldrb	w2, [x19, #9]
   a21b4:	39402a60 	ldrb	w0, [x19, #10]
   a21b8:	39402e61 	ldrb	w1, [x19, #11]
   a21bc:	aa022062 	orr	x2, x3, x2, lsl #8
   a21c0:	aa004040 	orr	x0, x2, x0, lsl #16
   a21c4:	aa016001 	orr	x1, x0, x1, lsl #24
   a21c8:	39002261 	strb	w1, [x19, #8]
   a21cc:	72007820 	ands	w0, w1, #0x7fffffff
   a21d0:	1a9f07e2 	cset	w2, ne	// ne = any
   a21d4:	53083c23 	ubfx	w3, w1, #8, #8
   a21d8:	53105c20 	ubfx	w0, w1, #16, #8
   a21dc:	53187821 	ubfx	w1, w1, #24, #7
   a21e0:	39002663 	strb	w3, [x19, #9]
   a21e4:	39002a60 	strb	w0, [x19, #10]
   a21e8:	39002e61 	strb	w1, [x19, #11]
   a21ec:	f9400bf3 	ldr	x19, [sp, #16]
   a21f0:	2a0203e0 	mov	w0, w2
   a21f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a21f8:	d65f03c0 	ret
   a21fc:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a2200:	912aa021 	add	x1, x1, #0xaa8
   a2204:	9101c020 	add	x0, x1, #0x70
   a2208:	52800662 	mov	w2, #0x33                  	// #51
   a220c:	97ffff3d 	bl	a1f00 <assertion_failed>
   a2210:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a2214:	912aa021 	add	x1, x1, #0xaa8
   a2218:	91020020 	add	x0, x1, #0x80
   a221c:	52800682 	mov	w2, #0x34                  	// #52
   a2220:	97ffff38 	bl	a1f00 <assertion_failed>
	...

00000000000a2230 <CClassAllocator::~CClassAllocator()>:
   a2230:	aa0003e1 	mov	x1, x0
   a2234:	f9400c00 	ldr	x0, [x0, #24]
   a2238:	f900103f 	str	xzr, [x1, #32]
   a223c:	b4000040 	cbz	x0, a2244 <CClassAllocator::~CClassAllocator()+0x14>
   a2240:	1400369c 	b	afcb0 <free>
   a2244:	d65f03c0 	ret
   a2248:	d503201f 	nop
   a224c:	d503201f 	nop

00000000000a2250 <CClassAllocator::Init(unsigned long, unsigned int)>:
   a2250:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2254:	f100003f 	cmp	x1, #0x0
   a2258:	9a9f1421 	csinc	x1, x1, xzr, ne	// ne = any
   a225c:	910003fd 	mov	x29, sp
   a2260:	91007c21 	add	x1, x1, #0x1f
   a2264:	f9000bf3 	str	x19, [sp, #16]
   a2268:	927c6c21 	and	x1, x1, #0xfffffff0
   a226c:	f9000001 	str	x1, [x0]
   a2270:	34000442 	cbz	w2, a22f8 <CClassAllocator::Init(unsigned long, unsigned int)+0xa8>
   a2274:	aa0003f3 	mov	x19, x0
   a2278:	2a0203e0 	mov	w0, w2
   a227c:	9b017c00 	mul	x0, x0, x1
   a2280:	b9000a62 	str	w2, [x19, #8]
   a2284:	94003673 	bl	afc50 <malloc>
   a2288:	f9000e60 	str	x0, [x19, #24]
   a228c:	aa0003e1 	mov	x1, x0
   a2290:	b40002c0 	cbz	x0, a22e8 <CClassAllocator::Init(unsigned long, unsigned int)+0x98>
   a2294:	92400c00 	and	x0, x0, #0xf
   a2298:	b50003c0 	cbnz	x0, a2310 <CClassAllocator::Init(unsigned long, unsigned int)+0xc0>
   a229c:	b9400a60 	ldr	w0, [x19, #8]
   a22a0:	340001e0 	cbz	w0, a22dc <CClassAllocator::Init(unsigned long, unsigned int)+0x8c>
   a22a4:	f9400265 	ldr	x5, [x19]
   a22a8:	528a6a04 	mov	w4, #0x5350                	// #21328
   a22ac:	72a9e844 	movk	w4, #0x4f42, lsl #16
   a22b0:	52800003 	mov	w3, #0x0                   	// #0
   a22b4:	f9401262 	ldr	x2, [x19, #32]
   a22b8:	b9000024 	str	w4, [x1]
   a22bc:	f9000422 	str	x2, [x1, #8]
   a22c0:	11000463 	add	w3, w3, #0x1
   a22c4:	b9400a60 	ldr	w0, [x19, #8]
   a22c8:	aa0103e2 	mov	x2, x1
   a22cc:	8b050021 	add	x1, x1, x5
   a22d0:	6b03001f 	cmp	w0, w3
   a22d4:	54ffff28 	b.hi	a22b8 <CClassAllocator::Init(unsigned long, unsigned int)+0x68>  // b.pmore
   a22d8:	f9001262 	str	x2, [x19, #32]
   a22dc:	f9400bf3 	ldr	x19, [sp, #16]
   a22e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a22e4:	d65f03c0 	ret
   a22e8:	b9000a7f 	str	wzr, [x19, #8]
   a22ec:	f9400bf3 	ldr	x19, [sp, #16]
   a22f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a22f4:	d65f03c0 	ret
   a22f8:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a22fc:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2300:	91122021 	add	x1, x1, #0x488
   a2304:	91128000 	add	x0, x0, #0x4a0
   a2308:	52800ae2 	mov	w2, #0x57                  	// #87
   a230c:	97fffefd 	bl	a1f00 <assertion_failed>
   a2310:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2314:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2318:	91122021 	add	x1, x1, #0x488
   a231c:	9112e000 	add	x0, x0, #0x4b8
   a2320:	52800c22 	mov	w2, #0x61                  	// #97
   a2324:	97fffef7 	bl	a1f00 <assertion_failed>
   a2328:	d503201f 	nop
   a232c:	d503201f 	nop

00000000000a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>:
   a2330:	52800025 	mov	w5, #0x1                   	// #1
   a2334:	a9017c03 	stp	x3, xzr, [x0, #16]
   a2338:	f900101f 	str	xzr, [x0, #32]
   a233c:	3900a01f 	strb	wzr, [x0, #40]
   a2340:	b9003005 	str	w5, [x0, #48]
   a2344:	17ffffc3 	b	a2250 <CClassAllocator::Init(unsigned long, unsigned int)>
   a2348:	d503201f 	nop
   a234c:	d503201f 	nop

00000000000a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>:
   a2350:	52800026 	mov	w6, #0x1                   	// #1
   a2354:	a9017c04 	stp	x4, xzr, [x0, #16]
   a2358:	f900101f 	str	xzr, [x0, #32]
   a235c:	3900a006 	strb	w6, [x0, #40]
   a2360:	29058c03 	stp	w3, w3, [x0, #44]
   a2364:	17ffffbb 	b	a2250 <CClassAllocator::Init(unsigned long, unsigned int)>
   a2368:	d503201f 	nop
   a236c:	d503201f 	nop

00000000000a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>:
   a2370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2374:	910003fd 	mov	x29, sp
   a2378:	f90013f5 	str	x21, [sp, #32]
   a237c:	aa0003f5 	mov	x21, x0
   a2380:	3940a000 	ldrb	w0, [x0, #40]
   a2384:	a90153f3 	stp	x19, x20, [sp, #16]
   a2388:	360005a0 	tbz	w0, #0, a243c <CClassAllocator::Extend(unsigned int, unsigned int)+0xcc>
   a238c:	b9402ea0 	ldr	w0, [x21, #44]
   a2390:	6b02001f 	cmp	w0, w2
   a2394:	54000601 	b.ne	a2454 <CClassAllocator::Extend(unsigned int, unsigned int)+0xe4>  // b.any
   a2398:	2a0103f4 	mov	w20, w1
   a239c:	34000681 	cbz	w1, a246c <CClassAllocator::Extend(unsigned int, unsigned int)+0xfc>
   a23a0:	f94002a0 	ldr	x0, [x21]
   a23a4:	2a0103e1 	mov	w1, w1
   a23a8:	9b007c20 	mul	x0, x1, x0
   a23ac:	94003629 	bl	afc50 <malloc>
   a23b0:	aa0003f3 	mov	x19, x0
   a23b4:	b4000300 	cbz	x0, a2414 <CClassAllocator::Extend(unsigned int, unsigned int)+0xa4>
   a23b8:	92400c00 	and	x0, x0, #0xf
   a23bc:	b5000640 	cbnz	x0, a2484 <CClassAllocator::Extend(unsigned int, unsigned int)+0x114>
   a23c0:	b94032a0 	ldr	w0, [x21, #48]
   a23c4:	35000380 	cbnz	w0, a2434 <CClassAllocator::Extend(unsigned int, unsigned int)+0xc4>
   a23c8:	f94002a1 	ldr	x1, [x21]
   a23cc:	528a6a00 	mov	w0, #0x5350                	// #21328
   a23d0:	72a9e840 	movk	w0, #0x4f42, lsl #16
   a23d4:	52800003 	mov	w3, #0x0                   	// #0
   a23d8:	f94012a2 	ldr	x2, [x21, #32]
   a23dc:	d503201f 	nop
   a23e0:	b9000260 	str	w0, [x19]
   a23e4:	f9000662 	str	x2, [x19, #8]
   a23e8:	11000463 	add	w3, w3, #0x1
   a23ec:	aa1303e2 	mov	x2, x19
   a23f0:	6b03029f 	cmp	w20, w3
   a23f4:	8b010273 	add	x19, x19, x1
   a23f8:	54ffff41 	b.ne	a23e0 <CClassAllocator::Extend(unsigned int, unsigned int)+0x70>  // b.any
   a23fc:	b9400aa0 	ldr	w0, [x21, #8]
   a2400:	b94032a1 	ldr	w1, [x21, #48]
   a2404:	0b140000 	add	w0, w0, w20
   a2408:	b9000aa0 	str	w0, [x21, #8]
   a240c:	f90012a2 	str	x2, [x21, #32]
   a2410:	350000a1 	cbnz	w1, a2424 <CClassAllocator::Extend(unsigned int, unsigned int)+0xb4>
   a2414:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2418:	f94013f5 	ldr	x21, [sp, #32]
   a241c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2420:	d65f03c0 	ret
   a2424:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2428:	f94013f5 	ldr	x21, [sp, #32]
   a242c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2430:	14002b44 	b	ad140 <LeaveCritical>
   a2434:	94002b13 	bl	ad080 <EnterCritical>
   a2438:	17ffffe4 	b	a23c8 <CClassAllocator::Extend(unsigned int, unsigned int)+0x58>
   a243c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2440:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2444:	91122021 	add	x1, x1, #0x488
   a2448:	9113e000 	add	x0, x0, #0x4f8
   a244c:	52800e02 	mov	w2, #0x70                  	// #112
   a2450:	97fffeac 	bl	a1f00 <assertion_failed>
   a2454:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2458:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a245c:	91122021 	add	x1, x1, #0x488
   a2460:	91142000 	add	x0, x0, #0x508
   a2464:	52800e22 	mov	w2, #0x71                  	// #113
   a2468:	97fffea6 	bl	a1f00 <assertion_failed>
   a246c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2470:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2474:	91122021 	add	x1, x1, #0x488
   a2478:	91128000 	add	x0, x0, #0x4a0
   a247c:	52800e42 	mov	w2, #0x72                  	// #114
   a2480:	97fffea0 	bl	a1f00 <assertion_failed>
   a2484:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2488:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a248c:	91122021 	add	x1, x1, #0x488
   a2490:	9114a000 	add	x0, x0, #0x528
   a2494:	52800f42 	mov	w2, #0x7a                  	// #122
   a2498:	97fffe9a 	bl	a1f00 <assertion_failed>
   a249c:	d503201f 	nop

00000000000a24a0 <CClassAllocator::Allocate()>:
   a24a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a24a4:	910003fd 	mov	x29, sp
   a24a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a24ac:	aa0003f3 	mov	x19, x0
   a24b0:	3940a000 	ldrb	w0, [x0, #40]
   a24b4:	36000060 	tbz	w0, #0, a24c0 <CClassAllocator::Allocate()+0x20>
   a24b8:	b9403260 	ldr	w0, [x19, #48]
   a24bc:	350002a0 	cbnz	w0, a2510 <CClassAllocator::Allocate()+0x70>
   a24c0:	f9401274 	ldr	x20, [x19, #32]
   a24c4:	b4000374 	cbz	x20, a2530 <CClassAllocator::Allocate()+0x90>
   a24c8:	b9400281 	ldr	w1, [x20]
   a24cc:	528a6a00 	mov	w0, #0x5350                	// #21328
   a24d0:	72a9e840 	movk	w0, #0x4f42, lsl #16
   a24d4:	6b00003f 	cmp	w1, w0
   a24d8:	540003e1 	b.ne	a2554 <CClassAllocator::Allocate()+0xb4>  // b.any
   a24dc:	f9400680 	ldr	x0, [x20, #8]
   a24e0:	f9001260 	str	x0, [x19, #32]
   a24e4:	3940a260 	ldrb	w0, [x19, #40]
   a24e8:	f900069f 	str	xzr, [x20, #8]
   a24ec:	370000a0 	tbnz	w0, #0, a2500 <CClassAllocator::Allocate()+0x60>
   a24f0:	91004280 	add	x0, x20, #0x10
   a24f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a24f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a24fc:	d65f03c0 	ret
   a2500:	b9403260 	ldr	w0, [x19, #48]
   a2504:	34ffff60 	cbz	w0, a24f0 <CClassAllocator::Allocate()+0x50>
   a2508:	94002b0e 	bl	ad140 <LeaveCritical>
   a250c:	17fffff9 	b	a24f0 <CClassAllocator::Allocate()+0x50>
   a2510:	94002adc 	bl	ad080 <EnterCritical>
   a2514:	f9401274 	ldr	x20, [x19, #32]
   a2518:	b5fffd94 	cbnz	x20, a24c8 <CClassAllocator::Allocate()+0x28>
   a251c:	3940a260 	ldrb	w0, [x19, #40]
   a2520:	36000080 	tbz	w0, #0, a2530 <CClassAllocator::Allocate()+0x90>
   a2524:	b9403260 	ldr	w0, [x19, #48]
   a2528:	34000040 	cbz	w0, a2530 <CClassAllocator::Allocate()+0x90>
   a252c:	94002b05 	bl	ad140 <LeaveCritical>
   a2530:	940005b0 	bl	a3bf0 <CLogger::Get()>
   a2534:	f9400a61 	ldr	x1, [x19, #16]
   a2538:	900000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a253c:	b9400a64 	ldr	w4, [x19, #8]
   a2540:	9115a063 	add	x3, x3, #0x568
   a2544:	52800002 	mov	w2, #0x0                   	// #0
   a2548:	9400079e 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a254c:	d2800000 	mov	x0, #0x0                   	// #0
   a2550:	17ffffe9 	b	a24f4 <CClassAllocator::Allocate()+0x54>
   a2554:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2558:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a255c:	91122021 	add	x1, x1, #0x488
   a2560:	91166000 	add	x0, x0, #0x598
   a2564:	52801462 	mov	w2, #0xa3                  	// #163
   a2568:	97fffe66 	bl	a1f00 <assertion_failed>
   a256c:	d503201f 	nop

00000000000a2570 <CClassAllocator::Free(void*)>:
   a2570:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2574:	910003fd 	mov	x29, sp
   a2578:	a90153f3 	stp	x19, x20, [sp, #16]
   a257c:	b40003e1 	cbz	x1, a25f8 <CClassAllocator::Free(void*)+0x88>
   a2580:	b85f0022 	ldur	w2, [x1, #-16]
   a2584:	aa0003f4 	mov	x20, x0
   a2588:	d1004033 	sub	x19, x1, #0x10
   a258c:	528a6a00 	mov	w0, #0x5350                	// #21328
   a2590:	72a9e840 	movk	w0, #0x4f42, lsl #16
   a2594:	6b00005f 	cmp	w2, w0
   a2598:	540003c1 	b.ne	a2610 <CClassAllocator::Free(void*)+0xa0>  // b.any
   a259c:	f9400660 	ldr	x0, [x19, #8]
   a25a0:	b5000440 	cbnz	x0, a2628 <CClassAllocator::Free(void*)+0xb8>
   a25a4:	3940a280 	ldrb	w0, [x20, #40]
   a25a8:	370000e0 	tbnz	w0, #0, a25c4 <CClassAllocator::Free(void*)+0x54>
   a25ac:	f9401280 	ldr	x0, [x20, #32]
   a25b0:	f9000660 	str	x0, [x19, #8]
   a25b4:	f9001293 	str	x19, [x20, #32]
   a25b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a25bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a25c0:	d65f03c0 	ret
   a25c4:	b9403280 	ldr	w0, [x20, #48]
   a25c8:	34ffff20 	cbz	w0, a25ac <CClassAllocator::Free(void*)+0x3c>
   a25cc:	94002aad 	bl	ad080 <EnterCritical>
   a25d0:	f9401281 	ldr	x1, [x20, #32]
   a25d4:	3940a280 	ldrb	w0, [x20, #40]
   a25d8:	f9000661 	str	x1, [x19, #8]
   a25dc:	f9001293 	str	x19, [x20, #32]
   a25e0:	3607fec0 	tbz	w0, #0, a25b8 <CClassAllocator::Free(void*)+0x48>
   a25e4:	b9403280 	ldr	w0, [x20, #48]
   a25e8:	34fffe80 	cbz	w0, a25b8 <CClassAllocator::Free(void*)+0x48>
   a25ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a25f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a25f4:	14002ad3 	b	ad140 <LeaveCritical>
   a25f8:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a25fc:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2600:	91122021 	add	x1, x1, #0x488
   a2604:	9116e000 	add	x0, x0, #0x5b8
   a2608:	52801622 	mov	w2, #0xb1                  	// #177
   a260c:	97fffe3d 	bl	a1f00 <assertion_failed>
   a2610:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2614:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2618:	91122021 	add	x1, x1, #0x488
   a261c:	91172000 	add	x0, x0, #0x5c8
   a2620:	528016a2 	mov	w2, #0xb5                  	// #181
   a2624:	97fffe37 	bl	a1f00 <assertion_failed>
   a2628:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a262c:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2630:	91122021 	add	x1, x1, #0x488
   a2634:	9117a000 	add	x0, x0, #0x5e8
   a2638:	528016c2 	mov	w2, #0xb6                  	// #182
   a263c:	97fffe31 	bl	a1f00 <assertion_failed>

00000000000a2640 <debug_hexdump(void const*, unsigned int, char const*)>:
   a2640:	d102c3ff 	sub	sp, sp, #0xb0
   a2644:	f100005f 	cmp	x2, #0x0
   a2648:	a9077bfd 	stp	x29, x30, [sp, #112]
   a264c:	9101c3fd 	add	x29, sp, #0x70
   a2650:	a9095bf5 	stp	x21, x22, [sp, #144]
   a2654:	aa0203f5 	mov	x21, x2
   a2658:	900000c2 	adrp	x2, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a265c:	912d4042 	add	x2, x2, #0xb50
   a2660:	a90853f3 	stp	x19, x20, [sp, #128]
   a2664:	9a950055 	csel	x21, x2, x21, eq	// eq = none
   a2668:	2a0103f4 	mov	w20, w1
   a266c:	aa0003f3 	mov	x19, x0
   a2670:	94000560 	bl	a3bf0 <CLogger::Get()>
   a2674:	900000a3 	adrp	x3, b6000 <_etext+0x39c8>
   a2678:	aa1303e5 	mov	x5, x19
   a267c:	2a1403e4 	mov	w4, w20
   a2680:	aa1503e1 	mov	x1, x21
   a2684:	91180063 	add	x3, x3, #0x600
   a2688:	52800082 	mov	w2, #0x4                   	// #4
   a268c:	9400074d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a2690:	340005f4 	cbz	w20, a274c <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   a2694:	900000b6 	adrp	x22, b6000 <_etext+0x39c8>
   a2698:	9118a2d6 	add	x22, x22, #0x628
   a269c:	f90053f7 	str	x23, [sp, #160]
   a26a0:	12000e97 	and	w23, w20, #0xf
   a26a4:	14000003 	b	a26b0 <debug_hexdump(void const*, unsigned int, char const*)+0x70>
   a26a8:	71004294 	subs	w20, w20, #0x10
   a26ac:	540004e0 	b.eq	a2748 <debug_hexdump(void const*, unsigned int, char const*)+0x108>  // b.none
   a26b0:	94000550 	bl	a3bf0 <CLogger::Get()>
   a26b4:	39401668 	ldrb	w8, [x19, #5]
   a26b8:	12003e64 	and	w4, w19, #0xffff
   a26bc:	39401269 	ldrb	w9, [x19, #4]
   a26c0:	aa1603e3 	mov	x3, x22
   a26c4:	39400e6a 	ldrb	w10, [x19, #3]
   a26c8:	aa1503e1 	mov	x1, x21
   a26cc:	39400a67 	ldrb	w7, [x19, #2]
   a26d0:	52800082 	mov	w2, #0x4                   	// #4
   a26d4:	39400666 	ldrb	w6, [x19, #1]
   a26d8:	91004273 	add	x19, x19, #0x10
   a26dc:	385f0265 	ldurb	w5, [x19, #-16]
   a26e0:	b90003ea 	str	w10, [sp]
   a26e4:	b9000be9 	str	w9, [sp, #8]
   a26e8:	b90013e8 	str	w8, [sp, #16]
   a26ec:	385ff268 	ldurb	w8, [x19, #-1]
   a26f0:	385fe269 	ldurb	w9, [x19, #-2]
   a26f4:	385fd26a 	ldurb	w10, [x19, #-3]
   a26f8:	385fc26b 	ldurb	w11, [x19, #-4]
   a26fc:	385fb26c 	ldurb	w12, [x19, #-5]
   a2700:	385fa26d 	ldurb	w13, [x19, #-6]
   a2704:	385f926e 	ldurb	w14, [x19, #-7]
   a2708:	385f826f 	ldurb	w15, [x19, #-8]
   a270c:	385f7270 	ldurb	w16, [x19, #-9]
   a2710:	385f6271 	ldurb	w17, [x19, #-10]
   a2714:	b9001bf1 	str	w17, [sp, #24]
   a2718:	b90023f0 	str	w16, [sp, #32]
   a271c:	b9002bef 	str	w15, [sp, #40]
   a2720:	b90033ee 	str	w14, [sp, #48]
   a2724:	b9003bed 	str	w13, [sp, #56]
   a2728:	b90043ec 	str	w12, [sp, #64]
   a272c:	b9004beb 	str	w11, [sp, #72]
   a2730:	b90053ea 	str	w10, [sp, #80]
   a2734:	b9005be9 	str	w9, [sp, #88]
   a2738:	b90063e8 	str	w8, [sp, #96]
   a273c:	94000721 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a2740:	6b1402ff 	cmp	w23, w20
   a2744:	54fffb21 	b.ne	a26a8 <debug_hexdump(void const*, unsigned int, char const*)+0x68>  // b.any
   a2748:	f94053f7 	ldr	x23, [sp, #160]
   a274c:	a9477bfd 	ldp	x29, x30, [sp, #112]
   a2750:	a94853f3 	ldp	x19, x20, [sp, #128]
   a2754:	a9495bf5 	ldp	x21, x22, [sp, #144]
   a2758:	9102c3ff 	add	sp, sp, #0xb0
   a275c:	d65f03c0 	ret

00000000000a2760 <debug_stacktrace(unsigned long const*, char const*)>:
   a2760:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2764:	910003fd 	mov	x29, sp
   a2768:	a90363f7 	stp	x23, x24, [sp, #48]
   a276c:	aa0103f7 	mov	x23, x1
   a2770:	f10002ff 	cmp	x23, #0x0
   a2774:	900000c1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a2778:	912d4021 	add	x1, x1, #0xb50
   a277c:	900000b8 	adrp	x24, b6000 <_etext+0x39c8>
   a2780:	911a0318 	add	x24, x24, #0x680
   a2784:	9a970037 	csel	x23, x1, x23, eq	// eq = none
   a2788:	a90153f3 	stp	x19, x20, [sp, #16]
   a278c:	aa0003f4 	mov	x20, x0
   a2790:	d2800013 	mov	x19, #0x0                   	// #0
   a2794:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2798:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   a279c:	90000156 	adrp	x22, ca000 <vtable for CLAN7800Device+0x28>
   a27a0:	f94592d6 	ldr	x22, [x22, #2848]
   a27a4:	14000004 	b	a27b4 <debug_stacktrace(unsigned long const*, char const*)+0x54>
   a27a8:	91000673 	add	x19, x19, #0x1
   a27ac:	f101027f 	cmp	x19, #0x40
   a27b0:	54000240 	b.eq	a27f8 <debug_stacktrace(unsigned long const*, char const*)+0x98>  // b.none
   a27b4:	f8737a82 	ldr	x2, [x20, x19, lsl #3]
   a27b8:	eb15005f 	cmp	x2, x21
   a27bc:	54ffff69 	b.ls	a27a8 <debug_stacktrace(unsigned long const*, char const*)+0x48>  // b.plast
   a27c0:	eb16005f 	cmp	x2, x22
   a27c4:	54ffff22 	b.cs	a27a8 <debug_stacktrace(unsigned long const*, char const*)+0x48>  // b.hs, b.nlast
   a27c8:	92400442 	and	x2, x2, #0x3
   a27cc:	b5fffee2 	cbnz	x2, a27a8 <debug_stacktrace(unsigned long const*, char const*)+0x48>
   a27d0:	94000508 	bl	a3bf0 <CLogger::Get()>
   a27d4:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   a27d8:	2a1303e4 	mov	w4, w19
   a27dc:	aa1803e3 	mov	x3, x24
   a27e0:	aa1703e1 	mov	x1, x23
   a27e4:	91000673 	add	x19, x19, #0x1
   a27e8:	52800082 	mov	w2, #0x4                   	// #4
   a27ec:	940006f5 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a27f0:	f101027f 	cmp	x19, #0x40
   a27f4:	54fffe01 	b.ne	a27b4 <debug_stacktrace(unsigned long const*, char const*)+0x54>  // b.any
   a27f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a27fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2800:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2804:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2808:	d65f03c0 	ret
   a280c:	00000000 	udf	#0

00000000000a2810 <CDevice::Read(void*, unsigned long)>:
   a2810:	12800000 	mov	w0, #0xffffffff            	// #-1
   a2814:	d65f03c0 	ret
   a2818:	d503201f 	nop
   a281c:	d503201f 	nop

00000000000a2820 <CDevice::Seek(unsigned long)>:
   a2820:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a2824:	d65f03c0 	ret
   a2828:	d503201f 	nop
   a282c:	d503201f 	nop

00000000000a2830 <CDevice::GetSize() const>:
   a2830:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a2834:	d65f03c0 	ret
   a2838:	d503201f 	nop
   a283c:	d503201f 	nop

00000000000a2840 <CDevice::IOCtl(unsigned long, void*)>:
   a2840:	12800000 	mov	w0, #0xffffffff            	// #-1
   a2844:	d65f03c0 	ret
   a2848:	d503201f 	nop
   a284c:	d503201f 	nop

00000000000a2850 <CDevice::RemoveDevice()>:
   a2850:	52800000 	mov	w0, #0x0                   	// #0
   a2854:	d65f03c0 	ret
   a2858:	d503201f 	nop
   a285c:	d503201f 	nop

00000000000a2860 <CDevice::~CDevice()>:
   a2860:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2864:	90000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a2868:	911f6021 	add	x1, x1, #0x7d8
   a286c:	910003fd 	mov	x29, sp
   a2870:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2874:	aa0003f5 	mov	x21, x0
   a2878:	aa0003f6 	mov	x22, x0
   a287c:	a90153f3 	stp	x19, x20, [sp, #16]
   a2880:	f80086a1 	str	x1, [x21], #8
   a2884:	1400000a 	b	a28ac <CDevice::~CDevice()+0x4c>
   a2888:	f9400661 	ldr	x1, [x19, #8]
   a288c:	aa1603e0 	mov	x0, x22
   a2890:	d63f0040 	blr	x2
   a2894:	aa1403e1 	mov	x1, x20
   a2898:	aa1503e0 	mov	x0, x21
   a289c:	94000a5d 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   a28a0:	aa1303e0 	mov	x0, x19
   a28a4:	d2800201 	mov	x1, #0x10                  	// #16
   a28a8:	940024c2 	bl	abbb0 <operator delete(void*, unsigned long)>
   a28ac:	aa1503e0 	mov	x0, x21
   a28b0:	940009a4 	bl	a4f40 <CPtrList::GetFirst() const>
   a28b4:	aa0003f4 	mov	x20, x0
   a28b8:	b4000160 	cbz	x0, a28e4 <CDevice::~CDevice()+0x84>
   a28bc:	940009bd 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   a28c0:	aa0003f3 	mov	x19, x0
   a28c4:	f9400002 	ldr	x2, [x0]
   a28c8:	b5fffe02 	cbnz	x2, a2888 <CDevice::~CDevice()+0x28>
   a28cc:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a28d0:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a28d4:	911a6021 	add	x1, x1, #0x698
   a28d8:	911aa000 	add	x0, x0, #0x6a8
   a28dc:	52800502 	mov	w2, #0x28                  	// #40
   a28e0:	97fffd88 	bl	a1f00 <assertion_failed>
   a28e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a28e8:	aa1503e0 	mov	x0, x21
   a28ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a28f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a28f4:	14000987 	b	a4f10 <CPtrList::~CPtrList()>
   a28f8:	d503201f 	nop
   a28fc:	d503201f 	nop

00000000000a2900 <CDevice::~CDevice()>:
   a2900:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2904:	910003fd 	mov	x29, sp
   a2908:	f9000bf3 	str	x19, [sp, #16]
   a290c:	aa0003f3 	mov	x19, x0
   a2910:	97ffffd4 	bl	a2860 <CDevice::~CDevice()>
   a2914:	aa1303e0 	mov	x0, x19
   a2918:	d2800201 	mov	x1, #0x10                  	// #16
   a291c:	f9400bf3 	ldr	x19, [sp, #16]
   a2920:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2924:	140024a3 	b	abbb0 <operator delete(void*, unsigned long)>
   a2928:	d503201f 	nop
   a292c:	d503201f 	nop

00000000000a2930 <CDevice::CDevice()>:
   a2930:	90000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a2934:	911f6021 	add	x1, x1, #0x7d8
   a2938:	f8008401 	str	x1, [x0], #8
   a293c:	14000971 	b	a4f00 <CPtrList::CPtrList()>

00000000000a2940 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   a2940:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2944:	910003fd 	mov	x29, sp
   a2948:	a90153f3 	stp	x19, x20, [sp, #16]
   a294c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2950:	b4000361 	cbz	x1, a29bc <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x7c>
   a2954:	aa0103f5 	mov	x21, x1
   a2958:	aa0203f6 	mov	x22, x2
   a295c:	aa0003f3 	mov	x19, x0
   a2960:	d2800200 	mov	x0, #0x10                  	// #16
   a2964:	94002473 	bl	abb30 <operator new(unsigned long)>
   a2968:	aa0003f4 	mov	x20, x0
   a296c:	91002273 	add	x19, x19, #0x8
   a2970:	aa1303e0 	mov	x0, x19
   a2974:	a9005a95 	stp	x21, x22, [x20]
   a2978:	94000972 	bl	a4f40 <CPtrList::GetFirst() const>
   a297c:	aa0003e1 	mov	x1, x0
   a2980:	aa1403e2 	mov	x2, x20
   a2984:	aa1303e0 	mov	x0, x19
   a2988:	b40000e1 	cbz	x1, a29a4 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x64>
   a298c:	940009a1 	bl	a5010 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   a2990:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2994:	aa1403e0 	mov	x0, x20
   a2998:	a94153f3 	ldp	x19, x20, [sp, #16]
   a299c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a29a0:	d65f03c0 	ret
   a29a4:	940009db 	bl	a5110 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   a29a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a29ac:	aa1403e0 	mov	x0, x20
   a29b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a29b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a29b8:	d65f03c0 	ret
   a29bc:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a29c0:	b00000a0 	adrp	x0, b7000 <_etext+0x49c8>
   a29c4:	911a6021 	add	x1, x1, #0x698
   a29c8:	91006000 	add	x0, x0, #0x18
   a29cc:	52800a42 	mov	w2, #0x52                  	// #82
   a29d0:	97fffd4c 	bl	a1f00 <assertion_failed>
   a29d4:	d503201f 	nop
   a29d8:	d503201f 	nop
   a29dc:	d503201f 	nop

00000000000a29e0 <CDevice::UnregisterRemovedHandler(void*)>:
   a29e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a29e4:	910003fd 	mov	x29, sp
   a29e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a29ec:	b40001c1 	cbz	x1, a2a24 <CDevice::UnregisterRemovedHandler(void*)+0x44>
   a29f0:	91002013 	add	x19, x0, #0x8
   a29f4:	aa0103f4 	mov	x20, x1
   a29f8:	aa1303e0 	mov	x0, x19
   a29fc:	94000a51 	bl	a5340 <CPtrList::Find(void*) const>
   a2a00:	aa0003e1 	mov	x1, x0
   a2a04:	b40001c0 	cbz	x0, a2a3c <CDevice::UnregisterRemovedHandler(void*)+0x5c>
   a2a08:	aa1303e0 	mov	x0, x19
   a2a0c:	94000a01 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   a2a10:	aa1403e0 	mov	x0, x20
   a2a14:	d2800201 	mov	x1, #0x10                  	// #16
   a2a18:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2a1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2a20:	14002464 	b	abbb0 <operator delete(void*, unsigned long)>
   a2a24:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2a28:	b0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a2a2c:	911a6021 	add	x1, x1, #0x698
   a2a30:	91278000 	add	x0, x0, #0x9e0
   a2a34:	52800d22 	mov	w2, #0x69                  	// #105
   a2a38:	97fffd32 	bl	a1f00 <assertion_failed>
   a2a3c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2a40:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2a44:	911a6021 	add	x1, x1, #0x698
   a2a48:	911b0000 	add	x0, x0, #0x6c0
   a2a4c:	52800d82 	mov	w2, #0x6c                  	// #108
   a2a50:	97fffd2c 	bl	a1f00 <assertion_failed>
	...

00000000000a2a60 <CDeviceNameService::CDeviceNameService()>:
   a2a60:	90000141 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a2a64:	f9464022 	ldr	x2, [x1, #3200]
   a2a68:	f900001f 	str	xzr, [x0]
   a2a6c:	b900081f 	str	wzr, [x0, #8]
   a2a70:	b5000062 	cbnz	x2, a2a7c <CDeviceNameService::CDeviceNameService()+0x1c>
   a2a74:	f9064020 	str	x0, [x1, #3200]
   a2a78:	d65f03c0 	ret
   a2a7c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a2a80:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2a84:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2a88:	910003fd 	mov	x29, sp
   a2a8c:	911b4021 	add	x1, x1, #0x6d0
   a2a90:	911ba000 	add	x0, x0, #0x6e8
   a2a94:	528003e2 	mov	w2, #0x1f                  	// #31
   a2a98:	97fffd1a 	bl	a1f00 <assertion_failed>
   a2a9c:	d503201f 	nop

00000000000a2aa0 <CDeviceNameService::~CDeviceNameService()>:
   a2aa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2aa4:	910003fd 	mov	x29, sp
   a2aa8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2aac:	f9400013 	ldr	x19, [x0]
   a2ab0:	b4000173 	cbz	x19, a2adc <CDeviceNameService::~CDeviceNameService()+0x3c>
   a2ab4:	aa0003f4 	mov	x20, x0
   a2ab8:	f9400660 	ldr	x0, [x19, #8]
   a2abc:	f9400273 	ldr	x19, [x19]
   a2ac0:	b4000040 	cbz	x0, a2ac8 <CDeviceNameService::~CDeviceNameService()+0x28>
   a2ac4:	94002433 	bl	abb90 <operator delete[](void*)>
   a2ac8:	f9400280 	ldr	x0, [x20]
   a2acc:	d2800401 	mov	x1, #0x20                  	// #32
   a2ad0:	94002438 	bl	abbb0 <operator delete(void*, unsigned long)>
   a2ad4:	f9000293 	str	x19, [x20]
   a2ad8:	b5ffff13 	cbnz	x19, a2ab8 <CDeviceNameService::~CDeviceNameService()+0x18>
   a2adc:	90000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a2ae0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2ae4:	f906401f 	str	xzr, [x0, #3200]
   a2ae8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2aec:	d65f03c0 	ret

00000000000a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   a2af0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2af4:	910003fd 	mov	x29, sp
   a2af8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2afc:	aa0003f4 	mov	x20, x0
   a2b00:	b9400800 	ldr	w0, [x0, #8]
   a2b04:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2b08:	aa0103f5 	mov	x21, x1
   a2b0c:	aa0203f6 	mov	x22, x2
   a2b10:	f9001bf7 	str	x23, [sp, #48]
   a2b14:	12001c77 	and	w23, w3, #0xff
   a2b18:	35000320 	cbnz	w0, a2b7c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x8c>
   a2b1c:	d2800400 	mov	x0, #0x20                  	// #32
   a2b20:	94002404 	bl	abb30 <operator new(unsigned long)>
   a2b24:	aa0003f3 	mov	x19, x0
   a2b28:	b4000355 	cbz	x21, a2b90 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   a2b2c:	aa1503e0 	mov	x0, x21
   a2b30:	94002018 	bl	aab90 <strlen>
   a2b34:	91000400 	add	x0, x0, #0x1
   a2b38:	94002406 	bl	abb50 <operator new[](unsigned long)>
   a2b3c:	f9000660 	str	x0, [x19, #8]
   a2b40:	aa1503e1 	mov	x1, x21
   a2b44:	940020a3 	bl	aadd0 <strcpy>
   a2b48:	b40003b6 	cbz	x22, a2bbc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xcc>
   a2b4c:	b9400a80 	ldr	w0, [x20, #8]
   a2b50:	f9400281 	ldr	x1, [x20]
   a2b54:	f9000261 	str	x1, [x19]
   a2b58:	f9000293 	str	x19, [x20]
   a2b5c:	f9000a76 	str	x22, [x19, #16]
   a2b60:	39006277 	strb	w23, [x19, #24]
   a2b64:	35000220 	cbnz	w0, a2ba8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   a2b68:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2b6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2b70:	f9401bf7 	ldr	x23, [sp, #48]
   a2b74:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2b78:	d65f03c0 	ret
   a2b7c:	94002941 	bl	ad080 <EnterCritical>
   a2b80:	d2800400 	mov	x0, #0x20                  	// #32
   a2b84:	940023eb 	bl	abb30 <operator new(unsigned long)>
   a2b88:	aa0003f3 	mov	x19, x0
   a2b8c:	b5fffd15 	cbnz	x21, a2b2c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x3c>
   a2b90:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2b94:	b0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a2b98:	911b4021 	add	x1, x1, #0x6d0
   a2b9c:	91382000 	add	x0, x0, #0xe08
   a2ba0:	52800762 	mov	w2, #0x3b                  	// #59
   a2ba4:	97fffcd7 	bl	a1f00 <assertion_failed>
   a2ba8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2bac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2bb0:	f9401bf7 	ldr	x23, [sp, #48]
   a2bb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2bb8:	14002962 	b	ad140 <LeaveCritical>
   a2bbc:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2bc0:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2bc4:	911b4021 	add	x1, x1, #0x6d0
   a2bc8:	911be000 	add	x0, x0, #0x6f8
   a2bcc:	52800802 	mov	w2, #0x40                  	// #64
   a2bd0:	97fffccc 	bl	a1f00 <assertion_failed>
   a2bd4:	d503201f 	nop
   a2bd8:	d503201f 	nop
   a2bdc:	d503201f 	nop

00000000000a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   a2be0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2be4:	910003fd 	mov	x29, sp
   a2be8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2bec:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2bf0:	f9001bf7 	str	x23, [sp, #48]
   a2bf4:	b40006e1 	cbz	x1, a2cd0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   a2bf8:	aa0003f6 	mov	x22, x0
   a2bfc:	b9400800 	ldr	w0, [x0, #8]
   a2c00:	aa0103f4 	mov	x20, x1
   a2c04:	12001c57 	and	w23, w2, #0xff
   a2c08:	350002e0 	cbnz	w0, a2c64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x84>
   a2c0c:	f94002d3 	ldr	x19, [x22]
   a2c10:	b4000713 	cbz	x19, a2cf0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   a2c14:	d2800015 	mov	x21, #0x0                   	// #0
   a2c18:	1400000b 	b	a2c44 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   a2c1c:	aa1403e0 	mov	x0, x20
   a2c20:	94001fe8 	bl	aabc0 <strcmp>
   a2c24:	35000080 	cbnz	w0, a2c34 <CDeviceNameService::RemoveDevice(char const*, bool)+0x54>
   a2c28:	39406261 	ldrb	w1, [x19, #24]
   a2c2c:	6b17003f 	cmp	w1, w23
   a2c30:	540002e0 	b.eq	a2c8c <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>  // b.none
   a2c34:	f9400262 	ldr	x2, [x19]
   a2c38:	aa1303f5 	mov	x21, x19
   a2c3c:	b40001a2 	cbz	x2, a2c70 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   a2c40:	aa0203f3 	mov	x19, x2
   a2c44:	f9400661 	ldr	x1, [x19, #8]
   a2c48:	b5fffea1 	cbnz	x1, a2c1c <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
   a2c4c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2c50:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2c54:	911b4021 	add	x1, x1, #0x6d0
   a2c58:	911c2000 	add	x0, x0, #0x708
   a2c5c:	52800bc2 	mov	w2, #0x5e                  	// #94
   a2c60:	97fffca8 	bl	a1f00 <assertion_failed>
   a2c64:	94002907 	bl	ad080 <EnterCritical>
   a2c68:	f94002d3 	ldr	x19, [x22]
   a2c6c:	b5fffd53 	cbnz	x19, a2c14 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   a2c70:	b9400ac0 	ldr	w0, [x22, #8]
   a2c74:	340003e0 	cbz	w0, a2cf0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   a2c78:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2c7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2c80:	f9401bf7 	ldr	x23, [sp, #48]
   a2c84:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2c88:	1400292e 	b	ad140 <LeaveCritical>
   a2c8c:	f9400260 	ldr	x0, [x19]
   a2c90:	b40001d5 	cbz	x21, a2cc8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   a2c94:	f90002a0 	str	x0, [x21]
   a2c98:	b9400ac0 	ldr	w0, [x22, #8]
   a2c9c:	35000260 	cbnz	w0, a2ce8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   a2ca0:	f9400660 	ldr	x0, [x19, #8]
   a2ca4:	b4000040 	cbz	x0, a2cac <CDeviceNameService::RemoveDevice(char const*, bool)+0xcc>
   a2ca8:	940023ba 	bl	abb90 <operator delete[](void*)>
   a2cac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2cb0:	aa1303e0 	mov	x0, x19
   a2cb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2cb8:	d2800401 	mov	x1, #0x20                  	// #32
   a2cbc:	f9401bf7 	ldr	x23, [sp, #48]
   a2cc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2cc4:	140023bb 	b	abbb0 <operator delete(void*, unsigned long)>
   a2cc8:	f90002c0 	str	x0, [x22]
   a2ccc:	17fffff3 	b	a2c98 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   a2cd0:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2cd4:	b0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a2cd8:	911b4021 	add	x1, x1, #0x6d0
   a2cdc:	91382000 	add	x0, x0, #0xe08
   a2ce0:	52800ac2 	mov	w2, #0x56                  	// #86
   a2ce4:	97fffc87 	bl	a1f00 <assertion_failed>
   a2ce8:	94002916 	bl	ad140 <LeaveCritical>
   a2cec:	17ffffed 	b	a2ca0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   a2cf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2cf4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2cf8:	f9401bf7 	ldr	x23, [sp, #48]
   a2cfc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2d00:	d65f03c0 	ret
   a2d04:	d503201f 	nop
   a2d08:	d503201f 	nop
   a2d0c:	d503201f 	nop

00000000000a2d10 <CDeviceNameService::GetDevice(char const*, bool)>:
   a2d10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2d14:	910003fd 	mov	x29, sp
   a2d18:	a90153f3 	stp	x19, x20, [sp, #16]
   a2d1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2d20:	b40004a1 	cbz	x1, a2db4 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   a2d24:	aa0003f5 	mov	x21, x0
   a2d28:	b9400800 	ldr	w0, [x0, #8]
   a2d2c:	aa0103f4 	mov	x20, x1
   a2d30:	12001c56 	and	w22, w2, #0xff
   a2d34:	35000280 	cbnz	w0, a2d84 <CDeviceNameService::GetDevice(char const*, bool)+0x74>
   a2d38:	f94002b3 	ldr	x19, [x21]
   a2d3c:	b5000153 	cbnz	x19, a2d64 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   a2d40:	14000016 	b	a2d98 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   a2d44:	aa1403e0 	mov	x0, x20
   a2d48:	94001f9e 	bl	aabc0 <strcmp>
   a2d4c:	35000080 	cbnz	w0, a2d5c <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   a2d50:	39406261 	ldrb	w1, [x19, #24]
   a2d54:	6b16003f 	cmp	w1, w22
   a2d58:	540003a0 	b.eq	a2dcc <CDeviceNameService::GetDevice(char const*, bool)+0xbc>  // b.none
   a2d5c:	f9400273 	ldr	x19, [x19]
   a2d60:	b4000193 	cbz	x19, a2d90 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   a2d64:	f9400661 	ldr	x1, [x19, #8]
   a2d68:	b5fffee1 	cbnz	x1, a2d44 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   a2d6c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2d70:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2d74:	911b4021 	add	x1, x1, #0x6d0
   a2d78:	911c2000 	add	x0, x0, #0x708
   a2d7c:	52801242 	mov	w2, #0x92                  	// #146
   a2d80:	97fffc60 	bl	a1f00 <assertion_failed>
   a2d84:	940028bf 	bl	ad080 <EnterCritical>
   a2d88:	f94002b3 	ldr	x19, [x21]
   a2d8c:	b5fffed3 	cbnz	x19, a2d64 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   a2d90:	b9400aa0 	ldr	w0, [x21, #8]
   a2d94:	350000c0 	cbnz	w0, a2dac <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   a2d98:	d2800000 	mov	x0, #0x0                   	// #0
   a2d9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2da0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2da4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2da8:	d65f03c0 	ret
   a2dac:	940028e5 	bl	ad140 <LeaveCritical>
   a2db0:	17fffffa 	b	a2d98 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   a2db4:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2db8:	b0000080 	adrp	x0, b3000 <_etext+0x9c8>
   a2dbc:	911b4021 	add	x1, x1, #0x6d0
   a2dc0:	91382000 	add	x0, x0, #0xe08
   a2dc4:	52801162 	mov	w2, #0x8b                  	// #139
   a2dc8:	97fffc4e 	bl	a1f00 <assertion_failed>
   a2dcc:	b9400aa1 	ldr	w1, [x21, #8]
   a2dd0:	f9400a60 	ldr	x0, [x19, #16]
   a2dd4:	35000101 	cbnz	w1, a2df4 <CDeviceNameService::GetDevice(char const*, bool)+0xe4>
   a2dd8:	b5fffe20 	cbnz	x0, a2d9c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   a2ddc:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2de0:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2de4:	911b4021 	add	x1, x1, #0x6d0
   a2de8:	911c8000 	add	x0, x0, #0x720
   a2dec:	52801342 	mov	w2, #0x9a                  	// #154
   a2df0:	97fffc44 	bl	a1f00 <assertion_failed>
   a2df4:	f9001fe0 	str	x0, [sp, #56]
   a2df8:	940028d2 	bl	ad140 <LeaveCritical>
   a2dfc:	f9401fe0 	ldr	x0, [sp, #56]
   a2e00:	b5fffce0 	cbnz	x0, a2d9c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   a2e04:	17fffff6 	b	a2ddc <CDeviceNameService::GetDevice(char const*, bool)+0xcc>
   a2e08:	d503201f 	nop
   a2e0c:	d503201f 	nop

00000000000a2e10 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
   a2e10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2e14:	910003fd 	mov	x29, sp
   a2e18:	f9001bf7 	str	x23, [sp, #48]
   a2e1c:	aa0003f7 	mov	x23, x0
   a2e20:	b9400800 	ldr	w0, [x0, #8]
   a2e24:	a90153f3 	stp	x19, x20, [sp, #16]
   a2e28:	aa0103f4 	mov	x20, x1
   a2e2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2e30:	aa0203f5 	mov	x21, x2
   a2e34:	350002a0 	cbnz	w0, a2e88 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x78>
   a2e38:	f94002f3 	ldr	x19, [x23]
   a2e3c:	b5000093 	cbnz	x19, a2e4c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x3c>
   a2e40:	14000018 	b	a2ea0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x90>
   a2e44:	f9400273 	ldr	x19, [x19]
   a2e48:	b4000293 	cbz	x19, a2e98 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x88>
   a2e4c:	a9408261 	ldp	x1, x0, [x19, #8]
   a2e50:	aa1503e3 	mov	x3, x21
   a2e54:	39406262 	ldrb	w2, [x19, #24]
   a2e58:	d63f0280 	blr	x20
   a2e5c:	12001c16 	and	w22, w0, #0xff
   a2e60:	3707ff20 	tbnz	w0, #0, a2e44 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x34>
   a2e64:	b9400ae0 	ldr	w0, [x23, #8]
   a2e68:	34000040 	cbz	w0, a2e70 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x60>
   a2e6c:	940028b5 	bl	ad140 <LeaveCritical>
   a2e70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2e74:	2a1603e0 	mov	w0, w22
   a2e78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2e7c:	f9401bf7 	ldr	x23, [sp, #48]
   a2e80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a2e84:	d65f03c0 	ret
   a2e88:	9400287e 	bl	ad080 <EnterCritical>
   a2e8c:	f94002f3 	ldr	x19, [x23]
   a2e90:	b5fffdf3 	cbnz	x19, a2e4c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x3c>
   a2e94:	d503201f 	nop
   a2e98:	52800036 	mov	w22, #0x1                   	// #1
   a2e9c:	17fffff2 	b	a2e64 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
   a2ea0:	52800036 	mov	w22, #0x1                   	// #1
   a2ea4:	17fffff3 	b	a2e70 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x60>
   a2ea8:	d503201f 	nop
   a2eac:	d503201f 	nop

00000000000a2eb0 <CDeviceNameService::Get()>:
   a2eb0:	90000140 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a2eb4:	f9464000 	ldr	x0, [x0, #3200]
   a2eb8:	b4000040 	cbz	x0, a2ec0 <CDeviceNameService::Get()+0x10>
   a2ebc:	d65f03c0 	ret
   a2ec0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a2ec4:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2ec8:	900000a0 	adrp	x0, b6000 <_etext+0x39c8>
   a2ecc:	910003fd 	mov	x29, sp
   a2ed0:	911b4021 	add	x1, x1, #0x6d0
   a2ed4:	911cc000 	add	x0, x0, #0x730
   a2ed8:	52801ca2 	mov	w2, #0xe5                  	// #229
   a2edc:	97fffc09 	bl	a1f00 <assertion_failed>

00000000000a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   a2ee0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a2ee4:	910003fd 	mov	x29, sp
   a2ee8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2eec:	910103f3 	add	x19, sp, #0x40
   a2ef0:	aa0003f4 	mov	x20, x0
   a2ef4:	aa1303e0 	mov	x0, x19
   a2ef8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2efc:	aa0103f6 	mov	x22, x1
   a2f00:	aa0303f5 	mov	x21, x3
   a2f04:	a90363f7 	stp	x23, x24, [sp, #48]
   a2f08:	12001c98 	and	w24, w4, #0xff
   a2f0c:	2a0203f7 	mov	w23, w2
   a2f10:	94001484 	bl	a8120 <CString::CString()>
   a2f14:	2a1703e3 	mov	w3, w23
   a2f18:	aa1603e2 	mov	x2, x22
   a2f1c:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2f20:	911d0021 	add	x1, x1, #0x740
   a2f24:	aa1303e0 	mov	x0, x19
   a2f28:	94001a86 	bl	a9940 <CString::Format(char const*, ...)>
   a2f2c:	aa1303e0 	mov	x0, x19
   a2f30:	940014c0 	bl	a8230 <CString::operator char const*() const>
   a2f34:	aa0003e1 	mov	x1, x0
   a2f38:	2a1803e3 	mov	w3, w24
   a2f3c:	aa1503e2 	mov	x2, x21
   a2f40:	aa1403e0 	mov	x0, x20
   a2f44:	97fffeeb 	bl	a2af0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   a2f48:	aa1303e0 	mov	x0, x19
   a2f4c:	94001439 	bl	a8030 <CString::~CString()>
   a2f50:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2f54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2f58:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2f5c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a2f60:	d65f03c0 	ret
   a2f64:	d503201f 	nop
   a2f68:	d503201f 	nop
   a2f6c:	d503201f 	nop

00000000000a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   a2f70:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a2f74:	910003fd 	mov	x29, sp
   a2f78:	a90153f3 	stp	x19, x20, [sp, #16]
   a2f7c:	910103f3 	add	x19, sp, #0x40
   a2f80:	aa0003f4 	mov	x20, x0
   a2f84:	aa1303e0 	mov	x0, x19
   a2f88:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2f8c:	aa0103f5 	mov	x21, x1
   a2f90:	2a0203f6 	mov	w22, w2
   a2f94:	f9001bf7 	str	x23, [sp, #48]
   a2f98:	12001c77 	and	w23, w3, #0xff
   a2f9c:	94001461 	bl	a8120 <CString::CString()>
   a2fa0:	2a1603e3 	mov	w3, w22
   a2fa4:	aa1503e2 	mov	x2, x21
   a2fa8:	900000a1 	adrp	x1, b6000 <_etext+0x39c8>
   a2fac:	911d0021 	add	x1, x1, #0x740
   a2fb0:	aa1303e0 	mov	x0, x19
   a2fb4:	94001a63 	bl	a9940 <CString::Format(char const*, ...)>
   a2fb8:	aa1303e0 	mov	x0, x19
   a2fbc:	9400149d 	bl	a8230 <CString::operator char const*() const>
   a2fc0:	aa0003e1 	mov	x1, x0
   a2fc4:	2a1703e2 	mov	w2, w23
   a2fc8:	aa1403e0 	mov	x0, x20
   a2fcc:	97ffff05 	bl	a2be0 <CDeviceNameService::RemoveDevice(char const*, bool)>
   a2fd0:	aa1303e0 	mov	x0, x19
   a2fd4:	94001417 	bl	a8030 <CString::~CString()>
   a2fd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2fdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2fe0:	f9401bf7 	ldr	x23, [sp, #48]
   a2fe4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a2fe8:	d65f03c0 	ret
   a2fec:	d503201f 	nop

00000000000a2ff0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   a2ff0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a2ff4:	910003fd 	mov	x29, sp
   a2ff8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2ffc:	910103f3 	add	x19, sp, #0x40
   a3000:	aa0003f4 	mov	x20, x0
   a3004:	aa1303e0 	mov	x0, x19
   a3008:	a9025bf5 	stp	x21, x22, [sp, #32]
   a300c:	aa0103f5 	mov	x21, x1
   a3010:	2a0203f6 	mov	w22, w2
   a3014:	f9001bf7 	str	x23, [sp, #48]
   a3018:	12001c77 	and	w23, w3, #0xff
   a301c:	94001441 	bl	a8120 <CString::CString()>
   a3020:	2a1603e3 	mov	w3, w22
   a3024:	aa1503e2 	mov	x2, x21
   a3028:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a302c:	911d0021 	add	x1, x1, #0x740
   a3030:	aa1303e0 	mov	x0, x19
   a3034:	94001a43 	bl	a9940 <CString::Format(char const*, ...)>
   a3038:	aa1303e0 	mov	x0, x19
   a303c:	9400147d 	bl	a8230 <CString::operator char const*() const>
   a3040:	aa0003e1 	mov	x1, x0
   a3044:	2a1703e2 	mov	w2, w23
   a3048:	aa1403e0 	mov	x0, x20
   a304c:	97ffff31 	bl	a2d10 <CDeviceNameService::GetDevice(char const*, bool)>
   a3050:	aa0003f4 	mov	x20, x0
   a3054:	aa1303e0 	mov	x0, x19
   a3058:	940013f6 	bl	a8030 <CString::~CString()>
   a305c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3060:	aa1403e0 	mov	x0, x20
   a3064:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3068:	f9401bf7 	ldr	x23, [sp, #48]
   a306c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a3070:	d65f03c0 	ret
   a3074:	d503201f 	nop
   a3078:	d503201f 	nop
   a307c:	d503201f 	nop

00000000000a3080 <CDeviceNameService::ListDevices(CDevice*)>:
   a3080:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   a3084:	910003fd 	mov	x29, sp
   a3088:	a90153f3 	stp	x19, x20, [sp, #16]
   a308c:	b4000901 	cbz	x1, a31ac <CDeviceNameService::ListDevices(CDevice*)+0x12c>
   a3090:	f9400013 	ldr	x19, [x0]
   a3094:	b4000873 	cbz	x19, a31a0 <CDeviceNameService::ListDevices(CDevice*)+0x120>
   a3098:	9101c3f4 	add	x20, sp, #0x70
   a309c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a30a0:	52800015 	mov	w21, #0x0                   	// #0
   a30a4:	a90363f7 	stp	x23, x24, [sp, #48]
   a30a8:	f0000098 	adrp	x24, b6000 <_etext+0x39c8>
   a30ac:	911d2300 	add	x0, x24, #0x748
   a30b0:	aa0103f7 	mov	x23, x1
   a30b4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a30b8:	5280041a 	mov	w26, #0x20                  	// #32
   a30bc:	52800159 	mov	w25, #0xa                   	// #10
   a30c0:	a90573fb 	stp	x27, x28, [sp, #80]
   a30c4:	52800c7b 	mov	w27, #0x63                  	// #99
   a30c8:	f90037e0 	str	x0, [sp, #104]
   a30cc:	14000018 	b	a312c <CDeviceNameService::ListDevices(CDevice*)+0xac>
   a30d0:	f94037e1 	ldr	x1, [sp, #104]
   a30d4:	110006b5 	add	w21, w21, #0x1
   a30d8:	720006bc 	ands	w28, w21, #0x3
   a30dc:	39406262 	ldrb	w2, [x19, #24]
   a30e0:	1a991344 	csel	w4, w26, w25, ne	// ne = any
   a30e4:	aa1403e0 	mov	x0, x20
   a30e8:	4b020362 	sub	w2, w27, w2
   a30ec:	94001a15 	bl	a9940 <CString::Format(char const*, ...)>
   a30f0:	f94002e1 	ldr	x1, [x23]
   a30f4:	aa1403e0 	mov	x0, x20
   a30f8:	f9400c38 	ldr	x24, [x1, #24]
   a30fc:	9400144d 	bl	a8230 <CString::operator char const*() const>
   a3100:	aa0003f6 	mov	x22, x0
   a3104:	aa1403e0 	mov	x0, x20
   a3108:	94001496 	bl	a8360 <CString::GetLength() const>
   a310c:	aa0003e2 	mov	x2, x0
   a3110:	aa1603e1 	mov	x1, x22
   a3114:	aa1703e0 	mov	x0, x23
   a3118:	d63f0300 	blr	x24
   a311c:	f9400273 	ldr	x19, [x19]
   a3120:	aa1403e0 	mov	x0, x20
   a3124:	940013c3 	bl	a8030 <CString::~CString()>
   a3128:	b4000173 	cbz	x19, a3154 <CDeviceNameService::ListDevices(CDevice*)+0xd4>
   a312c:	aa1403e0 	mov	x0, x20
   a3130:	940013fc 	bl	a8120 <CString::CString()>
   a3134:	f9400663 	ldr	x3, [x19, #8]
   a3138:	b5fffcc3 	cbnz	x3, a30d0 <CDeviceNameService::ListDevices(CDevice*)+0x50>
   a313c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3140:	f0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a3144:	911b4021 	add	x1, x1, #0x6d0
   a3148:	911c2000 	add	x0, x0, #0x708
   a314c:	52801a42 	mov	w2, #0xd2                  	// #210
   a3150:	97fffb6c 	bl	a1f00 <assertion_failed>
   a3154:	340001fc 	cbz	w28, a3190 <CDeviceNameService::ListDevices(CDevice*)+0x110>
   a3158:	f94002e3 	ldr	x3, [x23]
   a315c:	aa1703e0 	mov	x0, x23
   a3160:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3164:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3168:	f9400c63 	ldr	x3, [x3, #24]
   a316c:	91066021 	add	x1, x1, #0x198
   a3170:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3174:	aa0303f0 	mov	x16, x3
   a3178:	a94363f7 	ldp	x23, x24, [sp, #48]
   a317c:	d2800022 	mov	x2, #0x1                   	// #1
   a3180:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3184:	a94573fb 	ldp	x27, x28, [sp, #80]
   a3188:	a8c97bfd 	ldp	x29, x30, [sp], #144
   a318c:	d61f0200 	br	x16
   a3190:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3194:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3198:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a319c:	a94573fb 	ldp	x27, x28, [sp, #80]
   a31a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a31a4:	a8c97bfd 	ldp	x29, x30, [sp], #144
   a31a8:	d65f03c0 	ret
   a31ac:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a31b0:	f0000060 	adrp	x0, b2000 <SErrorStub+0xc>
   a31b4:	911b4021 	add	x1, x1, #0x6d0
   a31b8:	91266000 	add	x0, x0, #0x998
   a31bc:	52801922 	mov	w2, #0xc9                  	// #201
   a31c0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a31c4:	a90363f7 	stp	x23, x24, [sp, #48]
   a31c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   a31cc:	a90573fb 	stp	x27, x28, [sp, #80]
   a31d0:	97fffb4c 	bl	a1f00 <assertion_failed>
	...

00000000000a31e0 <CKernelOptions::~CKernelOptions()>:
   a31e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a31e4:	910003fd 	mov	x29, sp
   a31e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a31ec:	f9444c13 	ldr	x19, [x0, #2200]
   a31f0:	b40001f3 	cbz	x19, a322c <CKernelOptions::~CKernelOptions()+0x4c>
   a31f4:	aa0003f4 	mov	x20, x0
   a31f8:	f9400a60 	ldr	x0, [x19, #16]
   a31fc:	f9400261 	ldr	x1, [x19]
   a3200:	f9044e81 	str	x1, [x20, #2200]
   a3204:	b4000040 	cbz	x0, a320c <CKernelOptions::~CKernelOptions()+0x2c>
   a3208:	94002262 	bl	abb90 <operator delete[](void*)>
   a320c:	f9400660 	ldr	x0, [x19, #8]
   a3210:	b4000040 	cbz	x0, a3218 <CKernelOptions::~CKernelOptions()+0x38>
   a3214:	9400225f 	bl	abb90 <operator delete[](void*)>
   a3218:	aa1303e0 	mov	x0, x19
   a321c:	d2800301 	mov	x1, #0x18                  	// #24
   a3220:	94002264 	bl	abbb0 <operator delete(void*, unsigned long)>
   a3224:	f9444e93 	ldr	x19, [x20, #2200]
   a3228:	b5fffe93 	cbnz	x19, a31f8 <CKernelOptions::~CKernelOptions()+0x18>
   a322c:	f0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a3230:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3234:	f906441f 	str	xzr, [x0, #3208]
   a3238:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a323c:	d65f03c0 	ret

00000000000a3240 <CKernelOptions::GetWidth() const>:
   a3240:	b9481800 	ldr	w0, [x0, #2072]
   a3244:	d65f03c0 	ret
   a3248:	d503201f 	nop
   a324c:	d503201f 	nop

00000000000a3250 <CKernelOptions::GetHeight() const>:
   a3250:	b9481c00 	ldr	w0, [x0, #2076]
   a3254:	d65f03c0 	ret
   a3258:	d503201f 	nop
   a325c:	d503201f 	nop

00000000000a3260 <CKernelOptions::GetLogDevice() const>:
   a3260:	91208000 	add	x0, x0, #0x820
   a3264:	d65f03c0 	ret
   a3268:	d503201f 	nop
   a326c:	d503201f 	nop

00000000000a3270 <CKernelOptions::GetLogLevel() const>:
   a3270:	b9483400 	ldr	w0, [x0, #2100]
   a3274:	d65f03c0 	ret
   a3278:	d503201f 	nop
   a327c:	d503201f 	nop

00000000000a3280 <CKernelOptions::GetKeyMap() const>:
   a3280:	9120e000 	add	x0, x0, #0x838
   a3284:	d65f03c0 	ret
   a3288:	d503201f 	nop
   a328c:	d503201f 	nop

00000000000a3290 <CKernelOptions::GetUSBPowerDelay() const>:
   a3290:	b9483c00 	ldr	w0, [x0, #2108]
   a3294:	d65f03c0 	ret
   a3298:	d503201f 	nop
   a329c:	d503201f 	nop

00000000000a32a0 <CKernelOptions::GetUSBFullSpeed() const>:
   a32a0:	39610000 	ldrb	w0, [x0, #2112]
   a32a4:	d65f03c0 	ret
   a32a8:	d503201f 	nop
   a32ac:	d503201f 	nop

00000000000a32b0 <CKernelOptions::GetUSBBoost() const>:
   a32b0:	39610400 	ldrb	w0, [x0, #2113]
   a32b4:	d65f03c0 	ret
   a32b8:	d503201f 	nop
   a32bc:	d503201f 	nop

00000000000a32c0 <CKernelOptions::GetUSBIgnore() const>:
   a32c0:	91210800 	add	x0, x0, #0x842
   a32c4:	d65f03c0 	ret
   a32c8:	d503201f 	nop
   a32cc:	d503201f 	nop

00000000000a32d0 <CKernelOptions::GetUSBSoundChannels() const>:
   a32d0:	91216000 	add	x0, x0, #0x858
   a32d4:	d65f03c0 	ret
   a32d8:	d503201f 	nop
   a32dc:	d503201f 	nop

00000000000a32e0 <CKernelOptions::GetSoundDevice() const>:
   a32e0:	91218000 	add	x0, x0, #0x860
   a32e4:	d65f03c0 	ret
   a32e8:	d503201f 	nop
   a32ec:	d503201f 	nop

00000000000a32f0 <CKernelOptions::GetSoundOption() const>:
   a32f0:	b9487400 	ldr	w0, [x0, #2164]
   a32f4:	d65f03c0 	ret
   a32f8:	d503201f 	nop
   a32fc:	d503201f 	nop

00000000000a3300 <CKernelOptions::GetCPUSpeed() const>:
   a3300:	b9487800 	ldr	w0, [x0, #2168]
   a3304:	d65f03c0 	ret
   a3308:	d503201f 	nop
   a330c:	d503201f 	nop

00000000000a3310 <CKernelOptions::GetSoCMaxTemp() const>:
   a3310:	b9487c00 	ldr	w0, [x0, #2172]
   a3314:	d65f03c0 	ret
   a3318:	d503201f 	nop
   a331c:	d503201f 	nop

00000000000a3320 <CKernelOptions::GetGPIOFanPin() const>:
   a3320:	b9488000 	ldr	w0, [x0, #2176]
   a3324:	d65f03c0 	ret
   a3328:	d503201f 	nop
   a332c:	d503201f 	nop

00000000000a3330 <CKernelOptions::GetTouchScreen() const>:
   a3330:	39621001 	ldrb	w1, [x0, #2180]
   a3334:	91222002 	add	x2, x0, #0x888
   a3338:	72000021 	ands	w1, w1, #0x1
   a333c:	9a9f1040 	csel	x0, x2, xzr, ne	// ne = any
   a3340:	d65f03c0 	ret
   a3344:	d503201f 	nop
   a3348:	d503201f 	nop
   a334c:	d503201f 	nop

00000000000a3350 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
   a3350:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3354:	910003fd 	mov	x29, sp
   a3358:	a90153f3 	stp	x19, x20, [sp, #16]
   a335c:	f9444c13 	ldr	x19, [x0, #2200]
   a3360:	f90013f5 	str	x21, [sp, #32]
   a3364:	aa0203f5 	mov	x21, x2
   a3368:	b40001d3 	cbz	x19, a33a0 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x50>
   a336c:	aa0103f4 	mov	x20, x1
   a3370:	14000003 	b	a337c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x2c>
   a3374:	f9400273 	ldr	x19, [x19]
   a3378:	b4000153 	cbz	x19, a33a0 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x50>
   a337c:	f9400660 	ldr	x0, [x19, #8]
   a3380:	aa1403e1 	mov	x1, x20
   a3384:	94001e0f 	bl	aabc0 <strcmp>
   a3388:	35ffff60 	cbnz	w0, a3374 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x24>
   a338c:	f9400a60 	ldr	x0, [x19, #16]
   a3390:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3394:	f94013f5 	ldr	x21, [sp, #32]
   a3398:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a339c:	d65f03c0 	ret
   a33a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a33a4:	aa1503e0 	mov	x0, x21
   a33a8:	f94013f5 	ldr	x21, [sp, #32]
   a33ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a33b0:	d65f03c0 	ret
   a33b4:	d503201f 	nop
   a33b8:	d503201f 	nop
   a33bc:	d503201f 	nop

00000000000a33c0 <CKernelOptions::Get()>:
   a33c0:	f0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a33c4:	f9464400 	ldr	x0, [x0, #3208]
   a33c8:	d65f03c0 	ret
   a33cc:	d503201f 	nop

00000000000a33d0 <CKernelOptions::GetToken()>:
   a33d0:	aa0003e3 	mov	x3, x0
   a33d4:	f9440800 	ldr	x0, [x0, #2064]
   a33d8:	39c00001 	ldrsb	w1, [x0]
   a33dc:	350000c1 	cbnz	w1, a33f4 <CKernelOptions::GetToken()+0x24>
   a33e0:	14000013 	b	a342c <CKernelOptions::GetToken()+0x5c>
   a33e4:	91000400 	add	x0, x0, #0x1
   a33e8:	f9040860 	str	x0, [x3, #2064]
   a33ec:	39c00001 	ldrsb	w1, [x0]
   a33f0:	340001e1 	cbz	w1, a342c <CKernelOptions::GetToken()+0x5c>
   a33f4:	7100803f 	cmp	w1, #0x20
   a33f8:	54ffff60 	b.eq	a33e4 <CKernelOptions::GetToken()+0x14>  // b.none
   a33fc:	f9440861 	ldr	x1, [x3, #2064]
   a3400:	14000006 	b	a3418 <CKernelOptions::GetToken()+0x48>
   a3404:	7100805f 	cmp	w2, #0x20
   a3408:	aa0103e2 	mov	x2, x1
   a340c:	91000421 	add	x1, x1, #0x1
   a3410:	f9040861 	str	x1, [x3, #2064]
   a3414:	54000080 	b.eq	a3424 <CKernelOptions::GetToken()+0x54>  // b.none
   a3418:	39c00022 	ldrsb	w2, [x1]
   a341c:	35ffff42 	cbnz	w2, a3404 <CKernelOptions::GetToken()+0x34>
   a3420:	d65f03c0 	ret
   a3424:	3900005f 	strb	wzr, [x2]
   a3428:	d65f03c0 	ret
   a342c:	d2800000 	mov	x0, #0x0                   	// #0
   a3430:	d65f03c0 	ret
   a3434:	d503201f 	nop
   a3438:	d503201f 	nop
   a343c:	d503201f 	nop

00000000000a3440 <CKernelOptions::GetOptionValue(char*)>:
   a3440:	39c00001 	ldrsb	w1, [x0]
   a3444:	35000081 	cbnz	w1, a3454 <CKernelOptions::GetOptionValue(char*)+0x14>
   a3448:	14000007 	b	a3464 <CKernelOptions::GetOptionValue(char*)+0x24>
   a344c:	38c01c01 	ldrsb	w1, [x0, #1]!
   a3450:	340000a1 	cbz	w1, a3464 <CKernelOptions::GetOptionValue(char*)+0x24>
   a3454:	7100f43f 	cmp	w1, #0x3d
   a3458:	54ffffa1 	b.ne	a344c <CKernelOptions::GetOptionValue(char*)+0xc>  // b.any
   a345c:	3800141f 	strb	wzr, [x0], #1
   a3460:	d65f03c0 	ret
   a3464:	d2800000 	mov	x0, #0x0                   	// #0
   a3468:	d65f03c0 	ret
   a346c:	d503201f 	nop

00000000000a3470 <CKernelOptions::GetDecimal(char const*)>:
   a3470:	aa0003e3 	mov	x3, x0
   a3474:	b4000260 	cbz	x0, a34c0 <CKernelOptions::GetDecimal(char const*)+0x50>
   a3478:	39c00001 	ldrsb	w1, [x0]
   a347c:	12800000 	mov	w0, #0xffffffff            	// #-1
   a3480:	340001e1 	cbz	w1, a34bc <CKernelOptions::GetDecimal(char const*)+0x4c>
   a3484:	52800000 	mov	w0, #0x0                   	// #0
   a3488:	52800145 	mov	w5, #0xa                   	// #10
   a348c:	14000008 	b	a34ac <CKernelOptions::GetDecimal(char const*)+0x3c>
   a3490:	1b050401 	madd	w1, w0, w5, w1
   a3494:	7100249f 	cmp	w4, #0x9
   a3498:	54000148 	b.hi	a34c0 <CKernelOptions::GetDecimal(char const*)+0x50>  // b.pmore
   a349c:	6b01001f 	cmp	w0, w1
   a34a0:	2a0103e0 	mov	w0, w1
   a34a4:	3a419824 	ccmn	w1, #0x1, #0x4, ls	// ls = plast
   a34a8:	540000c0 	b.eq	a34c0 <CKernelOptions::GetDecimal(char const*)+0x50>  // b.none
   a34ac:	38c01462 	ldrsb	w2, [x3], #1
   a34b0:	5100c041 	sub	w1, w2, #0x30
   a34b4:	12001c24 	and	w4, w1, #0xff
   a34b8:	35fffec2 	cbnz	w2, a3490 <CKernelOptions::GetDecimal(char const*)+0x20>
   a34bc:	d65f03c0 	ret
   a34c0:	12800000 	mov	w0, #0xffffffff            	// #-1
   a34c4:	d65f03c0 	ret
   a34c8:	d503201f 	nop
   a34cc:	d503201f 	nop

00000000000a34d0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
   a34d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a34d4:	910003fd 	mov	x29, sp
   a34d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a34dc:	f9444c13 	ldr	x19, [x0, #2200]
   a34e0:	f90013f5 	str	x21, [sp, #32]
   a34e4:	2a0203f5 	mov	w21, w2
   a34e8:	b4000253 	cbz	x19, a3530 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   a34ec:	aa0103f4 	mov	x20, x1
   a34f0:	14000003 	b	a34fc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x2c>
   a34f4:	f9400273 	ldr	x19, [x19]
   a34f8:	b40001d3 	cbz	x19, a3530 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   a34fc:	f9400660 	ldr	x0, [x19, #8]
   a3500:	aa1403e1 	mov	x1, x20
   a3504:	94001daf 	bl	aabc0 <strcmp>
   a3508:	35ffff60 	cbnz	w0, a34f4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x24>
   a350c:	f9400a60 	ldr	x0, [x19, #16]
   a3510:	b4000100 	cbz	x0, a3530 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   a3514:	97ffffd7 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a3518:	3100041f 	cmn	w0, #0x1
   a351c:	540000a0 	b.eq	a3530 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>  // b.none
   a3520:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3524:	f94013f5 	ldr	x21, [sp, #32]
   a3528:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a352c:	d65f03c0 	ret
   a3530:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3534:	2a1503e0 	mov	w0, w21
   a3538:	f94013f5 	ldr	x21, [sp, #32]
   a353c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3540:	d65f03c0 	ret
   a3544:	d503201f 	nop
   a3548:	d503201f 	nop
   a354c:	d503201f 	nop

00000000000a3550 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   a3550:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a3554:	910003fd 	mov	x29, sp
   a3558:	a90153f3 	stp	x19, x20, [sp, #16]
   a355c:	910123f4 	add	x20, sp, #0x48
   a3560:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3564:	f00000b6 	adrp	x22, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a3568:	34000482 	cbz	w2, a35f8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa8>
   a356c:	a90363f7 	stp	x23, x24, [sp, #48]
   a3570:	aa0103f8 	mov	x24, x1
   a3574:	51000441 	sub	w1, w2, #0x1
   a3578:	f00000b6 	adrp	x22, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a357c:	912d62d5 	add	x21, x22, #0xb58
   a3580:	d37e7c33 	ubfiz	x19, x1, #2, #32
   a3584:	910123f4 	add	x20, sp, #0x48
   a3588:	91001273 	add	x19, x19, #0x4
   a358c:	52800157 	mov	w23, #0xa                   	// #10
   a3590:	8b130313 	add	x19, x24, x19
   a3594:	d503201f 	nop
   a3598:	aa1403e2 	mov	x2, x20
   a359c:	aa1503e1 	mov	x1, x21
   a35a0:	94001e54 	bl	aaef0 <strtok_r>
   a35a4:	b40003e0 	cbz	x0, a3620 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xd0>
   a35a8:	39c00001 	ldrsb	w1, [x0]
   a35ac:	340003a1 	cbz	w1, a3620 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xd0>
   a35b0:	52800003 	mov	w3, #0x0                   	// #0
   a35b4:	14000008 	b	a35d4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
   a35b8:	1b170862 	madd	w2, w3, w23, w2
   a35bc:	710024bf 	cmp	w5, #0x9
   a35c0:	54000308 	b.hi	a3620 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xd0>  // b.pmore
   a35c4:	6b02007f 	cmp	w3, w2
   a35c8:	2a0203e3 	mov	w3, w2
   a35cc:	3a419844 	ccmn	w2, #0x1, #0x4, ls	// ls = plast
   a35d0:	54000280 	b.eq	a3620 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xd0>  // b.none
   a35d4:	38c01404 	ldrsb	w4, [x0], #1
   a35d8:	5100c082 	sub	w2, w4, #0x30
   a35dc:	12001c45 	and	w5, w2, #0xff
   a35e0:	35fffec4 	cbnz	w4, a35b8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x68>
   a35e4:	b8004703 	str	w3, [x24], #4
   a35e8:	d2800000 	mov	x0, #0x0                   	// #0
   a35ec:	eb13031f 	cmp	x24, x19
   a35f0:	54fffd41 	b.ne	a3598 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x48>  // b.any
   a35f4:	a94363f7 	ldp	x23, x24, [sp, #48]
   a35f8:	aa1403e2 	mov	x2, x20
   a35fc:	912d62c1 	add	x1, x22, #0xb58
   a3600:	d2800000 	mov	x0, #0x0                   	// #0
   a3604:	94001e3b 	bl	aaef0 <strtok_r>
   a3608:	f100001f 	cmp	x0, #0x0
   a360c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3610:	1a9f17e0 	cset	w0, eq	// eq = none
   a3614:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3618:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a361c:	d65f03c0 	ret
   a3620:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3624:	52800000 	mov	w0, #0x0                   	// #0
   a3628:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a362c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3630:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3634:	d65f03c0 	ret
   a3638:	d503201f 	nop
   a363c:	d503201f 	nop

00000000000a3640 <CKernelOptions::CKernelOptions()>:
   a3640:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a3644:	52800083 	mov	w3, #0x4                   	// #4
   a3648:	d2c00782 	mov	x2, #0x3c00000000          	// #257698037760
   a364c:	910003fd 	mov	x29, sp
   a3650:	a90153f3 	stp	x19, x20, [sp, #16]
   a3654:	aa0003f4 	mov	x20, x0
   a3658:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a365c:	911d6021 	add	x1, x1, #0x758
   a3660:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3664:	9101a3f6 	add	x22, sp, #0x68
   a3668:	a90363f7 	stp	x23, x24, [sp, #48]
   a366c:	91208018 	add	x24, x0, #0x820
   a3670:	aa1803e0 	mov	x0, x24
   a3674:	a9046bf9 	stp	x25, x26, [sp, #64]
   a3678:	9120e299 	add	x25, x20, #0x838
   a367c:	f9040e9f 	str	xzr, [x20, #2072]
   a3680:	b9083683 	str	w3, [x20, #2100]
   a3684:	b9083e9f 	str	wzr, [x20, #2108]
   a3688:	7910829f 	strh	wzr, [x20, #2112]
   a368c:	f9042e9f 	str	xzr, [x20, #2136]
   a3690:	b908769f 	str	wzr, [x20, #2164]
   a3694:	f9043e82 	str	x2, [x20, #2168]
   a3698:	b908829f 	str	wzr, [x20, #2176]
   a369c:	3922129f 	strb	wzr, [x20, #2180]
   a36a0:	f9044e9f 	str	xzr, [x20, #2200]
   a36a4:	94001dcb 	bl	aadd0 <strcpy>
   a36a8:	aa1903e0 	mov	x0, x25
   a36ac:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a36b0:	9104c021 	add	x1, x1, #0x130
   a36b4:	94001dc7 	bl	aadd0 <strcpy>
   a36b8:	f0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a36bc:	39210a9f 	strb	wzr, [x20, #2114]
   a36c0:	3921829f 	strb	wzr, [x20, #2144]
   a36c4:	52800001 	mov	w1, #0x0                   	// #0
   a36c8:	f9064414 	str	x20, [x0, #3208]
   a36cc:	aa1603e0 	mov	x0, x22
   a36d0:	97fffa34 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a36d4:	52800021 	mov	w1, #0x1                   	// #1
   a36d8:	72a000a1 	movk	w1, #0x5, lsl #16
   a36dc:	aa1403e2 	mov	x2, x20
   a36e0:	aa1603e0 	mov	x0, x22
   a36e4:	52800004 	mov	w4, #0x0                   	// #0
   a36e8:	52810183 	mov	w3, #0x80c                 	// #2060
   a36ec:	97fffa8d 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a36f0:	36000540 	tbz	w0, #0, a3798 <CKernelOptions::CKernelOptions()+0x158>
   a36f4:	b9400a80 	ldr	w0, [x20, #8]
   a36f8:	711ffc1f 	cmp	w0, #0x7ff
   a36fc:	540004e8 	b.hi	a3798 <CKernelOptions::CKernelOptions()+0x158>  // b.pmore
   a3700:	8b204280 	add	x0, x20, w0, uxtw
   a3704:	a90573fb 	stp	x27, x28, [sp, #80]
   a3708:	f0000095 	adrp	x21, b6000 <_etext+0x39c8>
   a370c:	911d82b5 	add	x21, x21, #0x760
   a3710:	f0000097 	adrp	x23, b6000 <_etext+0x39c8>
   a3714:	911da2f7 	add	x23, x23, #0x768
   a3718:	9121629a 	add	x26, x20, #0x858
   a371c:	3900301f 	strb	wzr, [x0, #12]
   a3720:	91003281 	add	x1, x20, #0xc
   a3724:	f9040a81 	str	x1, [x20, #2064]
   a3728:	aa1403e0 	mov	x0, x20
   a372c:	97ffff29 	bl	a33d0 <CKernelOptions::GetToken()>
   a3730:	aa0003fb 	mov	x27, x0
   a3734:	b4000300 	cbz	x0, a3794 <CKernelOptions::CKernelOptions()+0x154>
   a3738:	39c00001 	ldrsb	w1, [x0]
   a373c:	aa0003e2 	mov	x2, x0
   a3740:	35000081 	cbnz	w1, a3750 <CKernelOptions::CKernelOptions()+0x110>
   a3744:	1400001d 	b	a37b8 <CKernelOptions::CKernelOptions()+0x178>
   a3748:	38c01c41 	ldrsb	w1, [x2, #1]!
   a374c:	34000361 	cbz	w1, a37b8 <CKernelOptions::CKernelOptions()+0x178>
   a3750:	7100f43f 	cmp	w1, #0x3d
   a3754:	54ffffa1 	b.ne	a3748 <CKernelOptions::CKernelOptions()+0x108>  // b.any
   a3758:	aa0203f3 	mov	x19, x2
   a375c:	aa1503e1 	mov	x1, x21
   a3760:	aa1b03e0 	mov	x0, x27
   a3764:	3800167f 	strb	wzr, [x19], #1
   a3768:	94001d16 	bl	aabc0 <strcmp>
   a376c:	35000300 	cbnz	w0, a37cc <CKernelOptions::CKernelOptions()+0x18c>
   a3770:	aa1303e0 	mov	x0, x19
   a3774:	97ffff3f 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a3778:	3100041f 	cmn	w0, #0x1
   a377c:	54fffd60 	b.eq	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.none
   a3780:	b9081a80 	str	w0, [x20, #2072]
   a3784:	aa1403e0 	mov	x0, x20
   a3788:	97ffff12 	bl	a33d0 <CKernelOptions::GetToken()>
   a378c:	aa0003fb 	mov	x27, x0
   a3790:	b5fffd40 	cbnz	x0, a3738 <CKernelOptions::CKernelOptions()+0xf8>
   a3794:	a94573fb 	ldp	x27, x28, [sp, #80]
   a3798:	aa1603e0 	mov	x0, x22
   a379c:	97fffa05 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a37a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a37a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a37a8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a37ac:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a37b0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a37b4:	d65f03c0 	ret
   a37b8:	aa1503e1 	mov	x1, x21
   a37bc:	aa1b03e0 	mov	x0, x27
   a37c0:	d2800013 	mov	x19, #0x0                   	// #0
   a37c4:	94001cff 	bl	aabc0 <strcmp>
   a37c8:	34fffd40 	cbz	w0, a3770 <CKernelOptions::CKernelOptions()+0x130>
   a37cc:	aa1703e1 	mov	x1, x23
   a37d0:	aa1b03e0 	mov	x0, x27
   a37d4:	94001cfb 	bl	aabc0 <strcmp>
   a37d8:	350000e0 	cbnz	w0, a37f4 <CKernelOptions::CKernelOptions()+0x1b4>
   a37dc:	aa1303e0 	mov	x0, x19
   a37e0:	97ffff24 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a37e4:	3100041f 	cmn	w0, #0x1
   a37e8:	54fffa00 	b.eq	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.none
   a37ec:	b9081e80 	str	w0, [x20, #2076]
   a37f0:	17ffffce 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a37f4:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a37f8:	911dc021 	add	x1, x1, #0x770
   a37fc:	aa1b03e0 	mov	x0, x27
   a3800:	94001cf0 	bl	aabc0 <strcmp>
   a3804:	34000180 	cbz	w0, a3834 <CKernelOptions::CKernelOptions()+0x1f4>
   a3808:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a380c:	911de021 	add	x1, x1, #0x778
   a3810:	aa1b03e0 	mov	x0, x27
   a3814:	94001ceb 	bl	aabc0 <strcmp>
   a3818:	350001a0 	cbnz	w0, a384c <CKernelOptions::CKernelOptions()+0x20c>
   a381c:	aa1303e0 	mov	x0, x19
   a3820:	97ffff14 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a3824:	7100101f 	cmp	w0, #0x4
   a3828:	54fff808 	b.hi	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.pmore
   a382c:	b9083680 	str	w0, [x20, #2100]
   a3830:	17ffffbe 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3834:	aa1303e1 	mov	x1, x19
   a3838:	aa1803e0 	mov	x0, x24
   a383c:	d2800262 	mov	x2, #0x13                  	// #19
   a3840:	94001d70 	bl	aae00 <strncpy>
   a3844:	3920ce9f 	strb	wzr, [x20, #2099]
   a3848:	17ffffb8 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a384c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3850:	911e2021 	add	x1, x1, #0x788
   a3854:	aa1b03e0 	mov	x0, x27
   a3858:	94001cda 	bl	aabc0 <strcmp>
   a385c:	340001c0 	cbz	w0, a3894 <CKernelOptions::CKernelOptions()+0x254>
   a3860:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3864:	911e4021 	add	x1, x1, #0x790
   a3868:	aa1b03e0 	mov	x0, x27
   a386c:	94001cd5 	bl	aabc0 <strcmp>
   a3870:	350001e0 	cbnz	w0, a38ac <CKernelOptions::CKernelOptions()+0x26c>
   a3874:	aa1303e0 	mov	x0, x19
   a3878:	97fffefe 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a387c:	51032002 	sub	w2, w0, #0xc8
   a3880:	5283cf01 	mov	w1, #0x1e78                	// #7800
   a3884:	6b01005f 	cmp	w2, w1
   a3888:	54fff508 	b.hi	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.pmore
   a388c:	b9083e80 	str	w0, [x20, #2108]
   a3890:	17ffffa6 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3894:	aa1303e1 	mov	x1, x19
   a3898:	aa1903e0 	mov	x0, x25
   a389c:	d2800042 	mov	x2, #0x2                   	// #2
   a38a0:	94001d58 	bl	aae00 <strncpy>
   a38a4:	3920ea9f 	strb	wzr, [x20, #2106]
   a38a8:	17ffffa0 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a38ac:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a38b0:	911e8021 	add	x1, x1, #0x7a0
   a38b4:	aa1b03e0 	mov	x0, x27
   a38b8:	94001cc2 	bl	aabc0 <strcmp>
   a38bc:	35000120 	cbnz	w0, a38e0 <CKernelOptions::CKernelOptions()+0x2a0>
   a38c0:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a38c4:	911ec021 	add	x1, x1, #0x7b0
   a38c8:	aa1303e0 	mov	x0, x19
   a38cc:	94001cbd 	bl	aabc0 <strcmp>
   a38d0:	35fff2c0 	cbnz	w0, a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a38d4:	52800020 	mov	w0, #0x1                   	// #1
   a38d8:	39210280 	strb	w0, [x20, #2112]
   a38dc:	17ffff93 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a38e0:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a38e4:	911ee021 	add	x1, x1, #0x7b8
   a38e8:	aa1b03e0 	mov	x0, x27
   a38ec:	94001cb5 	bl	aabc0 <strcmp>
   a38f0:	35000120 	cbnz	w0, a3914 <CKernelOptions::CKernelOptions()+0x2d4>
   a38f4:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a38f8:	911f2021 	add	x1, x1, #0x7c8
   a38fc:	aa1303e0 	mov	x0, x19
   a3900:	94001cb0 	bl	aabc0 <strcmp>
   a3904:	35fff120 	cbnz	w0, a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3908:	52800020 	mov	w0, #0x1                   	// #1
   a390c:	39210680 	strb	w0, [x20, #2113]
   a3910:	17ffff86 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3914:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3918:	911f4021 	add	x1, x1, #0x7d0
   a391c:	aa1b03e0 	mov	x0, x27
   a3920:	94001ca8 	bl	aabc0 <strcmp>
   a3924:	350000e0 	cbnz	w0, a3940 <CKernelOptions::CKernelOptions()+0x300>
   a3928:	aa1303e1 	mov	x1, x19
   a392c:	91210a80 	add	x0, x20, #0x842
   a3930:	d2800262 	mov	x2, #0x13                  	// #19
   a3934:	94001d33 	bl	aae00 <strncpy>
   a3938:	3921569f 	strb	wzr, [x20, #2133]
   a393c:	17ffff7b 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3940:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3944:	911f8021 	add	x1, x1, #0x7e0
   a3948:	aa1b03e0 	mov	x0, x27
   a394c:	94001c9d 	bl	aabc0 <strcmp>
   a3950:	35000100 	cbnz	w0, a3970 <CKernelOptions::CKernelOptions()+0x330>
   a3954:	aa1303e0 	mov	x0, x19
   a3958:	aa1a03e1 	mov	x1, x26
   a395c:	52800042 	mov	w2, #0x2                   	// #2
   a3960:	97fffefc 	bl	a3550 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   a3964:	3707ee20 	tbnz	w0, #0, a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3968:	f9042e9f 	str	xzr, [x20, #2136]
   a396c:	17ffff6f 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3970:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3974:	911fe021 	add	x1, x1, #0x7f8
   a3978:	aa1b03e0 	mov	x0, x27
   a397c:	94001c91 	bl	aabc0 <strcmp>
   a3980:	350000e0 	cbnz	w0, a399c <CKernelOptions::CKernelOptions()+0x35c>
   a3984:	aa1303e1 	mov	x1, x19
   a3988:	91218280 	add	x0, x20, #0x860
   a398c:	d2800262 	mov	x2, #0x13                  	// #19
   a3990:	94001d1c 	bl	aae00 <strncpy>
   a3994:	3921ce9f 	strb	wzr, [x20, #2163]
   a3998:	17ffff64 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a399c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a39a0:	91202021 	add	x1, x1, #0x808
   a39a4:	aa1b03e0 	mov	x0, x27
   a39a8:	94001c86 	bl	aabc0 <strcmp>
   a39ac:	35000160 	cbnz	w0, a39d8 <CKernelOptions::CKernelOptions()+0x398>
   a39b0:	aa1303e0 	mov	x0, x19
   a39b4:	97fffeaf 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a39b8:	7100601f 	cmp	w0, #0x18
   a39bc:	54ffeb68 	b.hi	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.pmore
   a39c0:	d28000e1 	mov	x1, #0x7                   	// #7
   a39c4:	f2a02021 	movk	x1, #0x101, lsl #16
   a39c8:	9ac02421 	lsr	x1, x1, x0
   a39cc:	3607eae1 	tbz	w1, #0, a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a39d0:	b9087680 	str	w0, [x20, #2164]
   a39d4:	17ffff55 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a39d8:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a39dc:	91206021 	add	x1, x1, #0x818
   a39e0:	aa1b03e0 	mov	x0, x27
   a39e4:	94001c77 	bl	aabc0 <strcmp>
   a39e8:	35000120 	cbnz	w0, a3a0c <CKernelOptions::CKernelOptions()+0x3cc>
   a39ec:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a39f0:	911f2021 	add	x1, x1, #0x7c8
   a39f4:	aa1303e0 	mov	x0, x19
   a39f8:	94001c72 	bl	aabc0 <strcmp>
   a39fc:	35ffe960 	cbnz	w0, a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3a00:	52800020 	mov	w0, #0x1                   	// #1
   a3a04:	b9087a80 	str	w0, [x20, #2168]
   a3a08:	17ffff48 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3a0c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3a10:	91208021 	add	x1, x1, #0x820
   a3a14:	aa1b03e0 	mov	x0, x27
   a3a18:	94001c6a 	bl	aabc0 <strcmp>
   a3a1c:	35000100 	cbnz	w0, a3a3c <CKernelOptions::CKernelOptions()+0x3fc>
   a3a20:	aa1303e0 	mov	x0, x19
   a3a24:	97fffe93 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a3a28:	5100a001 	sub	w1, w0, #0x28
   a3a2c:	7100983f 	cmp	w1, #0x26
   a3a30:	54ffe7c8 	b.hi	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.pmore
   a3a34:	b9087e80 	str	w0, [x20, #2172]
   a3a38:	17ffff3c 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3a3c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3a40:	9120c021 	add	x1, x1, #0x830
   a3a44:	aa1b03e0 	mov	x0, x27
   a3a48:	94001c5e 	bl	aabc0 <strcmp>
   a3a4c:	35000100 	cbnz	w0, a3a6c <CKernelOptions::CKernelOptions()+0x42c>
   a3a50:	aa1303e0 	mov	x0, x19
   a3a54:	97fffe87 	bl	a3470 <CKernelOptions::GetDecimal(char const*)>
   a3a58:	51000801 	sub	w1, w0, #0x2
   a3a5c:	7100cc3f 	cmp	w1, #0x33
   a3a60:	54ffe648 	b.hi	a3728 <CKernelOptions::CKernelOptions()+0xe8>  // b.pmore
   a3a64:	b9088280 	str	w0, [x20, #2176]
   a3a68:	17ffff30 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3a6c:	f0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a3a70:	91210021 	add	x1, x1, #0x840
   a3a74:	aa1b03e0 	mov	x0, x27
   a3a78:	94001c52 	bl	aabc0 <strcmp>
   a3a7c:	350000e0 	cbnz	w0, a3a98 <CKernelOptions::CKernelOptions()+0x458>
   a3a80:	aa1303e0 	mov	x0, x19
   a3a84:	91222281 	add	x1, x20, #0x888
   a3a88:	52800082 	mov	w2, #0x4                   	// #4
   a3a8c:	97fffeb1 	bl	a3550 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   a3a90:	39221280 	strb	w0, [x20, #2180]
   a3a94:	17ffff25 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3a98:	d2800300 	mov	x0, #0x18                  	// #24
   a3a9c:	94002025 	bl	abb30 <operator new(unsigned long)>
   a3aa0:	aa0003fc 	mov	x28, x0
   a3aa4:	aa1b03e0 	mov	x0, x27
   a3aa8:	94001c3a 	bl	aab90 <strlen>
   a3aac:	91000400 	add	x0, x0, #0x1
   a3ab0:	94002028 	bl	abb50 <operator new[](unsigned long)>
   a3ab4:	aa1b03e1 	mov	x1, x27
   a3ab8:	f9000780 	str	x0, [x28, #8]
   a3abc:	94001cc5 	bl	aadd0 <strcpy>
   a3ac0:	aa1303e0 	mov	x0, x19
   a3ac4:	94001c33 	bl	aab90 <strlen>
   a3ac8:	91000400 	add	x0, x0, #0x1
   a3acc:	94002021 	bl	abb50 <operator new[](unsigned long)>
   a3ad0:	f9000b80 	str	x0, [x28, #16]
   a3ad4:	aa1303e1 	mov	x1, x19
   a3ad8:	94001cbe 	bl	aadd0 <strcpy>
   a3adc:	f9444e80 	ldr	x0, [x20, #2200]
   a3ae0:	f9000380 	str	x0, [x28]
   a3ae4:	f9044e9c 	str	x28, [x20, #2200]
   a3ae8:	17ffff10 	b	a3728 <CKernelOptions::CKernelOptions()+0xe8>
   a3aec:	00000000 	udf	#0

00000000000a3af0 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   a3af0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3af4:	52800024 	mov	w4, #0x1                   	// #1
   a3af8:	910003fd 	mov	x29, sp
   a3afc:	f9000bf3 	str	x19, [sp, #16]
   a3b00:	aa0003f3 	mov	x19, x0
   a3b04:	d2880000 	mov	x0, #0x4000                	// #16384
   a3b08:	b9000261 	str	w1, [x19]
   a3b0c:	f9000662 	str	x2, [x19, #8]
   a3b10:	39004263 	strb	w3, [x19, #16]
   a3b14:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   a3b18:	f900167f 	str	xzr, [x19, #40]
   a3b1c:	b9003264 	str	w4, [x19, #48]
   a3b20:	f900e67f 	str	xzr, [x19, #456]
   a3b24:	b901d264 	str	w4, [x19, #464]
   a3b28:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   a3b2c:	94002009 	bl	abb50 <operator new[](unsigned long)>
   a3b30:	f9001260 	str	x0, [x19, #32]
   a3b34:	f0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a3b38:	f9064833 	str	x19, [x1, #3216]
   a3b3c:	f9400bf3 	ldr	x19, [sp, #16]
   a3b40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3b44:	d65f03c0 	ret
   a3b48:	d503201f 	nop
   a3b4c:	d503201f 	nop

00000000000a3b50 <CLogger::~CLogger()>:
   a3b50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3b54:	f0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a3b58:	910003fd 	mov	x29, sp
   a3b5c:	f906483f 	str	xzr, [x1, #3216]
   a3b60:	b941c803 	ldr	w3, [x0, #456]
   a3b64:	b941cc02 	ldr	w2, [x0, #460]
   a3b68:	f9000bf3 	str	x19, [sp, #16]
   a3b6c:	aa0003f3 	mov	x19, x0
   a3b70:	1400000a 	b	a3b98 <CLogger::~CLogger()+0x48>
   a3b74:	f9401c00 	ldr	x0, [x0, #56]
   a3b78:	b4000080 	cbz	x0, a3b88 <CLogger::~CLogger()+0x38>
   a3b7c:	9400200d 	bl	abbb0 <operator delete(void*, unsigned long)>
   a3b80:	b941ca63 	ldr	w3, [x19, #456]
   a3b84:	b941ce62 	ldr	w2, [x19, #460]
   a3b88:	11000442 	add	w2, w2, #0x1
   a3b8c:	b901ce62 	str	w2, [x19, #460]
   a3b90:	7100c85f 	cmp	w2, #0x32
   a3b94:	54000140 	b.eq	a3bbc <CLogger::~CLogger()+0x6c>  // b.none
   a3b98:	8b224e60 	add	x0, x19, w2, uxtw #3
   a3b9c:	6b03005f 	cmp	w2, w3
   a3ba0:	d2802201 	mov	x1, #0x110                 	// #272
   a3ba4:	54fffe81 	b.ne	a3b74 <CLogger::~CLogger()+0x24>  // b.any
   a3ba8:	f9401260 	ldr	x0, [x19, #32]
   a3bac:	b40000e0 	cbz	x0, a3bc8 <CLogger::~CLogger()+0x78>
   a3bb0:	f9400bf3 	ldr	x19, [sp, #16]
   a3bb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3bb8:	14001ff6 	b	abb90 <operator delete[](void*)>
   a3bbc:	52800002 	mov	w2, #0x0                   	// #0
   a3bc0:	b901ce7f 	str	wzr, [x19, #460]
   a3bc4:	17fffff5 	b	a3b98 <CLogger::~CLogger()+0x48>
   a3bc8:	f9400bf3 	ldr	x19, [sp, #16]
   a3bcc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3bd0:	d65f03c0 	ret
   a3bd4:	d503201f 	nop
   a3bd8:	d503201f 	nop
   a3bdc:	d503201f 	nop

00000000000a3be0 <CLogger::SetNewTarget(CDevice*)>:
   a3be0:	f9000c01 	str	x1, [x0, #24]
   a3be4:	d65f03c0 	ret
   a3be8:	d503201f 	nop
   a3bec:	d503201f 	nop

00000000000a3bf0 <CLogger::Get()>:
   a3bf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3bf4:	910003fd 	mov	x29, sp
   a3bf8:	a90153f3 	stp	x19, x20, [sp, #16]
   a3bfc:	f0000134 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   a3c00:	f9464a93 	ldr	x19, [x20, #3216]
   a3c04:	b40000b3 	cbz	x19, a3c18 <CLogger::Get()+0x28>
   a3c08:	aa1303e0 	mov	x0, x19
   a3c0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3c14:	d65f03c0 	ret
   a3c18:	d2803d00 	mov	x0, #0x1e8                 	// #488
   a3c1c:	94001fc5 	bl	abb30 <operator new(unsigned long)>
   a3c20:	aa0003f3 	mov	x19, x0
   a3c24:	52800021 	mov	w1, #0x1                   	// #1
   a3c28:	52800022 	mov	w2, #0x1                   	// #1
   a3c2c:	d2880000 	mov	x0, #0x4000                	// #16384
   a3c30:	b900027f 	str	wzr, [x19]
   a3c34:	f900067f 	str	xzr, [x19, #8]
   a3c38:	39004262 	strb	w2, [x19, #16]
   a3c3c:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   a3c40:	f900167f 	str	xzr, [x19, #40]
   a3c44:	b9003261 	str	w1, [x19, #48]
   a3c48:	f900e67f 	str	xzr, [x19, #456]
   a3c4c:	b901d261 	str	w1, [x19, #464]
   a3c50:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   a3c54:	94001fbf 	bl	abb50 <operator new[](unsigned long)>
   a3c58:	f9001260 	str	x0, [x19, #32]
   a3c5c:	f9064a93 	str	x19, [x20, #3216]
   a3c60:	aa1303e0 	mov	x0, x19
   a3c64:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3c6c:	d65f03c0 	ret

00000000000a3c70 <CLogger::Write(char const*)>:
   a3c70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3c74:	910003fd 	mov	x29, sp
   a3c78:	a90153f3 	stp	x19, x20, [sp, #16]
   a3c7c:	aa0003f3 	mov	x19, x0
   a3c80:	aa0103f4 	mov	x20, x1
   a3c84:	aa0103e0 	mov	x0, x1
   a3c88:	f90013f5 	str	x21, [sp, #32]
   a3c8c:	94001bc1 	bl	aab90 <strlen>
   a3c90:	aa0003f5 	mov	x21, x0
   a3c94:	f9400e60 	ldr	x0, [x19, #24]
   a3c98:	b40000c0 	cbz	x0, a3cb0 <CLogger::Write(char const*)+0x40>
   a3c9c:	f9400003 	ldr	x3, [x0]
   a3ca0:	aa1503e2 	mov	x2, x21
   a3ca4:	aa1403e1 	mov	x1, x20
   a3ca8:	f9400c63 	ldr	x3, [x3, #24]
   a3cac:	d63f0060 	blr	x3
   a3cb0:	b9403260 	ldr	w0, [x19, #48]
   a3cb4:	350004a0 	cbnz	w0, a3d48 <CLogger::Write(char const*)+0xd8>
   a3cb8:	b4000395 	cbz	x21, a3d28 <CLogger::Write(char const*)+0xb8>
   a3cbc:	aa1403e4 	mov	x4, x20
   a3cc0:	14000004 	b	a3cd0 <CLogger::Write(char const*)+0x60>
   a3cc4:	cb040283 	sub	x3, x20, x4
   a3cc8:	ab15007f 	cmn	x3, x21
   a3ccc:	540002a0 	b.eq	a3d20 <CLogger::Write(char const*)+0xb0>  // b.none
   a3cd0:	38c01483 	ldrsb	w3, [x4], #1
   a3cd4:	7100347f 	cmp	w3, #0xd
   a3cd8:	54ffff60 	b.eq	a3cc4 <CLogger::Write(char const*)+0x54>  // b.none
   a3cdc:	f9401266 	ldr	x6, [x19, #32]
   a3ce0:	b9402a65 	ldr	w5, [x19, #40]
   a3ce4:	382568c3 	strb	w3, [x6, x5]
   a3ce8:	29451663 	ldp	w3, w5, [x19, #40]
   a3cec:	11000463 	add	w3, w3, #0x1
   a3cf0:	12003463 	and	w3, w3, #0x3fff
   a3cf4:	b9002a63 	str	w3, [x19, #40]
   a3cf8:	6b05007f 	cmp	w3, w5
   a3cfc:	54fffe41 	b.ne	a3cc4 <CLogger::Write(char const*)+0x54>  // b.any
   a3d00:	39404261 	ldrb	w1, [x19, #16]
   a3d04:	11000460 	add	w0, w3, #0x1
   a3d08:	12003400 	and	w0, w0, #0x3fff
   a3d0c:	36000241 	tbz	w1, #0, a3d54 <CLogger::Write(char const*)+0xe4>
   a3d10:	b9002e60 	str	w0, [x19, #44]
   a3d14:	cb040283 	sub	x3, x20, x4
   a3d18:	ab15007f 	cmn	x3, x21
   a3d1c:	54fffda1 	b.ne	a3cd0 <CLogger::Write(char const*)+0x60>  // b.any
   a3d20:	b9403260 	ldr	w0, [x19, #48]
   a3d24:	350000a0 	cbnz	w0, a3d38 <CLogger::Write(char const*)+0xc8>
   a3d28:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3d2c:	f94013f5 	ldr	x21, [sp, #32]
   a3d30:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3d34:	d65f03c0 	ret
   a3d38:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3d3c:	f94013f5 	ldr	x21, [sp, #32]
   a3d40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3d44:	140024ff 	b	ad140 <LeaveCritical>
   a3d48:	940024ce 	bl	ad080 <EnterCritical>
   a3d4c:	b5fffb95 	cbnz	x21, a3cbc <CLogger::Write(char const*)+0x4c>
   a3d50:	17fffff4 	b	a3d20 <CLogger::Write(char const*)+0xb0>
   a3d54:	b9403260 	ldr	w0, [x19, #48]
   a3d58:	51000461 	sub	w1, w3, #0x1
   a3d5c:	12003421 	and	w1, w1, #0x3fff
   a3d60:	b9002a61 	str	w1, [x19, #40]
   a3d64:	34fffe20 	cbz	w0, a3d28 <CLogger::Write(char const*)+0xb8>
   a3d68:	17fffff4 	b	a3d38 <CLogger::Write(char const*)+0xc8>
   a3d6c:	d503201f 	nop

00000000000a3d70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   a3d70:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
   a3d74:	910003fd 	mov	x29, sp
   a3d78:	a90153f3 	stp	x19, x20, [sp, #16]
   a3d7c:	aa0003f3 	mov	x19, x0
   a3d80:	b9400000 	ldr	w0, [x0]
   a3d84:	6b02001f 	cmp	w0, w2
   a3d88:	540002e3 	b.cc	a3de4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x74>  // b.lo, b.ul, b.last
   a3d8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3d90:	aa0303f5 	mov	x21, x3
   a3d94:	390123ff 	strb	wzr, [sp, #72]
   a3d98:	340002c2 	cbz	w2, a3df0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x80>
   a3d9c:	910123f4 	add	x20, sp, #0x48
   a3da0:	f00000b6 	adrp	x22, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a3da4:	912d82d6 	add	x22, x22, #0xb60
   a3da8:	aa1403e0 	mov	x0, x20
   a3dac:	94001c21 	bl	aae30 <strcat>
   a3db0:	910022c1 	add	x1, x22, #0x8
   a3db4:	aa1403e0 	mov	x0, x20
   a3db8:	94001c1e 	bl	aae30 <strcat>
   a3dbc:	aa1503e1 	mov	x1, x21
   a3dc0:	aa1403e0 	mov	x0, x20
   a3dc4:	94001c1b 	bl	aae30 <strcat>
   a3dc8:	910062c1 	add	x1, x22, #0x18
   a3dcc:	aa1403e0 	mov	x0, x20
   a3dd0:	94001c18 	bl	aae30 <strcat>
   a3dd4:	aa1403e1 	mov	x1, x20
   a3dd8:	aa1303e0 	mov	x0, x19
   a3ddc:	97ffffa5 	bl	a3c70 <CLogger::Write(char const*)>
   a3de0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3de4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3de8:	a8d17bfd 	ldp	x29, x30, [sp], #272
   a3dec:	d65f03c0 	ret
   a3df0:	910123f6 	add	x22, sp, #0x48
   a3df4:	f9001bf7 	str	x23, [sp, #48]
   a3df8:	f00000b7 	adrp	x23, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a3dfc:	912d82f7 	add	x23, x23, #0xb60
   a3e00:	aa0103f4 	mov	x20, x1
   a3e04:	aa1603e0 	mov	x0, x22
   a3e08:	aa1703e1 	mov	x1, x23
   a3e0c:	94001bf1 	bl	aadd0 <strcpy>
   a3e10:	aa1403e1 	mov	x1, x20
   a3e14:	aa1603e0 	mov	x0, x22
   a3e18:	94001c06 	bl	aae30 <strcat>
   a3e1c:	910022e1 	add	x1, x23, #0x8
   a3e20:	aa1603e0 	mov	x0, x22
   a3e24:	94001c03 	bl	aae30 <strcat>
   a3e28:	aa1503e1 	mov	x1, x21
   a3e2c:	aa1603e0 	mov	x0, x22
   a3e30:	94001c00 	bl	aae30 <strcat>
   a3e34:	910042e1 	add	x1, x23, #0x10
   a3e38:	aa1603e0 	mov	x0, x22
   a3e3c:	94001bfd 	bl	aae30 <strcat>
   a3e40:	910062e1 	add	x1, x23, #0x18
   a3e44:	aa1603e0 	mov	x0, x22
   a3e48:	94001bfa 	bl	aae30 <strcat>
   a3e4c:	aa1603e1 	mov	x1, x22
   a3e50:	aa1303e0 	mov	x0, x19
   a3e54:	97ffff87 	bl	a3c70 <CLogger::Write(char const*)>
   a3e58:	52801fe0 	mov	w0, #0xff                  	// #255
   a3e5c:	940016e1 	bl	a99e0 <set_qemu_exit_status>
   a3e60:	940016e4 	bl	a99f0 <halt>
   a3e64:	d503201f 	nop
   a3e68:	d503201f 	nop
   a3e6c:	d503201f 	nop

00000000000a3e70 <CLogger::Read(void*, unsigned int, bool)>:
   a3e70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3e74:	910003fd 	mov	x29, sp
   a3e78:	a90153f3 	stp	x19, x20, [sp, #16]
   a3e7c:	aa0003f4 	mov	x20, x0
   a3e80:	b9403000 	ldr	w0, [x0, #48]
   a3e84:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3e88:	2a0203f3 	mov	w19, w2
   a3e8c:	aa0103f5 	mov	x21, x1
   a3e90:	12001c76 	and	w22, w3, #0xff
   a3e94:	35000500 	cbnz	w0, a3f34 <CLogger::Read(void*, unsigned int, bool)+0xc4>
   a3e98:	29451280 	ldp	w0, w4, [x20, #40]
   a3e9c:	6b04001f 	cmp	w0, w4
   a3ea0:	54000580 	b.eq	a3f50 <CLogger::Read(void*, unsigned int, bool)+0xe0>  // b.none
   a3ea4:	2a1303e6 	mov	w6, w19
   a3ea8:	d2800002 	mov	x2, #0x0                   	// #0
   a3eac:	14000009 	b	a3ed0 <CLogger::Read(void*, unsigned int, bool)+0x60>
   a3eb0:	f9401285 	ldr	x5, [x20, #32]
   a3eb4:	38e448a5 	ldrsb	w5, [x5, w4, uxtw]
   a3eb8:	12003404 	and	w4, w0, #0x3fff
   a3ebc:	38226aa5 	strb	w5, [x21, x2]
   a3ec0:	91000442 	add	x2, x2, #0x1
   a3ec4:	b9402a80 	ldr	w0, [x20, #40]
   a3ec8:	6b04001f 	cmp	w0, w4
   a3ecc:	540002e0 	b.eq	a3f28 <CLogger::Read(void*, unsigned int, bool)+0xb8>  // b.none
   a3ed0:	11000480 	add	w0, w4, #0x1
   a3ed4:	eb06005f 	cmp	x2, x6
   a3ed8:	2a0203e1 	mov	w1, w2
   a3edc:	54fffea1 	b.ne	a3eb0 <CLogger::Read(void*, unsigned int, bool)+0x40>  // b.any
   a3ee0:	2a0203f3 	mov	w19, w2
   a3ee4:	37000116 	tbnz	w22, #0, a3f04 <CLogger::Read(void*, unsigned int, bool)+0x94>
   a3ee8:	b9403280 	ldr	w0, [x20, #48]
   a3eec:	35000120 	cbnz	w0, a3f10 <CLogger::Read(void*, unsigned int, bool)+0xa0>
   a3ef0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3ef4:	2a1303e0 	mov	w0, w19
   a3ef8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3efc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3f00:	d65f03c0 	ret
   a3f04:	b9403280 	ldr	w0, [x20, #48]
   a3f08:	b9002e84 	str	w4, [x20, #44]
   a3f0c:	34ffff20 	cbz	w0, a3ef0 <CLogger::Read(void*, unsigned int, bool)+0x80>
   a3f10:	9400248c 	bl	ad140 <LeaveCritical>
   a3f14:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3f18:	2a1303e0 	mov	w0, w19
   a3f1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3f20:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3f24:	d65f03c0 	ret
   a3f28:	11000433 	add	w19, w1, #0x1
   a3f2c:	3607fdf6 	tbz	w22, #0, a3ee8 <CLogger::Read(void*, unsigned int, bool)+0x78>
   a3f30:	17fffff5 	b	a3f04 <CLogger::Read(void*, unsigned int, bool)+0x94>
   a3f34:	94002453 	bl	ad080 <EnterCritical>
   a3f38:	29451280 	ldp	w0, w4, [x20, #40]
   a3f3c:	6b04001f 	cmp	w0, w4
   a3f40:	54fffb21 	b.ne	a3ea4 <CLogger::Read(void*, unsigned int, bool)+0x34>  // b.any
   a3f44:	b9403280 	ldr	w0, [x20, #48]
   a3f48:	34000040 	cbz	w0, a3f50 <CLogger::Read(void*, unsigned int, bool)+0xe0>
   a3f4c:	9400247d 	bl	ad140 <LeaveCritical>
   a3f50:	12800013 	mov	w19, #0xffffffff            	// #-1
   a3f54:	17ffffe7 	b	a3ef0 <CLogger::Read(void*, unsigned int, bool)+0x80>
   a3f58:	d503201f 	nop
   a3f5c:	d503201f 	nop

00000000000a3f60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   a3f60:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a3f64:	910003fd 	mov	x29, sp
   a3f68:	a90153f3 	stp	x19, x20, [sp, #16]
   a3f6c:	aa0103f4 	mov	x20, x1
   a3f70:	aa0003f3 	mov	x19, x0
   a3f74:	d2802200 	mov	x0, #0x110                 	// #272
   a3f78:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3f7c:	aa0303f5 	mov	x21, x3
   a3f80:	2a0203f6 	mov	w22, w2
   a3f84:	94001eeb 	bl	abb30 <operator new(unsigned long)>
   a3f88:	aa1403e1 	mov	x1, x20
   a3f8c:	aa0003f4 	mov	x20, x0
   a3f90:	b8004416 	str	w22, [x0], #4
   a3f94:	d2800642 	mov	x2, #0x32                  	// #50
   a3f98:	94001b9a 	bl	aae00 <strncpy>
   a3f9c:	3900d69f 	strb	wzr, [x20, #53]
   a3fa0:	aa1503e1 	mov	x1, x21
   a3fa4:	9100da80 	add	x0, x20, #0x36
   a3fa8:	d2801902 	mov	x2, #0xc8                  	// #200
   a3fac:	94001b95 	bl	aae00 <strncpy>
   a3fb0:	f9400660 	ldr	x0, [x19, #8]
   a3fb4:	3903f69f 	strb	wzr, [x20, #253]
   a3fb8:	b40000a0 	cbz	x0, a3fcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x6c>
   a3fbc:	910133e2 	add	x2, sp, #0x4c
   a3fc0:	910123e1 	add	x1, sp, #0x48
   a3fc4:	940017a7 	bl	a9e60 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   a3fc8:	37000680 	tbnz	w0, #0, a4098 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   a3fcc:	52800000 	mov	w0, #0x0                   	// #0
   a3fd0:	f900829f 	str	xzr, [x20, #256]
   a3fd4:	b9010a9f 	str	wzr, [x20, #264]
   a3fd8:	b941d262 	ldr	w2, [x19, #464]
   a3fdc:	b9010e80 	str	w0, [x20, #268]
   a3fe0:	35000542 	cbnz	w2, a4088 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x128>
   a3fe4:	b941ca61 	ldr	w1, [x19, #456]
   a3fe8:	b941ce63 	ldr	w3, [x19, #460]
   a3fec:	7100c43f 	cmp	w1, #0x31
   a3ff0:	11000420 	add	w0, w1, #0x1
   a3ff4:	8b214e64 	add	x4, x19, w1, uxtw #3
   a3ff8:	f9001c94 	str	x20, [x4, #56]
   a3ffc:	54000320 	b.eq	a4060 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x100>  // b.none
   a4000:	b901ca60 	str	w0, [x19, #456]
   a4004:	6b03001f 	cmp	w0, w3
   a4008:	54000120 	b.eq	a402c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>  // b.none
   a400c:	35000262 	cbnz	w2, a4058 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   a4010:	f940ee60 	ldr	x0, [x19, #472]
   a4014:	b4000040 	cbz	x0, a401c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   a4018:	d63f0000 	blr	x0
   a401c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4020:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4024:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4028:	d65f03c0 	ret
   a402c:	8b204e60 	add	x0, x19, w0, uxtw #3
   a4030:	7100c03f 	cmp	w1, #0x30
   a4034:	11000821 	add	w1, w1, #0x2
   a4038:	1a9f1021 	csel	w1, w1, wzr, ne	// ne = any
   a403c:	f9401c00 	ldr	x0, [x0, #56]
   a4040:	b901ce61 	str	w1, [x19, #460]
   a4044:	350001a2 	cbnz	w2, a4078 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   a4048:	b4fffe40 	cbz	x0, a4010 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   a404c:	d2802201 	mov	x1, #0x110                 	// #272
   a4050:	94001ed8 	bl	abbb0 <operator delete(void*, unsigned long)>
   a4054:	17ffffef 	b	a4010 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   a4058:	9400243a 	bl	ad140 <LeaveCritical>
   a405c:	17ffffed 	b	a4010 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   a4060:	b901ca7f 	str	wzr, [x19, #456]
   a4064:	35fffd43 	cbnz	w3, a400c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xac>
   a4068:	52800021 	mov	w1, #0x1                   	// #1
   a406c:	b901ce61 	str	w1, [x19, #460]
   a4070:	f9401e60 	ldr	x0, [x19, #56]
   a4074:	34fffea2 	cbz	w2, a4048 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe8>
   a4078:	f9001fe0 	str	x0, [sp, #56]
   a407c:	94002431 	bl	ad140 <LeaveCritical>
   a4080:	f9401fe0 	ldr	x0, [sp, #56]
   a4084:	17fffff1 	b	a4048 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe8>
   a4088:	2a0203e0 	mov	w0, w2
   a408c:	940023fd 	bl	ad080 <EnterCritical>
   a4090:	b941d262 	ldr	w2, [x19, #464]
   a4094:	17ffffd4 	b	a3fe4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x84>
   a4098:	294907e2 	ldp	w2, w1, [sp, #72]
   a409c:	5282eb23 	mov	w3, #0x1759                	// #5977
   a40a0:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   a40a4:	f9008282 	str	x2, [x20, #256]
   a40a8:	f9400660 	ldr	x0, [x19, #8]
   a40ac:	9ba37c21 	umull	x1, w1, w3
   a40b0:	d36dfc21 	lsr	x1, x1, #45
   a40b4:	b9010a81 	str	w1, [x20, #264]
   a40b8:	94001722 	bl	a9d40 <CTimer::GetTimeZone() const>
   a40bc:	17ffffc7 	b	a3fd8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x78>

00000000000a40c0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   a40c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a40c4:	910003fd 	mov	x29, sp
   a40c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a40cc:	aa0003f3 	mov	x19, x0
   a40d0:	b941d000 	ldr	w0, [x0, #464]
   a40d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a40d8:	aa0103f5 	mov	x21, x1
   a40dc:	aa0203f6 	mov	x22, x2
   a40e0:	a90363f7 	stp	x23, x24, [sp, #48]
   a40e4:	aa0303f7 	mov	x23, x3
   a40e8:	aa0403f8 	mov	x24, x4
   a40ec:	a9046bf9 	stp	x25, x26, [sp, #64]
   a40f0:	aa0503f9 	mov	x25, x5
   a40f4:	aa0603fa 	mov	x26, x6
   a40f8:	35000440 	cbnz	w0, a4180 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc0>
   a40fc:	b941ca60 	ldr	w0, [x19, #456]
   a4100:	b941ce67 	ldr	w7, [x19, #460]
   a4104:	6b07001f 	cmp	w0, w7
   a4108:	540005e0 	b.eq	a41c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>  // b.none
   a410c:	8b274e60 	add	x0, x19, w7, uxtw #3
   a4110:	7100c4ff 	cmp	w7, #0x31
   a4114:	1a8707e7 	csinc	w7, wzr, w7, eq	// eq = none
   a4118:	f9401c14 	ldr	x20, [x0, #56]
   a411c:	b901ce67 	str	w7, [x19, #460]
   a4120:	aa1403e1 	mov	x1, x20
   a4124:	aa1603e0 	mov	x0, x22
   a4128:	b8404422 	ldr	w2, [x1], #4
   a412c:	b90002a2 	str	w2, [x21]
   a4130:	94001b28 	bl	aadd0 <strcpy>
   a4134:	9100da81 	add	x1, x20, #0x36
   a4138:	aa1703e0 	mov	x0, x23
   a413c:	94001b25 	bl	aadd0 <strcpy>
   a4140:	f9408280 	ldr	x0, [x20, #256]
   a4144:	b9410a81 	ldr	w1, [x20, #264]
   a4148:	f9000300 	str	x0, [x24]
   a414c:	aa1403e0 	mov	x0, x20
   a4150:	b9000321 	str	w1, [x25]
   a4154:	d2802201 	mov	x1, #0x110                 	// #272
   a4158:	b9410e82 	ldr	w2, [x20, #268]
   a415c:	b9000342 	str	w2, [x26]
   a4160:	94001e94 	bl	abbb0 <operator delete(void*, unsigned long)>
   a4164:	52800020 	mov	w0, #0x1                   	// #1
   a4168:	a94153f3 	ldp	x19, x20, [sp, #16]
   a416c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4170:	a94363f7 	ldp	x23, x24, [sp, #48]
   a4174:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a4178:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a417c:	d65f03c0 	ret
   a4180:	940023c0 	bl	ad080 <EnterCritical>
   a4184:	b941ca61 	ldr	w1, [x19, #456]
   a4188:	b941ce60 	ldr	w0, [x19, #460]
   a418c:	6b00003f 	cmp	w1, w0
   a4190:	54000140 	b.eq	a41b8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>  // b.none
   a4194:	8b204e62 	add	x2, x19, w0, uxtw #3
   a4198:	b941d261 	ldr	w1, [x19, #464]
   a419c:	7100c41f 	cmp	w0, #0x31
   a41a0:	1a8007e0 	csinc	w0, wzr, w0, eq	// eq = none
   a41a4:	f9401c54 	ldr	x20, [x2, #56]
   a41a8:	b901ce60 	str	w0, [x19, #460]
   a41ac:	34fffba1 	cbz	w1, a4120 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   a41b0:	940023e4 	bl	ad140 <LeaveCritical>
   a41b4:	17ffffdb 	b	a4120 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   a41b8:	b941d260 	ldr	w0, [x19, #464]
   a41bc:	34000040 	cbz	w0, a41c4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>
   a41c0:	940023e0 	bl	ad140 <LeaveCritical>
   a41c4:	52800000 	mov	w0, #0x0                   	// #0
   a41c8:	17ffffe8 	b	a4168 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
   a41cc:	d503201f 	nop

00000000000a41d0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   a41d0:	f900ec01 	str	x1, [x0, #472]
   a41d4:	d65f03c0 	ret
   a41d8:	d503201f 	nop
   a41dc:	d503201f 	nop

00000000000a41e0 <CLogger::RegisterPanicHandler(void (*)())>:
   a41e0:	f900f001 	str	x1, [x0, #480]
   a41e4:	d65f03c0 	ret
   a41e8:	d503201f 	nop
   a41ec:	d503201f 	nop

00000000000a41f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   a41f0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   a41f4:	910003fd 	mov	x29, sp
   a41f8:	a90153f3 	stp	x19, x20, [sp, #16]
   a41fc:	aa0403f3 	mov	x19, x4
   a4200:	aa0003f4 	mov	x20, x0
   a4204:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4208:	9101c3f6 	add	x22, sp, #0x70
   a420c:	2a0203f5 	mov	w21, w2
   a4210:	aa1603e0 	mov	x0, x22
   a4214:	a90363f7 	stp	x23, x24, [sp, #48]
   a4218:	aa0103f7 	mov	x23, x1
   a421c:	aa0303f8 	mov	x24, x3
   a4220:	94000fc0 	bl	a8120 <CString::CString()>
   a4224:	a9401663 	ldp	x3, x5, [x19]
   a4228:	aa1803e1 	mov	x1, x24
   a422c:	f9400a64 	ldr	x4, [x19, #16]
   a4230:	f9002be3 	str	x3, [sp, #80]
   a4234:	910143e2 	add	x2, sp, #0x50
   a4238:	aa1603e0 	mov	x0, x22
   a423c:	f9400e63 	ldr	x3, [x19, #24]
   a4240:	a90593e5 	stp	x5, x4, [sp, #88]
   a4244:	f90037e3 	str	x3, [sp, #104]
   a4248:	94001246 	bl	a8b60 <CString::FormatV(char const*, std::__va_list)>
   a424c:	aa1603e0 	mov	x0, x22
   a4250:	94000ff8 	bl	a8230 <CString::operator char const*() const>
   a4254:	2a1503e2 	mov	w2, w21
   a4258:	aa0003e3 	mov	x3, x0
   a425c:	aa1703e1 	mov	x1, x23
   a4260:	aa1403e0 	mov	x0, x20
   a4264:	97ffff3f 	bl	a3f60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   a4268:	b9400280 	ldr	w0, [x20]
   a426c:	6b15001f 	cmp	w0, w21
   a4270:	54000603 	b.cc	a4330 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x140>  // b.lo, b.ul, b.last
   a4274:	910243f3 	add	x19, sp, #0x90
   a4278:	d00000b8 	adrp	x24, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a427c:	aa1303e0 	mov	x0, x19
   a4280:	94000fa8 	bl	a8120 <CString::CString()>
   a4284:	34000655 	cbz	w21, a434c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
   a4288:	f9400680 	ldr	x0, [x20, #8]
   a428c:	b4000240 	cbz	x0, a42d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   a4290:	f90023f9 	str	x25, [sp, #64]
   a4294:	9400176f 	bl	aa050 <CTimer::GetTimeString()>
   a4298:	aa0003f9 	mov	x25, x0
   a429c:	b4000880 	cbz	x0, a43ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1bc>
   a42a0:	94000fe4 	bl	a8230 <CString::operator char const*() const>
   a42a4:	aa0003e1 	mov	x1, x0
   a42a8:	aa1303e0 	mov	x0, x19
   a42ac:	94001035 	bl	a8380 <CString::Append(char const*)>
   a42b0:	912d8301 	add	x1, x24, #0xb60
   a42b4:	aa1303e0 	mov	x0, x19
   a42b8:	91008021 	add	x1, x1, #0x20
   a42bc:	94001031 	bl	a8380 <CString::Append(char const*)>
   a42c0:	f9400321 	ldr	x1, [x25]
   a42c4:	aa1903e0 	mov	x0, x25
   a42c8:	f9400421 	ldr	x1, [x1, #8]
   a42cc:	d63f0020 	blr	x1
   a42d0:	f94023f9 	ldr	x25, [sp, #64]
   a42d4:	aa1703e1 	mov	x1, x23
   a42d8:	aa1303e0 	mov	x0, x19
   a42dc:	912d8318 	add	x24, x24, #0xb60
   a42e0:	94001028 	bl	a8380 <CString::Append(char const*)>
   a42e4:	91002301 	add	x1, x24, #0x8
   a42e8:	aa1303e0 	mov	x0, x19
   a42ec:	94001025 	bl	a8380 <CString::Append(char const*)>
   a42f0:	aa1603e0 	mov	x0, x22
   a42f4:	94000fcf 	bl	a8230 <CString::operator char const*() const>
   a42f8:	aa0003e1 	mov	x1, x0
   a42fc:	aa1303e0 	mov	x0, x19
   a4300:	94001020 	bl	a8380 <CString::Append(char const*)>
   a4304:	34000315 	cbz	w21, a4364 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
   a4308:	91006301 	add	x1, x24, #0x18
   a430c:	aa1303e0 	mov	x0, x19
   a4310:	9400101c 	bl	a8380 <CString::Append(char const*)>
   a4314:	aa1303e0 	mov	x0, x19
   a4318:	94000fc6 	bl	a8230 <CString::operator char const*() const>
   a431c:	aa0003e1 	mov	x1, x0
   a4320:	aa1403e0 	mov	x0, x20
   a4324:	97fffe53 	bl	a3c70 <CLogger::Write(char const*)>
   a4328:	aa1303e0 	mov	x0, x19
   a432c:	94000f41 	bl	a8030 <CString::~CString()>
   a4330:	aa1603e0 	mov	x0, x22
   a4334:	94000f3f 	bl	a8030 <CString::~CString()>
   a4338:	a94153f3 	ldp	x19, x20, [sp, #16]
   a433c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4340:	a94363f7 	ldp	x23, x24, [sp, #48]
   a4344:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   a4348:	d65f03c0 	ret
   a434c:	912d8301 	add	x1, x24, #0xb60
   a4350:	aa1303e0 	mov	x0, x19
   a4354:	94000fbf 	bl	a8250 <CString::operator=(char const*)>
   a4358:	f9400680 	ldr	x0, [x20, #8]
   a435c:	b5fff9a0 	cbnz	x0, a4290 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xa0>
   a4360:	17ffffdd 	b	a42d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   a4364:	91004301 	add	x1, x24, #0x10
   a4368:	aa1303e0 	mov	x0, x19
   a436c:	f90023f9 	str	x25, [sp, #64]
   a4370:	94001004 	bl	a8380 <CString::Append(char const*)>
   a4374:	91006301 	add	x1, x24, #0x18
   a4378:	aa1303e0 	mov	x0, x19
   a437c:	94001001 	bl	a8380 <CString::Append(char const*)>
   a4380:	aa1303e0 	mov	x0, x19
   a4384:	94000fab 	bl	a8230 <CString::operator char const*() const>
   a4388:	aa0003e1 	mov	x1, x0
   a438c:	aa1403e0 	mov	x0, x20
   a4390:	97fffe38 	bl	a3c70 <CLogger::Write(char const*)>
   a4394:	f940f280 	ldr	x0, [x20, #480]
   a4398:	b4000040 	cbz	x0, a43a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1b0>
   a439c:	d63f0000 	blr	x0
   a43a0:	52801fe0 	mov	w0, #0xff                  	// #255
   a43a4:	9400158f 	bl	a99e0 <set_qemu_exit_status>
   a43a8:	94001592 	bl	a99f0 <halt>
   a43ac:	f94023f9 	ldr	x25, [sp, #64]
   a43b0:	17ffffc9 	b	a42d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   a43b4:	d503201f 	nop
   a43b8:	d503201f 	nop
   a43bc:	d503201f 	nop

00000000000a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   a43c0:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   a43c4:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   a43c8:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   a43cc:	910003fd 	mov	x29, sp
   a43d0:	910343ea 	add	x10, sp, #0xd0
   a43d4:	9103c3eb 	add	x11, sp, #0xf0
   a43d8:	a9032feb 	stp	x11, x11, [sp, #48]
   a43dc:	f90023ea 	str	x10, [sp, #64]
   a43e0:	290923e9 	stp	w9, w8, [sp, #72]
   a43e4:	a9432fea 	ldp	x10, x11, [sp, #48]
   a43e8:	a9012fea 	stp	x10, x11, [sp, #16]
   a43ec:	a94427e8 	ldp	x8, x9, [sp, #64]
   a43f0:	a90227e8 	stp	x8, x9, [sp, #32]
   a43f4:	3d8017e0 	str	q0, [sp, #80]
   a43f8:	3d801be1 	str	q1, [sp, #96]
   a43fc:	3d801fe2 	str	q2, [sp, #112]
   a4400:	3d8023e3 	str	q3, [sp, #128]
   a4404:	3d8027e4 	str	q4, [sp, #144]
   a4408:	3d802be5 	str	q5, [sp, #160]
   a440c:	3d802fe6 	str	q6, [sp, #176]
   a4410:	3d8033e7 	str	q7, [sp, #192]
   a4414:	a90d17e4 	stp	x4, x5, [sp, #208]
   a4418:	910043e4 	add	x4, sp, #0x10
   a441c:	a90e1fe6 	stp	x6, x7, [sp, #224]
   a4420:	97ffff74 	bl	a41f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   a4424:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   a4428:	d65f03c0 	ret
   a442c:	d503201f 	nop

00000000000a4430 <CLogger::Initialize(CDevice*)>:
   a4430:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   a4434:	910003fd 	mov	x29, sp
   a4438:	a90153f3 	stp	x19, x20, [sp, #16]
   a443c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4440:	aa0003f5 	mov	x21, x0
   a4444:	910103f6 	add	x22, sp, #0x40
   a4448:	a90363f7 	stp	x23, x24, [sp, #48]
   a444c:	f9000c01 	str	x1, [x0, #24]
   a4450:	940002a0 	bl	a4ed0 <CMachineInfo::Get()>
   a4454:	9400016f 	bl	a4a10 <CMachineInfo::GetRAMSize() const>
   a4458:	2a0003f4 	mov	w20, w0
   a445c:	aa1603e0 	mov	x0, x22
   a4460:	94000f30 	bl	a8120 <CString::CString()>
   a4464:	d00000b3 	adrp	x19, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4468:	912d8261 	add	x1, x19, #0xb60
   a446c:	710ffe9f 	cmp	w20, #0x3ff
   a4470:	540006a8 	b.hi	a4544 <CLogger::Initialize(CDevice*)+0x114>  // b.pmore
   a4474:	2a1403e2 	mov	w2, w20
   a4478:	9100a021 	add	x1, x1, #0x28
   a447c:	aa1603e0 	mov	x0, x22
   a4480:	94001530 	bl	a9940 <CString::Format(char const*, ...)>
   a4484:	912d8273 	add	x19, x19, #0xb60
   a4488:	910183f4 	add	x20, sp, #0x60
   a448c:	9100e261 	add	x1, x19, #0x38
   a4490:	aa1403e0 	mov	x0, x20
   a4494:	94000f2b 	bl	a8140 <CString::CString(char const*)>
   a4498:	9101e278 	add	x24, x19, #0x78
   a449c:	91010261 	add	x1, x19, #0x40
   a44a0:	aa1403e0 	mov	x0, x20
   a44a4:	52800004 	mov	w4, #0x0                   	// #0
   a44a8:	52800043 	mov	w3, #0x2                   	// #2
   a44ac:	528001a2 	mov	w2, #0xd                   	// #13
   a44b0:	94001524 	bl	a9940 <CString::Format(char const*, ...)>
   a44b4:	94000287 	bl	a4ed0 <CMachineInfo::Get()>
   a44b8:	94000142 	bl	a49c0 <CMachineInfo::GetMachineName() const>
   a44bc:	aa0003f7 	mov	x23, x0
   a44c0:	aa1603e0 	mov	x0, x22
   a44c4:	94000f5b 	bl	a8230 <CString::operator char const*() const>
   a44c8:	d0000124 	adrp	x4, ca000 <vtable for CLAN7800Device+0x28>
   a44cc:	f9459884 	ldr	x4, [x4, #2864]
   a44d0:	aa0003e6 	mov	x6, x0
   a44d4:	aa1703e5 	mov	x5, x23
   a44d8:	aa1803e1 	mov	x1, x24
   a44dc:	91014263 	add	x3, x19, #0x50
   a44e0:	aa1503e0 	mov	x0, x21
   a44e4:	52800062 	mov	w2, #0x3                   	// #3
   a44e8:	97ffffb6 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a44ec:	94000279 	bl	a4ed0 <CMachineInfo::Get()>
   a44f0:	94000154 	bl	a4a40 <CMachineInfo::GetRevisionRaw() const>
   a44f4:	2a0003f7 	mov	w23, w0
   a44f8:	aa1403e0 	mov	x0, x20
   a44fc:	94000f4d 	bl	a8230 <CString::operator char const*() const>
   a4500:	2a1703e4 	mov	w4, w23
   a4504:	aa0003e5 	mov	x5, x0
   a4508:	91020263 	add	x3, x19, #0x80
   a450c:	aa1803e1 	mov	x1, x24
   a4510:	52800082 	mov	w2, #0x4                   	// #4
   a4514:	aa1503e0 	mov	x0, x21
   a4518:	97ffffaa 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a451c:	aa1403e0 	mov	x0, x20
   a4520:	94000ec4 	bl	a8030 <CString::~CString()>
   a4524:	aa1603e0 	mov	x0, x22
   a4528:	94000ec2 	bl	a8030 <CString::~CString()>
   a452c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4530:	52800020 	mov	w0, #0x1                   	// #1
   a4534:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4538:	a94363f7 	ldp	x23, x24, [sp, #48]
   a453c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   a4540:	d65f03c0 	ret
   a4544:	530a7e82 	lsr	w2, w20, #10
   a4548:	9100c021 	add	x1, x1, #0x30
   a454c:	aa1603e0 	mov	x0, x22
   a4550:	940014fc 	bl	a9940 <CString::Format(char const*, ...)>
   a4554:	17ffffcc 	b	a4484 <CLogger::Initialize(CDevice*)+0x54>
	...

00000000000a4560 <CMachineInfo::CMachineInfo()>:
   a4560:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a4564:	910003fd 	mov	x29, sp
   a4568:	f9000bf3 	str	x19, [sp, #16]
   a456c:	f90017e0 	str	x0, [sp, #40]
   a4570:	f94017e0 	ldr	x0, [sp, #40]
   a4574:	b900001f 	str	wzr, [x0]
   a4578:	f94017e0 	ldr	x0, [sp, #40]
   a457c:	528002a1 	mov	w1, #0x15                  	// #21
   a4580:	b9001001 	str	w1, [x0, #16]
   a4584:	f94017e0 	ldr	x0, [sp, #40]
   a4588:	b900201f 	str	wzr, [x0, #32]
   a458c:	f94017e0 	ldr	x0, [sp, #40]
   a4590:	b900301f 	str	wzr, [x0, #48]
   a4594:	f94017e0 	ldr	x0, [sp, #40]
   a4598:	528000a1 	mov	w1, #0x5                   	// #5
   a459c:	b9004001 	str	w1, [x0, #64]
   a45a0:	f94017e0 	ldr	x0, [sp, #40]
   a45a4:	b900501f 	str	wzr, [x0, #80]
   a45a8:	f94017e0 	ldr	x0, [sp, #40]
   a45ac:	5283e6a1 	mov	w1, #0x1f35                	// #7989
   a45b0:	7900c001 	strh	w1, [x0, #96]
   a45b4:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a45b8:	91326000 	add	x0, x0, #0xc98
   a45bc:	f9400000 	ldr	x0, [x0]
   a45c0:	f100001f 	cmp	x0, #0x0
   a45c4:	540004c0 	b.eq	a465c <CMachineInfo::CMachineInfo()+0xfc>  // b.none
   a45c8:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a45cc:	91326000 	add	x0, x0, #0xc98
   a45d0:	f9400000 	ldr	x0, [x0]
   a45d4:	b9400001 	ldr	w1, [x0]
   a45d8:	f94017e0 	ldr	x0, [sp, #40]
   a45dc:	b9000001 	str	w1, [x0]
   a45e0:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a45e4:	91326000 	add	x0, x0, #0xc98
   a45e8:	f9400000 	ldr	x0, [x0]
   a45ec:	b9401001 	ldr	w1, [x0, #16]
   a45f0:	f94017e0 	ldr	x0, [sp, #40]
   a45f4:	b9001001 	str	w1, [x0, #16]
   a45f8:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a45fc:	91326000 	add	x0, x0, #0xc98
   a4600:	f9400000 	ldr	x0, [x0]
   a4604:	b9402001 	ldr	w1, [x0, #32]
   a4608:	f94017e0 	ldr	x0, [sp, #40]
   a460c:	b9002001 	str	w1, [x0, #32]
   a4610:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a4614:	91326000 	add	x0, x0, #0xc98
   a4618:	f9400000 	ldr	x0, [x0]
   a461c:	b9403001 	ldr	w1, [x0, #48]
   a4620:	f94017e0 	ldr	x0, [sp, #40]
   a4624:	b9003001 	str	w1, [x0, #48]
   a4628:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a462c:	91326000 	add	x0, x0, #0xc98
   a4630:	f9400000 	ldr	x0, [x0]
   a4634:	b9404001 	ldr	w1, [x0, #64]
   a4638:	f94017e0 	ldr	x0, [sp, #40]
   a463c:	b9004001 	str	w1, [x0, #64]
   a4640:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a4644:	91326000 	add	x0, x0, #0xc98
   a4648:	f9400000 	ldr	x0, [x0]
   a464c:	b9405001 	ldr	w1, [x0, #80]
   a4650:	f94017e0 	ldr	x0, [sp, #40]
   a4654:	b9005001 	str	w1, [x0, #80]
   a4658:	140000c8 	b	a4978 <CMachineInfo::CMachineInfo()+0x418>
   a465c:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a4660:	91326000 	add	x0, x0, #0xc98
   a4664:	f94017e1 	ldr	x1, [sp, #40]
   a4668:	f9000001 	str	x1, [x0]
   a466c:	910163e0 	add	x0, sp, #0x58
   a4670:	52800001 	mov	w1, #0x0                   	// #0
   a4674:	97fff64b 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a4678:	910123e1 	add	x1, sp, #0x48
   a467c:	910163e0 	add	x0, sp, #0x58
   a4680:	52800004 	mov	w4, #0x0                   	// #0
   a4684:	52800203 	mov	w3, #0x10                  	// #16
   a4688:	aa0103e2 	mov	x2, x1
   a468c:	52800021 	mov	w1, #0x1                   	// #1
   a4690:	72a000c1 	movk	w1, #0x6, lsl #16
   a4694:	97fff6a3 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4698:	12001c00 	and	w0, w0, #0xff
   a469c:	12000000 	and	w0, w0, #0x1
   a46a0:	7100001f 	cmp	w0, #0x0
   a46a4:	540000a0 	b.eq	a46b8 <CMachineInfo::CMachineInfo()+0x158>  // b.none
   a46a8:	b94057e0 	ldr	w0, [sp, #84]
   a46ac:	12003c01 	and	w1, w0, #0xffff
   a46b0:	f94017e0 	ldr	x0, [sp, #40]
   a46b4:	7900c001 	strh	w1, [x0, #96]
   a46b8:	9100e3e1 	add	x1, sp, #0x38
   a46bc:	910163e0 	add	x0, sp, #0x58
   a46c0:	52800004 	mov	w4, #0x0                   	// #0
   a46c4:	52800203 	mov	w3, #0x10                  	// #16
   a46c8:	aa0103e2 	mov	x2, x1
   a46cc:	52800041 	mov	w1, #0x2                   	// #2
   a46d0:	72a00021 	movk	w1, #0x1, lsl #16
   a46d4:	97fff693 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a46d8:	12001c00 	and	w0, w0, #0xff
   a46dc:	52000000 	eor	w0, w0, #0x1
   a46e0:	12001c00 	and	w0, w0, #0xff
   a46e4:	12000000 	and	w0, w0, #0x1
   a46e8:	7100001f 	cmp	w0, #0x0
   a46ec:	54000060 	b.eq	a46f8 <CMachineInfo::CMachineInfo()+0x198>  // b.none
   a46f0:	52800013 	mov	w19, #0x0                   	// #0
   a46f4:	1400009e 	b	a496c <CMachineInfo::CMachineInfo()+0x40c>
   a46f8:	b94047e1 	ldr	w1, [sp, #68]
   a46fc:	f94017e0 	ldr	x0, [sp, #40]
   a4700:	b9000001 	str	w1, [x0]
   a4704:	f94017e0 	ldr	x0, [sp, #40]
   a4708:	b9400000 	ldr	w0, [x0]
   a470c:	12090000 	and	w0, w0, #0x800000
   a4710:	7100001f 	cmp	w0, #0x0
   a4714:	54000be0 	b.eq	a4890 <CMachineInfo::CMachineInfo()+0x330>  // b.none
   a4718:	f94017e0 	ldr	x0, [sp, #40]
   a471c:	b9400000 	ldr	w0, [x0]
   a4720:	53047c00 	lsr	w0, w0, #4
   a4724:	12001c00 	and	w0, w0, #0xff
   a4728:	b90067e0 	str	w0, [sp, #100]
   a472c:	b9006fff 	str	wzr, [sp, #108]
   a4730:	1400000e 	b	a4768 <CMachineInfo::CMachineInfo()+0x208>
   a4734:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4738:	91304001 	add	x1, x0, #0xc10
   a473c:	b9406fe2 	ldr	w2, [sp, #108]
   a4740:	d2800180 	mov	x0, #0xc                   	// #12
   a4744:	9b007c40 	mul	x0, x2, x0
   a4748:	8b000020 	add	x0, x1, x0
   a474c:	b9400000 	ldr	w0, [x0]
   a4750:	b94067e1 	ldr	w1, [sp, #100]
   a4754:	6b00003f 	cmp	w1, w0
   a4758:	54000100 	b.eq	a4778 <CMachineInfo::CMachineInfo()+0x218>  // b.none
   a475c:	b9406fe0 	ldr	w0, [sp, #108]
   a4760:	11000400 	add	w0, w0, #0x1
   a4764:	b9006fe0 	str	w0, [sp, #108]
   a4768:	b9406fe0 	ldr	w0, [sp, #108]
   a476c:	7100481f 	cmp	w0, #0x12
   a4770:	54fffe29 	b.ls	a4734 <CMachineInfo::CMachineInfo()+0x1d4>  // b.plast
   a4774:	14000002 	b	a477c <CMachineInfo::CMachineInfo()+0x21c>
   a4778:	d503201f 	nop
   a477c:	b9406fe0 	ldr	w0, [sp, #108]
   a4780:	7100481f 	cmp	w0, #0x12
   a4784:	54000069 	b.ls	a4790 <CMachineInfo::CMachineInfo()+0x230>  // b.plast
   a4788:	52800013 	mov	w19, #0x0                   	// #0
   a478c:	14000078 	b	a496c <CMachineInfo::CMachineInfo()+0x40c>
   a4790:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4794:	91304001 	add	x1, x0, #0xc10
   a4798:	b9406fe2 	ldr	w2, [sp, #108]
   a479c:	d2800180 	mov	x0, #0xc                   	// #12
   a47a0:	9b007c40 	mul	x0, x2, x0
   a47a4:	8b000020 	add	x0, x1, x0
   a47a8:	b9400401 	ldr	w1, [x0, #4]
   a47ac:	f94017e0 	ldr	x0, [sp, #40]
   a47b0:	b9001001 	str	w1, [x0, #16]
   a47b4:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a47b8:	91304001 	add	x1, x0, #0xc10
   a47bc:	b9406fe2 	ldr	w2, [sp, #108]
   a47c0:	d2800180 	mov	x0, #0xc                   	// #12
   a47c4:	9b007c40 	mul	x0, x2, x0
   a47c8:	8b000020 	add	x0, x1, x0
   a47cc:	b9400801 	ldr	w1, [x0, #8]
   a47d0:	f94017e0 	ldr	x0, [sp, #40]
   a47d4:	b9002001 	str	w1, [x0, #32]
   a47d8:	f94017e0 	ldr	x0, [sp, #40]
   a47dc:	b9400000 	ldr	w0, [x0]
   a47e0:	12000c00 	and	w0, w0, #0xf
   a47e4:	11000401 	add	w1, w0, #0x1
   a47e8:	f94017e0 	ldr	x0, [sp, #40]
   a47ec:	b9003001 	str	w1, [x0, #48]
   a47f0:	f94017e0 	ldr	x0, [sp, #40]
   a47f4:	b9400000 	ldr	w0, [x0]
   a47f8:	530c7c00 	lsr	w0, w0, #12
   a47fc:	12000c01 	and	w1, w0, #0xf
   a4800:	f94017e0 	ldr	x0, [sp, #40]
   a4804:	b9004001 	str	w1, [x0, #64]
   a4808:	f94017e0 	ldr	x0, [sp, #40]
   a480c:	b9400000 	ldr	w0, [x0]
   a4810:	53147c00 	lsr	w0, w0, #20
   a4814:	12000800 	and	w0, w0, #0x7
   a4818:	52802001 	mov	w1, #0x100                 	// #256
   a481c:	1ac02020 	lsl	w0, w1, w0
   a4820:	2a0003e1 	mov	w1, w0
   a4824:	f94017e0 	ldr	x0, [sp, #40]
   a4828:	b9005001 	str	w1, [x0, #80]
   a482c:	f94017e0 	ldr	x0, [sp, #40]
   a4830:	b9404000 	ldr	w0, [x0, #64]
   a4834:	7100101f 	cmp	w0, #0x4
   a4838:	5400008d 	b.le	a4848 <CMachineInfo::CMachineInfo()+0x2e8>
   a483c:	f94017e0 	ldr	x0, [sp, #40]
   a4840:	528000a1 	mov	w1, #0x5                   	// #5
   a4844:	b9004001 	str	w1, [x0, #64]
   a4848:	f94017e0 	ldr	x0, [sp, #40]
   a484c:	b9401000 	ldr	w0, [x0, #16]
   a4850:	71000c1f 	cmp	w0, #0x3
   a4854:	540008a1 	b.ne	a4968 <CMachineInfo::CMachineInfo()+0x408>  // b.any
   a4858:	f94017e0 	ldr	x0, [sp, #40]
   a485c:	b9405000 	ldr	w0, [x0, #80]
   a4860:	7104001f 	cmp	w0, #0x100
   a4864:	54000821 	b.ne	a4968 <CMachineInfo::CMachineInfo()+0x408>  // b.any
   a4868:	f94017e0 	ldr	x0, [sp, #40]
   a486c:	b9403000 	ldr	w0, [x0, #48]
   a4870:	7100041f 	cmp	w0, #0x1
   a4874:	54000061 	b.ne	a4880 <CMachineInfo::CMachineInfo()+0x320>  // b.any
   a4878:	52800020 	mov	w0, #0x1                   	// #1
   a487c:	14000002 	b	a4884 <CMachineInfo::CMachineInfo()+0x324>
   a4880:	52800040 	mov	w0, #0x2                   	// #2
   a4884:	f94017e1 	ldr	x1, [sp, #40]
   a4888:	b9001020 	str	w0, [x1, #16]
   a488c:	14000037 	b	a4968 <CMachineInfo::CMachineInfo()+0x408>
   a4890:	b9006bff 	str	wzr, [sp, #104]
   a4894:	1400000e 	b	a48cc <CMachineInfo::CMachineInfo()+0x36c>
   a4898:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a489c:	9133e001 	add	x1, x0, #0xcf8
   a48a0:	b9406be0 	ldr	w0, [sp, #104]
   a48a4:	d37cec00 	lsl	x0, x0, #4
   a48a8:	8b000020 	add	x0, x1, x0
   a48ac:	b9400001 	ldr	w1, [x0]
   a48b0:	f94017e0 	ldr	x0, [sp, #40]
   a48b4:	b9400000 	ldr	w0, [x0]
   a48b8:	6b00003f 	cmp	w1, w0
   a48bc:	54000100 	b.eq	a48dc <CMachineInfo::CMachineInfo()+0x37c>  // b.none
   a48c0:	b9406be0 	ldr	w0, [sp, #104]
   a48c4:	11000400 	add	w0, w0, #0x1
   a48c8:	b9006be0 	str	w0, [sp, #104]
   a48cc:	b9406be0 	ldr	w0, [sp, #104]
   a48d0:	7100401f 	cmp	w0, #0x10
   a48d4:	54fffe29 	b.ls	a4898 <CMachineInfo::CMachineInfo()+0x338>  // b.plast
   a48d8:	14000002 	b	a48e0 <CMachineInfo::CMachineInfo()+0x380>
   a48dc:	d503201f 	nop
   a48e0:	b9406be0 	ldr	w0, [sp, #104]
   a48e4:	7100401f 	cmp	w0, #0x10
   a48e8:	54000069 	b.ls	a48f4 <CMachineInfo::CMachineInfo()+0x394>  // b.plast
   a48ec:	52800013 	mov	w19, #0x0                   	// #0
   a48f0:	1400001f 	b	a496c <CMachineInfo::CMachineInfo()+0x40c>
   a48f4:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a48f8:	9133e001 	add	x1, x0, #0xcf8
   a48fc:	b9406be0 	ldr	w0, [sp, #104]
   a4900:	d37cec00 	lsl	x0, x0, #4
   a4904:	8b000020 	add	x0, x1, x0
   a4908:	b9400401 	ldr	w1, [x0, #4]
   a490c:	f94017e0 	ldr	x0, [sp, #40]
   a4910:	b9001001 	str	w1, [x0, #16]
   a4914:	f94017e0 	ldr	x0, [sp, #40]
   a4918:	52800021 	mov	w1, #0x1                   	// #1
   a491c:	b9002001 	str	w1, [x0, #32]
   a4920:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4924:	9133e001 	add	x1, x0, #0xcf8
   a4928:	b9406be0 	ldr	w0, [sp, #104]
   a492c:	d37cec00 	lsl	x0, x0, #4
   a4930:	8b000020 	add	x0, x1, x0
   a4934:	b9400801 	ldr	w1, [x0, #8]
   a4938:	f94017e0 	ldr	x0, [sp, #40]
   a493c:	b9003001 	str	w1, [x0, #48]
   a4940:	f94017e0 	ldr	x0, [sp, #40]
   a4944:	b900401f 	str	wzr, [x0, #64]
   a4948:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a494c:	9133e001 	add	x1, x0, #0xcf8
   a4950:	b9406be0 	ldr	w0, [sp, #104]
   a4954:	d37cec00 	lsl	x0, x0, #4
   a4958:	8b000020 	add	x0, x1, x0
   a495c:	b9400c01 	ldr	w1, [x0, #12]
   a4960:	f94017e0 	ldr	x0, [sp, #40]
   a4964:	b9005001 	str	w1, [x0, #80]
   a4968:	52800033 	mov	w19, #0x1                   	// #1
   a496c:	910163e0 	add	x0, sp, #0x58
   a4970:	97fff590 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4974:	7100067f 	cmp	w19, #0x1
   a4978:	f9400bf3 	ldr	x19, [sp, #16]
   a497c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a4980:	d65f03c0 	ret
   a4984:	d503201f 	nop
   a4988:	d503201f 	nop
   a498c:	d503201f 	nop

00000000000a4990 <CMachineInfo::~CMachineInfo()>:
   a4990:	d0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a4994:	f9464c22 	ldr	x2, [x1, #3224]
   a4998:	eb00005f 	cmp	x2, x0
   a499c:	54000040 	b.eq	a49a4 <CMachineInfo::~CMachineInfo()+0x14>  // b.none
   a49a0:	d65f03c0 	ret
   a49a4:	f9064c3f 	str	xzr, [x1, #3224]
   a49a8:	d65f03c0 	ret
   a49ac:	d503201f 	nop

00000000000a49b0 <CMachineInfo::GetMachineModel() const>:
   a49b0:	b9401000 	ldr	w0, [x0, #16]
   a49b4:	d65f03c0 	ret
   a49b8:	d503201f 	nop
   a49bc:	d503201f 	nop

00000000000a49c0 <CMachineInfo::GetMachineName() const>:
   a49c0:	b9801000 	ldrsw	x0, [x0, #16]
   a49c4:	d0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a49c8:	91208021 	add	x1, x1, #0x820
   a49cc:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   a49d0:	d65f03c0 	ret
   a49d4:	d503201f 	nop
   a49d8:	d503201f 	nop
   a49dc:	d503201f 	nop

00000000000a49e0 <CMachineInfo::GetModelMajor() const>:
   a49e0:	b9402000 	ldr	w0, [x0, #32]
   a49e4:	d65f03c0 	ret
   a49e8:	d503201f 	nop
   a49ec:	d503201f 	nop

00000000000a49f0 <CMachineInfo::GetModelRevision() const>:
   a49f0:	b9403000 	ldr	w0, [x0, #48]
   a49f4:	d65f03c0 	ret
   a49f8:	d503201f 	nop
   a49fc:	d503201f 	nop

00000000000a4a00 <CMachineInfo::GetSoCType() const>:
   a4a00:	b9404000 	ldr	w0, [x0, #64]
   a4a04:	d65f03c0 	ret
   a4a08:	d503201f 	nop
   a4a0c:	d503201f 	nop

00000000000a4a10 <CMachineInfo::GetRAMSize() const>:
   a4a10:	b9405000 	ldr	w0, [x0, #80]
   a4a14:	d65f03c0 	ret
   a4a18:	d503201f 	nop
   a4a1c:	d503201f 	nop

00000000000a4a20 <CMachineInfo::GetSoCName() const>:
   a4a20:	b9804000 	ldrsw	x0, [x0, #64]
   a4a24:	d0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a4a28:	91208021 	add	x1, x1, #0x820
   a4a2c:	9102c021 	add	x1, x1, #0xb0
   a4a30:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   a4a34:	d65f03c0 	ret
   a4a38:	d503201f 	nop
   a4a3c:	d503201f 	nop

00000000000a4a40 <CMachineInfo::GetRevisionRaw() const>:
   a4a40:	b9400000 	ldr	w0, [x0]
   a4a44:	d65f03c0 	ret
   a4a48:	d503201f 	nop
   a4a4c:	d503201f 	nop

00000000000a4a50 <CMachineInfo::GetActLEDInfo() const>:
   a4a50:	b9801000 	ldrsw	x0, [x0, #16]
   a4a54:	d00000a1 	adrp	x1, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4a58:	91384021 	add	x1, x1, #0xe10
   a4a5c:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   a4a60:	d65f03c0 	ret
   a4a64:	d503201f 	nop
   a4a68:	d503201f 	nop
   a4a6c:	d503201f 	nop

00000000000a4a70 <CMachineInfo::GetClockRate(unsigned int) const>:
   a4a70:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a4a74:	910003fd 	mov	x29, sp
   a4a78:	a90153f3 	stp	x19, x20, [sp, #16]
   a4a7c:	910103f4 	add	x20, sp, #0x40
   a4a80:	2a0103f3 	mov	w19, w1
   a4a84:	52800001 	mov	w1, #0x0                   	// #0
   a4a88:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4a8c:	aa0003f6 	mov	x22, x0
   a4a90:	aa1403e0 	mov	x0, x20
   a4a94:	f9001bf7 	str	x23, [sp, #48]
   a4a98:	97fff542 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a4a9c:	910123f7 	add	x23, sp, #0x48
   a4aa0:	52800041 	mov	w1, #0x2                   	// #2
   a4aa4:	72a00061 	movk	w1, #0x3, lsl #16
   a4aa8:	aa1403e0 	mov	x0, x20
   a4aac:	aa1703e2 	mov	x2, x23
   a4ab0:	52800084 	mov	w4, #0x4                   	// #4
   a4ab4:	52800283 	mov	w3, #0x14                  	// #20
   a4ab8:	b90057f3 	str	w19, [sp, #84]
   a4abc:	97fff599 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4ac0:	36000060 	tbz	w0, #0, a4acc <CMachineInfo::GetClockRate(unsigned int) const+0x5c>
   a4ac4:	b9405bf5 	ldr	w21, [sp, #88]
   a4ac8:	350002b5 	cbnz	w21, a4b1c <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   a4acc:	528008e1 	mov	w1, #0x47                  	// #71
   a4ad0:	72a00061 	movk	w1, #0x3, lsl #16
   a4ad4:	aa1703e2 	mov	x2, x23
   a4ad8:	aa1403e0 	mov	x0, x20
   a4adc:	52800084 	mov	w4, #0x4                   	// #4
   a4ae0:	52800283 	mov	w3, #0x14                  	// #20
   a4ae4:	b90057f3 	str	w19, [sp, #84]
   a4ae8:	97fff58e 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a4aec:	36000060 	tbz	w0, #0, a4af8 <CMachineInfo::GetClockRate(unsigned int) const+0x88>
   a4af0:	b9405bf5 	ldr	w21, [sp, #88]
   a4af4:	35000155 	cbnz	w21, a4b1c <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   a4af8:	7100127f 	cmp	w19, #0x4
   a4afc:	540003c0 	b.eq	a4b74 <CMachineInfo::GetClockRate(unsigned int) const+0x104>  // b.none
   a4b00:	540001e8 	b.hi	a4b3c <CMachineInfo::GetClockRate(unsigned int) const+0xcc>  // b.pmore
   a4b04:	7100067f 	cmp	w19, #0x1
   a4b08:	54000540 	b.eq	a4bb0 <CMachineInfo::GetClockRate(unsigned int) const+0x140>  // b.none
   a4b0c:	71000a7f 	cmp	w19, #0x2
   a4b10:	54000641 	b.ne	a4bd8 <CMachineInfo::GetClockRate(unsigned int) const+0x168>  // b.any
   a4b14:	528d8015 	mov	w21, #0x6c00                	// #27648
   a4b18:	72a05b95 	movk	w21, #0x2dc, lsl #16
   a4b1c:	aa1403e0 	mov	x0, x20
   a4b20:	97fff524 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4b24:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4b28:	2a1503e0 	mov	w0, w21
   a4b2c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4b30:	f9401bf7 	ldr	x23, [sp, #48]
   a4b34:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a4b38:	d65f03c0 	ret
   a4b3c:	7100327f 	cmp	w19, #0xc
   a4b40:	54000380 	b.eq	a4bb0 <CMachineInfo::GetClockRate(unsigned int) const+0x140>  // b.none
   a4b44:	71003a7f 	cmp	w19, #0xe
   a4b48:	54000481 	b.ne	a4bd8 <CMachineInfo::GetClockRate(unsigned int) const+0x168>  // b.any
   a4b4c:	aa1403e0 	mov	x0, x20
   a4b50:	528d1815 	mov	w21, #0x68c0                	// #26816
   a4b54:	72a08f15 	movk	w21, #0x478, lsl #16
   a4b58:	97fff516 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4b5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4b60:	2a1503e0 	mov	w0, w21
   a4b64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4b68:	f9401bf7 	ldr	x23, [sp, #48]
   a4b6c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a4b70:	d65f03c0 	ret
   a4b74:	b94022c1 	ldr	w1, [x22, #32]
   a4b78:	52965000 	mov	w0, #0xb280                	// #45696
   a4b7c:	72a1dcc0 	movk	w0, #0xee6, lsl #16
   a4b80:	52946015 	mov	w21, #0xa300                	// #41728
   a4b84:	72a23c35 	movk	w21, #0x11e1, lsl #16
   a4b88:	7100083f 	cmp	w1, #0x2
   a4b8c:	1a8082b5 	csel	w21, w21, w0, hi	// hi = pmore
   a4b90:	aa1403e0 	mov	x0, x20
   a4b94:	97fff507 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4b98:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4b9c:	2a1503e0 	mov	w0, w21
   a4ba0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4ba4:	f9401bf7 	ldr	x23, [sp, #48]
   a4ba8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a4bac:	d65f03c0 	ret
   a4bb0:	aa1403e0 	mov	x0, x20
   a4bb4:	529c2015 	mov	w21, #0xe100                	// #57600
   a4bb8:	72a0beb5 	movk	w21, #0x5f5, lsl #16
   a4bbc:	97fff4fd 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a4bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4bc4:	2a1503e0 	mov	w0, w21
   a4bc8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4bcc:	f9401bf7 	ldr	x23, [sp, #48]
   a4bd0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a4bd4:	d65f03c0 	ret
   a4bd8:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4bdc:	91384000 	add	x0, x0, #0xe10
   a4be0:	91016001 	add	x1, x0, #0x58
   a4be4:	528032c2 	mov	w2, #0x196                 	// #406
   a4be8:	9101a000 	add	x0, x0, #0x68
   a4bec:	97fff4c5 	bl	a1f00 <assertion_failed>

00000000000a4bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   a4bf0:	aa0003e2 	mov	x2, x0
   a4bf4:	7100d83f 	cmp	w1, #0x36
   a4bf8:	54000120 	b.eq	a4c1c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.none
   a4bfc:	7100dc3f 	cmp	w1, #0x37
   a4c00:	54000241 	b.ne	a4c48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>  // b.any
   a4c04:	b9401042 	ldr	w2, [x2, #16]
   a4c08:	52800501 	mov	w1, #0x28                  	// #40
   a4c0c:	528005a0 	mov	w0, #0x2d                  	// #45
   a4c10:	7100105f 	cmp	w2, #0x4
   a4c14:	1a81b000 	csel	w0, w0, w1, lt	// lt = tstop
   a4c18:	d65f03c0 	ret
   a4c1c:	b9401041 	ldr	w1, [x2, #16]
   a4c20:	52800500 	mov	w0, #0x28                  	// #40
   a4c24:	71000c3f 	cmp	w1, #0x3
   a4c28:	540000ed 	b.le	a4c44 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   a4c2c:	b9402042 	ldr	w2, [x2, #32]
   a4c30:	52800521 	mov	w1, #0x29                  	// #41
   a4c34:	528005a0 	mov	w0, #0x2d                  	// #45
   a4c38:	71000c5f 	cmp	w2, #0x3
   a4c3c:	1a813000 	csel	w0, w0, w1, cc	// cc = lo, ul, last
   a4c40:	d65f03c0 	ret
   a4c44:	d65f03c0 	ret
   a4c48:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4c4c:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4c50:	91384000 	add	x0, x0, #0xe10
   a4c54:	910003fd 	mov	x29, sp
   a4c58:	91016001 	add	x1, x0, #0x58
   a4c5c:	52803b22 	mov	w2, #0x1d9                 	// #473
   a4c60:	9101a000 	add	x0, x0, #0x68
   a4c64:	97fff4a7 	bl	a1f00 <assertion_failed>
   a4c68:	d503201f 	nop
   a4c6c:	d503201f 	nop

00000000000a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   a4c70:	b9402000 	ldr	w0, [x0, #32]
   a4c74:	71000c1f 	cmp	w0, #0x3
   a4c78:	54000108 	b.hi	a4c98 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   a4c7c:	7100043f 	cmp	w1, #0x1
   a4c80:	540001a0 	b.eq	a4cb4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   a4c84:	7100183f 	cmp	w1, #0x6
   a4c88:	528ca000 	mov	w0, #0x6500                	// #25856
   a4c8c:	72a3b9a0 	movk	w0, #0x1dcd, lsl #16
   a4c90:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   a4c94:	d65f03c0 	ret
   a4c98:	7100043f 	cmp	w1, #0x1
   a4c9c:	54000120 	b.eq	a4cc0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   a4ca0:	7100183f 	cmp	w1, #0x6
   a4ca4:	5282f000 	mov	w0, #0x1780                	// #6016
   a4ca8:	72a59680 	movk	w0, #0x2cb4, lsl #16
   a4cac:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   a4cb0:	d65f03c0 	ret
   a4cb4:	529f0000 	mov	w0, #0xf800                	// #63488
   a4cb8:	72a02480 	movk	w0, #0x124, lsl #16
   a4cbc:	d65f03c0 	ret
   a4cc0:	529f3000 	mov	w0, #0xf980                	// #63872
   a4cc4:	72a066e0 	movk	w0, #0x337, lsl #16
   a4cc8:	d65f03c0 	ret
   a4ccc:	d503201f 	nop

00000000000a4cd0 <CMachineInfo::GetDevice(TDeviceId) const>:
   a4cd0:	350000a1 	cbnz	w1, a4ce4 <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   a4cd4:	b9401000 	ldr	w0, [x0, #16]
   a4cd8:	7100041f 	cmp	w0, #0x1
   a4cdc:	1a9f07e0 	cset	w0, ne	// ne = any
   a4ce0:	d65f03c0 	ret
   a4ce4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4ce8:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4cec:	91384000 	add	x0, x0, #0xe10
   a4cf0:	910003fd 	mov	x29, sp
   a4cf4:	91016001 	add	x1, x0, #0x58
   a4cf8:	52804282 	mov	w2, #0x214                 	// #532
   a4cfc:	9101a000 	add	x0, x0, #0x68
   a4d00:	97fff480 	bl	a1f00 <assertion_failed>
   a4d04:	d503201f 	nop
   a4d08:	d503201f 	nop
   a4d0c:	d503201f 	nop

00000000000a4d10 <CMachineInfo::ArePWMChannelsSwapped() const>:
   a4d10:	b9401000 	ldr	w0, [x0, #16]
   a4d14:	529fff61 	mov	w1, #0xfffb                	// #65531
   a4d18:	72afffe1 	movk	w1, #0x7fff, lsl #16
   a4d1c:	51001002 	sub	w2, w0, #0x4
   a4d20:	51001800 	sub	w0, w0, #0x6
   a4d24:	6b01005f 	cmp	w2, w1
   a4d28:	7a429800 	ccmp	w0, #0x2, #0x0, ls	// ls = plast
   a4d2c:	1a9f97e0 	cset	w0, hi	// hi = pmore
   a4d30:	d65f03c0 	ret
   a4d34:	d503201f 	nop
   a4d38:	d503201f 	nop
   a4d3c:	d503201f 	nop

00000000000a4d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   a4d40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4d44:	910003fd 	mov	x29, sp
   a4d48:	d0000122 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a4d4c:	f9464c43 	ldr	x3, [x2, #3224]
   a4d50:	aa0003e2 	mov	x2, x0
   a4d54:	b5000063 	cbnz	x3, a4d60 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   a4d58:	14000013 	b	a4da4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x64>
   a4d5c:	aa0303e2 	mov	x2, x3
   a4d60:	eb02007f 	cmp	x3, x2
   a4d64:	54ffffc1 	b.ne	a4d5c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>  // b.any
   a4d68:	71003c3f 	cmp	w1, #0xf
   a4d6c:	54000288 	b.hi	a4dbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x7c>  // b.pmore
   a4d70:	71002c3f 	cmp	w1, #0xb
   a4d74:	540004e8 	b.hi	a4e10 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>  // b.pmore
   a4d78:	7940c064 	ldrh	w4, [x3, #96]
   a4d7c:	52801000 	mov	w0, #0x80                  	// #128
   a4d80:	1ac12882 	asr	w2, w4, w1
   a4d84:	360000c2 	tbz	w2, #0, a4d9c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   a4d88:	52800022 	mov	w2, #0x1                   	// #1
   a4d8c:	2a0103e0 	mov	w0, w1
   a4d90:	1ac12041 	lsl	w1, w2, w1
   a4d94:	0a210081 	bic	w1, w4, w1
   a4d98:	7900c061 	strh	w1, [x3, #96]
   a4d9c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4da0:	d65f03c0 	ret
   a4da4:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4da8:	91384000 	add	x0, x0, #0xe10
   a4dac:	91016001 	add	x1, x0, #0x58
   a4db0:	528044a2 	mov	w2, #0x225                 	// #549
   a4db4:	9101c000 	add	x0, x0, #0x70
   a4db8:	97fff452 	bl	a1f00 <assertion_failed>
   a4dbc:	7102043f 	cmp	w1, #0x81
   a4dc0:	7940c043 	ldrh	w3, [x2, #96]
   a4dc4:	528000c0 	mov	w0, #0x6                   	// #6
   a4dc8:	52800161 	mov	w1, #0xb                   	// #11
   a4dcc:	1a801021 	csel	w1, w1, w0, ne	// ne = any
   a4dd0:	1ac12860 	asr	w0, w3, w1
   a4dd4:	36000080 	tbz	w0, #0, a4de4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa4>
   a4dd8:	14000008 	b	a4df8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   a4ddc:	1ac12860 	asr	w0, w3, w1
   a4de0:	370000c0 	tbnz	w0, #0, a4df8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   a4de4:	51000421 	sub	w1, w1, #0x1
   a4de8:	3100043f 	cmn	w1, #0x1
   a4dec:	54ffff81 	b.ne	a4ddc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>  // b.any
   a4df0:	52801000 	mov	w0, #0x80                  	// #128
   a4df4:	17ffffea 	b	a4d9c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   a4df8:	52800024 	mov	w4, #0x1                   	// #1
   a4dfc:	2a0103e0 	mov	w0, w1
   a4e00:	1ac12081 	lsl	w1, w4, w1
   a4e04:	0a210061 	bic	w1, w3, w1
   a4e08:	7900c041 	strh	w1, [x2, #96]
   a4e0c:	17ffffe4 	b	a4d9c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   a4e10:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4e14:	91384000 	add	x0, x0, #0xe10
   a4e18:	91016001 	add	x1, x0, #0x58
   a4e1c:	528045c2 	mov	w2, #0x22e                 	// #558
   a4e20:	91020000 	add	x0, x0, #0x80
   a4e24:	97fff437 	bl	a1f00 <assertion_failed>
   a4e28:	d503201f 	nop
   a4e2c:	d503201f 	nop

00000000000a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   a4e30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4e34:	910003fd 	mov	x29, sp
   a4e38:	d0000122 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a4e3c:	f9464c42 	ldr	x2, [x2, #3224]
   a4e40:	b5000062 	cbnz	x2, a4e4c <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   a4e44:	1400000f 	b	a4e80 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
   a4e48:	aa0203e0 	mov	x0, x2
   a4e4c:	eb00005f 	cmp	x2, x0
   a4e50:	54ffffc1 	b.ne	a4e48 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>  // b.any
   a4e54:	71002c3f 	cmp	w1, #0xb
   a4e58:	54000208 	b.hi	a4e98 <CMachineInfo::FreeDMAChannel(unsigned int)+0x68>  // b.pmore
   a4e5c:	7940c040 	ldrh	w0, [x2, #96]
   a4e60:	1ac12803 	asr	w3, w0, w1
   a4e64:	37000263 	tbnz	w3, #0, a4eb0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   a4e68:	52800023 	mov	w3, #0x1                   	// #1
   a4e6c:	1ac12061 	lsl	w1, w3, w1
   a4e70:	2a010000 	orr	w0, w0, w1
   a4e74:	7900c040 	strh	w0, [x2, #96]
   a4e78:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4e7c:	d65f03c0 	ret
   a4e80:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4e84:	91384000 	add	x0, x0, #0xe10
   a4e88:	91016001 	add	x1, x0, #0x58
   a4e8c:	52804ac2 	mov	w2, #0x256                 	// #598
   a4e90:	9101c000 	add	x0, x0, #0x70
   a4e94:	97fff41b 	bl	a1f00 <assertion_failed>
   a4e98:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4e9c:	91384000 	add	x0, x0, #0xe10
   a4ea0:	91016001 	add	x1, x0, #0x58
   a4ea4:	52804bc2 	mov	w2, #0x25e                 	// #606
   a4ea8:	91020000 	add	x0, x0, #0x80
   a4eac:	97fff415 	bl	a1f00 <assertion_failed>
   a4eb0:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4eb4:	91384000 	add	x0, x0, #0xe10
   a4eb8:	91016001 	add	x1, x0, #0x58
   a4ebc:	52804be2 	mov	w2, #0x25f                 	// #607
   a4ec0:	91028000 	add	x0, x0, #0xa0
   a4ec4:	97fff40f 	bl	a1f00 <assertion_failed>
   a4ec8:	d503201f 	nop
   a4ecc:	d503201f 	nop

00000000000a4ed0 <CMachineInfo::Get()>:
   a4ed0:	d0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a4ed4:	f9464c00 	ldr	x0, [x0, #3224]
   a4ed8:	b4000040 	cbz	x0, a4ee0 <CMachineInfo::Get()+0x10>
   a4edc:	d65f03c0 	ret
   a4ee0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4ee4:	d00000a0 	adrp	x0, ba000 <CKeyMap::s_DefaultMap+0x1c80>
   a4ee8:	91384000 	add	x0, x0, #0xe10
   a4eec:	910003fd 	mov	x29, sp
   a4ef0:	91016001 	add	x1, x0, #0x58
   a4ef4:	52805742 	mov	w2, #0x2ba                 	// #698
   a4ef8:	9101c000 	add	x0, x0, #0x70
   a4efc:	97fff401 	bl	a1f00 <assertion_failed>

00000000000a4f00 <CPtrList::CPtrList()>:
   a4f00:	f900001f 	str	xzr, [x0]
   a4f04:	d65f03c0 	ret
   a4f08:	d503201f 	nop
   a4f0c:	d503201f 	nop

00000000000a4f10 <CPtrList::~CPtrList()>:
   a4f10:	f9400000 	ldr	x0, [x0]
   a4f14:	b5000040 	cbnz	x0, a4f1c <CPtrList::~CPtrList()+0xc>
   a4f18:	d65f03c0 	ret
   a4f1c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4f20:	d0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a4f24:	d0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a4f28:	910003fd 	mov	x29, sp
   a4f2c:	91214021 	add	x1, x1, #0x850
   a4f30:	91218000 	add	x0, x0, #0x860
   a4f34:	52800542 	mov	w2, #0x2a                  	// #42
   a4f38:	97fff3f2 	bl	a1f00 <assertion_failed>
   a4f3c:	d503201f 	nop

00000000000a4f40 <CPtrList::GetFirst() const>:
   a4f40:	f9400000 	ldr	x0, [x0]
   a4f44:	d65f03c0 	ret
   a4f48:	d503201f 	nop
   a4f4c:	d503201f 	nop

00000000000a4f50 <CPtrList::GetNext(TPtrListElement*) const>:
   a4f50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4f54:	910003fd 	mov	x29, sp
   a4f58:	b4000121 	cbz	x1, a4f7c <CPtrList::GetNext(TPtrListElement*) const+0x2c>
   a4f5c:	b9400022 	ldr	w2, [x1]
   a4f60:	5289a860 	mov	w0, #0x4d43                	// #19779
   a4f64:	72aa0980 	movk	w0, #0x504c, lsl #16
   a4f68:	6b00005f 	cmp	w2, w0
   a4f6c:	54000141 	b.ne	a4f94 <CPtrList::GetNext(TPtrListElement*) const+0x44>  // b.any
   a4f70:	f9400820 	ldr	x0, [x1, #16]
   a4f74:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4f78:	d65f03c0 	ret
   a4f7c:	d0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a4f80:	d0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a4f84:	91214021 	add	x1, x1, #0x850
   a4f88:	911b0000 	add	x0, x0, #0x6c0
   a4f8c:	52800682 	mov	w2, #0x34                  	// #52
   a4f90:	97fff3dc 	bl	a1f00 <assertion_failed>
   a4f94:	d0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a4f98:	d0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a4f9c:	91214021 	add	x1, x1, #0x850
   a4fa0:	9121c000 	add	x0, x0, #0x870
   a4fa4:	528006a2 	mov	w2, #0x35                  	// #53
   a4fa8:	97fff3d6 	bl	a1f00 <assertion_failed>
   a4fac:	d503201f 	nop

00000000000a4fb0 <CPtrList::GetPtr(TPtrListElement*)>:
   a4fb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a4fb4:	910003fd 	mov	x29, sp
   a4fb8:	b4000120 	cbz	x0, a4fdc <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   a4fbc:	b9400002 	ldr	w2, [x0]
   a4fc0:	5289a861 	mov	w1, #0x4d43                	// #19779
   a4fc4:	72aa0981 	movk	w1, #0x504c, lsl #16
   a4fc8:	6b01005f 	cmp	w2, w1
   a4fcc:	54000141 	b.ne	a4ff4 <CPtrList::GetPtr(TPtrListElement*)+0x44>  // b.any
   a4fd0:	f9400c00 	ldr	x0, [x0, #24]
   a4fd4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a4fd8:	d65f03c0 	ret
   a4fdc:	d0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a4fe0:	d0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a4fe4:	91214021 	add	x1, x1, #0x850
   a4fe8:	911b0000 	add	x0, x0, #0x6c0
   a4fec:	52800782 	mov	w2, #0x3c                  	// #60
   a4ff0:	97fff3c4 	bl	a1f00 <assertion_failed>
   a4ff4:	d0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a4ff8:	d0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a4ffc:	91214021 	add	x1, x1, #0x850
   a5000:	9121c000 	add	x0, x0, #0x870
   a5004:	528007a2 	mov	w2, #0x3d                  	// #61
   a5008:	97fff3be 	bl	a1f00 <assertion_failed>
   a500c:	d503201f 	nop

00000000000a5010 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   a5010:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5014:	910003fd 	mov	x29, sp
   a5018:	a90153f3 	stp	x19, x20, [sp, #16]
   a501c:	aa0003f4 	mov	x20, x0
   a5020:	aa0103f3 	mov	x19, x1
   a5024:	d2800400 	mov	x0, #0x20                  	// #32
   a5028:	f90013f5 	str	x21, [sp, #32]
   a502c:	aa0203f5 	mov	x21, x2
   a5030:	94001ac0 	bl	abb30 <operator new(unsigned long)>
   a5034:	f9400281 	ldr	x1, [x20]
   a5038:	5289a862 	mov	w2, #0x4d43                	// #19779
   a503c:	72aa0982 	movk	w2, #0x504c, lsl #16
   a5040:	b9000002 	str	w2, [x0]
   a5044:	f9000c15 	str	x21, [x0, #24]
   a5048:	b4000341 	cbz	x1, a50b0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   a504c:	b40003f3 	cbz	x19, a50c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   a5050:	b9400263 	ldr	w3, [x19]
   a5054:	6b02007f 	cmp	w3, w2
   a5058:	54000441 	b.ne	a50e0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>  // b.any
   a505c:	eb13003f 	cmp	x1, x19
   a5060:	540001a0 	b.eq	a5094 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x84>  // b.none
   a5064:	f9400661 	ldr	x1, [x19, #8]
   a5068:	a900cc01 	stp	x1, x19, [x0, #8]
   a506c:	b40000a1 	cbz	x1, a5080 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   a5070:	b9400022 	ldr	w2, [x1]
   a5074:	6b03005f 	cmp	w2, w3
   a5078:	54000401 	b.ne	a50f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>  // b.any
   a507c:	f9000820 	str	x0, [x1, #16]
   a5080:	f9000660 	str	x0, [x19, #8]
   a5084:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5088:	f94013f5 	ldr	x21, [sp, #32]
   a508c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5090:	d65f03c0 	ret
   a5094:	f9000420 	str	x0, [x1, #8]
   a5098:	f9000280 	str	x0, [x20]
   a509c:	a900841f 	stp	xzr, x1, [x0, #8]
   a50a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a50a4:	f94013f5 	ldr	x21, [sp, #32]
   a50a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a50ac:	d65f03c0 	ret
   a50b0:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a50b4:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a50b8:	91214021 	add	x1, x1, #0x850
   a50bc:	91226000 	add	x0, x0, #0x898
   a50c0:	52800982 	mov	w2, #0x4c                  	// #76
   a50c4:	97fff38f 	bl	a1f00 <assertion_failed>
   a50c8:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a50cc:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a50d0:	91214021 	add	x1, x1, #0x850
   a50d4:	9122a000 	add	x0, x0, #0x8a8
   a50d8:	528009a2 	mov	w2, #0x4d                  	// #77
   a50dc:	97fff389 	bl	a1f00 <assertion_failed>
   a50e0:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a50e4:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a50e8:	91214021 	add	x1, x1, #0x850
   a50ec:	9122e000 	add	x0, x0, #0x8b8
   a50f0:	528009c2 	mov	w2, #0x4e                  	// #78
   a50f4:	97fff383 	bl	a1f00 <assertion_failed>
   a50f8:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a50fc:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a5100:	91214021 	add	x1, x1, #0x850
   a5104:	91238000 	add	x0, x0, #0x8e0
   a5108:	52800c02 	mov	w2, #0x60                  	// #96
   a510c:	97fff37d 	bl	a1f00 <assertion_failed>

00000000000a5110 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   a5110:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5114:	910003fd 	mov	x29, sp
   a5118:	a90153f3 	stp	x19, x20, [sp, #16]
   a511c:	aa0103f3 	mov	x19, x1
   a5120:	aa0003f4 	mov	x20, x0
   a5124:	d2800400 	mov	x0, #0x20                  	// #32
   a5128:	f90013f5 	str	x21, [sp, #32]
   a512c:	aa0203f5 	mov	x21, x2
   a5130:	94001a80 	bl	abb30 <operator new(unsigned long)>
   a5134:	5289a861 	mov	w1, #0x4d43                	// #19779
   a5138:	72aa0981 	movk	w1, #0x504c, lsl #16
   a513c:	b9000001 	str	w1, [x0]
   a5140:	f9000c15 	str	x21, [x0, #24]
   a5144:	b4000253 	cbz	x19, a518c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x7c>
   a5148:	f9400282 	ldr	x2, [x20]
   a514c:	b4000302 	cbz	x2, a51ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   a5150:	b9400262 	ldr	w2, [x19]
   a5154:	6b01005f 	cmp	w2, w1
   a5158:	54000361 	b.ne	a51c4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>  // b.any
   a515c:	f9400a61 	ldr	x1, [x19, #16]
   a5160:	a9008413 	stp	x19, x1, [x0, #8]
   a5164:	b40000a1 	cbz	x1, a5178 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   a5168:	b9400023 	ldr	w3, [x1]
   a516c:	6b02007f 	cmp	w3, w2
   a5170:	54000361 	b.ne	a51dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>  // b.any
   a5174:	f9000420 	str	x0, [x1, #8]
   a5178:	f9000a60 	str	x0, [x19, #16]
   a517c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5180:	f94013f5 	ldr	x21, [sp, #32]
   a5184:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5188:	d65f03c0 	ret
   a518c:	f9400281 	ldr	x1, [x20]
   a5190:	b5000321 	cbnz	x1, a51f4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   a5194:	f9000280 	str	x0, [x20]
   a5198:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   a519c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a51a0:	f94013f5 	ldr	x21, [sp, #32]
   a51a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a51a8:	d65f03c0 	ret
   a51ac:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a51b0:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a51b4:	91214021 	add	x1, x1, #0x850
   a51b8:	91226000 	add	x0, x0, #0x898
   a51bc:	52800fa2 	mov	w2, #0x7d                  	// #125
   a51c0:	97fff350 	bl	a1f00 <assertion_failed>
   a51c4:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a51c8:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a51cc:	91214021 	add	x1, x1, #0x850
   a51d0:	91242000 	add	x0, x0, #0x908
   a51d4:	52800fc2 	mov	w2, #0x7e                  	// #126
   a51d8:	97fff34a 	bl	a1f00 <assertion_failed>
   a51dc:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a51e0:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a51e4:	91214021 	add	x1, x1, #0x850
   a51e8:	9124c000 	add	x0, x0, #0x930
   a51ec:	528010a2 	mov	w2, #0x85                  	// #133
   a51f0:	97fff344 	bl	a1f00 <assertion_failed>
   a51f4:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a51f8:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a51fc:	91214021 	add	x1, x1, #0x850
   a5200:	91218000 	add	x0, x0, #0x860
   a5204:	52800e82 	mov	w2, #0x74                  	// #116
   a5208:	97fff33e 	bl	a1f00 <assertion_failed>
   a520c:	d503201f 	nop

00000000000a5210 <CPtrList::Remove(TPtrListElement*)>:
   a5210:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5214:	910003fd 	mov	x29, sp
   a5218:	b4000541 	cbz	x1, a52c0 <CPtrList::Remove(TPtrListElement*)+0xb0>
   a521c:	aa0003e2 	mov	x2, x0
   a5220:	aa0103e0 	mov	x0, x1
   a5224:	b9400021 	ldr	w1, [x1]
   a5228:	5289a863 	mov	w3, #0x4d43                	// #19779
   a522c:	72aa0983 	movk	w3, #0x504c, lsl #16
   a5230:	6b03003f 	cmp	w1, w3
   a5234:	54000521 	b.ne	a52d8 <CPtrList::Remove(TPtrListElement*)+0xc8>  // b.any
   a5238:	f9400043 	ldr	x3, [x2]
   a523c:	eb00007f 	cmp	x3, x0
   a5240:	54000200 	b.eq	a5280 <CPtrList::Remove(TPtrListElement*)+0x70>  // b.none
   a5244:	f9400402 	ldr	x2, [x0, #8]
   a5248:	b4000542 	cbz	x2, a52f0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   a524c:	b9400043 	ldr	w3, [x2]
   a5250:	6b01007f 	cmp	w3, w1
   a5254:	540002a1 	b.ne	a52a8 <CPtrList::Remove(TPtrListElement*)+0x98>  // b.any
   a5258:	f9400801 	ldr	x1, [x0, #16]
   a525c:	f9000841 	str	x1, [x2, #16]
   a5260:	b40000a1 	cbz	x1, a5274 <CPtrList::Remove(TPtrListElement*)+0x64>
   a5264:	b9400024 	ldr	w4, [x1]
   a5268:	6b03009f 	cmp	w4, w3
   a526c:	540004e1 	b.ne	a5308 <CPtrList::Remove(TPtrListElement*)+0xf8>  // b.any
   a5270:	f9000422 	str	x2, [x1, #8]
   a5274:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a5278:	d2800401 	mov	x1, #0x20                  	// #32
   a527c:	14001a4d 	b	abbb0 <operator delete(void*, unsigned long)>
   a5280:	f9400863 	ldr	x3, [x3, #16]
   a5284:	f9000043 	str	x3, [x2]
   a5288:	b4ffff63 	cbz	x3, a5274 <CPtrList::Remove(TPtrListElement*)+0x64>
   a528c:	b9400062 	ldr	w2, [x3]
   a5290:	6b01005f 	cmp	w2, w1
   a5294:	54000461 	b.ne	a5320 <CPtrList::Remove(TPtrListElement*)+0x110>  // b.any
   a5298:	f900047f 	str	xzr, [x3, #8]
   a529c:	d2800401 	mov	x1, #0x20                  	// #32
   a52a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a52a4:	14001a43 	b	abbb0 <operator delete(void*, unsigned long)>
   a52a8:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a52ac:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a52b0:	91214021 	add	x1, x1, #0x850
   a52b4:	9126a000 	add	x0, x0, #0x9a8
   a52b8:	528013e2 	mov	w2, #0x9f                  	// #159
   a52bc:	97fff311 	bl	a1f00 <assertion_failed>
   a52c0:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a52c4:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a52c8:	91214021 	add	x1, x1, #0x850
   a52cc:	911b0000 	add	x0, x0, #0x6c0
   a52d0:	528011e2 	mov	w2, #0x8f                  	// #143
   a52d4:	97fff30b 	bl	a1f00 <assertion_failed>
   a52d8:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a52dc:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a52e0:	91214021 	add	x1, x1, #0x850
   a52e4:	9121c000 	add	x0, x0, #0x870
   a52e8:	52801202 	mov	w2, #0x90                  	// #144
   a52ec:	97fff305 	bl	a1f00 <assertion_failed>
   a52f0:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a52f4:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a52f8:	91214021 	add	x1, x1, #0x850
   a52fc:	91264000 	add	x0, x0, #0x990
   a5300:	528013c2 	mov	w2, #0x9e                  	// #158
   a5304:	97fff2ff 	bl	a1f00 <assertion_failed>
   a5308:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a530c:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a5310:	91214021 	add	x1, x1, #0x850
   a5314:	91258000 	add	x0, x0, #0x960
   a5318:	52801482 	mov	w2, #0xa4                  	// #164
   a531c:	97fff2f9 	bl	a1f00 <assertion_failed>
   a5320:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a5324:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a5328:	91214021 	add	x1, x1, #0x850
   a532c:	91258000 	add	x0, x0, #0x960
   a5330:	52801302 	mov	w2, #0x98                  	// #152
   a5334:	97fff2f3 	bl	a1f00 <assertion_failed>
   a5338:	d503201f 	nop
   a533c:	d503201f 	nop

00000000000a5340 <CPtrList::Find(void*) const>:
   a5340:	f9400000 	ldr	x0, [x0]
   a5344:	b4000280 	cbz	x0, a5394 <CPtrList::Find(void*) const+0x54>
   a5348:	5289a863 	mov	w3, #0x4d43                	// #19779
   a534c:	72aa0983 	movk	w3, #0x504c, lsl #16
   a5350:	14000006 	b	a5368 <CPtrList::Find(void*) const+0x28>
   a5354:	f9400c02 	ldr	x2, [x0, #24]
   a5358:	eb01005f 	cmp	x2, x1
   a535c:	540001c0 	b.eq	a5394 <CPtrList::Find(void*) const+0x54>  // b.none
   a5360:	f9400800 	ldr	x0, [x0, #16]
   a5364:	b4000180 	cbz	x0, a5394 <CPtrList::Find(void*) const+0x54>
   a5368:	b9400002 	ldr	w2, [x0]
   a536c:	6b03005f 	cmp	w2, w3
   a5370:	54ffff20 	b.eq	a5354 <CPtrList::Find(void*) const+0x14>  // b.none
   a5374:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a5378:	b0000081 	adrp	x1, b6000 <_etext+0x39c8>
   a537c:	b0000080 	adrp	x0, b6000 <_etext+0x39c8>
   a5380:	910003fd 	mov	x29, sp
   a5384:	91214021 	add	x1, x1, #0x850
   a5388:	9121c000 	add	x0, x0, #0x870
   a538c:	52801662 	mov	w2, #0xb3                  	// #179
   a5390:	97fff2dc 	bl	a1f00 <assertion_failed>
   a5394:	d65f03c0 	ret
	...

00000000000a53a0 <CScreenDevice::~CScreenDevice()>:
   a53a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a53a4:	b0000121 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a53a8:	91244021 	add	x1, x1, #0x910
   a53ac:	910003fd 	mov	x29, sp
   a53b0:	a90153f3 	stp	x19, x20, [sp, #16]
   a53b4:	aa0003f3 	mov	x19, x0
   a53b8:	f9000001 	str	x1, [x0]
   a53bc:	97fff6bd 	bl	a2eb0 <CDeviceNameService::Get()>
   a53c0:	b9401e62 	ldr	w2, [x19, #28]
   a53c4:	d00000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a53c8:	52800003 	mov	w3, #0x0                   	// #0
   a53cc:	91052021 	add	x1, x1, #0x148
   a53d0:	11000442 	add	w2, w2, #0x1
   a53d4:	97fff6e7 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a53d8:	39406260 	ldrb	w0, [x19, #24]
   a53dc:	36000080 	tbz	w0, #0, a53ec <CScreenDevice::~CScreenDevice()+0x4c>
   a53e0:	f9401e60 	ldr	x0, [x19, #56]
   a53e4:	b4000040 	cbz	x0, a53ec <CScreenDevice::~CScreenDevice()+0x4c>
   a53e8:	940019ea 	bl	abb90 <operator delete[](void*)>
   a53ec:	f9401274 	ldr	x20, [x19, #32]
   a53f0:	f9001e7f 	str	xzr, [x19, #56]
   a53f4:	b40000d4 	cbz	x20, a540c <CScreenDevice::~CScreenDevice()+0x6c>
   a53f8:	aa1403e0 	mov	x0, x20
   a53fc:	94002ab9 	bl	afee0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   a5400:	aa1403e0 	mov	x0, x20
   a5404:	d2801401 	mov	x1, #0xa0                  	// #160
   a5408:	940019ea 	bl	abbb0 <operator delete(void*, unsigned long)>
   a540c:	f9401a60 	ldr	x0, [x19, #48]
   a5410:	f900127f 	str	xzr, [x19, #32]
   a5414:	b4000040 	cbz	x0, a541c <CScreenDevice::~CScreenDevice()+0x7c>
   a5418:	940019de 	bl	abb90 <operator delete[](void*)>
   a541c:	f9001a7f 	str	xzr, [x19, #48]
   a5420:	91020260 	add	x0, x19, #0x80
   a5424:	94002cdb 	bl	b0790 <CDMAChannel::~CDMAChannel()>
   a5428:	9100a260 	add	x0, x19, #0x28
   a542c:	94002c59 	bl	b0590 <CCharGenerator::~CCharGenerator()>
   a5430:	aa1303e0 	mov	x0, x19
   a5434:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5438:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a543c:	17fff509 	b	a2860 <CDevice::~CDevice()>

00000000000a5440 <CScreenDevice::~CScreenDevice()>:
   a5440:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5444:	910003fd 	mov	x29, sp
   a5448:	f9000bf3 	str	x19, [sp, #16]
   a544c:	aa0003f3 	mov	x19, x0
   a5450:	97ffffd4 	bl	a53a0 <CScreenDevice::~CScreenDevice()>
   a5454:	aa1303e0 	mov	x0, x19
   a5458:	d2801b01 	mov	x1, #0xd8                  	// #216
   a545c:	f9400bf3 	ldr	x19, [sp, #16]
   a5460:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5464:	140019d3 	b	abbb0 <operator delete(void*, unsigned long)>
   a5468:	d503201f 	nop
   a546c:	d503201f 	nop

00000000000a5470 <CScreenDevice::InvertCursor() [clone .part.0]>:
   a5470:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a5474:	910003fd 	mov	x29, sp
   a5478:	a90153f3 	stp	x19, x20, [sp, #16]
   a547c:	aa0003f3 	mov	x19, x0
   a5480:	a9025bf5 	stp	x21, x22, [sp, #32]
   a5484:	9100a015 	add	x21, x0, #0x28
   a5488:	aa1503e0 	mov	x0, x21
   a548c:	f9001bf7 	str	x23, [sp, #48]
   a5490:	f9401a77 	ldr	x23, [x19, #48]
   a5494:	94002c4b 	bl	b05c0 <CCharGenerator::GetUnderline() const>
   a5498:	2a0003f4 	mov	w20, w0
   a549c:	aa1503e0 	mov	x0, x21
   a54a0:	94002c44 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a54a4:	6b00029f 	cmp	w20, w0
   a54a8:	54000402 	b.cs	a5528 <CScreenDevice::InvertCursor() [clone .part.0]+0xb8>  // b.hs, b.nlast
   a54ac:	d503201f 	nop
   a54b0:	aa1503e0 	mov	x0, x21
   a54b4:	52800016 	mov	w22, #0x0                   	// #0
   a54b8:	94002c3a 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a54bc:	6b0002df 	cmp	w22, w0
   a54c0:	540002a2 	b.cs	a5514 <CScreenDevice::InvertCursor() [clone .part.0]+0xa4>  // b.hs, b.nlast
   a54c4:	d503201f 	nop
   a54c8:	3941a663 	ldrb	w3, [x19, #105]
   a54cc:	91000af7 	add	x23, x23, #0x2
   a54d0:	294c0662 	ldp	w2, w1, [x19, #96]
   a54d4:	b9404a60 	ldr	w0, [x19, #72]
   a54d8:	0b0202c2 	add	w2, w22, w2
   a54dc:	0b010281 	add	w1, w20, w1
   a54e0:	37000343 	tbnz	w3, #0, a5548 <CScreenDevice::InvertCursor() [clone .part.0]+0xd8>
   a54e4:	6b00005f 	cmp	w2, w0
   a54e8:	54000082 	b.cs	a54f8 <CScreenDevice::InvertCursor() [clone .part.0]+0x88>  // b.hs, b.nlast
   a54ec:	b9404e60 	ldr	w0, [x19, #76]
   a54f0:	6b00003f 	cmp	w1, w0
   a54f4:	54000423 	b.cc	a5578 <CScreenDevice::InvertCursor() [clone .part.0]+0x108>  // b.lo, b.ul, b.last
   a54f8:	7940da60 	ldrh	w0, [x19, #108]
   a54fc:	781fe2e0 	sturh	w0, [x23, #-2]
   a5500:	110006d6 	add	w22, w22, #0x1
   a5504:	aa1503e0 	mov	x0, x21
   a5508:	94002c26 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a550c:	6b0002df 	cmp	w22, w0
   a5510:	54fffdc3 	b.cc	a54c8 <CScreenDevice::InvertCursor() [clone .part.0]+0x58>  // b.lo, b.ul, b.last
   a5514:	11000694 	add	w20, w20, #0x1
   a5518:	aa1503e0 	mov	x0, x21
   a551c:	94002c25 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5520:	6b00029f 	cmp	w20, w0
   a5524:	54fffc63 	b.cc	a54b0 <CScreenDevice::InvertCursor() [clone .part.0]+0x40>  // b.lo, b.ul, b.last
   a5528:	3941a660 	ldrb	w0, [x19, #105]
   a552c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5530:	52000000 	eor	w0, w0, #0x1
   a5534:	3901a660 	strb	w0, [x19, #105]
   a5538:	a94153f3 	ldp	x19, x20, [sp, #16]
   a553c:	f9401bf7 	ldr	x23, [sp, #48]
   a5540:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5544:	d65f03c0 	ret
   a5548:	6b00005f 	cmp	w2, w0
   a554c:	54fffda2 	b.cs	a5500 <CScreenDevice::InvertCursor() [clone .part.0]+0x90>  // b.hs, b.nlast
   a5550:	b9404e60 	ldr	w0, [x19, #76]
   a5554:	6b00003f 	cmp	w1, w0
   a5558:	54fffd42 	b.cs	a5500 <CScreenDevice::InvertCursor() [clone .part.0]+0x90>  // b.hs, b.nlast
   a555c:	b9404664 	ldr	w4, [x19, #68]
   a5560:	110006d6 	add	w22, w22, #0x1
   a5564:	f9401e60 	ldr	x0, [x19, #56]
   a5568:	785fe2e3 	ldurh	w3, [x23, #-2]
   a556c:	1b040821 	madd	w1, w1, w4, w2
   a5570:	78217803 	strh	w3, [x0, x1, lsl #1]
   a5574:	17ffffe4 	b	a5504 <CScreenDevice::InvertCursor() [clone .part.0]+0x94>
   a5578:	b9404663 	ldr	w3, [x19, #68]
   a557c:	110006d6 	add	w22, w22, #0x1
   a5580:	f9401e60 	ldr	x0, [x19, #56]
   a5584:	1b030821 	madd	w1, w1, w3, w2
   a5588:	8b010021 	add	x1, x1, x1
   a558c:	78616802 	ldrh	w2, [x0, x1]
   a5590:	781fe2e2 	sturh	w2, [x23, #-2]
   a5594:	7940d662 	ldrh	w2, [x19, #106]
   a5598:	78216802 	strh	w2, [x0, x1]
   a559c:	17ffffda 	b	a5504 <CScreenDevice::InvertCursor() [clone .part.0]+0x94>

00000000000a55a0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   a55a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a55a4:	910003fd 	mov	x29, sp
   a55a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a55ac:	aa0003f3 	mov	x19, x0
   a55b0:	2a0403f4 	mov	w20, w4
   a55b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a55b8:	2a0103f6 	mov	w22, w1
   a55bc:	2a0203f5 	mov	w21, w2
   a55c0:	f9001bf7 	str	x23, [sp, #48]
   a55c4:	12001c77 	and	w23, w3, #0xff
   a55c8:	97fff4da 	bl	a2930 <CDevice::CDevice()>
   a55cc:	29025676 	stp	w22, w21, [x19, #16]
   a55d0:	b0000120 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a55d4:	91244000 	add	x0, x0, #0x910
   a55d8:	f9000260 	str	x0, [x19]
   a55dc:	9100a260 	add	x0, x19, #0x28
   a55e0:	39006277 	strb	w23, [x19, #24]
   a55e4:	b9001e74 	str	w20, [x19, #28]
   a55e8:	f900127f 	str	xzr, [x19, #32]
   a55ec:	94002be5 	bl	b0580 <CCharGenerator::CCharGenerator()>
   a55f0:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   a55f4:	d2800023 	mov	x3, #0x1                   	// #1
   a55f8:	f2bffbe3 	movk	x3, #0xffdf, lsl #16
   a55fc:	290afe7f 	stp	wzr, wzr, [x19, #84]
   a5600:	f900327f 	str	xzr, [x19, #96]
   a5604:	91020260 	add	x0, x19, #0x80
   a5608:	f9003663 	str	x3, [x19, #104]
   a560c:	d2800002 	mov	x2, #0x0                   	// #0
   a5610:	3901e27f 	strb	wzr, [x19, #120]
   a5614:	52801021 	mov	w1, #0x81                  	// #129
   a5618:	94002c22 	bl	b06a0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   a561c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5620:	52800020 	mov	w0, #0x1                   	// #1
   a5624:	f9401bf7 	ldr	x23, [sp, #48]
   a5628:	b900d260 	str	w0, [x19, #208]
   a562c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5630:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5634:	d65f03c0 	ret
   a5638:	d503201f 	nop
   a563c:	d503201f 	nop

00000000000a5640 <CScreenDevice::GetWidth() const>:
   a5640:	b9404800 	ldr	w0, [x0, #72]
   a5644:	d65f03c0 	ret
   a5648:	d503201f 	nop
   a564c:	d503201f 	nop

00000000000a5650 <CScreenDevice::GetHeight() const>:
   a5650:	b9404c00 	ldr	w0, [x0, #76]
   a5654:	d65f03c0 	ret
   a5658:	d503201f 	nop
   a565c:	d503201f 	nop

00000000000a5660 <CScreenDevice::GetColumns() const>:
   a5660:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5664:	aa0003e1 	mov	x1, x0
   a5668:	9100a000 	add	x0, x0, #0x28
   a566c:	910003fd 	mov	x29, sp
   a5670:	f9000bf3 	str	x19, [sp, #16]
   a5674:	b9404833 	ldr	w19, [x1, #72]
   a5678:	94002bca 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a567c:	1ac00a60 	udiv	w0, w19, w0
   a5680:	f9400bf3 	ldr	x19, [sp, #16]
   a5684:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5688:	d65f03c0 	ret
   a568c:	d503201f 	nop

00000000000a5690 <CScreenDevice::GetRows() const>:
   a5690:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5694:	aa0003e1 	mov	x1, x0
   a5698:	9100a000 	add	x0, x0, #0x28
   a569c:	910003fd 	mov	x29, sp
   a56a0:	f9000bf3 	str	x19, [sp, #16]
   a56a4:	b9405033 	ldr	w19, [x1, #80]
   a56a8:	94002bc2 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a56ac:	1ac00a60 	udiv	w0, w19, w0
   a56b0:	f9400bf3 	ldr	x19, [sp, #16]
   a56b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a56b8:	d65f03c0 	ret
   a56bc:	d503201f 	nop

00000000000a56c0 <CScreenDevice::GetFrameBuffer()>:
   a56c0:	f9401000 	ldr	x0, [x0, #32]
   a56c4:	d65f03c0 	ret
   a56c8:	d503201f 	nop
   a56cc:	d503201f 	nop

00000000000a56d0 <CScreenDevice::GetStatus()>:
   a56d0:	f9401c01 	ldr	x1, [x0, #56]
   a56d4:	f9000101 	str	x1, [x8]
   a56d8:	a9459404 	ldp	x4, x5, [x0, #88]
   a56dc:	a9011504 	stp	x4, x5, [x8, #16]
   a56e0:	b9404002 	ldr	w2, [x0, #64]
   a56e4:	b9405401 	ldr	w1, [x0, #84]
   a56e8:	7940d403 	ldrh	w3, [x0, #106]
   a56ec:	3941a004 	ldrb	w4, [x0, #104]
   a56f0:	b9000902 	str	w2, [x8, #8]
   a56f4:	b9406c02 	ldr	w2, [x0, #108]
   a56f8:	b9000d01 	str	w1, [x8, #12]
   a56fc:	f9403801 	ldr	x1, [x0, #112]
   a5700:	39008104 	strb	w4, [x8, #32]
   a5704:	3941e000 	ldrb	w0, [x0, #120]
   a5708:	79004503 	strh	w3, [x8, #34]
   a570c:	b9002502 	str	w2, [x8, #36]
   a5710:	f9001501 	str	x1, [x8, #40]
   a5714:	3900c100 	strb	w0, [x8, #48]
   a5718:	d65f03c0 	ret
   a571c:	d503201f 	nop

00000000000a5720 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   a5720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5724:	910003fd 	mov	x29, sp
   a5728:	a90153f3 	stp	x19, x20, [sp, #16]
   a572c:	aa0003f3 	mov	x19, x0
   a5730:	aa0103f4 	mov	x20, x1
   a5734:	b9400820 	ldr	w0, [x1, #8]
   a5738:	b9404261 	ldr	w1, [x19, #64]
   a573c:	6b00003f 	cmp	w1, w0
   a5740:	540000a0 	b.eq	a5754 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>  // b.none
   a5744:	52800000 	mov	w0, #0x0                   	// #0
   a5748:	a94153f3 	ldp	x19, x20, [sp, #16]
   a574c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5750:	d65f03c0 	ret
   a5754:	29488261 	ldp	w1, w0, [x19, #68]
   a5758:	6b00003f 	cmp	w1, w0
   a575c:	54ffff41 	b.ne	a5744 <CScreenDevice::SetStatus(TScreenStatus const&)+0x24>  // b.any
   a5760:	b940d260 	ldr	w0, [x19, #208]
   a5764:	350003c0 	cbnz	w0, a57dc <CScreenDevice::SetStatus(TScreenStatus const&)+0xbc>
   a5768:	3941e260 	ldrb	w0, [x19, #120]
   a576c:	3707fec0 	tbnz	w0, #0, a5744 <CScreenDevice::SetStatus(TScreenStatus const&)+0x24>
   a5770:	3940c280 	ldrb	w0, [x20, #48]
   a5774:	3707fe80 	tbnz	w0, #0, a5744 <CScreenDevice::SetStatus(TScreenStatus const&)+0x24>
   a5778:	f9400281 	ldr	x1, [x20]
   a577c:	f9401e60 	ldr	x0, [x19, #56]
   a5780:	b9404262 	ldr	w2, [x19, #64]
   a5784:	94001691 	bl	ab1c8 <memcpy>
   a5788:	39408280 	ldrb	w0, [x20, #32]
   a578c:	79404685 	ldrh	w5, [x20, #34]
   a5790:	79404a84 	ldrh	w4, [x20, #36]
   a5794:	2941a68a 	ldp	w10, w9, [x20, #12]
   a5798:	29429e88 	ldp	w8, w7, [x20, #20]
   a579c:	b9401e86 	ldr	w6, [x20, #28]
   a57a0:	29450682 	ldp	w2, w1, [x20, #40]
   a57a4:	3901a260 	strb	w0, [x19, #104]
   a57a8:	b940d260 	ldr	w0, [x19, #208]
   a57ac:	79404e83 	ldrh	w3, [x20, #38]
   a57b0:	290aa66a 	stp	w10, w9, [x19, #84]
   a57b4:	290b9e68 	stp	w8, w7, [x19, #92]
   a57b8:	b9006666 	str	w6, [x19, #100]
   a57bc:	7900d665 	strh	w5, [x19, #106]
   a57c0:	7900da64 	strh	w4, [x19, #108]
   a57c4:	7900de63 	strh	w3, [x19, #110]
   a57c8:	290e0662 	stp	w2, w1, [x19, #112]
   a57cc:	350001a0 	cbnz	w0, a5800 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe0>
   a57d0:	d5033fbf 	dmb	sy
   a57d4:	52800020 	mov	w0, #0x1                   	// #1
   a57d8:	17ffffdc 	b	a5748 <CScreenDevice::SetStatus(TScreenStatus const&)+0x28>
   a57dc:	94001e29 	bl	ad080 <EnterCritical>
   a57e0:	3941e260 	ldrb	w0, [x19, #120]
   a57e4:	37000060 	tbnz	w0, #0, a57f0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   a57e8:	3940c280 	ldrb	w0, [x20, #48]
   a57ec:	3607fc60 	tbz	w0, #0, a5778 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   a57f0:	b940d260 	ldr	w0, [x19, #208]
   a57f4:	34fffa80 	cbz	w0, a5744 <CScreenDevice::SetStatus(TScreenStatus const&)+0x24>
   a57f8:	94001e52 	bl	ad140 <LeaveCritical>
   a57fc:	17ffffd2 	b	a5744 <CScreenDevice::SetStatus(TScreenStatus const&)+0x24>
   a5800:	94001e50 	bl	ad140 <LeaveCritical>
   a5804:	17fffff3 	b	a57d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0xb0>
   a5808:	d503201f 	nop
   a580c:	d503201f 	nop

00000000000a5810 <CScreenDevice::CarriageReturn()>:
   a5810:	b900601f 	str	wzr, [x0, #96]
   a5814:	d65f03c0 	ret
   a5818:	d503201f 	nop
   a581c:	d503201f 	nop

00000000000a5820 <CScreenDevice::CursorHome()>:
   a5820:	b9405801 	ldr	w1, [x0, #88]
   a5824:	290c041f 	stp	wzr, w1, [x0, #96]
   a5828:	d65f03c0 	ret
   a582c:	d503201f 	nop

00000000000a5830 <CScreenDevice::CursorLeft()>:
   a5830:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5834:	910003fd 	mov	x29, sp
   a5838:	a90153f3 	stp	x19, x20, [sp, #16]
   a583c:	aa0003f3 	mov	x19, x0
   a5840:	b9406000 	ldr	w0, [x0, #96]
   a5844:	35000320 	cbnz	w0, a58a8 <CScreenDevice::CursorLeft()+0x78>
   a5848:	b9405a60 	ldr	w0, [x19, #88]
   a584c:	b9406661 	ldr	w1, [x19, #100]
   a5850:	6b00003f 	cmp	w1, w0
   a5854:	54000088 	b.hi	a5864 <CScreenDevice::CursorLeft()+0x34>  // b.pmore
   a5858:	a94153f3 	ldp	x19, x20, [sp, #16]
   a585c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5860:	d65f03c0 	ret
   a5864:	b9404a74 	ldr	w20, [x19, #72]
   a5868:	f90013f5 	str	x21, [sp, #32]
   a586c:	9100a275 	add	x21, x19, #0x28
   a5870:	aa1503e0 	mov	x0, x21
   a5874:	94002b4b 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a5878:	2a0003e1 	mov	w1, w0
   a587c:	aa1503e0 	mov	x0, x21
   a5880:	4b010294 	sub	w20, w20, w1
   a5884:	b9006274 	str	w20, [x19, #96]
   a5888:	94002b4a 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a588c:	b9406661 	ldr	w1, [x19, #100]
   a5890:	f94013f5 	ldr	x21, [sp, #32]
   a5894:	4b000021 	sub	w1, w1, w0
   a5898:	b9006661 	str	w1, [x19, #100]
   a589c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a58a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a58a4:	d65f03c0 	ret
   a58a8:	9100a260 	add	x0, x19, #0x28
   a58ac:	94002b3d 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a58b0:	b9406261 	ldr	w1, [x19, #96]
   a58b4:	4b000021 	sub	w1, w1, w0
   a58b8:	b9006261 	str	w1, [x19, #96]
   a58bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a58c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a58c4:	d65f03c0 	ret
   a58c8:	d503201f 	nop
   a58cc:	d503201f 	nop

00000000000a58d0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   a58d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a58d4:	910003fd 	mov	x29, sp
   a58d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a58dc:	2a0203f3 	mov	w19, w2
   a58e0:	aa0003f4 	mov	x20, x0
   a58e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a58e8:	9100a016 	add	x22, x0, #0x28
   a58ec:	2a0103f5 	mov	w21, w1
   a58f0:	aa1603e0 	mov	x0, x22
   a58f4:	51000673 	sub	w19, w19, #0x1
   a58f8:	94002b2a 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a58fc:	2a0003e1 	mov	w1, w0
   a5900:	aa1603e0 	mov	x0, x22
   a5904:	1b017e73 	mul	w19, w19, w1
   a5908:	94002b2a 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a590c:	b9404a81 	ldr	w1, [x20, #72]
   a5910:	6b13003f 	cmp	w1, w19
   a5914:	54000149 	b.ls	a593c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a5918:	510006b5 	sub	w21, w21, #0x1
   a591c:	b9405a81 	ldr	w1, [x20, #88]
   a5920:	1b007ea0 	mul	w0, w21, w0
   a5924:	6b00003f 	cmp	w1, w0
   a5928:	540000a8 	b.hi	a593c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.pmore
   a592c:	b9405e81 	ldr	w1, [x20, #92]
   a5930:	6b00003f 	cmp	w1, w0
   a5934:	54000049 	b.ls	a593c <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a5938:	290c0293 	stp	w19, w0, [x20, #96]
   a593c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5940:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5944:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5948:	d65f03c0 	ret
   a594c:	d503201f 	nop

00000000000a5950 <CScreenDevice::CursorUp()>:
   a5950:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5954:	910003fd 	mov	x29, sp
   a5958:	f9000bf3 	str	x19, [sp, #16]
   a595c:	aa0003f3 	mov	x19, x0
   a5960:	b9405800 	ldr	w0, [x0, #88]
   a5964:	b9406661 	ldr	w1, [x19, #100]
   a5968:	6b00003f 	cmp	w1, w0
   a596c:	54000088 	b.hi	a597c <CScreenDevice::CursorUp()+0x2c>  // b.pmore
   a5970:	f9400bf3 	ldr	x19, [sp, #16]
   a5974:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5978:	d65f03c0 	ret
   a597c:	9100a260 	add	x0, x19, #0x28
   a5980:	94002b0c 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5984:	b9406661 	ldr	w1, [x19, #100]
   a5988:	4b000021 	sub	w1, w1, w0
   a598c:	b9006661 	str	w1, [x19, #100]
   a5990:	f9400bf3 	ldr	x19, [sp, #16]
   a5994:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5998:	d65f03c0 	ret
   a599c:	d503201f 	nop

00000000000a59a0 <CScreenDevice::DeleteChars(unsigned int)>:
   a59a0:	d65f03c0 	ret
   a59a4:	d503201f 	nop
   a59a8:	d503201f 	nop
   a59ac:	d503201f 	nop

00000000000a59b0 <CScreenDevice::DeleteLines(unsigned int)>:
   a59b0:	d65f03c0 	ret
   a59b4:	d503201f 	nop
   a59b8:	d503201f 	nop
   a59bc:	d503201f 	nop

00000000000a59c0 <CScreenDevice::GetTextBackgroundColor()>:
   a59c0:	3941b801 	ldrb	w1, [x0, #110]
   a59c4:	7940d402 	ldrh	w2, [x0, #106]
   a59c8:	7940d800 	ldrh	w0, [x0, #108]
   a59cc:	72000021 	ands	w1, w1, #0x1
   a59d0:	1a801040 	csel	w0, w2, w0, ne	// ne = any
   a59d4:	d65f03c0 	ret
   a59d8:	d503201f 	nop
   a59dc:	d503201f 	nop

00000000000a59e0 <CScreenDevice::GetTextColor()>:
   a59e0:	3941b801 	ldrb	w1, [x0, #110]
   a59e4:	7940d402 	ldrh	w2, [x0, #106]
   a59e8:	7940d800 	ldrh	w0, [x0, #108]
   a59ec:	72000021 	ands	w1, w1, #0x1
   a59f0:	1a821000 	csel	w0, w0, w2, ne	// ne = any
   a59f4:	d65f03c0 	ret
   a59f8:	d503201f 	nop
   a59fc:	d503201f 	nop

00000000000a5a00 <CScreenDevice::InsertLines(unsigned int)>:
   a5a00:	d65f03c0 	ret
   a5a04:	d503201f 	nop
   a5a08:	d503201f 	nop
   a5a0c:	d503201f 	nop

00000000000a5a10 <CScreenDevice::InsertMode(bool)>:
   a5a10:	3901bc01 	strb	w1, [x0, #111]
   a5a14:	d65f03c0 	ret
   a5a18:	d503201f 	nop
   a5a1c:	d503201f 	nop

00000000000a5a20 <CScreenDevice::ReverseScroll()>:
   a5a20:	d65f03c0 	ret
   a5a24:	d503201f 	nop
   a5a28:	d503201f 	nop
   a5a2c:	d503201f 	nop

00000000000a5a30 <CScreenDevice::SetCursorMode(bool)>:
   a5a30:	3901a001 	strb	w1, [x0, #104]
   a5a34:	d65f03c0 	ret
   a5a38:	d503201f 	nop
   a5a3c:	d503201f 	nop

00000000000a5a40 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   a5a40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a5a44:	910003fd 	mov	x29, sp
   a5a48:	a90153f3 	stp	x19, x20, [sp, #16]
   a5a4c:	2a0103f3 	mov	w19, w1
   a5a50:	aa0003f4 	mov	x20, x0
   a5a54:	a9025bf5 	stp	x21, x22, [sp, #32]
   a5a58:	9100a016 	add	x22, x0, #0x28
   a5a5c:	2a0203f5 	mov	w21, w2
   a5a60:	aa1603e0 	mov	x0, x22
   a5a64:	51000673 	sub	w19, w19, #0x1
   a5a68:	94002ad2 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5a6c:	2a0003e1 	mov	w1, w0
   a5a70:	aa1603e0 	mov	x0, x22
   a5a74:	1b017e73 	mul	w19, w19, w1
   a5a78:	94002ace 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5a7c:	b9405281 	ldr	w1, [x20, #80]
   a5a80:	1b157c02 	mul	w2, w0, w21
   a5a84:	6b13003f 	cmp	w1, w19
   a5a88:	7a428020 	ccmp	w1, w2, #0x0, hi	// hi = pmore
   a5a8c:	7a422262 	ccmp	w19, w2, #0x2, cs	// cs = hs, nlast
   a5a90:	540000e3 	b.cc	a5aac <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x6c>  // b.lo, b.ul, b.last
   a5a94:	b9405a93 	ldr	w19, [x20, #88]
   a5a98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5a9c:	290c4e9f 	stp	wzr, w19, [x20, #96]
   a5aa0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5aa4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a5aa8:	d65f03c0 	ret
   a5aac:	290b0a93 	stp	w19, w2, [x20, #88]
   a5ab0:	17fffffa 	b	a5a98 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x58>
   a5ab4:	d503201f 	nop
   a5ab8:	d503201f 	nop
   a5abc:	d503201f 	nop

00000000000a5ac0 <CScreenDevice::SetStandoutMode(unsigned int)>:
   a5ac0:	7101ac3f 	cmp	w1, #0x6b
   a5ac4:	54000128 	b.hi	a5ae8 <CScreenDevice::SetStandoutMode(unsigned int)+0x28>  // b.pmore
   a5ac8:	d00000a2 	adrp	x2, bb000 <s_ActLEDInfo+0x1f0>
   a5acc:	91036042 	add	x2, x2, #0xd8
   a5ad0:	38614842 	ldrb	w2, [x2, w1, uxtw]
   a5ad4:	10000061 	adr	x1, a5ae0 <CScreenDevice::SetStandoutMode(unsigned int)+0x20>
   a5ad8:	8b228822 	add	x2, x1, w2, sxtb #2
   a5adc:	d61f0040 	br	x2
   a5ae0:	528002a1 	mov	w1, #0x15                  	// #21
   a5ae4:	7900d401 	strh	w1, [x0, #106]
   a5ae8:	d65f03c0 	ret
   a5aec:	1280aea1 	mov	w1, #0xfffffa8a            	// #-1398
   a5af0:	7900d401 	strh	w1, [x0, #106]
   a5af4:	d65f03c0 	ret
   a5af8:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a5afc:	7900d401 	strh	w1, [x0, #106]
   a5b00:	3901b81f 	strb	wzr, [x0, #110]
   a5b04:	d65f03c0 	ret
   a5b08:	528af941 	mov	w1, #0x57ca                	// #22474
   a5b0c:	7900d401 	strh	w1, [x0, #106]
   a5b10:	d65f03c0 	ret
   a5b14:	128a5541 	mov	w1, #0xffffad55            	// #-21163
   a5b18:	7900d801 	strh	w1, [x0, #108]
   a5b1c:	d65f03c0 	ret
   a5b20:	5280aaa1 	mov	w1, #0x555                 	// #1365
   a5b24:	7900d801 	strh	w1, [x0, #108]
   a5b28:	d65f03c0 	ret
   a5b2c:	128afd41 	mov	w1, #0xffffa815            	// #-22507
   a5b30:	7900d801 	strh	w1, [x0, #108]
   a5b34:	d65f03c0 	ret
   a5b38:	528002a1 	mov	w1, #0x15                  	// #21
   a5b3c:	7900d801 	strh	w1, [x0, #108]
   a5b40:	d65f03c0 	ret
   a5b44:	128aafe1 	mov	w1, #0xffffaa80            	// #-21888
   a5b48:	7900d801 	strh	w1, [x0, #108]
   a5b4c:	d65f03c0 	ret
   a5b50:	5280a801 	mov	w1, #0x540                 	// #1344
   a5b54:	7900d801 	strh	w1, [x0, #108]
   a5b58:	d65f03c0 	ret
   a5b5c:	128affe1 	mov	w1, #0xffffa800            	// #-22528
   a5b60:	7900d801 	strh	w1, [x0, #108]
   a5b64:	d65f03c0 	ret
   a5b68:	7900d81f 	strh	wzr, [x0, #108]
   a5b6c:	d65f03c0 	ret
   a5b70:	128a5541 	mov	w1, #0xffffad55            	// #-21163
   a5b74:	7900d401 	strh	w1, [x0, #106]
   a5b78:	d65f03c0 	ret
   a5b7c:	5280aaa1 	mov	w1, #0x555                 	// #1365
   a5b80:	7900d401 	strh	w1, [x0, #106]
   a5b84:	d65f03c0 	ret
   a5b88:	128afd41 	mov	w1, #0xffffa815            	// #-22507
   a5b8c:	7900d401 	strh	w1, [x0, #106]
   a5b90:	d65f03c0 	ret
   a5b94:	128aafe1 	mov	w1, #0xffffaa80            	// #-21888
   a5b98:	7900d401 	strh	w1, [x0, #106]
   a5b9c:	d65f03c0 	ret
   a5ba0:	5280a801 	mov	w1, #0x540                 	// #1344
   a5ba4:	7900d401 	strh	w1, [x0, #106]
   a5ba8:	d65f03c0 	ret
   a5bac:	128affe1 	mov	w1, #0xffffa800            	// #-22528
   a5bb0:	7900d401 	strh	w1, [x0, #106]
   a5bb4:	d65f03c0 	ret
   a5bb8:	7900d41f 	strh	wzr, [x0, #106]
   a5bbc:	d65f03c0 	ret
   a5bc0:	528af941 	mov	w1, #0x57ca                	// #22474
   a5bc4:	7900d801 	strh	w1, [x0, #108]
   a5bc8:	d65f03c0 	ret
   a5bcc:	1280aea1 	mov	w1, #0xfffffa8a            	// #-1398
   a5bd0:	7900d801 	strh	w1, [x0, #108]
   a5bd4:	d65f03c0 	ret
   a5bd8:	528a5141 	mov	w1, #0x528a                	// #21130
   a5bdc:	7900d801 	strh	w1, [x0, #108]
   a5be0:	d65f03c0 	ret
   a5be4:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a5be8:	7900d401 	strh	w1, [x0, #106]
   a5bec:	d65f03c0 	ret
   a5bf0:	528afbe1 	mov	w1, #0x57df                	// #22495
   a5bf4:	7900d401 	strh	w1, [x0, #106]
   a5bf8:	d65f03c0 	ret
   a5bfc:	1280ac01 	mov	w1, #0xfffffa9f            	// #-1377
   a5c00:	7900d401 	strh	w1, [x0, #106]
   a5c04:	d65f03c0 	ret
   a5c08:	528a53e1 	mov	w1, #0x529f                	// #21151
   a5c0c:	7900d401 	strh	w1, [x0, #106]
   a5c10:	d65f03c0 	ret
   a5c14:	128006a1 	mov	w1, #0xffffffca            	// #-54
   a5c18:	7900d401 	strh	w1, [x0, #106]
   a5c1c:	d65f03c0 	ret
   a5c20:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a5c24:	7900d801 	strh	w1, [x0, #108]
   a5c28:	d65f03c0 	ret
   a5c2c:	1280ac01 	mov	w1, #0xfffffa9f            	// #-1377
   a5c30:	7900d801 	strh	w1, [x0, #108]
   a5c34:	d65f03c0 	ret
   a5c38:	528a53e1 	mov	w1, #0x529f                	// #21151
   a5c3c:	7900d801 	strh	w1, [x0, #108]
   a5c40:	d65f03c0 	ret
   a5c44:	128006a1 	mov	w1, #0xffffffca            	// #-54
   a5c48:	7900d801 	strh	w1, [x0, #108]
   a5c4c:	d65f03c0 	ret
   a5c50:	528afbe1 	mov	w1, #0x57df                	// #22495
   a5c54:	7900d801 	strh	w1, [x0, #108]
   a5c58:	d65f03c0 	ret
   a5c5c:	528a5141 	mov	w1, #0x528a                	// #21130
   a5c60:	7900d401 	strh	w1, [x0, #106]
   a5c64:	d65f03c0 	ret
   a5c68:	52800021 	mov	w1, #0x1                   	// #1
   a5c6c:	3901b801 	strb	w1, [x0, #110]
   a5c70:	d65f03c0 	ret
   a5c74:	d503201f 	nop
   a5c78:	d503201f 	nop
   a5c7c:	d503201f 	nop

00000000000a5c80 <CScreenDevice::Scroll()>:
   a5c80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a5c84:	910003fd 	mov	x29, sp
   a5c88:	a9025bf5 	stp	x21, x22, [sp, #32]
   a5c8c:	aa0003f6 	mov	x22, x0
   a5c90:	9100a000 	add	x0, x0, #0x28
   a5c94:	a90153f3 	stp	x19, x20, [sp, #16]
   a5c98:	94002a46 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5c9c:	b94046c4 	ldr	w4, [x22, #68]
   a5ca0:	294b06c5 	ldp	w5, w1, [x22, #88]
   a5ca4:	2a0003f3 	mov	w19, w0
   a5ca8:	f9401ec6 	ldr	x6, [x22, #56]
   a5cac:	4b050023 	sub	w3, w1, w5
   a5cb0:	4b000063 	sub	w3, w3, w0
   a5cb4:	1b047cb5 	mul	w21, w5, w4
   a5cb8:	1b047c63 	mul	w3, w3, w4
   a5cbc:	8b1504d5 	add	x21, x6, x21, lsl #1
   a5cc0:	2b030063 	adds	w3, w3, w3
   a5cc4:	540007c1 	b.ne	a5dbc <CScreenDevice::Scroll()+0x13c>  // b.any
   a5cc8:	1b047e63 	mul	w3, w19, w4
   a5ccc:	d341fc63 	lsr	x3, x3, #1
   a5cd0:	51000464 	sub	w4, w3, #0x1
   a5cd4:	b40006c3 	cbz	x3, a5dac <CScreenDevice::Scroll()+0x12c>
   a5cd8:	cb550be0 	neg	x0, x21, lsr #2
   a5cdc:	7100149f 	cmp	w4, #0x5
   a5ce0:	12000402 	and	w2, w0, #0x3
   a5ce4:	7d40dac0 	ldr	h0, [x22, #108]
   a5ce8:	54000449 	b.ls	a5d70 <CScreenDevice::Scroll()+0xf0>  // b.plast
   a5cec:	aa1503e5 	mov	x5, x21
   a5cf0:	340001a2 	cbz	w2, a5d24 <CScreenDevice::Scroll()+0xa4>
   a5cf4:	bd0002a0 	str	s0, [x21]
   a5cf8:	910012a5 	add	x5, x21, #0x4
   a5cfc:	51000864 	sub	w4, w3, #0x2
   a5d00:	36080120 	tbz	w0, #1, a5d24 <CScreenDevice::Scroll()+0xa4>
   a5d04:	bd0006a0 	str	s0, [x21, #4]
   a5d08:	910022a5 	add	x5, x21, #0x8
   a5d0c:	51000c64 	sub	w4, w3, #0x3
   a5d10:	71000c5f 	cmp	w2, #0x3
   a5d14:	54000081 	b.ne	a5d24 <CScreenDevice::Scroll()+0xa4>  // b.any
   a5d18:	910032a5 	add	x5, x21, #0xc
   a5d1c:	51001064 	sub	w4, w3, #0x4
   a5d20:	bd000aa0 	str	s0, [x21, #8]
   a5d24:	4b020063 	sub	w3, w3, w2
   a5d28:	d37e0440 	ubfiz	x0, x2, #2, #2
   a5d2c:	51001062 	sub	w2, w3, #0x4
   a5d30:	8b0002a0 	add	x0, x21, x0
   a5d34:	4e040401 	dup	v1.4s, v0.s[0]
   a5d38:	52800001 	mov	w1, #0x0                   	// #0
   a5d3c:	53027c42 	lsr	w2, w2, #2
   a5d40:	11000442 	add	w2, w2, #0x1
   a5d44:	d503201f 	nop
   a5d48:	11000421 	add	w1, w1, #0x1
   a5d4c:	3c810401 	str	q1, [x0], #16
   a5d50:	6b01005f 	cmp	w2, w1
   a5d54:	54ffffa8 	b.hi	a5d48 <CScreenDevice::Scroll()+0xc8>  // b.pmore
   a5d58:	531e7442 	lsl	w2, w2, #2
   a5d5c:	6b02007f 	cmp	w3, w2
   a5d60:	54000260 	b.eq	a5dac <CScreenDevice::Scroll()+0x12c>  // b.none
   a5d64:	2a0203f5 	mov	w21, w2
   a5d68:	4b020084 	sub	w4, w4, w2
   a5d6c:	8b1508b5 	add	x21, x5, x21, lsl #2
   a5d70:	bd0002a0 	str	s0, [x21]
   a5d74:	340001c4 	cbz	w4, a5dac <CScreenDevice::Scroll()+0x12c>
   a5d78:	bd0006a0 	str	s0, [x21, #4]
   a5d7c:	7100049f 	cmp	w4, #0x1
   a5d80:	54000160 	b.eq	a5dac <CScreenDevice::Scroll()+0x12c>  // b.none
   a5d84:	bd000aa0 	str	s0, [x21, #8]
   a5d88:	7100089f 	cmp	w4, #0x2
   a5d8c:	54000100 	b.eq	a5dac <CScreenDevice::Scroll()+0x12c>  // b.none
   a5d90:	bd000ea0 	str	s0, [x21, #12]
   a5d94:	71000c9f 	cmp	w4, #0x3
   a5d98:	540000a0 	b.eq	a5dac <CScreenDevice::Scroll()+0x12c>  // b.none
   a5d9c:	bd0012a0 	str	s0, [x21, #16]
   a5da0:	7100109f 	cmp	w4, #0x4
   a5da4:	54000040 	b.eq	a5dac <CScreenDevice::Scroll()+0x12c>  // b.none
   a5da8:	bd0016a0 	str	s0, [x21, #20]
   a5dac:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5db0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5db4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a5db8:	d65f03c0 	ret
   a5dbc:	0b0000a2 	add	w2, w5, w0
   a5dc0:	2a0303f4 	mov	w20, w3
   a5dc4:	aa1403e3 	mov	x3, x20
   a5dc8:	aa1503e1 	mov	x1, x21
   a5dcc:	52800005 	mov	w5, #0x0                   	// #0
   a5dd0:	f9001bf7 	str	x23, [sp, #48]
   a5dd4:	1b047c42 	mul	w2, w2, w4
   a5dd8:	910202d7 	add	x23, x22, #0x80
   a5ddc:	52800044 	mov	w4, #0x2                   	// #2
   a5de0:	aa1703e0 	mov	x0, x23
   a5de4:	8b0204c2 	add	x2, x6, x2, lsl #1
   a5de8:	94002aa6 	bl	b0880 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   a5dec:	aa1703e0 	mov	x0, x23
   a5df0:	94002c88 	bl	b1010 <CDMAChannel::Start()>
   a5df4:	aa1703e0 	mov	x0, x23
   a5df8:	94002cde 	bl	b1170 <CDMAChannel::Wait()>
   a5dfc:	927ef683 	and	x3, x20, #0xfffffffffffffffc
   a5e00:	b94046c4 	ldr	w4, [x22, #68]
   a5e04:	f9401bf7 	ldr	x23, [sp, #48]
   a5e08:	8b0302b5 	add	x21, x21, x3
   a5e0c:	17ffffaf 	b	a5cc8 <CScreenDevice::Scroll()+0x48>

00000000000a5e10 <CScreenDevice::CursorDown()>:
   a5e10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5e14:	910003fd 	mov	x29, sp
   a5e18:	a90153f3 	stp	x19, x20, [sp, #16]
   a5e1c:	aa0003f3 	mov	x19, x0
   a5e20:	9100a014 	add	x20, x0, #0x28
   a5e24:	aa1403e0 	mov	x0, x20
   a5e28:	940029e2 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5e2c:	b9406662 	ldr	w2, [x19, #100]
   a5e30:	b9405e61 	ldr	w1, [x19, #92]
   a5e34:	0b020000 	add	w0, w0, w2
   a5e38:	b9006660 	str	w0, [x19, #100]
   a5e3c:	6b01001f 	cmp	w0, w1
   a5e40:	54000082 	b.cs	a5e50 <CScreenDevice::CursorDown()+0x40>  // b.hs, b.nlast
   a5e44:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5e48:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5e4c:	d65f03c0 	ret
   a5e50:	aa1303e0 	mov	x0, x19
   a5e54:	97ffff8b 	bl	a5c80 <CScreenDevice::Scroll()>
   a5e58:	aa1403e0 	mov	x0, x20
   a5e5c:	940029d5 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5e60:	b9406661 	ldr	w1, [x19, #100]
   a5e64:	4b000021 	sub	w1, w1, w0
   a5e68:	b9006661 	str	w1, [x19, #100]
   a5e6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5e70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5e74:	d65f03c0 	ret
   a5e78:	d503201f 	nop
   a5e7c:	d503201f 	nop

00000000000a5e80 <CScreenDevice::NewLine()>:
   a5e80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5e84:	910003fd 	mov	x29, sp
   a5e88:	a90153f3 	stp	x19, x20, [sp, #16]
   a5e8c:	aa0003f3 	mov	x19, x0
   a5e90:	9100a014 	add	x20, x0, #0x28
   a5e94:	aa1403e0 	mov	x0, x20
   a5e98:	b900627f 	str	wzr, [x19, #96]
   a5e9c:	940029c5 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5ea0:	b9406662 	ldr	w2, [x19, #100]
   a5ea4:	b9405e61 	ldr	w1, [x19, #92]
   a5ea8:	0b020000 	add	w0, w0, w2
   a5eac:	b9006660 	str	w0, [x19, #100]
   a5eb0:	6b01001f 	cmp	w0, w1
   a5eb4:	54000082 	b.cs	a5ec4 <CScreenDevice::NewLine()+0x44>  // b.hs, b.nlast
   a5eb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5ebc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5ec0:	d65f03c0 	ret
   a5ec4:	aa1303e0 	mov	x0, x19
   a5ec8:	97ffff6e 	bl	a5c80 <CScreenDevice::Scroll()>
   a5ecc:	aa1403e0 	mov	x0, x20
   a5ed0:	940029b8 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5ed4:	b9406661 	ldr	w1, [x19, #100]
   a5ed8:	4b000021 	sub	w1, w1, w0
   a5edc:	b9006661 	str	w1, [x19, #100]
   a5ee0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5ee4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5ee8:	d65f03c0 	ret
   a5eec:	d503201f 	nop

00000000000a5ef0 <CScreenDevice::CursorRight()>:
   a5ef0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5ef4:	910003fd 	mov	x29, sp
   a5ef8:	a90153f3 	stp	x19, x20, [sp, #16]
   a5efc:	aa0003f3 	mov	x19, x0
   a5f00:	9100a014 	add	x20, x0, #0x28
   a5f04:	aa1403e0 	mov	x0, x20
   a5f08:	940029a6 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a5f0c:	b9406262 	ldr	w2, [x19, #96]
   a5f10:	b9404a61 	ldr	w1, [x19, #72]
   a5f14:	0b020000 	add	w0, w0, w2
   a5f18:	b9006260 	str	w0, [x19, #96]
   a5f1c:	6b01001f 	cmp	w0, w1
   a5f20:	54000082 	b.cs	a5f30 <CScreenDevice::CursorRight()+0x40>  // b.hs, b.nlast
   a5f24:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5f28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5f2c:	d65f03c0 	ret
   a5f30:	b900627f 	str	wzr, [x19, #96]
   a5f34:	aa1403e0 	mov	x0, x20
   a5f38:	9400299e 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5f3c:	b9406662 	ldr	w2, [x19, #100]
   a5f40:	b9405e61 	ldr	w1, [x19, #92]
   a5f44:	0b020000 	add	w0, w0, w2
   a5f48:	b9006660 	str	w0, [x19, #100]
   a5f4c:	6b01001f 	cmp	w0, w1
   a5f50:	54fffea3 	b.cc	a5f24 <CScreenDevice::CursorRight()+0x34>  // b.lo, b.ul, b.last
   a5f54:	aa1303e0 	mov	x0, x19
   a5f58:	97ffff4a 	bl	a5c80 <CScreenDevice::Scroll()>
   a5f5c:	aa1403e0 	mov	x0, x20
   a5f60:	94002994 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5f64:	b9406661 	ldr	w1, [x19, #100]
   a5f68:	4b000021 	sub	w1, w1, w0
   a5f6c:	b9006661 	str	w1, [x19, #100]
   a5f70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5f74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5f78:	d65f03c0 	ret
   a5f7c:	d503201f 	nop

00000000000a5f80 <CScreenDevice::Tabulator()>:
   a5f80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a5f84:	910003fd 	mov	x29, sp
   a5f88:	a90153f3 	stp	x19, x20, [sp, #16]
   a5f8c:	aa0003f3 	mov	x19, x0
   a5f90:	9100a014 	add	x20, x0, #0x28
   a5f94:	aa1403e0 	mov	x0, x20
   a5f98:	94002982 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a5f9c:	b9406261 	ldr	w1, [x19, #96]
   a5fa0:	531d7000 	lsl	w0, w0, #3
   a5fa4:	b9404a62 	ldr	w2, [x19, #72]
   a5fa8:	0b010001 	add	w1, w0, w1
   a5fac:	1ac00821 	udiv	w1, w1, w0
   a5fb0:	1b007c21 	mul	w1, w1, w0
   a5fb4:	b9006261 	str	w1, [x19, #96]
   a5fb8:	6b02003f 	cmp	w1, w2
   a5fbc:	54000082 	b.cs	a5fcc <CScreenDevice::Tabulator()+0x4c>  // b.hs, b.nlast
   a5fc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5fc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a5fc8:	d65f03c0 	ret
   a5fcc:	b900627f 	str	wzr, [x19, #96]
   a5fd0:	aa1403e0 	mov	x0, x20
   a5fd4:	94002977 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a5fd8:	b9406662 	ldr	w2, [x19, #100]
   a5fdc:	b9405e61 	ldr	w1, [x19, #92]
   a5fe0:	0b020000 	add	w0, w0, w2
   a5fe4:	b9006660 	str	w0, [x19, #100]
   a5fe8:	6b01001f 	cmp	w0, w1
   a5fec:	54fffea3 	b.cc	a5fc0 <CScreenDevice::Tabulator()+0x40>  // b.lo, b.ul, b.last
   a5ff0:	aa1303e0 	mov	x0, x19
   a5ff4:	97ffff23 	bl	a5c80 <CScreenDevice::Scroll()>
   a5ff8:	aa1403e0 	mov	x0, x20
   a5ffc:	9400296d 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6000:	b9406661 	ldr	w1, [x19, #100]
   a6004:	4b000021 	sub	w1, w1, w0
   a6008:	b9006661 	str	w1, [x19, #100]
   a600c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6010:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6014:	d65f03c0 	ret
   a6018:	d503201f 	nop
   a601c:	d503201f 	nop

00000000000a6020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   a6020:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a6024:	910003fd 	mov	x29, sp
   a6028:	a9025bf5 	stp	x21, x22, [sp, #32]
   a602c:	9100a016 	add	x22, x0, #0x28
   a6030:	aa0003f5 	mov	x21, x0
   a6034:	aa1603e0 	mov	x0, x22
   a6038:	a90153f3 	stp	x19, x20, [sp, #16]
   a603c:	a90363f7 	stp	x23, x24, [sp, #48]
   a6040:	13001c38 	sxtb	w24, w1
   a6044:	52800017 	mov	w23, #0x0                   	// #0
   a6048:	a9046bf9 	stp	x25, x26, [sp, #64]
   a604c:	2a0303f9 	mov	w25, w3
   a6050:	12003c9a 	and	w26, w4, #0xffff
   a6054:	f9002bfb 	str	x27, [sp, #80]
   a6058:	2a0203fb 	mov	w27, w2
   a605c:	94002955 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6060:	6b17001f 	cmp	w0, w23
   a6064:	540004e9 	b.ls	a6100 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xe0>  // b.plast
   a6068:	2a1b03f4 	mov	w20, w27
   a606c:	52800013 	mov	w19, #0x0                   	// #0
   a6070:	aa1603e0 	mov	x0, x22
   a6074:	9400294b 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6078:	2a0003e4 	mov	w4, w0
   a607c:	2a1703e3 	mov	w3, w23
   a6080:	2a1303e2 	mov	w2, w19
   a6084:	2a1803e1 	mov	w1, w24
   a6088:	aa1603e0 	mov	x0, x22
   a608c:	6b13009f 	cmp	w4, w19
   a6090:	540002c9 	b.ls	a60e8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>  // b.plast
   a6094:	9400294f 	bl	b05d0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   a6098:	2a1a03e1 	mov	w1, w26
   a609c:	37000080 	tbnz	w0, #0, a60ac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
   a60a0:	3941baa0 	ldrb	w0, [x21, #110]
   a60a4:	360001e0 	tbz	w0, #0, a60e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc0>
   a60a8:	7940d6a1 	ldrh	w1, [x21, #106]
   a60ac:	b9404aa0 	ldr	w0, [x21, #72]
   a60b0:	11000673 	add	w19, w19, #0x1
   a60b4:	6b14001f 	cmp	w0, w20
   a60b8:	54000109 	b.ls	a60d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>  // b.plast
   a60bc:	b9404ea0 	ldr	w0, [x21, #76]
   a60c0:	6b19001f 	cmp	w0, w25
   a60c4:	540000a9 	b.ls	a60d8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>  // b.plast
   a60c8:	b94046a0 	ldr	w0, [x21, #68]
   a60cc:	f9401ea2 	ldr	x2, [x21, #56]
   a60d0:	1b005320 	madd	w0, w25, w0, w20
   a60d4:	78207841 	strh	w1, [x2, x0, lsl #1]
   a60d8:	11000694 	add	w20, w20, #0x1
   a60dc:	17ffffe5 	b	a6070 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>
   a60e0:	7940daa1 	ldrh	w1, [x21, #108]
   a60e4:	17fffff2 	b	a60ac <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
   a60e8:	110006f7 	add	w23, w23, #0x1
   a60ec:	aa1603e0 	mov	x0, x22
   a60f0:	11000739 	add	w25, w25, #0x1
   a60f4:	9400292f 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a60f8:	6b17001f 	cmp	w0, w23
   a60fc:	54fffb68 	b.hi	a6068 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>  // b.pmore
   a6100:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6104:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6108:	a94363f7 	ldp	x23, x24, [sp, #48]
   a610c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a6110:	f9402bfb 	ldr	x27, [sp, #80]
   a6114:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a6118:	d65f03c0 	ret
   a611c:	d503201f 	nop

00000000000a6120 <CScreenDevice::DisplayChar(char)>:
   a6120:	12001c22 	and	w2, w1, #0xff
   a6124:	71007c5f 	cmp	w2, #0x1f
   a6128:	54000329 	b.ls	a618c <CScreenDevice::DisplayChar(char)+0x6c>  // b.plast
   a612c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a6130:	13001c21 	sxtb	w1, w1
   a6134:	910003fd 	mov	x29, sp
   a6138:	3941b805 	ldrb	w5, [x0, #110]
   a613c:	7940d406 	ldrh	w6, [x0, #106]
   a6140:	294c0c02 	ldp	w2, w3, [x0, #96]
   a6144:	720000a5 	ands	w5, w5, #0x1
   a6148:	7940d804 	ldrh	w4, [x0, #108]
   a614c:	a90153f3 	stp	x19, x20, [sp, #16]
   a6150:	aa0003f3 	mov	x19, x0
   a6154:	1a8400c4 	csel	w4, w6, w4, eq	// eq = none
   a6158:	9100a014 	add	x20, x0, #0x28
   a615c:	97ffffb1 	bl	a6020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a6160:	aa1403e0 	mov	x0, x20
   a6164:	9400290f 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6168:	b9406262 	ldr	w2, [x19, #96]
   a616c:	b9404a61 	ldr	w1, [x19, #72]
   a6170:	0b020000 	add	w0, w0, w2
   a6174:	b9006260 	str	w0, [x19, #96]
   a6178:	6b01001f 	cmp	w0, w1
   a617c:	540000a2 	b.cs	a6190 <CScreenDevice::DisplayChar(char)+0x70>  // b.hs, b.nlast
   a6180:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6184:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6188:	d65f03c0 	ret
   a618c:	d65f03c0 	ret
   a6190:	b900627f 	str	wzr, [x19, #96]
   a6194:	aa1403e0 	mov	x0, x20
   a6198:	94002906 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a619c:	b9406662 	ldr	w2, [x19, #100]
   a61a0:	b9405e61 	ldr	w1, [x19, #92]
   a61a4:	0b020000 	add	w0, w0, w2
   a61a8:	b9006660 	str	w0, [x19, #100]
   a61ac:	6b01001f 	cmp	w0, w1
   a61b0:	54fffe83 	b.cc	a6180 <CScreenDevice::DisplayChar(char)+0x60>  // b.lo, b.ul, b.last
   a61b4:	aa1303e0 	mov	x0, x19
   a61b8:	97fffeb2 	bl	a5c80 <CScreenDevice::Scroll()>
   a61bc:	aa1403e0 	mov	x0, x20
   a61c0:	940028fc 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a61c4:	b9406661 	ldr	w1, [x19, #100]
   a61c8:	4b000021 	sub	w1, w1, w0
   a61cc:	b9006661 	str	w1, [x19, #100]
   a61d0:	17ffffec 	b	a6180 <CScreenDevice::DisplayChar(char)+0x60>
   a61d4:	d503201f 	nop
   a61d8:	d503201f 	nop
   a61dc:	d503201f 	nop

00000000000a61e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   a61e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a61e4:	910003fd 	mov	x29, sp
   a61e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a61ec:	9100a016 	add	x22, x0, #0x28
   a61f0:	aa0003f5 	mov	x21, x0
   a61f4:	aa1603e0 	mov	x0, x22
   a61f8:	a90153f3 	stp	x19, x20, [sp, #16]
   a61fc:	a90363f7 	stp	x23, x24, [sp, #48]
   a6200:	2a0203f7 	mov	w23, w2
   a6204:	52800018 	mov	w24, #0x0                   	// #0
   a6208:	f90023f9 	str	x25, [sp, #64]
   a620c:	2a0103f9 	mov	w25, w1
   a6210:	940028e8 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6214:	6b18001f 	cmp	w0, w24
   a6218:	540003e9 	b.ls	a6294 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xb4>  // b.plast
   a621c:	d503201f 	nop
   a6220:	aa1603e0 	mov	x0, x22
   a6224:	52800014 	mov	w20, #0x0                   	// #0
   a6228:	940028de 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a622c:	2a1903f3 	mov	w19, w25
   a6230:	6b14001f 	cmp	w0, w20
   a6234:	54000249 	b.ls	a627c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x9c>  // b.plast
   a6238:	b9404aa0 	ldr	w0, [x21, #72]
   a623c:	11000694 	add	w20, w20, #0x1
   a6240:	6b13001f 	cmp	w0, w19
   a6244:	54000129 	b.ls	a6268 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x88>  // b.plast
   a6248:	b9404ea0 	ldr	w0, [x21, #76]
   a624c:	6b0002ff 	cmp	w23, w0
   a6250:	540000c2 	b.cs	a6268 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x88>  // b.hs, b.nlast
   a6254:	b94046a0 	ldr	w0, [x21, #68]
   a6258:	f9401ea1 	ldr	x1, [x21, #56]
   a625c:	7940daa2 	ldrh	w2, [x21, #108]
   a6260:	1b004ee0 	madd	w0, w23, w0, w19
   a6264:	78207822 	strh	w2, [x1, x0, lsl #1]
   a6268:	aa1603e0 	mov	x0, x22
   a626c:	11000673 	add	w19, w19, #0x1
   a6270:	940028cc 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6274:	6b14001f 	cmp	w0, w20
   a6278:	54fffe08 	b.hi	a6238 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x58>  // b.pmore
   a627c:	11000718 	add	w24, w24, #0x1
   a6280:	aa1603e0 	mov	x0, x22
   a6284:	110006f7 	add	w23, w23, #0x1
   a6288:	940028ca 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a628c:	6b18001f 	cmp	w0, w24
   a6290:	54fffc88 	b.hi	a6220 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x40>  // b.pmore
   a6294:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6298:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a629c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a62a0:	f94023f9 	ldr	x25, [sp, #64]
   a62a4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a62a8:	d65f03c0 	ret
   a62ac:	d503201f 	nop

00000000000a62b0 <CScreenDevice::ClearLineEnd()>:
   a62b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a62b4:	910003fd 	mov	x29, sp
   a62b8:	a90153f3 	stp	x19, x20, [sp, #16]
   a62bc:	aa0003f4 	mov	x20, x0
   a62c0:	b9404800 	ldr	w0, [x0, #72]
   a62c4:	b9406293 	ldr	w19, [x20, #96]
   a62c8:	6b00027f 	cmp	w19, w0
   a62cc:	540001c2 	b.cs	a6304 <CScreenDevice::ClearLineEnd()+0x54>  // b.hs, b.nlast
   a62d0:	f90013f5 	str	x21, [sp, #32]
   a62d4:	9100a295 	add	x21, x20, #0x28
   a62d8:	b9406682 	ldr	w2, [x20, #100]
   a62dc:	2a1303e1 	mov	w1, w19
   a62e0:	aa1403e0 	mov	x0, x20
   a62e4:	97ffffbf 	bl	a61e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a62e8:	aa1503e0 	mov	x0, x21
   a62ec:	940028ad 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a62f0:	b9404a81 	ldr	w1, [x20, #72]
   a62f4:	0b000273 	add	w19, w19, w0
   a62f8:	6b13003f 	cmp	w1, w19
   a62fc:	54fffee8 	b.hi	a62d8 <CScreenDevice::ClearLineEnd()+0x28>  // b.pmore
   a6300:	f94013f5 	ldr	x21, [sp, #32]
   a6304:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6308:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a630c:	d65f03c0 	ret

00000000000a6310 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   a6310:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6314:	910003fd 	mov	x29, sp
   a6318:	a90153f3 	stp	x19, x20, [sp, #16]
   a631c:	aa0003f4 	mov	x20, x0
   a6320:	f9001bf7 	str	x23, [sp, #48]
   a6324:	b9406297 	ldr	w23, [x20, #96]
   a6328:	a9025bf5 	stp	x21, x22, [sp, #32]
   a632c:	2a0103f5 	mov	w21, w1
   a6330:	9100a016 	add	x22, x0, #0x28
   a6334:	aa1603e0 	mov	x0, x22
   a6338:	9400289a 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a633c:	b9404a81 	ldr	w1, [x20, #72]
   a6340:	1b155c15 	madd	w21, w0, w21, w23
   a6344:	b9406293 	ldr	w19, [x20, #96]
   a6348:	6b0102bf 	cmp	w21, w1
   a634c:	1a8192b5 	csel	w21, w21, w1, ls	// ls = plast
   a6350:	6b1302bf 	cmp	w21, w19
   a6354:	54000149 	b.ls	a637c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x6c>  // b.plast
   a6358:	b9406682 	ldr	w2, [x20, #100]
   a635c:	2a1303e1 	mov	w1, w19
   a6360:	aa1403e0 	mov	x0, x20
   a6364:	97ffff9f 	bl	a61e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a6368:	aa1603e0 	mov	x0, x22
   a636c:	9400288d 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6370:	0b000273 	add	w19, w19, w0
   a6374:	6b1302bf 	cmp	w21, w19
   a6378:	54ffff08 	b.hi	a6358 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x48>  // b.pmore
   a637c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6380:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6384:	f9401bf7 	ldr	x23, [sp, #48]
   a6388:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a638c:	d65f03c0 	ret

00000000000a6390 <CScreenDevice::EraseChars(unsigned int)>:
   a6390:	35000041 	cbnz	w1, a6398 <CScreenDevice::EraseChars(unsigned int)+0x8>
   a6394:	d65f03c0 	ret
   a6398:	17ffffde 	b	a6310 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a639c:	d503201f 	nop

00000000000a63a0 <CScreenDevice::ClearDisplayEnd()>:
   a63a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a63a4:	910003fd 	mov	x29, sp
   a63a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a63ac:	aa0003f3 	mov	x19, x0
   a63b0:	b9404800 	ldr	w0, [x0, #72]
   a63b4:	b9406274 	ldr	w20, [x19, #96]
   a63b8:	f90013f5 	str	x21, [sp, #32]
   a63bc:	9100a275 	add	x21, x19, #0x28
   a63c0:	6b00029f 	cmp	w20, w0
   a63c4:	54000162 	b.cs	a63f0 <CScreenDevice::ClearDisplayEnd()+0x50>  // b.hs, b.nlast
   a63c8:	b9406662 	ldr	w2, [x19, #100]
   a63cc:	2a1403e1 	mov	w1, w20
   a63d0:	aa1303e0 	mov	x0, x19
   a63d4:	97ffff83 	bl	a61e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a63d8:	aa1503e0 	mov	x0, x21
   a63dc:	94002871 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a63e0:	b9404a61 	ldr	w1, [x19, #72]
   a63e4:	0b000294 	add	w20, w20, w0
   a63e8:	6b01029f 	cmp	w20, w1
   a63ec:	54fffee3 	b.cc	a63c8 <CScreenDevice::ClearDisplayEnd()+0x28>  // b.lo, b.ul, b.last
   a63f0:	b9406674 	ldr	w20, [x19, #100]
   a63f4:	aa1503e0 	mov	x0, x21
   a63f8:	9400286e 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a63fc:	29480663 	ldp	w3, w1, [x19, #64]
   a6400:	0b000280 	add	w0, w20, w0
   a6404:	f9401e65 	ldr	x5, [x19, #56]
   a6408:	1b017c04 	mul	w4, w0, w1
   a640c:	53017c63 	lsr	w3, w3, #1
   a6410:	4b040063 	sub	w3, w3, w4
   a6414:	8b040088 	add	x8, x4, x4
   a6418:	51000461 	sub	w1, w3, #0x1
   a641c:	8b0800a0 	add	x0, x5, x8
   a6420:	34000243 	cbz	w3, a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>
   a6424:	7100343f 	cmp	w1, #0xd
   a6428:	54000109 	b.ls	a6448 <CScreenDevice::ClearDisplayEnd()+0xa8>  // b.plast
   a642c:	8b234082 	add	x2, x4, w3, uxtw
   a6430:	9101b267 	add	x7, x19, #0x6c
   a6434:	9101ba66 	add	x6, x19, #0x6e
   a6438:	8b0204a2 	add	x2, x5, x2, lsl #1
   a643c:	eb07005f 	cmp	x2, x7
   a6440:	fa4080c0 	ccmp	x6, x0, #0x0, hi	// hi = pmore
   a6444:	540001a9 	b.ls	a6478 <CScreenDevice::ClearDisplayEnd()+0xd8>  // b.plast
   a6448:	d37f7c21 	ubfiz	x1, x1, #1, #32
   a644c:	91000821 	add	x1, x1, #0x2
   a6450:	8b010001 	add	x1, x0, x1
   a6454:	d503201f 	nop
   a6458:	7940da62 	ldrh	w2, [x19, #108]
   a645c:	78002402 	strh	w2, [x0], #2
   a6460:	eb01001f 	cmp	x0, x1
   a6464:	54ffffa1 	b.ne	a6458 <CScreenDevice::ClearDisplayEnd()+0xb8>  // b.any
   a6468:	a94153f3 	ldp	x19, x20, [sp, #16]
   a646c:	f94013f5 	ldr	x21, [sp, #32]
   a6470:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6474:	d65f03c0 	ret
   a6478:	cb4007e6 	neg	x6, x0, lsr #1
   a647c:	720008c2 	ands	w2, w6, #0x7
   a6480:	540009a0 	b.eq	a65b4 <CScreenDevice::ClearDisplayEnd()+0x214>  // b.none
   a6484:	7940da61 	ldrh	w1, [x19, #108]
   a6488:	f27f04df 	tst	x6, #0x6
   a648c:	782868a1 	strh	w1, [x5, x8]
   a6490:	540008c0 	b.eq	a65a8 <CScreenDevice::ClearDisplayEnd()+0x208>  // b.none
   a6494:	79000401 	strh	w1, [x0, #2]
   a6498:	7100085f 	cmp	w2, #0x2
   a649c:	54000909 	b.ls	a65bc <CScreenDevice::ClearDisplayEnd()+0x21c>  // b.plast
   a64a0:	7940da61 	ldrh	w1, [x19, #108]
   a64a4:	79000801 	strh	w1, [x0, #4]
   a64a8:	36100906 	tbz	w6, #2, a65c8 <CScreenDevice::ClearDisplayEnd()+0x228>
   a64ac:	79000c01 	strh	w1, [x0, #6]
   a64b0:	91002006 	add	x6, x0, #0x8
   a64b4:	51001461 	sub	w1, w3, #0x5
   a64b8:	7100105f 	cmp	w2, #0x4
   a64bc:	540001c9 	b.ls	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>  // b.plast
   a64c0:	7940da61 	ldrh	w1, [x19, #108]
   a64c4:	7100145f 	cmp	w2, #0x5
   a64c8:	79001001 	strh	w1, [x0, #8]
   a64cc:	54000840 	b.eq	a65d4 <CScreenDevice::ClearDisplayEnd()+0x234>  // b.none
   a64d0:	79001401 	strh	w1, [x0, #10]
   a64d4:	91003006 	add	x6, x0, #0xc
   a64d8:	51001c61 	sub	w1, w3, #0x7
   a64dc:	71001c5f 	cmp	w2, #0x7
   a64e0:	540000a1 	b.ne	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>  // b.any
   a64e4:	7940da67 	ldrh	w7, [x19, #108]
   a64e8:	91003806 	add	x6, x0, #0xe
   a64ec:	51002061 	sub	w1, w3, #0x8
   a64f0:	79001807 	strh	w7, [x0, #12]
   a64f4:	2a0203e0 	mov	w0, w2
   a64f8:	7d40da60 	ldr	h0, [x19, #108]
   a64fc:	4b020063 	sub	w3, w3, w2
   a6500:	8b040000 	add	x0, x0, x4
   a6504:	53037c62 	lsr	w2, w3, #3
   a6508:	8b0004a0 	add	x0, x5, x0, lsl #1
   a650c:	4e020400 	dup	v0.8h, v0.h[0]
   a6510:	8b225002 	add	x2, x0, w2, uxtw #4
   a6514:	d503201f 	nop
   a6518:	3c810400 	str	q0, [x0], #16
   a651c:	eb02001f 	cmp	x0, x2
   a6520:	54ffffc1 	b.ne	a6518 <CScreenDevice::ClearDisplayEnd()+0x178>  // b.any
   a6524:	927d7060 	and	x0, x3, #0xfffffff8
   a6528:	121d7062 	and	w2, w3, #0xfffffff8
   a652c:	8b000000 	add	x0, x0, x0
   a6530:	4b020021 	sub	w1, w1, w2
   a6534:	12000863 	and	w3, w3, #0x7
   a6538:	8b0000c2 	add	x2, x6, x0
   a653c:	34fff963 	cbz	w3, a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>
   a6540:	7940da63 	ldrh	w3, [x19, #108]
   a6544:	782068c3 	strh	w3, [x6, x0]
   a6548:	34fff901 	cbz	w1, a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>
   a654c:	79000443 	strh	w3, [x2, #2]
   a6550:	7100043f 	cmp	w1, #0x1
   a6554:	54fff8a0 	b.eq	a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>  // b.none
   a6558:	7940da60 	ldrh	w0, [x19, #108]
   a655c:	7100083f 	cmp	w1, #0x2
   a6560:	79000840 	strh	w0, [x2, #4]
   a6564:	54fff820 	b.eq	a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>  // b.none
   a6568:	79000c40 	strh	w0, [x2, #6]
   a656c:	71000c3f 	cmp	w1, #0x3
   a6570:	54fff7c0 	b.eq	a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>  // b.none
   a6574:	7940da60 	ldrh	w0, [x19, #108]
   a6578:	7100103f 	cmp	w1, #0x4
   a657c:	79001040 	strh	w0, [x2, #8]
   a6580:	54fff740 	b.eq	a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>  // b.none
   a6584:	79001440 	strh	w0, [x2, #10]
   a6588:	7100143f 	cmp	w1, #0x5
   a658c:	54fff6e0 	b.eq	a6468 <CScreenDevice::ClearDisplayEnd()+0xc8>  // b.none
   a6590:	7940da60 	ldrh	w0, [x19, #108]
   a6594:	79001840 	strh	w0, [x2, #12]
   a6598:	a94153f3 	ldp	x19, x20, [sp, #16]
   a659c:	f94013f5 	ldr	x21, [sp, #32]
   a65a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a65a4:	d65f03c0 	ret
   a65a8:	91000806 	add	x6, x0, #0x2
   a65ac:	51000861 	sub	w1, w3, #0x2
   a65b0:	17ffffd1 	b	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>
   a65b4:	aa0003e6 	mov	x6, x0
   a65b8:	17ffffcf 	b	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>
   a65bc:	91001006 	add	x6, x0, #0x4
   a65c0:	51000c61 	sub	w1, w3, #0x3
   a65c4:	17ffffcc 	b	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>
   a65c8:	91001806 	add	x6, x0, #0x6
   a65cc:	51001061 	sub	w1, w3, #0x4
   a65d0:	17ffffc9 	b	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>
   a65d4:	91002806 	add	x6, x0, #0xa
   a65d8:	51001861 	sub	w1, w3, #0x6
   a65dc:	17ffffc6 	b	a64f4 <CScreenDevice::ClearDisplayEnd()+0x154>

00000000000a65e0 <CScreenDevice::Initialize()>:
   a65e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a65e4:	910003fd 	mov	x29, sp
   a65e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a65ec:	aa0003f3 	mov	x19, x0
   a65f0:	39406014 	ldrb	w20, [x0, #24]
   a65f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a65f8:	37000294 	tbnz	w20, #0, a6648 <CScreenDevice::Initialize()+0x68>
   a65fc:	d2801400 	mov	x0, #0xa0                  	// #160
   a6600:	9400154c 	bl	abb30 <operator new(unsigned long)>
   a6604:	29420a61 	ldp	w1, w2, [x19, #16]
   a6608:	aa0003f5 	mov	x21, x0
   a660c:	b9401e66 	ldr	w6, [x19, #28]
   a6610:	52800007 	mov	w7, #0x0                   	// #0
   a6614:	52800005 	mov	w5, #0x0                   	// #0
   a6618:	52800004 	mov	w4, #0x0                   	// #0
   a661c:	52800203 	mov	w3, #0x10                  	// #16
   a6620:	940025e0 	bl	afda0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
   a6624:	f9001275 	str	x21, [x19, #32]
   a6628:	aa1503e0 	mov	x0, x21
   a662c:	940026b5 	bl	b0100 <CBcmFrameBuffer::Initialize()>
   a6630:	37000660 	tbnz	w0, #0, a66fc <CScreenDevice::Initialize()+0x11c>
   a6634:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6638:	2a1403e0 	mov	w0, w20
   a663c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6640:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6644:	d65f03c0 	ret
   a6648:	9100a015 	add	x21, x0, #0x28
   a664c:	29420400 	ldp	w0, w1, [x0, #16]
   a6650:	29088260 	stp	w0, w0, [x19, #68]
   a6654:	b9004e61 	str	w1, [x19, #76]
   a6658:	1b017c00 	mul	w0, w0, w1
   a665c:	0b000001 	add	w1, w0, w0
   a6660:	b9004261 	str	w1, [x19, #64]
   a6664:	d37f7c00 	ubfiz	x0, x0, #1, #32
   a6668:	9400153a 	bl	abb50 <operator new[](unsigned long)>
   a666c:	f9001e60 	str	x0, [x19, #56]
   a6670:	b9404e74 	ldr	w20, [x19, #76]
   a6674:	aa1503e0 	mov	x0, x21
   a6678:	940027ce 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a667c:	2a0003e1 	mov	w1, w0
   a6680:	aa1503e0 	mov	x0, x21
   a6684:	1ac10a94 	udiv	w20, w20, w1
   a6688:	940027ca 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a668c:	2a0003e1 	mov	w1, w0
   a6690:	b9405a62 	ldr	w2, [x19, #88]
   a6694:	b9006662 	str	w2, [x19, #100]
   a6698:	aa1303e0 	mov	x0, x19
   a669c:	1b017e81 	mul	w1, w20, w1
   a66a0:	b9005261 	str	w1, [x19, #80]
   a66a4:	290bfe61 	stp	w1, wzr, [x19, #92]
   a66a8:	97ffff3e 	bl	a63a0 <CScreenDevice::ClearDisplayEnd()>
   a66ac:	3941a260 	ldrb	w0, [x19, #104]
   a66b0:	37000200 	tbnz	w0, #0, a66f0 <CScreenDevice::Initialize()+0x110>
   a66b4:	97fff1ff 	bl	a2eb0 <CDeviceNameService::Get()>
   a66b8:	b00000b4 	adrp	x20, bb000 <s_ActLEDInfo+0x1f0>
   a66bc:	91052294 	add	x20, x20, #0x148
   a66c0:	b9401e62 	ldr	w2, [x19, #28]
   a66c4:	aa1403e1 	mov	x1, x20
   a66c8:	52800003 	mov	w3, #0x0                   	// #0
   a66cc:	11000442 	add	w2, w2, #0x1
   a66d0:	97fff248 	bl	a2ff0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
   a66d4:	b40006e0 	cbz	x0, a67b0 <CScreenDevice::Initialize()+0x1d0>
   a66d8:	52800034 	mov	w20, #0x1                   	// #1
   a66dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a66e0:	2a1403e0 	mov	w0, w20
   a66e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a66e8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a66ec:	d65f03c0 	ret
   a66f0:	aa1303e0 	mov	x0, x19
   a66f4:	97fffb5f 	bl	a5470 <CScreenDevice::InvertCursor() [clone .part.0]>
   a66f8:	17ffffef 	b	a66b4 <CScreenDevice::Initialize()+0xd4>
   a66fc:	f9401260 	ldr	x0, [x19, #32]
   a6700:	94002640 	bl	b0000 <CBcmFrameBuffer::GetDepth() const>
   a6704:	7100401f 	cmp	w0, #0x10
   a6708:	54fff961 	b.ne	a6634 <CScreenDevice::Initialize()+0x54>  // b.any
   a670c:	f9401260 	ldr	x0, [x19, #32]
   a6710:	f9001bf7 	str	x23, [sp, #48]
   a6714:	9100a275 	add	x21, x19, #0x28
   a6718:	9400263e 	bl	b0010 <CBcmFrameBuffer::GetBuffer() const>
   a671c:	2a0003e1 	mov	w1, w0
   a6720:	f9401260 	ldr	x0, [x19, #32]
   a6724:	f9001e61 	str	x1, [x19, #56]
   a6728:	9400263e 	bl	b0020 <CBcmFrameBuffer::GetSize() const>
   a672c:	2a0003e1 	mov	w1, w0
   a6730:	f9401260 	ldr	x0, [x19, #32]
   a6734:	b9004261 	str	w1, [x19, #64]
   a6738:	9400262e 	bl	afff0 <CBcmFrameBuffer::GetPitch() const>
   a673c:	2a0003e1 	mov	w1, w0
   a6740:	f9401260 	ldr	x0, [x19, #32]
   a6744:	b9004661 	str	w1, [x19, #68]
   a6748:	9400261a 	bl	affb0 <CBcmFrameBuffer::GetWidth() const>
   a674c:	2a0003e1 	mov	w1, w0
   a6750:	f9401260 	ldr	x0, [x19, #32]
   a6754:	b9004a61 	str	w1, [x19, #72]
   a6758:	9400261a 	bl	affc0 <CBcmFrameBuffer::GetHeight() const>
   a675c:	b9004e60 	str	w0, [x19, #76]
   a6760:	aa1503e0 	mov	x0, x21
   a6764:	9400278f 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6768:	2a0003f7 	mov	w23, w0
   a676c:	aa1503e0 	mov	x0, x21
   a6770:	94002790 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6774:	2a0003f6 	mov	w22, w0
   a6778:	aa1503e0 	mov	x0, x21
   a677c:	94002791 	bl	b05c0 <CCharGenerator::GetUnderline() const>
   a6780:	4b0002d6 	sub	w22, w22, w0
   a6784:	1b177ec0 	mul	w0, w22, w23
   a6788:	d37ff800 	lsl	x0, x0, #1
   a678c:	940014f1 	bl	abb50 <operator new[](unsigned long)>
   a6790:	b9404661 	ldr	w1, [x19, #68]
   a6794:	f9001a60 	str	x0, [x19, #48]
   a6798:	12000420 	and	w0, w1, #0x3
   a679c:	350001c0 	cbnz	w0, a67d4 <CScreenDevice::Initialize()+0x1f4>
   a67a0:	f9401bf7 	ldr	x23, [sp, #48]
   a67a4:	53017c21 	lsr	w1, w1, #1
   a67a8:	b9004661 	str	w1, [x19, #68]
   a67ac:	17ffffb1 	b	a6670 <CScreenDevice::Initialize()+0x90>
   a67b0:	97fff1c0 	bl	a2eb0 <CDeviceNameService::Get()>
   a67b4:	b9401e62 	ldr	w2, [x19, #28]
   a67b8:	aa1403e1 	mov	x1, x20
   a67bc:	aa1303e3 	mov	x3, x19
   a67c0:	52800004 	mov	w4, #0x0                   	// #0
   a67c4:	11000442 	add	w2, w2, #0x1
   a67c8:	52800034 	mov	w20, #0x1                   	// #1
   a67cc:	97fff1c5 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   a67d0:	17ffffc3 	b	a66dc <CScreenDevice::Initialize()+0xfc>
   a67d4:	f9401bf7 	ldr	x23, [sp, #48]
   a67d8:	17ffff97 	b	a6634 <CScreenDevice::Initialize()+0x54>
   a67dc:	d503201f 	nop

00000000000a67e0 <CScreenDevice::Resize(unsigned int, unsigned int)>:
   a67e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a67e4:	910003fd 	mov	x29, sp
   a67e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a67ec:	aa0003f3 	mov	x19, x0
   a67f0:	39406000 	ldrb	w0, [x0, #24]
   a67f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a67f8:	2a0203f4 	mov	w20, w2
   a67fc:	2a0103f5 	mov	w21, w1
   a6800:	36000080 	tbz	w0, #0, a6810 <CScreenDevice::Resize(unsigned int, unsigned int)+0x30>
   a6804:	f9401e60 	ldr	x0, [x19, #56]
   a6808:	b4000040 	cbz	x0, a6810 <CScreenDevice::Resize(unsigned int, unsigned int)+0x30>
   a680c:	940014e1 	bl	abb90 <operator delete[](void*)>
   a6810:	f9401276 	ldr	x22, [x19, #32]
   a6814:	f9001e7f 	str	xzr, [x19, #56]
   a6818:	b40000d6 	cbz	x22, a6830 <CScreenDevice::Resize(unsigned int, unsigned int)+0x50>
   a681c:	aa1603e0 	mov	x0, x22
   a6820:	940025b0 	bl	afee0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   a6824:	aa1603e0 	mov	x0, x22
   a6828:	d2801401 	mov	x1, #0xa0                  	// #160
   a682c:	940014e1 	bl	abbb0 <operator delete(void*, unsigned long)>
   a6830:	f9401a60 	ldr	x0, [x19, #48]
   a6834:	f900127f 	str	xzr, [x19, #32]
   a6838:	b4000040 	cbz	x0, a6840 <CScreenDevice::Resize(unsigned int, unsigned int)+0x60>
   a683c:	940014d5 	bl	abb90 <operator delete[](void*)>
   a6840:	d2800021 	mov	x1, #0x1                   	// #1
   a6844:	f2bffbe1 	movk	x1, #0xffdf, lsl #16
   a6848:	29025275 	stp	w21, w20, [x19, #16]
   a684c:	aa1303e0 	mov	x0, x19
   a6850:	f9001a7f 	str	xzr, [x19, #48]
   a6854:	290afe7f 	stp	wzr, wzr, [x19, #84]
   a6858:	f900327f 	str	xzr, [x19, #96]
   a685c:	f9003661 	str	x1, [x19, #104]
   a6860:	3901e27f 	strb	wzr, [x19, #120]
   a6864:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6868:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a686c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6870:	17ffff5c 	b	a65e0 <CScreenDevice::Initialize()>
   a6874:	d503201f 	nop
   a6878:	d503201f 	nop
   a687c:	d503201f 	nop

00000000000a6880 <CScreenDevice::Write(char)>:
   a6880:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6884:	13001c21 	sxtb	w1, w1
   a6888:	910003fd 	mov	x29, sp
   a688c:	b9405402 	ldr	w2, [x0, #84]
   a6890:	a90153f3 	stp	x19, x20, [sp, #16]
   a6894:	aa0003f3 	mov	x19, x0
   a6898:	7100105f 	cmp	w2, #0x4
   a689c:	540006c0 	b.eq	a6974 <CScreenDevice::Write(char)+0xf4>  // b.none
   a68a0:	54000188 	b.hi	a68d0 <CScreenDevice::Write(char)+0x50>  // b.pmore
   a68a4:	7100085f 	cmp	w2, #0x2
   a68a8:	54000900 	b.eq	a69c8 <CScreenDevice::Write(char)+0x148>  // b.none
   a68ac:	71000c5f 	cmp	w2, #0x3
   a68b0:	54000720 	b.eq	a6994 <CScreenDevice::Write(char)+0x114>  // b.none
   a68b4:	340002e2 	cbz	w2, a6910 <CScreenDevice::Write(char)+0x90>
   a68b8:	71016c3f 	cmp	w1, #0x5b
   a68bc:	540014a0 	b.eq	a6b50 <CScreenDevice::Write(char)+0x2d0>  // b.none
   a68c0:	b900567f 	str	wzr, [x19, #84]
   a68c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a68c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a68cc:	d65f03c0 	ret
   a68d0:	7100185f 	cmp	w2, #0x6
   a68d4:	54000a40 	b.eq	a6a1c <CScreenDevice::Write(char)+0x19c>  // b.none
   a68d8:	71001c5f 	cmp	w2, #0x7
   a68dc:	540002e0 	b.eq	a6938 <CScreenDevice::Write(char)+0xb8>  // b.none
   a68e0:	7100145f 	cmp	w2, #0x5
   a68e4:	54fffee1 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a68e8:	5100c021 	sub	w1, w1, #0x30
   a68ec:	12001c20 	and	w0, w1, #0xff
   a68f0:	7100241f 	cmp	w0, #0x9
   a68f4:	54fffe68 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a68f8:	528000c0 	mov	w0, #0x6                   	// #6
   a68fc:	b9005660 	str	w0, [x19, #84]
   a6900:	b9007661 	str	w1, [x19, #116]
   a6904:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6908:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a690c:	d65f03c0 	ret
   a6910:	7100283f 	cmp	w1, #0xa
   a6914:	54001660 	b.eq	a6be0 <CScreenDevice::Write(char)+0x360>  // b.none
   a6918:	54000ead 	b.le	a6aec <CScreenDevice::Write(char)+0x26c>
   a691c:	7100343f 	cmp	w1, #0xd
   a6920:	54001b60 	b.eq	a6c8c <CScreenDevice::Write(char)+0x40c>  // b.none
   a6924:	71006c3f 	cmp	w1, #0x1b
   a6928:	54001861 	b.ne	a6c34 <CScreenDevice::Write(char)+0x3b4>  // b.any
   a692c:	52800020 	mov	w0, #0x1                   	// #1
   a6930:	b9005660 	str	w0, [x19, #84]
   a6934:	17fffff4 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6938:	121d7820 	and	w0, w1, #0xfffffffb
   a693c:	7101a01f 	cmp	w0, #0x68
   a6940:	540008e0 	b.eq	a6a5c <CScreenDevice::Write(char)+0x1dc>  // b.none
   a6944:	5100c021 	sub	w1, w1, #0x30
   a6948:	12001c20 	and	w0, w1, #0xff
   a694c:	7100241f 	cmp	w0, #0x9
   a6950:	54fffb88 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a6954:	b9407260 	ldr	w0, [x19, #112]
   a6958:	52800142 	mov	w2, #0xa                   	// #10
   a695c:	1b020400 	madd	w0, w0, w2, w1
   a6960:	b9007260 	str	w0, [x19, #112]
   a6964:	71018c1f 	cmp	w0, #0x63
   a6968:	54fffce9 	b.ls	a6904 <CScreenDevice::Write(char)+0x84>  // b.plast
   a696c:	b900567f 	str	wzr, [x19, #84]
   a6970:	17ffffd5 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6974:	5100c021 	sub	w1, w1, #0x30
   a6978:	12001c20 	and	w0, w1, #0xff
   a697c:	7100241f 	cmp	w0, #0x9
   a6980:	54fffa08 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a6984:	528000e0 	mov	w0, #0x7                   	// #7
   a6988:	b9005660 	str	w0, [x19, #84]
   a698c:	b9007261 	str	w1, [x19, #112]
   a6990:	17ffffdd 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6994:	7101403f 	cmp	w1, #0x50
   a6998:	54fff940 	b.eq	a68c0 <CScreenDevice::Write(char)+0x40>  // b.none
   a699c:	54000b6d 	b.le	a6b08 <CScreenDevice::Write(char)+0x288>
   a69a0:	7101b03f 	cmp	w1, #0x6c
   a69a4:	54001880 	b.eq	a6cb4 <CScreenDevice::Write(char)+0x434>  // b.none
   a69a8:	5400176c 	b.gt	a6c94 <CScreenDevice::Write(char)+0x414>
   a69ac:	7101603f 	cmp	w1, #0x58
   a69b0:	540017e1 	b.ne	a6cac <CScreenDevice::Write(char)+0x42c>  // b.any
   a69b4:	b9407001 	ldr	w1, [x0, #112]
   a69b8:	34fff841 	cbz	w1, a68c0 <CScreenDevice::Write(char)+0x40>
   a69bc:	97fffe55 	bl	a6310 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a69c0:	b900567f 	str	wzr, [x19, #84]
   a69c4:	17ffffc0 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a69c8:	7101203f 	cmp	w1, #0x48
   a69cc:	54001960 	b.eq	a6cf8 <CScreenDevice::Write(char)+0x478>  // b.none
   a69d0:	5400056c 	b.gt	a6a7c <CScreenDevice::Write(char)+0x1fc>
   a69d4:	7101083f 	cmp	w1, #0x42
   a69d8:	54000ca0 	b.eq	a6b6c <CScreenDevice::Write(char)+0x2ec>  // b.none
   a69dc:	54000f4c 	b.gt	a6bc4 <CScreenDevice::Write(char)+0x344>
   a69e0:	7100fc3f 	cmp	w1, #0x3f
   a69e4:	54001840 	b.eq	a6cec <CScreenDevice::Write(char)+0x46c>  // b.none
   a69e8:	7101043f 	cmp	w1, #0x41
   a69ec:	54001941 	b.ne	a6d14 <CScreenDevice::Write(char)+0x494>  // b.any
   a69f0:	b9405800 	ldr	w0, [x0, #88]
   a69f4:	b9406661 	ldr	w1, [x19, #100]
   a69f8:	6b00003f 	cmp	w1, w0
   a69fc:	54fff629 	b.ls	a68c0 <CScreenDevice::Write(char)+0x40>  // b.plast
   a6a00:	9100a260 	add	x0, x19, #0x28
   a6a04:	940026eb 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6a08:	b9406661 	ldr	w1, [x19, #100]
   a6a0c:	b900567f 	str	wzr, [x19, #84]
   a6a10:	4b000021 	sub	w1, w1, w0
   a6a14:	b9006661 	str	w1, [x19, #100]
   a6a18:	17ffffab 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6a1c:	7101203f 	cmp	w1, #0x48
   a6a20:	54000ca0 	b.eq	a6bb4 <CScreenDevice::Write(char)+0x334>  // b.none
   a6a24:	7101c83f 	cmp	w1, #0x72
   a6a28:	540009a0 	b.eq	a6b5c <CScreenDevice::Write(char)+0x2dc>  // b.none
   a6a2c:	5100c021 	sub	w1, w1, #0x30
   a6a30:	12001c20 	and	w0, w1, #0xff
   a6a34:	7100241f 	cmp	w0, #0x9
   a6a38:	54fff448 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a6a3c:	b9407660 	ldr	w0, [x19, #116]
   a6a40:	52800142 	mov	w2, #0xa                   	// #10
   a6a44:	1b020400 	madd	w0, w0, w2, w1
   a6a48:	b9007660 	str	w0, [x19, #116]
   a6a4c:	71031c1f 	cmp	w0, #0xc7
   a6a50:	54fff5a9 	b.ls	a6904 <CScreenDevice::Write(char)+0x84>  // b.plast
   a6a54:	b900567f 	str	wzr, [x19, #84]
   a6a58:	17ffff9b 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6a5c:	b9407260 	ldr	w0, [x19, #112]
   a6a60:	7100641f 	cmp	w0, #0x19
   a6a64:	54fff2e1 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6a68:	7101a03f 	cmp	w1, #0x68
   a6a6c:	b900567f 	str	wzr, [x19, #84]
   a6a70:	1a9f17e0 	cset	w0, eq	// eq = none
   a6a74:	3901a260 	strb	w0, [x19, #104]
   a6a78:	17ffff93 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6a7c:	7101343f 	cmp	w1, #0x4d
   a6a80:	54fff20c 	b.gt	a68c0 <CScreenDevice::Write(char)+0x40>
   a6a84:	71012c3f 	cmp	w1, #0x4b
   a6a88:	54fff1cc 	b.gt	a68c0 <CScreenDevice::Write(char)+0x40>
   a6a8c:	7101283f 	cmp	w1, #0x4a
   a6a90:	54001280 	b.eq	a6ce0 <CScreenDevice::Write(char)+0x460>  // b.none
   a6a94:	71012c3f 	cmp	w1, #0x4b
   a6a98:	54fff141 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6a9c:	b9404800 	ldr	w0, [x0, #72]
   a6aa0:	b9406274 	ldr	w20, [x19, #96]
   a6aa4:	6b00029f 	cmp	w20, w0
   a6aa8:	54fff0c2 	b.cs	a68c0 <CScreenDevice::Write(char)+0x40>  // b.hs, b.nlast
   a6aac:	f90013f5 	str	x21, [sp, #32]
   a6ab0:	9100a275 	add	x21, x19, #0x28
   a6ab4:	d503201f 	nop
   a6ab8:	b9406662 	ldr	w2, [x19, #100]
   a6abc:	2a1403e1 	mov	w1, w20
   a6ac0:	aa1303e0 	mov	x0, x19
   a6ac4:	97fffdc7 	bl	a61e0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a6ac8:	aa1503e0 	mov	x0, x21
   a6acc:	940026b5 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6ad0:	b9404a61 	ldr	w1, [x19, #72]
   a6ad4:	0b000294 	add	w20, w20, w0
   a6ad8:	6b01029f 	cmp	w20, w1
   a6adc:	54fffee3 	b.cc	a6ab8 <CScreenDevice::Write(char)+0x238>  // b.lo, b.ul, b.last
   a6ae0:	f94013f5 	ldr	x21, [sp, #32]
   a6ae4:	b900567f 	str	wzr, [x19, #84]
   a6ae8:	17ffff77 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6aec:	7100203f 	cmp	w1, #0x8
   a6af0:	540009c0 	b.eq	a6c28 <CScreenDevice::Write(char)+0x3a8>  // b.none
   a6af4:	7100243f 	cmp	w1, #0x9
   a6af8:	540009e1 	b.ne	a6c34 <CScreenDevice::Write(char)+0x3b4>  // b.any
   a6afc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6b00:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6b04:	17fffd1f 	b	a5f80 <CScreenDevice::Tabulator()>
   a6b08:	7100ec3f 	cmp	w1, #0x3b
   a6b0c:	54000e40 	b.eq	a6cd4 <CScreenDevice::Write(char)+0x454>  // b.none
   a6b10:	51013020 	sub	w0, w1, #0x4c
   a6b14:	12001c00 	and	w0, w0, #0xff
   a6b18:	7100041f 	cmp	w0, #0x1
   a6b1c:	54ffed29 	b.ls	a68c0 <CScreenDevice::Write(char)+0x40>  // b.plast
   a6b20:	5100c021 	sub	w1, w1, #0x30
   a6b24:	12001c20 	and	w0, w1, #0xff
   a6b28:	7100241f 	cmp	w0, #0x9
   a6b2c:	54ffeca8 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a6b30:	b9407260 	ldr	w0, [x19, #112]
   a6b34:	52800142 	mov	w2, #0xa                   	// #10
   a6b38:	1b020400 	madd	w0, w0, w2, w1
   a6b3c:	b9007260 	str	w0, [x19, #112]
   a6b40:	71031c1f 	cmp	w0, #0xc7
   a6b44:	54ffee09 	b.ls	a6904 <CScreenDevice::Write(char)+0x84>  // b.plast
   a6b48:	b900567f 	str	wzr, [x19, #84]
   a6b4c:	17ffff5e 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6b50:	52800040 	mov	w0, #0x2                   	// #2
   a6b54:	b9005660 	str	w0, [x19, #84]
   a6b58:	17ffff6b 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6b5c:	294e0801 	ldp	w1, w2, [x0, #112]
   a6b60:	97fffbb8 	bl	a5a40 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   a6b64:	b900567f 	str	wzr, [x19, #84]
   a6b68:	17ffff57 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6b6c:	9100a014 	add	x20, x0, #0x28
   a6b70:	aa1403e0 	mov	x0, x20
   a6b74:	9400268f 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6b78:	b9406662 	ldr	w2, [x19, #100]
   a6b7c:	b9405e61 	ldr	w1, [x19, #92]
   a6b80:	0b020000 	add	w0, w0, w2
   a6b84:	b9006660 	str	w0, [x19, #100]
   a6b88:	6b01001f 	cmp	w0, w1
   a6b8c:	54ffe9a3 	b.cc	a68c0 <CScreenDevice::Write(char)+0x40>  // b.lo, b.ul, b.last
   a6b90:	aa1303e0 	mov	x0, x19
   a6b94:	97fffc3b 	bl	a5c80 <CScreenDevice::Scroll()>
   a6b98:	aa1403e0 	mov	x0, x20
   a6b9c:	94002685 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6ba0:	b9406661 	ldr	w1, [x19, #100]
   a6ba4:	b900567f 	str	wzr, [x19, #84]
   a6ba8:	4b000021 	sub	w1, w1, w0
   a6bac:	b9006661 	str	w1, [x19, #100]
   a6bb0:	17ffff45 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6bb4:	294e0801 	ldp	w1, w2, [x0, #112]
   a6bb8:	97fffb46 	bl	a58d0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   a6bbc:	b900567f 	str	wzr, [x19, #84]
   a6bc0:	17ffff51 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6bc4:	71010c3f 	cmp	w1, #0x43
   a6bc8:	54000a00 	b.eq	a6d08 <CScreenDevice::Write(char)+0x488>  // b.none
   a6bcc:	7101103f 	cmp	w1, #0x44
   a6bd0:	54ffe781 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6bd4:	97fffb17 	bl	a5830 <CScreenDevice::CursorLeft()>
   a6bd8:	b900567f 	str	wzr, [x19, #84]
   a6bdc:	17ffff4a 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6be0:	9100a014 	add	x20, x0, #0x28
   a6be4:	b900601f 	str	wzr, [x0, #96]
   a6be8:	aa1403e0 	mov	x0, x20
   a6bec:	94002671 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6bf0:	b9406662 	ldr	w2, [x19, #100]
   a6bf4:	b9405e61 	ldr	w1, [x19, #92]
   a6bf8:	0b020000 	add	w0, w0, w2
   a6bfc:	b9006660 	str	w0, [x19, #100]
   a6c00:	6b01001f 	cmp	w0, w1
   a6c04:	54ffe803 	b.cc	a6904 <CScreenDevice::Write(char)+0x84>  // b.lo, b.ul, b.last
   a6c08:	aa1303e0 	mov	x0, x19
   a6c0c:	97fffc1d 	bl	a5c80 <CScreenDevice::Scroll()>
   a6c10:	aa1403e0 	mov	x0, x20
   a6c14:	94002667 	bl	b05b0 <CCharGenerator::GetCharHeight() const>
   a6c18:	b9406661 	ldr	w1, [x19, #100]
   a6c1c:	4b000021 	sub	w1, w1, w0
   a6c20:	b9006661 	str	w1, [x19, #100]
   a6c24:	17ffff38 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6c28:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6c2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6c30:	17fffb00 	b	a5830 <CScreenDevice::CursorLeft()>
   a6c34:	12001c20 	and	w0, w1, #0xff
   a6c38:	71007c1f 	cmp	w0, #0x1f
   a6c3c:	54ffe649 	b.ls	a6904 <CScreenDevice::Write(char)+0x84>  // b.plast
   a6c40:	3941ba65 	ldrb	w5, [x19, #110]
   a6c44:	aa1303e0 	mov	x0, x19
   a6c48:	7940d666 	ldrh	w6, [x19, #106]
   a6c4c:	9100a274 	add	x20, x19, #0x28
   a6c50:	294c0e62 	ldp	w2, w3, [x19, #96]
   a6c54:	720000a5 	ands	w5, w5, #0x1
   a6c58:	7940da64 	ldrh	w4, [x19, #108]
   a6c5c:	1a8400c4 	csel	w4, w6, w4, eq	// eq = none
   a6c60:	97fffcf0 	bl	a6020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a6c64:	aa1403e0 	mov	x0, x20
   a6c68:	9400264e 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6c6c:	b9406262 	ldr	w2, [x19, #96]
   a6c70:	b9404a61 	ldr	w1, [x19, #72]
   a6c74:	0b020000 	add	w0, w0, w2
   a6c78:	b9006260 	str	w0, [x19, #96]
   a6c7c:	6b01001f 	cmp	w0, w1
   a6c80:	54ffe423 	b.cc	a6904 <CScreenDevice::Write(char)+0x84>  // b.lo, b.ul, b.last
   a6c84:	b900627f 	str	wzr, [x19, #96]
   a6c88:	17ffffd8 	b	a6be8 <CScreenDevice::Write(char)+0x368>
   a6c8c:	b900601f 	str	wzr, [x0, #96]
   a6c90:	17ffff1d 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6c94:	7101b43f 	cmp	w1, #0x6d
   a6c98:	54ffe141 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6c9c:	b9407001 	ldr	w1, [x0, #112]
   a6ca0:	97fffb88 	bl	a5ac0 <CScreenDevice::SetStandoutMode(unsigned int)>
   a6ca4:	b900541f 	str	wzr, [x0, #84]
   a6ca8:	17ffff17 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6cac:	7101a03f 	cmp	w1, #0x68
   a6cb0:	54ffe081 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6cb4:	b9407260 	ldr	w0, [x19, #112]
   a6cb8:	7100101f 	cmp	w0, #0x4
   a6cbc:	54ffe021 	b.ne	a68c0 <CScreenDevice::Write(char)+0x40>  // b.any
   a6cc0:	7101a03f 	cmp	w1, #0x68
   a6cc4:	b900567f 	str	wzr, [x19, #84]
   a6cc8:	1a9f17e0 	cset	w0, eq	// eq = none
   a6ccc:	3901be60 	strb	w0, [x19, #111]
   a6cd0:	17fffefd 	b	a68c4 <CScreenDevice::Write(char)+0x44>
   a6cd4:	528000a0 	mov	w0, #0x5                   	// #5
   a6cd8:	b9005660 	str	w0, [x19, #84]
   a6cdc:	17ffff0a 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6ce0:	97fffdb0 	bl	a63a0 <CScreenDevice::ClearDisplayEnd()>
   a6ce4:	b900567f 	str	wzr, [x19, #84]
   a6ce8:	17ffff07 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6cec:	52800080 	mov	w0, #0x4                   	// #4
   a6cf0:	b9005660 	str	w0, [x19, #84]
   a6cf4:	17ffff04 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6cf8:	b9405800 	ldr	w0, [x0, #88]
   a6cfc:	b900567f 	str	wzr, [x19, #84]
   a6d00:	290c027f 	stp	wzr, w0, [x19, #96]
   a6d04:	17ffff00 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6d08:	97fffc7a 	bl	a5ef0 <CScreenDevice::CursorRight()>
   a6d0c:	b900567f 	str	wzr, [x19, #84]
   a6d10:	17fffefd 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6d14:	5100c021 	sub	w1, w1, #0x30
   a6d18:	12001c20 	and	w0, w1, #0xff
   a6d1c:	7100241f 	cmp	w0, #0x9
   a6d20:	54ffdd08 	b.hi	a68c0 <CScreenDevice::Write(char)+0x40>  // b.pmore
   a6d24:	52800060 	mov	w0, #0x3                   	// #3
   a6d28:	b9005660 	str	w0, [x19, #84]
   a6d2c:	b9007261 	str	w1, [x19, #112]
   a6d30:	17fffef5 	b	a6904 <CScreenDevice::Write(char)+0x84>
   a6d34:	d503201f 	nop
   a6d38:	d503201f 	nop
   a6d3c:	d503201f 	nop

00000000000a6d40 <CScreenDevice::Write(void const*, unsigned long)>:
   a6d40:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6d44:	910003fd 	mov	x29, sp
   a6d48:	a90153f3 	stp	x19, x20, [sp, #16]
   a6d4c:	aa0003f4 	mov	x20, x0
   a6d50:	b940d000 	ldr	w0, [x0, #208]
   a6d54:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6d58:	aa0103f6 	mov	x22, x1
   a6d5c:	aa0203f5 	mov	x21, x2
   a6d60:	f9001bf7 	str	x23, [sp, #48]
   a6d64:	35000460 	cbnz	w0, a6df0 <CScreenDevice::Write(void const*, unsigned long)+0xb0>
   a6d68:	3941a280 	ldrb	w0, [x20, #104]
   a6d6c:	52800021 	mov	w1, #0x1                   	// #1
   a6d70:	3901e281 	strb	w1, [x20, #120]
   a6d74:	d10006b7 	sub	x23, x21, #0x1
   a6d78:	37000320 	tbnz	w0, #0, a6ddc <CScreenDevice::Write(void const*, unsigned long)+0x9c>
   a6d7c:	b40004f5 	cbz	x21, a6e18 <CScreenDevice::Write(void const*, unsigned long)+0xd8>
   a6d80:	aa1603f3 	mov	x19, x22
   a6d84:	d503201f 	nop
   a6d88:	38401661 	ldrb	w1, [x19], #1
   a6d8c:	aa1403e0 	mov	x0, x20
   a6d90:	97fffebc 	bl	a6880 <CScreenDevice::Write(char)>
   a6d94:	cb1302a3 	sub	x3, x21, x19
   a6d98:	ab0302df 	cmn	x22, x3
   a6d9c:	54ffff61 	b.ne	a6d88 <CScreenDevice::Write(void const*, unsigned long)+0x48>  // b.any
   a6da0:	110006f7 	add	w23, w23, #0x1
   a6da4:	3941a280 	ldrb	w0, [x20, #104]
   a6da8:	36000060 	tbz	w0, #0, a6db4 <CScreenDevice::Write(void const*, unsigned long)+0x74>
   a6dac:	aa1403e0 	mov	x0, x20
   a6db0:	97fff9b0 	bl	a5470 <CScreenDevice::InvertCursor() [clone .part.0]>
   a6db4:	b940d280 	ldr	w0, [x20, #208]
   a6db8:	3901e29f 	strb	wzr, [x20, #120]
   a6dbc:	350001e0 	cbnz	w0, a6df8 <CScreenDevice::Write(void const*, unsigned long)+0xb8>
   a6dc0:	d5033fbf 	dmb	sy
   a6dc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6dc8:	2a1703e0 	mov	w0, w23
   a6dcc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6dd0:	f9401bf7 	ldr	x23, [sp, #48]
   a6dd4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6dd8:	d65f03c0 	ret
   a6ddc:	aa1403e0 	mov	x0, x20
   a6de0:	97fff9a4 	bl	a5470 <CScreenDevice::InvertCursor() [clone .part.0]>
   a6de4:	b5fffcf5 	cbnz	x21, a6d80 <CScreenDevice::Write(void const*, unsigned long)+0x40>
   a6de8:	52800017 	mov	w23, #0x0                   	// #0
   a6dec:	17ffffee 	b	a6da4 <CScreenDevice::Write(void const*, unsigned long)+0x64>
   a6df0:	940018a4 	bl	ad080 <EnterCritical>
   a6df4:	17ffffdd 	b	a6d68 <CScreenDevice::Write(void const*, unsigned long)+0x28>
   a6df8:	940018d2 	bl	ad140 <LeaveCritical>
   a6dfc:	d5033fbf 	dmb	sy
   a6e00:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6e04:	2a1703e0 	mov	w0, w23
   a6e08:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6e0c:	f9401bf7 	ldr	x23, [sp, #48]
   a6e10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6e14:	d65f03c0 	ret
   a6e18:	52800017 	mov	w23, #0x0                   	// #0
   a6e1c:	17ffffe6 	b	a6db4 <CScreenDevice::Write(void const*, unsigned long)+0x74>

00000000000a6e20 <CScreenDevice::InvertCursor()>:
   a6e20:	3941a001 	ldrb	w1, [x0, #104]
   a6e24:	37000041 	tbnz	w1, #0, a6e2c <CScreenDevice::InvertCursor()+0xc>
   a6e28:	d65f03c0 	ret
   a6e2c:	17fff991 	b	a5470 <CScreenDevice::InvertCursor() [clone .part.0]>

00000000000a6e30 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   a6e30:	b9404804 	ldr	w4, [x0, #72]
   a6e34:	12003c63 	and	w3, w3, #0xffff
   a6e38:	6b01009f 	cmp	w4, w1
   a6e3c:	54000109 	b.ls	a6e5c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a6e40:	b9404c04 	ldr	w4, [x0, #76]
   a6e44:	6b02009f 	cmp	w4, w2
   a6e48:	540000a9 	b.ls	a6e5c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a6e4c:	b9404404 	ldr	w4, [x0, #68]
   a6e50:	f9401c00 	ldr	x0, [x0, #56]
   a6e54:	1b040442 	madd	w2, w2, w4, w1
   a6e58:	78227803 	strh	w3, [x0, x2, lsl #1]
   a6e5c:	d65f03c0 	ret

00000000000a6e60 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   a6e60:	b9404803 	ldr	w3, [x0, #72]
   a6e64:	6b01007f 	cmp	w3, w1
   a6e68:	54000089 	b.ls	a6e78 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>  // b.plast
   a6e6c:	b9404c03 	ldr	w3, [x0, #76]
   a6e70:	6b02007f 	cmp	w3, w2
   a6e74:	54000068 	b.hi	a6e80 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>  // b.pmore
   a6e78:	7940d800 	ldrh	w0, [x0, #108]
   a6e7c:	d65f03c0 	ret
   a6e80:	b9404403 	ldr	w3, [x0, #68]
   a6e84:	f9401c00 	ldr	x0, [x0, #56]
   a6e88:	1b030442 	madd	w2, w2, w3, w1
   a6e8c:	78627800 	ldrh	w0, [x0, x2, lsl #1]
   a6e90:	d65f03c0 	ret
   a6e94:	d503201f 	nop
   a6e98:	d503201f 	nop
   a6e9c:	d503201f 	nop

00000000000a6ea0 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   a6ea0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6ea4:	910003fd 	mov	x29, sp
   a6ea8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6eac:	aa0003f5 	mov	x21, x0
   a6eb0:	9100a000 	add	x0, x0, #0x28
   a6eb4:	a90153f3 	stp	x19, x20, [sp, #16]
   a6eb8:	12000434 	and	w20, w1, #0x3
   a6ebc:	b9404ab6 	ldr	w22, [x21, #72]
   a6ec0:	2a0203f3 	mov	w19, w2
   a6ec4:	940025b7 	bl	b05a0 <CCharGenerator::GetCharWidth() const>
   a6ec8:	2a0003e2 	mov	w2, w0
   a6ecc:	b00000a5 	adrp	x5, bb000 <s_ActLEDInfo+0x1f0>
   a6ed0:	910520a5 	add	x5, x5, #0x148
   a6ed4:	92400673 	and	x19, x19, #0x3
   a6ed8:	910020a5 	add	x5, x5, #0x8
   a6edc:	aa1503e0 	mov	x0, x21
   a6ee0:	1b020a82 	madd	w2, w20, w2, w2
   a6ee4:	1280aea4 	mov	w4, #0xfffffa8a            	// #-1398
   a6ee8:	52800003 	mov	w3, #0x0                   	// #0
   a6eec:	38656a61 	ldrb	w1, [x19, x5]
   a6ef0:	4b0202c2 	sub	w2, w22, w2
   a6ef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6ef8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6efc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6f00:	17fffc48 	b	a6020 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
	...

00000000000a6f10 <CSerialDevice::Read(void*, unsigned long)>:
   a6f10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6f14:	910003fd 	mov	x29, sp
   a6f18:	a90153f3 	stp	x19, x20, [sp, #16]
   a6f1c:	aa0003f3 	mov	x19, x0
   a6f20:	3940a000 	ldrb	w0, [x0, #40]
   a6f24:	f90013f5 	str	x21, [sp, #32]
   a6f28:	360008a0 	tbz	w0, #0, a703c <CSerialDevice::Read(void*, unsigned long)+0x12c>
   a6f2c:	aa0103f4 	mov	x20, x1
   a6f30:	b4000901 	cbz	x1, a7050 <CSerialDevice::Read(void*, unsigned long)+0x140>
   a6f34:	f9400a60 	ldr	x0, [x19, #16]
   a6f38:	aa0203f5 	mov	x21, x2
   a6f3c:	b4000540 	cbz	x0, a6fe4 <CSerialDevice::Read(void*, unsigned long)+0xd4>
   a6f40:	b9518260 	ldr	w0, [x19, #4480]
   a6f44:	35000740 	cbnz	w0, a702c <CSerialDevice::Read(void*, unsigned long)+0x11c>
   a6f48:	b9495a60 	ldr	w0, [x19, #2392]
   a6f4c:	37f803c0 	tbnz	w0, #31, a6fc4 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   a6f50:	8b150283 	add	x3, x20, x21
   a6f54:	52800000 	mov	w0, #0x0                   	// #0
   a6f58:	b50001d5 	cbnz	x21, a6f90 <CSerialDevice::Read(void*, unsigned long)+0x80>
   a6f5c:	1400001c 	b	a6fcc <CSerialDevice::Read(void*, unsigned long)+0xbc>
   a6f60:	b9495661 	ldr	w1, [x19, #2388]
   a6f64:	11000400 	add	w0, w0, #0x1
   a6f68:	11000422 	add	w2, w1, #0x1
   a6f6c:	b9095662 	str	w2, [x19, #2388]
   a6f70:	8b214261 	add	x1, x19, w1, uxtw
   a6f74:	39454021 	ldrb	w1, [x1, #336]
   a6f78:	38001681 	strb	w1, [x20], #1
   a6f7c:	b9495661 	ldr	w1, [x19, #2388]
   a6f80:	eb14007f 	cmp	x3, x20
   a6f84:	12002821 	and	w1, w1, #0x7ff
   a6f88:	b9095661 	str	w1, [x19, #2388]
   a6f8c:	54000200 	b.eq	a6fcc <CSerialDevice::Read(void*, unsigned long)+0xbc>  // b.none
   a6f90:	b9495262 	ldr	w2, [x19, #2384]
   a6f94:	b9495661 	ldr	w1, [x19, #2388]
   a6f98:	6b01005f 	cmp	w2, w1
   a6f9c:	54fffe21 	b.ne	a6f60 <CSerialDevice::Read(void*, unsigned long)+0x50>  // b.any
   a6fa0:	b9518261 	ldr	w1, [x19, #4480]
   a6fa4:	34000181 	cbz	w1, a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a6fa8:	b9003fe0 	str	w0, [sp, #60]
   a6fac:	94001865 	bl	ad140 <LeaveCritical>
   a6fb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6fb4:	f94013f5 	ldr	x21, [sp, #32]
   a6fb8:	b9403fe0 	ldr	w0, [sp, #60]
   a6fbc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6fc0:	d65f03c0 	ret
   a6fc4:	b9495a60 	ldr	w0, [x19, #2392]
   a6fc8:	b9095a7f 	str	wzr, [x19, #2392]
   a6fcc:	b9518261 	ldr	w1, [x19, #4480]
   a6fd0:	35fffec1 	cbnz	w1, a6fa8 <CSerialDevice::Read(void*, unsigned long)+0x98>
   a6fd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6fd8:	f94013f5 	ldr	x21, [sp, #32]
   a6fdc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6fe0:	d65f03c0 	ret
   a6fe4:	b4ffff82 	cbz	x2, a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a6fe8:	8b020035 	add	x21, x1, x2
   a6fec:	52800000 	mov	w0, #0x0                   	// #0
   a6ff0:	14000008 	b	a7010 <CSerialDevice::Read(void*, unsigned long)+0x100>
   a6ff4:	37580381 	tbnz	w1, #11, a7064 <CSerialDevice::Read(void*, unsigned long)+0x154>
   a6ff8:	374003a1 	tbnz	w1, #8, a706c <CSerialDevice::Read(void*, unsigned long)+0x15c>
   a6ffc:	374803c1 	tbnz	w1, #9, a7074 <CSerialDevice::Read(void*, unsigned long)+0x164>
   a7000:	38001681 	strb	w1, [x20], #1
   a7004:	11000400 	add	w0, w0, #0x1
   a7008:	eb1402bf 	cmp	x21, x20
   a700c:	54fffe40 	b.eq	a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>  // b.none
   a7010:	f9401261 	ldr	x1, [x19, #32]
   a7014:	b9401822 	ldr	w2, [x1, #24]
   a7018:	3727fde2 	tbnz	w2, #4, a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a701c:	b9400021 	ldr	w1, [x1]
   a7020:	3657fea1 	tbz	w1, #10, a6ff4 <CSerialDevice::Read(void*, unsigned long)+0xe4>
   a7024:	12800000 	mov	w0, #0xffffffff            	// #-1
   a7028:	17ffffeb 	b	a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a702c:	94001815 	bl	ad080 <EnterCritical>
   a7030:	b9495a60 	ldr	w0, [x19, #2392]
   a7034:	36fff8e0 	tbz	w0, #31, a6f50 <CSerialDevice::Read(void*, unsigned long)+0x40>
   a7038:	17ffffe3 	b	a6fc4 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   a703c:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7040:	91058021 	add	x1, x1, #0x160
   a7044:	91004020 	add	x0, x1, #0x10
   a7048:	528046e2 	mov	w2, #0x237                 	// #567
   a704c:	97ffebad 	bl	a1f00 <assertion_failed>
   a7050:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7054:	91058021 	add	x1, x1, #0x160
   a7058:	91008020 	add	x0, x1, #0x20
   a705c:	52804742 	mov	w2, #0x23a                 	// #570
   a7060:	97ffeba8 	bl	a1f00 <assertion_failed>
   a7064:	12800020 	mov	w0, #0xfffffffe            	// #-2
   a7068:	17ffffdb 	b	a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a706c:	12800040 	mov	w0, #0xfffffffd            	// #-3
   a7070:	17ffffd9 	b	a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a7074:	12800060 	mov	w0, #0xfffffffc            	// #-4
   a7078:	17ffffd7 	b	a6fd4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a707c:	d503201f 	nop

00000000000a7080 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   a7080:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a7084:	910003fd 	mov	x29, sp
   a7088:	a90153f3 	stp	x19, x20, [sp, #16]
   a708c:	aa0003f3 	mov	x19, x0
   a7090:	2a0303f4 	mov	w20, w3
   a7094:	a9025bf5 	stp	x21, x22, [sp, #32]
   a7098:	aa0103f6 	mov	x22, x1
   a709c:	12001c55 	and	w21, w2, #0xff
   a70a0:	a90363f7 	stp	x23, x24, [sp, #48]
   a70a4:	91030278 	add	x24, x19, #0xc0
   a70a8:	91042277 	add	x23, x19, #0x108
   a70ac:	a9046bf9 	stp	x25, x26, [sp, #64]
   a70b0:	97ffee20 	bl	a2930 <CDevice::CDevice()>
   a70b4:	f0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a70b8:	91258000 	add	x0, x0, #0x960
   a70bc:	f9000260 	str	x0, [x19]
   a70c0:	f9000a76 	str	x22, [x19, #16]
   a70c4:	9100c279 	add	x25, x19, #0x30
   a70c8:	39006275 	strb	w21, [x19, #24]
   a70cc:	aa1903e0 	mov	x0, x25
   a70d0:	b9001e74 	str	w20, [x19, #28]
   a70d4:	9101e27a 	add	x26, x19, #0x78
   a70d8:	f900127f 	str	xzr, [x19, #32]
   a70dc:	52800036 	mov	w22, #0x1                   	// #1
   a70e0:	3900a27f 	strb	wzr, [x19, #40]
   a70e4:	110006b5 	add	w21, w21, #0x1
   a70e8:	94001d22 	bl	ae570 <CGPIOPin::CGPIOPin()>
   a70ec:	aa1a03e0 	mov	x0, x26
   a70f0:	94001d20 	bl	ae570 <CGPIOPin::CGPIOPin()>
   a70f4:	aa1803e0 	mov	x0, x24
   a70f8:	94001d1e 	bl	ae570 <CGPIOPin::CGPIOPin()>
   a70fc:	aa1703e0 	mov	x0, x23
   a7100:	94001d1c 	bl	ae570 <CGPIOPin::CGPIOPin()>
   a7104:	b909527f 	str	wzr, [x19, #2384]
   a7108:	b909567f 	str	wzr, [x19, #2388]
   a710c:	b9401e60 	ldr	w0, [x19, #28]
   a7110:	b9095a7f 	str	wzr, [x19, #2392]
   a7114:	b9115e7f 	str	wzr, [x19, #4444]
   a7118:	b911627f 	str	wzr, [x19, #4448]
   a711c:	b9116676 	str	w22, [x19, #4452]
   a7120:	f908b67f 	str	xzr, [x19, #4456]
   a7124:	b9118275 	str	w21, [x19, #4480]
   a7128:	b9118676 	str	w22, [x19, #4484]
   a712c:	350004e0 	cbnz	w0, a71c8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x148>
   a7130:	900000b5 	adrp	x21, bb000 <s_ActLEDInfo+0x1f0>
   a7134:	910582a1 	add	x1, x21, #0x160
   a7138:	9100c022 	add	x2, x1, #0x30
   a713c:	d37c7e80 	ubfiz	x0, x20, #4, #32
   a7140:	a90573fb 	stp	x27, x28, [sp, #80]
   a7144:	2a1403fb 	mov	w27, w20
   a7148:	b860685c 	ldr	w28, [x2, x0]
   a714c:	7100db9f 	cmp	w28, #0x36
   a7150:	54000488 	b.hi	a71e0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>  // b.pmore
   a7154:	f0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a7158:	f9465002 	ldr	x2, [x0, #3232]
   a715c:	b5000882 	cbnz	x2, a726c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1ec>
   a7160:	f9065013 	str	x19, [x0, #3232]
   a7164:	d2820000 	mov	x0, #0x1000                	// #4096
   a7168:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   a716c:	f9001260 	str	x0, [x19, #32]
   a7170:	34000474 	cbz	w20, a71fc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>
   a7174:	910582a0 	add	x0, x21, #0x160
   a7178:	8b1b1000 	add	x0, x0, x27, lsl #4
   a717c:	b9403414 	ldr	w20, [x0, #52]
   a7180:	11001294 	add	w20, w20, #0x4
   a7184:	7100269f 	cmp	w20, #0x9
   a7188:	5400062d 	b.le	a724c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   a718c:	910582b5 	add	x21, x21, #0x160
   a7190:	aa1703e0 	mov	x0, x23
   a7194:	8b1b12bb 	add	x27, x21, x27, lsl #4
   a7198:	b9403b61 	ldr	w1, [x27, #56]
   a719c:	94001d01 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   a71a0:	52800022 	mov	w2, #0x1                   	// #1
   a71a4:	aa1703e0 	mov	x0, x23
   a71a8:	52800081 	mov	w1, #0x4                   	// #4
   a71ac:	94001fa1 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a71b0:	aa1703e0 	mov	x0, x23
   a71b4:	52800041 	mov	w1, #0x2                   	// #2
   a71b8:	94001f32 	bl	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   a71bc:	a94573fb 	ldp	x27, x28, [sp, #80]
   a71c0:	52800020 	mov	w0, #0x1                   	// #1
   a71c4:	3900a260 	strb	w0, [x19, #40]
   a71c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a71cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a71d0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a71d4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a71d8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a71dc:	d65f03c0 	ret
   a71e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a71e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a71e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a71ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a71f0:	a94573fb 	ldp	x27, x28, [sp, #80]
   a71f4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a71f8:	d65f03c0 	ret
   a71fc:	aa1903e0 	mov	x0, x25
   a7200:	52800401 	mov	w1, #0x20                  	// #32
   a7204:	94001ce7 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   a7208:	2a1603e2 	mov	w2, w22
   a720c:	aa1903e0 	mov	x0, x25
   a7210:	52800001 	mov	w1, #0x0                   	// #0
   a7214:	94001f87 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a7218:	aa1a03e0 	mov	x0, x26
   a721c:	52800421 	mov	w1, #0x21                  	// #33
   a7220:	94001ce0 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   a7224:	aa1a03e0 	mov	x0, x26
   a7228:	2a1603e2 	mov	w2, w22
   a722c:	52800001 	mov	w1, #0x0                   	// #0
   a7230:	94001f80 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a7234:	910582a0 	add	x0, x21, #0x160
   a7238:	8b1b1000 	add	x0, x0, x27, lsl #4
   a723c:	b9403414 	ldr	w20, [x0, #52]
   a7240:	11001294 	add	w20, w20, #0x4
   a7244:	7100269f 	cmp	w20, #0x9
   a7248:	54fffa2c 	b.gt	a718c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x10c>
   a724c:	2a1c03e1 	mov	w1, w28
   a7250:	aa1803e0 	mov	x0, x24
   a7254:	94001cd3 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   a7258:	2a1403e1 	mov	w1, w20
   a725c:	aa1803e0 	mov	x0, x24
   a7260:	52800022 	mov	w2, #0x1                   	// #1
   a7264:	94001f73 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a7268:	17ffffc9 	b	a718c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x10c>
   a726c:	91010020 	add	x0, x1, #0x40
   a7270:	52801d62 	mov	w2, #0xeb                  	// #235
   a7274:	97ffeb23 	bl	a1f00 <assertion_failed>
   a7278:	d503201f 	nop
   a727c:	d503201f 	nop

00000000000a7280 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   a7280:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a7284:	910003fd 	mov	x29, sp
   a7288:	a90363f7 	stp	x23, x24, [sp, #48]
   a728c:	3940a018 	ldrb	w24, [x0, #40]
   a7290:	370000d8 	tbnz	w24, #0, a72a8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
   a7294:	52800018 	mov	w24, #0x0                   	// #0
   a7298:	2a1803e0 	mov	w0, w24
   a729c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a72a0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a72a4:	d65f03c0 	ret
   a72a8:	2a0403f7 	mov	w23, w4
   a72ac:	a90153f3 	stp	x19, x20, [sp, #16]
   a72b0:	2a0103f4 	mov	w20, w1
   a72b4:	aa0003f3 	mov	x19, x0
   a72b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a72bc:	2a0203f5 	mov	w21, w2
   a72c0:	2a0303f6 	mov	w22, w3
   a72c4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a72c8:	97fff702 	bl	a4ed0 <CMachineInfo::Get()>
   a72cc:	52800041 	mov	w1, #0x2                   	// #2
   a72d0:	97fff5e8 	bl	a4a70 <CMachineInfo::GetClockRate(unsigned int) const>
   a72d4:	340010c0 	cbz	w0, a74ec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x26c>
   a72d8:	5104b282 	sub	w2, w20, #0x12c
   a72dc:	5280fa81 	mov	w1, #0x7d4                 	// #2004
   a72e0:	72a007a1 	movk	w1, #0x3d, lsl #16
   a72e4:	6b01005f 	cmp	w2, w1
   a72e8:	540010c8 	b.hi	a7500 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x280>  // b.pmore
   a72ec:	531c6e85 	lsl	w5, w20, #4
   a72f0:	529fffc1 	mov	w1, #0xfffe                	// #65534
   a72f4:	1ac50819 	udiv	w25, w0, w5
   a72f8:	51000722 	sub	w2, w25, #0x1
   a72fc:	6b01005f 	cmp	w2, w1
   a7300:	540010a8 	b.hi	a7514 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>  // b.pmore
   a7304:	1b058325 	msub	w5, w25, w5, w0
   a7308:	531d70a5 	lsl	w5, w5, #3
   a730c:	1ad408a1 	udiv	w1, w5, w20
   a7310:	12000020 	and	w0, w1, #0x1
   a7314:	0b410414 	add	w20, w0, w1, lsr #1
   a7318:	7100fe9f 	cmp	w20, #0x3f
   a731c:	54001068 	b.hi	a7528 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>  // b.pmore
   a7320:	f9400a60 	ldr	x0, [x19, #16]
   a7324:	b4000260 	cbz	x0, a7370 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xf0>
   a7328:	f000011a 	adrp	x26, ca000 <vtable for CLAN7800Device+0x28>
   a732c:	91328341 	add	x1, x26, #0xca0
   a7330:	b9400822 	ldr	w2, [x1, #8]
   a7334:	35000922 	cbnz	w2, a7458 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d8>
   a7338:	39406262 	ldrb	w2, [x19, #24]
   a733c:	f9000820 	str	x0, [x1, #16]
   a7340:	39006022 	strb	w2, [x1, #24]
   a7344:	37000ac2 	tbnz	w2, #0, a749c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x21c>
   a7348:	90000002 	adrp	x2, a7000 <CSerialDevice::Read(void*, unsigned long)+0xf0>
   a734c:	d2800003 	mov	x3, #0x0                   	// #0
   a7350:	91370042 	add	x2, x2, #0xdc0
   a7354:	52800721 	mov	w1, #0x39                  	// #57
   a7358:	94001ad6 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a735c:	9132835a 	add	x26, x26, #0xca0
   a7360:	b9400b40 	ldr	w0, [x26, #8]
   a7364:	35000b00 	cbnz	w0, a74c4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
   a7368:	52800020 	mov	w0, #0x1                   	// #1
   a736c:	b9000b40 	str	w0, [x26, #8]
   a7370:	f9401260 	ldr	x0, [x19, #32]
   a7374:	5280ffe2 	mov	w2, #0x7ff                 	// #2047
   a7378:	510016a1 	sub	w1, w21, #0x5
   a737c:	71000c3f 	cmp	w1, #0x3
   a7380:	9100e003 	add	x3, x0, #0x38
   a7384:	b900381f 	str	wzr, [x0, #56]
   a7388:	b9004402 	str	w2, [x0, #68]
   a738c:	b9002419 	str	w25, [x0, #36]
   a7390:	b9002814 	str	w20, [x0, #40]
   a7394:	54000de8 	b.hi	a7550 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>  // b.pmore
   a7398:	531b6aa2 	lsl	w2, w21, #5
   a739c:	510006c1 	sub	w1, w22, #0x1
   a73a0:	51024042 	sub	w2, w2, #0x90
   a73a4:	7100043f 	cmp	w1, #0x1
   a73a8:	54000988 	b.hi	a74d8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>  // b.pmore
   a73ac:	71000adf 	cmp	w22, #0x2
   a73b0:	321d0041 	orr	w1, w2, #0x8
   a73b4:	1a820022 	csel	w2, w1, w2, eq	// eq = none
   a73b8:	710006ff 	cmp	w23, #0x1
   a73bc:	54000680 	b.eq	a748c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x20c>  // b.none
   a73c0:	71000aff 	cmp	w23, #0x2
   a73c4:	54000600 	b.eq	a7484 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x204>  // b.none
   a73c8:	35000bb7 	cbnz	w23, a753c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
   a73cc:	f9400a61 	ldr	x1, [x19, #16]
   a73d0:	b4000621 	cbz	x1, a7494 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x214>
   a73d4:	52800121 	mov	w1, #0x9                   	// #9
   a73d8:	b9003401 	str	w1, [x0, #52]
   a73dc:	b9002c02 	str	w2, [x0, #44]
   a73e0:	f0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a73e4:	91328021 	add	x1, x1, #0xca0
   a73e8:	52808a00 	mov	w0, #0x450                 	// #1104
   a73ec:	b9000060 	str	w0, [x3]
   a73f0:	52800020 	mov	w0, #0x1                   	// #1
   a73f4:	b9401e63 	ldr	w3, [x19, #28]
   a73f8:	b9401c22 	ldr	w2, [x1, #28]
   a73fc:	1ac32000 	lsl	w0, w0, w3
   a7400:	2a020000 	orr	w0, w0, w2
   a7404:	b9001c20 	str	w0, [x1, #28]
   a7408:	d5033f9f 	dsb	sy
   a740c:	f9401260 	ldr	x0, [x19, #32]
   a7410:	52806021 	mov	w1, #0x301                 	// #769
   a7414:	b9003001 	str	w1, [x0, #48]
   a7418:	97ffeea6 	bl	a2eb0 <CDeviceNameService::Get()>
   a741c:	b9401e62 	ldr	w2, [x19, #28]
   a7420:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7424:	91058021 	add	x1, x1, #0x160
   a7428:	aa1303e3 	mov	x3, x19
   a742c:	9104c021 	add	x1, x1, #0x130
   a7430:	11000442 	add	w2, w2, #0x1
   a7434:	52800004 	mov	w4, #0x0                   	// #0
   a7438:	97ffeeaa 	bl	a2ee0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   a743c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7440:	2a1803e0 	mov	w0, w24
   a7444:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7448:	a94363f7 	ldp	x23, x24, [sp, #48]
   a744c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a7450:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7454:	d65f03c0 	ret
   a7458:	f9400822 	ldr	x2, [x1, #16]
   a745c:	eb02001f 	cmp	x0, x2
   a7460:	540002a0 	b.eq	a74b4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>  // b.none
   a7464:	b9401e60 	ldr	w0, [x19, #28]
   a7468:	9132835a 	add	x26, x26, #0xca0
   a746c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7470:	3900a27f 	strb	wzr, [x19, #40]
   a7474:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7478:	f8207b5f 	str	xzr, [x26, x0, lsl #3]
   a747c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a7480:	17ffff85 	b	a7294 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14>
   a7484:	321f0442 	orr	w2, w2, #0x6
   a7488:	17ffffd1 	b	a73cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   a748c:	321f0042 	orr	w2, w2, #0x2
   a7490:	17ffffcf 	b	a73cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   a7494:	b9002c02 	str	w2, [x0, #44]
   a7498:	17ffffde 	b	a7410 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x190>
   a749c:	90000002 	adrp	x2, a7000 <CSerialDevice::Read(void*, unsigned long)+0xf0>
   a74a0:	d2800003 	mov	x3, #0x0                   	// #0
   a74a4:	91370042 	add	x2, x2, #0xdc0
   a74a8:	52800721 	mov	w1, #0x39                  	// #57
   a74ac:	940019d5 	bl	adc00 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   a74b0:	17ffffab 	b	a735c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>
   a74b4:	39406020 	ldrb	w0, [x1, #24]
   a74b8:	39406261 	ldrb	w1, [x19, #24]
   a74bc:	6b00003f 	cmp	w1, w0
   a74c0:	54fffd21 	b.ne	a7464 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e4>  // b.any
   a74c4:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a74c8:	91058021 	add	x1, x1, #0x160
   a74cc:	91036020 	add	x0, x1, #0xd8
   a74d0:	52803422 	mov	w2, #0x1a1                 	// #417
   a74d4:	97ffea8b 	bl	a1f00 <assertion_failed>
   a74d8:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a74dc:	91058021 	add	x1, x1, #0x160
   a74e0:	91042020 	add	x0, x1, #0x108
   a74e4:	52803742 	mov	w2, #0x1ba                 	// #442
   a74e8:	97ffea86 	bl	a1f00 <assertion_failed>
   a74ec:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a74f0:	91058021 	add	x1, x1, #0x160
   a74f4:	91016020 	add	x0, x1, #0x58
   a74f8:	52802c42 	mov	w2, #0x162                 	// #354
   a74fc:	97ffea81 	bl	a1f00 <assertion_failed>
   a7500:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7504:	91058021 	add	x1, x1, #0x160
   a7508:	9101a020 	add	x0, x1, #0x68
   a750c:	52802c82 	mov	w2, #0x164                 	// #356
   a7510:	97ffea7c 	bl	a1f00 <assertion_failed>
   a7514:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7518:	91058021 	add	x1, x1, #0x160
   a751c:	91026020 	add	x0, x1, #0x98
   a7520:	52802ce2 	mov	w2, #0x167                 	// #359
   a7524:	97ffea77 	bl	a1f00 <assertion_failed>
   a7528:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a752c:	91058021 	add	x1, x1, #0x160
   a7530:	91030020 	add	x0, x1, #0xc0
   a7534:	52802d42 	mov	w2, #0x16a                 	// #362
   a7538:	97ffea72 	bl	a1f00 <assertion_failed>
   a753c:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7540:	91058021 	add	x1, x1, #0x160
   a7544:	91040020 	add	x0, x1, #0x100
   a7548:	528039c2 	mov	w2, #0x1ce                 	// #462
   a754c:	97ffea6d 	bl	a1f00 <assertion_failed>
   a7550:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7554:	91058021 	add	x1, x1, #0x160
   a7558:	91040020 	add	x0, x1, #0x100
   a755c:	528036c2 	mov	w2, #0x1b6                 	// #438
   a7560:	97ffea68 	bl	a1f00 <assertion_failed>
   a7564:	d503201f 	nop
   a7568:	d503201f 	nop
   a756c:	d503201f 	nop

00000000000a7570 <CSerialDevice::GetOptions() const>:
   a7570:	b9516400 	ldr	w0, [x0, #4452]
   a7574:	d65f03c0 	ret
   a7578:	d503201f 	nop
   a757c:	d503201f 	nop

00000000000a7580 <CSerialDevice::SetOptions(unsigned int)>:
   a7580:	b9116401 	str	w1, [x0, #4452]
   a7584:	d65f03c0 	ret
   a7588:	d503201f 	nop
   a758c:	d503201f 	nop

00000000000a7590 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   a7590:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7594:	910003fd 	mov	x29, sp
   a7598:	f9400803 	ldr	x3, [x0, #16]
   a759c:	b4000183 	cbz	x3, a75cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   a75a0:	f948b403 	ldr	x3, [x0, #4456]
   a75a4:	b50001e3 	cbnz	x3, a75e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x50>
   a75a8:	b4000261 	cbz	x1, a75f4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x64>
   a75ac:	39c00023 	ldrsb	w3, [x1]
   a75b0:	340002c3 	cbz	w3, a7608 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x78>
   a75b4:	b4000342 	cbz	x2, a761c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   a75b8:	f908b401 	str	x1, [x0, #4456]
   a75bc:	f908b801 	str	x1, [x0, #4464]
   a75c0:	f908bc02 	str	x2, [x0, #4472]
   a75c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a75c8:	d65f03c0 	ret
   a75cc:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a75d0:	91058021 	add	x1, x1, #0x160
   a75d4:	9104e020 	add	x0, x1, #0x138
   a75d8:	528052e2 	mov	w2, #0x297                 	// #663
   a75dc:	97ffea49 	bl	a1f00 <assertion_failed>
   a75e0:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a75e4:	91058021 	add	x1, x1, #0x160
   a75e8:	91054020 	add	x0, x1, #0x150
   a75ec:	52805302 	mov	w2, #0x298                 	// #664
   a75f0:	97ffea44 	bl	a1f00 <assertion_failed>
   a75f4:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a75f8:	91058021 	add	x1, x1, #0x160
   a75fc:	91058020 	add	x0, x1, #0x160
   a7600:	52805342 	mov	w2, #0x29a                 	// #666
   a7604:	97ffea3f 	bl	a1f00 <assertion_failed>
   a7608:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a760c:	91058021 	add	x1, x1, #0x160
   a7610:	9105c020 	add	x0, x1, #0x170
   a7614:	52805362 	mov	w2, #0x29b                 	// #667
   a7618:	97ffea3a 	bl	a1f00 <assertion_failed>
   a761c:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7620:	91058021 	add	x1, x1, #0x160
   a7624:	91060020 	add	x0, x1, #0x180
   a7628:	52805382 	mov	w2, #0x29c                 	// #668
   a762c:	97ffea35 	bl	a1f00 <assertion_failed>

00000000000a7630 <CSerialDevice::AvailableForWrite()>:
   a7630:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7634:	910003fd 	mov	x29, sp
   a7638:	f9000bf3 	str	x19, [sp, #16]
   a763c:	aa0003f3 	mov	x19, x0
   a7640:	3940a000 	ldrb	w0, [x0, #40]
   a7644:	360003a0 	tbz	w0, #0, a76b8 <CSerialDevice::AvailableForWrite()+0x88>
   a7648:	f9400a60 	ldr	x0, [x19, #16]
   a764c:	b4000400 	cbz	x0, a76cc <CSerialDevice::AvailableForWrite()+0x9c>
   a7650:	b9518260 	ldr	w0, [x19, #4480]
   a7654:	350002c0 	cbnz	w0, a76ac <CSerialDevice::AvailableForWrite()+0x7c>
   a7658:	b9516262 	ldr	w2, [x19, #4448]
   a765c:	b9515e61 	ldr	w1, [x19, #4444]
   a7660:	6b01005f 	cmp	w2, w1
   a7664:	b9516261 	ldr	w1, [x19, #4448]
   a7668:	b9515e62 	ldr	w2, [x19, #4444]
   a766c:	54000108 	b.hi	a768c <CSerialDevice::AvailableForWrite()+0x5c>  // b.pmore
   a7670:	111ffc33 	add	w19, w1, #0x7ff
   a7674:	4b020273 	sub	w19, w19, w2
   a7678:	35000100 	cbnz	w0, a7698 <CSerialDevice::AvailableForWrite()+0x68>
   a767c:	2a1303e0 	mov	w0, w19
   a7680:	f9400bf3 	ldr	x19, [sp, #16]
   a7684:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7688:	d65f03c0 	ret
   a768c:	51000433 	sub	w19, w1, #0x1
   a7690:	4b020273 	sub	w19, w19, w2
   a7694:	34ffff40 	cbz	w0, a767c <CSerialDevice::AvailableForWrite()+0x4c>
   a7698:	940016aa 	bl	ad140 <LeaveCritical>
   a769c:	2a1303e0 	mov	w0, w19
   a76a0:	f9400bf3 	ldr	x19, [sp, #16]
   a76a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a76a8:	d65f03c0 	ret
   a76ac:	94001675 	bl	ad080 <EnterCritical>
   a76b0:	b9518260 	ldr	w0, [x19, #4480]
   a76b4:	17ffffe9 	b	a7658 <CSerialDevice::AvailableForWrite()+0x28>
   a76b8:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a76bc:	91058021 	add	x1, x1, #0x160
   a76c0:	91004020 	add	x0, x1, #0x10
   a76c4:	528054c2 	mov	w2, #0x2a6                 	// #678
   a76c8:	97ffea0e 	bl	a1f00 <assertion_failed>
   a76cc:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a76d0:	91058021 	add	x1, x1, #0x160
   a76d4:	9104e020 	add	x0, x1, #0x138
   a76d8:	528054e2 	mov	w2, #0x2a7                 	// #679
   a76dc:	97ffea09 	bl	a1f00 <assertion_failed>

00000000000a76e0 <CSerialDevice::AvailableForRead()>:
   a76e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a76e4:	910003fd 	mov	x29, sp
   a76e8:	f9000bf3 	str	x19, [sp, #16]
   a76ec:	aa0003f3 	mov	x19, x0
   a76f0:	3940a000 	ldrb	w0, [x0, #40]
   a76f4:	36000380 	tbz	w0, #0, a7764 <CSerialDevice::AvailableForRead()+0x84>
   a76f8:	f9400a60 	ldr	x0, [x19, #16]
   a76fc:	b40003e0 	cbz	x0, a7778 <CSerialDevice::AvailableForRead()+0x98>
   a7700:	b9518260 	ldr	w0, [x19, #4480]
   a7704:	350002a0 	cbnz	w0, a7758 <CSerialDevice::AvailableForRead()+0x78>
   a7708:	b9495262 	ldr	w2, [x19, #2384]
   a770c:	b9495661 	ldr	w1, [x19, #2388]
   a7710:	6b01005f 	cmp	w2, w1
   a7714:	b9495261 	ldr	w1, [x19, #2384]
   a7718:	b9495662 	ldr	w2, [x19, #2388]
   a771c:	4b020033 	sub	w19, w1, w2
   a7720:	540000c3 	b.cc	a7738 <CSerialDevice::AvailableForRead()+0x58>  // b.lo, b.ul, b.last
   a7724:	35000100 	cbnz	w0, a7744 <CSerialDevice::AvailableForRead()+0x64>
   a7728:	2a1303e0 	mov	w0, w19
   a772c:	f9400bf3 	ldr	x19, [sp, #16]
   a7730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7734:	d65f03c0 	ret
   a7738:	11200033 	add	w19, w1, #0x800
   a773c:	4b020273 	sub	w19, w19, w2
   a7740:	34ffff40 	cbz	w0, a7728 <CSerialDevice::AvailableForRead()+0x48>
   a7744:	9400167f 	bl	ad140 <LeaveCritical>
   a7748:	2a1303e0 	mov	w0, w19
   a774c:	f9400bf3 	ldr	x19, [sp, #16]
   a7750:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7754:	d65f03c0 	ret
   a7758:	9400164a 	bl	ad080 <EnterCritical>
   a775c:	b9518260 	ldr	w0, [x19, #4480]
   a7760:	17ffffea 	b	a7708 <CSerialDevice::AvailableForRead()+0x28>
   a7764:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7768:	91058021 	add	x1, x1, #0x160
   a776c:	91004020 	add	x0, x1, #0x10
   a7770:	52805782 	mov	w2, #0x2bc                 	// #700
   a7774:	97ffe9e3 	bl	a1f00 <assertion_failed>
   a7778:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a777c:	91058021 	add	x1, x1, #0x160
   a7780:	9104e020 	add	x0, x1, #0x138
   a7784:	528057a2 	mov	w2, #0x2bd                 	// #701
   a7788:	97ffe9de 	bl	a1f00 <assertion_failed>
   a778c:	d503201f 	nop

00000000000a7790 <CSerialDevice::Peek()>:
   a7790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7794:	910003fd 	mov	x29, sp
   a7798:	f9000bf3 	str	x19, [sp, #16]
   a779c:	aa0003f3 	mov	x19, x0
   a77a0:	3940a000 	ldrb	w0, [x0, #40]
   a77a4:	360003e0 	tbz	w0, #0, a7820 <CSerialDevice::Peek()+0x90>
   a77a8:	f9400a60 	ldr	x0, [x19, #16]
   a77ac:	b4000440 	cbz	x0, a7834 <CSerialDevice::Peek()+0xa4>
   a77b0:	b9518260 	ldr	w0, [x19, #4480]
   a77b4:	35000180 	cbnz	w0, a77e4 <CSerialDevice::Peek()+0x54>
   a77b8:	b9495261 	ldr	w1, [x19, #2384]
   a77bc:	b9495660 	ldr	w0, [x19, #2388]
   a77c0:	6b00003f 	cmp	w1, w0
   a77c4:	54000420 	b.eq	a7848 <CSerialDevice::Peek()+0xb8>  // b.none
   a77c8:	b9495660 	ldr	w0, [x19, #2388]
   a77cc:	8b204260 	add	x0, x19, w0, uxtw
   a77d0:	39454013 	ldrb	w19, [x0, #336]
   a77d4:	2a1303e0 	mov	w0, w19
   a77d8:	f9400bf3 	ldr	x19, [sp, #16]
   a77dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a77e0:	d65f03c0 	ret
   a77e4:	94001627 	bl	ad080 <EnterCritical>
   a77e8:	b9495261 	ldr	w1, [x19, #2384]
   a77ec:	b9495660 	ldr	w0, [x19, #2388]
   a77f0:	6b00003f 	cmp	w1, w0
   a77f4:	540002e0 	b.eq	a7850 <CSerialDevice::Peek()+0xc0>  // b.none
   a77f8:	b9495660 	ldr	w0, [x19, #2388]
   a77fc:	b9518261 	ldr	w1, [x19, #4480]
   a7800:	8b204260 	add	x0, x19, w0, uxtw
   a7804:	39454013 	ldrb	w19, [x0, #336]
   a7808:	34fffe61 	cbz	w1, a77d4 <CSerialDevice::Peek()+0x44>
   a780c:	9400164d 	bl	ad140 <LeaveCritical>
   a7810:	2a1303e0 	mov	w0, w19
   a7814:	f9400bf3 	ldr	x19, [sp, #16]
   a7818:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a781c:	d65f03c0 	ret
   a7820:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7824:	91058021 	add	x1, x1, #0x160
   a7828:	91004020 	add	x0, x1, #0x10
   a782c:	52805a42 	mov	w2, #0x2d2                 	// #722
   a7830:	97ffe9b4 	bl	a1f00 <assertion_failed>
   a7834:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7838:	91058021 	add	x1, x1, #0x160
   a783c:	9104e020 	add	x0, x1, #0x138
   a7840:	52805a62 	mov	w2, #0x2d3                 	// #723
   a7844:	97ffe9af 	bl	a1f00 <assertion_failed>
   a7848:	12800013 	mov	w19, #0xffffffff            	// #-1
   a784c:	17ffffe2 	b	a77d4 <CSerialDevice::Peek()+0x44>
   a7850:	b9518261 	ldr	w1, [x19, #4480]
   a7854:	12800013 	mov	w19, #0xffffffff            	// #-1
   a7858:	35fffda1 	cbnz	w1, a780c <CSerialDevice::Peek()+0x7c>
   a785c:	17ffffde 	b	a77d4 <CSerialDevice::Peek()+0x44>

00000000000a7860 <CSerialDevice::Flush()>:
   a7860:	f9401001 	ldr	x1, [x0, #32]
   a7864:	91006021 	add	x1, x1, #0x18
   a7868:	b9400020 	ldr	w0, [x1]
   a786c:	371fffe0 	tbnz	w0, #3, a7868 <CSerialDevice::Flush()+0x8>
   a7870:	d65f03c0 	ret
   a7874:	d503201f 	nop
   a7878:	d503201f 	nop
   a787c:	d503201f 	nop

00000000000a7880 <CSerialDevice::Write(unsigned char)>:
   a7880:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a7884:	910003fd 	mov	x29, sp
   a7888:	a90153f3 	stp	x19, x20, [sp, #16]
   a788c:	aa0003f3 	mov	x19, x0
   a7890:	f9400800 	ldr	x0, [x0, #16]
   a7894:	f90013f5 	str	x21, [sp, #32]
   a7898:	12001c35 	and	w21, w1, #0xff
   a789c:	b4000480 	cbz	x0, a792c <CSerialDevice::Write(unsigned char)+0xac>
   a78a0:	b9518263 	ldr	w3, [x19, #4480]
   a78a4:	350002e3 	cbnz	w3, a7900 <CSerialDevice::Write(unsigned char)+0x80>
   a78a8:	b9515e62 	ldr	w2, [x19, #4444]
   a78ac:	b9516260 	ldr	w0, [x19, #4448]
   a78b0:	11000442 	add	w2, w2, #0x1
   a78b4:	12002842 	and	w2, w2, #0x7ff
   a78b8:	6b00005f 	cmp	w2, w0
   a78bc:	54000500 	b.eq	a795c <CSerialDevice::Write(unsigned char)+0xdc>  // b.none
   a78c0:	b9515e62 	ldr	w2, [x19, #4444]
   a78c4:	52800034 	mov	w20, #0x1                   	// #1
   a78c8:	0b140040 	add	w0, w2, w20
   a78cc:	b9115e60 	str	w0, [x19, #4444]
   a78d0:	8b224262 	add	x2, x19, w2, uxtw
   a78d4:	39257055 	strb	w21, [x2, #2396]
   a78d8:	b9515e60 	ldr	w0, [x19, #4444]
   a78dc:	12002800 	and	w0, w0, #0x7ff
   a78e0:	b9115e60 	str	w0, [x19, #4444]
   a78e4:	34000043 	cbz	w3, a78ec <CSerialDevice::Write(unsigned char)+0x6c>
   a78e8:	94001616 	bl	ad140 <LeaveCritical>
   a78ec:	f94013f5 	ldr	x21, [sp, #32]
   a78f0:	2a1403e0 	mov	w0, w20
   a78f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a78f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a78fc:	d65f03c0 	ret
   a7900:	2a0303e0 	mov	w0, w3
   a7904:	940015df 	bl	ad080 <EnterCritical>
   a7908:	b9515e60 	ldr	w0, [x19, #4444]
   a790c:	52800014 	mov	w20, #0x0                   	// #0
   a7910:	b9516261 	ldr	w1, [x19, #4448]
   a7914:	11000400 	add	w0, w0, #0x1
   a7918:	b9518263 	ldr	w3, [x19, #4480]
   a791c:	12002800 	and	w0, w0, #0x7ff
   a7920:	6b01001f 	cmp	w0, w1
   a7924:	54fffce1 	b.ne	a78c0 <CSerialDevice::Write(unsigned char)+0x40>  // b.any
   a7928:	17ffffef 	b	a78e4 <CSerialDevice::Write(unsigned char)+0x64>
   a792c:	f9401261 	ldr	x1, [x19, #32]
   a7930:	91006022 	add	x2, x1, #0x18
   a7934:	d503201f 	nop
   a7938:	b9400040 	ldr	w0, [x2]
   a793c:	372fffe0 	tbnz	w0, #5, a7938 <CSerialDevice::Write(unsigned char)+0xb8>
   a7940:	b9000035 	str	w21, [x1]
   a7944:	52800034 	mov	w20, #0x1                   	// #1
   a7948:	f94013f5 	ldr	x21, [sp, #32]
   a794c:	2a1403e0 	mov	w0, w20
   a7950:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7954:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7958:	d65f03c0 	ret
   a795c:	52800014 	mov	w20, #0x0                   	// #0
   a7960:	2a1403e0 	mov	w0, w20
   a7964:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7968:	f94013f5 	ldr	x21, [sp, #32]
   a796c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7970:	d65f03c0 	ret
   a7974:	d503201f 	nop
   a7978:	d503201f 	nop
   a797c:	d503201f 	nop

00000000000a7980 <CSerialDevice::Write(void const*, unsigned long)>:
   a7980:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a7984:	910003fd 	mov	x29, sp
   a7988:	a90153f3 	stp	x19, x20, [sp, #16]
   a798c:	aa0003f3 	mov	x19, x0
   a7990:	3940a000 	ldrb	w0, [x0, #40]
   a7994:	a9025bf5 	stp	x21, x22, [sp, #32]
   a7998:	f9001bf7 	str	x23, [sp, #48]
   a799c:	36001060 	tbz	w0, #0, a7ba8 <CSerialDevice::Write(void const*, unsigned long)+0x228>
   a79a0:	b9518660 	ldr	w0, [x19, #4484]
   a79a4:	aa0103f4 	mov	x20, x1
   a79a8:	aa0203f6 	mov	x22, x2
   a79ac:	35000e00 	cbnz	w0, a7b6c <CSerialDevice::Write(void const*, unsigned long)+0x1ec>
   a79b0:	b4001074 	cbz	x20, a7bbc <CSerialDevice::Write(void const*, unsigned long)+0x23c>
   a79b4:	8b160297 	add	x23, x20, x22
   a79b8:	52800015 	mov	w21, #0x0                   	// #0
   a79bc:	b50000b6 	cbnz	x22, a79d0 <CSerialDevice::Write(void const*, unsigned long)+0x50>
   a79c0:	14000020 	b	a7a40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>
   a79c4:	110006b5 	add	w21, w21, #0x1
   a79c8:	eb17029f 	cmp	x20, x23
   a79cc:	540003a0 	b.eq	a7a40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>  // b.none
   a79d0:	f9400a60 	ldr	x0, [x19, #16]
   a79d4:	39400296 	ldrb	w22, [x20]
   a79d8:	b40008a0 	cbz	x0, a7aec <CSerialDevice::Write(void const*, unsigned long)+0x16c>
   a79dc:	b9518260 	ldr	w0, [x19, #4480]
   a79e0:	35000940 	cbnz	w0, a7b08 <CSerialDevice::Write(void const*, unsigned long)+0x188>
   a79e4:	b9515e60 	ldr	w0, [x19, #4444]
   a79e8:	b9516261 	ldr	w1, [x19, #4448]
   a79ec:	11000400 	add	w0, w0, #0x1
   a79f0:	12002800 	and	w0, w0, #0x7ff
   a79f4:	6b00003f 	cmp	w1, w0
   a79f8:	54000240 	b.eq	a7a40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>  // b.none
   a79fc:	b9515e60 	ldr	w0, [x19, #4444]
   a7a00:	11000401 	add	w1, w0, #0x1
   a7a04:	b9115e61 	str	w1, [x19, #4444]
   a7a08:	8b204260 	add	x0, x19, w0, uxtw
   a7a0c:	39257016 	strb	w22, [x0, #2396]
   a7a10:	b9515e60 	ldr	w0, [x19, #4444]
   a7a14:	12002800 	and	w0, w0, #0x7ff
   a7a18:	b9115e60 	str	w0, [x19, #4444]
   a7a1c:	38401680 	ldrb	w0, [x20], #1
   a7a20:	7100281f 	cmp	w0, #0xa
   a7a24:	54fffd01 	b.ne	a79c4 <CSerialDevice::Write(void const*, unsigned long)+0x44>  // b.any
   a7a28:	b9516660 	ldr	w0, [x19, #4452]
   a7a2c:	3607fcc0 	tbz	w0, #0, a79c4 <CSerialDevice::Write(void const*, unsigned long)+0x44>
   a7a30:	aa1303e0 	mov	x0, x19
   a7a34:	528001a1 	mov	w1, #0xd                   	// #13
   a7a38:	97ffff92 	bl	a7880 <CSerialDevice::Write(unsigned char)>
   a7a3c:	3707fc40 	tbnz	w0, #0, a79c4 <CSerialDevice::Write(void const*, unsigned long)+0x44>
   a7a40:	b9518660 	ldr	w0, [x19, #4484]
   a7a44:	35000900 	cbnz	w0, a7b64 <CSerialDevice::Write(void const*, unsigned long)+0x1e4>
   a7a48:	f9400a60 	ldr	x0, [x19, #16]
   a7a4c:	b4000440 	cbz	x0, a7ad4 <CSerialDevice::Write(void const*, unsigned long)+0x154>
   a7a50:	b9518260 	ldr	w0, [x19, #4480]
   a7a54:	350009e0 	cbnz	w0, a7b90 <CSerialDevice::Write(void const*, unsigned long)+0x210>
   a7a58:	b9515e60 	ldr	w0, [x19, #4444]
   a7a5c:	b9516261 	ldr	w1, [x19, #4448]
   a7a60:	6b00003f 	cmp	w1, w0
   a7a64:	54000380 	b.eq	a7ad4 <CSerialDevice::Write(void const*, unsigned long)+0x154>  // b.none
   a7a68:	b9515e60 	ldr	w0, [x19, #4444]
   a7a6c:	b9516261 	ldr	w1, [x19, #4448]
   a7a70:	6b00003f 	cmp	w1, w0
   a7a74:	540002c0 	b.eq	a7acc <CSerialDevice::Write(void const*, unsigned long)+0x14c>  // b.none
   a7a78:	f9401262 	ldr	x2, [x19, #32]
   a7a7c:	91006043 	add	x3, x2, #0x18
   a7a80:	1400000e 	b	a7ab8 <CSerialDevice::Write(void const*, unsigned long)+0x138>
   a7a84:	b9516260 	ldr	w0, [x19, #4448]
   a7a88:	11000401 	add	w1, w0, #0x1
   a7a8c:	b9116261 	str	w1, [x19, #4448]
   a7a90:	8b204260 	add	x0, x19, w0, uxtw
   a7a94:	39657000 	ldrb	w0, [x0, #2396]
   a7a98:	b9000040 	str	w0, [x2]
   a7a9c:	b9516260 	ldr	w0, [x19, #4448]
   a7aa0:	12002800 	and	w0, w0, #0x7ff
   a7aa4:	b9116260 	str	w0, [x19, #4448]
   a7aa8:	b9515e61 	ldr	w1, [x19, #4444]
   a7aac:	b9516260 	ldr	w0, [x19, #4448]
   a7ab0:	6b00003f 	cmp	w1, w0
   a7ab4:	540000c0 	b.eq	a7acc <CSerialDevice::Write(void const*, unsigned long)+0x14c>  // b.none
   a7ab8:	b9400060 	ldr	w0, [x3]
   a7abc:	362ffe40 	tbz	w0, #5, a7a84 <CSerialDevice::Write(void const*, unsigned long)+0x104>
   a7ac0:	b9403840 	ldr	w0, [x2, #56]
   a7ac4:	321b0000 	orr	w0, w0, #0x20
   a7ac8:	b9003840 	str	w0, [x2, #56]
   a7acc:	b9518260 	ldr	w0, [x19, #4480]
   a7ad0:	35000520 	cbnz	w0, a7b74 <CSerialDevice::Write(void const*, unsigned long)+0x1f4>
   a7ad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7ad8:	2a1503e0 	mov	w0, w21
   a7adc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7ae0:	f9401bf7 	ldr	x23, [sp, #48]
   a7ae4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a7ae8:	d65f03c0 	ret
   a7aec:	f9401262 	ldr	x2, [x19, #32]
   a7af0:	91006041 	add	x1, x2, #0x18
   a7af4:	d503201f 	nop
   a7af8:	b9400020 	ldr	w0, [x1]
   a7afc:	372fffe0 	tbnz	w0, #5, a7af8 <CSerialDevice::Write(void const*, unsigned long)+0x178>
   a7b00:	b9000056 	str	w22, [x2]
   a7b04:	17ffffc6 	b	a7a1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a7b08:	9400155e 	bl	ad080 <EnterCritical>
   a7b0c:	b9515e61 	ldr	w1, [x19, #4444]
   a7b10:	b9516262 	ldr	w2, [x19, #4448]
   a7b14:	11000421 	add	w1, w1, #0x1
   a7b18:	b9518260 	ldr	w0, [x19, #4480]
   a7b1c:	12002821 	and	w1, w1, #0x7ff
   a7b20:	6b02003f 	cmp	w1, w2
   a7b24:	54000180 	b.eq	a7b54 <CSerialDevice::Write(void const*, unsigned long)+0x1d4>  // b.none
   a7b28:	b9515e61 	ldr	w1, [x19, #4444]
   a7b2c:	11000422 	add	w2, w1, #0x1
   a7b30:	b9115e62 	str	w2, [x19, #4444]
   a7b34:	8b214261 	add	x1, x19, w1, uxtw
   a7b38:	39257036 	strb	w22, [x1, #2396]
   a7b3c:	b9515e61 	ldr	w1, [x19, #4444]
   a7b40:	12002821 	and	w1, w1, #0x7ff
   a7b44:	b9115e61 	str	w1, [x19, #4444]
   a7b48:	34fff6a0 	cbz	w0, a7a1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a7b4c:	9400157d 	bl	ad140 <LeaveCritical>
   a7b50:	17ffffb3 	b	a7a1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a7b54:	34fff760 	cbz	w0, a7a40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>
   a7b58:	9400157a 	bl	ad140 <LeaveCritical>
   a7b5c:	b9518660 	ldr	w0, [x19, #4484]
   a7b60:	34fff740 	cbz	w0, a7a48 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   a7b64:	94001577 	bl	ad140 <LeaveCritical>
   a7b68:	17ffffb8 	b	a7a48 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   a7b6c:	94001545 	bl	ad080 <EnterCritical>
   a7b70:	17ffff90 	b	a79b0 <CSerialDevice::Write(void const*, unsigned long)+0x30>
   a7b74:	94001573 	bl	ad140 <LeaveCritical>
   a7b78:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7b7c:	2a1503e0 	mov	w0, w21
   a7b80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7b84:	f9401bf7 	ldr	x23, [sp, #48]
   a7b88:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a7b8c:	d65f03c0 	ret
   a7b90:	9400153c 	bl	ad080 <EnterCritical>
   a7b94:	b9515e61 	ldr	w1, [x19, #4444]
   a7b98:	b9516260 	ldr	w0, [x19, #4448]
   a7b9c:	6b00003f 	cmp	w1, w0
   a7ba0:	54fff641 	b.ne	a7a68 <CSerialDevice::Write(void const*, unsigned long)+0xe8>  // b.any
   a7ba4:	17ffffca 	b	a7acc <CSerialDevice::Write(void const*, unsigned long)+0x14c>
   a7ba8:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7bac:	91058021 	add	x1, x1, #0x160
   a7bb0:	91004020 	add	x0, x1, #0x10
   a7bb4:	52803da2 	mov	w2, #0x1ed                 	// #493
   a7bb8:	97ffe8d2 	bl	a1f00 <assertion_failed>
   a7bbc:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7bc0:	91058021 	add	x1, x1, #0x160
   a7bc4:	91008020 	add	x0, x1, #0x20
   a7bc8:	52803f42 	mov	w2, #0x1fa                 	// #506
   a7bcc:	97ffe8cd 	bl	a1f00 <assertion_failed>

00000000000a7bd0 <CSerialDevice::InterruptHandler()>:
   a7bd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7bd4:	910003fd 	mov	x29, sp
   a7bd8:	a90153f3 	stp	x19, x20, [sp, #16]
   a7bdc:	aa0003f3 	mov	x19, x0
   a7be0:	b9518000 	ldr	w0, [x0, #4480]
   a7be4:	35000ca0 	cbnz	w0, a7d78 <CSerialDevice::InterruptHandler()+0x1a8>
   a7be8:	f9401262 	ldr	x2, [x19, #32]
   a7bec:	91006043 	add	x3, x2, #0x18
   a7bf0:	b9404040 	ldr	w0, [x2, #64]
   a7bf4:	b9004440 	str	w0, [x2, #68]
   a7bf8:	b9401840 	ldr	w0, [x2, #24]
   a7bfc:	37200cc0 	tbnz	w0, #4, a7d94 <CSerialDevice::InterruptHandler()+0x1c4>
   a7c00:	f948b665 	ldr	x5, [x19, #4456]
   a7c04:	52800014 	mov	w20, #0x0                   	// #0
   a7c08:	12800026 	mov	w6, #0xfffffffe            	// #-2
   a7c0c:	12800007 	mov	w7, #0xffffffff            	// #-1
   a7c10:	52800028 	mov	w8, #0x1                   	// #1
   a7c14:	d503201f 	nop
   a7c18:	b9400041 	ldr	w1, [x2]
   a7c1c:	365006e1 	tbz	w1, #10, a7cf8 <CSerialDevice::InterruptHandler()+0x128>
   a7c20:	b9495a60 	ldr	w0, [x19, #2392]
   a7c24:	35000040 	cbnz	w0, a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7c28:	b9095a67 	str	w7, [x19, #2392]
   a7c2c:	b40000c5 	cbz	x5, a7c44 <CSerialDevice::InterruptHandler()+0x74>
   a7c30:	f948ba60 	ldr	x0, [x19, #4464]
   a7c34:	39c00004 	ldrsb	w4, [x0]
   a7c38:	6b21809f 	cmp	w4, w1, sxtb
   a7c3c:	540007c0 	b.eq	a7d34 <CSerialDevice::InterruptHandler()+0x164>  // b.none
   a7c40:	f908ba65 	str	x5, [x19, #4464]
   a7c44:	b9495260 	ldr	w0, [x19, #2384]
   a7c48:	b9495664 	ldr	w4, [x19, #2388]
   a7c4c:	11000400 	add	w0, w0, #0x1
   a7c50:	12002800 	and	w0, w0, #0x7ff
   a7c54:	6b04001f 	cmp	w0, w4
   a7c58:	540005a0 	b.eq	a7d0c <CSerialDevice::InterruptHandler()+0x13c>  // b.none
   a7c5c:	b9495260 	ldr	w0, [x19, #2384]
   a7c60:	11000404 	add	w4, w0, #0x1
   a7c64:	b9095264 	str	w4, [x19, #2384]
   a7c68:	8b204260 	add	x0, x19, w0, uxtw
   a7c6c:	39054001 	strb	w1, [x0, #336]
   a7c70:	b9495260 	ldr	w0, [x19, #2384]
   a7c74:	12002800 	and	w0, w0, #0x7ff
   a7c78:	b9095260 	str	w0, [x19, #2384]
   a7c7c:	b9400060 	ldr	w0, [x3]
   a7c80:	3627fcc0 	tbz	w0, #4, a7c18 <CSerialDevice::InterruptHandler()+0x48>
   a7c84:	b9401840 	ldr	w0, [x2, #24]
   a7c88:	362801a0 	tbz	w0, #5, a7cbc <CSerialDevice::InterruptHandler()+0xec>
   a7c8c:	14000013 	b	a7cd8 <CSerialDevice::InterruptHandler()+0x108>
   a7c90:	b9516260 	ldr	w0, [x19, #4448]
   a7c94:	11000401 	add	w1, w0, #0x1
   a7c98:	b9116261 	str	w1, [x19, #4448]
   a7c9c:	8b204260 	add	x0, x19, w0, uxtw
   a7ca0:	39657000 	ldrb	w0, [x0, #2396]
   a7ca4:	b9000040 	str	w0, [x2]
   a7ca8:	b9516260 	ldr	w0, [x19, #4448]
   a7cac:	12002800 	and	w0, w0, #0x7ff
   a7cb0:	b9116260 	str	w0, [x19, #4448]
   a7cb4:	b9400060 	ldr	w0, [x3]
   a7cb8:	37280100 	tbnz	w0, #5, a7cd8 <CSerialDevice::InterruptHandler()+0x108>
   a7cbc:	b9515e61 	ldr	w1, [x19, #4444]
   a7cc0:	b9516260 	ldr	w0, [x19, #4448]
   a7cc4:	6b00003f 	cmp	w1, w0
   a7cc8:	54fffe41 	b.ne	a7c90 <CSerialDevice::InterruptHandler()+0xc0>  // b.any
   a7ccc:	b9403840 	ldr	w0, [x2, #56]
   a7cd0:	121a7800 	and	w0, w0, #0xffffffdf
   a7cd4:	b9003840 	str	w0, [x2, #56]
   a7cd8:	b9518260 	ldr	w0, [x19, #4480]
   a7cdc:	35000440 	cbnz	w0, a7d64 <CSerialDevice::InterruptHandler()+0x194>
   a7ce0:	36000474 	tbz	w20, #0, a7d6c <CSerialDevice::InterruptHandler()+0x19c>
   a7ce4:	f948be60 	ldr	x0, [x19, #4472]
   a7ce8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7cec:	aa0003f0 	mov	x16, x0
   a7cf0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7cf4:	d61f0200 	br	x16
   a7cf8:	36580121 	tbz	w1, #11, a7d1c <CSerialDevice::InterruptHandler()+0x14c>
   a7cfc:	b9495a60 	ldr	w0, [x19, #2392]
   a7d00:	35fff960 	cbnz	w0, a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d04:	b9095a66 	str	w6, [x19, #2392]
   a7d08:	17ffffc9 	b	a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d0c:	b9495a60 	ldr	w0, [x19, #2392]
   a7d10:	35fffb60 	cbnz	w0, a7c7c <CSerialDevice::InterruptHandler()+0xac>
   a7d14:	b9095a66 	str	w6, [x19, #2392]
   a7d18:	17ffffd9 	b	a7c7c <CSerialDevice::InterruptHandler()+0xac>
   a7d1c:	36400181 	tbz	w1, #8, a7d4c <CSerialDevice::InterruptHandler()+0x17c>
   a7d20:	b9495a60 	ldr	w0, [x19, #2392]
   a7d24:	35fff840 	cbnz	w0, a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d28:	12800040 	mov	w0, #0xfffffffd            	// #-3
   a7d2c:	b9095a60 	str	w0, [x19, #2392]
   a7d30:	17ffffbf 	b	a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d34:	91000404 	add	x4, x0, #0x1
   a7d38:	f908ba64 	str	x4, [x19, #4464]
   a7d3c:	39c00400 	ldrsb	w0, [x0, #1]
   a7d40:	7100001f 	cmp	w0, #0x0
   a7d44:	1a881294 	csel	w20, w20, w8, ne	// ne = any
   a7d48:	17ffffbf 	b	a7c44 <CSerialDevice::InterruptHandler()+0x74>
   a7d4c:	364ff701 	tbz	w1, #9, a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d50:	b9495a60 	ldr	w0, [x19, #2392]
   a7d54:	35fff6c0 	cbnz	w0, a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d58:	12800060 	mov	w0, #0xfffffffc            	// #-4
   a7d5c:	b9095a60 	str	w0, [x19, #2392]
   a7d60:	17ffffb3 	b	a7c2c <CSerialDevice::InterruptHandler()+0x5c>
   a7d64:	940014f7 	bl	ad140 <LeaveCritical>
   a7d68:	3707fbf4 	tbnz	w20, #0, a7ce4 <CSerialDevice::InterruptHandler()+0x114>
   a7d6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7d70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7d74:	d65f03c0 	ret
   a7d78:	940014c2 	bl	ad080 <EnterCritical>
   a7d7c:	f9401262 	ldr	x2, [x19, #32]
   a7d80:	91006043 	add	x3, x2, #0x18
   a7d84:	b9404040 	ldr	w0, [x2, #64]
   a7d88:	b9004440 	str	w0, [x2, #68]
   a7d8c:	b9401840 	ldr	w0, [x2, #24]
   a7d90:	3627f380 	tbz	w0, #4, a7c00 <CSerialDevice::InterruptHandler()+0x30>
   a7d94:	b9401840 	ldr	w0, [x2, #24]
   a7d98:	52800014 	mov	w20, #0x0                   	// #0
   a7d9c:	362ff900 	tbz	w0, #5, a7cbc <CSerialDevice::InterruptHandler()+0xec>
   a7da0:	b9518260 	ldr	w0, [x19, #4480]
   a7da4:	34fffe40 	cbz	w0, a7d6c <CSerialDevice::InterruptHandler()+0x19c>
   a7da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7dac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7db0:	140014e4 	b	ad140 <LeaveCritical>
   a7db4:	d503201f 	nop
   a7db8:	d503201f 	nop
   a7dbc:	d503201f 	nop

00000000000a7dc0 <CSerialDevice::InterruptStub(void*)>:
   a7dc0:	d5033fbf 	dmb	sy
   a7dc4:	f0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a7dc8:	91328001 	add	x1, x0, #0xca0
   a7dcc:	b9401c21 	ldr	w1, [x1, #28]
   a7dd0:	36000081 	tbz	w1, #0, a7de0 <CSerialDevice::InterruptStub(void*)+0x20>
   a7dd4:	f9465000 	ldr	x0, [x0, #3232]
   a7dd8:	b4000060 	cbz	x0, a7de4 <CSerialDevice::InterruptStub(void*)+0x24>
   a7ddc:	17ffff7d 	b	a7bd0 <CSerialDevice::InterruptHandler()>
   a7de0:	d65f03c0 	ret
   a7de4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7de8:	900000a1 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   a7dec:	91058021 	add	x1, x1, #0x160
   a7df0:	910003fd 	mov	x29, sp
   a7df4:	91064020 	add	x0, x1, #0x190
   a7df8:	528070c2 	mov	w2, #0x386                 	// #902
   a7dfc:	97ffe841 	bl	a1f00 <assertion_failed>

00000000000a7e00 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>:
   a7e00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a7e04:	910003fd 	mov	x29, sp
   a7e08:	a90153f3 	stp	x19, x20, [sp, #16]
   a7e0c:	aa0003f3 	mov	x19, x0
   a7e10:	a9025bf5 	stp	x21, x22, [sp, #32]
   a7e14:	97ffec27 	bl	a2eb0 <CDeviceNameService::Get()>
   a7e18:	b9401e62 	ldr	w2, [x19, #28]
   a7e1c:	900000b5 	adrp	x21, bb000 <s_ActLEDInfo+0x1f0>
   a7e20:	910582b6 	add	x22, x21, #0x160
   a7e24:	9104c2c1 	add	x1, x22, #0x130
   a7e28:	11000442 	add	w2, w2, #0x1
   a7e2c:	52800003 	mov	w3, #0x0                   	// #0
   a7e30:	97ffec50 	bl	a2f70 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a7e34:	b9401e62 	ldr	w2, [x19, #28]
   a7e38:	f0000114 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   a7e3c:	91328281 	add	x1, x20, #0xca0
   a7e40:	52800020 	mov	w0, #0x1                   	// #1
   a7e44:	1ac22000 	lsl	w0, w0, w2
   a7e48:	b9401c22 	ldr	w2, [x1, #28]
   a7e4c:	0a200040 	bic	w0, w2, w0
   a7e50:	b9001c20 	str	w0, [x1, #28]
   a7e54:	d5033f9f 	dsb	sy
   a7e58:	f9401260 	ldr	x0, [x19, #32]
   a7e5c:	f9400a62 	ldr	x2, [x19, #16]
   a7e60:	b900381f 	str	wzr, [x0, #56]
   a7e64:	b900301f 	str	wzr, [x0, #48]
   a7e68:	b40001a2 	cbz	x2, a7e9c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x9c>
   a7e6c:	b9400820 	ldr	w0, [x1, #8]
   a7e70:	51000400 	sub	w0, w0, #0x1
   a7e74:	b9000820 	str	w0, [x1, #8]
   a7e78:	35000120 	cbnz	w0, a7e9c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x9c>
   a7e7c:	f9400820 	ldr	x0, [x1, #16]
   a7e80:	b40005a0 	cbz	x0, a7f34 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x134>
   a7e84:	39406021 	ldrb	w1, [x1, #24]
   a7e88:	36000501 	tbz	w1, #0, a7f28 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x128>
   a7e8c:	940017ad 	bl	add40 <CInterruptSystem::DisconnectFIQ()>
   a7e90:	91328280 	add	x0, x20, #0xca0
   a7e94:	f900081f 	str	xzr, [x0, #16]
   a7e98:	3900601f 	strb	wzr, [x0, #24]
   a7e9c:	b9401e60 	ldr	w0, [x19, #28]
   a7ea0:	910582b5 	add	x21, x21, #0x160
   a7ea4:	91030276 	add	x22, x19, #0xc0
   a7ea8:	8b0012a0 	add	x0, x21, x0, lsl #4
   a7eac:	b9403400 	ldr	w0, [x0, #52]
   a7eb0:	11001000 	add	w0, w0, #0x4
   a7eb4:	7100241f 	cmp	w0, #0x9
   a7eb8:	540002ed 	b.le	a7f14 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x114>
   a7ebc:	91042275 	add	x21, x19, #0x108
   a7ec0:	52800022 	mov	w2, #0x1                   	// #1
   a7ec4:	aa1503e0 	mov	x0, x21
   a7ec8:	52800001 	mov	w1, #0x0                   	// #0
   a7ecc:	94001c59 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a7ed0:	91328294 	add	x20, x20, #0xca0
   a7ed4:	b9401e61 	ldr	w1, [x19, #28]
   a7ed8:	aa1503e0 	mov	x0, x21
   a7edc:	3900a27f 	strb	wzr, [x19, #40]
   a7ee0:	f8217a9f 	str	xzr, [x20, x1, lsl #3]
   a7ee4:	9400199b 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7ee8:	aa1603e0 	mov	x0, x22
   a7eec:	94001999 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7ef0:	9101e260 	add	x0, x19, #0x78
   a7ef4:	94001997 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7ef8:	9100c260 	add	x0, x19, #0x30
   a7efc:	94001995 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7f00:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7f04:	aa1303e0 	mov	x0, x19
   a7f08:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7f0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a7f10:	17ffea54 	b	a2860 <CDevice::~CDevice()>
   a7f14:	aa1603e0 	mov	x0, x22
   a7f18:	52800022 	mov	w2, #0x1                   	// #1
   a7f1c:	52800001 	mov	w1, #0x0                   	// #0
   a7f20:	94001c44 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a7f24:	17ffffe6 	b	a7ebc <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xbc>
   a7f28:	52800721 	mov	w1, #0x39                  	// #57
   a7f2c:	9400182d 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a7f30:	17ffffd8 	b	a7e90 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x90>
   a7f34:	aa1603e1 	mov	x1, x22
   a7f38:	910682c0 	add	x0, x22, #0x1a0
   a7f3c:	528024c2 	mov	w2, #0x126                 	// #294
   a7f40:	97ffe7f0 	bl	a1f00 <assertion_failed>
   a7f44:	d503201f 	nop
   a7f48:	d503201f 	nop
   a7f4c:	d503201f 	nop

00000000000a7f50 <CSerialDevice::~CSerialDevice()>:
   a7f50:	3940a002 	ldrb	w2, [x0, #40]
   a7f54:	f0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a7f58:	91258021 	add	x1, x1, #0x960
   a7f5c:	f9000001 	str	x1, [x0]
   a7f60:	36000042 	tbz	w2, #0, a7f68 <CSerialDevice::~CSerialDevice()+0x18>
   a7f64:	17ffffa7 	b	a7e00 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   a7f68:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7f6c:	910003fd 	mov	x29, sp
   a7f70:	f9000bf3 	str	x19, [sp, #16]
   a7f74:	aa0003f3 	mov	x19, x0
   a7f78:	91042000 	add	x0, x0, #0x108
   a7f7c:	94001975 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7f80:	91030260 	add	x0, x19, #0xc0
   a7f84:	94001973 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7f88:	9101e260 	add	x0, x19, #0x78
   a7f8c:	94001971 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7f90:	9100c260 	add	x0, x19, #0x30
   a7f94:	9400196f 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7f98:	aa1303e0 	mov	x0, x19
   a7f9c:	f9400bf3 	ldr	x19, [sp, #16]
   a7fa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7fa4:	17ffea2f 	b	a2860 <CDevice::~CDevice()>
   a7fa8:	d503201f 	nop
   a7fac:	d503201f 	nop

00000000000a7fb0 <CSerialDevice::~CSerialDevice()>:
   a7fb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7fb4:	f0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a7fb8:	91258021 	add	x1, x1, #0x960
   a7fbc:	910003fd 	mov	x29, sp
   a7fc0:	3940a002 	ldrb	w2, [x0, #40]
   a7fc4:	f9000bf3 	str	x19, [sp, #16]
   a7fc8:	aa0003f3 	mov	x19, x0
   a7fcc:	f9000001 	str	x1, [x0]
   a7fd0:	360000e2 	tbz	w2, #0, a7fec <CSerialDevice::~CSerialDevice()+0x3c>
   a7fd4:	97ffff8b 	bl	a7e00 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   a7fd8:	aa1303e0 	mov	x0, x19
   a7fdc:	d2823101 	mov	x1, #0x1188                	// #4488
   a7fe0:	f9400bf3 	ldr	x19, [sp, #16]
   a7fe4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7fe8:	14000ef2 	b	abbb0 <operator delete(void*, unsigned long)>
   a7fec:	91042000 	add	x0, x0, #0x108
   a7ff0:	94001958 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7ff4:	91030260 	add	x0, x19, #0xc0
   a7ff8:	94001956 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a7ffc:	9101e260 	add	x0, x19, #0x78
   a8000:	94001954 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a8004:	9100c260 	add	x0, x19, #0x30
   a8008:	94001952 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   a800c:	aa1303e0 	mov	x0, x19
   a8010:	97ffea14 	bl	a2860 <CDevice::~CDevice()>
   a8014:	aa1303e0 	mov	x0, x19
   a8018:	d2823101 	mov	x1, #0x1188                	// #4488
   a801c:	f9400bf3 	ldr	x19, [sp, #16]
   a8020:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8024:	14000ee3 	b	abbb0 <operator delete(void*, unsigned long)>
	...

00000000000a8030 <CString::~CString()>:
   a8030:	aa0003e1 	mov	x1, x0
   a8034:	d0000102 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a8038:	9126c042 	add	x2, x2, #0x9b0
   a803c:	f9400400 	ldr	x0, [x0, #8]
   a8040:	f9000022 	str	x2, [x1]
   a8044:	b4000040 	cbz	x0, a804c <CString::~CString()+0x1c>
   a8048:	14000ed2 	b	abb90 <operator delete[](void*)>
   a804c:	d65f03c0 	ret

00000000000a8050 <CString::~CString()>:
   a8050:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8054:	d0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a8058:	9126c021 	add	x1, x1, #0x9b0
   a805c:	910003fd 	mov	x29, sp
   a8060:	f9000bf3 	str	x19, [sp, #16]
   a8064:	aa0003f3 	mov	x19, x0
   a8068:	f9400400 	ldr	x0, [x0, #8]
   a806c:	f9000261 	str	x1, [x19]
   a8070:	b4000040 	cbz	x0, a8078 <CString::~CString()+0x28>
   a8074:	94000ec7 	bl	abb90 <operator delete[](void*)>
   a8078:	aa1303e0 	mov	x0, x19
   a807c:	d2800401 	mov	x1, #0x20                  	// #32
   a8080:	f9400bf3 	ldr	x19, [sp, #16]
   a8084:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8088:	14000eca 	b	abbb0 <operator delete(void*, unsigned long)>
   a808c:	d503201f 	nop

00000000000a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   a8090:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8094:	910003fd 	mov	x29, sp
   a8098:	f9400402 	ldr	x2, [x0, #8]
   a809c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a80a0:	f9400c15 	ldr	x21, [x0, #24]
   a80a4:	a90153f3 	stp	x19, x20, [sp, #16]
   a80a8:	aa0003f3 	mov	x19, x0
   a80ac:	cb0202b5 	sub	x21, x21, x2
   a80b0:	b9401000 	ldr	w0, [x0, #16]
   a80b4:	8b0102a1 	add	x1, x21, x1
   a80b8:	91000422 	add	x2, x1, #0x1
   a80bc:	eb00005f 	cmp	x2, x0
   a80c0:	540000a8 	b.hi	a80d4 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x44>  // b.pmore
   a80c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a80c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a80cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a80d0:	d65f03c0 	ret
   a80d4:	91010434 	add	x20, x1, #0x41
   a80d8:	aa1403e0 	mov	x0, x20
   a80dc:	94000e9d 	bl	abb50 <operator new[](unsigned long)>
   a80e0:	f9400e61 	ldr	x1, [x19, #24]
   a80e4:	aa0003f6 	mov	x22, x0
   a80e8:	3900003f 	strb	wzr, [x1]
   a80ec:	f9400661 	ldr	x1, [x19, #8]
   a80f0:	94000b38 	bl	aadd0 <strcpy>
   a80f4:	f9400660 	ldr	x0, [x19, #8]
   a80f8:	b4000040 	cbz	x0, a8100 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   a80fc:	94000ea5 	bl	abb90 <operator delete[](void*)>
   a8100:	8b1502d5 	add	x21, x22, x21
   a8104:	f9000676 	str	x22, [x19, #8]
   a8108:	b9001274 	str	w20, [x19, #16]
   a810c:	f9000e75 	str	x21, [x19, #24]
   a8110:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8114:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8118:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a811c:	d65f03c0 	ret

00000000000a8120 <CString::CString()>:
   a8120:	d0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a8124:	9126c021 	add	x1, x1, #0x9b0
   a8128:	a9007c01 	stp	x1, xzr, [x0]
   a812c:	b900101f 	str	wzr, [x0, #16]
   a8130:	d65f03c0 	ret
   a8134:	d503201f 	nop
   a8138:	d503201f 	nop
   a813c:	d503201f 	nop

00000000000a8140 <CString::CString(char const*)>:
   a8140:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8144:	d0000102 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a8148:	9126c042 	add	x2, x2, #0x9b0
   a814c:	910003fd 	mov	x29, sp
   a8150:	a90153f3 	stp	x19, x20, [sp, #16]
   a8154:	aa0003f3 	mov	x19, x0
   a8158:	aa0103f4 	mov	x20, x1
   a815c:	aa0103e0 	mov	x0, x1
   a8160:	f9000262 	str	x2, [x19]
   a8164:	94000a8b 	bl	aab90 <strlen>
   a8168:	11000400 	add	w0, w0, #0x1
   a816c:	b9001260 	str	w0, [x19, #16]
   a8170:	94000e78 	bl	abb50 <operator new[](unsigned long)>
   a8174:	f9000660 	str	x0, [x19, #8]
   a8178:	aa1403e1 	mov	x1, x20
   a817c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8180:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8184:	14000b13 	b	aadd0 <strcpy>
   a8188:	d503201f 	nop
   a818c:	d503201f 	nop

00000000000a8190 <CString::CString(CString const&)>:
   a8190:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8194:	910003fd 	mov	x29, sp
   a8198:	f90013f5 	str	x21, [sp, #32]
   a819c:	aa0103f5 	mov	x21, x1
   a81a0:	a90153f3 	stp	x19, x20, [sp, #16]
   a81a4:	aa0003f3 	mov	x19, x0
   a81a8:	d0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a81ac:	9126c021 	add	x1, x1, #0x9b0
   a81b0:	d0000054 	adrp	x20, b2000 <SErrorStub+0xc>
   a81b4:	91278294 	add	x20, x20, #0x9e0
   a81b8:	f9000261 	str	x1, [x19]
   a81bc:	f94006a0 	ldr	x0, [x21, #8]
   a81c0:	f100001f 	cmp	x0, #0x0
   a81c4:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   a81c8:	94000a72 	bl	aab90 <strlen>
   a81cc:	11000400 	add	w0, w0, #0x1
   a81d0:	b9001260 	str	w0, [x19, #16]
   a81d4:	94000e5f 	bl	abb50 <operator new[](unsigned long)>
   a81d8:	f94006a1 	ldr	x1, [x21, #8]
   a81dc:	f94013f5 	ldr	x21, [sp, #32]
   a81e0:	f9000660 	str	x0, [x19, #8]
   a81e4:	f100003f 	cmp	x1, #0x0
   a81e8:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   a81ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a81f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a81f4:	14000af7 	b	aadd0 <strcpy>
   a81f8:	d503201f 	nop
   a81fc:	d503201f 	nop

00000000000a8200 <CString::CString(CString&&)>:
   a8200:	f9400423 	ldr	x3, [x1, #8]
   a8204:	d0000102 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a8208:	9126c042 	add	x2, x2, #0x9b0
   a820c:	a9000c02 	stp	x2, x3, [x0]
   a8210:	b9401022 	ldr	w2, [x1, #16]
   a8214:	f900043f 	str	xzr, [x1, #8]
   a8218:	b9001002 	str	w2, [x0, #16]
   a821c:	b900103f 	str	wzr, [x1, #16]
   a8220:	d65f03c0 	ret
   a8224:	d503201f 	nop
   a8228:	d503201f 	nop
   a822c:	d503201f 	nop

00000000000a8230 <CString::operator char const*() const>:
   a8230:	f9400400 	ldr	x0, [x0, #8]
   a8234:	d0000041 	adrp	x1, b2000 <SErrorStub+0xc>
   a8238:	91278021 	add	x1, x1, #0x9e0
   a823c:	f100001f 	cmp	x0, #0x0
   a8240:	9a800020 	csel	x0, x1, x0, eq	// eq = none
   a8244:	d65f03c0 	ret
   a8248:	d503201f 	nop
   a824c:	d503201f 	nop

00000000000a8250 <CString::operator=(char const*)>:
   a8250:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8254:	910003fd 	mov	x29, sp
   a8258:	a90153f3 	stp	x19, x20, [sp, #16]
   a825c:	aa0003f3 	mov	x19, x0
   a8260:	aa0103f4 	mov	x20, x1
   a8264:	f9400400 	ldr	x0, [x0, #8]
   a8268:	b4000040 	cbz	x0, a8270 <CString::operator=(char const*)+0x20>
   a826c:	94000e49 	bl	abb90 <operator delete[](void*)>
   a8270:	aa1403e0 	mov	x0, x20
   a8274:	94000a47 	bl	aab90 <strlen>
   a8278:	11000400 	add	w0, w0, #0x1
   a827c:	b9001260 	str	w0, [x19, #16]
   a8280:	94000e34 	bl	abb50 <operator new[](unsigned long)>
   a8284:	f9000660 	str	x0, [x19, #8]
   a8288:	aa1403e1 	mov	x1, x20
   a828c:	94000ad1 	bl	aadd0 <strcpy>
   a8290:	f9400660 	ldr	x0, [x19, #8]
   a8294:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8298:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a829c:	d65f03c0 	ret

00000000000a82a0 <CString::operator=(CString const&)>:
   a82a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a82a4:	910003fd 	mov	x29, sp
   a82a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a82ac:	aa0003f3 	mov	x19, x0
   a82b0:	f9400400 	ldr	x0, [x0, #8]
   a82b4:	f90013f5 	str	x21, [sp, #32]
   a82b8:	aa0103f5 	mov	x21, x1
   a82bc:	b4000040 	cbz	x0, a82c4 <CString::operator=(CString const&)+0x24>
   a82c0:	94000e34 	bl	abb90 <operator delete[](void*)>
   a82c4:	f94006a0 	ldr	x0, [x21, #8]
   a82c8:	d0000054 	adrp	x20, b2000 <SErrorStub+0xc>
   a82cc:	91278294 	add	x20, x20, #0x9e0
   a82d0:	f100001f 	cmp	x0, #0x0
   a82d4:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   a82d8:	94000a2e 	bl	aab90 <strlen>
   a82dc:	11000400 	add	w0, w0, #0x1
   a82e0:	b9001260 	str	w0, [x19, #16]
   a82e4:	94000e1b 	bl	abb50 <operator new[](unsigned long)>
   a82e8:	f9000660 	str	x0, [x19, #8]
   a82ec:	f94006a1 	ldr	x1, [x21, #8]
   a82f0:	f100003f 	cmp	x1, #0x0
   a82f4:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   a82f8:	94000ab6 	bl	aadd0 <strcpy>
   a82fc:	f94013f5 	ldr	x21, [sp, #32]
   a8300:	aa1303e0 	mov	x0, x19
   a8304:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8308:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a830c:	d65f03c0 	ret

00000000000a8310 <CString::operator=(CString&&)>:
   a8310:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8314:	910003fd 	mov	x29, sp
   a8318:	a90153f3 	stp	x19, x20, [sp, #16]
   a831c:	aa0003f4 	mov	x20, x0
   a8320:	aa0103f3 	mov	x19, x1
   a8324:	f9400400 	ldr	x0, [x0, #8]
   a8328:	b4000040 	cbz	x0, a8330 <CString::operator=(CString&&)+0x20>
   a832c:	94000e19 	bl	abb90 <operator delete[](void*)>
   a8330:	f9400662 	ldr	x2, [x19, #8]
   a8334:	aa1403e0 	mov	x0, x20
   a8338:	b9401261 	ldr	w1, [x19, #16]
   a833c:	f9000682 	str	x2, [x20, #8]
   a8340:	b9001281 	str	w1, [x20, #16]
   a8344:	f900067f 	str	xzr, [x19, #8]
   a8348:	b900127f 	str	wzr, [x19, #16]
   a834c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8350:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8354:	d65f03c0 	ret
   a8358:	d503201f 	nop
   a835c:	d503201f 	nop

00000000000a8360 <CString::GetLength() const>:
   a8360:	f9400400 	ldr	x0, [x0, #8]
   a8364:	b4000040 	cbz	x0, a836c <CString::GetLength() const+0xc>
   a8368:	14000a0a 	b	aab90 <strlen>
   a836c:	d2800000 	mov	x0, #0x0                   	// #0
   a8370:	d65f03c0 	ret
   a8374:	d503201f 	nop
   a8378:	d503201f 	nop
   a837c:	d503201f 	nop

00000000000a8380 <CString::Append(char const*)>:
   a8380:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8384:	52800022 	mov	w2, #0x1                   	// #1
   a8388:	910003fd 	mov	x29, sp
   a838c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8390:	aa0003f3 	mov	x19, x0
   a8394:	f9400400 	ldr	x0, [x0, #8]
   a8398:	f90013f5 	str	x21, [sp, #32]
   a839c:	b9001262 	str	w2, [x19, #16]
   a83a0:	aa0103f5 	mov	x21, x1
   a83a4:	b40000a0 	cbz	x0, a83b8 <CString::Append(char const*)+0x38>
   a83a8:	940009fa 	bl	aab90 <strlen>
   a83ac:	b9401261 	ldr	w1, [x19, #16]
   a83b0:	0b000021 	add	w1, w1, w0
   a83b4:	b9001261 	str	w1, [x19, #16]
   a83b8:	aa1503e0 	mov	x0, x21
   a83bc:	940009f5 	bl	aab90 <strlen>
   a83c0:	b9401261 	ldr	w1, [x19, #16]
   a83c4:	0b000020 	add	w0, w1, w0
   a83c8:	b9001260 	str	w0, [x19, #16]
   a83cc:	94000de1 	bl	abb50 <operator new[](unsigned long)>
   a83d0:	aa0003f4 	mov	x20, x0
   a83d4:	f9400661 	ldr	x1, [x19, #8]
   a83d8:	b40001a1 	cbz	x1, a840c <CString::Append(char const*)+0x8c>
   a83dc:	94000a7d 	bl	aadd0 <strcpy>
   a83e0:	f9400660 	ldr	x0, [x19, #8]
   a83e4:	b4000040 	cbz	x0, a83ec <CString::Append(char const*)+0x6c>
   a83e8:	94000dea 	bl	abb90 <operator delete[](void*)>
   a83ec:	aa1503e1 	mov	x1, x21
   a83f0:	aa1403e0 	mov	x0, x20
   a83f4:	94000a8f 	bl	aae30 <strcat>
   a83f8:	f94013f5 	ldr	x21, [sp, #32]
   a83fc:	f9000674 	str	x20, [x19, #8]
   a8400:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8404:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8408:	d65f03c0 	ret
   a840c:	3900001f 	strb	wzr, [x0]
   a8410:	aa1503e1 	mov	x1, x21
   a8414:	aa1403e0 	mov	x0, x20
   a8418:	94000a86 	bl	aae30 <strcat>
   a841c:	f94013f5 	ldr	x21, [sp, #32]
   a8420:	f9000674 	str	x20, [x19, #8]
   a8424:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8428:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a842c:	d65f03c0 	ret

00000000000a8430 <CString::Compare(char const*) const>:
   a8430:	f9400400 	ldr	x0, [x0, #8]
   a8434:	140009e3 	b	aabc0 <strcmp>
   a8438:	d503201f 	nop
   a843c:	d503201f 	nop

00000000000a8440 <CString::Find(char) const>:
   a8440:	f9400403 	ldr	x3, [x0, #8]
   a8444:	13001c21 	sxtb	w1, w1
   a8448:	39c00062 	ldrsb	w2, [x3]
   a844c:	34000122 	cbz	w2, a8470 <CString::Find(char) const+0x30>
   a8450:	d2800000 	mov	x0, #0x0                   	// #0
   a8454:	14000004 	b	a8464 <CString::Find(char) const+0x24>
   a8458:	91000400 	add	x0, x0, #0x1
   a845c:	38e06862 	ldrsb	w2, [x3, x0]
   a8460:	34000082 	cbz	w2, a8470 <CString::Find(char) const+0x30>
   a8464:	6b02003f 	cmp	w1, w2
   a8468:	54ffff81 	b.ne	a8458 <CString::Find(char) const+0x18>  // b.any
   a846c:	d65f03c0 	ret
   a8470:	12800000 	mov	w0, #0xffffffff            	// #-1
   a8474:	d65f03c0 	ret
   a8478:	d503201f 	nop
   a847c:	d503201f 	nop

00000000000a8480 <CString::Replace(char const*, char const*)>:
   a8480:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a8484:	910003fd 	mov	x29, sp
   a8488:	a90153f3 	stp	x19, x20, [sp, #16]
   a848c:	aa0003f4 	mov	x20, x0
   a8490:	a90363f7 	stp	x23, x24, [sp, #48]
   a8494:	52800017 	mov	w23, #0x0                   	// #0
   a8498:	39c00020 	ldrsb	w0, [x1]
   a849c:	350000c0 	cbnz	w0, a84b4 <CString::Replace(char const*, char const*)+0x34>
   a84a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a84a4:	2a1703e0 	mov	w0, w23
   a84a8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a84ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a84b0:	d65f03c0 	ret
   a84b4:	f9400693 	ldr	x19, [x20, #8]
   a84b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a84bc:	aa0103f5 	mov	x21, x1
   a84c0:	aa0203f6 	mov	x22, x2
   a84c4:	aa1303e0 	mov	x0, x19
   a84c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   a84cc:	940009b1 	bl	aab90 <strlen>
   a84d0:	11000400 	add	w0, w0, #0x1
   a84d4:	94000d9f 	bl	abb50 <operator new[](unsigned long)>
   a84d8:	aa0003f8 	mov	x24, x0
   a84dc:	aa1303e1 	mov	x1, x19
   a84e0:	94000a3c 	bl	aadd0 <strcpy>
   a84e4:	f9400680 	ldr	x0, [x20, #8]
   a84e8:	b4000040 	cbz	x0, a84f0 <CString::Replace(char const*, char const*)+0x70>
   a84ec:	94000da9 	bl	abb90 <operator delete[](void*)>
   a84f0:	52800800 	mov	w0, #0x40                  	// #64
   a84f4:	b9001280 	str	w0, [x20, #16]
   a84f8:	aa1803f3 	mov	x19, x24
   a84fc:	d2800800 	mov	x0, #0x40                  	// #64
   a8500:	52800017 	mov	w23, #0x0                   	// #0
   a8504:	94000d93 	bl	abb50 <operator new[](unsigned long)>
   a8508:	f9000680 	str	x0, [x20, #8]
   a850c:	f9000e80 	str	x0, [x20, #24]
   a8510:	39c002a1 	ldrsb	w1, [x21]
   a8514:	aa1303e0 	mov	x0, x19
   a8518:	94000a56 	bl	aae70 <strchr>
   a851c:	aa0003fa 	mov	x26, x0
   a8520:	b4000500 	cbz	x0, a85c0 <CString::Replace(char const*, char const*)+0x140>
   a8524:	aa1303e3 	mov	x3, x19
   a8528:	eb00027f 	cmp	x19, x0
   a852c:	54000182 	b.cs	a855c <CString::Replace(char const*, char const*)+0xdc>  // b.hs, b.nlast
   a8530:	38c01679 	ldrsb	w25, [x19], #1
   a8534:	aa1403e0 	mov	x0, x20
   a8538:	d2800021 	mov	x1, #0x1                   	// #1
   a853c:	97fffed5 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8540:	f9400e81 	ldr	x1, [x20, #24]
   a8544:	eb13035f 	cmp	x26, x19
   a8548:	91000420 	add	x0, x1, #0x1
   a854c:	f9000e80 	str	x0, [x20, #24]
   a8550:	39000039 	strb	w25, [x1]
   a8554:	54fffee1 	b.ne	a8530 <CString::Replace(char const*, char const*)+0xb0>  // b.any
   a8558:	aa1a03e3 	mov	x3, x26
   a855c:	39c006a1 	ldrsb	w1, [x21, #1]
   a8560:	91000753 	add	x19, x26, #0x1
   a8564:	910006a2 	add	x2, x21, #0x1
   a8568:	35000081 	cbnz	w1, a8578 <CString::Replace(char const*, char const*)+0xf8>
   a856c:	1400002c 	b	a861c <CString::Replace(char const*, char const*)+0x19c>
   a8570:	38c01c41 	ldrsb	w1, [x2, #1]!
   a8574:	34000541 	cbz	w1, a861c <CString::Replace(char const*, char const*)+0x19c>
   a8578:	39c00260 	ldrsb	w0, [x19]
   a857c:	91000673 	add	x19, x19, #0x1
   a8580:	6b01001f 	cmp	w0, w1
   a8584:	54ffff60 	b.eq	a8570 <CString::Replace(char const*, char const*)+0xf0>  // b.none
   a8588:	aa0303f3 	mov	x19, x3
   a858c:	aa1403e0 	mov	x0, x20
   a8590:	d2800021 	mov	x1, #0x1                   	// #1
   a8594:	38c01679 	ldrsb	w25, [x19], #1
   a8598:	97fffebe 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a859c:	f9400e80 	ldr	x0, [x20, #24]
   a85a0:	91000401 	add	x1, x0, #0x1
   a85a4:	f9000e81 	str	x1, [x20, #24]
   a85a8:	39000019 	strb	w25, [x0]
   a85ac:	aa1303e0 	mov	x0, x19
   a85b0:	39c002a1 	ldrsb	w1, [x21]
   a85b4:	94000a2f 	bl	aae70 <strchr>
   a85b8:	aa0003fa 	mov	x26, x0
   a85bc:	b5fffb40 	cbnz	x0, a8524 <CString::Replace(char const*, char const*)+0xa4>
   a85c0:	aa1303e0 	mov	x0, x19
   a85c4:	94000973 	bl	aab90 <strlen>
   a85c8:	aa0003f5 	mov	x21, x0
   a85cc:	b4000080 	cbz	x0, a85dc <CString::Replace(char const*, char const*)+0x15c>
   a85d0:	aa0003e1 	mov	x1, x0
   a85d4:	aa1403e0 	mov	x0, x20
   a85d8:	97fffeae 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a85dc:	f9400e80 	ldr	x0, [x20, #24]
   a85e0:	aa1303e1 	mov	x1, x19
   a85e4:	940009fb 	bl	aadd0 <strcpy>
   a85e8:	f9400e81 	ldr	x1, [x20, #24]
   a85ec:	aa1803e0 	mov	x0, x24
   a85f0:	8b150022 	add	x2, x1, x21
   a85f4:	f9000e82 	str	x2, [x20, #24]
   a85f8:	3835683f 	strb	wzr, [x1, x21]
   a85fc:	94000d65 	bl	abb90 <operator delete[](void*)>
   a8600:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8604:	2a1703e0 	mov	w0, w23
   a8608:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a860c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a8610:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a8614:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a8618:	d65f03c0 	ret
   a861c:	aa1603e0 	mov	x0, x22
   a8620:	9400095c 	bl	aab90 <strlen>
   a8624:	aa0003f9 	mov	x25, x0
   a8628:	b4000080 	cbz	x0, a8638 <CString::Replace(char const*, char const*)+0x1b8>
   a862c:	aa0003e1 	mov	x1, x0
   a8630:	aa1403e0 	mov	x0, x20
   a8634:	97fffe97 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8638:	f9400e80 	ldr	x0, [x20, #24]
   a863c:	aa1603e1 	mov	x1, x22
   a8640:	110006f7 	add	w23, w23, #0x1
   a8644:	940009e3 	bl	aadd0 <strcpy>
   a8648:	f9400e80 	ldr	x0, [x20, #24]
   a864c:	8b190000 	add	x0, x0, x25
   a8650:	f9000e80 	str	x0, [x20, #24]
   a8654:	17ffffaf 	b	a8510 <CString::Replace(char const*, char const*)+0x90>
   a8658:	d503201f 	nop
   a865c:	d503201f 	nop

00000000000a8660 <CString::PutChar(char, unsigned long)>:
   a8660:	b40002e2 	cbz	x2, a86bc <CString::PutChar(char, unsigned long)+0x5c>
   a8664:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8668:	910003fd 	mov	x29, sp
   a866c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8670:	aa0203f3 	mov	x19, x2
   a8674:	aa0003f4 	mov	x20, x0
   a8678:	f90013f5 	str	x21, [sp, #32]
   a867c:	13001c35 	sxtb	w21, w1
   a8680:	aa0203e1 	mov	x1, x2
   a8684:	97fffe83 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8688:	d1000661 	sub	x1, x19, #0x1
   a868c:	d503201f 	nop
   a8690:	f9400e82 	ldr	x2, [x20, #24]
   a8694:	d1000421 	sub	x1, x1, #0x1
   a8698:	b100043f 	cmn	x1, #0x1
   a869c:	91000440 	add	x0, x2, #0x1
   a86a0:	f9000e80 	str	x0, [x20, #24]
   a86a4:	39000055 	strb	w21, [x2]
   a86a8:	54ffff41 	b.ne	a8690 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   a86ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   a86b0:	f94013f5 	ldr	x21, [sp, #32]
   a86b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a86b8:	d65f03c0 	ret
   a86bc:	d65f03c0 	ret

00000000000a86c0 <CString::PutString(char const*)>:
   a86c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a86c4:	910003fd 	mov	x29, sp
   a86c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a86cc:	aa0003f3 	mov	x19, x0
   a86d0:	aa0103e0 	mov	x0, x1
   a86d4:	f90013f5 	str	x21, [sp, #32]
   a86d8:	aa0103f5 	mov	x21, x1
   a86dc:	9400092d 	bl	aab90 <strlen>
   a86e0:	aa0003f4 	mov	x20, x0
   a86e4:	b4000080 	cbz	x0, a86f4 <CString::PutString(char const*)+0x34>
   a86e8:	aa0003e1 	mov	x1, x0
   a86ec:	aa1303e0 	mov	x0, x19
   a86f0:	97fffe68 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a86f4:	f9400e60 	ldr	x0, [x19, #24]
   a86f8:	aa1503e1 	mov	x1, x21
   a86fc:	940009b5 	bl	aadd0 <strcpy>
   a8700:	f9400e60 	ldr	x0, [x19, #24]
   a8704:	f94013f5 	ldr	x21, [sp, #32]
   a8708:	8b140000 	add	x0, x0, x20
   a870c:	f9000e60 	str	x0, [x19, #24]
   a8710:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8714:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8718:	d65f03c0 	ret
   a871c:	d503201f 	nop

00000000000a8720 <CString::ReserveSpace(unsigned long)>:
   a8720:	b40004a1 	cbz	x1, a87b4 <CString::ReserveSpace(unsigned long)+0x94>
   a8724:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8728:	910003fd 	mov	x29, sp
   a872c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8730:	aa0003f4 	mov	x20, x0
   a8734:	b9401000 	ldr	w0, [x0, #16]
   a8738:	a9025bf5 	stp	x21, x22, [sp, #32]
   a873c:	f9400682 	ldr	x2, [x20, #8]
   a8740:	f9400e95 	ldr	x21, [x20, #24]
   a8744:	cb0202b5 	sub	x21, x21, x2
   a8748:	8b150021 	add	x1, x1, x21
   a874c:	91000422 	add	x2, x1, #0x1
   a8750:	eb00005f 	cmp	x2, x0
   a8754:	540000a8 	b.hi	a8768 <CString::ReserveSpace(unsigned long)+0x48>  // b.pmore
   a8758:	a94153f3 	ldp	x19, x20, [sp, #16]
   a875c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8760:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8764:	d65f03c0 	ret
   a8768:	91010433 	add	x19, x1, #0x41
   a876c:	aa1303e0 	mov	x0, x19
   a8770:	94000cf8 	bl	abb50 <operator new[](unsigned long)>
   a8774:	f9400e81 	ldr	x1, [x20, #24]
   a8778:	aa0003f6 	mov	x22, x0
   a877c:	3900003f 	strb	wzr, [x1]
   a8780:	f9400681 	ldr	x1, [x20, #8]
   a8784:	94000993 	bl	aadd0 <strcpy>
   a8788:	f9400680 	ldr	x0, [x20, #8]
   a878c:	b4000040 	cbz	x0, a8794 <CString::ReserveSpace(unsigned long)+0x74>
   a8790:	94000d00 	bl	abb90 <operator delete[](void*)>
   a8794:	8b1502d5 	add	x21, x22, x21
   a8798:	f9000696 	str	x22, [x20, #8]
   a879c:	b9001293 	str	w19, [x20, #16]
   a87a0:	f9000e95 	str	x21, [x20, #24]
   a87a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a87a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a87ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a87b0:	d65f03c0 	ret
   a87b4:	d65f03c0 	ret
   a87b8:	d503201f 	nop
   a87bc:	d503201f 	nop

00000000000a87c0 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   a87c0:	2a0203e2 	mov	w2, w2
   a87c4:	12001c63 	and	w3, w3, #0xff
   a87c8:	eb02003f 	cmp	x1, x2
   a87cc:	d2800024 	mov	x4, #0x1                   	// #1
   a87d0:	540003a3 	b.cc	a8844 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x84>  // b.lo, b.ul, b.last
   a87d4:	d503201f 	nop
   a87d8:	9b027c84 	mul	x4, x4, x2
   a87dc:	9ac40826 	udiv	x6, x1, x4
   a87e0:	eb0200df 	cmp	x6, x2
   a87e4:	aa0603e5 	mov	x5, x6
   a87e8:	54ffff82 	b.cs	a87d8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.hs, b.nlast
   a87ec:	52000068 	eor	w8, w3, #0x1
   a87f0:	aa0003e7 	mov	x7, x0
   a87f4:	531b0908 	ubfiz	w8, w8, #5, #3
   a87f8:	1100dd08 	add	w8, w8, #0x37
   a87fc:	12001d08 	and	w8, w8, #0xff
   a8800:	14000003 	b	a880c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x4c>
   a8804:	9ac40825 	udiv	x5, x1, x4
   a8808:	aa0503e6 	mov	x6, x5
   a880c:	12001ca3 	and	w3, w5, #0xff
   a8810:	f10024bf 	cmp	x5, #0x9
   a8814:	1100c065 	add	w5, w3, #0x30
   a8818:	0b030103 	add	w3, w8, w3
   a881c:	9b0484c1 	msub	x1, x6, x4, x1
   a8820:	13001ca5 	sxtb	w5, w5
   a8824:	13001c63 	sxtb	w3, w3
   a8828:	1a858063 	csel	w3, w3, w5, hi	// hi = pmore
   a882c:	380014e3 	strb	w3, [x7], #1
   a8830:	eb02009f 	cmp	x4, x2
   a8834:	9ac20884 	udiv	x4, x4, x2
   a8838:	54fffe62 	b.cs	a8804 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>  // b.hs, b.nlast
   a883c:	390000ff 	strb	wzr, [x7]
   a8840:	d65f03c0 	ret
   a8844:	aa0103e5 	mov	x5, x1
   a8848:	aa0103e6 	mov	x6, x1
   a884c:	17ffffe8 	b	a87ec <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>

00000000000a8850 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   a8850:	2a0203e2 	mov	w2, w2
   a8854:	12001c63 	and	w3, w3, #0xff
   a8858:	eb02003f 	cmp	x1, x2
   a885c:	d2800024 	mov	x4, #0x1                   	// #1
   a8860:	540003a3 	b.cc	a88d4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x84>  // b.lo, b.ul, b.last
   a8864:	d503201f 	nop
   a8868:	9b027c84 	mul	x4, x4, x2
   a886c:	9ac40826 	udiv	x6, x1, x4
   a8870:	eb0200df 	cmp	x6, x2
   a8874:	aa0603e5 	mov	x5, x6
   a8878:	54ffff82 	b.cs	a8868 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x18>  // b.hs, b.nlast
   a887c:	52000068 	eor	w8, w3, #0x1
   a8880:	aa0003e7 	mov	x7, x0
   a8884:	531b0908 	ubfiz	w8, w8, #5, #3
   a8888:	1100dd08 	add	w8, w8, #0x37
   a888c:	12001d08 	and	w8, w8, #0xff
   a8890:	14000003 	b	a889c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x4c>
   a8894:	9ac40825 	udiv	x5, x1, x4
   a8898:	aa0503e6 	mov	x6, x5
   a889c:	12001ca3 	and	w3, w5, #0xff
   a88a0:	f10024bf 	cmp	x5, #0x9
   a88a4:	1100c065 	add	w5, w3, #0x30
   a88a8:	0b030103 	add	w3, w8, w3
   a88ac:	9b0484c1 	msub	x1, x6, x4, x1
   a88b0:	13001ca5 	sxtb	w5, w5
   a88b4:	13001c63 	sxtb	w3, w3
   a88b8:	1a858063 	csel	w3, w3, w5, hi	// hi = pmore
   a88bc:	380014e3 	strb	w3, [x7], #1
   a88c0:	eb02009f 	cmp	x4, x2
   a88c4:	9ac20884 	udiv	x4, x4, x2
   a88c8:	54fffe62 	b.cs	a8894 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x44>  // b.hs, b.nlast
   a88cc:	390000ff 	strb	wzr, [x7]
   a88d0:	d65f03c0 	ret
   a88d4:	aa0103e5 	mov	x5, x1
   a88d8:	aa0103e6 	mov	x6, x1
   a88dc:	17ffffe8 	b	a887c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x2c>

00000000000a88e0 <CString::ftoa(char*, double, unsigned int)>:
   a88e0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a88e4:	1e602018 	fcmpe	d0, #0.0
   a88e8:	910003fd 	mov	x29, sp
   a88ec:	a90153f3 	stp	x19, x20, [sp, #16]
   a88f0:	aa0003f3 	mov	x19, x0
   a88f4:	a90363f7 	stp	x23, x24, [sp, #48]
   a88f8:	2a0103f7 	mov	w23, w1
   a88fc:	f90023f9 	str	x25, [sp, #64]
   a8900:	fd0027e8 	str	d8, [sp, #72]
   a8904:	1e604008 	fmov	d8, d0
   a8908:	54000f64 	b.mi	a8af4 <CString::ftoa(char*, double, unsigned int)+0x214>  // b.first
   a890c:	aa0003f9 	mov	x25, x0
   a8910:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   a8914:	9e670000 	fmov	d0, x0
   a8918:	1e602110 	fcmpe	d8, d0
   a891c:	54000f6c 	b.gt	a8b08 <CString::ftoa(char*, double, unsigned int)+0x228>
   a8920:	9e790114 	fcvtzu	x20, d8
   a8924:	d2800022 	mov	x2, #0x1                   	// #1
   a8928:	f100269f 	cmp	x20, #0x9
   a892c:	54001049 	b.ls	a8b34 <CString::ftoa(char*, double, unsigned int)+0x254>  // b.plast
   a8930:	8b020842 	add	x2, x2, x2, lsl #2
   a8934:	8b020042 	add	x2, x2, x2
   a8938:	9ac20a83 	udiv	x3, x20, x2
   a893c:	f100247f 	cmp	x3, #0x9
   a8940:	54ffff88 	b.hi	a8930 <CString::ftoa(char*, double, unsigned int)+0x50>  // b.pmore
   a8944:	b202e7e8 	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
   a8948:	aa1903e0 	mov	x0, x25
   a894c:	aa1403e5 	mov	x5, x20
   a8950:	f29999a8 	movk	x8, #0xcccd
   a8954:	14000003 	b	a8960 <CString::ftoa(char*, double, unsigned int)+0x80>
   a8958:	aa0303e2 	mov	x2, x3
   a895c:	9ac308a3 	udiv	x3, x5, x3
   a8960:	12001c64 	and	w4, w3, #0xff
   a8964:	f100247f 	cmp	x3, #0x9
   a8968:	1100c086 	add	w6, w4, #0x30
   a896c:	11015c84 	add	w4, w4, #0x57
   a8970:	9ac208a7 	udiv	x7, x5, x2
   a8974:	9bc87c43 	umulh	x3, x2, x8
   a8978:	13001cc6 	sxtb	w6, w6
   a897c:	13001c84 	sxtb	w4, w4
   a8980:	1a868084 	csel	w4, w4, w6, hi	// hi = pmore
   a8984:	38001404 	strb	w4, [x0], #1
   a8988:	f100245f 	cmp	x2, #0x9
   a898c:	d343fc63 	lsr	x3, x3, #3
   a8990:	9b0294e5 	msub	x5, x7, x2, x5
   a8994:	54fffe28 	b.hi	a8958 <CString::ftoa(char*, double, unsigned int)+0x78>  // b.pmore
   a8998:	3900001f 	strb	wzr, [x0]
   a899c:	35000117 	cbnz	w23, a89bc <CString::ftoa(char*, double, unsigned int)+0xdc>
   a89a0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a89a4:	aa1303e0 	mov	x0, x19
   a89a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a89ac:	f94023f9 	ldr	x25, [sp, #64]
   a89b0:	fd4027e8 	ldr	d8, [sp, #72]
   a89b4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a89b8:	d65f03c0 	ret
   a89bc:	aa1903e0 	mov	x0, x25
   a89c0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a89c4:	94000873 	bl	aab90 <strlen>
   a89c8:	528005c1 	mov	w1, #0x2e                  	// #46
   a89cc:	38206b21 	strb	w1, [x25, x0]
   a89d0:	71004eff 	cmp	w23, #0x13
   a89d4:	8b000338 	add	x24, x25, x0
   a89d8:	52800276 	mov	w22, #0x13                  	// #19
   a89dc:	91000715 	add	x21, x24, #0x1
   a89e0:	1a9692f6 	csel	w22, w23, w22, ls	// ls = plast
   a89e4:	710006ff 	cmp	w23, #0x1
   a89e8:	54000ae0 	b.eq	a8b44 <CString::ftoa(char*, double, unsigned int)+0x264>  // b.none
   a89ec:	52800040 	mov	w0, #0x2                   	// #2
   a89f0:	d2800141 	mov	x1, #0xa                   	// #10
   a89f4:	d503201f 	nop
   a89f8:	8b010821 	add	x1, x1, x1, lsl #2
   a89fc:	11000400 	add	w0, w0, #0x1
   a8a00:	8b010021 	add	x1, x1, x1
   a8a04:	6b0002df 	cmp	w22, w0
   a8a08:	54ffff82 	b.cs	a89f8 <CString::ftoa(char*, double, unsigned int)+0x118>  // b.hs, b.nlast
   a8a0c:	9e630020 	ucvtf	d0, x1
   a8a10:	9e630281 	ucvtf	d1, x20
   a8a14:	d2800022 	mov	x2, #0x1                   	// #1
   a8a18:	1e613908 	fsub	d8, d8, d1
   a8a1c:	1e600908 	fmul	d8, d8, d0
   a8a20:	9e790105 	fcvtzu	x5, d8
   a8a24:	f10024bf 	cmp	x5, #0x9
   a8a28:	54000929 	b.ls	a8b4c <CString::ftoa(char*, double, unsigned int)+0x26c>  // b.plast
   a8a2c:	d503201f 	nop
   a8a30:	8b020842 	add	x2, x2, x2, lsl #2
   a8a34:	8b020042 	add	x2, x2, x2
   a8a38:	9ac208a3 	udiv	x3, x5, x2
   a8a3c:	f100247f 	cmp	x3, #0x9
   a8a40:	54ffff88 	b.hi	a8a30 <CString::ftoa(char*, double, unsigned int)+0x150>  // b.pmore
   a8a44:	910163f4 	add	x20, sp, #0x58
   a8a48:	b202e7e8 	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
   a8a4c:	aa1403e6 	mov	x6, x20
   a8a50:	f29999a8 	movk	x8, #0xcccd
   a8a54:	14000003 	b	a8a60 <CString::ftoa(char*, double, unsigned int)+0x180>
   a8a58:	aa0303e2 	mov	x2, x3
   a8a5c:	9ac308a3 	udiv	x3, x5, x3
   a8a60:	12001c64 	and	w4, w3, #0xff
   a8a64:	f100247f 	cmp	x3, #0x9
   a8a68:	1100c080 	add	w0, w4, #0x30
   a8a6c:	11015c84 	add	w4, w4, #0x57
   a8a70:	9ac208a7 	udiv	x7, x5, x2
   a8a74:	9bc87c43 	umulh	x3, x2, x8
   a8a78:	13001c00 	sxtb	w0, w0
   a8a7c:	13001c84 	sxtb	w4, w4
   a8a80:	1a808084 	csel	w4, w4, w0, hi	// hi = pmore
   a8a84:	380014c4 	strb	w4, [x6], #1
   a8a88:	f100245f 	cmp	x2, #0x9
   a8a8c:	d343fc63 	lsr	x3, x3, #3
   a8a90:	9b0294e5 	msub	x5, x7, x2, x5
   a8a94:	54fffe28 	b.hi	a8a58 <CString::ftoa(char*, double, unsigned int)+0x178>  // b.pmore
   a8a98:	390000df 	strb	wzr, [x6]
   a8a9c:	aa1403e0 	mov	x0, x20
   a8aa0:	9400083c 	bl	aab90 <strlen>
   a8aa4:	4b0002d6 	sub	w22, w22, w0
   a8aa8:	510006c0 	sub	w0, w22, #0x1
   a8aac:	34000496 	cbz	w22, a8b3c <CString::ftoa(char*, double, unsigned int)+0x25c>
   a8ab0:	91000800 	add	x0, x0, #0x2
   a8ab4:	52800602 	mov	w2, #0x30                  	// #48
   a8ab8:	8b000300 	add	x0, x24, x0
   a8abc:	d503201f 	nop
   a8ac0:	380016a2 	strb	w2, [x21], #1
   a8ac4:	eb0002bf 	cmp	x21, x0
   a8ac8:	54ffffc1 	b.ne	a8ac0 <CString::ftoa(char*, double, unsigned int)+0x1e0>  // b.any
   a8acc:	aa1403e1 	mov	x1, x20
   a8ad0:	940008c0 	bl	aadd0 <strcpy>
   a8ad4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8ad8:	aa1303e0 	mov	x0, x19
   a8adc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8ae0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a8ae4:	f94023f9 	ldr	x25, [sp, #64]
   a8ae8:	fd4027e8 	ldr	d8, [sp, #72]
   a8aec:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a8af0:	d65f03c0 	ret
   a8af4:	aa0003f9 	mov	x25, x0
   a8af8:	1e614008 	fneg	d8, d0
   a8afc:	528005a0 	mov	w0, #0x2d                  	// #45
   a8b00:	38001720 	strb	w0, [x25], #1
   a8b04:	17ffff83 	b	a8910 <CString::ftoa(char*, double, unsigned int)+0x30>
   a8b08:	aa1903e0 	mov	x0, x25
   a8b0c:	d0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a8b10:	91276021 	add	x1, x1, #0x9d8
   a8b14:	940008af 	bl	aadd0 <strcpy>
   a8b18:	a94363f7 	ldp	x23, x24, [sp, #48]
   a8b1c:	aa1303e0 	mov	x0, x19
   a8b20:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8b24:	f94023f9 	ldr	x25, [sp, #64]
   a8b28:	fd4027e8 	ldr	d8, [sp, #72]
   a8b2c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a8b30:	d65f03c0 	ret
   a8b34:	aa1403e3 	mov	x3, x20
   a8b38:	17ffff83 	b	a8944 <CString::ftoa(char*, double, unsigned int)+0x64>
   a8b3c:	aa1503e0 	mov	x0, x21
   a8b40:	17ffffe3 	b	a8acc <CString::ftoa(char*, double, unsigned int)+0x1ec>
   a8b44:	1e649000 	fmov	d0, #1.000000000000000000e+01
   a8b48:	17ffffb2 	b	a8a10 <CString::ftoa(char*, double, unsigned int)+0x130>
   a8b4c:	aa0503e3 	mov	x3, x5
   a8b50:	17ffffbd 	b	a8a44 <CString::ftoa(char*, double, unsigned int)+0x164>
   a8b54:	d503201f 	nop
   a8b58:	d503201f 	nop
   a8b5c:	d503201f 	nop

00000000000a8b60 <CString::FormatV(char const*, std::__va_list)>:
   a8b60:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   a8b64:	910003fd 	mov	x29, sp
   a8b68:	a90363f7 	stp	x23, x24, [sp, #48]
   a8b6c:	a90573fb 	stp	x27, x28, [sp, #80]
   a8b70:	aa0103fb 	mov	x27, x1
   a8b74:	aa0003fc 	mov	x28, x0
   a8b78:	a9400458 	ldp	x24, x1, [x2]
   a8b7c:	f90037e1 	str	x1, [sp, #104]
   a8b80:	f9400400 	ldr	x0, [x0, #8]
   a8b84:	a90153f3 	stp	x19, x20, [sp, #16]
   a8b88:	b9401c41 	ldr	w1, [x2, #28]
   a8b8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a8b90:	aa0203f4 	mov	x20, x2
   a8b94:	b9401855 	ldr	w21, [x2, #24]
   a8b98:	b90067e1 	str	w1, [sp, #100]
   a8b9c:	b4000040 	cbz	x0, a8ba4 <CString::FormatV(char const*, std::__va_list)+0x44>
   a8ba0:	94000bfc 	bl	abb90 <operator delete[](void*)>
   a8ba4:	52800800 	mov	w0, #0x40                  	// #64
   a8ba8:	b9001380 	str	w0, [x28, #16]
   a8bac:	d2800800 	mov	x0, #0x40                  	// #64
   a8bb0:	94000be8 	bl	abb50 <operator new[](unsigned long)>
   a8bb4:	f9000780 	str	x0, [x28, #8]
   a8bb8:	f9000f80 	str	x0, [x28, #24]
   a8bbc:	39c00373 	ldrsb	w19, [x27]
   a8bc0:	34000ab3 	cbz	w19, a8d14 <CString::FormatV(char const*, std::__va_list)+0x1b4>
   a8bc4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a8bc8:	7100967f 	cmp	w19, #0x25
   a8bcc:	54000b21 	b.ne	a8d30 <CString::FormatV(char const*, std::__va_list)+0x1d0>  // b.any
   a8bd0:	39c00764 	ldrsb	w4, [x27, #1]
   a8bd4:	7100949f 	cmp	w4, #0x25
   a8bd8:	540018c0 	b.eq	a8ef0 <CString::FormatV(char const*, std::__va_list)+0x390>  // b.none
   a8bdc:	71008c9f 	cmp	w4, #0x23
   a8be0:	54001800 	b.eq	a8ee0 <CString::FormatV(char const*, std::__va_list)+0x380>  // b.none
   a8be4:	9100077b 	add	x27, x27, #0x1
   a8be8:	52800008 	mov	w8, #0x0                   	// #0
   a8bec:	7100b49f 	cmp	w4, #0x2d
   a8bf0:	52800016 	mov	w22, #0x0                   	// #0
   a8bf4:	54000081 	b.ne	a8c04 <CString::FormatV(char const*, std::__va_list)+0xa4>  // b.any
   a8bf8:	39c00764 	ldrsb	w4, [x27, #1]
   a8bfc:	9100077b 	add	x27, x27, #0x1
   a8c00:	52800036 	mov	w22, #0x1                   	// #1
   a8c04:	7100c09f 	cmp	w4, #0x30
   a8c08:	52800017 	mov	w23, #0x0                   	// #0
   a8c0c:	54000081 	b.ne	a8c1c <CString::FormatV(char const*, std::__va_list)+0xbc>  // b.any
   a8c10:	39c00764 	ldrsb	w4, [x27, #1]
   a8c14:	9100077b 	add	x27, x27, #0x1
   a8c18:	52800037 	mov	w23, #0x1                   	// #1
   a8c1c:	5100c083 	sub	w3, w4, #0x30
   a8c20:	d2800013 	mov	x19, #0x0                   	// #0
   a8c24:	12001c60 	and	w0, w3, #0xff
   a8c28:	7100241f 	cmp	w0, #0x9
   a8c2c:	54000128 	b.hi	a8c50 <CString::FormatV(char const*, std::__va_list)+0xf0>  // b.pmore
   a8c30:	38c01f64 	ldrsb	w4, [x27, #1]!
   a8c34:	93401c62 	sxtb	x2, w3
   a8c38:	8b130a73 	add	x19, x19, x19, lsl #2
   a8c3c:	5100c083 	sub	w3, w4, #0x30
   a8c40:	12001c65 	and	w5, w3, #0xff
   a8c44:	8b130453 	add	x19, x2, x19, lsl #1
   a8c48:	710024bf 	cmp	w5, #0x9
   a8c4c:	54ffff29 	b.ls	a8c30 <CString::FormatV(char const*, std::__va_list)+0xd0>  // b.plast
   a8c50:	7100b89f 	cmp	w4, #0x2e
   a8c54:	54002720 	b.eq	a9138 <CString::FormatV(char const*, std::__va_list)+0x5d8>  // b.none
   a8c58:	39c00363 	ldrsb	w3, [x27]
   a8c5c:	528000c1 	mov	w1, #0x6                   	// #6
   a8c60:	7101b07f 	cmp	w3, #0x6c
   a8c64:	52800005 	mov	w5, #0x0                   	// #0
   a8c68:	52800019 	mov	w25, #0x0                   	// #0
   a8c6c:	54000b20 	b.eq	a8dd0 <CString::FormatV(char const*, std::__va_list)+0x270>  // b.none
   a8c70:	7101bc7f 	cmp	w3, #0x6f
   a8c74:	54000bc0 	b.eq	a8dec <CString::FormatV(char const*, std::__va_list)+0x28c>  // b.none
   a8c78:	540006cc 	b.gt	a8d50 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   a8c7c:	7101907f 	cmp	w3, #0x64
   a8c80:	54001820 	b.eq	a8f84 <CString::FormatV(char const*, std::__va_list)+0x424>  // b.none
   a8c84:	5400148d 	b.le	a8f14 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   a8c88:	7101987f 	cmp	w3, #0x66
   a8c8c:	54001781 	b.ne	a8f7c <CString::FormatV(char const*, std::__va_list)+0x41c>  // b.any
   a8c90:	b94067e0 	ldr	w0, [sp, #100]
   a8c94:	37f84740 	tbnz	w0, #31, a957c <CString::FormatV(char const*, std::__va_list)+0xa1c>
   a8c98:	91003f1a 	add	x26, x24, #0xf
   a8c9c:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a8ca0:	fd400300 	ldr	d0, [x24]
   a8ca4:	910203f9 	add	x25, sp, #0x80
   a8ca8:	aa1903e0 	mov	x0, x25
   a8cac:	97ffff0d 	bl	a88e0 <CString::ftoa(char*, double, unsigned int)>
   a8cb0:	aa1903e0 	mov	x0, x25
   a8cb4:	940007b7 	bl	aab90 <strlen>
   a8cb8:	aa0003f8 	mov	x24, x0
   a8cbc:	35004bb6 	cbnz	w22, a9630 <CString::FormatV(char const*, std::__va_list)+0xad0>
   a8cc0:	eb13001f 	cmp	x0, x19
   a8cc4:	54004123 	b.cc	a94e8 <CString::FormatV(char const*, std::__va_list)+0x988>  // b.lo, b.ul, b.last
   a8cc8:	aa1903e0 	mov	x0, x25
   a8ccc:	940007b1 	bl	aab90 <strlen>
   a8cd0:	aa0003f3 	mov	x19, x0
   a8cd4:	b4000080 	cbz	x0, a8ce4 <CString::FormatV(char const*, std::__va_list)+0x184>
   a8cd8:	aa0003e1 	mov	x1, x0
   a8cdc:	aa1c03e0 	mov	x0, x28
   a8ce0:	97fffcec 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8ce4:	f9400f80 	ldr	x0, [x28, #24]
   a8ce8:	aa1903e1 	mov	x1, x25
   a8cec:	94000839 	bl	aadd0 <strcpy>
   a8cf0:	f9400f80 	ldr	x0, [x28, #24]
   a8cf4:	8b130000 	add	x0, x0, x19
   a8cf8:	f9000f80 	str	x0, [x28, #24]
   a8cfc:	aa1a03f8 	mov	x24, x26
   a8d00:	9100077b 	add	x27, x27, #0x1
   a8d04:	39c00373 	ldrsb	w19, [x27]
   a8d08:	35fff613 	cbnz	w19, a8bc8 <CString::FormatV(char const*, std::__va_list)+0x68>
   a8d0c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a8d10:	f9400f80 	ldr	x0, [x28, #24]
   a8d14:	3900001f 	strb	wzr, [x0]
   a8d18:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8d1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8d20:	a94363f7 	ldp	x23, x24, [sp, #48]
   a8d24:	a94573fb 	ldp	x27, x28, [sp, #80]
   a8d28:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   a8d2c:	d65f03c0 	ret
   a8d30:	aa1c03e0 	mov	x0, x28
   a8d34:	d2800021 	mov	x1, #0x1                   	// #1
   a8d38:	97fffcd6 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8d3c:	f9400f80 	ldr	x0, [x28, #24]
   a8d40:	91000401 	add	x1, x0, #0x1
   a8d44:	f9000f81 	str	x1, [x28, #24]
   a8d48:	39000013 	strb	w19, [x0]
   a8d4c:	17ffffed 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a8d50:	7101d47f 	cmp	w3, #0x75
   a8d54:	54002120 	b.eq	a9178 <CString::FormatV(char const*, std::__va_list)+0x618>  // b.none
   a8d58:	5400192c 	b.gt	a907c <CString::FormatV(char const*, std::__va_list)+0x51c>
   a8d5c:	7101c07f 	cmp	w3, #0x70
   a8d60:	54001920 	b.eq	a9084 <CString::FormatV(char const*, std::__va_list)+0x524>  // b.none
   a8d64:	7101cc7f 	cmp	w3, #0x73
   a8d68:	54001d01 	b.ne	a9108 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.any
   a8d6c:	37f83f75 	tbnz	w21, #31, a9558 <CString::FormatV(char const*, std::__va_list)+0x9f8>
   a8d70:	91003f19 	add	x25, x24, #0xf
   a8d74:	927df339 	and	x25, x25, #0xfffffffffffffff8
   a8d78:	f9400318 	ldr	x24, [x24]
   a8d7c:	aa1803e0 	mov	x0, x24
   a8d80:	94000784 	bl	aab90 <strlen>
   a8d84:	aa0003fa 	mov	x26, x0
   a8d88:	35004196 	cbnz	w22, a95b8 <CString::FormatV(char const*, std::__va_list)+0xa58>
   a8d8c:	eb13001f 	cmp	x0, x19
   a8d90:	54003c83 	b.cc	a9520 <CString::FormatV(char const*, std::__va_list)+0x9c0>  // b.lo, b.ul, b.last
   a8d94:	aa1803e0 	mov	x0, x24
   a8d98:	9400077e 	bl	aab90 <strlen>
   a8d9c:	aa0003f3 	mov	x19, x0
   a8da0:	b4000080 	cbz	x0, a8db0 <CString::FormatV(char const*, std::__va_list)+0x250>
   a8da4:	aa0003e1 	mov	x1, x0
   a8da8:	aa1c03e0 	mov	x0, x28
   a8dac:	97fffcb9 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8db0:	f9400f80 	ldr	x0, [x28, #24]
   a8db4:	aa1803e1 	mov	x1, x24
   a8db8:	94000806 	bl	aadd0 <strcpy>
   a8dbc:	f9400f80 	ldr	x0, [x28, #24]
   a8dc0:	8b130000 	add	x0, x0, x19
   a8dc4:	f9000f80 	str	x0, [x28, #24]
   a8dc8:	aa1903f8 	mov	x24, x25
   a8dcc:	17ffffcd 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a8dd0:	39c00763 	ldrsb	w3, [x27, #1]
   a8dd4:	52800039 	mov	w25, #0x1                   	// #1
   a8dd8:	7101b07f 	cmp	w3, #0x6c
   a8ddc:	54000c40 	b.eq	a8f64 <CString::FormatV(char const*, std::__va_list)+0x404>  // b.none
   a8de0:	9100077b 	add	x27, x27, #0x1
   a8de4:	7101bc7f 	cmp	w3, #0x6f
   a8de8:	54fff481 	b.ne	a8c78 <CString::FormatV(char const*, std::__va_list)+0x118>  // b.any
   a8dec:	d2800102 	mov	x2, #0x8                   	// #8
   a8df0:	350031c8 	cbnz	w8, a9428 <CString::FormatV(char const*, std::__va_list)+0x8c8>
   a8df4:	340017e5 	cbz	w5, a90f0 <CString::FormatV(char const*, std::__va_list)+0x590>
   a8df8:	37f82475 	tbnz	w21, #31, a9284 <CString::FormatV(char const*, std::__va_list)+0x724>
   a8dfc:	91003f1a 	add	x26, x24, #0xf
   a8e00:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a8e04:	f9400308 	ldr	x8, [x24]
   a8e08:	eb02011f 	cmp	x8, x2
   a8e0c:	54004b03 	b.cc	a976c <CString::FormatV(char const*, std::__va_list)+0xc0c>  // b.lo, b.ul, b.last
   a8e10:	d2800020 	mov	x0, #0x1                   	// #1
   a8e14:	d503201f 	nop
   a8e18:	9b027c00 	mul	x0, x0, x2
   a8e1c:	9ac00905 	udiv	x5, x8, x0
   a8e20:	eb0200bf 	cmp	x5, x2
   a8e24:	aa0503e4 	mov	x4, x5
   a8e28:	54ffff82 	b.cs	a8e18 <CString::FormatV(char const*, std::__va_list)+0x2b8>  // b.hs, b.nlast
   a8e2c:	7101607f 	cmp	w3, #0x58
   a8e30:	910203f9 	add	x25, sp, #0x80
   a8e34:	1a9f07ea 	cset	w10, ne	// ne = any
   a8e38:	aa1903e9 	mov	x9, x25
   a8e3c:	531b694a 	lsl	w10, w10, #5
   a8e40:	1100dd4a 	add	w10, w10, #0x37
   a8e44:	14000003 	b	a8e50 <CString::FormatV(char const*, std::__va_list)+0x2f0>
   a8e48:	9ac00904 	udiv	x4, x8, x0
   a8e4c:	aa0403e5 	mov	x5, x4
   a8e50:	12001c81 	and	w1, w4, #0xff
   a8e54:	f100249f 	cmp	x4, #0x9
   a8e58:	1100c023 	add	w3, w1, #0x30
   a8e5c:	0b010141 	add	w1, w10, w1
   a8e60:	9b00a0a8 	msub	x8, x5, x0, x8
   a8e64:	13001c63 	sxtb	w3, w3
   a8e68:	13001c21 	sxtb	w1, w1
   a8e6c:	1a838021 	csel	w1, w1, w3, hi	// hi = pmore
   a8e70:	38001521 	strb	w1, [x9], #1
   a8e74:	eb02001f 	cmp	x0, x2
   a8e78:	9ac20800 	udiv	x0, x0, x2
   a8e7c:	54fffe62 	b.cs	a8e48 <CString::FormatV(char const*, std::__va_list)+0x2e8>  // b.hs, b.nlast
   a8e80:	3900013f 	strb	wzr, [x9]
   a8e84:	aa1903e0 	mov	x0, x25
   a8e88:	94000742 	bl	aab90 <strlen>
   a8e8c:	aa0003f8 	mov	x24, x0
   a8e90:	35001796 	cbnz	w22, a9180 <CString::FormatV(char const*, std::__va_list)+0x620>
   a8e94:	eb00027f 	cmp	x19, x0
   a8e98:	54fff189 	b.ls	a8cc8 <CString::FormatV(char const*, std::__va_list)+0x168>  // b.plast
   a8e9c:	710002ff 	cmp	w23, #0x0
   a8ea0:	cb000273 	sub	x19, x19, x0
   a8ea4:	52800400 	mov	w0, #0x20                  	// #32
   a8ea8:	aa1303e1 	mov	x1, x19
   a8eac:	52800618 	mov	w24, #0x30                  	// #48
   a8eb0:	1a801318 	csel	w24, w24, w0, ne	// ne = any
   a8eb4:	aa1c03e0 	mov	x0, x28
   a8eb8:	97fffc76 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8ebc:	d1000663 	sub	x3, x19, #0x1
   a8ec0:	f9400f80 	ldr	x0, [x28, #24]
   a8ec4:	d1000463 	sub	x3, x3, #0x1
   a8ec8:	b100047f 	cmn	x3, #0x1
   a8ecc:	91000401 	add	x1, x0, #0x1
   a8ed0:	f9000f81 	str	x1, [x28, #24]
   a8ed4:	39000018 	strb	w24, [x0]
   a8ed8:	54ffff41 	b.ne	a8ec0 <CString::FormatV(char const*, std::__va_list)+0x360>  // b.any
   a8edc:	17ffff7b 	b	a8cc8 <CString::FormatV(char const*, std::__va_list)+0x168>
   a8ee0:	39c00b64 	ldrsb	w4, [x27, #2]
   a8ee4:	52800028 	mov	w8, #0x1                   	// #1
   a8ee8:	91000b7b 	add	x27, x27, #0x2
   a8eec:	17ffff40 	b	a8bec <CString::FormatV(char const*, std::__va_list)+0x8c>
   a8ef0:	aa1c03e0 	mov	x0, x28
   a8ef4:	d2800021 	mov	x1, #0x1                   	// #1
   a8ef8:	97fffc66 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8efc:	91000b7b 	add	x27, x27, #0x2
   a8f00:	f9400f80 	ldr	x0, [x28, #24]
   a8f04:	91000401 	add	x1, x0, #0x1
   a8f08:	f9000f81 	str	x1, [x28, #24]
   a8f0c:	39000013 	strb	w19, [x0]
   a8f10:	17ffff7d 	b	a8d04 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   a8f14:	7101607f 	cmp	w3, #0x58
   a8f18:	540027c0 	b.eq	a9410 <CString::FormatV(char const*, std::__va_list)+0x8b0>  // b.none
   a8f1c:	71018c7f 	cmp	w3, #0x63
   a8f20:	54000f41 	b.ne	a9108 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.any
   a8f24:	37f833d5 	tbnz	w21, #31, a959c <CString::FormatV(char const*, std::__va_list)+0xa3c>
   a8f28:	91002f19 	add	x25, x24, #0xb
   a8f2c:	927df339 	and	x25, x25, #0xfffffffffffffff8
   a8f30:	39c00318 	ldrsb	w24, [x24]
   a8f34:	35003bb6 	cbnz	w22, a96a8 <CString::FormatV(char const*, std::__va_list)+0xb48>
   a8f38:	f100067f 	cmp	x19, #0x1
   a8f3c:	54002b08 	b.hi	a949c <CString::FormatV(char const*, std::__va_list)+0x93c>  // b.pmore
   a8f40:	aa1c03e0 	mov	x0, x28
   a8f44:	d2800021 	mov	x1, #0x1                   	// #1
   a8f48:	97fffc52 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a8f4c:	f9400f80 	ldr	x0, [x28, #24]
   a8f50:	91000401 	add	x1, x0, #0x1
   a8f54:	f9000f81 	str	x1, [x28, #24]
   a8f58:	39000018 	strb	w24, [x0]
   a8f5c:	aa1903f8 	mov	x24, x25
   a8f60:	17ffff68 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a8f64:	39c00b63 	ldrsb	w3, [x27, #2]
   a8f68:	9100077b 	add	x27, x27, #0x1
   a8f6c:	2a1903e5 	mov	w5, w25
   a8f70:	9100077b 	add	x27, x27, #0x1
   a8f74:	52800019 	mov	w25, #0x0                   	// #0
   a8f78:	17ffff9b 	b	a8de4 <CString::FormatV(char const*, std::__va_list)+0x284>
   a8f7c:	7101a47f 	cmp	w3, #0x69
   a8f80:	54000c41 	b.ne	a9108 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.any
   a8f84:	120000ba 	and	w26, w5, #0x1
   a8f88:	340018c5 	cbz	w5, a92a0 <CString::FormatV(char const*, std::__va_list)+0x740>
   a8f8c:	37f83e15 	tbnz	w21, #31, a974c <CString::FormatV(char const*, std::__va_list)+0xbec>
   a8f90:	91003f01 	add	x1, x24, #0xf
   a8f94:	aa1803e0 	mov	x0, x24
   a8f98:	927df038 	and	x24, x1, #0xfffffffffffffff8
   a8f9c:	f9400002 	ldr	x2, [x0]
   a8fa0:	b7f82ea2 	tbnz	x2, #63, a9574 <CString::FormatV(char const*, std::__va_list)+0xa14>
   a8fa4:	5280001a 	mov	w26, #0x0                   	// #0
   a8fa8:	aa0203e3 	mov	x3, x2
   a8fac:	f100245f 	cmp	x2, #0x9
   a8fb0:	d2800020 	mov	x0, #0x1                   	// #1
   a8fb4:	54004aad 	b.le	a9908 <CString::FormatV(char const*, std::__va_list)+0xda8>
   a8fb8:	8b000800 	add	x0, x0, x0, lsl #2
   a8fbc:	8b000000 	add	x0, x0, x0
   a8fc0:	9ac00841 	udiv	x1, x2, x0
   a8fc4:	f100243f 	cmp	x1, #0x9
   a8fc8:	54ffff88 	b.hi	a8fb8 <CString::FormatV(char const*, std::__va_list)+0x458>  // b.pmore
   a8fcc:	910203f9 	add	x25, sp, #0x80
   a8fd0:	b202e7e9 	mov	x9, #0xcccccccccccccccc    	// #-3689348814741910324
   a8fd4:	aa1903e5 	mov	x5, x25
   a8fd8:	f29999a9 	movk	x9, #0xcccd
   a8fdc:	14000003 	b	a8fe8 <CString::FormatV(char const*, std::__va_list)+0x488>
   a8fe0:	aa0103e0 	mov	x0, x1
   a8fe4:	9ac10861 	udiv	x1, x3, x1
   a8fe8:	12001c22 	and	w2, w1, #0xff
   a8fec:	f100243f 	cmp	x1, #0x9
   a8ff0:	1100c044 	add	w4, w2, #0x30
   a8ff4:	11015c42 	add	w2, w2, #0x57
   a8ff8:	9ac00868 	udiv	x8, x3, x0
   a8ffc:	9bc97c01 	umulh	x1, x0, x9
   a9000:	13001c84 	sxtb	w4, w4
   a9004:	13001c42 	sxtb	w2, w2
   a9008:	1a848042 	csel	w2, w2, w4, hi	// hi = pmore
   a900c:	380014a2 	strb	w2, [x5], #1
   a9010:	f100241f 	cmp	x0, #0x9
   a9014:	d343fc21 	lsr	x1, x1, #3
   a9018:	9b008d03 	msub	x3, x8, x0, x3
   a901c:	54fffe28 	b.hi	a8fe0 <CString::FormatV(char const*, std::__va_list)+0x480>  // b.pmore
   a9020:	390000bf 	strb	wzr, [x5]
   a9024:	aa1903e0 	mov	x0, x25
   a9028:	940006da 	bl	aab90 <strlen>
   a902c:	aa0003e2 	mov	x2, x0
   a9030:	3500193a 	cbnz	w26, a9354 <CString::FormatV(char const*, std::__va_list)+0x7f4>
   a9034:	35001a96 	cbnz	w22, a9384 <CString::FormatV(char const*, std::__va_list)+0x824>
   a9038:	34003cf7 	cbz	w23, a97d4 <CString::FormatV(char const*, std::__va_list)+0xc74>
   a903c:	eb02027f 	cmp	x19, x2
   a9040:	54004488 	b.hi	a98d0 <CString::FormatV(char const*, std::__va_list)+0xd70>  // b.pmore
   a9044:	aa1903e0 	mov	x0, x25
   a9048:	940006d2 	bl	aab90 <strlen>
   a904c:	aa0003f3 	mov	x19, x0
   a9050:	b4000080 	cbz	x0, a9060 <CString::FormatV(char const*, std::__va_list)+0x500>
   a9054:	aa0003e1 	mov	x1, x0
   a9058:	aa1c03e0 	mov	x0, x28
   a905c:	97fffc0d 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a9060:	f9400f80 	ldr	x0, [x28, #24]
   a9064:	aa1903e1 	mov	x1, x25
   a9068:	9400075a 	bl	aadd0 <strcpy>
   a906c:	f9400f80 	ldr	x0, [x28, #24]
   a9070:	8b130000 	add	x0, x0, x19
   a9074:	f9000f80 	str	x0, [x28, #24]
   a9078:	17ffff22 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a907c:	7101e07f 	cmp	w3, #0x78
   a9080:	54000441 	b.ne	a9108 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.any
   a9084:	d2800202 	mov	x2, #0x10                  	// #16
   a9088:	34ffeb68 	cbz	w8, a8df4 <CString::FormatV(char const*, std::__va_list)+0x294>
   a908c:	b0000060 	adrp	x0, b6000 <_etext+0x39c8>
   a9090:	9127c000 	add	x0, x0, #0x9f0
   a9094:	f9003be0 	str	x0, [sp, #112]
   a9098:	f9403be0 	ldr	x0, [sp, #112]
   a909c:	b9007be5 	str	w5, [sp, #120]
   a90a0:	940006bc 	bl	aab90 <strlen>
   a90a4:	aa0003fa 	mov	x26, x0
   a90a8:	b9407be5 	ldr	w5, [sp, #120]
   a90ac:	b40000c0 	cbz	x0, a90c4 <CString::FormatV(char const*, std::__va_list)+0x564>
   a90b0:	aa0003e1 	mov	x1, x0
   a90b4:	aa1c03e0 	mov	x0, x28
   a90b8:	b9007be5 	str	w5, [sp, #120]
   a90bc:	97fffbf5 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a90c0:	b9407be5 	ldr	w5, [sp, #120]
   a90c4:	f9400f80 	ldr	x0, [x28, #24]
   a90c8:	b9007be5 	str	w5, [sp, #120]
   a90cc:	f9403be1 	ldr	x1, [sp, #112]
   a90d0:	94000740 	bl	aadd0 <strcpy>
   a90d4:	f9400f80 	ldr	x0, [x28, #24]
   a90d8:	d2800202 	mov	x2, #0x10                  	// #16
   a90dc:	b9407be5 	ldr	w5, [sp, #120]
   a90e0:	8b1a0000 	add	x0, x0, x26
   a90e4:	f9000f80 	str	x0, [x28, #24]
   a90e8:	39c00363 	ldrsb	w3, [x27]
   a90ec:	35ffe865 	cbnz	w5, a8df8 <CString::FormatV(char const*, std::__va_list)+0x298>
   a90f0:	34000879 	cbz	w25, a91fc <CString::FormatV(char const*, std::__va_list)+0x69c>
   a90f4:	37f81b75 	tbnz	w21, #31, a9460 <CString::FormatV(char const*, std::__va_list)+0x900>
   a90f8:	91003f1a 	add	x26, x24, #0xf
   a90fc:	f9400308 	ldr	x8, [x24]
   a9100:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a9104:	14000042 	b	a920c <CString::FormatV(char const*, std::__va_list)+0x6ac>
   a9108:	aa1c03e0 	mov	x0, x28
   a910c:	d2800021 	mov	x1, #0x1                   	// #1
   a9110:	97fffbe0 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a9114:	f9400f82 	ldr	x2, [x28, #24]
   a9118:	d2800021 	mov	x1, #0x1                   	// #1
   a911c:	528004a3 	mov	w3, #0x25                  	// #37
   a9120:	aa1c03e0 	mov	x0, x28
   a9124:	8b010044 	add	x4, x2, x1
   a9128:	f9000f84 	str	x4, [x28, #24]
   a912c:	39000043 	strb	w3, [x2]
   a9130:	39c00373 	ldrsb	w19, [x27]
   a9134:	17ffff01 	b	a8d38 <CString::FormatV(char const*, std::__va_list)+0x1d8>
   a9138:	39c00763 	ldrsb	w3, [x27, #1]
   a913c:	52800001 	mov	w1, #0x0                   	// #0
   a9140:	9100077b 	add	x27, x27, #0x1
   a9144:	5100c060 	sub	w0, w3, #0x30
   a9148:	12001c00 	and	w0, w0, #0xff
   a914c:	7100241f 	cmp	w0, #0x9
   a9150:	54ffd888 	b.hi	a8c60 <CString::FormatV(char const*, std::__va_list)+0x100>  // b.pmore
   a9154:	52800142 	mov	w2, #0xa                   	// #10
   a9158:	1b020c21 	madd	w1, w1, w2, w3
   a915c:	38c01f63 	ldrsb	w3, [x27, #1]!
   a9160:	5100c060 	sub	w0, w3, #0x30
   a9164:	5100c021 	sub	w1, w1, #0x30
   a9168:	12001c00 	and	w0, w0, #0xff
   a916c:	7100241f 	cmp	w0, #0x9
   a9170:	54ffff49 	b.ls	a9158 <CString::FormatV(char const*, std::__va_list)+0x5f8>  // b.plast
   a9174:	17fffebb 	b	a8c60 <CString::FormatV(char const*, std::__va_list)+0x100>
   a9178:	d2800142 	mov	x2, #0xa                   	// #10
   a917c:	17ffff1e 	b	a8df4 <CString::FormatV(char const*, std::__va_list)+0x294>
   a9180:	aa1903e0 	mov	x0, x25
   a9184:	94000683 	bl	aab90 <strlen>
   a9188:	aa0003f7 	mov	x23, x0
   a918c:	b4000080 	cbz	x0, a919c <CString::FormatV(char const*, std::__va_list)+0x63c>
   a9190:	aa0003e1 	mov	x1, x0
   a9194:	aa1c03e0 	mov	x0, x28
   a9198:	97fffbbe 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a919c:	f9400f80 	ldr	x0, [x28, #24]
   a91a0:	aa1903e1 	mov	x1, x25
   a91a4:	9400070b 	bl	aadd0 <strcpy>
   a91a8:	f9400f80 	ldr	x0, [x28, #24]
   a91ac:	eb18027f 	cmp	x19, x24
   a91b0:	8b170000 	add	x0, x0, x23
   a91b4:	f9000f80 	str	x0, [x28, #24]
   a91b8:	54ffda29 	b.ls	a8cfc <CString::FormatV(char const*, std::__va_list)+0x19c>  // b.plast
   a91bc:	cb180278 	sub	x24, x19, x24
   a91c0:	aa1c03e0 	mov	x0, x28
   a91c4:	aa1803e1 	mov	x1, x24
   a91c8:	97fffbb2 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a91cc:	d1000700 	sub	x0, x24, #0x1
   a91d0:	52800403 	mov	w3, #0x20                  	// #32
   a91d4:	d503201f 	nop
   a91d8:	f9400f81 	ldr	x1, [x28, #24]
   a91dc:	d1000400 	sub	x0, x0, #0x1
   a91e0:	b100041f 	cmn	x0, #0x1
   a91e4:	91000422 	add	x2, x1, #0x1
   a91e8:	f9000f82 	str	x2, [x28, #24]
   a91ec:	39000023 	strb	w3, [x1]
   a91f0:	54ffff41 	b.ne	a91d8 <CString::FormatV(char const*, std::__va_list)+0x678>  // b.any
   a91f4:	aa1a03f8 	mov	x24, x26
   a91f8:	17fffec2 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a91fc:	37f81435 	tbnz	w21, #31, a9480 <CString::FormatV(char const*, std::__va_list)+0x920>
   a9200:	91002f1a 	add	x26, x24, #0xb
   a9204:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a9208:	b9400308 	ldr	w8, [x24]
   a920c:	eb02011f 	cmp	x8, x2
   a9210:	d2800020 	mov	x0, #0x1                   	// #1
   a9214:	54002b43 	b.cc	a977c <CString::FormatV(char const*, std::__va_list)+0xc1c>  // b.lo, b.ul, b.last
   a9218:	9b027c00 	mul	x0, x0, x2
   a921c:	9ac00905 	udiv	x5, x8, x0
   a9220:	eb0200bf 	cmp	x5, x2
   a9224:	aa0503e4 	mov	x4, x5
   a9228:	54ffff82 	b.cs	a9218 <CString::FormatV(char const*, std::__va_list)+0x6b8>  // b.hs, b.nlast
   a922c:	7101607f 	cmp	w3, #0x58
   a9230:	910203f9 	add	x25, sp, #0x80
   a9234:	1a9f07ea 	cset	w10, ne	// ne = any
   a9238:	aa1903e9 	mov	x9, x25
   a923c:	531b694a 	lsl	w10, w10, #5
   a9240:	1100dd4a 	add	w10, w10, #0x37
   a9244:	14000003 	b	a9250 <CString::FormatV(char const*, std::__va_list)+0x6f0>
   a9248:	9ac00904 	udiv	x4, x8, x0
   a924c:	aa0403e5 	mov	x5, x4
   a9250:	12001c81 	and	w1, w4, #0xff
   a9254:	f100249f 	cmp	x4, #0x9
   a9258:	1100c023 	add	w3, w1, #0x30
   a925c:	0b010141 	add	w1, w10, w1
   a9260:	9b00a0a8 	msub	x8, x5, x0, x8
   a9264:	13001c63 	sxtb	w3, w3
   a9268:	13001c21 	sxtb	w1, w1
   a926c:	1a838021 	csel	w1, w1, w3, hi	// hi = pmore
   a9270:	38001521 	strb	w1, [x9], #1
   a9274:	eb02001f 	cmp	x0, x2
   a9278:	9ac20800 	udiv	x0, x0, x2
   a927c:	54fffe62 	b.cs	a9248 <CString::FormatV(char const*, std::__va_list)+0x6e8>  // b.hs, b.nlast
   a9280:	17ffff00 	b	a8e80 <CString::FormatV(char const*, std::__va_list)+0x320>
   a9284:	110022a0 	add	w0, w21, #0x8
   a9288:	7100001f 	cmp	w0, #0x0
   a928c:	5400122d 	b.le	a94d0 <CString::FormatV(char const*, std::__va_list)+0x970>
   a9290:	91003f1a 	add	x26, x24, #0xf
   a9294:	2a0003f5 	mov	w21, w0
   a9298:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a929c:	17fffeda 	b	a8e04 <CString::FormatV(char const*, std::__va_list)+0x2a4>
   a92a0:	340024b9 	cbz	w25, a9734 <CString::FormatV(char const*, std::__va_list)+0xbd4>
   a92a4:	37f83055 	tbnz	w21, #31, a98ac <CString::FormatV(char const*, std::__va_list)+0xd4c>
   a92a8:	aa1803e0 	mov	x0, x24
   a92ac:	91003f01 	add	x1, x24, #0xf
   a92b0:	927df038 	and	x24, x1, #0xfffffffffffffff8
   a92b4:	f9400002 	ldr	x2, [x0]
   a92b8:	b6f80062 	tbz	x2, #63, a92c4 <CString::FormatV(char const*, std::__va_list)+0x764>
   a92bc:	cb0203e2 	neg	x2, x2
   a92c0:	5280003a 	mov	w26, #0x1                   	// #1
   a92c4:	aa0203e3 	mov	x3, x2
   a92c8:	f100245f 	cmp	x2, #0x9
   a92cc:	d2800020 	mov	x0, #0x1                   	// #1
   a92d0:	5400334d 	b.le	a9938 <CString::FormatV(char const*, std::__va_list)+0xdd8>
   a92d4:	d503201f 	nop
   a92d8:	8b000800 	add	x0, x0, x0, lsl #2
   a92dc:	8b000000 	add	x0, x0, x0
   a92e0:	9ac00841 	udiv	x1, x2, x0
   a92e4:	f100243f 	cmp	x1, #0x9
   a92e8:	54ffff88 	b.hi	a92d8 <CString::FormatV(char const*, std::__va_list)+0x778>  // b.pmore
   a92ec:	910203f9 	add	x25, sp, #0x80
   a92f0:	b202e7e9 	mov	x9, #0xcccccccccccccccc    	// #-3689348814741910324
   a92f4:	aa1903e5 	mov	x5, x25
   a92f8:	f29999a9 	movk	x9, #0xcccd
   a92fc:	14000003 	b	a9308 <CString::FormatV(char const*, std::__va_list)+0x7a8>
   a9300:	aa0103e0 	mov	x0, x1
   a9304:	9ac10861 	udiv	x1, x3, x1
   a9308:	12001c22 	and	w2, w1, #0xff
   a930c:	f100243f 	cmp	x1, #0x9
   a9310:	1100c044 	add	w4, w2, #0x30
   a9314:	11015c42 	add	w2, w2, #0x57
   a9318:	9ac00868 	udiv	x8, x3, x0
   a931c:	9bc97c01 	umulh	x1, x0, x9
   a9320:	13001c84 	sxtb	w4, w4
   a9324:	13001c42 	sxtb	w2, w2
   a9328:	1a848042 	csel	w2, w2, w4, hi	// hi = pmore
   a932c:	380014a2 	strb	w2, [x5], #1
   a9330:	f100241f 	cmp	x0, #0x9
   a9334:	d343fc21 	lsr	x1, x1, #3
   a9338:	9b008d03 	msub	x3, x8, x0, x3
   a933c:	54fffe28 	b.hi	a9300 <CString::FormatV(char const*, std::__va_list)+0x7a0>  // b.pmore
   a9340:	390000bf 	strb	wzr, [x5]
   a9344:	aa1903e0 	mov	x0, x25
   a9348:	94000612 	bl	aab90 <strlen>
   a934c:	aa0003e2 	mov	x2, x0
   a9350:	34ffe73a 	cbz	w26, a9034 <CString::FormatV(char const*, std::__va_list)+0x4d4>
   a9354:	91000402 	add	x2, x0, #0x1
   a9358:	34001d76 	cbz	w22, a9704 <CString::FormatV(char const*, std::__va_list)+0xba4>
   a935c:	aa1c03e0 	mov	x0, x28
   a9360:	d2800021 	mov	x1, #0x1                   	// #1
   a9364:	f9003be2 	str	x2, [sp, #112]
   a9368:	97fffb4a 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a936c:	f9400f80 	ldr	x0, [x28, #24]
   a9370:	528005a1 	mov	w1, #0x2d                  	// #45
   a9374:	f9403be2 	ldr	x2, [sp, #112]
   a9378:	91000403 	add	x3, x0, #0x1
   a937c:	f9000f83 	str	x3, [x28, #24]
   a9380:	39000001 	strb	w1, [x0]
   a9384:	aa1903e0 	mov	x0, x25
   a9388:	f9003be2 	str	x2, [sp, #112]
   a938c:	94000601 	bl	aab90 <strlen>
   a9390:	aa0003fa 	mov	x26, x0
   a9394:	f9403be2 	ldr	x2, [sp, #112]
   a9398:	b40000a0 	cbz	x0, a93ac <CString::FormatV(char const*, std::__va_list)+0x84c>
   a939c:	aa0003e1 	mov	x1, x0
   a93a0:	aa1c03e0 	mov	x0, x28
   a93a4:	97fffb3b 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a93a8:	f9403be2 	ldr	x2, [sp, #112]
   a93ac:	aa1903e1 	mov	x1, x25
   a93b0:	f9400f80 	ldr	x0, [x28, #24]
   a93b4:	f9003be2 	str	x2, [sp, #112]
   a93b8:	94000686 	bl	aadd0 <strcpy>
   a93bc:	f9400f80 	ldr	x0, [x28, #24]
   a93c0:	f9403be2 	ldr	x2, [sp, #112]
   a93c4:	8b1a0000 	add	x0, x0, x26
   a93c8:	f9000f80 	str	x0, [x28, #24]
   a93cc:	eb02027f 	cmp	x19, x2
   a93d0:	54ffc989 	b.ls	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>  // b.plast
   a93d4:	cb020273 	sub	x19, x19, x2
   a93d8:	aa1c03e0 	mov	x0, x28
   a93dc:	aa1303e1 	mov	x1, x19
   a93e0:	97fffb2c 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a93e4:	d1000660 	sub	x0, x19, #0x1
   a93e8:	52800403 	mov	w3, #0x20                  	// #32
   a93ec:	d503201f 	nop
   a93f0:	f9400f81 	ldr	x1, [x28, #24]
   a93f4:	d1000400 	sub	x0, x0, #0x1
   a93f8:	b100041f 	cmn	x0, #0x1
   a93fc:	91000422 	add	x2, x1, #0x1
   a9400:	f9000f82 	str	x2, [x28, #24]
   a9404:	39000023 	strb	w3, [x1]
   a9408:	54ffff41 	b.ne	a93f0 <CString::FormatV(char const*, std::__va_list)+0x890>  // b.any
   a940c:	17fffe3d 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a9410:	d2800202 	mov	x2, #0x10                  	// #16
   a9414:	34ffcf08 	cbz	w8, a8df4 <CString::FormatV(char const*, std::__va_list)+0x294>
   a9418:	b0000060 	adrp	x0, b6000 <_etext+0x39c8>
   a941c:	9127a000 	add	x0, x0, #0x9e8
   a9420:	f9003be0 	str	x0, [sp, #112]
   a9424:	17ffff1d 	b	a9098 <CString::FormatV(char const*, std::__va_list)+0x538>
   a9428:	aa1c03e0 	mov	x0, x28
   a942c:	d2800021 	mov	x1, #0x1                   	// #1
   a9430:	b90073e5 	str	w5, [sp, #112]
   a9434:	f9003fe2 	str	x2, [sp, #120]
   a9438:	97fffb16 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a943c:	f9400f80 	ldr	x0, [x28, #24]
   a9440:	52800601 	mov	w1, #0x30                  	// #48
   a9444:	f9403fe2 	ldr	x2, [sp, #120]
   a9448:	91000403 	add	x3, x0, #0x1
   a944c:	f9000f83 	str	x3, [x28, #24]
   a9450:	39000001 	strb	w1, [x0]
   a9454:	b94073e5 	ldr	w5, [sp, #112]
   a9458:	39c00363 	ldrsb	w3, [x27]
   a945c:	17fffe66 	b	a8df4 <CString::FormatV(char const*, std::__va_list)+0x294>
   a9460:	110022a0 	add	w0, w21, #0x8
   a9464:	7100001f 	cmp	w0, #0x0
   a9468:	5400202d 	b.le	a986c <CString::FormatV(char const*, std::__va_list)+0xd0c>
   a946c:	91003f1a 	add	x26, x24, #0xf
   a9470:	2a0003f5 	mov	w21, w0
   a9474:	f9400308 	ldr	x8, [x24]
   a9478:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a947c:	17ffff64 	b	a920c <CString::FormatV(char const*, std::__va_list)+0x6ac>
   a9480:	110022a0 	add	w0, w21, #0x8
   a9484:	7100001f 	cmp	w0, #0x0
   a9488:	54001e6d 	b.le	a9854 <CString::FormatV(char const*, std::__va_list)+0xcf4>
   a948c:	91002f1a 	add	x26, x24, #0xb
   a9490:	2a0003f5 	mov	w21, w0
   a9494:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a9498:	17ffff5c 	b	a9208 <CString::FormatV(char const*, std::__va_list)+0x6a8>
   a949c:	d1000661 	sub	x1, x19, #0x1
   a94a0:	aa1c03e0 	mov	x0, x28
   a94a4:	d1000a73 	sub	x19, x19, #0x2
   a94a8:	97fffafa 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a94ac:	52800402 	mov	w2, #0x20                  	// #32
   a94b0:	f9400f80 	ldr	x0, [x28, #24]
   a94b4:	d1000673 	sub	x19, x19, #0x1
   a94b8:	b100067f 	cmn	x19, #0x1
   a94bc:	91000401 	add	x1, x0, #0x1
   a94c0:	f9000f81 	str	x1, [x28, #24]
   a94c4:	39000002 	strb	w2, [x0]
   a94c8:	54ffff41 	b.ne	a94b0 <CString::FormatV(char const*, std::__va_list)+0x950>  // b.any
   a94cc:	17fffe9d 	b	a8f40 <CString::FormatV(char const*, std::__va_list)+0x3e0>
   a94d0:	f94037e1 	ldr	x1, [sp, #104]
   a94d4:	aa1803fa 	mov	x26, x24
   a94d8:	8b35c021 	add	x1, x1, w21, sxtw
   a94dc:	2a0003f5 	mov	w21, w0
   a94e0:	aa0103f8 	mov	x24, x1
   a94e4:	17fffe48 	b	a8e04 <CString::FormatV(char const*, std::__va_list)+0x2a4>
   a94e8:	cb000278 	sub	x24, x19, x0
   a94ec:	aa1c03e0 	mov	x0, x28
   a94f0:	aa1803e1 	mov	x1, x24
   a94f4:	97fffae7 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a94f8:	d1000700 	sub	x0, x24, #0x1
   a94fc:	52800403 	mov	w3, #0x20                  	// #32
   a9500:	f9400f81 	ldr	x1, [x28, #24]
   a9504:	d1000400 	sub	x0, x0, #0x1
   a9508:	b100041f 	cmn	x0, #0x1
   a950c:	91000422 	add	x2, x1, #0x1
   a9510:	f9000f82 	str	x2, [x28, #24]
   a9514:	39000023 	strb	w3, [x1]
   a9518:	54ffff41 	b.ne	a9500 <CString::FormatV(char const*, std::__va_list)+0x9a0>  // b.any
   a951c:	17fffdeb 	b	a8cc8 <CString::FormatV(char const*, std::__va_list)+0x168>
   a9520:	cb00027a 	sub	x26, x19, x0
   a9524:	aa1c03e0 	mov	x0, x28
   a9528:	aa1a03e1 	mov	x1, x26
   a952c:	97fffad9 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a9530:	d1000740 	sub	x0, x26, #0x1
   a9534:	52800403 	mov	w3, #0x20                  	// #32
   a9538:	f9400f81 	ldr	x1, [x28, #24]
   a953c:	d1000400 	sub	x0, x0, #0x1
   a9540:	b100041f 	cmn	x0, #0x1
   a9544:	91000422 	add	x2, x1, #0x1
   a9548:	f9000f82 	str	x2, [x28, #24]
   a954c:	39000023 	strb	w3, [x1]
   a9550:	54ffff41 	b.ne	a9538 <CString::FormatV(char const*, std::__va_list)+0x9d8>  // b.any
   a9554:	17fffe10 	b	a8d94 <CString::FormatV(char const*, std::__va_list)+0x234>
   a9558:	110022a0 	add	w0, w21, #0x8
   a955c:	7100001f 	cmp	w0, #0x0
   a9560:	5400114d 	b.le	a9788 <CString::FormatV(char const*, std::__va_list)+0xc28>
   a9564:	91003f19 	add	x25, x24, #0xf
   a9568:	2a0003f5 	mov	w21, w0
   a956c:	927df339 	and	x25, x25, #0xfffffffffffffff8
   a9570:	17fffe02 	b	a8d78 <CString::FormatV(char const*, std::__va_list)+0x218>
   a9574:	cb0203e2 	neg	x2, x2
   a9578:	17fffe8c 	b	a8fa8 <CString::FormatV(char const*, std::__va_list)+0x448>
   a957c:	b94067e0 	ldr	w0, [sp, #100]
   a9580:	11004000 	add	w0, w0, #0x10
   a9584:	7100001f 	cmp	w0, #0x0
   a9588:	540010cd 	b.le	a97a0 <CString::FormatV(char const*, std::__va_list)+0xc40>
   a958c:	91003f1a 	add	x26, x24, #0xf
   a9590:	b90067e0 	str	w0, [sp, #100]
   a9594:	927df35a 	and	x26, x26, #0xfffffffffffffff8
   a9598:	17fffdc2 	b	a8ca0 <CString::FormatV(char const*, std::__va_list)+0x140>
   a959c:	110022a0 	add	w0, w21, #0x8
   a95a0:	7100001f 	cmp	w0, #0x0
   a95a4:	540010cd 	b.le	a97bc <CString::FormatV(char const*, std::__va_list)+0xc5c>
   a95a8:	91002f19 	add	x25, x24, #0xb
   a95ac:	2a0003f5 	mov	w21, w0
   a95b0:	927df339 	and	x25, x25, #0xfffffffffffffff8
   a95b4:	17fffe5f 	b	a8f30 <CString::FormatV(char const*, std::__va_list)+0x3d0>
   a95b8:	aa1803e0 	mov	x0, x24
   a95bc:	94000575 	bl	aab90 <strlen>
   a95c0:	aa0003f6 	mov	x22, x0
   a95c4:	b4000080 	cbz	x0, a95d4 <CString::FormatV(char const*, std::__va_list)+0xa74>
   a95c8:	aa0003e1 	mov	x1, x0
   a95cc:	aa1c03e0 	mov	x0, x28
   a95d0:	97fffab0 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a95d4:	f9400f80 	ldr	x0, [x28, #24]
   a95d8:	aa1803e1 	mov	x1, x24
   a95dc:	940005fd 	bl	aadd0 <strcpy>
   a95e0:	f9400f80 	ldr	x0, [x28, #24]
   a95e4:	eb13035f 	cmp	x26, x19
   a95e8:	8b160000 	add	x0, x0, x22
   a95ec:	f9000f80 	str	x0, [x28, #24]
   a95f0:	54ffbec2 	b.cs	a8dc8 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.hs, b.nlast
   a95f4:	cb1a027a 	sub	x26, x19, x26
   a95f8:	aa1c03e0 	mov	x0, x28
   a95fc:	aa1a03e1 	mov	x1, x26
   a9600:	97fffaa4 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a9604:	d1000740 	sub	x0, x26, #0x1
   a9608:	52800403 	mov	w3, #0x20                  	// #32
   a960c:	f9400f81 	ldr	x1, [x28, #24]
   a9610:	d1000400 	sub	x0, x0, #0x1
   a9614:	b100041f 	cmn	x0, #0x1
   a9618:	91000422 	add	x2, x1, #0x1
   a961c:	f9000f82 	str	x2, [x28, #24]
   a9620:	39000023 	strb	w3, [x1]
   a9624:	54ffff41 	b.ne	a960c <CString::FormatV(char const*, std::__va_list)+0xaac>  // b.any
   a9628:	aa1903f8 	mov	x24, x25
   a962c:	17fffdb5 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a9630:	aa1903e0 	mov	x0, x25
   a9634:	94000557 	bl	aab90 <strlen>
   a9638:	aa0003f6 	mov	x22, x0
   a963c:	b4000080 	cbz	x0, a964c <CString::FormatV(char const*, std::__va_list)+0xaec>
   a9640:	aa0003e1 	mov	x1, x0
   a9644:	aa1c03e0 	mov	x0, x28
   a9648:	97fffa92 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a964c:	f9400f80 	ldr	x0, [x28, #24]
   a9650:	aa1903e1 	mov	x1, x25
   a9654:	940005df 	bl	aadd0 <strcpy>
   a9658:	f9400f80 	ldr	x0, [x28, #24]
   a965c:	eb13031f 	cmp	x24, x19
   a9660:	8b160000 	add	x0, x0, x22
   a9664:	f9000f80 	str	x0, [x28, #24]
   a9668:	54ffb4a2 	b.cs	a8cfc <CString::FormatV(char const*, std::__va_list)+0x19c>  // b.hs, b.nlast
   a966c:	cb180278 	sub	x24, x19, x24
   a9670:	aa1c03e0 	mov	x0, x28
   a9674:	aa1803e1 	mov	x1, x24
   a9678:	97fffa86 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a967c:	d1000700 	sub	x0, x24, #0x1
   a9680:	52800403 	mov	w3, #0x20                  	// #32
   a9684:	f9400f81 	ldr	x1, [x28, #24]
   a9688:	d1000400 	sub	x0, x0, #0x1
   a968c:	b100041f 	cmn	x0, #0x1
   a9690:	91000422 	add	x2, x1, #0x1
   a9694:	f9000f82 	str	x2, [x28, #24]
   a9698:	39000023 	strb	w3, [x1]
   a969c:	54ffff41 	b.ne	a9684 <CString::FormatV(char const*, std::__va_list)+0xb24>  // b.any
   a96a0:	aa1a03f8 	mov	x24, x26
   a96a4:	17fffd97 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a96a8:	aa1c03e0 	mov	x0, x28
   a96ac:	d2800021 	mov	x1, #0x1                   	// #1
   a96b0:	97fffa78 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a96b4:	f9400f80 	ldr	x0, [x28, #24]
   a96b8:	f100067f 	cmp	x19, #0x1
   a96bc:	91000401 	add	x1, x0, #0x1
   a96c0:	f9000f81 	str	x1, [x28, #24]
   a96c4:	39000018 	strb	w24, [x0]
   a96c8:	54ffb809 	b.ls	a8dc8 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.plast
   a96cc:	d1000661 	sub	x1, x19, #0x1
   a96d0:	aa1c03e0 	mov	x0, x28
   a96d4:	d1000a73 	sub	x19, x19, #0x2
   a96d8:	97fffa6e 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a96dc:	52800402 	mov	w2, #0x20                  	// #32
   a96e0:	f9400f80 	ldr	x0, [x28, #24]
   a96e4:	d1000673 	sub	x19, x19, #0x1
   a96e8:	b100067f 	cmn	x19, #0x1
   a96ec:	91000401 	add	x1, x0, #0x1
   a96f0:	f9000f81 	str	x1, [x28, #24]
   a96f4:	39000002 	strb	w2, [x0]
   a96f8:	54ffff41 	b.ne	a96e0 <CString::FormatV(char const*, std::__va_list)+0xb80>  // b.any
   a96fc:	aa1903f8 	mov	x24, x25
   a9700:	17fffd80 	b	a8d00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   a9704:	350008b7 	cbnz	w23, a9818 <CString::FormatV(char const*, std::__va_list)+0xcb8>
   a9708:	eb02027f 	cmp	x19, x2
   a970c:	54000688 	b.hi	a97dc <CString::FormatV(char const*, std::__va_list)+0xc7c>  // b.pmore
   a9710:	aa1c03e0 	mov	x0, x28
   a9714:	d2800021 	mov	x1, #0x1                   	// #1
   a9718:	97fffa5e 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a971c:	f9400f80 	ldr	x0, [x28, #24]
   a9720:	528005a1 	mov	w1, #0x2d                  	// #45
   a9724:	91000402 	add	x2, x0, #0x1
   a9728:	f9000f82 	str	x2, [x28, #24]
   a972c:	39000001 	strb	w1, [x0]
   a9730:	17fffe45 	b	a9044 <CString::FormatV(char const*, std::__va_list)+0x4e4>
   a9734:	37f80ab5 	tbnz	w21, #31, a9888 <CString::FormatV(char const*, std::__va_list)+0xd28>
   a9738:	aa1803e0 	mov	x0, x24
   a973c:	91002f01 	add	x1, x24, #0xb
   a9740:	927df038 	and	x24, x1, #0xfffffffffffffff8
   a9744:	b9800002 	ldrsw	x2, [x0]
   a9748:	17fffedc 	b	a92b8 <CString::FormatV(char const*, std::__va_list)+0x758>
   a974c:	110022a1 	add	w1, w21, #0x8
   a9750:	7100003f 	cmp	w1, #0x0
   a9754:	5400078d 	b.le	a9844 <CString::FormatV(char const*, std::__va_list)+0xce4>
   a9758:	91003f02 	add	x2, x24, #0xf
   a975c:	aa1803e0 	mov	x0, x24
   a9760:	2a0103f5 	mov	w21, w1
   a9764:	927df058 	and	x24, x2, #0xfffffffffffffff8
   a9768:	17fffe0d 	b	a8f9c <CString::FormatV(char const*, std::__va_list)+0x43c>
   a976c:	aa0803e4 	mov	x4, x8
   a9770:	aa0803e5 	mov	x5, x8
   a9774:	d2800020 	mov	x0, #0x1                   	// #1
   a9778:	17fffdad 	b	a8e2c <CString::FormatV(char const*, std::__va_list)+0x2cc>
   a977c:	aa0803e4 	mov	x4, x8
   a9780:	aa0803e5 	mov	x5, x8
   a9784:	17fffeaa 	b	a922c <CString::FormatV(char const*, std::__va_list)+0x6cc>
   a9788:	f94037e1 	ldr	x1, [sp, #104]
   a978c:	aa1803f9 	mov	x25, x24
   a9790:	8b35c021 	add	x1, x1, w21, sxtw
   a9794:	2a0003f5 	mov	w21, w0
   a9798:	aa0103f8 	mov	x24, x1
   a979c:	17fffd77 	b	a8d78 <CString::FormatV(char const*, std::__va_list)+0x218>
   a97a0:	f9400a82 	ldr	x2, [x20, #16]
   a97a4:	aa1803fa 	mov	x26, x24
   a97a8:	b94067e3 	ldr	w3, [sp, #100]
   a97ac:	b90067e0 	str	w0, [sp, #100]
   a97b0:	8b23c042 	add	x2, x2, w3, sxtw
   a97b4:	aa0203f8 	mov	x24, x2
   a97b8:	17fffd3a 	b	a8ca0 <CString::FormatV(char const*, std::__va_list)+0x140>
   a97bc:	f94037e1 	ldr	x1, [sp, #104]
   a97c0:	aa1803f9 	mov	x25, x24
   a97c4:	8b35c021 	add	x1, x1, w21, sxtw
   a97c8:	2a0003f5 	mov	w21, w0
   a97cc:	aa0103f8 	mov	x24, x1
   a97d0:	17fffdd8 	b	a8f30 <CString::FormatV(char const*, std::__va_list)+0x3d0>
   a97d4:	eb13001f 	cmp	x0, x19
   a97d8:	54ffc362 	b.cs	a9044 <CString::FormatV(char const*, std::__va_list)+0x4e4>  // b.hs, b.nlast
   a97dc:	cb020273 	sub	x19, x19, x2
   a97e0:	aa1c03e0 	mov	x0, x28
   a97e4:	aa1303e1 	mov	x1, x19
   a97e8:	97fffa2a 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a97ec:	d1000660 	sub	x0, x19, #0x1
   a97f0:	52800403 	mov	w3, #0x20                  	// #32
   a97f4:	f9400f81 	ldr	x1, [x28, #24]
   a97f8:	d1000400 	sub	x0, x0, #0x1
   a97fc:	b100041f 	cmn	x0, #0x1
   a9800:	91000422 	add	x2, x1, #0x1
   a9804:	f9000f82 	str	x2, [x28, #24]
   a9808:	39000023 	strb	w3, [x1]
   a980c:	54ffff41 	b.ne	a97f4 <CString::FormatV(char const*, std::__va_list)+0xc94>  // b.any
   a9810:	34ffc1ba 	cbz	w26, a9044 <CString::FormatV(char const*, std::__va_list)+0x4e4>
   a9814:	17ffffbf 	b	a9710 <CString::FormatV(char const*, std::__va_list)+0xbb0>
   a9818:	aa1c03e0 	mov	x0, x28
   a981c:	d2800021 	mov	x1, #0x1                   	// #1
   a9820:	f9003be2 	str	x2, [sp, #112]
   a9824:	97fffa1b 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a9828:	f9400f80 	ldr	x0, [x28, #24]
   a982c:	528005a1 	mov	w1, #0x2d                  	// #45
   a9830:	f9403be2 	ldr	x2, [sp, #112]
   a9834:	91000403 	add	x3, x0, #0x1
   a9838:	f9000f83 	str	x3, [x28, #24]
   a983c:	39000001 	strb	w1, [x0]
   a9840:	17fffdff 	b	a903c <CString::FormatV(char const*, std::__va_list)+0x4dc>
   a9844:	f94037e0 	ldr	x0, [sp, #104]
   a9848:	8b35c000 	add	x0, x0, w21, sxtw
   a984c:	2a0103f5 	mov	w21, w1
   a9850:	17fffdd3 	b	a8f9c <CString::FormatV(char const*, std::__va_list)+0x43c>
   a9854:	f94037e1 	ldr	x1, [sp, #104]
   a9858:	aa1803fa 	mov	x26, x24
   a985c:	8b35c021 	add	x1, x1, w21, sxtw
   a9860:	2a0003f5 	mov	w21, w0
   a9864:	aa0103f8 	mov	x24, x1
   a9868:	17fffe68 	b	a9208 <CString::FormatV(char const*, std::__va_list)+0x6a8>
   a986c:	f94037e1 	ldr	x1, [sp, #104]
   a9870:	aa1803fa 	mov	x26, x24
   a9874:	8b35c021 	add	x1, x1, w21, sxtw
   a9878:	2a0003f5 	mov	w21, w0
   a987c:	aa0103f8 	mov	x24, x1
   a9880:	f9400308 	ldr	x8, [x24]
   a9884:	17fffe62 	b	a920c <CString::FormatV(char const*, std::__va_list)+0x6ac>
   a9888:	110022a1 	add	w1, w21, #0x8
   a988c:	7100003f 	cmp	w1, #0x0
   a9890:	5400040d 	b.le	a9910 <CString::FormatV(char const*, std::__va_list)+0xdb0>
   a9894:	aa1803e0 	mov	x0, x24
   a9898:	91002f02 	add	x2, x24, #0xb
   a989c:	927df058 	and	x24, x2, #0xfffffffffffffff8
   a98a0:	2a0103f5 	mov	w21, w1
   a98a4:	b9800002 	ldrsw	x2, [x0]
   a98a8:	17fffe84 	b	a92b8 <CString::FormatV(char const*, std::__va_list)+0x758>
   a98ac:	110022a1 	add	w1, w21, #0x8
   a98b0:	7100003f 	cmp	w1, #0x0
   a98b4:	5400038d 	b.le	a9924 <CString::FormatV(char const*, std::__va_list)+0xdc4>
   a98b8:	aa1803e0 	mov	x0, x24
   a98bc:	91003f02 	add	x2, x24, #0xf
   a98c0:	927df058 	and	x24, x2, #0xfffffffffffffff8
   a98c4:	2a0103f5 	mov	w21, w1
   a98c8:	f9400002 	ldr	x2, [x0]
   a98cc:	17fffe7b 	b	a92b8 <CString::FormatV(char const*, std::__va_list)+0x758>
   a98d0:	cb020273 	sub	x19, x19, x2
   a98d4:	aa1c03e0 	mov	x0, x28
   a98d8:	aa1303e1 	mov	x1, x19
   a98dc:	97fff9ed 	bl	a8090 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a98e0:	d1000660 	sub	x0, x19, #0x1
   a98e4:	52800603 	mov	w3, #0x30                  	// #48
   a98e8:	f9400f81 	ldr	x1, [x28, #24]
   a98ec:	d1000400 	sub	x0, x0, #0x1
   a98f0:	b100041f 	cmn	x0, #0x1
   a98f4:	91000422 	add	x2, x1, #0x1
   a98f8:	f9000f82 	str	x2, [x28, #24]
   a98fc:	39000023 	strb	w3, [x1]
   a9900:	54ffff41 	b.ne	a98e8 <CString::FormatV(char const*, std::__va_list)+0xd88>  // b.any
   a9904:	17fffdd0 	b	a9044 <CString::FormatV(char const*, std::__va_list)+0x4e4>
   a9908:	aa0203e1 	mov	x1, x2
   a990c:	17fffdb0 	b	a8fcc <CString::FormatV(char const*, std::__va_list)+0x46c>
   a9910:	f94037e0 	ldr	x0, [sp, #104]
   a9914:	8b35c000 	add	x0, x0, w21, sxtw
   a9918:	2a0103f5 	mov	w21, w1
   a991c:	b9800002 	ldrsw	x2, [x0]
   a9920:	17fffe66 	b	a92b8 <CString::FormatV(char const*, std::__va_list)+0x758>
   a9924:	f94037e0 	ldr	x0, [sp, #104]
   a9928:	8b35c000 	add	x0, x0, w21, sxtw
   a992c:	2a0103f5 	mov	w21, w1
   a9930:	f9400002 	ldr	x2, [x0]
   a9934:	17fffe61 	b	a92b8 <CString::FormatV(char const*, std::__va_list)+0x758>
   a9938:	aa0203e1 	mov	x1, x2
   a993c:	17fffe6c 	b	a92ec <CString::FormatV(char const*, std::__va_list)+0x78c>

00000000000a9940 <CString::Format(char const*, ...)>:
   a9940:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   a9944:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   a9948:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   a994c:	910003fd 	mov	x29, sp
   a9950:	910343ea 	add	x10, sp, #0xd0
   a9954:	910403eb 	add	x11, sp, #0x100
   a9958:	a9032feb 	stp	x11, x11, [sp, #48]
   a995c:	f90023ea 	str	x10, [sp, #64]
   a9960:	290923e9 	stp	w9, w8, [sp, #72]
   a9964:	a9432fea 	ldp	x10, x11, [sp, #48]
   a9968:	a9012fea 	stp	x10, x11, [sp, #16]
   a996c:	a94427e8 	ldp	x8, x9, [sp, #64]
   a9970:	a90227e8 	stp	x8, x9, [sp, #32]
   a9974:	3d8017e0 	str	q0, [sp, #80]
   a9978:	3d801be1 	str	q1, [sp, #96]
   a997c:	3d801fe2 	str	q2, [sp, #112]
   a9980:	3d8023e3 	str	q3, [sp, #128]
   a9984:	3d8027e4 	str	q4, [sp, #144]
   a9988:	3d802be5 	str	q5, [sp, #160]
   a998c:	3d802fe6 	str	q6, [sp, #176]
   a9990:	3d8033e7 	str	q7, [sp, #192]
   a9994:	a90d0fe2 	stp	x2, x3, [sp, #208]
   a9998:	910043e2 	add	x2, sp, #0x10
   a999c:	a90e17e4 	stp	x4, x5, [sp, #224]
   a99a0:	a90f1fe6 	stp	x6, x7, [sp, #240]
   a99a4:	97fffc6f 	bl	a8b60 <CString::FormatV(char const*, std::__va_list)>
   a99a8:	a8d07bfd 	ldp	x29, x30, [sp], #256
   a99ac:	d65f03c0 	ret

00000000000a99b0 <__aeabi_atexit>:
   a99b0:	d65f03c0 	ret
   a99b4:	d503201f 	nop
   a99b8:	d503201f 	nop
   a99bc:	d503201f 	nop

00000000000a99c0 <__cxa_atexit>:
   a99c0:	d65f03c0 	ret
   a99c4:	d503201f 	nop
   a99c8:	d503201f 	nop
   a99cc:	d503201f 	nop

00000000000a99d0 <__errno>:
   a99d0:	b0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a99d4:	91330000 	add	x0, x0, #0xcc0
   a99d8:	d65f03c0 	ret
   a99dc:	d503201f 	nop

00000000000a99e0 <set_qemu_exit_status>:
   a99e0:	d65f03c0 	ret
   a99e4:	d503201f 	nop
   a99e8:	d503201f 	nop
   a99ec:	d503201f 	nop

00000000000a99f0 <halt>:
   a99f0:	d50342df 	msr	daifset, #0x2
   a99f4:	d50341df 	msr	daifset, #0x1
   a99f8:	d5033f9f 	dsb	sy
   a99fc:	d503207f 	wfi
   a9a00:	17fffffe 	b	a99f8 <halt+0x8>
   a9a04:	d503201f 	nop
   a9a08:	d503201f 	nop
   a9a0c:	d503201f 	nop

00000000000a9a10 <error_halt>:
   a9a10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a9a14:	52800001 	mov	w1, #0x0                   	// #0
   a9a18:	910003fd 	mov	x29, sp
   a9a1c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9a20:	9100a3f4 	add	x20, sp, #0x28
   a9a24:	2a0003f3 	mov	w19, w0
   a9a28:	aa1403e0 	mov	x0, x20
   a9a2c:	97ffe0a9 	bl	a1cd0 <CActLED::CActLED(bool)>
   a9a30:	2a1303e1 	mov	w1, w19
   a9a34:	52802583 	mov	w3, #0x12c                 	// #300
   a9a38:	52800c82 	mov	w2, #0x64                  	// #100
   a9a3c:	aa1403e0 	mov	x0, x20
   a9a40:	97ffe0f8 	bl	a1e20 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
   a9a44:	52807d00 	mov	w0, #0x3e8                 	// #1000
   a9a48:	940003c6 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   a9a4c:	17fffff9 	b	a9a30 <error_halt+0x20>

00000000000a9a50 <reboot>:
   a9a50:	d2800480 	mov	x0, #0x24                  	// #36
   a9a54:	f2a7e200 	movk	x0, #0x3f10, lsl #16
   a9a58:	52800021 	mov	w1, #0x1                   	// #1
   a9a5c:	72ab4001 	movk	w1, #0x5a00, lsl #16
   a9a60:	b9000001 	str	w1, [x0]
   a9a64:	11007c22 	add	w2, w1, #0x1f
   a9a68:	b81f8002 	stur	w2, [x0, #-8]
   a9a6c:	14000000 	b	a9a6c <reboot+0x1c>

00000000000a9a70 <sysinit>:
   a9a70:	d11f43ff 	sub	sp, sp, #0x7d0
   a9a74:	a9007bfd 	stp	x29, x30, [sp]
   a9a78:	910003fd 	mov	x29, sp
   a9a7c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9a80:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9a84:	f9001bf7 	str	x23, [sp, #48]
   a9a88:	d50341ff 	msr	daifclr, #0x1
   a9a8c:	d50342ff 	msr	daifclr, #0x2
   a9a90:	b0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a9a94:	f945a800 	ldr	x0, [x0, #2896]
   a9a98:	52800001 	mov	w1, #0x0                   	// #0
   a9a9c:	b0000113 	adrp	x19, ca000 <vtable for CLAN7800Device+0x28>
   a9aa0:	f945ae73 	ldr	x19, [x19, #2904]
   a9aa4:	cb000262 	sub	x2, x19, x0
   a9aa8:	940005b0 	bl	ab168 <memset>
   a9aac:	f14a027f 	cmp	x19, #0x280, lsl #12
   a9ab0:	540005c8 	b.hi	a9b68 <sysinit+0xf8>  // b.pmore
   a9ab4:	52800021 	mov	w1, #0x1                   	// #1
   a9ab8:	910363f6 	add	x22, sp, #0xd8
   a9abc:	aa1603e0 	mov	x0, x22
   a9ac0:	94000d10 	bl	acf00 <CMemorySystem::CMemorySystem(bool)>
   a9ac4:	910103f3 	add	x19, sp, #0x40
   a9ac8:	910183e0 	add	x0, sp, #0x60
   a9acc:	97ffeaa5 	bl	a4560 <CMachineInfo::CMachineInfo()>
   a9ad0:	910a43f7 	add	x23, sp, #0x290
   a9ad4:	aa1303e0 	mov	x0, x19
   a9ad8:	97fff992 	bl	a8120 <CString::CString()>
   a9adc:	90000061 	adrp	x1, b5000 <_etext+0x29c8>
   a9ae0:	910f4021 	add	x1, x1, #0x3d0
   a9ae4:	528005c2 	mov	w2, #0x2e                  	// #46
   a9ae8:	aa1303e0 	mov	x0, x19
   a9aec:	97ffff95 	bl	a9940 <CString::Format(char const*, ...)>
   a9af0:	aa1303e0 	mov	x0, x19
   a9af4:	97fff9cf 	bl	a8230 <CString::operator char const*() const>
   a9af8:	b0000102 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   a9afc:	91330042 	add	x2, x2, #0xcc0
   a9b00:	aa0003e1 	mov	x1, x0
   a9b04:	91002040 	add	x0, x2, #0x8
   a9b08:	940004b2 	bl	aadd0 <strcpy>
   a9b0c:	aa1703e0 	mov	x0, x23
   a9b10:	94000ff0 	bl	adad0 <CInterruptSystem::CInterruptSystem()>
   a9b14:	aa1703e0 	mov	x0, x23
   a9b18:	94001026 	bl	adbb0 <CInterruptSystem::Initialize()>
   a9b1c:	36000280 	tbz	w0, #0, a9b6c <sysinit+0xfc>
   a9b20:	b0000115 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   a9b24:	f94596b5 	ldr	x21, [x21, #2856]
   a9b28:	b0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a9b2c:	f945a000 	ldr	x0, [x0, #2880]
   a9b30:	eb0002bf 	cmp	x21, x0
   a9b34:	54000142 	b.cs	a9b5c <sysinit+0xec>  // b.hs, b.nlast
   a9b38:	d1000414 	sub	x20, x0, #0x1
   a9b3c:	d2800013 	mov	x19, #0x0                   	// #0
   a9b40:	cb150294 	sub	x20, x20, x21
   a9b44:	d343fe94 	lsr	x20, x20, #3
   a9b48:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   a9b4c:	d63f0000 	blr	x0
   a9b50:	eb14027f 	cmp	x19, x20
   a9b54:	91000673 	add	x19, x19, #0x1
   a9b58:	54ffff81 	b.ne	a9b48 <sysinit+0xd8>  // b.any
   a9b5c:	97ff5b29 	bl	80800 <main>
   a9b60:	7100041f 	cmp	w0, #0x1
   a9b64:	54000080 	b.eq	a9b74 <sysinit+0x104>  // b.none
   a9b68:	97ffffa2 	bl	a99f0 <halt>
   a9b6c:	52800040 	mov	w0, #0x2                   	// #2
   a9b70:	97ffffa8 	bl	a9a10 <error_halt>
   a9b74:	9400068f 	bl	ab5b0 <IsChainBootEnabled>
   a9b78:	37000040 	tbnz	w0, #0, a9b80 <sysinit+0x110>
   a9b7c:	97ffffb5 	bl	a9a50 <reboot>
   a9b80:	aa1703e0 	mov	x0, x23
   a9b84:	94000ff7 	bl	adb60 <CInterruptSystem::Destructor()>
   a9b88:	aa1603e0 	mov	x0, x22
   a9b8c:	94000c75 	bl	acd60 <CMemorySystem::Destructor()>
   a9b90:	d50341df 	msr	daifset, #0x1
   a9b94:	9400068f 	bl	ab5d0 <DoChainBoot>
   a9b98:	97ffffae 	bl	a9a50 <reboot>
   a9b9c:	00000000 	udf	#0

00000000000a9ba0 <CTimer::CTimer(CInterruptSystem*)>:
   a9ba0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9ba4:	d2800022 	mov	x2, #0x1                   	// #1
   a9ba8:	910003fd 	mov	x29, sp
   a9bac:	f9000bf3 	str	x19, [sp, #16]
   a9bb0:	aa0003f3 	mov	x19, x0
   a9bb4:	91008000 	add	x0, x0, #0x20
   a9bb8:	b9000e7f 	str	wzr, [x19, #12]
   a9bbc:	b900127f 	str	wzr, [x19, #16]
   a9bc0:	f9000261 	str	x1, [x19]
   a9bc4:	b900167f 	str	wzr, [x19, #20]
   a9bc8:	f9000e62 	str	x2, [x19, #24]
   a9bcc:	97ffeccd 	bl	a4f00 <CPtrList::CPtrList()>
   a9bd0:	f9001e7f 	str	xzr, [x19, #56]
   a9bd4:	d0000060 	adrp	x0, b7000 <_etext+0x49c8>
   a9bd8:	fd413c00 	ldr	d0, [x0, #632]
   a9bdc:	b0000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   a9be0:	f9467001 	ldr	x1, [x0, #3296]
   a9be4:	52801902 	mov	w2, #0xc8                  	// #200
   a9be8:	b9003262 	str	w2, [x19, #48]
   a9bec:	b900627f 	str	wzr, [x19, #96]
   a9bf0:	fd001660 	str	d0, [x19, #40]
   a9bf4:	b50000a1 	cbnz	x1, a9c08 <CTimer::CTimer(CInterruptSystem*)+0x68>
   a9bf8:	f9067013 	str	x19, [x0, #3296]
   a9bfc:	f9400bf3 	ldr	x19, [sp, #16]
   a9c00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9c04:	d65f03c0 	ret
   a9c08:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9c0c:	b0000040 	adrp	x0, b2000 <SErrorStub+0xc>
   a9c10:	9127e021 	add	x1, x1, #0x9f8
   a9c14:	911de000 	add	x0, x0, #0x778
   a9c18:	52800802 	mov	w2, #0x40                  	// #64
   a9c1c:	97ffe0b9 	bl	a1f00 <assertion_failed>

00000000000a9c20 <CTimer::~CTimer()>:
   a9c20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9c24:	910003fd 	mov	x29, sp
   a9c28:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9c2c:	aa0003f5 	mov	x21, x0
   a9c30:	f9400000 	ldr	x0, [x0]
   a9c34:	a90153f3 	stp	x19, x20, [sp, #16]
   a9c38:	b40005e0 	cbz	x0, a9cf4 <CTimer::~CTimer()+0xd4>
   a9c3c:	d2800001 	mov	x1, #0x0                   	// #0
   a9c40:	d51be221 	msr	cntp_ctl_el0, x1
   a9c44:	52800921 	mov	w1, #0x49                  	// #73
   a9c48:	910082b5 	add	x21, x21, #0x20
   a9c4c:	940010e5 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a9c50:	5289a876 	mov	w22, #0x4d43                	// #19779
   a9c54:	72a96a96 	movk	w22, #0x4b54, lsl #16
   a9c58:	aa1503e0 	mov	x0, x21
   a9c5c:	97ffecb9 	bl	a4f40 <CPtrList::GetFirst() const>
   a9c60:	aa0003f4 	mov	x20, x0
   a9c64:	b4000220 	cbz	x0, a9ca8 <CTimer::~CTimer()+0x88>
   a9c68:	97ffecd2 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   a9c6c:	aa0003f3 	mov	x19, x0
   a9c70:	b40002a0 	cbz	x0, a9cc4 <CTimer::~CTimer()+0xa4>
   a9c74:	b9400000 	ldr	w0, [x0]
   a9c78:	6b16001f 	cmp	w0, w22
   a9c7c:	54000301 	b.ne	a9cdc <CTimer::~CTimer()+0xbc>  // b.any
   a9c80:	aa1403e1 	mov	x1, x20
   a9c84:	aa1503e0 	mov	x0, x21
   a9c88:	97ffed62 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   a9c8c:	d2800501 	mov	x1, #0x28                  	// #40
   a9c90:	aa1303e0 	mov	x0, x19
   a9c94:	940007c7 	bl	abbb0 <operator delete(void*, unsigned long)>
   a9c98:	aa1503e0 	mov	x0, x21
   a9c9c:	97ffeca9 	bl	a4f40 <CPtrList::GetFirst() const>
   a9ca0:	aa0003f4 	mov	x20, x0
   a9ca4:	b5fffe20 	cbnz	x0, a9c68 <CTimer::~CTimer()+0x48>
   a9ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9cac:	aa1503e0 	mov	x0, x21
   a9cb0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9cb4:	b0000101 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   a9cb8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9cbc:	f906703f 	str	xzr, [x1, #3296]
   a9cc0:	17ffec94 	b	a4f10 <CPtrList::~CPtrList()>
   a9cc4:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9cc8:	90000060 	adrp	x0, b5000 <_etext+0x29c8>
   a9ccc:	9127e021 	add	x1, x1, #0x9f8
   a9cd0:	91266000 	add	x0, x0, #0x998
   a9cd4:	52800ae2 	mov	w2, #0x57                  	// #87
   a9cd8:	97ffe08a 	bl	a1f00 <assertion_failed>
   a9cdc:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9ce0:	b0000060 	adrp	x0, b6000 <_etext+0x39c8>
   a9ce4:	9127e021 	add	x1, x1, #0x9f8
   a9ce8:	91282000 	add	x0, x0, #0xa08
   a9cec:	52800b02 	mov	w2, #0x58                  	// #88
   a9cf0:	97ffe084 	bl	a1f00 <assertion_failed>
   a9cf4:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9cf8:	d0000040 	adrp	x0, b3000 <_etext+0x9c8>
   a9cfc:	9127e021 	add	x1, x1, #0x9f8
   a9d00:	9103c000 	add	x0, x0, #0xf0
   a9d04:	528008c2 	mov	w2, #0x46                  	// #70
   a9d08:	97ffe07e 	bl	a1f00 <assertion_failed>
   a9d0c:	d503201f 	nop

00000000000a9d10 <CTimer::SetTimeZone(int)>:
   a9d10:	11167c22 	add	w2, w1, #0x59f
   a9d14:	712cf85f 	cmp	w2, #0xb3e
   a9d18:	54000089 	b.ls	a9d28 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   a9d1c:	52800002 	mov	w2, #0x0                   	// #0
   a9d20:	2a0203e0 	mov	w0, w2
   a9d24:	d65f03c0 	ret
   a9d28:	52800022 	mov	w2, #0x1                   	// #1
   a9d2c:	b9001c01 	str	w1, [x0, #28]
   a9d30:	2a0203e0 	mov	w0, w2
   a9d34:	d65f03c0 	ret
   a9d38:	d503201f 	nop
   a9d3c:	d503201f 	nop

00000000000a9d40 <CTimer::GetTimeZone() const>:
   a9d40:	b9401c00 	ldr	w0, [x0, #28]
   a9d44:	d65f03c0 	ret
   a9d48:	d503201f 	nop
   a9d4c:	d503201f 	nop

00000000000a9d50 <CTimer::SetTime(unsigned int, bool)>:
   a9d50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9d54:	52800784 	mov	w4, #0x3c                  	// #60
   a9d58:	910003fd 	mov	x29, sp
   a9d5c:	b9401c03 	ldr	w3, [x0, #28]
   a9d60:	a90153f3 	stp	x19, x20, [sp, #16]
   a9d64:	aa0003f3 	mov	x19, x0
   a9d68:	2a0103f4 	mov	w20, w1
   a9d6c:	1b047c63 	mul	w3, w3, w4
   a9d70:	37000062 	tbnz	w2, #0, a9d7c <CTimer::SetTime(unsigned int, bool)+0x2c>
   a9d74:	37f802e3 	tbnz	w3, #31, a9dd0 <CTimer::SetTime(unsigned int, bool)+0x80>
   a9d78:	0b030294 	add	w20, w20, w3
   a9d7c:	f9401e62 	ldr	x2, [x19, #56]
   a9d80:	b4000102 	cbz	x2, a9da0 <CTimer::SetTime(unsigned int, bool)+0x50>
   a9d84:	b9401661 	ldr	w1, [x19, #20]
   a9d88:	4b030280 	sub	w0, w20, w3
   a9d8c:	6b01007f 	cmp	w3, w1
   a9d90:	4b030021 	sub	w1, w1, w3
   a9d94:	1a9fd021 	csel	w1, w1, wzr, le
   a9d98:	d63f0040 	blr	x2
   a9d9c:	36000200 	tbz	w0, #0, a9ddc <CTimer::SetTime(unsigned int, bool)+0x8c>
   a9da0:	b9401a60 	ldr	w0, [x19, #24]
   a9da4:	35000080 	cbnz	w0, a9db4 <CTimer::SetTime(unsigned int, bool)+0x64>
   a9da8:	b9001674 	str	w20, [x19, #20]
   a9dac:	52800020 	mov	w0, #0x1                   	// #1
   a9db0:	1400000c 	b	a9de0 <CTimer::SetTime(unsigned int, bool)+0x90>
   a9db4:	94000cb3 	bl	ad080 <EnterCritical>
   a9db8:	b9001674 	str	w20, [x19, #20]
   a9dbc:	b9401a60 	ldr	w0, [x19, #24]
   a9dc0:	34ffff60 	cbz	w0, a9dac <CTimer::SetTime(unsigned int, bool)+0x5c>
   a9dc4:	94000cdf 	bl	ad140 <LeaveCritical>
   a9dc8:	52800020 	mov	w0, #0x1                   	// #1
   a9dcc:	14000005 	b	a9de0 <CTimer::SetTime(unsigned int, bool)+0x90>
   a9dd0:	4b0303e0 	neg	w0, w3
   a9dd4:	6b01001f 	cmp	w0, w1
   a9dd8:	54fffd0d 	b.le	a9d78 <CTimer::SetTime(unsigned int, bool)+0x28>
   a9ddc:	52800000 	mov	w0, #0x0                   	// #0
   a9de0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9de4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9de8:	d65f03c0 	ret
   a9dec:	d503201f 	nop

00000000000a9df0 <CTimer::GetClockTicks()>:
   a9df0:	d5033fdf 	isb
   a9df4:	d53be020 	mrs	x0, cntpct_el0
   a9df8:	d53be001 	mrs	x1, cntfrq_el0
   a9dfc:	d2884802 	mov	x2, #0x4240                	// #16960
   a9e00:	f2a001e2 	movk	x2, #0xf, lsl #16
   a9e04:	9b027c00 	mul	x0, x0, x2
   a9e08:	9ac10800 	udiv	x0, x0, x1
   a9e0c:	d65f03c0 	ret

00000000000a9e10 <CTimer::GetClockTicks64()>:
   a9e10:	d5033fdf 	isb
   a9e14:	d53be020 	mrs	x0, cntpct_el0
   a9e18:	d53be001 	mrs	x1, cntfrq_el0
   a9e1c:	d2884802 	mov	x2, #0x4240                	// #16960
   a9e20:	f2a001e2 	movk	x2, #0xf, lsl #16
   a9e24:	9b027c00 	mul	x0, x0, x2
   a9e28:	9ac10800 	udiv	x0, x0, x1
   a9e2c:	d65f03c0 	ret

00000000000a9e30 <CTimer::GetTicks() const>:
   a9e30:	b9400c00 	ldr	w0, [x0, #12]
   a9e34:	d65f03c0 	ret
   a9e38:	d503201f 	nop
   a9e3c:	d503201f 	nop

00000000000a9e40 <CTimer::GetUptime() const>:
   a9e40:	b9401000 	ldr	w0, [x0, #16]
   a9e44:	d65f03c0 	ret
   a9e48:	d503201f 	nop
   a9e4c:	d503201f 	nop

00000000000a9e50 <CTimer::GetTime() const>:
   a9e50:	b9401400 	ldr	w0, [x0, #20]
   a9e54:	d65f03c0 	ret
   a9e58:	d503201f 	nop
   a9e5c:	d503201f 	nop

00000000000a9e60 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   a9e60:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a9e64:	910003fd 	mov	x29, sp
   a9e68:	a90153f3 	stp	x19, x20, [sp, #16]
   a9e6c:	aa0003f3 	mov	x19, x0
   a9e70:	b9401800 	ldr	w0, [x0, #24]
   a9e74:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9e78:	aa0103f4 	mov	x20, x1
   a9e7c:	aa0203f5 	mov	x21, x2
   a9e80:	f9001bf7 	str	x23, [sp, #48]
   a9e84:	350002a0 	cbnz	w0, a9ed8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   a9e88:	b9401677 	ldr	w23, [x19, #20]
   a9e8c:	b9400e76 	ldr	w22, [x19, #12]
   a9e90:	b4000334 	cbz	x20, a9ef4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   a9e94:	b9000297 	str	w23, [x20]
   a9e98:	b40003b5 	cbz	x21, a9f0c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   a9e9c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   a9ea0:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   a9ea4:	52800c82 	mov	w2, #0x64                  	// #100
   a9ea8:	5284e201 	mov	w1, #0x2710                	// #10000
   a9eac:	9ba07ec0 	umull	x0, w22, w0
   a9eb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9eb4:	d365fc00 	lsr	x0, x0, #37
   a9eb8:	f9401bf7 	ldr	x23, [sp, #48]
   a9ebc:	1b02d800 	msub	w0, w0, w2, w22
   a9ec0:	1b017c00 	mul	w0, w0, w1
   a9ec4:	b90002a0 	str	w0, [x21]
   a9ec8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9ecc:	52800020 	mov	w0, #0x1                   	// #1
   a9ed0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a9ed4:	d65f03c0 	ret
   a9ed8:	94000c6a 	bl	ad080 <EnterCritical>
   a9edc:	b9401677 	ldr	w23, [x19, #20]
   a9ee0:	b9401a60 	ldr	w0, [x19, #24]
   a9ee4:	b9400e76 	ldr	w22, [x19, #12]
   a9ee8:	34fffd40 	cbz	w0, a9e90 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   a9eec:	94000c95 	bl	ad140 <LeaveCritical>
   a9ef0:	b5fffd34 	cbnz	x20, a9e94 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   a9ef4:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9ef8:	b0000060 	adrp	x0, b6000 <_etext+0x39c8>
   a9efc:	9127e021 	add	x1, x1, #0x9f8
   a9f00:	9128c000 	add	x0, x0, #0xa30
   a9f04:	52802602 	mov	w2, #0x130                 	// #304
   a9f08:	97ffdffe 	bl	a1f00 <assertion_failed>
   a9f0c:	b0000061 	adrp	x1, b6000 <_etext+0x39c8>
   a9f10:	b0000060 	adrp	x0, b6000 <_etext+0x39c8>
   a9f14:	9127e021 	add	x1, x1, #0x9f8
   a9f18:	91290000 	add	x0, x0, #0xa40
   a9f1c:	52802662 	mov	w2, #0x133                 	// #307
   a9f20:	97ffdff8 	bl	a1f00 <assertion_failed>
   a9f24:	d503201f 	nop
   a9f28:	d503201f 	nop
   a9f2c:	d503201f 	nop

00000000000a9f30 <CTimer::GetUniversalTime() const>:
   a9f30:	b9401c01 	ldr	w1, [x0, #28]
   a9f34:	52800782 	mov	w2, #0x3c                  	// #60
   a9f38:	b9401400 	ldr	w0, [x0, #20]
   a9f3c:	1b027c21 	mul	w1, w1, w2
   a9f40:	6b010000 	subs	w0, w0, w1
   a9f44:	1a9fa000 	csel	w0, w0, wzr, ge	// ge = tcont
   a9f48:	d65f03c0 	ret
   a9f4c:	d503201f 	nop

00000000000a9f50 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   a9f50:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a9f54:	910003fd 	mov	x29, sp
   a9f58:	a90153f3 	stp	x19, x20, [sp, #16]
   a9f5c:	aa0003f3 	mov	x19, x0
   a9f60:	b9401800 	ldr	w0, [x0, #24]
   a9f64:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9f68:	aa0103f4 	mov	x20, x1
   a9f6c:	aa0203f5 	mov	x21, x2
   a9f70:	f9001bf7 	str	x23, [sp, #48]
   a9f74:	35000420 	cbnz	w0, a9ff8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa8>
   a9f78:	b9401676 	ldr	w22, [x19, #20]
   a9f7c:	b9400e77 	ldr	w23, [x19, #12]
   a9f80:	b9401e60 	ldr	w0, [x19, #28]
   a9f84:	52800781 	mov	w1, #0x3c                  	// #60
   a9f88:	1b017c00 	mul	w0, w0, w1
   a9f8c:	6b0002df 	cmp	w22, w0
   a9f90:	5400028b 	b.lt	a9fe0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x90>  // b.tstop
   a9f94:	b4000414 	cbz	x20, aa014 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc4>
   a9f98:	4b0002d6 	sub	w22, w22, w0
   a9f9c:	b9000296 	str	w22, [x20]
   a9fa0:	b4000475 	cbz	x21, aa02c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   a9fa4:	5290a3e1 	mov	w1, #0x851f                	// #34079
   a9fa8:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   a9fac:	52800c83 	mov	w3, #0x64                  	// #100
   a9fb0:	5284e202 	mov	w2, #0x2710                	// #10000
   a9fb4:	9ba17ee1 	umull	x1, w23, w1
   a9fb8:	52800020 	mov	w0, #0x1                   	// #1
   a9fbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9fc0:	d365fc21 	lsr	x1, x1, #37
   a9fc4:	1b03dc21 	msub	w1, w1, w3, w23
   a9fc8:	f9401bf7 	ldr	x23, [sp, #48]
   a9fcc:	1b027c21 	mul	w1, w1, w2
   a9fd0:	b90002a1 	str	w1, [x21]
   a9fd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9fd8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a9fdc:	d65f03c0 	ret
   a9fe0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9fe4:	52800000 	mov	w0, #0x0                   	// #0
   a9fe8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9fec:	f9401bf7 	ldr	x23, [sp, #48]
   a9ff0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a9ff4:	d65f03c0 	ret
   a9ff8:	94000c22 	bl	ad080 <EnterCritical>
   a9ffc:	b9401676 	ldr	w22, [x19, #20]
   aa000:	b9401a60 	ldr	w0, [x19, #24]
   aa004:	b9400e77 	ldr	w23, [x19, #12]
   aa008:	34fffbc0 	cbz	w0, a9f80 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   aa00c:	94000c4d 	bl	ad140 <LeaveCritical>
   aa010:	17ffffdc 	b	a9f80 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   aa014:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa018:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa01c:	9127e021 	add	x1, x1, #0x9f8
   aa020:	9128c000 	add	x0, x0, #0xa30
   aa024:	52802aa2 	mov	w2, #0x155                 	// #341
   aa028:	97ffdfb6 	bl	a1f00 <assertion_failed>
   aa02c:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa030:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa034:	9127e021 	add	x1, x1, #0x9f8
   aa038:	91290000 	add	x0, x0, #0xa40
   aa03c:	52802b02 	mov	w2, #0x158                 	// #344
   aa040:	97ffdfb0 	bl	a1f00 <assertion_failed>
   aa044:	d503201f 	nop
   aa048:	d503201f 	nop
   aa04c:	d503201f 	nop

00000000000aa050 <CTimer::GetTimeString()>:
   aa050:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   aa054:	910003fd 	mov	x29, sp
   aa058:	a90153f3 	stp	x19, x20, [sp, #16]
   aa05c:	aa0003f3 	mov	x19, x0
   aa060:	b9401800 	ldr	w0, [x0, #24]
   aa064:	a9025bf5 	stp	x21, x22, [sp, #32]
   aa068:	a9046bf9 	stp	x25, x26, [sp, #64]
   aa06c:	35000dc0 	cbnz	w0, aa224 <CTimer::GetTimeString()+0x1d4>
   aa070:	b9401675 	ldr	w21, [x19, #20]
   aa074:	b9400e7a 	ldr	w26, [x19, #12]
   aa078:	2a1a02a0 	orr	w0, w21, w26
   aa07c:	34000e40 	cbz	w0, aa244 <CTimer::GetTimeString()+0x1f4>
   aa080:	52911136 	mov	w22, #0x8889                	// #34953
   aa084:	72b11116 	movk	w22, #0x8888, lsl #16
   aa088:	a90363f7 	stp	x23, x24, [sp, #48]
   aa08c:	52955573 	mov	w19, #0xaaab                	// #43691
   aa090:	72b55553 	movk	w19, #0xaaaa, lsl #16
   aa094:	9bb67eb9 	umull	x25, w21, w22
   aa098:	52800780 	mov	w0, #0x3c                  	// #60
   aa09c:	528b8527 	mov	w7, #0x5c29                	// #23593
   aa0a0:	72b851e7 	movk	w7, #0xc28f, lsl #16
   aa0a4:	528b8505 	mov	w5, #0x5c28                	// #23592
   aa0a8:	72a051e5 	movk	w5, #0x28f, lsl #16
   aa0ac:	d365ff21 	lsr	x1, x25, #37
   aa0b0:	529ae143 	mov	w3, #0xd70a                	// #55050
   aa0b4:	72a01463 	movk	w3, #0xa3, lsl #16
   aa0b8:	5280f654 	mov	w20, #0x7b2                 	// #1970
   aa0bc:	9bb67c36 	umull	x22, w1, w22
   aa0c0:	1b00d439 	msub	w25, w1, w0, w21
   aa0c4:	d365fed8 	lsr	x24, x22, #37
   aa0c8:	9bb37f13 	umull	x19, w24, w19
   aa0cc:	1b008716 	msub	w22, w24, w0, w1
   aa0d0:	d364fe73 	lsr	x19, x19, #36
   aa0d4:	14000008 	b	aa0f4 <CTimer::GetTimeString()+0xa4>
   aa0d8:	7100005f 	cmp	w2, #0x0
   aa0dc:	1a9f17e0 	cset	w0, eq	// eq = none
   aa0e0:	1105b401 	add	w1, w0, #0x16d
   aa0e4:	6b01027f 	cmp	w19, w1
   aa0e8:	540001c3 	b.cc	aa120 <CTimer::GetTimeString()+0xd0>  // b.lo, b.ul, b.last
   aa0ec:	4b010273 	sub	w19, w19, w1
   aa0f0:	11000694 	add	w20, w20, #0x1
   aa0f4:	1b077e80 	mul	w0, w20, w7
   aa0f8:	12000682 	and	w2, w20, #0x3
   aa0fc:	13800801 	ror	w1, w0, #2
   aa100:	6b05003f 	cmp	w1, w5
   aa104:	54fffea8 	b.hi	aa0d8 <CTimer::GetTimeString()+0x88>  // b.pmore
   aa108:	13801000 	ror	w0, w0, #4
   aa10c:	6b03001f 	cmp	w0, w3
   aa110:	1a9f87e0 	cset	w0, ls	// ls = plast
   aa114:	1105b401 	add	w1, w0, #0x16d
   aa118:	6b01027f 	cmp	w19, w1
   aa11c:	54fffe82 	b.cs	aa0ec <CTimer::GetTimeString()+0x9c>  // b.hs, b.nlast
   aa120:	b0000082 	adrp	x2, bb000 <s_ActLEDInfo+0x1f0>
   aa124:	910c8042 	add	x2, x2, #0x320
   aa128:	52800015 	mov	w21, #0x0                   	// #0
   aa12c:	14000003 	b	aa138 <CTimer::GetTimeString()+0xe8>
   aa130:	4b010273 	sub	w19, w19, w1
   aa134:	110006b5 	add	w21, w21, #0x1
   aa138:	7100001f 	cmp	w0, #0x0
   aa13c:	7a411aa0 	ccmp	w21, #0x1, #0x0, ne	// ne = any
   aa140:	540003e0 	b.eq	aa1bc <CTimer::GetTimeString()+0x16c>  // b.none
   aa144:	b8755841 	ldr	w1, [x2, w21, uxtw #2]
   aa148:	6b01027f 	cmp	w19, w1
   aa14c:	54ffff22 	b.cs	aa130 <CTimer::GetTimeString()+0xe0>  // b.hs, b.nlast
   aa150:	5290a3f7 	mov	w23, #0x851f                	// #34079
   aa154:	72aa3d77 	movk	w23, #0x51eb, lsl #16
   aa158:	52800c81 	mov	w1, #0x64                  	// #100
   aa15c:	d2800400 	mov	x0, #0x20                  	// #32
   aa160:	9bb77f57 	umull	x23, w26, w23
   aa164:	d365fef7 	lsr	x23, x23, #37
   aa168:	1b01eaf7 	msub	w23, w23, w1, w26
   aa16c:	94000671 	bl	abb30 <operator new(unsigned long)>
   aa170:	aa0003fa 	mov	x26, x0
   aa174:	97fff7eb 	bl	a8120 <CString::CString()>
   aa178:	711ede9f 	cmp	w20, #0x7b7
   aa17c:	54000248 	b.hi	aa1c4 <CTimer::GetTimeString()+0x174>  // b.pmore
   aa180:	2a1703e5 	mov	w5, w23
   aa184:	2a1903e4 	mov	w4, w25
   aa188:	2a1603e3 	mov	w3, w22
   aa18c:	2a1803e2 	mov	w2, w24
   aa190:	aa1a03e0 	mov	x0, x26
   aa194:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa198:	9129e021 	add	x1, x1, #0xa78
   aa19c:	97fffde9 	bl	a9940 <CString::Format(char const*, ...)>
   aa1a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa1a4:	aa1a03e0 	mov	x0, x26
   aa1a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa1ac:	a94363f7 	ldp	x23, x24, [sp, #48]
   aa1b0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   aa1b4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aa1b8:	d65f03c0 	ret
   aa1bc:	528003a1 	mov	w1, #0x1d                  	// #29
   aa1c0:	17ffffe2 	b	aa148 <CTimer::GetTimeString()+0xf8>
   aa1c4:	52955564 	mov	w4, #0xaaab                	// #43691
   aa1c8:	72b55544 	movk	w4, #0xaaaa, lsl #16
   aa1cc:	90000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   aa1d0:	91270000 	add	x0, x0, #0x9c0
   aa1d4:	9ba47f04 	umull	x4, w24, w4
   aa1d8:	52800308 	mov	w8, #0x18                  	// #24
   aa1dc:	2a1703e7 	mov	w7, w23
   aa1e0:	2a1903e6 	mov	w6, w25
   aa1e4:	f8755802 	ldr	x2, [x0, w21, uxtw #3]
   aa1e8:	d364fc84 	lsr	x4, x4, #36
   aa1ec:	2a1603e5 	mov	w5, w22
   aa1f0:	11000663 	add	w3, w19, #0x1
   aa1f4:	aa1a03e0 	mov	x0, x26
   aa1f8:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa1fc:	1b08e084 	msub	w4, w4, w8, w24
   aa200:	91296021 	add	x1, x1, #0xa58
   aa204:	97fffdcf 	bl	a9940 <CString::Format(char const*, ...)>
   aa208:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa20c:	aa1a03e0 	mov	x0, x26
   aa210:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa214:	a94363f7 	ldp	x23, x24, [sp, #48]
   aa218:	a9446bf9 	ldp	x25, x26, [sp, #64]
   aa21c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aa220:	d65f03c0 	ret
   aa224:	94000b97 	bl	ad080 <EnterCritical>
   aa228:	b9401675 	ldr	w21, [x19, #20]
   aa22c:	b9401a60 	ldr	w0, [x19, #24]
   aa230:	b9400e7a 	ldr	w26, [x19, #12]
   aa234:	34fff220 	cbz	w0, aa078 <CTimer::GetTimeString()+0x28>
   aa238:	94000bc2 	bl	ad140 <LeaveCritical>
   aa23c:	2a1a02a0 	orr	w0, w21, w26
   aa240:	35fff200 	cbnz	w0, aa080 <CTimer::GetTimeString()+0x30>
   aa244:	d280001a 	mov	x26, #0x0                   	// #0
   aa248:	aa1a03e0 	mov	x0, x26
   aa24c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa250:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa254:	a9446bf9 	ldp	x25, x26, [sp, #64]
   aa258:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aa25c:	d65f03c0 	ret

00000000000aa260 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   aa260:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   aa264:	910003fd 	mov	x29, sp
   aa268:	a9025bf5 	stp	x21, x22, [sp, #32]
   aa26c:	aa0003f6 	mov	x22, x0
   aa270:	d2800500 	mov	x0, #0x28                  	// #40
   aa274:	a90153f3 	stp	x19, x20, [sp, #16]
   aa278:	aa0203f3 	mov	x19, x2
   aa27c:	a90363f7 	stp	x23, x24, [sp, #48]
   aa280:	2a0103f7 	mov	w23, w1
   aa284:	aa0303f8 	mov	x24, x3
   aa288:	f90023f9 	str	x25, [sp, #64]
   aa28c:	aa0403f9 	mov	x25, x4
   aa290:	94000628 	bl	abb30 <operator new(unsigned long)>
   aa294:	b9400ed5 	ldr	w21, [x22, #12]
   aa298:	0b1702b5 	add	w21, w21, w23
   aa29c:	b4000793 	cbz	x19, aa38c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x12c>
   aa2a0:	aa0003f4 	mov	x20, x0
   aa2a4:	b9402ac0 	ldr	w0, [x22, #40]
   aa2a8:	5289a861 	mov	w1, #0x4d43                	// #19779
   aa2ac:	72a96a81 	movk	w1, #0x4b54, lsl #16
   aa2b0:	b9000281 	str	w1, [x20]
   aa2b4:	f9000693 	str	x19, [x20, #8]
   aa2b8:	b9001295 	str	w21, [x20, #16]
   aa2bc:	a901e698 	stp	x24, x25, [x20, #24]
   aa2c0:	350004c0 	cbnz	w0, aa358 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xf8>
   aa2c4:	910082d7 	add	x23, x22, #0x20
   aa2c8:	aa1703e0 	mov	x0, x23
   aa2cc:	97ffeb1d 	bl	a4f40 <CPtrList::GetFirst() const>
   aa2d0:	aa0003f3 	mov	x19, x0
   aa2d4:	b40006c0 	cbz	x0, aa3ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   aa2d8:	5289a878 	mov	w24, #0x4d43                	// #19779
   aa2dc:	72a96a98 	movk	w24, #0x4b54, lsl #16
   aa2e0:	aa1303e0 	mov	x0, x19
   aa2e4:	97ffeb33 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   aa2e8:	b4000200 	cbz	x0, aa328 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xc8>
   aa2ec:	b9400001 	ldr	w1, [x0]
   aa2f0:	6b18003f 	cmp	w1, w24
   aa2f4:	54000261 	b.ne	aa340 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe0>  // b.any
   aa2f8:	b9401000 	ldr	w0, [x0, #16]
   aa2fc:	aa1303e1 	mov	x1, x19
   aa300:	4b150000 	sub	w0, w0, w21
   aa304:	7100001f 	cmp	w0, #0x0
   aa308:	aa1703e0 	mov	x0, x23
   aa30c:	540002ac 	b.gt	aa360 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   aa310:	97ffeb10 	bl	a4f50 <CPtrList::GetNext(TPtrListElement*) const>
   aa314:	b40004c0 	cbz	x0, aa3ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   aa318:	aa0003f3 	mov	x19, x0
   aa31c:	aa1303e0 	mov	x0, x19
   aa320:	97ffeb24 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   aa324:	b5fffe40 	cbnz	x0, aa2ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x8c>
   aa328:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa32c:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa330:	9127e021 	add	x1, x1, #0x9f8
   aa334:	912a4000 	add	x0, x0, #0xa90
   aa338:	528037e2 	mov	w2, #0x1bf                 	// #447
   aa33c:	97ffdef1 	bl	a1f00 <assertion_failed>
   aa340:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa344:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa348:	9127e021 	add	x1, x1, #0x9f8
   aa34c:	912a8000 	add	x0, x0, #0xaa0
   aa350:	52803802 	mov	w2, #0x1c0                 	// #448
   aa354:	97ffdeeb 	bl	a1f00 <assertion_failed>
   aa358:	94000b4a 	bl	ad080 <EnterCritical>
   aa35c:	17ffffda 	b	aa2c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x64>
   aa360:	aa1403e2 	mov	x2, x20
   aa364:	97ffeb2b 	bl	a5010 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   aa368:	b9402ac0 	ldr	w0, [x22, #40]
   aa36c:	350001c0 	cbnz	w0, aa3a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x144>
   aa370:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa374:	aa1403e0 	mov	x0, x20
   aa378:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa37c:	a94363f7 	ldp	x23, x24, [sp, #48]
   aa380:	f94023f9 	ldr	x25, [sp, #64]
   aa384:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aa388:	d65f03c0 	ret
   aa38c:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa390:	b0000060 	adrp	x0, b7000 <_etext+0x49c8>
   aa394:	9127e021 	add	x1, x1, #0x9f8
   aa398:	91006000 	add	x0, x0, #0x18
   aa39c:	528035e2 	mov	w2, #0x1af                 	// #431
   aa3a0:	97ffded8 	bl	a1f00 <assertion_failed>
   aa3a4:	94000b67 	bl	ad140 <LeaveCritical>
   aa3a8:	17fffff2 	b	aa370 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x110>
   aa3ac:	aa1303e1 	mov	x1, x19
   aa3b0:	aa1703e0 	mov	x0, x23
   aa3b4:	aa1403e2 	mov	x2, x20
   aa3b8:	97ffeb56 	bl	a5110 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   aa3bc:	17ffffeb 	b	aa368 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x108>

00000000000aa3c0 <CTimer::CancelKernelTimer(unsigned long)>:
   aa3c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa3c4:	910003fd 	mov	x29, sp
   aa3c8:	a90153f3 	stp	x19, x20, [sp, #16]
   aa3cc:	f90013f5 	str	x21, [sp, #32]
   aa3d0:	b4000421 	cbz	x1, aa454 <CTimer::CancelKernelTimer(unsigned long)+0x94>
   aa3d4:	aa0003f4 	mov	x20, x0
   aa3d8:	b9402800 	ldr	w0, [x0, #40]
   aa3dc:	aa0103f3 	mov	x19, x1
   aa3e0:	350002e0 	cbnz	w0, aa43c <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   aa3e4:	aa1303e1 	mov	x1, x19
   aa3e8:	91008295 	add	x21, x20, #0x20
   aa3ec:	aa1503e0 	mov	x0, x21
   aa3f0:	97ffebd4 	bl	a5340 <CPtrList::Find(void*) const>
   aa3f4:	aa0003e1 	mov	x1, x0
   aa3f8:	b4000160 	cbz	x0, aa424 <CTimer::CancelKernelTimer(unsigned long)+0x64>
   aa3fc:	b9400262 	ldr	w2, [x19]
   aa400:	5289a860 	mov	w0, #0x4d43                	// #19779
   aa404:	72a96a80 	movk	w0, #0x4b54, lsl #16
   aa408:	6b00005f 	cmp	w2, w0
   aa40c:	54000301 	b.ne	aa46c <CTimer::CancelKernelTimer(unsigned long)+0xac>  // b.any
   aa410:	aa1503e0 	mov	x0, x21
   aa414:	97ffeb7f 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   aa418:	aa1303e0 	mov	x0, x19
   aa41c:	d2800501 	mov	x1, #0x28                  	// #40
   aa420:	940005e4 	bl	abbb0 <operator delete(void*, unsigned long)>
   aa424:	b9402a80 	ldr	w0, [x20, #40]
   aa428:	350000e0 	cbnz	w0, aa444 <CTimer::CancelKernelTimer(unsigned long)+0x84>
   aa42c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa430:	f94013f5 	ldr	x21, [sp, #32]
   aa434:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa438:	d65f03c0 	ret
   aa43c:	94000b11 	bl	ad080 <EnterCritical>
   aa440:	17ffffe9 	b	aa3e4 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   aa444:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa448:	f94013f5 	ldr	x21, [sp, #32]
   aa44c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa450:	14000b3c 	b	ad140 <LeaveCritical>
   aa454:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa458:	f0000040 	adrp	x0, b5000 <_etext+0x29c8>
   aa45c:	9127e021 	add	x1, x1, #0x9f8
   aa460:	91266000 	add	x0, x0, #0x998
   aa464:	52803b82 	mov	w2, #0x1dc                 	// #476
   aa468:	97ffdea6 	bl	a1f00 <assertion_failed>
   aa46c:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa470:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa474:	9127e021 	add	x1, x1, #0x9f8
   aa478:	91282000 	add	x0, x0, #0xa08
   aa47c:	52803c62 	mov	w2, #0x1e3                 	// #483
   aa480:	97ffdea0 	bl	a1f00 <assertion_failed>
   aa484:	d503201f 	nop
   aa488:	d503201f 	nop
   aa48c:	d503201f 	nop

00000000000aa490 <CTimer::PollKernelTimers()>:
   aa490:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aa494:	910003fd 	mov	x29, sp
   aa498:	a9025bf5 	stp	x21, x22, [sp, #32]
   aa49c:	aa0003f5 	mov	x21, x0
   aa4a0:	b9402800 	ldr	w0, [x0, #40]
   aa4a4:	a90153f3 	stp	x19, x20, [sp, #16]
   aa4a8:	f9001bf7 	str	x23, [sp, #48]
   aa4ac:	350005a0 	cbnz	w0, aa560 <CTimer::PollKernelTimers()+0xd0>
   aa4b0:	910082b6 	add	x22, x21, #0x20
   aa4b4:	5289a877 	mov	w23, #0x4d43                	// #19779
   aa4b8:	72a96a97 	movk	w23, #0x4b54, lsl #16
   aa4bc:	aa1603e0 	mov	x0, x22
   aa4c0:	97ffeaa0 	bl	a4f40 <CPtrList::GetFirst() const>
   aa4c4:	aa0003f4 	mov	x20, x0
   aa4c8:	b4000680 	cbz	x0, aa598 <CTimer::PollKernelTimers()+0x108>
   aa4cc:	97ffeab9 	bl	a4fb0 <CPtrList::GetPtr(TPtrListElement*)>
   aa4d0:	aa0003f3 	mov	x19, x0
   aa4d4:	b40004a0 	cbz	x0, aa568 <CTimer::PollKernelTimers()+0xd8>
   aa4d8:	b9400000 	ldr	w0, [x0]
   aa4dc:	6b17001f 	cmp	w0, w23
   aa4e0:	54000501 	b.ne	aa580 <CTimer::PollKernelTimers()+0xf0>  // b.any
   aa4e4:	b9400ea1 	ldr	w1, [x21, #12]
   aa4e8:	b9401260 	ldr	w0, [x19, #16]
   aa4ec:	4b010000 	sub	w0, w0, w1
   aa4f0:	7100001f 	cmp	w0, #0x0
   aa4f4:	5400052c 	b.gt	aa598 <CTimer::PollKernelTimers()+0x108>
   aa4f8:	aa1603e0 	mov	x0, x22
   aa4fc:	aa1403e1 	mov	x1, x20
   aa500:	97ffeb44 	bl	a5210 <CPtrList::Remove(TPtrListElement*)>
   aa504:	b9402aa0 	ldr	w0, [x21, #40]
   aa508:	350001a0 	cbnz	w0, aa53c <CTimer::PollKernelTimers()+0xac>
   aa50c:	f9400663 	ldr	x3, [x19, #8]
   aa510:	b40001c3 	cbz	x3, aa548 <CTimer::PollKernelTimers()+0xb8>
   aa514:	a9418a61 	ldp	x1, x2, [x19, #24]
   aa518:	aa1303e0 	mov	x0, x19
   aa51c:	d63f0060 	blr	x3
   aa520:	aa1303e0 	mov	x0, x19
   aa524:	d2800501 	mov	x1, #0x28                  	// #40
   aa528:	940005a2 	bl	abbb0 <operator delete(void*, unsigned long)>
   aa52c:	b9402aa0 	ldr	w0, [x21, #40]
   aa530:	34fffc60 	cbz	w0, aa4bc <CTimer::PollKernelTimers()+0x2c>
   aa534:	94000ad3 	bl	ad080 <EnterCritical>
   aa538:	17ffffe1 	b	aa4bc <CTimer::PollKernelTimers()+0x2c>
   aa53c:	94000b01 	bl	ad140 <LeaveCritical>
   aa540:	f9400663 	ldr	x3, [x19, #8]
   aa544:	b5fffe83 	cbnz	x3, aa514 <CTimer::PollKernelTimers()+0x84>
   aa548:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa54c:	b0000060 	adrp	x0, b7000 <_etext+0x49c8>
   aa550:	9127e021 	add	x1, x1, #0x9f8
   aa554:	91006000 	add	x0, x0, #0x18
   aa558:	528040a2 	mov	w2, #0x205                 	// #517
   aa55c:	97ffde69 	bl	a1f00 <assertion_failed>
   aa560:	94000ac8 	bl	ad080 <EnterCritical>
   aa564:	17ffffd3 	b	aa4b0 <CTimer::PollKernelTimers()+0x20>
   aa568:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa56c:	f0000040 	adrp	x0, b5000 <_etext+0x29c8>
   aa570:	9127e021 	add	x1, x1, #0x9f8
   aa574:	91266000 	add	x0, x0, #0x998
   aa578:	52803f02 	mov	w2, #0x1f8                 	// #504
   aa57c:	97ffde61 	bl	a1f00 <assertion_failed>
   aa580:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa584:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa588:	9127e021 	add	x1, x1, #0x9f8
   aa58c:	91282000 	add	x0, x0, #0xa08
   aa590:	52803f22 	mov	w2, #0x1f9                 	// #505
   aa594:	97ffde5b 	bl	a1f00 <assertion_failed>
   aa598:	b9402aa0 	ldr	w0, [x21, #40]
   aa59c:	350000c0 	cbnz	w0, aa5b4 <CTimer::PollKernelTimers()+0x124>
   aa5a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa5a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa5a8:	f9401bf7 	ldr	x23, [sp, #48]
   aa5ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aa5b0:	d65f03c0 	ret
   aa5b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa5b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa5bc:	f9401bf7 	ldr	x23, [sp, #48]
   aa5c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aa5c4:	14000adf 	b	ad140 <LeaveCritical>
   aa5c8:	d503201f 	nop
   aa5cc:	d503201f 	nop

00000000000aa5d0 <CTimer::InterruptHandler()>:
   aa5d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa5d4:	910003fd 	mov	x29, sp
   aa5d8:	a90153f3 	stp	x19, x20, [sp, #16]
   aa5dc:	aa0003f4 	mov	x20, x0
   aa5e0:	f90013f5 	str	x21, [sp, #32]
   aa5e4:	d53be241 	mrs	x1, cntp_cval_el0
   aa5e8:	b9400800 	ldr	w0, [x0, #8]
   aa5ec:	8b010000 	add	x0, x0, x1
   aa5f0:	d51be240 	msr	cntp_cval_el0, x0
   aa5f4:	b9401a80 	ldr	w0, [x20, #24]
   aa5f8:	35000460 	cbnz	w0, aa684 <CTimer::InterruptHandler()+0xb4>
   aa5fc:	b9400e80 	ldr	w0, [x20, #12]
   aa600:	528b8522 	mov	w2, #0x5c29                	// #23593
   aa604:	72b851e2 	movk	w2, #0xc28f, lsl #16
   aa608:	528b8501 	mov	w1, #0x5c28                	// #23592
   aa60c:	72a051e1 	movk	w1, #0x28f, lsl #16
   aa610:	11000400 	add	w0, w0, #0x1
   aa614:	b9000e80 	str	w0, [x20, #12]
   aa618:	1b027c00 	mul	w0, w0, w2
   aa61c:	13800800 	ror	w0, w0, #2
   aa620:	6b01001f 	cmp	w0, w1
   aa624:	54000229 	b.ls	aa668 <CTimer::InterruptHandler()+0x98>  // b.plast
   aa628:	aa1403e0 	mov	x0, x20
   aa62c:	97ffff99 	bl	aa490 <CTimer::PollKernelTimers()>
   aa630:	b9406280 	ldr	w0, [x20, #96]
   aa634:	91010295 	add	x21, x20, #0x40
   aa638:	d2800013 	mov	x19, #0x0                   	// #0
   aa63c:	340000e0 	cbz	w0, aa658 <CTimer::InterruptHandler()+0x88>
   aa640:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   aa644:	91000673 	add	x19, x19, #0x1
   aa648:	d63f0000 	blr	x0
   aa64c:	b9406280 	ldr	w0, [x20, #96]
   aa650:	6b13001f 	cmp	w0, w19
   aa654:	54ffff68 	b.hi	aa640 <CTimer::InterruptHandler()+0x70>  // b.pmore
   aa658:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa65c:	f94013f5 	ldr	x21, [sp, #32]
   aa660:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa664:	d65f03c0 	ret
   aa668:	b9401280 	ldr	w0, [x20, #16]
   aa66c:	11000400 	add	w0, w0, #0x1
   aa670:	b9001280 	str	w0, [x20, #16]
   aa674:	b9401680 	ldr	w0, [x20, #20]
   aa678:	11000400 	add	w0, w0, #0x1
   aa67c:	b9001680 	str	w0, [x20, #20]
   aa680:	17ffffea 	b	aa628 <CTimer::InterruptHandler()+0x58>
   aa684:	94000a7f 	bl	ad080 <EnterCritical>
   aa688:	b9400e80 	ldr	w0, [x20, #12]
   aa68c:	528b8523 	mov	w3, #0x5c29                	// #23593
   aa690:	72b851e3 	movk	w3, #0xc28f, lsl #16
   aa694:	528b8502 	mov	w2, #0x5c28                	// #23592
   aa698:	72a051e2 	movk	w2, #0x28f, lsl #16
   aa69c:	11000400 	add	w0, w0, #0x1
   aa6a0:	b9000e80 	str	w0, [x20, #12]
   aa6a4:	b9401a81 	ldr	w1, [x20, #24]
   aa6a8:	1b037c00 	mul	w0, w0, w3
   aa6ac:	13800800 	ror	w0, w0, #2
   aa6b0:	6b02001f 	cmp	w0, w2
   aa6b4:	54000089 	b.ls	aa6c4 <CTimer::InterruptHandler()+0xf4>  // b.plast
   aa6b8:	34fffb81 	cbz	w1, aa628 <CTimer::InterruptHandler()+0x58>
   aa6bc:	94000aa1 	bl	ad140 <LeaveCritical>
   aa6c0:	17ffffda 	b	aa628 <CTimer::InterruptHandler()+0x58>
   aa6c4:	b9401280 	ldr	w0, [x20, #16]
   aa6c8:	11000400 	add	w0, w0, #0x1
   aa6cc:	b9001280 	str	w0, [x20, #16]
   aa6d0:	b9401680 	ldr	w0, [x20, #20]
   aa6d4:	11000400 	add	w0, w0, #0x1
   aa6d8:	b9001680 	str	w0, [x20, #20]
   aa6dc:	17fffff7 	b	aa6b8 <CTimer::InterruptHandler()+0xe8>

00000000000aa6e0 <CTimer::InterruptHandler(void*)>:
   aa6e0:	b4000040 	cbz	x0, aa6e8 <CTimer::InterruptHandler(void*)+0x8>
   aa6e4:	17ffffbb 	b	aa5d0 <CTimer::InterruptHandler()>
   aa6e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa6ec:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa6f0:	90000040 	adrp	x0, b2000 <SErrorStub+0xc>
   aa6f4:	910003fd 	mov	x29, sp
   aa6f8:	9127e021 	add	x1, x1, #0x9f8
   aa6fc:	91288000 	add	x0, x0, #0xa20
   aa700:	52804982 	mov	w2, #0x24c                 	// #588
   aa704:	97ffddff 	bl	a1f00 <assertion_failed>
   aa708:	d503201f 	nop
   aa70c:	d503201f 	nop

00000000000aa710 <CTimer::TuneMsDelay()>:
   aa710:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa714:	52807d01 	mov	w1, #0x3e8                 	// #1000
   aa718:	910003fd 	mov	x29, sp
   aa71c:	a90153f3 	stp	x19, x20, [sp, #16]
   aa720:	aa0003f3 	mov	x19, x0
   aa724:	b9400c14 	ldr	w20, [x0, #12]
   aa728:	b9402c00 	ldr	w0, [x0, #44]
   aa72c:	f90013f5 	str	x21, [sp, #32]
   aa730:	5284e215 	mov	w21, #0x2710                	// #10000
   aa734:	1b017c00 	mul	w0, w0, w1
   aa738:	940017d2 	bl	b0680 <DelayLoop>
   aa73c:	b9400e60 	ldr	w0, [x19, #12]
   aa740:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   aa744:	72a20c42 	movk	w2, #0x1062, lsl #16
   aa748:	b9402e61 	ldr	w1, [x19, #44]
   aa74c:	4b140000 	sub	w0, w0, w20
   aa750:	5290a3f4 	mov	w20, #0x851f                	// #34079
   aa754:	72aa3d74 	movk	w20, #0x51eb, lsl #16
   aa758:	1ac00ab5 	udiv	w21, w21, w0
   aa75c:	1b017ea1 	mul	w1, w21, w1
   aa760:	9bb47c21 	umull	x1, w1, w20
   aa764:	d365fc21 	lsr	x1, x1, #37
   aa768:	b9002e61 	str	w1, [x19, #44]
   aa76c:	1107d021 	add	w1, w1, #0x1f4
   aa770:	9ba27c21 	umull	x1, w1, w2
   aa774:	d366fc21 	lsr	x1, x1, #38
   aa778:	b9003261 	str	w1, [x19, #48]
   aa77c:	97ffe51d 	bl	a3bf0 <CLogger::Get()>
   aa780:	9bb47ea4 	umull	x4, w21, w20
   aa784:	52800c85 	mov	w5, #0x64                  	// #100
   aa788:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa78c:	b0000081 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aa790:	910c8021 	add	x1, x1, #0x320
   aa794:	d365fc84 	lsr	x4, x4, #37
   aa798:	9100c021 	add	x1, x1, #0x30
   aa79c:	90000063 	adrp	x3, b6000 <_etext+0x39c8>
   aa7a0:	52800062 	mov	w2, #0x3                   	// #3
   aa7a4:	912b2063 	add	x3, x3, #0xac8
   aa7a8:	1b05d485 	msub	w5, w4, w5, w21
   aa7ac:	f94013f5 	ldr	x21, [sp, #32]
   aa7b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa7b4:	17ffe703 	b	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa7b8:	d503201f 	nop
   aa7bc:	d503201f 	nop

00000000000aa7c0 <CTimer::Initialize()>:
   aa7c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aa7c4:	910003fd 	mov	x29, sp
   aa7c8:	a90153f3 	stp	x19, x20, [sp, #16]
   aa7cc:	aa0003f3 	mov	x19, x0
   aa7d0:	f9400000 	ldr	x0, [x0]
   aa7d4:	b40004c0 	cbz	x0, aa86c <CTimer::Initialize()+0xac>
   aa7d8:	aa1303e3 	mov	x3, x19
   aa7dc:	52800921 	mov	w1, #0x49                  	// #73
   aa7e0:	90000002 	adrp	x2, aa000 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb0>
   aa7e4:	911b8042 	add	x2, x2, #0x6e0
   aa7e8:	94000db2 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   aa7ec:	d53be001 	mrs	x1, cntfrq_el0
   aa7f0:	d28b8520 	mov	x0, #0x5c29                	// #23593
   aa7f4:	f2b851e0 	movk	x0, #0xc28f, lsl #16
   aa7f8:	f2c51ea0 	movk	x0, #0x28f5, lsl #32
   aa7fc:	f2f1eb80 	movk	x0, #0x8f5c, lsl #48
   aa800:	d291eb82 	mov	x2, #0x8f5c                	// #36700
   aa804:	f2beb842 	movk	x2, #0xf5c2, lsl #16
   aa808:	9b007c20 	mul	x0, x1, x0
   aa80c:	f2cb8502 	movk	x2, #0x5c28, lsl #32
   aa810:	f2e051e2 	movk	x2, #0x28f, lsl #48
   aa814:	93c00800 	ror	x0, x0, #2
   aa818:	eb02001f 	cmp	x0, x2
   aa81c:	54000348 	b.hi	aa884 <CTimer::Initialize()+0xc4>  // b.pmore
   aa820:	d342fc21 	lsr	x1, x1, #2
   aa824:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   aa828:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   aa82c:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   aa830:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   aa834:	9bc07c21 	umulh	x1, x1, x0
   aa838:	d342fc21 	lsr	x1, x1, #2
   aa83c:	b9000a61 	str	w1, [x19, #8]
   aa840:	d53be020 	mrs	x0, cntpct_el0
   aa844:	8b214001 	add	x1, x0, w1, uxtw
   aa848:	d51be241 	msr	cntp_cval_el0, x1
   aa84c:	d2800034 	mov	x20, #0x1                   	// #1
   aa850:	d51be234 	msr	cntp_ctl_el0, x20
   aa854:	aa1303e0 	mov	x0, x19
   aa858:	97ffffae 	bl	aa710 <CTimer::TuneMsDelay()>
   aa85c:	2a1403e0 	mov	w0, w20
   aa860:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa864:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aa868:	d65f03c0 	ret
   aa86c:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa870:	b0000040 	adrp	x0, b3000 <_etext+0x9c8>
   aa874:	9127e021 	add	x1, x1, #0x9f8
   aa878:	9103c000 	add	x0, x0, #0xf0
   aa87c:	52800c82 	mov	w2, #0x64                  	// #100
   aa880:	97ffdda0 	bl	a1f00 <assertion_failed>
   aa884:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa888:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa88c:	9127e021 	add	x1, x1, #0x9f8
   aa890:	912b8000 	add	x0, x0, #0xae0
   aa894:	52800f82 	mov	w2, #0x7c                  	// #124
   aa898:	97ffdd9a 	bl	a1f00 <assertion_failed>
   aa89c:	d503201f 	nop

00000000000aa8a0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   aa8a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa8a4:	910003fd 	mov	x29, sp
   aa8a8:	f9401c02 	ldr	x2, [x0, #56]
   aa8ac:	b50000a2 	cbnz	x2, aa8c0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x20>
   aa8b0:	f9001c01 	str	x1, [x0, #56]
   aa8b4:	b4000121 	cbz	x1, aa8d8 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x38>
   aa8b8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa8bc:	d65f03c0 	ret
   aa8c0:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa8c4:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa8c8:	9127e021 	add	x1, x1, #0x9f8
   aa8cc:	912be000 	add	x0, x0, #0xaf8
   aa8d0:	52804c42 	mov	w2, #0x262                 	// #610
   aa8d4:	97ffdd8b 	bl	a1f00 <assertion_failed>
   aa8d8:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa8dc:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa8e0:	9127e021 	add	x1, x1, #0x9f8
   aa8e4:	912c6000 	add	x0, x0, #0xb18
   aa8e8:	52804c82 	mov	w2, #0x264                 	// #612
   aa8ec:	97ffdd85 	bl	a1f00 <assertion_failed>

00000000000aa8f0 <CTimer::RegisterPeriodicHandler(void (*)())>:
   aa8f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa8f4:	910003fd 	mov	x29, sp
   aa8f8:	b40001c1 	cbz	x1, aa930 <CTimer::RegisterPeriodicHandler(void (*)())+0x40>
   aa8fc:	b9406002 	ldr	w2, [x0, #96]
   aa900:	71000c5f 	cmp	w2, #0x3
   aa904:	54000228 	b.hi	aa948 <CTimer::RegisterPeriodicHandler(void (*)())+0x58>  // b.pmore
   aa908:	b9406002 	ldr	w2, [x0, #96]
   aa90c:	2a0203e2 	mov	w2, w2
   aa910:	91002042 	add	x2, x2, #0x8
   aa914:	f8227801 	str	x1, [x0, x2, lsl #3]
   aa918:	d5033f9f 	dsb	sy
   aa91c:	b9406001 	ldr	w1, [x0, #96]
   aa920:	11000421 	add	w1, w1, #0x1
   aa924:	b9006001 	str	w1, [x0, #96]
   aa928:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa92c:	d65f03c0 	ret
   aa930:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa934:	b0000060 	adrp	x0, b7000 <_etext+0x49c8>
   aa938:	9127e021 	add	x1, x1, #0x9f8
   aa93c:	91006000 	add	x0, x0, #0x18
   aa940:	52804d22 	mov	w2, #0x269                 	// #617
   aa944:	97ffdd6f 	bl	a1f00 <assertion_failed>
   aa948:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aa94c:	90000060 	adrp	x0, b6000 <_etext+0x39c8>
   aa950:	9127e021 	add	x1, x1, #0x9f8
   aa954:	912ce000 	add	x0, x0, #0xb38
   aa958:	52804d62 	mov	w2, #0x26b                 	// #619
   aa95c:	97ffdd69 	bl	a1f00 <assertion_failed>

00000000000aa960 <CTimer::SimpleMsDelay(unsigned int)>:
   aa960:	34000280 	cbz	w0, aa9b0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   aa964:	52807d01 	mov	w1, #0x3e8                 	// #1000
   aa968:	1b017c00 	mul	w0, w0, w1
   aa96c:	34000220 	cbz	w0, aa9b0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   aa970:	11000401 	add	w1, w0, #0x1
   aa974:	d5033fdf 	isb
   aa978:	d53be023 	mrs	x3, cntpct_el0
   aa97c:	d53be000 	mrs	x0, cntfrq_el0
   aa980:	d2884804 	mov	x4, #0x4240                	// #16960
   aa984:	f2a001e4 	movk	x4, #0xf, lsl #16
   aa988:	9b047c63 	mul	x3, x3, x4
   aa98c:	9ac00863 	udiv	x3, x3, x0
   aa990:	d5033fdf 	isb
   aa994:	d53be020 	mrs	x0, cntpct_el0
   aa998:	d53be002 	mrs	x2, cntfrq_el0
   aa99c:	9b047c00 	mul	x0, x0, x4
   aa9a0:	9ac20800 	udiv	x0, x0, x2
   aa9a4:	4b030000 	sub	w0, w0, w3
   aa9a8:	6b00003f 	cmp	w1, w0
   aa9ac:	54ffff28 	b.hi	aa990 <CTimer::SimpleMsDelay(unsigned int)+0x30>  // b.pmore
   aa9b0:	d65f03c0 	ret
   aa9b4:	d503201f 	nop
   aa9b8:	d503201f 	nop
   aa9bc:	d503201f 	nop

00000000000aa9c0 <CTimer::SimpleusDelay(unsigned int)>:
   aa9c0:	34000240 	cbz	w0, aaa08 <CTimer::SimpleusDelay(unsigned int)+0x48>
   aa9c4:	11000401 	add	w1, w0, #0x1
   aa9c8:	d5033fdf 	isb
   aa9cc:	d53be023 	mrs	x3, cntpct_el0
   aa9d0:	d53be000 	mrs	x0, cntfrq_el0
   aa9d4:	d2884804 	mov	x4, #0x4240                	// #16960
   aa9d8:	f2a001e4 	movk	x4, #0xf, lsl #16
   aa9dc:	9b047c63 	mul	x3, x3, x4
   aa9e0:	9ac00863 	udiv	x3, x3, x0
   aa9e4:	d503201f 	nop
   aa9e8:	d5033fdf 	isb
   aa9ec:	d53be020 	mrs	x0, cntpct_el0
   aa9f0:	d53be002 	mrs	x2, cntfrq_el0
   aa9f4:	9b047c00 	mul	x0, x0, x4
   aa9f8:	9ac20800 	udiv	x0, x0, x2
   aa9fc:	4b030000 	sub	w0, w0, w3
   aaa00:	6b00003f 	cmp	w1, w0
   aaa04:	54ffff28 	b.hi	aa9e8 <CTimer::SimpleusDelay(unsigned int)+0x28>  // b.pmore
   aaa08:	d65f03c0 	ret
   aaa0c:	d503201f 	nop

00000000000aaa10 <CTimer::IsLeapYear(unsigned int)>:
   aaa10:	528b8521 	mov	w1, #0x5c29                	// #23593
   aaa14:	72b851e1 	movk	w1, #0xc28f, lsl #16
   aaa18:	528b8502 	mov	w2, #0x5c28                	// #23592
   aaa1c:	72a051e2 	movk	w2, #0x28f, lsl #16
   aaa20:	1b017c01 	mul	w1, w0, w1
   aaa24:	72000400 	ands	w0, w0, #0x3
   aaa28:	1a9f17e0 	cset	w0, eq	// eq = none
   aaa2c:	13810823 	ror	w3, w1, #2
   aaa30:	6b02007f 	cmp	w3, w2
   aaa34:	54000049 	b.ls	aaa3c <CTimer::IsLeapYear(unsigned int)+0x2c>  // b.plast
   aaa38:	d65f03c0 	ret
   aaa3c:	529ae140 	mov	w0, #0xd70a                	// #55050
   aaa40:	72a01460 	movk	w0, #0xa3, lsl #16
   aaa44:	13811021 	ror	w1, w1, #4
   aaa48:	6b00003f 	cmp	w1, w0
   aaa4c:	1a9f87e0 	cset	w0, ls	// ls = plast
   aaa50:	d65f03c0 	ret
   aaa54:	d503201f 	nop
   aaa58:	d503201f 	nop
   aaa5c:	d503201f 	nop

00000000000aaa60 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   aaa60:	2a0003e2 	mov	w2, w0
   aaa64:	7100041f 	cmp	w0, #0x1
   aaa68:	540000a0 	b.eq	aaa7c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   aaa6c:	b0000080 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   aaa70:	910c8000 	add	x0, x0, #0x320
   aaa74:	b8625800 	ldr	w0, [x0, w2, uxtw #2]
   aaa78:	d65f03c0 	ret
   aaa7c:	528b8520 	mov	w0, #0x5c29                	// #23593
   aaa80:	72b851e0 	movk	w0, #0xc28f, lsl #16
   aaa84:	528b8503 	mov	w3, #0x5c28                	// #23592
   aaa88:	72a051e3 	movk	w3, #0x28f, lsl #16
   aaa8c:	1b007c20 	mul	w0, w1, w0
   aaa90:	13800804 	ror	w4, w0, #2
   aaa94:	6b03009f 	cmp	w4, w3
   aaa98:	540000a9 	b.ls	aaaac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>  // b.plast
   aaa9c:	12000421 	and	w1, w1, #0x3
   aaaa0:	528003a0 	mov	w0, #0x1d                  	// #29
   aaaa4:	35fffe41 	cbnz	w1, aaa6c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>
   aaaa8:	d65f03c0 	ret
   aaaac:	529ae143 	mov	w3, #0xd70a                	// #55050
   aaab0:	72a01463 	movk	w3, #0xa3, lsl #16
   aaab4:	13801001 	ror	w1, w0, #4
   aaab8:	6b03003f 	cmp	w1, w3
   aaabc:	528003a0 	mov	w0, #0x1d                  	// #29
   aaac0:	54fffd68 	b.hi	aaa6c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>  // b.pmore
   aaac4:	d65f03c0 	ret
   aaac8:	d503201f 	nop
   aaacc:	d503201f 	nop

00000000000aaad0 <CTimer::Get()>:
   aaad0:	90000100 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   aaad4:	f9467000 	ldr	x0, [x0, #3296]
   aaad8:	b4000040 	cbz	x0, aaae0 <CTimer::Get()+0x10>
   aaadc:	d65f03c0 	ret
   aaae0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aaae4:	90000061 	adrp	x1, b6000 <_etext+0x39c8>
   aaae8:	90000040 	adrp	x0, b2000 <SErrorStub+0xc>
   aaaec:	910003fd 	mov	x29, sp
   aaaf0:	9127e021 	add	x1, x1, #0x9f8
   aaaf4:	91260000 	add	x0, x0, #0x980
   aaaf8:	52805582 	mov	w2, #0x2ac                 	// #684
   aaafc:	97ffdd01 	bl	a1f00 <assertion_failed>

00000000000aab00 <memmove>:
   aab00:	eb01001f 	cmp	x0, x1
   aab04:	54000089 	b.ls	aab14 <memmove+0x14>  // b.plast
   aab08:	8b020023 	add	x3, x1, x2
   aab0c:	eb03001f 	cmp	x0, x3
   aab10:	54000043 	b.cc	aab18 <memmove+0x18>  // b.lo, b.ul, b.last
   aab14:	140001ad 	b	ab1c8 <memcpy>
   aab18:	d1000443 	sub	x3, x2, #0x1
   aab1c:	b40000c2 	cbz	x2, aab34 <memmove+0x34>
   aab20:	38e36822 	ldrsb	w2, [x1, x3]
   aab24:	38236802 	strb	w2, [x0, x3]
   aab28:	d1000463 	sub	x3, x3, #0x1
   aab2c:	b100047f 	cmn	x3, #0x1
   aab30:	54ffff81 	b.ne	aab20 <memmove+0x20>  // b.any
   aab34:	d65f03c0 	ret
   aab38:	d503201f 	nop
   aab3c:	d503201f 	nop

00000000000aab40 <memcmp>:
   aab40:	b40001a2 	cbz	x2, aab74 <memcmp+0x34>
   aab44:	d2800003 	mov	x3, #0x0                   	// #0
   aab48:	14000004 	b	aab58 <memcmp+0x18>
   aab4c:	54000183 	b.cc	aab7c <memcmp+0x3c>  // b.lo, b.ul, b.last
   aab50:	eb02007f 	cmp	x3, x2
   aab54:	54000100 	b.eq	aab74 <memcmp+0x34>  // b.none
   aab58:	38636805 	ldrb	w5, [x0, x3]
   aab5c:	38636824 	ldrb	w4, [x1, x3]
   aab60:	91000463 	add	x3, x3, #0x1
   aab64:	6b0400bf 	cmp	w5, w4
   aab68:	54ffff29 	b.ls	aab4c <memcmp+0xc>  // b.plast
   aab6c:	52800020 	mov	w0, #0x1                   	// #1
   aab70:	d65f03c0 	ret
   aab74:	52800000 	mov	w0, #0x0                   	// #0
   aab78:	d65f03c0 	ret
   aab7c:	12800000 	mov	w0, #0xffffffff            	// #-1
   aab80:	d65f03c0 	ret
   aab84:	d503201f 	nop
   aab88:	d503201f 	nop
   aab8c:	d503201f 	nop

00000000000aab90 <strlen>:
   aab90:	aa0003e2 	mov	x2, x0
   aab94:	39c00000 	ldrsb	w0, [x0]
   aab98:	340000c0 	cbz	w0, aabb0 <strlen+0x20>
   aab9c:	d2800000 	mov	x0, #0x0                   	// #0
   aaba0:	91000400 	add	x0, x0, #0x1
   aaba4:	38e06841 	ldrsb	w1, [x2, x0]
   aaba8:	35ffffc1 	cbnz	w1, aaba0 <strlen+0x10>
   aabac:	d65f03c0 	ret
   aabb0:	d2800000 	mov	x0, #0x0                   	// #0
   aabb4:	d65f03c0 	ret
   aabb8:	d503201f 	nop
   aabbc:	d503201f 	nop

00000000000aabc0 <strcmp>:
   aabc0:	39c00002 	ldrsb	w2, [x0]
   aabc4:	350000e2 	cbnz	w2, aabe0 <strcmp+0x20>
   aabc8:	14000017 	b	aac24 <strcmp+0x64>
   aabcc:	540001ab 	b.lt	aac00 <strcmp+0x40>  // b.tstop
   aabd0:	540001cc 	b.gt	aac08 <strcmp+0x48>
   aabd4:	38c01c02 	ldrsb	w2, [x0, #1]!
   aabd8:	340001c2 	cbz	w2, aac10 <strcmp+0x50>
   aabdc:	aa0403e1 	mov	x1, x4
   aabe0:	39c00023 	ldrsb	w3, [x1]
   aabe4:	91000424 	add	x4, x1, #0x1
   aabe8:	6b02007f 	cmp	w3, w2
   aabec:	35ffff03 	cbnz	w3, aabcc <strcmp+0xc>
   aabf0:	6b03005f 	cmp	w2, w3
   aabf4:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   aabf8:	1a9fd400 	csinc	w0, w0, wzr, le
   aabfc:	d65f03c0 	ret
   aac00:	52800020 	mov	w0, #0x1                   	// #1
   aac04:	d65f03c0 	ret
   aac08:	12800000 	mov	w0, #0xffffffff            	// #-1
   aac0c:	d65f03c0 	ret
   aac10:	39c00423 	ldrsb	w3, [x1, #1]
   aac14:	6b03005f 	cmp	w2, w3
   aac18:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   aac1c:	1a9fd400 	csinc	w0, w0, wzr, le
   aac20:	17fffff7 	b	aabfc <strcmp+0x3c>
   aac24:	39c00023 	ldrsb	w3, [x1]
   aac28:	17fffff2 	b	aabf0 <strcmp+0x30>
   aac2c:	d503201f 	nop

00000000000aac30 <strcasecmp>:
   aac30:	1400000c 	b	aac60 <strcasecmp+0x30>
   aac34:	51008063 	sub	w3, w3, #0x20
   aac38:	39c00022 	ldrsb	w2, [x1]
   aac3c:	51018444 	sub	w4, w2, #0x61
   aac40:	7100649f 	cmp	w4, #0x19
   aac44:	54000288 	b.hi	aac94 <strcasecmp+0x64>  // b.pmore
   aac48:	51008042 	sub	w2, w2, #0x20
   aac4c:	91000400 	add	x0, x0, #0x1
   aac50:	91000421 	add	x1, x1, #0x1
   aac54:	6b02007f 	cmp	w3, w2
   aac58:	5400028c 	b.gt	aaca8 <strcasecmp+0x78>
   aac5c:	540002ab 	b.lt	aacb0 <strcasecmp+0x80>  // b.tstop
   aac60:	39c00003 	ldrsb	w3, [x0]
   aac64:	51018462 	sub	w2, w3, #0x61
   aac68:	7100645f 	cmp	w2, #0x19
   aac6c:	54fffe49 	b.ls	aac34 <strcasecmp+0x4>  // b.plast
   aac70:	35fffe43 	cbnz	w3, aac38 <strcasecmp+0x8>
   aac74:	39c00022 	ldrsb	w2, [x1]
   aac78:	51018440 	sub	w0, w2, #0x61
   aac7c:	7100641f 	cmp	w0, #0x19
   aac80:	540000c8 	b.hi	aac98 <strcasecmp+0x68>  // b.pmore
   aac84:	51008042 	sub	w2, w2, #0x20
   aac88:	6b03005f 	cmp	w2, w3
   aac8c:	5a9fd3e0 	csetm	w0, gt
   aac90:	d65f03c0 	ret
   aac94:	35fffdc2 	cbnz	w2, aac4c <strcasecmp+0x1c>
   aac98:	6b03005f 	cmp	w2, w3
   aac9c:	52800020 	mov	w0, #0x1                   	// #1
   aaca0:	54ffff4a 	b.ge	aac88 <strcasecmp+0x58>  // b.tcont
   aaca4:	d65f03c0 	ret
   aaca8:	52800020 	mov	w0, #0x1                   	// #1
   aacac:	d65f03c0 	ret
   aacb0:	12800000 	mov	w0, #0xffffffff            	// #-1
   aacb4:	d65f03c0 	ret
   aacb8:	d503201f 	nop
   aacbc:	d503201f 	nop

00000000000aacc0 <strncmp>:
   aacc0:	b5000162 	cbnz	x2, aacec <strncmp+0x2c>
   aacc4:	14000012 	b	aad0c <strncmp+0x4c>
   aacc8:	39c00024 	ldrsb	w4, [x1]
   aaccc:	6b04007f 	cmp	w3, w4
   aacd0:	34000124 	cbz	w4, aacf4 <strncmp+0x34>
   aacd4:	5400020c 	b.gt	aad14 <strncmp+0x54>
   aacd8:	5400022b 	b.lt	aad1c <strncmp+0x5c>  // b.tstop
   aacdc:	91000400 	add	x0, x0, #0x1
   aace0:	91000421 	add	x1, x1, #0x1
   aace4:	f1000442 	subs	x2, x2, #0x1
   aace8:	54000120 	b.eq	aad0c <strncmp+0x4c>  // b.none
   aacec:	39c00003 	ldrsb	w3, [x0]
   aacf0:	35fffec3 	cbnz	w3, aacc8 <strncmp+0x8>
   aacf4:	39c00002 	ldrsb	w2, [x0]
   aacf8:	39c00020 	ldrsb	w0, [x1]
   aacfc:	6b00005f 	cmp	w2, w0
   aad00:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   aad04:	1a9fd400 	csinc	w0, w0, wzr, le
   aad08:	d65f03c0 	ret
   aad0c:	52800000 	mov	w0, #0x0                   	// #0
   aad10:	d65f03c0 	ret
   aad14:	52800020 	mov	w0, #0x1                   	// #1
   aad18:	d65f03c0 	ret
   aad1c:	12800000 	mov	w0, #0xffffffff            	// #-1
   aad20:	d65f03c0 	ret
   aad24:	d503201f 	nop
   aad28:	d503201f 	nop
   aad2c:	d503201f 	nop

00000000000aad30 <strncasecmp>:
   aad30:	b50001e2 	cbnz	x2, aad6c <strncasecmp+0x3c>
   aad34:	1400001c 	b	aada4 <strncasecmp+0x74>
   aad38:	51008084 	sub	w4, w4, #0x20
   aad3c:	39c00023 	ldrsb	w3, [x1]
   aad40:	51018465 	sub	w5, w3, #0x61
   aad44:	710064bf 	cmp	w5, #0x19
   aad48:	54000328 	b.hi	aadac <strncasecmp+0x7c>  // b.pmore
   aad4c:	51008063 	sub	w3, w3, #0x20
   aad50:	6b04007f 	cmp	w3, w4
   aad54:	5400032b 	b.lt	aadb8 <strncasecmp+0x88>  // b.tstop
   aad58:	5400034c 	b.gt	aadc0 <strncasecmp+0x90>
   aad5c:	f1000442 	subs	x2, x2, #0x1
   aad60:	91000400 	add	x0, x0, #0x1
   aad64:	91000421 	add	x1, x1, #0x1
   aad68:	540001e0 	b.eq	aada4 <strncasecmp+0x74>  // b.none
   aad6c:	39c00004 	ldrsb	w4, [x0]
   aad70:	51018483 	sub	w3, w4, #0x61
   aad74:	7100647f 	cmp	w3, #0x19
   aad78:	54fffe09 	b.ls	aad38 <strncasecmp+0x8>  // b.plast
   aad7c:	35fffe04 	cbnz	w4, aad3c <strncasecmp+0xc>
   aad80:	39c00023 	ldrsb	w3, [x1]
   aad84:	51018461 	sub	w1, w3, #0x61
   aad88:	51008060 	sub	w0, w3, #0x20
   aad8c:	7100683f 	cmp	w1, #0x1a
   aad90:	1a833003 	csel	w3, w0, w3, cc	// cc = lo, ul, last
   aad94:	6b03009f 	cmp	w4, w3
   aad98:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   aad9c:	1a9fd400 	csinc	w0, w0, wzr, le
   aada0:	d65f03c0 	ret
   aada4:	52800000 	mov	w0, #0x0                   	// #0
   aada8:	d65f03c0 	ret
   aadac:	34ffff43 	cbz	w3, aad94 <strncasecmp+0x64>
   aadb0:	6b04007f 	cmp	w3, w4
   aadb4:	54fffd2a 	b.ge	aad58 <strncasecmp+0x28>  // b.tcont
   aadb8:	52800020 	mov	w0, #0x1                   	// #1
   aadbc:	d65f03c0 	ret
   aadc0:	12800000 	mov	w0, #0xffffffff            	// #-1
   aadc4:	d65f03c0 	ret
   aadc8:	d503201f 	nop
   aadcc:	d503201f 	nop

00000000000aadd0 <strcpy>:
   aadd0:	39c00022 	ldrsb	w2, [x1]
   aadd4:	aa0003e3 	mov	x3, x0
   aadd8:	340000a2 	cbz	w2, aadec <strcpy+0x1c>
   aaddc:	d503201f 	nop
   aade0:	38001462 	strb	w2, [x3], #1
   aade4:	38c01c22 	ldrsb	w2, [x1, #1]!
   aade8:	35ffffc2 	cbnz	w2, aade0 <strcpy+0x10>
   aadec:	3900007f 	strb	wzr, [x3]
   aadf0:	d65f03c0 	ret
   aadf4:	d503201f 	nop
   aadf8:	d503201f 	nop
   aadfc:	d503201f 	nop

00000000000aae00 <strncpy>:
   aae00:	b4000142 	cbz	x2, aae28 <strncpy+0x28>
   aae04:	aa0003e4 	mov	x4, x0
   aae08:	14000003 	b	aae14 <strncpy+0x14>
   aae0c:	38001483 	strb	w3, [x4], #1
   aae10:	540000c0 	b.eq	aae28 <strncpy+0x28>  // b.none
   aae14:	39c00023 	ldrsb	w3, [x1]
   aae18:	f1000442 	subs	x2, x2, #0x1
   aae1c:	91000421 	add	x1, x1, #0x1
   aae20:	35ffff63 	cbnz	w3, aae0c <strncpy+0xc>
   aae24:	3900009f 	strb	wzr, [x4]
   aae28:	d65f03c0 	ret
   aae2c:	d503201f 	nop

00000000000aae30 <strcat>:
   aae30:	39c00002 	ldrsb	w2, [x0]
   aae34:	34000182 	cbz	w2, aae64 <strcat+0x34>
   aae38:	aa0003e2 	mov	x2, x0
   aae3c:	d503201f 	nop
   aae40:	38c01c43 	ldrsb	w3, [x2, #1]!
   aae44:	35ffffe3 	cbnz	w3, aae40 <strcat+0x10>
   aae48:	39c00023 	ldrsb	w3, [x1]
   aae4c:	34000083 	cbz	w3, aae5c <strcat+0x2c>
   aae50:	38001443 	strb	w3, [x2], #1
   aae54:	38c01c23 	ldrsb	w3, [x1, #1]!
   aae58:	35ffffc3 	cbnz	w3, aae50 <strcat+0x20>
   aae5c:	3900005f 	strb	wzr, [x2]
   aae60:	d65f03c0 	ret
   aae64:	aa0003e2 	mov	x2, x0
   aae68:	17fffff8 	b	aae48 <strcat+0x18>
   aae6c:	d503201f 	nop

00000000000aae70 <strchr>:
   aae70:	39c00002 	ldrsb	w2, [x0]
   aae74:	35000082 	cbnz	w2, aae84 <strchr+0x14>
   aae78:	14000006 	b	aae90 <strchr+0x20>
   aae7c:	38c01c02 	ldrsb	w2, [x0, #1]!
   aae80:	34000082 	cbz	w2, aae90 <strchr+0x20>
   aae84:	6b01005f 	cmp	w2, w1
   aae88:	54ffffa1 	b.ne	aae7c <strchr+0xc>  // b.any
   aae8c:	d65f03c0 	ret
   aae90:	d2800000 	mov	x0, #0x0                   	// #0
   aae94:	d65f03c0 	ret
   aae98:	d503201f 	nop
   aae9c:	d503201f 	nop

00000000000aaea0 <strstr>:
   aaea0:	39c00002 	ldrsb	w2, [x0]
   aaea4:	39c00025 	ldrsb	w5, [x1]
   aaea8:	35000082 	cbnz	w2, aaeb8 <strstr+0x18>
   aaeac:	710000bf 	cmp	w5, #0x0
   aaeb0:	9a9f0000 	csel	x0, x0, xzr, eq	// eq = none
   aaeb4:	d65f03c0 	ret
   aaeb8:	34ffffe5 	cbz	w5, aaeb4 <strstr+0x14>
   aaebc:	2a0503e3 	mov	w3, w5
   aaec0:	d2800002 	mov	x2, #0x0                   	// #0
   aaec4:	14000003 	b	aaed0 <strstr+0x30>
   aaec8:	38e26823 	ldrsb	w3, [x1, x2]
   aaecc:	34ffff43 	cbz	w3, aaeb4 <strstr+0x14>
   aaed0:	38e26804 	ldrsb	w4, [x0, x2]
   aaed4:	91000442 	add	x2, x2, #0x1
   aaed8:	6b03009f 	cmp	w4, w3
   aaedc:	54ffff60 	b.eq	aaec8 <strstr+0x28>  // b.none
   aaee0:	38c01c02 	ldrsb	w2, [x0, #1]!
   aaee4:	35fffec2 	cbnz	w2, aaebc <strstr+0x1c>
   aaee8:	d2800000 	mov	x0, #0x0                   	// #0
   aaeec:	d65f03c0 	ret

00000000000aaef0 <strtok_r>:
   aaef0:	b40004a0 	cbz	x0, aaf84 <strtok_r+0x94>
   aaef4:	39c00004 	ldrsb	w4, [x0]
   aaef8:	34000404 	cbz	w4, aaf78 <strtok_r+0x88>
   aaefc:	39c00027 	ldrsb	w7, [x1]
   aaf00:	34000167 	cbz	w7, aaf2c <strtok_r+0x3c>
   aaf04:	d503201f 	nop
   aaf08:	aa0103e5 	mov	x5, x1
   aaf0c:	2a0703e3 	mov	w3, w7
   aaf10:	14000003 	b	aaf1c <strtok_r+0x2c>
   aaf14:	38c01ca3 	ldrsb	w3, [x5, #1]!
   aaf18:	340000a3 	cbz	w3, aaf2c <strtok_r+0x3c>
   aaf1c:	6b04007f 	cmp	w3, w4
   aaf20:	54ffffa1 	b.ne	aaf14 <strtok_r+0x24>  // b.any
   aaf24:	38c01c04 	ldrsb	w4, [x0, #1]!
   aaf28:	17fffff8 	b	aaf08 <strtok_r+0x18>
   aaf2c:	34000264 	cbz	w4, aaf78 <strtok_r+0x88>
   aaf30:	aa0003e6 	mov	x6, x0
   aaf34:	350000e7 	cbnz	w7, aaf50 <strtok_r+0x60>
   aaf38:	38c01cc4 	ldrsb	w4, [x6, #1]!
   aaf3c:	35ffffe4 	cbnz	w4, aaf38 <strtok_r+0x48>
   aaf40:	f9000046 	str	x6, [x2]
   aaf44:	d65f03c0 	ret
   aaf48:	38c01cc4 	ldrsb	w4, [x6, #1]!
   aaf4c:	34ffffa4 	cbz	w4, aaf40 <strtok_r+0x50>
   aaf50:	aa0103e5 	mov	x5, x1
   aaf54:	2a0703e3 	mov	w3, w7
   aaf58:	14000003 	b	aaf64 <strtok_r+0x74>
   aaf5c:	38c01ca3 	ldrsb	w3, [x5, #1]!
   aaf60:	34ffff43 	cbz	w3, aaf48 <strtok_r+0x58>
   aaf64:	6b04007f 	cmp	w3, w4
   aaf68:	54ffffa1 	b.ne	aaf5c <strtok_r+0x6c>  // b.any
   aaf6c:	380014df 	strb	wzr, [x6], #1
   aaf70:	f9000046 	str	x6, [x2]
   aaf74:	17fffff4 	b	aaf44 <strtok_r+0x54>
   aaf78:	d2800000 	mov	x0, #0x0                   	// #0
   aaf7c:	f900005f 	str	xzr, [x2]
   aaf80:	d65f03c0 	ret
   aaf84:	f9400040 	ldr	x0, [x2]
   aaf88:	b5fffb60 	cbnz	x0, aaef4 <strtok_r+0x4>
   aaf8c:	d2800000 	mov	x0, #0x0                   	// #0
   aaf90:	17fffffc 	b	aaf80 <strtok_r+0x90>
   aaf94:	d503201f 	nop
   aaf98:	d503201f 	nop
   aaf9c:	d503201f 	nop

00000000000aafa0 <strtoul>:
   aafa0:	aa0003e5 	mov	x5, x0
   aafa4:	b4000041 	cbz	x1, aafac <strtoul+0xc>
   aafa8:	f9000020 	str	x0, [x1]
   aafac:	51000840 	sub	w0, w2, #0x2
   aafb0:	7100881f 	cmp	w0, #0x22
   aafb4:	7a408844 	ccmp	w2, #0x0, #0x4, hi	// hi = pmore
   aafb8:	54000a21 	b.ne	ab0fc <strtoul+0x15c>  // b.any
   aafbc:	d503201f 	nop
   aafc0:	39c000a3 	ldrsb	w3, [x5]
   aafc4:	51002464 	sub	w4, w3, #0x9
   aafc8:	7100807f 	cmp	w3, #0x20
   aafcc:	12001c84 	and	w4, w4, #0xff
   aafd0:	54000300 	b.eq	ab030 <strtoul+0x90>  // b.none
   aafd4:	7100109f 	cmp	w4, #0x4
   aafd8:	540002c9 	b.ls	ab030 <strtoul+0x90>  // b.plast
   aafdc:	7100ac7f 	cmp	w3, #0x2b
   aafe0:	540002c0 	b.eq	ab038 <strtoul+0x98>  // b.none
   aafe4:	7100b47f 	cmp	w3, #0x2d
   aafe8:	52800009 	mov	w9, #0x0                   	// #0
   aafec:	540002c1 	b.ne	ab044 <strtoul+0xa4>  // b.any
   aaff0:	39c004a3 	ldrsb	w3, [x5, #1]
   aaff4:	52800029 	mov	w9, #0x1                   	// #1
   aaff8:	910004a5 	add	x5, x5, #0x1
   aaffc:	7100c07f 	cmp	w3, #0x30
   ab000:	54000261 	b.ne	ab04c <strtoul+0xac>  // b.any
   ab004:	39c004a3 	ldrsb	w3, [x5, #1]
   ab008:	910004a4 	add	x4, x5, #0x1
   ab00c:	121a7860 	and	w0, w3, #0xffffffdf
   ab010:	7101601f 	cmp	w0, #0x58
   ab014:	54000781 	b.ne	ab104 <strtoul+0x164>  // b.any
   ab018:	721b785f 	tst	w2, #0xffffffef
   ab01c:	54000701 	b.ne	ab0fc <strtoul+0x15c>  // b.any
   ab020:	39c008a3 	ldrsb	w3, [x5, #2]
   ab024:	52800202 	mov	w2, #0x10                  	// #16
   ab028:	910008a5 	add	x5, x5, #0x2
   ab02c:	1400000b 	b	ab058 <strtoul+0xb8>
   ab030:	910004a5 	add	x5, x5, #0x1
   ab034:	17ffffe3 	b	aafc0 <strtoul+0x20>
   ab038:	39c004a3 	ldrsb	w3, [x5, #1]
   ab03c:	910004a5 	add	x5, x5, #0x1
   ab040:	52800009 	mov	w9, #0x0                   	// #0
   ab044:	7100c07f 	cmp	w3, #0x30
   ab048:	54fffde0 	b.eq	ab004 <strtoul+0x64>  // b.none
   ab04c:	7100005f 	cmp	w2, #0x0
   ab050:	52800140 	mov	w0, #0xa                   	// #10
   ab054:	1a801042 	csel	w2, w2, w0, ne	// ne = any
   ab058:	7100bc7f 	cmp	w3, #0x2f
   ab05c:	2a0303e4 	mov	w4, w3
   ab060:	540004ad 	b.le	ab0f4 <strtoul+0x154>
   ab064:	93407c48 	sxtw	x8, w2
   ab068:	52800027 	mov	w7, #0x1                   	// #1
   ab06c:	d2800006 	mov	x6, #0x0                   	// #0
   ab070:	51018463 	sub	w3, w3, #0x61
   ab074:	7100647f 	cmp	w3, #0x19
   ab078:	54000248 	b.hi	ab0c0 <strtoul+0x120>  // b.pmore
   ab07c:	51008084 	sub	w4, w4, #0x20
   ab080:	51001c84 	sub	w4, w4, #0x7
   ab084:	5100c084 	sub	w4, w4, #0x30
   ab088:	6b02009f 	cmp	w4, w2
   ab08c:	5400024a 	b.ge	ab0d4 <strtoul+0x134>  // b.tcont
   ab090:	93407c84 	sxtw	x4, w4
   ab094:	52800007 	mov	w7, #0x0                   	// #0
   ab098:	9b061100 	madd	x0, x8, x6, x4
   ab09c:	eb06001f 	cmp	x0, x6
   ab0a0:	540003a3 	b.cc	ab114 <strtoul+0x174>  // b.lo, b.ul, b.last
   ab0a4:	38c01ca4 	ldrsb	w4, [x5, #1]!
   ab0a8:	aa0003e6 	mov	x6, x0
   ab0ac:	7100bc9f 	cmp	w4, #0x2f
   ab0b0:	2a0403e3 	mov	w3, w4
   ab0b4:	54fffdec 	b.gt	ab070 <strtoul+0xd0>
   ab0b8:	52800022 	mov	w2, #0x1                   	// #1
   ab0bc:	14000008 	b	ab0dc <strtoul+0x13c>
   ab0c0:	7101009f 	cmp	w4, #0x40
   ab0c4:	54fffdec 	b.gt	ab080 <strtoul+0xe0>
   ab0c8:	5100c084 	sub	w4, w4, #0x30
   ab0cc:	6b02009f 	cmp	w4, w2
   ab0d0:	54fffe0b 	b.lt	ab090 <strtoul+0xf0>  // b.tstop
   ab0d4:	520000e2 	eor	w2, w7, #0x1
   ab0d8:	aa0603e0 	mov	x0, x6
   ab0dc:	0a090042 	and	w2, w2, w9
   ab0e0:	b4000041 	cbz	x1, ab0e8 <strtoul+0x148>
   ab0e4:	f9000025 	str	x5, [x1]
   ab0e8:	7100005f 	cmp	w2, #0x0
   ab0ec:	da800400 	cneg	x0, x0, ne	// ne = any
   ab0f0:	d65f03c0 	ret
   ab0f4:	b4000041 	cbz	x1, ab0fc <strtoul+0x15c>
   ab0f8:	f9000025 	str	x5, [x1]
   ab0fc:	d2800000 	mov	x0, #0x0                   	// #0
   ab100:	d65f03c0 	ret
   ab104:	aa0403e5 	mov	x5, x4
   ab108:	35fffa82 	cbnz	w2, ab058 <strtoul+0xb8>
   ab10c:	52800102 	mov	w2, #0x8                   	// #8
   ab110:	17ffffd2 	b	ab058 <strtoul+0xb8>
   ab114:	b4000041 	cbz	x1, ab11c <strtoul+0x17c>
   ab118:	f9000025 	str	x5, [x1]
   ab11c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   ab120:	d65f03c0 	ret
   ab124:	d503201f 	nop
   ab128:	d503201f 	nop
   ab12c:	d503201f 	nop

00000000000ab130 <strtoull>:
   ab130:	17ffff9c 	b	aafa0 <strtoul>
   ab134:	d503201f 	nop
   ab138:	d503201f 	nop
   ab13c:	d503201f 	nop

00000000000ab140 <atoi>:
   ab140:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab144:	52800142 	mov	w2, #0xa                   	// #10
   ab148:	d2800001 	mov	x1, #0x0                   	// #0
   ab14c:	910003fd 	mov	x29, sp
   ab150:	97ffff94 	bl	aafa0 <strtoul>
   ab154:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab158:	d65f03c0 	ret
   ab15c:	d503201f 	nop

00000000000ab160 <char2int>:
   ab160:	13001c00 	sxtb	w0, w0
   ab164:	d65f03c0 	ret

00000000000ab168 <memset>:
   ab168:	f240081f 	tst	x0, #0x7
   ab16c:	540001c1 	b.ne	ab1a4 <memset+0x3c>  // b.any
   ab170:	f100405f 	cmp	x2, #0x10
   ab174:	54000243 	b.cc	ab1bc <memset+0x54>  // b.lo, b.ul, b.last
   ab178:	2a012028 	orr	w8, w1, w1, lsl #8
   ab17c:	2a084109 	orr	w9, w8, w8, lsl #16
   ab180:	aa0003ea 	mov	x10, x0
   ab184:	29002549 	stp	w9, w9, [x10]
   ab188:	91004148 	add	x8, x10, #0x10
   ab18c:	d1004042 	sub	x2, x2, #0x10
   ab190:	f1003c5f 	cmp	x2, #0xf
   ab194:	29012549 	stp	w9, w9, [x10, #8]
   ab198:	aa0803ea 	mov	x10, x8
   ab19c:	54ffff48 	b.hi	ab184 <memset+0x1c>  // b.pmore
   ab1a0:	14000002 	b	ab1a8 <memset+0x40>
   ab1a4:	aa0003e8 	mov	x8, x0
   ab1a8:	b4000082 	cbz	x2, ab1b8 <memset+0x50>
   ab1ac:	f1000442 	subs	x2, x2, #0x1
   ab1b0:	38001501 	strb	w1, [x8], #1
   ab1b4:	54ffffc1 	b.ne	ab1ac <memset+0x44>  // b.any
   ab1b8:	d65f03c0 	ret
   ab1bc:	aa0003e8 	mov	x8, x0
   ab1c0:	b5ffff62 	cbnz	x2, ab1ac <memset+0x44>
   ab1c4:	17fffffd 	b	ab1b8 <memset+0x50>

00000000000ab1c8 <memcpy>:
   ab1c8:	aa0003e8 	mov	x8, x0
   ab1cc:	f101fc5f 	cmp	x2, #0x7f
   ab1d0:	540001c9 	b.ls	ab208 <memcpy+0x40>  // b.plast
   ab1d4:	f240083f 	tst	x1, #0x7
   ab1d8:	54000181 	b.ne	ab208 <memcpy+0x40>  // b.any
   ab1dc:	f240083f 	tst	x1, #0x7
   ab1e0:	54000141 	b.ne	ab208 <memcpy+0x40>  // b.any
   ab1e4:	d2800803 	mov	x3, #0x40                  	// #64
   ab1e8:	a8c11424 	ldp	x4, x5, [x1], #16
   ab1ec:	a8c11c26 	ldp	x6, x7, [x1], #16
   ab1f0:	d1008042 	sub	x2, x2, #0x20
   ab1f4:	a8811404 	stp	x4, x5, [x0], #16
   ab1f8:	a8811c06 	stp	x6, x7, [x0], #16
   ab1fc:	f8a36821 	prfm	pldl1strm, [x1, x3]
   ab200:	f1007c5f 	cmp	x2, #0x1f
   ab204:	54ffff28 	b.hi	ab1e8 <memcpy+0x20>  // b.pmore
   ab208:	f100005f 	cmp	x2, #0x0
   ab20c:	540000a0 	b.eq	ab220 <memcpy+0x58>  // b.none
   ab210:	38401423 	ldrb	w3, [x1], #1
   ab214:	f1000442 	subs	x2, x2, #0x1
   ab218:	38001403 	strb	w3, [x0], #1
   ab21c:	54ffffa1 	b.ne	ab210 <memcpy+0x48>  // b.any
   ab220:	aa0803e0 	mov	x0, x8
   ab224:	d65f03c0 	ret
	...

00000000000ab230 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   ab230:	d65f03c0 	ret
   ab234:	d503201f 	nop
   ab238:	d503201f 	nop
   ab23c:	d503201f 	nop

00000000000ab240 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   ab240:	d2800301 	mov	x1, #0x18                  	// #24
   ab244:	1400025b 	b	abbb0 <operator delete(void*, unsigned long)>
   ab248:	d503201f 	nop
   ab24c:	d503201f 	nop

00000000000ab250 <CVirtualGPIOPin::Write(unsigned int)>:
   ab250:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ab254:	910003fd 	mov	x29, sp
   ab258:	a90153f3 	stp	x19, x20, [sp, #16]
   ab25c:	2a0103f4 	mov	w20, w1
   ab260:	39402001 	ldrb	w1, [x0, #8]
   ab264:	aa0003f3 	mov	x19, x0
   ab268:	b9400c00 	ldr	w0, [x0, #12]
   ab26c:	36000281 	tbz	w1, #0, ab2bc <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   ab270:	35000700 	cbnz	w0, ab350 <CVirtualGPIOPin::Write(unsigned int)+0x100>
   ab274:	9100c3f3 	add	x19, sp, #0x30
   ab278:	52800001 	mov	w1, #0x0                   	// #0
   ab27c:	aa1303e0 	mov	x0, x19
   ab280:	97ffdb48 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ab284:	52801045 	mov	w5, #0x82                  	// #130
   ab288:	9100e3e2 	add	x2, sp, #0x38
   ab28c:	52900821 	mov	w1, #0x8041                	// #32833
   ab290:	72a00061 	movk	w1, #0x3, lsl #16
   ab294:	52800104 	mov	w4, #0x8                   	// #8
   ab298:	52800283 	mov	w3, #0x14                  	// #20
   ab29c:	aa1303e0 	mov	x0, x19
   ab2a0:	2908d3e5 	stp	w5, w20, [sp, #68]
   ab2a4:	97ffdb9f 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ab2a8:	aa1303e0 	mov	x0, x19
   ab2ac:	97ffdb41 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ab2b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab2b4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab2b8:	d65f03c0 	ret
   ab2bc:	2a000280 	orr	w0, w20, w0
   ab2c0:	7100041f 	cmp	w0, #0x1
   ab2c4:	54ffff68 	b.hi	ab2b0 <CVirtualGPIOPin::Write(unsigned int)+0x60>  // b.pmore
   ab2c8:	f90013f5 	str	x21, [sp, #32]
   ab2cc:	f00000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   ab2d0:	9133a2a1 	add	x1, x21, #0xce8
   ab2d4:	f94676a0 	ldr	x0, [x21, #3304]
   ab2d8:	b50000a0 	cbnz	x0, ab2ec <CVirtualGPIOPin::Write(unsigned int)+0x9c>
   ab2dc:	f94013f5 	ldr	x21, [sp, #32]
   ab2e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab2e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab2e8:	d65f03c0 	ret
   ab2ec:	b9400820 	ldr	w0, [x1, #8]
   ab2f0:	35000500 	cbnz	w0, ab390 <CVirtualGPIOPin::Write(unsigned int)+0x140>
   ab2f4:	79402a60 	ldrh	w0, [x19, #20]
   ab2f8:	79402e61 	ldrh	w1, [x19, #22]
   ab2fc:	b9001274 	str	w20, [x19, #16]
   ab300:	4b010002 	sub	w2, w0, w1
   ab304:	13003c42 	sxth	w2, w2
   ab308:	7100005f 	cmp	w2, #0x0
   ab30c:	5400038d 	b.le	ab37c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   ab310:	350002d4 	cbnz	w20, ab368 <CVirtualGPIOPin::Write(unsigned int)+0x118>
   ab314:	11000421 	add	w1, w1, #0x1
   ab318:	12003c21 	and	w1, w1, #0xffff
   ab31c:	79002e61 	strh	w1, [x19, #22]
   ab320:	b9400e62 	ldr	w2, [x19, #12]
   ab324:	2a004020 	orr	w0, w1, w0, lsl #16
   ab328:	f94676a4 	ldr	x4, [x21, #3304]
   ab32c:	9133a2a3 	add	x3, x21, #0xce8
   ab330:	531e7441 	lsl	w1, w2, #2
   ab334:	b8214880 	str	w0, [x4, w1, uxtw]
   ab338:	b9400860 	ldr	w0, [x3, #8]
   ab33c:	34fffd00 	cbz	w0, ab2dc <CVirtualGPIOPin::Write(unsigned int)+0x8c>
   ab340:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab344:	f94013f5 	ldr	x21, [sp, #32]
   ab348:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab34c:	1400077d 	b	ad140 <LeaveCritical>
   ab350:	90000081 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ab354:	910d6021 	add	x1, x1, #0x358
   ab358:	91006020 	add	x0, x1, #0x18
   ab35c:	52800b62 	mov	w2, #0x5b                  	// #91
   ab360:	f90013f5 	str	x21, [sp, #32]
   ab364:	97ffdae7 	bl	a1f00 <assertion_failed>
   ab368:	9133a2b5 	add	x21, x21, #0xce8
   ab36c:	b9400aa0 	ldr	w0, [x21, #8]
   ab370:	35fffe80 	cbnz	w0, ab340 <CVirtualGPIOPin::Write(unsigned int)+0xf0>
   ab374:	f94013f5 	ldr	x21, [sp, #32]
   ab378:	17ffffda 	b	ab2e0 <CVirtualGPIOPin::Write(unsigned int)+0x90>
   ab37c:	34ffff74 	cbz	w20, ab368 <CVirtualGPIOPin::Write(unsigned int)+0x118>
   ab380:	11000400 	add	w0, w0, #0x1
   ab384:	12003c00 	and	w0, w0, #0xffff
   ab388:	79002a60 	strh	w0, [x19, #20]
   ab38c:	17ffffe5 	b	ab320 <CVirtualGPIOPin::Write(unsigned int)+0xd0>
   ab390:	9400073c 	bl	ad080 <EnterCritical>
   ab394:	17ffffd8 	b	ab2f4 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   ab398:	d503201f 	nop
   ab39c:	d503201f 	nop

00000000000ab3a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   ab3a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ab3a4:	72001c42 	ands	w2, w2, #0xff
   ab3a8:	7a410822 	ccmp	w1, #0x1, #0x2, eq	// eq = none
   ab3ac:	910003fd 	mov	x29, sp
   ab3b0:	a90153f3 	stp	x19, x20, [sp, #16]
   ab3b4:	aa0003f3 	mov	x19, x0
   ab3b8:	f00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ab3bc:	9128c000 	add	x0, x0, #0xa30
   ab3c0:	f9000260 	str	x0, [x19]
   ab3c4:	39002262 	strb	w2, [x19, #8]
   ab3c8:	b9000e61 	str	w1, [x19, #12]
   ab3cc:	b900167f 	str	wzr, [x19, #20]
   ab3d0:	54000089 	b.ls	ab3e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>  // b.plast
   ab3d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab3d8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab3dc:	d65f03c0 	ret
   ab3e0:	f00000f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   ab3e4:	9133a280 	add	x0, x20, #0xce8
   ab3e8:	b9400800 	ldr	w0, [x0, #8]
   ab3ec:	350001c0 	cbnz	w0, ab424 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x84>
   ab3f0:	f9467680 	ldr	x0, [x20, #3304]
   ab3f4:	b40001e0 	cbz	x0, ab430 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   ab3f8:	b9400e61 	ldr	w1, [x19, #12]
   ab3fc:	9133a294 	add	x20, x20, #0xce8
   ab400:	531e7421 	lsl	w1, w1, #2
   ab404:	b821481f 	str	wzr, [x0, w1, uxtw]
   ab408:	b9400a80 	ldr	w0, [x20, #8]
   ab40c:	350004a0 	cbnz	w0, ab4a0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>
   ab410:	aa1303e0 	mov	x0, x19
   ab414:	52800001 	mov	w1, #0x0                   	// #0
   ab418:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab41c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab420:	17ffff8c 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   ab424:	94000717 	bl	ad080 <EnterCritical>
   ab428:	f9467680 	ldr	x0, [x20, #3304]
   ab42c:	b5fffe60 	cbnz	x0, ab3f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   ab430:	52800020 	mov	w0, #0x1                   	// #1
   ab434:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab438:	94000706 	bl	ad050 <CMemorySystem::GetCoherentPage(unsigned int)>
   ab43c:	9100e3f5 	add	x21, sp, #0x38
   ab440:	f9067680 	str	x0, [x20, #3304]
   ab444:	52800001 	mov	w1, #0x0                   	// #0
   ab448:	aa1503e0 	mov	x0, x21
   ab44c:	97ffdad5 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ab450:	910103f6 	add	x22, sp, #0x40
   ab454:	f9467685 	ldr	x5, [x20, #3304]
   ab458:	52900401 	mov	w1, #0x8020                	// #32800
   ab45c:	72a00081 	movk	w1, #0x4, lsl #16
   ab460:	aa1603e2 	mov	x2, x22
   ab464:	320204a5 	orr	w5, w5, #0xc0000000
   ab468:	aa1503e0 	mov	x0, x21
   ab46c:	52800084 	mov	w4, #0x4                   	// #4
   ab470:	52800203 	mov	w3, #0x10                  	// #16
   ab474:	b9004fe5 	str	w5, [sp, #76]
   ab478:	97ffdb2a 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ab47c:	360001e0 	tbz	w0, #0, ab4b8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   ab480:	aa1503e0 	mov	x0, x21
   ab484:	97ffdacb 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ab488:	f9467680 	ldr	x0, [x20, #3304]
   ab48c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab490:	b5fffb40 	cbnz	x0, ab3f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   ab494:	9133a294 	add	x20, x20, #0xce8
   ab498:	b9400a80 	ldr	w0, [x20, #8]
   ab49c:	34fffba0 	cbz	w0, ab410 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   ab4a0:	94000728 	bl	ad140 <LeaveCritical>
   ab4a4:	aa1303e0 	mov	x0, x19
   ab4a8:	52800001 	mov	w1, #0x0                   	// #0
   ab4ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab4b0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab4b4:	17ffff67 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   ab4b8:	52800201 	mov	w1, #0x10                  	// #16
   ab4bc:	72a00081 	movk	w1, #0x4, lsl #16
   ab4c0:	aa1603e2 	mov	x2, x22
   ab4c4:	aa1503e0 	mov	x0, x21
   ab4c8:	52800004 	mov	w4, #0x0                   	// #0
   ab4cc:	52800203 	mov	w3, #0x10                  	// #16
   ab4d0:	97ffdb14 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ab4d4:	360000a0 	tbz	w0, #0, ab4e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   ab4d8:	b9404fe0 	ldr	w0, [sp, #76]
   ab4dc:	92407400 	and	x0, x0, #0x3fffffff
   ab4e0:	f9067680 	str	x0, [x20, #3304]
   ab4e4:	17ffffe7 	b	ab480 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   ab4e8:	f906769f 	str	xzr, [x20, #3304]
   ab4ec:	17ffffe5 	b	ab480 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>

00000000000ab4f0 <CVirtualGPIOPin::Invert()>:
   ab4f0:	b9401001 	ldr	w1, [x0, #16]
   ab4f4:	52000021 	eor	w1, w1, #0x1
   ab4f8:	17ffff56 	b	ab250 <CVirtualGPIOPin::Write(unsigned int)>
   ab4fc:	00000000 	udf	#0

00000000000ab500 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   ab500:	f00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ab504:	b90cf01f 	str	wzr, [x0, #3312]
   ab508:	d65f03c0 	ret
   ab50c:	00000000 	udf	#0

00000000000ab510 <ChainBootStub(void const*, unsigned long)>:
   ab510:	91000c21 	add	x1, x1, #0x3
   ab514:	d342fc21 	lsr	x1, x1, #2
   ab518:	b4000181 	cbz	x1, ab548 <ChainBootStub(void const*, unsigned long)+0x38>
   ab51c:	91408021 	add	x1, x1, #0x20, lsl #12
   ab520:	d1420004 	sub	x4, x0, #0x80, lsl #12
   ab524:	d1001084 	sub	x4, x4, #0x4
   ab528:	d2a00100 	mov	x0, #0x80000               	// #524288
   ab52c:	d37ef421 	lsl	x1, x1, #2
   ab530:	aa0003e2 	mov	x2, x0
   ab534:	91001000 	add	x0, x0, #0x4
   ab538:	eb01001f 	cmp	x0, x1
   ab53c:	b8646803 	ldr	w3, [x0, x4]
   ab540:	b9000043 	str	w3, [x2]
   ab544:	54ffff61 	b.ne	ab530 <ChainBootStub(void const*, unsigned long)+0x20>  // b.any
   ab548:	d508751f 	ic	iallu
   ab54c:	d5033f9f 	dsb	sy
   ab550:	d5033fdf 	isb
   ab554:	d2a00100 	mov	x0, #0x80000               	// #524288
   ab558:	aa0003f0 	mov	x16, x0
   ab55c:	d61f0200 	br	x16

00000000000ab560 <EnableChainBoot>:
   ab560:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab564:	aa0103e4 	mov	x4, x1
   ab568:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   ab56c:	9133e043 	add	x3, x2, #0xcf8
   ab570:	910003fd 	mov	x29, sp
   ab574:	90000001 	adrp	x1, ab000 <strtoul+0x60>
   ab578:	f9067c40 	str	x0, [x2, #3320]
   ab57c:	91144021 	add	x1, x1, #0x510
   ab580:	d2808002 	mov	x2, #0x400                 	// #1024
   ab584:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   ab588:	f9000464 	str	x4, [x3, #8]
   ab58c:	97ffff0f 	bl	ab1c8 <memcpy>
   ab590:	d508751f 	ic	iallu
   ab594:	d5033f9f 	dsb	sy
   ab598:	d5033fdf 	isb
   ab59c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab5a0:	d65f03c0 	ret
   ab5a4:	d503201f 	nop
   ab5a8:	d503201f 	nop
   ab5ac:	d503201f 	nop

00000000000ab5b0 <IsChainBootEnabled>:
   ab5b0:	f00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ab5b4:	f9467c00 	ldr	x0, [x0, #3320]
   ab5b8:	f100001f 	cmp	x0, #0x0
   ab5bc:	1a9f07e0 	cset	w0, ne	// ne = any
   ab5c0:	d65f03c0 	ret
   ab5c4:	d503201f 	nop
   ab5c8:	d503201f 	nop
   ab5cc:	d503201f 	nop

00000000000ab5d0 <DoChainBoot>:
   ab5d0:	d4000002 	hvc	#0x0
   ab5d4:	f00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ab5d8:	9133e001 	add	x1, x0, #0xcf8
   ab5dc:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   ab5e0:	aa0203f0 	mov	x16, x2
   ab5e4:	f9467c00 	ldr	x0, [x0, #3320]
   ab5e8:	f9400421 	ldr	x1, [x1, #8]
   ab5ec:	d61f0200 	br	x16

00000000000ab5f0 <CMACAddress::CMACAddress()>:
   ab5f0:	3900001f 	strb	wzr, [x0]
   ab5f4:	d65f03c0 	ret
   ab5f8:	d503201f 	nop
   ab5fc:	d503201f 	nop

00000000000ab600 <CMACAddress::CMACAddress(unsigned char const*)>:
   ab600:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab604:	910003fd 	mov	x29, sp
   ab608:	f9000bf3 	str	x19, [sp, #16]
   ab60c:	b4000141 	cbz	x1, ab634 <CMACAddress::CMACAddress(unsigned char const*)+0x34>
   ab610:	aa0003f3 	mov	x19, x0
   ab614:	d28000c2 	mov	x2, #0x6                   	// #6
   ab618:	91000400 	add	x0, x0, #0x1
   ab61c:	97fffeeb 	bl	ab1c8 <memcpy>
   ab620:	52800020 	mov	w0, #0x1                   	// #1
   ab624:	39000260 	strb	w0, [x19]
   ab628:	f9400bf3 	ldr	x19, [sp, #16]
   ab62c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab630:	d65f03c0 	ret
   ab634:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab638:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ab63c:	912f4021 	add	x1, x1, #0xbd0
   ab640:	912f8000 	add	x0, x0, #0xbe0
   ab644:	52800682 	mov	w2, #0x34                  	// #52
   ab648:	97ffda2e 	bl	a1f00 <assertion_failed>
   ab64c:	d503201f 	nop

00000000000ab650 <CMACAddress::~CMACAddress()>:
   ab650:	d65f03c0 	ret
   ab654:	d503201f 	nop
   ab658:	d503201f 	nop
   ab65c:	d503201f 	nop

00000000000ab660 <CMACAddress::operator==(CMACAddress const&) const>:
   ab660:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab664:	910003fd 	mov	x29, sp
   ab668:	39400002 	ldrb	w2, [x0]
   ab66c:	36000162 	tbz	w2, #0, ab698 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   ab670:	39400022 	ldrb	w2, [x1]
   ab674:	91000400 	add	x0, x0, #0x1
   ab678:	360001c2 	tbz	w2, #0, ab6b0 <CMACAddress::operator==(CMACAddress const&) const+0x50>
   ab67c:	91000421 	add	x1, x1, #0x1
   ab680:	d28000c2 	mov	x2, #0x6                   	// #6
   ab684:	97fffd2f 	bl	aab40 <memcmp>
   ab688:	7100001f 	cmp	w0, #0x0
   ab68c:	1a9f17e0 	cset	w0, eq	// eq = none
   ab690:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab694:	d65f03c0 	ret
   ab698:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab69c:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab6a0:	912f4021 	add	x1, x1, #0xbd0
   ab6a4:	9120a000 	add	x0, x0, #0x828
   ab6a8:	52800522 	mov	w2, #0x29                  	// #41
   ab6ac:	97ffda15 	bl	a1f00 <assertion_failed>
   ab6b0:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab6b4:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab6b8:	912f4021 	add	x1, x1, #0xbd0
   ab6bc:	9120a000 	add	x0, x0, #0x828
   ab6c0:	52800822 	mov	w2, #0x41                  	// #65
   ab6c4:	97ffda0f 	bl	a1f00 <assertion_failed>
   ab6c8:	d503201f 	nop
   ab6cc:	d503201f 	nop

00000000000ab6d0 <CMACAddress::operator!=(CMACAddress const&) const>:
   ab6d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab6d4:	910003fd 	mov	x29, sp
   ab6d8:	39400002 	ldrb	w2, [x0]
   ab6dc:	36000162 	tbz	w2, #0, ab708 <CMACAddress::operator!=(CMACAddress const&) const+0x38>
   ab6e0:	39400022 	ldrb	w2, [x1]
   ab6e4:	91000400 	add	x0, x0, #0x1
   ab6e8:	360001c2 	tbz	w2, #0, ab720 <CMACAddress::operator!=(CMACAddress const&) const+0x50>
   ab6ec:	91000421 	add	x1, x1, #0x1
   ab6f0:	d28000c2 	mov	x2, #0x6                   	// #6
   ab6f4:	97fffd13 	bl	aab40 <memcmp>
   ab6f8:	7100001f 	cmp	w0, #0x0
   ab6fc:	1a9f07e0 	cset	w0, ne	// ne = any
   ab700:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab704:	d65f03c0 	ret
   ab708:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab70c:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab710:	912f4021 	add	x1, x1, #0xbd0
   ab714:	9120a000 	add	x0, x0, #0x828
   ab718:	52800522 	mov	w2, #0x29                  	// #41
   ab71c:	97ffd9f9 	bl	a1f00 <assertion_failed>
   ab720:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab724:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab728:	912f4021 	add	x1, x1, #0xbd0
   ab72c:	9120a000 	add	x0, x0, #0x828
   ab730:	52800822 	mov	w2, #0x41                  	// #65
   ab734:	97ffd9f3 	bl	a1f00 <assertion_failed>
   ab738:	d503201f 	nop
   ab73c:	d503201f 	nop

00000000000ab740 <CMACAddress::Set(unsigned char const*)>:
   ab740:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab744:	910003fd 	mov	x29, sp
   ab748:	f9000bf3 	str	x19, [sp, #16]
   ab74c:	b4000141 	cbz	x1, ab774 <CMACAddress::Set(unsigned char const*)+0x34>
   ab750:	aa0003f3 	mov	x19, x0
   ab754:	d28000c2 	mov	x2, #0x6                   	// #6
   ab758:	91000400 	add	x0, x0, #0x1
   ab75c:	97fffe9b 	bl	ab1c8 <memcpy>
   ab760:	52800020 	mov	w0, #0x1                   	// #1
   ab764:	39000260 	strb	w0, [x19]
   ab768:	f9400bf3 	ldr	x19, [sp, #16]
   ab76c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab770:	d65f03c0 	ret
   ab774:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab778:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ab77c:	912f4021 	add	x1, x1, #0xbd0
   ab780:	912f8000 	add	x0, x0, #0xbe0
   ab784:	52800682 	mov	w2, #0x34                  	// #52
   ab788:	97ffd9de 	bl	a1f00 <assertion_failed>
   ab78c:	d503201f 	nop

00000000000ab790 <CMACAddress::SetBroadcast()>:
   ab790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab794:	d28000c2 	mov	x2, #0x6                   	// #6
   ab798:	52801fe1 	mov	w1, #0xff                  	// #255
   ab79c:	910003fd 	mov	x29, sp
   ab7a0:	f9000bf3 	str	x19, [sp, #16]
   ab7a4:	aa0003f3 	mov	x19, x0
   ab7a8:	91000400 	add	x0, x0, #0x1
   ab7ac:	97fffe6f 	bl	ab168 <memset>
   ab7b0:	52800020 	mov	w0, #0x1                   	// #1
   ab7b4:	39000260 	strb	w0, [x19]
   ab7b8:	f9400bf3 	ldr	x19, [sp, #16]
   ab7bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab7c0:	d65f03c0 	ret
   ab7c4:	d503201f 	nop
   ab7c8:	d503201f 	nop
   ab7cc:	d503201f 	nop

00000000000ab7d0 <CMACAddress::Get() const>:
   ab7d0:	39400001 	ldrb	w1, [x0]
   ab7d4:	36000061 	tbz	w1, #0, ab7e0 <CMACAddress::Get() const+0x10>
   ab7d8:	91000400 	add	x0, x0, #0x1
   ab7dc:	d65f03c0 	ret
   ab7e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab7e4:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab7e8:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab7ec:	910003fd 	mov	x29, sp
   ab7f0:	912f4021 	add	x1, x1, #0xbd0
   ab7f4:	9120a000 	add	x0, x0, #0x828
   ab7f8:	52800822 	mov	w2, #0x41                  	// #65
   ab7fc:	97ffd9c1 	bl	a1f00 <assertion_failed>

00000000000ab800 <CMACAddress::CopyTo(unsigned char*) const>:
   ab800:	aa0003e2 	mov	x2, x0
   ab804:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab808:	aa0103e0 	mov	x0, x1
   ab80c:	910003fd 	mov	x29, sp
   ab810:	39400041 	ldrb	w1, [x2]
   ab814:	360000c1 	tbz	w1, #0, ab82c <CMACAddress::CopyTo(unsigned char*) const+0x2c>
   ab818:	b4000160 	cbz	x0, ab844 <CMACAddress::CopyTo(unsigned char*) const+0x44>
   ab81c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab820:	91000441 	add	x1, x2, #0x1
   ab824:	d28000c2 	mov	x2, #0x6                   	// #6
   ab828:	17fffe68 	b	ab1c8 <memcpy>
   ab82c:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab830:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab834:	912f4021 	add	x1, x1, #0xbd0
   ab838:	9120a000 	add	x0, x0, #0x828
   ab83c:	528008e2 	mov	w2, #0x47                  	// #71
   ab840:	97ffd9b0 	bl	a1f00 <assertion_failed>
   ab844:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab848:	f0000020 	adrp	x0, b2000 <SErrorStub+0xc>
   ab84c:	912f4021 	add	x1, x1, #0xbd0
   ab850:	91384000 	add	x0, x0, #0xe10
   ab854:	52800902 	mov	w2, #0x48                  	// #72
   ab858:	97ffd9aa 	bl	a1f00 <assertion_failed>
   ab85c:	d503201f 	nop

00000000000ab860 <CMACAddress::IsBroadcast() const>:
   ab860:	aa0003e1 	mov	x1, x0
   ab864:	91001c03 	add	x3, x0, #0x7
   ab868:	38401420 	ldrb	w0, [x1], #1
   ab86c:	36000140 	tbz	w0, #0, ab894 <CMACAddress::IsBroadcast() const+0x34>
   ab870:	39400022 	ldrb	w2, [x1]
   ab874:	7103fc5f 	cmp	w2, #0xff
   ab878:	540000a1 	b.ne	ab88c <CMACAddress::IsBroadcast() const+0x2c>  // b.any
   ab87c:	91000421 	add	x1, x1, #0x1
   ab880:	eb03003f 	cmp	x1, x3
   ab884:	54ffff61 	b.ne	ab870 <CMACAddress::IsBroadcast() const+0x10>  // b.any
   ab888:	d65f03c0 	ret
   ab88c:	52800000 	mov	w0, #0x0                   	// #0
   ab890:	d65f03c0 	ret
   ab894:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab898:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab89c:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab8a0:	910003fd 	mov	x29, sp
   ab8a4:	912f4021 	add	x1, x1, #0xbd0
   ab8a8:	9120a000 	add	x0, x0, #0x828
   ab8ac:	528009c2 	mov	w2, #0x4e                  	// #78
   ab8b0:	97ffd994 	bl	a1f00 <assertion_failed>
   ab8b4:	d503201f 	nop
   ab8b8:	d503201f 	nop
   ab8bc:	d503201f 	nop

00000000000ab8c0 <CMACAddress::GetSize() const>:
   ab8c0:	528000c0 	mov	w0, #0x6                   	// #6
   ab8c4:	d65f03c0 	ret
   ab8c8:	d503201f 	nop
   ab8cc:	d503201f 	nop

00000000000ab8d0 <CMACAddress::Format(CString*) const>:
   ab8d0:	aa0003e2 	mov	x2, x0
   ab8d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab8d8:	aa0103e0 	mov	x0, x1
   ab8dc:	910003fd 	mov	x29, sp
   ab8e0:	39400041 	ldrb	w1, [x2]
   ab8e4:	36000181 	tbz	w1, #0, ab914 <CMACAddress::Format(CString*) const+0x44>
   ab8e8:	b4000220 	cbz	x0, ab92c <CMACAddress::Format(CString*) const+0x5c>
   ab8ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab8f0:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab8f4:	39401847 	ldrb	w7, [x2, #6]
   ab8f8:	91300021 	add	x1, x1, #0xc00
   ab8fc:	39401446 	ldrb	w6, [x2, #5]
   ab900:	39401045 	ldrb	w5, [x2, #4]
   ab904:	39400c44 	ldrb	w4, [x2, #3]
   ab908:	39400843 	ldrb	w3, [x2, #2]
   ab90c:	39400442 	ldrb	w2, [x2, #1]
   ab910:	17fff80c 	b	a9940 <CString::Format(char const*, ...)>
   ab914:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab918:	d0000040 	adrp	x0, b5000 <_etext+0x29c8>
   ab91c:	912f4021 	add	x1, x1, #0xbd0
   ab920:	9120a000 	add	x0, x0, #0x828
   ab924:	52800c42 	mov	w2, #0x62                  	// #98
   ab928:	97ffd976 	bl	a1f00 <assertion_failed>
   ab92c:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ab930:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ab934:	912f4021 	add	x1, x1, #0xbd0
   ab938:	912fc000 	add	x0, x0, #0xbf0
   ab93c:	52800c62 	mov	w2, #0x63                  	// #99
   ab940:	97ffd970 	bl	a1f00 <assertion_failed>
	...

00000000000ab950 <CNetDevice::AddNetDevice()>:
   ab950:	f00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ab954:	91344023 	add	x3, x1, #0xd10
   ab958:	b94d1022 	ldr	w2, [x1, #3344]
   ab95c:	7100105f 	cmp	w2, #0x4
   ab960:	540000a8 	b.hi	ab974 <CNetDevice::AddNetDevice()+0x24>  // b.pmore
   ab964:	91004063 	add	x3, x3, #0x10
   ab968:	11000444 	add	w4, w2, #0x1
   ab96c:	b90d1024 	str	w4, [x1, #3344]
   ab970:	f8225860 	str	x0, [x3, w2, uxtw #3]
   ab974:	d65f03c0 	ret
   ab978:	d503201f 	nop
   ab97c:	d503201f 	nop

00000000000ab980 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   ab980:	7100141f 	cmp	w0, #0x5
   ab984:	540000ac 	b.gt	ab998 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   ab988:	f00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ab98c:	91290021 	add	x1, x1, #0xa40
   ab990:	f860d820 	ldr	x0, [x1, w0, sxtw #3]
   ab994:	d65f03c0 	ret
   ab998:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ab99c:	91308000 	add	x0, x0, #0xc20
   ab9a0:	d65f03c0 	ret
   ab9a4:	d503201f 	nop
   ab9a8:	d503201f 	nop
   ab9ac:	d503201f 	nop

00000000000ab9b0 <CNetDevice::GetNetDevice(unsigned int)>:
   ab9b0:	f00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ab9b4:	91344022 	add	x2, x1, #0xd10
   ab9b8:	b94d1021 	ldr	w1, [x1, #3344]
   ab9bc:	6b00003f 	cmp	w1, w0
   ab9c0:	54000089 	b.ls	ab9d0 <CNetDevice::GetNetDevice(unsigned int)+0x20>  // b.plast
   ab9c4:	91004042 	add	x2, x2, #0x10
   ab9c8:	f8605840 	ldr	x0, [x2, w0, uxtw #3]
   ab9cc:	d65f03c0 	ret
   ab9d0:	d2800000 	mov	x0, #0x0                   	// #0
   ab9d4:	d65f03c0 	ret
   ab9d8:	d503201f 	nop
   ab9dc:	d503201f 	nop

00000000000ab9e0 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   ab9e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ab9e4:	910003fd 	mov	x29, sp
   ab9e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab9ec:	f00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ab9f0:	91344036 	add	x22, x1, #0xd10
   ab9f4:	b94d1021 	ldr	w1, [x1, #3344]
   ab9f8:	a90153f3 	stp	x19, x20, [sp, #16]
   ab9fc:	340004a1 	cbz	w1, aba90 <CNetDevice::GetNetDevice(TNetDeviceType)+0xb0>
   aba00:	f9400ad4 	ldr	x20, [x22, #16]
   aba04:	b4000474 	cbz	x20, aba90 <CNetDevice::GetNetDevice(TNetDeviceType)+0xb0>
   aba08:	2a0003f5 	mov	w21, w0
   aba0c:	7100081f 	cmp	w0, #0x2
   aba10:	54000340 	b.eq	aba78 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>  // b.none
   aba14:	d2800013 	mov	x19, #0x0                   	// #0
   aba18:	a90363f7 	stp	x23, x24, [sp, #48]
   aba1c:	b0ffff97 	adrp	x23, 9c000 <CLAN7800Device::InitPHY()+0x60>
   aba20:	911902f7 	add	x23, x23, #0x640
   aba24:	910042d8 	add	x24, x22, #0x10
   aba28:	14000009 	b	aba4c <CNetDevice::GetNetDevice(TNetDeviceType)+0x6c>
   aba2c:	91000673 	add	x19, x19, #0x1
   aba30:	6b15001f 	cmp	w0, w21
   aba34:	54000200 	b.eq	aba74 <CNetDevice::GetNetDevice(TNetDeviceType)+0x94>  // b.none
   aba38:	b94002c1 	ldr	w1, [x22]
   aba3c:	6b13003f 	cmp	w1, w19
   aba40:	54000269 	b.ls	aba8c <CNetDevice::GetNetDevice(TNetDeviceType)+0xac>  // b.plast
   aba44:	f8737b14 	ldr	x20, [x24, x19, lsl #3]
   aba48:	b4000234 	cbz	x20, aba8c <CNetDevice::GetNetDevice(TNetDeviceType)+0xac>
   aba4c:	f9400281 	ldr	x1, [x20]
   aba50:	52800000 	mov	w0, #0x0                   	// #0
   aba54:	f9400821 	ldr	x1, [x1, #16]
   aba58:	eb17003f 	cmp	x1, x23
   aba5c:	54fffe80 	b.eq	aba2c <CNetDevice::GetNetDevice(TNetDeviceType)+0x4c>  // b.none
   aba60:	aa1403e0 	mov	x0, x20
   aba64:	91000673 	add	x19, x19, #0x1
   aba68:	d63f0020 	blr	x1
   aba6c:	6b15001f 	cmp	w0, w21
   aba70:	54fffe41 	b.ne	aba38 <CNetDevice::GetNetDevice(TNetDeviceType)+0x58>  // b.any
   aba74:	a94363f7 	ldp	x23, x24, [sp, #48]
   aba78:	aa1403e0 	mov	x0, x20
   aba7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aba80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aba84:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aba88:	d65f03c0 	ret
   aba8c:	a94363f7 	ldp	x23, x24, [sp, #48]
   aba90:	d2800014 	mov	x20, #0x0                   	// #0
   aba94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aba98:	aa1403e0 	mov	x0, x20
   aba9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   abaa0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   abaa4:	d65f03c0 	ret
	...

00000000000abab0 <operator new(unsigned long, int)>:
   abab0:	721e783f 	tst	w1, #0xfffffffd
   abab4:	54000060 	b.eq	abac0 <operator new(unsigned long, int)+0x10>  // b.none
   abab8:	d2800000 	mov	x0, #0x0                   	// #0
   ababc:	d65f03c0 	ret
   abac0:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abac4:	f945b042 	ldr	x2, [x2, #2912]
   abac8:	aa0003e1 	mov	x1, x0
   abacc:	f9400040 	ldr	x0, [x2]
   abad0:	91006000 	add	x0, x0, #0x18
   abad4:	1400006f 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   abad8:	d503201f 	nop
   abadc:	d503201f 	nop

00000000000abae0 <operator new[](unsigned long, int)>:
   abae0:	721e783f 	tst	w1, #0xfffffffd
   abae4:	54000060 	b.eq	abaf0 <operator new[](unsigned long, int)+0x10>  // b.none
   abae8:	d2800000 	mov	x0, #0x0                   	// #0
   abaec:	d65f03c0 	ret
   abaf0:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abaf4:	f945b042 	ldr	x2, [x2, #2912]
   abaf8:	aa0003e1 	mov	x1, x0
   abafc:	f9400040 	ldr	x0, [x2]
   abb00:	91006000 	add	x0, x0, #0x18
   abb04:	14000063 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   abb08:	d503201f 	nop
   abb0c:	d503201f 	nop

00000000000abb10 <operator new(unsigned long, void*)>:
   abb10:	aa0103e0 	mov	x0, x1
   abb14:	d65f03c0 	ret
   abb18:	d503201f 	nop
   abb1c:	d503201f 	nop

00000000000abb20 <operator new[](unsigned long, void*)>:
   abb20:	aa0103e0 	mov	x0, x1
   abb24:	d65f03c0 	ret
   abb28:	d503201f 	nop
   abb2c:	d503201f 	nop

00000000000abb30 <operator new(unsigned long)>:
   abb30:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abb34:	f945b042 	ldr	x2, [x2, #2912]
   abb38:	aa0003e1 	mov	x1, x0
   abb3c:	f9400040 	ldr	x0, [x2]
   abb40:	91006000 	add	x0, x0, #0x18
   abb44:	14000053 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   abb48:	d503201f 	nop
   abb4c:	d503201f 	nop

00000000000abb50 <operator new[](unsigned long)>:
   abb50:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abb54:	f945b042 	ldr	x2, [x2, #2912]
   abb58:	aa0003e1 	mov	x1, x0
   abb5c:	f9400040 	ldr	x0, [x2]
   abb60:	91006000 	add	x0, x0, #0x18
   abb64:	1400004b 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   abb68:	d503201f 	nop
   abb6c:	d503201f 	nop

00000000000abb70 <operator delete(void*)>:
   abb70:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abb74:	f945b042 	ldr	x2, [x2, #2912]
   abb78:	aa0003e1 	mov	x1, x0
   abb7c:	f9400040 	ldr	x0, [x2]
   abb80:	91006000 	add	x0, x0, #0x18
   abb84:	140000cb 	b	abeb0 <CHeapAllocator::Free(void*)>
   abb88:	d503201f 	nop
   abb8c:	d503201f 	nop

00000000000abb90 <operator delete[](void*)>:
   abb90:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abb94:	f945b042 	ldr	x2, [x2, #2912]
   abb98:	aa0003e1 	mov	x1, x0
   abb9c:	f9400040 	ldr	x0, [x2]
   abba0:	91006000 	add	x0, x0, #0x18
   abba4:	140000c3 	b	abeb0 <CHeapAllocator::Free(void*)>
   abba8:	d503201f 	nop
   abbac:	d503201f 	nop

00000000000abbb0 <operator delete(void*, unsigned long)>:
   abbb0:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abbb4:	f945b042 	ldr	x2, [x2, #2912]
   abbb8:	aa0003e1 	mov	x1, x0
   abbbc:	f9400040 	ldr	x0, [x2]
   abbc0:	91006000 	add	x0, x0, #0x18
   abbc4:	140000bb 	b	abeb0 <CHeapAllocator::Free(void*)>
   abbc8:	d503201f 	nop
   abbcc:	d503201f 	nop

00000000000abbd0 <operator delete[](void*, unsigned long)>:
   abbd0:	f00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   abbd4:	f945b042 	ldr	x2, [x2, #2912]
   abbd8:	aa0003e1 	mov	x1, x0
   abbdc:	f9400040 	ldr	x0, [x2]
   abbe0:	91006000 	add	x0, x0, #0x18
   abbe4:	140000b3 	b	abeb0 <CHeapAllocator::Free(void*)>
	...

00000000000abbf0 <CHeapAllocator::CHeapAllocator(char const*)>:
   abbf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   abbf4:	aa0103e4 	mov	x4, x1
   abbf8:	52800023 	mov	w3, #0x1                   	// #1
   abbfc:	910003fd 	mov	x29, sp
   abc00:	a90153f3 	stp	x19, x20, [sp, #16]
   abc04:	aa0003f4 	mov	x20, x0
   abc08:	91008013 	add	x19, x0, #0x20
   abc0c:	52800001 	mov	w1, #0x0                   	// #0
   abc10:	aa1303e0 	mov	x0, x19
   abc14:	a9007e84 	stp	x4, xzr, [x20]
   abc18:	d2802a02 	mov	x2, #0x150                 	// #336
   abc1c:	a9017e9f 	stp	xzr, xzr, [x20, #16]
   abc20:	91024294 	add	x20, x20, #0x90
   abc24:	b900e283 	str	w3, [x20, #224]
   abc28:	97fffd50 	bl	ab168 <memset>
   abc2c:	f00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   abc30:	9129c000 	add	x0, x0, #0xa70
   abc34:	aa1303e1 	mov	x1, x19
   abc38:	b8404402 	ldr	w2, [x0], #4
   abc3c:	b8010422 	str	w2, [x1], #16
   abc40:	eb14003f 	cmp	x1, x20
   abc44:	54ffffa1 	b.ne	abc38 <CHeapAllocator::CHeapAllocator(char const*)+0x48>  // b.any
   abc48:	a94153f3 	ldp	x19, x20, [sp, #16]
   abc4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   abc50:	d65f03c0 	ret
   abc54:	d503201f 	nop
   abc58:	d503201f 	nop
   abc5c:	d503201f 	nop

00000000000abc60 <CHeapAllocator::~CHeapAllocator()>:
   abc60:	d65f03c0 	ret
   abc64:	d503201f 	nop
   abc68:	d503201f 	nop
   abc6c:	d503201f 	nop

00000000000abc70 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>:
   abc70:	8b020022 	add	x2, x1, x2
   abc74:	a9008801 	stp	x1, x2, [x0, #8]
   abc78:	f9000c03 	str	x3, [x0, #24]
   abc7c:	d65f03c0 	ret

00000000000abc80 <CHeapAllocator::GetFreeSpace() const>:
   abc80:	a9408001 	ldp	x1, x0, [x0, #8]
   abc84:	cb010000 	sub	x0, x0, x1
   abc88:	d65f03c0 	ret
   abc8c:	d503201f 	nop

00000000000abc90 <CHeapAllocator::Allocate(unsigned long)>:
   abc90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   abc94:	910003fd 	mov	x29, sp
   abc98:	f90013f5 	str	x21, [sp, #32]
   abc9c:	aa0003f5 	mov	x21, x0
   abca0:	f9400400 	ldr	x0, [x0, #8]
   abca4:	b4000c00 	cbz	x0, abe24 <CHeapAllocator::Allocate(unsigned long)+0x194>
   abca8:	b94172a0 	ldr	w0, [x21, #368]
   abcac:	a90153f3 	stp	x19, x20, [sp, #16]
   abcb0:	aa0103f4 	mov	x20, x1
   abcb4:	35000bc0 	cbnz	w0, abe2c <CHeapAllocator::Allocate(unsigned long)+0x19c>
   abcb8:	b94022a2 	ldr	w2, [x21, #32]
   abcbc:	910082a3 	add	x3, x21, #0x20
   abcc0:	35000082 	cbnz	w2, abcd0 <CHeapAllocator::Allocate(unsigned long)+0x40>
   abcc4:	14000035 	b	abd98 <CHeapAllocator::Allocate(unsigned long)+0x108>
   abcc8:	b8410c62 	ldr	w2, [x3, #16]!
   abccc:	34000662 	cbz	w2, abd98 <CHeapAllocator::Allocate(unsigned long)+0x108>
   abcd0:	2a0203e2 	mov	w2, w2
   abcd4:	eb14005f 	cmp	x2, x20
   abcd8:	54ffff83 	b.cc	abcc8 <CHeapAllocator::Allocate(unsigned long)+0x38>  // b.lo, b.ul, b.last
   abcdc:	f9400473 	ldr	x19, [x3, #8]
   abce0:	aa0203f4 	mov	x20, x2
   abce4:	b40005b3 	cbz	x19, abd98 <CHeapAllocator::Allocate(unsigned long)+0x108>
   abce8:	39400265 	ldrb	w5, [x19]
   abcec:	5289a864 	mov	w4, #0x4d43                	// #19779
   abcf0:	72a84984 	movk	w4, #0x424c, lsl #16
   abcf4:	39400662 	ldrb	w2, [x19, #1]
   abcf8:	39400a61 	ldrb	w1, [x19, #2]
   abcfc:	39400e60 	ldrb	w0, [x19, #3]
   abd00:	aa0220a2 	orr	x2, x5, x2, lsl #8
   abd04:	aa014041 	orr	x1, x2, x1, lsl #16
   abd08:	aa006020 	orr	x0, x1, x0, lsl #24
   abd0c:	6b04001f 	cmp	w0, w4
   abd10:	54000c01 	b.ne	abe90 <CHeapAllocator::Allocate(unsigned long)+0x200>  // b.any
   abd14:	39402264 	ldrb	w4, [x19, #8]
   abd18:	39402662 	ldrb	w2, [x19, #9]
   abd1c:	39402a61 	ldrb	w1, [x19, #10]
   abd20:	39402e60 	ldrb	w0, [x19, #11]
   abd24:	aa022082 	orr	x2, x4, x2, lsl #8
   abd28:	39403264 	ldrb	w4, [x19, #12]
   abd2c:	aa014041 	orr	x1, x2, x1, lsl #16
   abd30:	39403662 	ldrb	w2, [x19, #13]
   abd34:	aa006020 	orr	x0, x1, x0, lsl #24
   abd38:	39403a61 	ldrb	w1, [x19, #14]
   abd3c:	aa048004 	orr	x4, x0, x4, lsl #32
   abd40:	39403e60 	ldrb	w0, [x19, #15]
   abd44:	aa02a082 	orr	x2, x4, x2, lsl #40
   abd48:	aa01c041 	orr	x1, x2, x1, lsl #48
   abd4c:	aa00e020 	orr	x0, x1, x0, lsl #56
   abd50:	f9000460 	str	x0, [x3, #8]
   abd54:	b94172a0 	ldr	w0, [x21, #368]
   abd58:	350005a0 	cbnz	w0, abe0c <CHeapAllocator::Allocate(unsigned long)+0x17c>
   abd5c:	3900227f 	strb	wzr, [x19, #8]
   abd60:	91010260 	add	x0, x19, #0x40
   abd64:	3900267f 	strb	wzr, [x19, #9]
   abd68:	92401661 	and	x1, x19, #0x3f
   abd6c:	39002a7f 	strb	wzr, [x19, #10]
   abd70:	39002e7f 	strb	wzr, [x19, #11]
   abd74:	3900327f 	strb	wzr, [x19, #12]
   abd78:	3900367f 	strb	wzr, [x19, #13]
   abd7c:	39003a7f 	strb	wzr, [x19, #14]
   abd80:	39003e7f 	strb	wzr, [x19, #15]
   abd84:	b50006e1 	cbnz	x1, abe60 <CHeapAllocator::Allocate(unsigned long)+0x1d0>
   abd88:	a94153f3 	ldp	x19, x20, [sp, #16]
   abd8c:	f94013f5 	ldr	x21, [sp, #32]
   abd90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abd94:	d65f03c0 	ret
   abd98:	f94006b3 	ldr	x19, [x21, #8]
   abd9c:	9101fe80 	add	x0, x20, #0x7f
   abda0:	927ae400 	and	x0, x0, #0xffffffffffffffc0
   abda4:	8b000260 	add	x0, x19, x0
   abda8:	f9400ea2 	ldr	x2, [x21, #24]
   abdac:	eb00027f 	cmp	x19, x0
   abdb0:	54000322 	b.cs	abe14 <CHeapAllocator::Allocate(unsigned long)+0x184>  // b.hs, b.nlast
   abdb4:	f9400aa1 	ldr	x1, [x21, #16]
   abdb8:	cb020021 	sub	x1, x1, x2
   abdbc:	eb01001f 	cmp	x0, x1
   abdc0:	540002a8 	b.hi	abe14 <CHeapAllocator::Allocate(unsigned long)+0x184>  // b.pmore
   abdc4:	f90006a0 	str	x0, [x21, #8]
   abdc8:	53083e82 	ubfx	w2, w20, #8, #8
   abdcc:	53187e80 	lsr	w0, w20, #24
   abdd0:	53105e81 	ubfx	w1, w20, #16, #8
   abdd4:	52800866 	mov	w6, #0x43                  	// #67
   abdd8:	528009a5 	mov	w5, #0x4d                  	// #77
   abddc:	52800984 	mov	w4, #0x4c                  	// #76
   abde0:	52800843 	mov	w3, #0x42                  	// #66
   abde4:	39000266 	strb	w6, [x19]
   abde8:	39000665 	strb	w5, [x19, #1]
   abdec:	39000a64 	strb	w4, [x19, #2]
   abdf0:	39000e63 	strb	w3, [x19, #3]
   abdf4:	39001274 	strb	w20, [x19, #4]
   abdf8:	39001662 	strb	w2, [x19, #5]
   abdfc:	39001a61 	strb	w1, [x19, #6]
   abe00:	39001e60 	strb	w0, [x19, #7]
   abe04:	b94172a0 	ldr	w0, [x21, #368]
   abe08:	34fffaa0 	cbz	w0, abd5c <CHeapAllocator::Allocate(unsigned long)+0xcc>
   abe0c:	940004cd 	bl	ad140 <LeaveCritical>
   abe10:	17ffffd3 	b	abd5c <CHeapAllocator::Allocate(unsigned long)+0xcc>
   abe14:	b94172a0 	ldr	w0, [x21, #368]
   abe18:	b50000e2 	cbnz	x2, abe34 <CHeapAllocator::Allocate(unsigned long)+0x1a4>
   abe1c:	350002e0 	cbnz	w0, abe78 <CHeapAllocator::Allocate(unsigned long)+0x1e8>
   abe20:	a94153f3 	ldp	x19, x20, [sp, #16]
   abe24:	d2800000 	mov	x0, #0x0                   	// #0
   abe28:	17ffffd9 	b	abd8c <CHeapAllocator::Allocate(unsigned long)+0xfc>
   abe2c:	94000495 	bl	ad080 <EnterCritical>
   abe30:	17ffffa2 	b	abcb8 <CHeapAllocator::Allocate(unsigned long)+0x28>
   abe34:	f9000ebf 	str	xzr, [x21, #24]
   abe38:	35000280 	cbnz	w0, abe88 <CHeapAllocator::Allocate(unsigned long)+0x1f8>
   abe3c:	97ffdf6d 	bl	a3bf0 <CLogger::Get()>
   abe40:	f94002a1 	ldr	x1, [x21]
   abe44:	f0000043 	adrp	x3, b6000 <_etext+0x39c8>
   abe48:	91340063 	add	x3, x3, #0xd00
   abe4c:	52800002 	mov	w2, #0x0                   	// #0
   abe50:	97ffe15c 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   abe54:	a94153f3 	ldp	x19, x20, [sp, #16]
   abe58:	d2800000 	mov	x0, #0x0                   	// #0
   abe5c:	17ffffcc 	b	abd8c <CHeapAllocator::Allocate(unsigned long)+0xfc>
   abe60:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   abe64:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   abe68:	9132e021 	add	x1, x1, #0xcb8
   abe6c:	91344000 	add	x0, x0, #0xd10
   abe70:	528011c2 	mov	w2, #0x8e                  	// #142
   abe74:	97ffd823 	bl	a1f00 <assertion_failed>
   abe78:	940004b2 	bl	ad140 <LeaveCritical>
   abe7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   abe80:	d2800000 	mov	x0, #0x0                   	// #0
   abe84:	17ffffc2 	b	abd8c <CHeapAllocator::Allocate(unsigned long)+0xfc>
   abe88:	940004ae 	bl	ad140 <LeaveCritical>
   abe8c:	17ffffec 	b	abe3c <CHeapAllocator::Allocate(unsigned long)+0x1ac>
   abe90:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   abe94:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   abe98:	9132e021 	add	x1, x1, #0xcb8
   abe9c:	91334000 	add	x0, x0, #0xcd0
   abea0:	52800bc2 	mov	w2, #0x5e                  	// #94
   abea4:	97ffd817 	bl	a1f00 <assertion_failed>
   abea8:	d503201f 	nop
   abeac:	d503201f 	nop

00000000000abeb0 <CHeapAllocator::Free(void*)>:
   abeb0:	b4000701 	cbz	x1, abf90 <CHeapAllocator::Free(void*)+0xe0>
   abeb4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   abeb8:	5289a864 	mov	w4, #0x4d43                	// #19779
   abebc:	72a84984 	movk	w4, #0x424c, lsl #16
   abec0:	910003fd 	mov	x29, sp
   abec4:	a90153f3 	stp	x19, x20, [sp, #16]
   abec8:	d1010034 	sub	x20, x1, #0x40
   abecc:	f90013f5 	str	x21, [sp, #32]
   abed0:	aa0003f5 	mov	x21, x0
   abed4:	385c0025 	ldurb	w5, [x1, #-64]
   abed8:	385c1023 	ldurb	w3, [x1, #-63]
   abedc:	385c2022 	ldurb	w2, [x1, #-62]
   abee0:	385c3020 	ldurb	w0, [x1, #-61]
   abee4:	aa0320a1 	orr	x1, x5, x3, lsl #8
   abee8:	aa024021 	orr	x1, x1, x2, lsl #16
   abeec:	aa006020 	orr	x0, x1, x0, lsl #24
   abef0:	6b04001f 	cmp	w0, w4
   abef4:	54000801 	b.ne	abff4 <CHeapAllocator::Free(void*)+0x144>  // b.any
   abef8:	b94022a1 	ldr	w1, [x21, #32]
   abefc:	910082b3 	add	x19, x21, #0x20
   abf00:	34000401 	cbz	w1, abf80 <CHeapAllocator::Free(void*)+0xd0>
   abf04:	39401284 	ldrb	w4, [x20, #4]
   abf08:	39401683 	ldrb	w3, [x20, #5]
   abf0c:	39401a80 	ldrb	w0, [x20, #6]
   abf10:	39401e82 	ldrb	w2, [x20, #7]
   abf14:	aa032083 	orr	x3, x4, x3, lsl #8
   abf18:	aa004060 	orr	x0, x3, x0, lsl #16
   abf1c:	2a026002 	orr	w2, w0, w2, lsl #24
   abf20:	14000003 	b	abf2c <CHeapAllocator::Free(void*)+0x7c>
   abf24:	b8410e61 	ldr	w1, [x19, #16]!
   abf28:	340002c1 	cbz	w1, abf80 <CHeapAllocator::Free(void*)+0xd0>
   abf2c:	6b02003f 	cmp	w1, w2
   abf30:	54ffffa1 	b.ne	abf24 <CHeapAllocator::Free(void*)+0x74>  // b.any
   abf34:	b94172a0 	ldr	w0, [x21, #368]
   abf38:	350002e0 	cbnz	w0, abf94 <CHeapAllocator::Free(void*)+0xe4>
   abf3c:	f9400660 	ldr	x0, [x19, #8]
   abf40:	39002280 	strb	w0, [x20, #8]
   abf44:	53083c06 	ubfx	w6, w0, #8, #8
   abf48:	53105c05 	ubfx	w5, w0, #16, #8
   abf4c:	53187c04 	lsr	w4, w0, #24
   abf50:	d3609c03 	ubfx	x3, x0, #32, #8
   abf54:	d368bc02 	ubfx	x2, x0, #40, #8
   abf58:	d370dc01 	ubfx	x1, x0, #48, #8
   abf5c:	d378fc00 	lsr	x0, x0, #56
   abf60:	39002686 	strb	w6, [x20, #9]
   abf64:	39002a85 	strb	w5, [x20, #10]
   abf68:	39002e84 	strb	w4, [x20, #11]
   abf6c:	39003283 	strb	w3, [x20, #12]
   abf70:	39003682 	strb	w2, [x20, #13]
   abf74:	39003a81 	strb	w1, [x20, #14]
   abf78:	39003e80 	strb	w0, [x20, #15]
   abf7c:	f9000674 	str	x20, [x19, #8]
   abf80:	a94153f3 	ldp	x19, x20, [sp, #16]
   abf84:	f94013f5 	ldr	x21, [sp, #32]
   abf88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abf8c:	d65f03c0 	ret
   abf90:	d65f03c0 	ret
   abf94:	9400043b 	bl	ad080 <EnterCritical>
   abf98:	f9400660 	ldr	x0, [x19, #8]
   abf9c:	b94172a1 	ldr	w1, [x21, #368]
   abfa0:	39002280 	strb	w0, [x20, #8]
   abfa4:	53083c07 	ubfx	w7, w0, #8, #8
   abfa8:	53105c06 	ubfx	w6, w0, #16, #8
   abfac:	53187c05 	lsr	w5, w0, #24
   abfb0:	d3609c04 	ubfx	x4, x0, #32, #8
   abfb4:	d368bc03 	ubfx	x3, x0, #40, #8
   abfb8:	d370dc02 	ubfx	x2, x0, #48, #8
   abfbc:	d378fc00 	lsr	x0, x0, #56
   abfc0:	39002687 	strb	w7, [x20, #9]
   abfc4:	39002a86 	strb	w6, [x20, #10]
   abfc8:	39002e85 	strb	w5, [x20, #11]
   abfcc:	39003284 	strb	w4, [x20, #12]
   abfd0:	39003683 	strb	w3, [x20, #13]
   abfd4:	39003a82 	strb	w2, [x20, #14]
   abfd8:	39003e80 	strb	w0, [x20, #15]
   abfdc:	f9000674 	str	x20, [x19, #8]
   abfe0:	34fffd01 	cbz	w1, abf80 <CHeapAllocator::Free(void*)+0xd0>
   abfe4:	a94153f3 	ldp	x19, x20, [sp, #16]
   abfe8:	f94013f5 	ldr	x21, [sp, #32]
   abfec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abff0:	14000454 	b	ad140 <LeaveCritical>
   abff4:	f0000041 	adrp	x1, b6000 <_etext+0x39c8>
   abff8:	f0000040 	adrp	x0, b6000 <_etext+0x39c8>
   abffc:	9132e021 	add	x1, x1, #0xcb8
   ac000:	91334000 	add	x0, x0, #0xcd0
   ac004:	528017e2 	mov	w2, #0xbf                  	// #191
   ac008:	97ffd7be 	bl	a1f00 <assertion_failed>
   ac00c:	d503201f 	nop

00000000000ac010 <CHeapAllocator::ReAllocate(void*, unsigned long)>:
   ac010:	b4000701 	cbz	x1, ac0f0 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xe0>
   ac014:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac018:	910003fd 	mov	x29, sp
   ac01c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac020:	b40006c2 	cbz	x2, ac0f8 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xe8>
   ac024:	a90153f3 	stp	x19, x20, [sp, #16]
   ac028:	aa0103f3 	mov	x19, x1
   ac02c:	d1010034 	sub	x20, x1, #0x40
   ac030:	385c0026 	ldurb	w6, [x1, #-64]
   ac034:	5289a865 	mov	w5, #0x4d43                	// #19779
   ac038:	72a84985 	movk	w5, #0x424c, lsl #16
   ac03c:	385c1024 	ldurb	w4, [x1, #-63]
   ac040:	385c2023 	ldurb	w3, [x1, #-62]
   ac044:	385c3021 	ldurb	w1, [x1, #-61]
   ac048:	aa0420c4 	orr	x4, x6, x4, lsl #8
   ac04c:	aa034083 	orr	x3, x4, x3, lsl #16
   ac050:	aa016061 	orr	x1, x3, x1, lsl #24
   ac054:	6b05003f 	cmp	w1, w5
   ac058:	54000561 	b.ne	ac104 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xf4>  // b.any
   ac05c:	39401285 	ldrb	w5, [x20, #4]
   ac060:	aa1303f6 	mov	x22, x19
   ac064:	39401684 	ldrb	w4, [x20, #5]
   ac068:	39401a83 	ldrb	w3, [x20, #6]
   ac06c:	39401e81 	ldrb	w1, [x20, #7]
   ac070:	aa0420a4 	orr	x4, x5, x4, lsl #8
   ac074:	aa034083 	orr	x3, x4, x3, lsl #16
   ac078:	aa016061 	orr	x1, x3, x1, lsl #24
   ac07c:	eb02003f 	cmp	x1, x2
   ac080:	540000c3 	b.cc	ac098 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x88>  // b.lo, b.ul, b.last
   ac084:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac088:	aa1603e0 	mov	x0, x22
   ac08c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac090:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac094:	d65f03c0 	ret
   ac098:	aa0003f5 	mov	x21, x0
   ac09c:	aa0203e1 	mov	x1, x2
   ac0a0:	97fffefc 	bl	abc90 <CHeapAllocator::Allocate(unsigned long)>
   ac0a4:	aa0003f6 	mov	x22, x0
   ac0a8:	b4fffee0 	cbz	x0, ac084 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x74>
   ac0ac:	39401285 	ldrb	w5, [x20, #4]
   ac0b0:	aa1303e1 	mov	x1, x19
   ac0b4:	39401683 	ldrb	w3, [x20, #5]
   ac0b8:	39401a82 	ldrb	w2, [x20, #6]
   ac0bc:	39401e84 	ldrb	w4, [x20, #7]
   ac0c0:	aa0320a3 	orr	x3, x5, x3, lsl #8
   ac0c4:	aa024062 	orr	x2, x3, x2, lsl #16
   ac0c8:	aa046042 	orr	x2, x2, x4, lsl #24
   ac0cc:	97fffc3f 	bl	ab1c8 <memcpy>
   ac0d0:	aa1303e1 	mov	x1, x19
   ac0d4:	aa1503e0 	mov	x0, x21
   ac0d8:	97ffff76 	bl	abeb0 <CHeapAllocator::Free(void*)>
   ac0dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac0e0:	aa1603e0 	mov	x0, x22
   ac0e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ac0e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac0ec:	d65f03c0 	ret
   ac0f0:	aa0203e1 	mov	x1, x2
   ac0f4:	17fffee7 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   ac0f8:	d2800016 	mov	x22, #0x0                   	// #0
   ac0fc:	97ffff6d 	bl	abeb0 <CHeapAllocator::Free(void*)>
   ac100:	17ffffe2 	b	ac088 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x78>
   ac104:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac108:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac10c:	9132e021 	add	x1, x1, #0xcb8
   ac110:	91334000 	add	x0, x0, #0xcd0
   ac114:	52801462 	mov	w2, #0xa3                  	// #163
   ac118:	97ffd77a 	bl	a1f00 <assertion_failed>
   ac11c:	00000000 	udf	#0

00000000000ac120 <CNumberPool::CNumberPool(unsigned int, unsigned int)>:
   ac120:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac124:	7100fc5f 	cmp	w2, #0x3f
   ac128:	910003fd 	mov	x29, sp
   ac12c:	29000801 	stp	w1, w2, [x0]
   ac130:	f900041f 	str	xzr, [x0, #8]
   ac134:	540000a8 	b.hi	ac148 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x28>  // b.pmore
   ac138:	6b02003f 	cmp	w1, w2
   ac13c:	54000128 	b.hi	ac160 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x40>  // b.pmore
   ac140:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac144:	d65f03c0 	ret
   ac148:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac14c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac150:	91350021 	add	x1, x1, #0xd40
   ac154:	91354000 	add	x0, x0, #0xd50
   ac158:	528003a2 	mov	w2, #0x1d                  	// #29
   ac15c:	97ffd769 	bl	a1f00 <assertion_failed>
   ac160:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac164:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac168:	91350021 	add	x1, x1, #0xd40
   ac16c:	91358000 	add	x0, x0, #0xd60
   ac170:	528003c2 	mov	w2, #0x1e                  	// #30
   ac174:	97ffd763 	bl	a1f00 <assertion_failed>
   ac178:	d503201f 	nop
   ac17c:	d503201f 	nop

00000000000ac180 <CNumberPool::~CNumberPool()>:
   ac180:	d65f03c0 	ret
   ac184:	d503201f 	nop
   ac188:	d503201f 	nop
   ac18c:	d503201f 	nop

00000000000ac190 <CNumberPool::AllocateNumber(bool, char const*)>:
   ac190:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ac194:	aa0003e7 	mov	x7, x0
   ac198:	12001c21 	and	w1, w1, #0xff
   ac19c:	910003fd 	mov	x29, sp
   ac1a0:	b9400000 	ldr	w0, [x0]
   ac1a4:	b94004e5 	ldr	w5, [x7, #4]
   ac1a8:	f9000bf3 	str	x19, [sp, #16]
   ac1ac:	aa0203f3 	mov	x19, x2
   ac1b0:	6b0000bf 	cmp	w5, w0
   ac1b4:	540001e3 	b.cc	ac1f0 <CNumberPool::AllocateNumber(bool, char const*)+0x60>  // b.lo, b.ul, b.last
   ac1b8:	f94004e4 	ldr	x4, [x7, #8]
   ac1bc:	52800026 	mov	w6, #0x1                   	// #1
   ac1c0:	1ac020c3 	lsl	w3, w6, w0
   ac1c4:	93407c63 	sxtw	x3, w3
   ac1c8:	ea04007f 	tst	x3, x4
   ac1cc:	540000c1 	b.ne	ac1e4 <CNumberPool::AllocateNumber(bool, char const*)+0x54>  // b.any
   ac1d0:	14000014 	b	ac220 <CNumberPool::AllocateNumber(bool, char const*)+0x90>
   ac1d4:	1ac020c3 	lsl	w3, w6, w0
   ac1d8:	93407c63 	sxtw	x3, w3
   ac1dc:	ea04007f 	tst	x3, x4
   ac1e0:	54000200 	b.eq	ac220 <CNumberPool::AllocateNumber(bool, char const*)+0x90>  // b.none
   ac1e4:	11000400 	add	w0, w0, #0x1
   ac1e8:	6b0000bf 	cmp	w5, w0
   ac1ec:	54ffff42 	b.cs	ac1d4 <CNumberPool::AllocateNumber(bool, char const*)+0x44>  // b.hs, b.nlast
   ac1f0:	36000101 	tbz	w1, #0, ac210 <CNumberPool::AllocateNumber(bool, char const*)+0x80>
   ac1f4:	b4000213 	cbz	x19, ac234 <CNumberPool::AllocateNumber(bool, char const*)+0xa4>
   ac1f8:	97ffde7e 	bl	a3bf0 <CLogger::Get()>
   ac1fc:	d0000043 	adrp	x3, b6000 <_etext+0x39c8>
   ac200:	91360063 	add	x3, x3, #0xd80
   ac204:	aa1303e1 	mov	x1, x19
   ac208:	52800002 	mov	w2, #0x0                   	// #0
   ac20c:	97ffe06d 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   ac210:	f9400bf3 	ldr	x19, [sp, #16]
   ac214:	52800800 	mov	w0, #0x40                  	// #64
   ac218:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac21c:	d65f03c0 	ret
   ac220:	aa030084 	orr	x4, x4, x3
   ac224:	f90004e4 	str	x4, [x7, #8]
   ac228:	f9400bf3 	ldr	x19, [sp, #16]
   ac22c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac230:	d65f03c0 	ret
   ac234:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac238:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac23c:	91350021 	add	x1, x1, #0xd40
   ac240:	9135c000 	add	x0, x0, #0xd70
   ac244:	52800682 	mov	w2, #0x34                  	// #52
   ac248:	97ffd72e 	bl	a1f00 <assertion_failed>
   ac24c:	d503201f 	nop

00000000000ac250 <CNumberPool::FreeNumber(unsigned int)>:
   ac250:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac254:	910003fd 	mov	x29, sp
   ac258:	b9400002 	ldr	w2, [x0]
   ac25c:	6b01005f 	cmp	w2, w1
   ac260:	54000208 	b.hi	ac2a0 <CNumberPool::FreeNumber(unsigned int)+0x50>  // b.pmore
   ac264:	b9400402 	ldr	w2, [x0, #4]
   ac268:	6b01005f 	cmp	w2, w1
   ac26c:	540001a3 	b.cc	ac2a0 <CNumberPool::FreeNumber(unsigned int)+0x50>  // b.lo, b.ul, b.last
   ac270:	f9400403 	ldr	x3, [x0, #8]
   ac274:	52800022 	mov	w2, #0x1                   	// #1
   ac278:	1ac12041 	lsl	w1, w2, w1
   ac27c:	93407c22 	sxtw	x2, w1
   ac280:	ea03005f 	tst	x2, x3
   ac284:	540001a0 	b.eq	ac2b8 <CNumberPool::FreeNumber(unsigned int)+0x68>  // b.none
   ac288:	2a2103e1 	mvn	w1, w1
   ac28c:	93407c21 	sxtw	x1, w1
   ac290:	8a030021 	and	x1, x1, x3
   ac294:	f9000401 	str	x1, [x0, #8]
   ac298:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac29c:	d65f03c0 	ret
   ac2a0:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac2a4:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac2a8:	91350021 	add	x1, x1, #0xd40
   ac2ac:	91366000 	add	x0, x0, #0xd98
   ac2b0:	52800842 	mov	w2, #0x42                  	// #66
   ac2b4:	97ffd713 	bl	a1f00 <assertion_failed>
   ac2b8:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac2bc:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac2c0:	91350021 	add	x1, x1, #0xd40
   ac2c4:	91370000 	add	x0, x0, #0xdc0
   ac2c8:	52800862 	mov	w2, #0x43                  	// #67
   ac2cc:	97ffd70d 	bl	a1f00 <assertion_failed>

00000000000ac2d0 <TPtrListElement::operator new(unsigned long)>:
   ac2d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac2d4:	f100801f 	cmp	x0, #0x20
   ac2d8:	910003fd 	mov	x29, sp
   ac2dc:	540000c1 	b.ne	ac2f4 <TPtrListElement::operator new(unsigned long)+0x24>  // b.any
   ac2e0:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ac2e4:	f946a400 	ldr	x0, [x0, #3400]
   ac2e8:	b4000120 	cbz	x0, ac30c <TPtrListElement::operator new(unsigned long)+0x3c>
   ac2ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac2f0:	17ffd86c 	b	a24a0 <CClassAllocator::Allocate()>
   ac2f4:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac2f8:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac2fc:	91376021 	add	x1, x1, #0xdd8
   ac300:	9137a000 	add	x0, x0, #0xde8
   ac304:	528004e2 	mov	w2, #0x27                  	// #39
   ac308:	97ffd6fe 	bl	a1f00 <assertion_failed>
   ac30c:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac310:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac314:	91376021 	add	x1, x1, #0xdd8
   ac318:	911ca000 	add	x0, x0, #0x728
   ac31c:	528004e2 	mov	w2, #0x27                  	// #39
   ac320:	97ffd6f8 	bl	a1f00 <assertion_failed>
   ac324:	d503201f 	nop
   ac328:	d503201f 	nop
   ac32c:	d503201f 	nop

00000000000ac330 <TPtrListElement::operator delete(void*, unsigned long)>:
   ac330:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac334:	f100803f 	cmp	x1, #0x20
   ac338:	910003fd 	mov	x29, sp
   ac33c:	54000101 	b.ne	ac35c <TPtrListElement::operator delete(void*, unsigned long)+0x2c>  // b.any
   ac340:	aa0003e2 	mov	x2, x0
   ac344:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ac348:	f946a400 	ldr	x0, [x0, #3400]
   ac34c:	b4000140 	cbz	x0, ac374 <TPtrListElement::operator delete(void*, unsigned long)+0x44>
   ac350:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac354:	aa0203e1 	mov	x1, x2
   ac358:	17ffd886 	b	a2570 <CClassAllocator::Free(void*)>
   ac35c:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac360:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac364:	91376021 	add	x1, x1, #0xdd8
   ac368:	9137a000 	add	x0, x0, #0xde8
   ac36c:	528004e2 	mov	w2, #0x27                  	// #39
   ac370:	97ffd6e4 	bl	a1f00 <assertion_failed>
   ac374:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac378:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac37c:	91376021 	add	x1, x1, #0xdd8
   ac380:	911ca000 	add	x0, x0, #0x728
   ac384:	528004e2 	mov	w2, #0x27                  	// #39
   ac388:	97ffd6de 	bl	a1f00 <assertion_failed>
   ac38c:	d503201f 	nop

00000000000ac390 <TPtrListElement::InitAllocator(unsigned int)>:
   ac390:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ac394:	910003fd 	mov	x29, sp
   ac398:	a90153f3 	stp	x19, x20, [sp, #16]
   ac39c:	d00000f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   ac3a0:	f946a681 	ldr	x1, [x20, #3400]
   ac3a4:	b50001c1 	cbnz	x1, ac3dc <TPtrListElement::InitAllocator(unsigned int)+0x4c>
   ac3a8:	2a0003f3 	mov	w19, w0
   ac3ac:	d2800700 	mov	x0, #0x38                  	// #56
   ac3b0:	97fffde0 	bl	abb30 <operator new(unsigned long)>
   ac3b4:	2a1303e2 	mov	w2, w19
   ac3b8:	d2800401 	mov	x1, #0x20                  	// #32
   ac3bc:	aa0003f3 	mov	x19, x0
   ac3c0:	d0000043 	adrp	x3, b6000 <_etext+0x39c8>
   ac3c4:	91384063 	add	x3, x3, #0xe10
   ac3c8:	97ffd7da 	bl	a2330 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   ac3cc:	f906a693 	str	x19, [x20, #3400]
   ac3d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac3d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac3d8:	d65f03c0 	ret
   ac3dc:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac3e0:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac3e4:	91376021 	add	x1, x1, #0xdd8
   ac3e8:	911de000 	add	x0, x0, #0x778
   ac3ec:	528004e2 	mov	w2, #0x27                  	// #39
   ac3f0:	97ffd6c4 	bl	a1f00 <assertion_failed>
   ac3f4:	d503201f 	nop
   ac3f8:	d503201f 	nop
   ac3fc:	d503201f 	nop

00000000000ac400 <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)>:
   ac400:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac404:	910003fd 	mov	x29, sp
   ac408:	f90013f5 	str	x21, [sp, #32]
   ac40c:	d00000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   ac410:	f946a6a3 	ldr	x3, [x21, #3400]
   ac414:	a90153f3 	stp	x19, x20, [sp, #16]
   ac418:	2a0003f3 	mov	w19, w0
   ac41c:	2a0103f4 	mov	w20, w1
   ac420:	b4000103 	cbz	x3, ac440 <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)+0x40>
   ac424:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac428:	2a0103e2 	mov	w2, w1
   ac42c:	f94013f5 	ldr	x21, [sp, #32]
   ac430:	2a0003e1 	mov	w1, w0
   ac434:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac438:	aa0303e0 	mov	x0, x3
   ac43c:	17ffd7cd 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   ac440:	d2800700 	mov	x0, #0x38                  	// #56
   ac444:	97fffdbb 	bl	abb30 <operator new(unsigned long)>
   ac448:	2a1403e3 	mov	w3, w20
   ac44c:	2a1303e2 	mov	w2, w19
   ac450:	d2800401 	mov	x1, #0x20                  	// #32
   ac454:	aa0003f3 	mov	x19, x0
   ac458:	d0000044 	adrp	x4, b6000 <_etext+0x39c8>
   ac45c:	91384084 	add	x4, x4, #0xe10
   ac460:	97ffd7bc 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   ac464:	f906a6b3 	str	x19, [x21, #3400]
   ac468:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac46c:	f94013f5 	ldr	x21, [sp, #32]
   ac470:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac474:	d65f03c0 	ret
   ac478:	d503201f 	nop
   ac47c:	d503201f 	nop

00000000000ac480 <CPtrListFIQ::CPtrListFIQ(unsigned int)>:
   ac480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ac484:	910003fd 	mov	x29, sp
   ac488:	a90153f3 	stp	x19, x20, [sp, #16]
   ac48c:	d00000f4 	adrp	x20, ca000 <vtable for CLAN7800Device+0x28>
   ac490:	f946a682 	ldr	x2, [x20, #3400]
   ac494:	f900001f 	str	xzr, [x0]
   ac498:	b40000c2 	cbz	x2, ac4b0 <CPtrListFIQ::CPtrListFIQ(unsigned int)+0x30>
   ac49c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac4a0:	aa0203e0 	mov	x0, x2
   ac4a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac4a8:	52800042 	mov	w2, #0x2                   	// #2
   ac4ac:	17ffd7b1 	b	a2370 <CClassAllocator::Extend(unsigned int, unsigned int)>
   ac4b0:	2a0103f3 	mov	w19, w1
   ac4b4:	d2800700 	mov	x0, #0x38                  	// #56
   ac4b8:	97fffd9e 	bl	abb30 <operator new(unsigned long)>
   ac4bc:	2a1303e2 	mov	w2, w19
   ac4c0:	52800043 	mov	w3, #0x2                   	// #2
   ac4c4:	aa0003f3 	mov	x19, x0
   ac4c8:	d2800401 	mov	x1, #0x20                  	// #32
   ac4cc:	d0000044 	adrp	x4, b6000 <_etext+0x39c8>
   ac4d0:	91384084 	add	x4, x4, #0xe10
   ac4d4:	97ffd79f 	bl	a2350 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   ac4d8:	f906a693 	str	x19, [x20, #3400]
   ac4dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac4e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ac4e4:	d65f03c0 	ret
   ac4e8:	d503201f 	nop
   ac4ec:	d503201f 	nop

00000000000ac4f0 <CPtrListFIQ::~CPtrListFIQ()>:
   ac4f0:	f9400000 	ldr	x0, [x0]
   ac4f4:	b5000040 	cbnz	x0, ac4fc <CPtrListFIQ::~CPtrListFIQ()+0xc>
   ac4f8:	d65f03c0 	ret
   ac4fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac500:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac504:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac508:	910003fd 	mov	x29, sp
   ac50c:	91376021 	add	x1, x1, #0xdd8
   ac510:	91218000 	add	x0, x0, #0x860
   ac514:	52800622 	mov	w2, #0x31                  	// #49
   ac518:	97ffd67a 	bl	a1f00 <assertion_failed>
   ac51c:	d503201f 	nop

00000000000ac520 <CPtrListFIQ::GetFirst()>:
   ac520:	f9400000 	ldr	x0, [x0]
   ac524:	d65f03c0 	ret
   ac528:	d503201f 	nop
   ac52c:	d503201f 	nop

00000000000ac530 <CPtrListFIQ::GetNext(TPtrListElement*)>:
   ac530:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac534:	910003fd 	mov	x29, sp
   ac538:	b4000121 	cbz	x1, ac55c <CPtrListFIQ::GetNext(TPtrListElement*)+0x2c>
   ac53c:	b9400022 	ldr	w2, [x1]
   ac540:	5288ca20 	mov	w0, #0x4651                	// #18001
   ac544:	72aa0980 	movk	w0, #0x504c, lsl #16
   ac548:	6b00005f 	cmp	w2, w0
   ac54c:	54000141 	b.ne	ac574 <CPtrListFIQ::GetNext(TPtrListElement*)+0x44>  // b.any
   ac550:	f9400820 	ldr	x0, [x1, #16]
   ac554:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac558:	d65f03c0 	ret
   ac55c:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac560:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac564:	91376021 	add	x1, x1, #0xdd8
   ac568:	911b0000 	add	x0, x0, #0x6c0
   ac56c:	52800762 	mov	w2, #0x3b                  	// #59
   ac570:	97ffd664 	bl	a1f00 <assertion_failed>
   ac574:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac578:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac57c:	91376021 	add	x1, x1, #0xdd8
   ac580:	9121c000 	add	x0, x0, #0x870
   ac584:	52800782 	mov	w2, #0x3c                  	// #60
   ac588:	97ffd65e 	bl	a1f00 <assertion_failed>
   ac58c:	d503201f 	nop

00000000000ac590 <CPtrListFIQ::GetPtr(TPtrListElement*)>:
   ac590:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac594:	910003fd 	mov	x29, sp
   ac598:	b4000121 	cbz	x1, ac5bc <CPtrListFIQ::GetPtr(TPtrListElement*)+0x2c>
   ac59c:	b9400022 	ldr	w2, [x1]
   ac5a0:	5288ca20 	mov	w0, #0x4651                	// #18001
   ac5a4:	72aa0980 	movk	w0, #0x504c, lsl #16
   ac5a8:	6b00005f 	cmp	w2, w0
   ac5ac:	54000141 	b.ne	ac5d4 <CPtrListFIQ::GetPtr(TPtrListElement*)+0x44>  // b.any
   ac5b0:	f9400c20 	ldr	x0, [x1, #24]
   ac5b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac5b8:	d65f03c0 	ret
   ac5bc:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac5c0:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac5c4:	91376021 	add	x1, x1, #0xdd8
   ac5c8:	911b0000 	add	x0, x0, #0x6c0
   ac5cc:	52800862 	mov	w2, #0x43                  	// #67
   ac5d0:	97ffd64c 	bl	a1f00 <assertion_failed>
   ac5d4:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac5d8:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac5dc:	91376021 	add	x1, x1, #0xdd8
   ac5e0:	9121c000 	add	x0, x0, #0x870
   ac5e4:	52800882 	mov	w2, #0x44                  	// #68
   ac5e8:	97ffd646 	bl	a1f00 <assertion_failed>
   ac5ec:	d503201f 	nop

00000000000ac5f0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>:
   ac5f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac5f4:	910003fd 	mov	x29, sp
   ac5f8:	d00000e3 	adrp	x3, ca000 <vtable for CLAN7800Device+0x28>
   ac5fc:	f946a463 	ldr	x3, [x3, #3400]
   ac600:	a90153f3 	stp	x19, x20, [sp, #16]
   ac604:	f90013f5 	str	x21, [sp, #32]
   ac608:	b40004c3 	cbz	x3, ac6a0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xb0>
   ac60c:	aa0003f4 	mov	x20, x0
   ac610:	aa0103f3 	mov	x19, x1
   ac614:	aa0203f5 	mov	x21, x2
   ac618:	aa0303e0 	mov	x0, x3
   ac61c:	97ffd7a1 	bl	a24a0 <CClassAllocator::Allocate()>
   ac620:	b40004c0 	cbz	x0, ac6b8 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xc8>
   ac624:	f9400281 	ldr	x1, [x20]
   ac628:	5288ca22 	mov	w2, #0x4651                	// #18001
   ac62c:	72aa0982 	movk	w2, #0x504c, lsl #16
   ac630:	b9000002 	str	w2, [x0]
   ac634:	f9000c15 	str	x21, [x0, #24]
   ac638:	b40004c1 	cbz	x1, ac6d0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xe0>
   ac63c:	b4000573 	cbz	x19, ac6e8 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xf8>
   ac640:	b9400263 	ldr	w3, [x19]
   ac644:	6b02007f 	cmp	w3, w2
   ac648:	540005c1 	b.ne	ac700 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x110>  // b.any
   ac64c:	eb13003f 	cmp	x1, x19
   ac650:	540001a0 	b.eq	ac684 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x94>  // b.none
   ac654:	f9400661 	ldr	x1, [x19, #8]
   ac658:	a900cc01 	stp	x1, x19, [x0, #8]
   ac65c:	b40000a1 	cbz	x1, ac670 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x80>
   ac660:	b9400022 	ldr	w2, [x1]
   ac664:	6b03005f 	cmp	w2, w3
   ac668:	54000581 	b.ne	ac718 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x128>  // b.any
   ac66c:	f9000820 	str	x0, [x1, #16]
   ac670:	f9000660 	str	x0, [x19, #8]
   ac674:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac678:	f94013f5 	ldr	x21, [sp, #32]
   ac67c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac680:	d65f03c0 	ret
   ac684:	a900841f 	stp	xzr, x1, [x0, #8]
   ac688:	f9000420 	str	x0, [x1, #8]
   ac68c:	f9000280 	str	x0, [x20]
   ac690:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac694:	f94013f5 	ldr	x21, [sp, #32]
   ac698:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac69c:	d65f03c0 	ret
   ac6a0:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac6a4:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac6a8:	91376021 	add	x1, x1, #0xdd8
   ac6ac:	911ca000 	add	x0, x0, #0x728
   ac6b0:	528004e2 	mov	w2, #0x27                  	// #39
   ac6b4:	97ffd613 	bl	a1f00 <assertion_failed>
   ac6b8:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac6bc:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac6c0:	91376021 	add	x1, x1, #0xdd8
   ac6c4:	911b0000 	add	x0, x0, #0x6c0
   ac6c8:	52800982 	mov	w2, #0x4c                  	// #76
   ac6cc:	97ffd60d 	bl	a1f00 <assertion_failed>
   ac6d0:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac6d4:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac6d8:	91376021 	add	x1, x1, #0xdd8
   ac6dc:	91226000 	add	x0, x0, #0x898
   ac6e0:	52800a62 	mov	w2, #0x53                  	// #83
   ac6e4:	97ffd607 	bl	a1f00 <assertion_failed>
   ac6e8:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac6ec:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac6f0:	91376021 	add	x1, x1, #0xdd8
   ac6f4:	9122a000 	add	x0, x0, #0x8a8
   ac6f8:	52800a82 	mov	w2, #0x54                  	// #84
   ac6fc:	97ffd601 	bl	a1f00 <assertion_failed>
   ac700:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac704:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac708:	91376021 	add	x1, x1, #0xdd8
   ac70c:	9122e000 	add	x0, x0, #0x8b8
   ac710:	52800aa2 	mov	w2, #0x55                  	// #85
   ac714:	97ffd5fb 	bl	a1f00 <assertion_failed>
   ac718:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac71c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac720:	91376021 	add	x1, x1, #0xdd8
   ac724:	91238000 	add	x0, x0, #0x8e0
   ac728:	52800ce2 	mov	w2, #0x67                  	// #103
   ac72c:	97ffd5f5 	bl	a1f00 <assertion_failed>

00000000000ac730 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>:
   ac730:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac734:	910003fd 	mov	x29, sp
   ac738:	d00000e3 	adrp	x3, ca000 <vtable for CLAN7800Device+0x28>
   ac73c:	f946a463 	ldr	x3, [x3, #3400]
   ac740:	a90153f3 	stp	x19, x20, [sp, #16]
   ac744:	f90013f5 	str	x21, [sp, #32]
   ac748:	b4000543 	cbz	x3, ac7f0 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xc0>
   ac74c:	aa0003f4 	mov	x20, x0
   ac750:	aa0103f3 	mov	x19, x1
   ac754:	aa0203f5 	mov	x21, x2
   ac758:	aa0303e0 	mov	x0, x3
   ac75c:	97ffd751 	bl	a24a0 <CClassAllocator::Allocate()>
   ac760:	b4000540 	cbz	x0, ac808 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xd8>
   ac764:	f9400282 	ldr	x2, [x20]
   ac768:	5288ca21 	mov	w1, #0x4651                	// #18001
   ac76c:	72aa0981 	movk	w1, #0x504c, lsl #16
   ac770:	b9000001 	str	w1, [x0]
   ac774:	f9000c15 	str	x21, [x0, #24]
   ac778:	b4000233 	cbz	x19, ac7bc <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x8c>
   ac77c:	b40002e2 	cbz	x2, ac7d8 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xa8>
   ac780:	b9400262 	ldr	w2, [x19]
   ac784:	6b01005f 	cmp	w2, w1
   ac788:	54000581 	b.ne	ac838 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x108>  // b.any
   ac78c:	f9400a61 	ldr	x1, [x19, #16]
   ac790:	a9008413 	stp	x19, x1, [x0, #8]
   ac794:	b40000a1 	cbz	x1, ac7a8 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x78>
   ac798:	b9400023 	ldr	w3, [x1]
   ac79c:	6b02007f 	cmp	w3, w2
   ac7a0:	54000581 	b.ne	ac850 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x120>  // b.any
   ac7a4:	f9000420 	str	x0, [x1, #8]
   ac7a8:	f9000a60 	str	x0, [x19, #16]
   ac7ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac7b0:	f94013f5 	ldr	x21, [sp, #32]
   ac7b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac7b8:	d65f03c0 	ret
   ac7bc:	b5000322 	cbnz	x2, ac820 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xf0>
   ac7c0:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   ac7c4:	f9000280 	str	x0, [x20]
   ac7c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac7cc:	f94013f5 	ldr	x21, [sp, #32]
   ac7d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac7d4:	d65f03c0 	ret
   ac7d8:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac7dc:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac7e0:	91376021 	add	x1, x1, #0xdd8
   ac7e4:	91226000 	add	x0, x0, #0x898
   ac7e8:	52801082 	mov	w2, #0x84                  	// #132
   ac7ec:	97ffd5c5 	bl	a1f00 <assertion_failed>
   ac7f0:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac7f4:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac7f8:	91376021 	add	x1, x1, #0xdd8
   ac7fc:	911ca000 	add	x0, x0, #0x728
   ac800:	528004e2 	mov	w2, #0x27                  	// #39
   ac804:	97ffd5bf 	bl	a1f00 <assertion_failed>
   ac808:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac80c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac810:	91376021 	add	x1, x1, #0xdd8
   ac814:	911b0000 	add	x0, x0, #0x6c0
   ac818:	52800e42 	mov	w2, #0x72                  	// #114
   ac81c:	97ffd5b9 	bl	a1f00 <assertion_failed>
   ac820:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac824:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac828:	91376021 	add	x1, x1, #0xdd8
   ac82c:	91218000 	add	x0, x0, #0x860
   ac830:	52800f62 	mov	w2, #0x7b                  	// #123
   ac834:	97ffd5b3 	bl	a1f00 <assertion_failed>
   ac838:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac83c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac840:	91376021 	add	x1, x1, #0xdd8
   ac844:	91242000 	add	x0, x0, #0x908
   ac848:	528010a2 	mov	w2, #0x85                  	// #133
   ac84c:	97ffd5ad 	bl	a1f00 <assertion_failed>
   ac850:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac854:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac858:	91376021 	add	x1, x1, #0xdd8
   ac85c:	9124c000 	add	x0, x0, #0x930
   ac860:	52801182 	mov	w2, #0x8c                  	// #140
   ac864:	97ffd5a7 	bl	a1f00 <assertion_failed>
   ac868:	d503201f 	nop
   ac86c:	d503201f 	nop

00000000000ac870 <CPtrListFIQ::Remove(TPtrListElement*)>:
   ac870:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac874:	910003fd 	mov	x29, sp
   ac878:	b4000501 	cbz	x1, ac918 <CPtrListFIQ::Remove(TPtrListElement*)+0xa8>
   ac87c:	b9400022 	ldr	w2, [x1]
   ac880:	5288ca23 	mov	w3, #0x4651                	// #18001
   ac884:	72aa0983 	movk	w3, #0x504c, lsl #16
   ac888:	6b03005f 	cmp	w2, w3
   ac88c:	54000521 	b.ne	ac930 <CPtrListFIQ::Remove(TPtrListElement*)+0xc0>  // b.any
   ac890:	f9400003 	ldr	x3, [x0]
   ac894:	eb01007f 	cmp	x3, x1
   ac898:	54000240 	b.eq	ac8e0 <CPtrListFIQ::Remove(TPtrListElement*)+0x70>  // b.none
   ac89c:	f9400420 	ldr	x0, [x1, #8]
   ac8a0:	b4000600 	cbz	x0, ac960 <CPtrListFIQ::Remove(TPtrListElement*)+0xf0>
   ac8a4:	b9400003 	ldr	w3, [x0]
   ac8a8:	6b02007f 	cmp	w3, w2
   ac8ac:	540002a1 	b.ne	ac900 <CPtrListFIQ::Remove(TPtrListElement*)+0x90>  // b.any
   ac8b0:	f9400822 	ldr	x2, [x1, #16]
   ac8b4:	f9000802 	str	x2, [x0, #16]
   ac8b8:	b40000a2 	cbz	x2, ac8cc <CPtrListFIQ::Remove(TPtrListElement*)+0x5c>
   ac8bc:	b9400044 	ldr	w4, [x2]
   ac8c0:	6b03009f 	cmp	w4, w3
   ac8c4:	540005a1 	b.ne	ac978 <CPtrListFIQ::Remove(TPtrListElement*)+0x108>  // b.any
   ac8c8:	f9000440 	str	x0, [x2, #8]
   ac8cc:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ac8d0:	f946a400 	ldr	x0, [x0, #3400]
   ac8d4:	b40003a0 	cbz	x0, ac948 <CPtrListFIQ::Remove(TPtrListElement*)+0xd8>
   ac8d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac8dc:	17ffd725 	b	a2570 <CClassAllocator::Free(void*)>
   ac8e0:	f9400863 	ldr	x3, [x3, #16]
   ac8e4:	f9000003 	str	x3, [x0]
   ac8e8:	b4ffff23 	cbz	x3, ac8cc <CPtrListFIQ::Remove(TPtrListElement*)+0x5c>
   ac8ec:	b9400060 	ldr	w0, [x3]
   ac8f0:	6b02001f 	cmp	w0, w2
   ac8f4:	540004e1 	b.ne	ac990 <CPtrListFIQ::Remove(TPtrListElement*)+0x120>  // b.any
   ac8f8:	f900047f 	str	xzr, [x3, #8]
   ac8fc:	17fffff4 	b	ac8cc <CPtrListFIQ::Remove(TPtrListElement*)+0x5c>
   ac900:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac904:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac908:	91376021 	add	x1, x1, #0xdd8
   ac90c:	9126a000 	add	x0, x0, #0x9a8
   ac910:	528014c2 	mov	w2, #0xa6                  	// #166
   ac914:	97ffd57b 	bl	a1f00 <assertion_failed>
   ac918:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac91c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac920:	91376021 	add	x1, x1, #0xdd8
   ac924:	911b0000 	add	x0, x0, #0x6c0
   ac928:	528012c2 	mov	w2, #0x96                  	// #150
   ac92c:	97ffd575 	bl	a1f00 <assertion_failed>
   ac930:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac934:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac938:	91376021 	add	x1, x1, #0xdd8
   ac93c:	9121c000 	add	x0, x0, #0x870
   ac940:	528012e2 	mov	w2, #0x97                  	// #151
   ac944:	97ffd56f 	bl	a1f00 <assertion_failed>
   ac948:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac94c:	f0000020 	adrp	x0, b3000 <_etext+0x9c8>
   ac950:	91376021 	add	x1, x1, #0xdd8
   ac954:	911ca000 	add	x0, x0, #0x728
   ac958:	528004e2 	mov	w2, #0x27                  	// #39
   ac95c:	97ffd569 	bl	a1f00 <assertion_failed>
   ac960:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac964:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac968:	91376021 	add	x1, x1, #0xdd8
   ac96c:	91264000 	add	x0, x0, #0x990
   ac970:	528014a2 	mov	w2, #0xa5                  	// #165
   ac974:	97ffd563 	bl	a1f00 <assertion_failed>
   ac978:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac97c:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac980:	91376021 	add	x1, x1, #0xdd8
   ac984:	91258000 	add	x0, x0, #0x960
   ac988:	52801562 	mov	w2, #0xab                  	// #171
   ac98c:	97ffd55d 	bl	a1f00 <assertion_failed>
   ac990:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac994:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac998:	91376021 	add	x1, x1, #0xdd8
   ac99c:	91258000 	add	x0, x0, #0x960
   ac9a0:	528013e2 	mov	w2, #0x9f                  	// #159
   ac9a4:	97ffd557 	bl	a1f00 <assertion_failed>
   ac9a8:	d503201f 	nop
   ac9ac:	d503201f 	nop

00000000000ac9b0 <CPtrListFIQ::Find(void*)>:
   ac9b0:	f9400000 	ldr	x0, [x0]
   ac9b4:	b4000280 	cbz	x0, aca04 <CPtrListFIQ::Find(void*)+0x54>
   ac9b8:	5288ca23 	mov	w3, #0x4651                	// #18001
   ac9bc:	72aa0983 	movk	w3, #0x504c, lsl #16
   ac9c0:	14000006 	b	ac9d8 <CPtrListFIQ::Find(void*)+0x28>
   ac9c4:	f9400c02 	ldr	x2, [x0, #24]
   ac9c8:	eb01005f 	cmp	x2, x1
   ac9cc:	540001c0 	b.eq	aca04 <CPtrListFIQ::Find(void*)+0x54>  // b.none
   ac9d0:	f9400800 	ldr	x0, [x0, #16]
   ac9d4:	b4000180 	cbz	x0, aca04 <CPtrListFIQ::Find(void*)+0x54>
   ac9d8:	b9400002 	ldr	w2, [x0]
   ac9dc:	6b03005f 	cmp	w2, w3
   ac9e0:	54ffff20 	b.eq	ac9c4 <CPtrListFIQ::Find(void*)+0x14>  // b.none
   ac9e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac9e8:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ac9ec:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ac9f0:	910003fd 	mov	x29, sp
   ac9f4:	91376021 	add	x1, x1, #0xdd8
   ac9f8:	9121c000 	add	x0, x0, #0x870
   ac9fc:	52801742 	mov	w2, #0xba                  	// #186
   aca00:	97ffd540 	bl	a1f00 <assertion_failed>
   aca04:	d65f03c0 	ret
	...

00000000000aca10 <CExceptionHandler::~CExceptionHandler()>:
   aca10:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   aca14:	f906a81f 	str	xzr, [x0, #3408]
   aca18:	d65f03c0 	ret
   aca1c:	d503201f 	nop

00000000000aca20 <CExceptionHandler::~CExceptionHandler()>:
   aca20:	d00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   aca24:	d2800101 	mov	x1, #0x8                   	// #8
   aca28:	f906a85f 	str	xzr, [x2, #3408]
   aca2c:	17fffc61 	b	abbb0 <operator delete(void*, unsigned long)>

00000000000aca30 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   aca30:	d101c3ff 	sub	sp, sp, #0x70
   aca34:	a9027bfd 	stp	x29, x30, [sp, #32]
   aca38:	910083fd 	add	x29, sp, #0x20
   aca3c:	a90353f3 	stp	x19, x20, [sp, #48]
   aca40:	a9045bf5 	stp	x21, x22, [sp, #64]
   aca44:	a90563f7 	stp	x23, x24, [sp, #80]
   aca48:	f90033f9 	str	x25, [sp, #96]
   aca4c:	b4001102 	cbz	x2, acc6c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x23c>
   aca50:	aa0203f3 	mov	x19, x2
   aca54:	39408043 	ldrb	w3, [x2, #32]
   aca58:	39408442 	ldrb	w2, [x2, #33]
   aca5c:	2a0103f7 	mov	w23, w1
   aca60:	39408a61 	ldrb	w1, [x19, #34]
   aca64:	39408e60 	ldrb	w0, [x19, #35]
   aca68:	aa022062 	orr	x2, x3, x2, lsl #8
   aca6c:	39409263 	ldrb	w3, [x19, #36]
   aca70:	aa014041 	orr	x1, x2, x1, lsl #16
   aca74:	39409662 	ldrb	w2, [x19, #37]
   aca78:	aa006020 	orr	x0, x1, x0, lsl #24
   aca7c:	39409a61 	ldrb	w1, [x19, #38]
   aca80:	aa038003 	orr	x3, x0, x3, lsl #32
   aca84:	39409e76 	ldrb	w22, [x19, #39]
   aca88:	39402260 	ldrb	w0, [x19, #8]
   aca8c:	aa02a062 	orr	x2, x3, x2, lsl #40
   aca90:	aa01c041 	orr	x1, x2, x1, lsl #48
   aca94:	92400c00 	and	x0, x0, #0xf
   aca98:	aa16e036 	orr	x22, x1, x22, lsl #56
   aca9c:	f100141f 	cmp	x0, #0x5
   acaa0:	54000201 	b.ne	acae0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>  // b.any
   acaa4:	3940a262 	ldrb	w2, [x19, #40]
   acaa8:	3940a661 	ldrb	w1, [x19, #41]
   acaac:	3940aa60 	ldrb	w0, [x19, #42]
   acab0:	3940ae63 	ldrb	w3, [x19, #43]
   acab4:	aa012041 	orr	x1, x2, x1, lsl #8
   acab8:	3940b262 	ldrb	w2, [x19, #44]
   acabc:	aa004020 	orr	x0, x1, x0, lsl #16
   acac0:	3940b661 	ldrb	w1, [x19, #45]
   acac4:	aa036003 	orr	x3, x0, x3, lsl #24
   acac8:	3940ba60 	ldrb	w0, [x19, #46]
   acacc:	3940be76 	ldrb	w22, [x19, #47]
   acad0:	aa028062 	orr	x2, x3, x2, lsl #32
   acad4:	aa01a041 	orr	x1, x2, x1, lsl #40
   acad8:	aa00c020 	orr	x0, x1, x0, lsl #48
   acadc:	aa16e016 	orr	x22, x0, x22, lsl #56
   acae0:	39400264 	ldrb	w4, [x19]
   acae4:	d2c007e2 	mov	x2, #0x3f00000000          	// #270582939648
   acae8:	39400661 	ldrb	w1, [x19, #1]
   acaec:	f2e00602 	movk	x2, #0x30, lsl #48
   acaf0:	39400e63 	ldrb	w3, [x19, #3]
   acaf4:	39400a60 	ldrb	w0, [x19, #2]
   acaf8:	aa012081 	orr	x1, x4, x1, lsl #8
   acafc:	d3429c79 	ubfx	x25, x3, #2, #38
   acb00:	aa004020 	orr	x0, x1, x0, lsl #16
   acb04:	aa036003 	orr	x3, x0, x3, lsl #24
   acb08:	9ad92442 	lsr	x2, x2, x25
   acb0c:	92406075 	and	x21, x3, #0x1ffffff
   acb10:	92400058 	and	x24, x2, #0x1
   acb14:	36000202 	tbz	w2, #0, acb54 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x124>
   acb18:	3940c262 	ldrb	w2, [x19, #48]
   acb1c:	3940c661 	ldrb	w1, [x19, #49]
   acb20:	3940ca60 	ldrb	w0, [x19, #50]
   acb24:	3940ce63 	ldrb	w3, [x19, #51]
   acb28:	aa012041 	orr	x1, x2, x1, lsl #8
   acb2c:	3940d262 	ldrb	w2, [x19, #52]
   acb30:	aa004020 	orr	x0, x1, x0, lsl #16
   acb34:	3940d661 	ldrb	w1, [x19, #53]
   acb38:	aa036003 	orr	x3, x0, x3, lsl #24
   acb3c:	3940da60 	ldrb	w0, [x19, #54]
   acb40:	3940de78 	ldrb	w24, [x19, #55]
   acb44:	aa028062 	orr	x2, x3, x2, lsl #32
   acb48:	aa01a041 	orr	x1, x2, x1, lsl #40
   acb4c:	aa00c020 	orr	x0, x1, x0, lsl #48
   acb50:	aa18e018 	orr	x24, x0, x24, lsl #56
   acb54:	f0000074 	adrp	x20, bb000 <s_ActLEDInfo+0x1f0>
   acb58:	910e0294 	add	x20, x20, #0x380
   acb5c:	aa1403e1 	mov	x1, x20
   acb60:	aa1603e0 	mov	x0, x22
   acb64:	97ffd6ff 	bl	a2760 <debug_stacktrace(unsigned long const*, char const*)>
   acb68:	97ffdc22 	bl	a3bf0 <CLogger::Get()>
   acb6c:	39404263 	ldrb	w3, [x19, #16]
   acb70:	d00000e4 	adrp	x4, ca000 <vtable for CLAN7800Device+0x28>
   acb74:	912b0084 	add	x4, x4, #0xac0
   acb78:	39404662 	ldrb	w2, [x19, #17]
   acb7c:	39404a61 	ldrb	w1, [x19, #18]
   acb80:	aa1503e7 	mov	x7, x21
   acb84:	39404e6a 	ldrb	w10, [x19, #19]
   acb88:	aa1903e6 	mov	x6, x25
   acb8c:	39402269 	ldrb	w9, [x19, #8]
   acb90:	aa022062 	orr	x2, x3, x2, lsl #8
   acb94:	39402668 	ldrb	w8, [x19, #9]
   acb98:	aa014041 	orr	x1, x2, x1, lsl #16
   acb9c:	39405263 	ldrb	w3, [x19, #20]
   acba0:	aa0a602a 	orr	x10, x1, x10, lsl #24
   acba4:	3940626b 	ldrb	w11, [x19, #24]
   acba8:	aa1403e1 	mov	x1, x20
   acbac:	39406665 	ldrb	w5, [x19, #25]
   acbb0:	aa082128 	orr	x8, x9, x8, lsl #8
   acbb4:	39402a62 	ldrb	w2, [x19, #10]
   acbb8:	aa03814c 	orr	x12, x10, x3, lsl #32
   acbbc:	39406a69 	ldrb	w9, [x19, #26]
   acbc0:	39402e6a 	ldrb	w10, [x19, #11]
   acbc4:	aa052165 	orr	x5, x11, x5, lsl #8
   acbc8:	3940566b 	ldrb	w11, [x19, #21]
   acbcc:	aa024103 	orr	x3, x8, x2, lsl #16
   acbd0:	39406e68 	ldrb	w8, [x19, #27]
   acbd4:	aa0940a9 	orr	x9, x5, x9, lsl #16
   acbd8:	39403262 	ldrb	w2, [x19, #12]
   acbdc:	aa0a606a 	orr	x10, x3, x10, lsl #24
   acbe0:	39405a65 	ldrb	w5, [x19, #22]
   acbe4:	aa0ba18b 	orr	x11, x12, x11, lsl #40
   acbe8:	39407263 	ldrb	w3, [x19, #28]
   acbec:	aa086128 	orr	x8, x9, x8, lsl #24
   acbf0:	3940366c 	ldrb	w12, [x19, #13]
   acbf4:	aa028142 	orr	x2, x10, x2, lsl #32
   acbf8:	39403a6a 	ldrb	w10, [x19, #14]
   acbfc:	aa05c165 	orr	x5, x11, x5, lsl #48
   acc00:	39405e69 	ldrb	w9, [x19, #23]
   acc04:	aa038103 	orr	x3, x8, x3, lsl #32
   acc08:	3940766b 	ldrb	w11, [x19, #29]
   acc0c:	aa0ca04c 	orr	x12, x2, x12, lsl #40
   acc10:	39403e68 	ldrb	w8, [x19, #15]
   acc14:	aa0ac18a 	orr	x10, x12, x10, lsl #48
   acc18:	f8775884 	ldr	x4, [x4, w23, uxtw #3]
   acc1c:	aa09e0a9 	orr	x9, x5, x9, lsl #56
   acc20:	39407a62 	ldrb	w2, [x19, #30]
   acc24:	aa0ba06b 	orr	x11, x3, x11, lsl #40
   acc28:	39407e65 	ldrb	w5, [x19, #31]
   acc2c:	aa08e148 	orr	x8, x10, x8, lsl #56
   acc30:	a9005bf8 	stp	x24, x22, [sp]
   acc34:	d0000043 	adrp	x3, b6000 <_etext+0x39c8>
   acc38:	aa02c162 	orr	x2, x11, x2, lsl #48
   acc3c:	a90123e9 	stp	x9, x8, [sp, #16]
   acc40:	aa05e045 	orr	x5, x2, x5, lsl #56
   acc44:	91392063 	add	x3, x3, #0xe48
   acc48:	52800002 	mov	w2, #0x0                   	// #0
   acc4c:	97ffdddd 	bl	a43c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   acc50:	a9427bfd 	ldp	x29, x30, [sp, #32]
   acc54:	a94353f3 	ldp	x19, x20, [sp, #48]
   acc58:	a9445bf5 	ldp	x21, x22, [sp, #64]
   acc5c:	a94563f7 	ldp	x23, x24, [sp, #80]
   acc60:	f94033f9 	ldr	x25, [sp, #96]
   acc64:	9101c3ff 	add	sp, sp, #0x70
   acc68:	d65f03c0 	ret
   acc6c:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   acc70:	d0000040 	adrp	x0, b6000 <_etext+0x39c8>
   acc74:	91388021 	add	x1, x1, #0xe20
   acc78:	9138e000 	add	x0, x0, #0xe38
   acc7c:	528006c2 	mov	w2, #0x36                  	// #54
   acc80:	97ffd4a0 	bl	a1f00 <assertion_failed>
   acc84:	d503201f 	nop
   acc88:	d503201f 	nop
   acc8c:	d503201f 	nop

00000000000acc90 <CExceptionHandler::CExceptionHandler()>:
   acc90:	d00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   acc94:	f946a843 	ldr	x3, [x2, #3408]
   acc98:	d00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   acc9c:	912a8021 	add	x1, x1, #0xaa0
   acca0:	f9000001 	str	x1, [x0]
   acca4:	b5000063 	cbnz	x3, accb0 <CExceptionHandler::CExceptionHandler()+0x20>
   acca8:	f906a840 	str	x0, [x2, #3408]
   accac:	d65f03c0 	ret
   accb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   accb4:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   accb8:	d0000020 	adrp	x0, b2000 <SErrorStub+0xc>
   accbc:	910003fd 	mov	x29, sp
   accc0:	91388021 	add	x1, x1, #0xe20
   accc4:	911de000 	add	x0, x0, #0x778
   accc8:	52800562 	mov	w2, #0x2b                  	// #43
   acccc:	97ffd48d 	bl	a1f00 <assertion_failed>

00000000000accd0 <CExceptionHandler::Get()>:
   accd0:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   accd4:	f946a800 	ldr	x0, [x0, #3408]
   accd8:	b4000040 	cbz	x0, acce0 <CExceptionHandler::Get()+0x10>
   accdc:	d65f03c0 	ret
   acce0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   acce4:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   acce8:	d0000020 	adrp	x0, b2000 <SErrorStub+0xc>
   accec:	910003fd 	mov	x29, sp
   accf0:	91388021 	add	x1, x1, #0xe20
   accf4:	91260000 	add	x0, x0, #0x980
   accf8:	52800a82 	mov	w2, #0x54                  	// #84
   accfc:	97ffd481 	bl	a1f00 <assertion_failed>

00000000000acd00 <ExceptionHandler>:
   acd00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   acd04:	910003fd 	mov	x29, sp
   acd08:	a90153f3 	stp	x19, x20, [sp, #16]
   acd0c:	aa0003f3 	mov	x19, x0
   acd10:	aa0103f4 	mov	x20, x1
   acd14:	940004eb 	bl	ae0c0 <CInterruptSystem::DisableFIQ()>
   acd18:	d50341ff 	msr	daifclr, #0x1
   acd1c:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   acd20:	f946a800 	ldr	x0, [x0, #3408]
   acd24:	b4000120 	cbz	x0, acd48 <ExceptionHandler+0x48>
   acd28:	f9400003 	ldr	x3, [x0]
   acd2c:	aa1403e2 	mov	x2, x20
   acd30:	2a1303e1 	mov	w1, w19
   acd34:	a94153f3 	ldp	x19, x20, [sp, #16]
   acd38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   acd3c:	f9400863 	ldr	x3, [x3, #16]
   acd40:	aa0303f0 	mov	x16, x3
   acd44:	d61f0200 	br	x16
   acd48:	d0000041 	adrp	x1, b6000 <_etext+0x39c8>
   acd4c:	d0000020 	adrp	x0, b2000 <SErrorStub+0xc>
   acd50:	91388021 	add	x1, x1, #0xe20
   acd54:	91260000 	add	x0, x0, #0x980
   acd58:	52800a82 	mov	w2, #0x54                  	// #84
   acd5c:	97ffd469 	bl	a1f00 <assertion_failed>

00000000000acd60 <CMemorySystem::Destructor()>:
   acd60:	d00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   acd64:	f946ac22 	ldr	x2, [x1, #3416]
   acd68:	eb00005f 	cmp	x2, x0
   acd6c:	54000040 	b.eq	acd74 <CMemorySystem::Destructor()+0x14>  // b.none
   acd70:	d65f03c0 	ret
   acd74:	39400040 	ldrb	w0, [x2]
   acd78:	f906ac3f 	str	xzr, [x1, #3416]
   acd7c:	3607ffa0 	tbz	w0, #0, acd70 <CMemorySystem::Destructor()+0x10>
   acd80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   acd84:	910003fd 	mov	x29, sp
   acd88:	d5381000 	mrs	x0, sctlr_el1
   acd8c:	928000a1 	mov	x1, #0xfffffffffffffffa    	// #-6
   acd90:	8a010000 	and	x0, x0, x1
   acd94:	d5181000 	msr	sctlr_el1, x0
   acd98:	d5033f9f 	dsb	sy
   acd9c:	d5033fdf 	isb
   acda0:	94000164 	bl	ad330 <CleanDataCache>
   acda4:	940000ff 	bl	ad1a0 <InvalidateDataCache>
   acda8:	d508871f 	tlbi	vmalle1
   acdac:	d5033f9f 	dsb	sy
   acdb0:	d5033fdf 	isb
   acdb4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   acdb8:	d65f03c0 	ret
   acdbc:	d503201f 	nop

00000000000acdc0 <CMemorySystem::~CMemorySystem()>:
   acdc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   acdc4:	910003fd 	mov	x29, sp
   acdc8:	f9000bf3 	str	x19, [sp, #16]
   acdcc:	aa0003f3 	mov	x19, x0
   acdd0:	97ffffe4 	bl	acd60 <CMemorySystem::Destructor()>
   acdd4:	91064260 	add	x0, x19, #0x190
   acdd8:	9400117e 	bl	b13d0 <CPageAllocator::~CPageAllocator()>
   acddc:	91006260 	add	x0, x19, #0x18
   acde0:	f9400bf3 	ldr	x19, [sp, #16]
   acde4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   acde8:	17fffb9e 	b	abc60 <CHeapAllocator::~CHeapAllocator()>
   acdec:	d503201f 	nop

00000000000acdf0 <CMemorySystem::GetMemSize() const>:
   acdf0:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   acdf4:	f946ac01 	ldr	x1, [x0, #3416]
   acdf8:	b4000081 	cbz	x1, ace08 <CMemorySystem::GetMemSize() const+0x18>
   acdfc:	a9408022 	ldp	x2, x0, [x1, #8]
   ace00:	8b000040 	add	x0, x2, x0
   ace04:	d65f03c0 	ret
   ace08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ace0c:	f0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ace10:	910e2021 	add	x1, x1, #0x388
   ace14:	910003fd 	mov	x29, sp
   ace18:	91004020 	add	x0, x1, #0x10
   ace1c:	52801202 	mov	w2, #0x90                  	// #144
   ace20:	97ffd438 	bl	a1f00 <assertion_failed>
   ace24:	d503201f 	nop
   ace28:	d503201f 	nop
   ace2c:	d503201f 	nop

00000000000ace30 <CMemorySystem::Get()>:
   ace30:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ace34:	f946ac00 	ldr	x0, [x0, #3416]
   ace38:	b4000040 	cbz	x0, ace40 <CMemorySystem::Get()+0x10>
   ace3c:	d65f03c0 	ret
   ace40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ace44:	f0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ace48:	910e2021 	add	x1, x1, #0x388
   ace4c:	910003fd 	mov	x29, sp
   ace50:	91004020 	add	x0, x1, #0x10
   ace54:	528012c2 	mov	w2, #0x96                  	// #150
   ace58:	97ffd42a 	bl	a1f00 <assertion_failed>
   ace5c:	d503201f 	nop

00000000000ace60 <CMemorySystem::EnableMMU()>:
   ace60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ace64:	910003fd 	mov	x29, sp
   ace68:	39400001 	ldrb	w1, [x0]
   ace6c:	36000321 	tbz	w1, #0, aced0 <CMemorySystem::EnableMMU()+0x70>
   ace70:	d2809fe1 	mov	x1, #0x4ff                 	// #1279
   ace74:	d518a201 	msr	mair_el1, x1
   ace78:	f940d800 	ldr	x0, [x0, #432]
   ace7c:	b4000340 	cbz	x0, acee4 <CMemorySystem::EnableMMU()+0x84>
   ace80:	940001bc 	bl	ad570 <CTranslationTable::GetBaseAddress() const>
   ace84:	d5182000 	msr	ttbr0_el1, x0
   ace88:	d5382040 	mrs	x0, tcr_el1
   ace8c:	929ff7e1 	mov	x1, #0xffffffffffff0040    	// #-65472
   ace90:	f2bff7e1 	movk	x1, #0xffbf, lsl #16
   ace94:	f2dfff01 	movk	x1, #0xfff8, lsl #32
   ace98:	8a010000 	and	x0, x0, x1
   ace9c:	d28ea401 	mov	x1, #0x7520                	// #29984
   acea0:	f2a01001 	movk	x1, #0x80, lsl #16
   acea4:	aa010000 	orr	x0, x0, x1
   acea8:	d5182040 	msr	tcr_el1, x0
   aceac:	d5381000 	mrs	x0, sctlr_el1
   aceb0:	92800041 	mov	x1, #0xfffffffffffffffd    	// #-3
   aceb4:	f2bffee1 	movk	x1, #0xfff7, lsl #16
   aceb8:	8a010000 	and	x0, x0, x1
   acebc:	d28200a1 	mov	x1, #0x1005                	// #4101
   acec0:	aa010000 	orr	x0, x0, x1
   acec4:	d5181000 	msr	sctlr_el1, x0
   acec8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   acecc:	d65f03c0 	ret
   aced0:	f0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aced4:	910e2021 	add	x1, x1, #0x388
   aced8:	91008020 	add	x0, x1, #0x20
   acedc:	52801382 	mov	w2, #0x9c                  	// #156
   acee0:	97ffd408 	bl	a1f00 <assertion_failed>
   acee4:	f0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   acee8:	910e2021 	add	x1, x1, #0x388
   aceec:	9100c020 	add	x0, x1, #0x30
   acef0:	52801462 	mov	w2, #0xa3                  	// #163
   acef4:	97ffd403 	bl	a1f00 <assertion_failed>
   acef8:	d503201f 	nop
   acefc:	d503201f 	nop

00000000000acf00 <CMemorySystem::CMemorySystem(bool)>:
   acf00:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   acf04:	910003fd 	mov	x29, sp
   acf08:	a90153f3 	stp	x19, x20, [sp, #16]
   acf0c:	aa0003f3 	mov	x19, x0
   acf10:	f0000074 	adrp	x20, bb000 <s_ActLEDInfo+0x1f0>
   acf14:	910e2294 	add	x20, x20, #0x388
   acf18:	a9025bf5 	stp	x21, x22, [sp, #32]
   acf1c:	91006016 	add	x22, x0, #0x18
   acf20:	39000261 	strb	w1, [x19]
   acf24:	91014281 	add	x1, x20, #0x50
   acf28:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   acf2c:	aa1603e0 	mov	x0, x22
   acf30:	91064275 	add	x21, x19, #0x190
   acf34:	97fffb2f 	bl	abbf0 <CHeapAllocator::CHeapAllocator(char const*)>
   acf38:	aa1503e0 	mov	x0, x21
   acf3c:	9400111d 	bl	b13b0 <CPageAllocator::CPageAllocator()>
   acf40:	d00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   acf44:	f946ac01 	ldr	x1, [x0, #3416]
   acf48:	f900da7f 	str	xzr, [x19, #432]
   acf4c:	b40000a1 	cbz	x1, acf60 <CMemorySystem::CMemorySystem(bool)+0x60>
   acf50:	a94153f3 	ldp	x19, x20, [sp, #16]
   acf54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acf58:	a8c67bfd 	ldp	x29, x30, [sp], #96
   acf5c:	d65f03c0 	ret
   acf60:	f9001bf7 	str	x23, [sp, #48]
   acf64:	910103f7 	add	x23, sp, #0x40
   acf68:	f906ac13 	str	x19, [x0, #3416]
   acf6c:	52800021 	mov	w1, #0x1                   	// #1
   acf70:	aa1703e0 	mov	x0, x23
   acf74:	97ffd40b 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   acf78:	528000a1 	mov	w1, #0x5                   	// #5
   acf7c:	72a00021 	movk	w1, #0x1, lsl #16
   acf80:	910123e2 	add	x2, sp, #0x48
   acf84:	aa1703e0 	mov	x0, x23
   acf88:	52800004 	mov	w4, #0x0                   	// #0
   acf8c:	52800283 	mov	w3, #0x14                  	// #20
   acf90:	97ffd464 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   acf94:	36000340 	tbz	w0, #0, acffc <CMemorySystem::CMemorySystem(bool)+0xfc>
   acf98:	b94057e0 	ldr	w0, [sp, #84]
   acf9c:	35000500 	cbnz	w0, ad03c <CMemorySystem::CMemorySystem(bool)+0x13c>
   acfa0:	b9405be0 	ldr	w0, [sp, #88]
   acfa4:	b2689ff4 	mov	x20, #0xffffffffff000000    	// #-16777216
   acfa8:	d1580282 	sub	x2, x20, #0x600, lsl #12
   acfac:	8b020002 	add	x2, x0, x2
   acfb0:	8b140014 	add	x20, x0, x20
   acfb4:	f9000660 	str	x0, [x19, #8]
   acfb8:	d2a00083 	mov	x3, #0x40000               	// #262144
   acfbc:	aa1603e0 	mov	x0, x22
   acfc0:	d2a00c01 	mov	x1, #0x600000              	// #6291456
   acfc4:	97fffb2b 	bl	abc70 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   acfc8:	aa1503e0 	mov	x0, x21
   acfcc:	aa1403e1 	mov	x1, x20
   acfd0:	d2a02002 	mov	x2, #0x1000000             	// #16777216
   acfd4:	94001103 	bl	b13e0 <CPageAllocator::Setup(unsigned long, unsigned long)>
   acfd8:	39400260 	ldrb	w0, [x19]
   acfdc:	370001c0 	tbnz	w0, #0, ad014 <CMemorySystem::CMemorySystem(bool)+0x114>
   acfe0:	aa1703e0 	mov	x0, x23
   acfe4:	97ffd3f3 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   acfe8:	a94153f3 	ldp	x19, x20, [sp, #16]
   acfec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acff0:	f9401bf7 	ldr	x23, [sp, #48]
   acff4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   acff8:	d65f03c0 	ret
   acffc:	52a38001 	mov	w1, #0x1c000000            	// #469762048
   ad000:	d2a35402 	mov	x2, #0x1aa00000            	// #446693376
   ad004:	d2a38000 	mov	x0, #0x1c000000            	// #469762048
   ad008:	91580054 	add	x20, x2, #0x600, lsl #12
   ad00c:	290a87ff 	stp	wzr, w1, [sp, #84]
   ad010:	17ffffe9 	b	acfb4 <CMemorySystem::CMemorySystem(bool)+0xb4>
   ad014:	d2800200 	mov	x0, #0x10                  	// #16
   ad018:	97fffac6 	bl	abb30 <operator new(unsigned long)>
   ad01c:	f9400661 	ldr	x1, [x19, #8]
   ad020:	aa0003f4 	mov	x20, x0
   ad024:	94000213 	bl	ad870 <CTranslationTable::CTranslationTable(unsigned long)>
   ad028:	f900da74 	str	x20, [x19, #432]
   ad02c:	aa1303e0 	mov	x0, x19
   ad030:	97ffff8c 	bl	ace60 <CMemorySystem::EnableMMU()>
   ad034:	d5033fdf 	isb
   ad038:	17ffffea 	b	acfe0 <CMemorySystem::CMemorySystem(bool)+0xe0>
   ad03c:	aa1403e1 	mov	x1, x20
   ad040:	91016280 	add	x0, x20, #0x58
   ad044:	528006e2 	mov	w2, #0x37                  	// #55
   ad048:	97ffd3ae 	bl	a1f00 <assertion_failed>
   ad04c:	d503201f 	nop

00000000000ad050 <CMemorySystem::GetCoherentPage(unsigned int)>:
   ad050:	53103c00 	lsl	w0, w0, #16
   ad054:	91540000 	add	x0, x0, #0x500, lsl #12
   ad058:	d65f03c0 	ret
   ad05c:	00000000 	udf	#0

00000000000ad060 <CurrentExecutionLevel>:
   ad060:	d53b4220 	mrs	x0, daif
   ad064:	f27a0001 	ands	x1, x0, #0x40
   ad068:	53071c00 	ubfx	w0, w0, #7, #1
   ad06c:	52800041 	mov	w1, #0x2                   	// #2
   ad070:	1a810000 	csel	w0, w0, w1, eq	// eq = none
   ad074:	d65f03c0 	ret
   ad078:	d503201f 	nop
   ad07c:	d503201f 	nop

00000000000ad080 <EnterCritical>:
   ad080:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ad084:	51000401 	sub	w1, w0, #0x1
   ad088:	7100043f 	cmp	w1, #0x1
   ad08c:	910003fd 	mov	x29, sp
   ad090:	540002c8 	b.hi	ad0e8 <EnterCritical+0x68>  // b.pmore
   ad094:	d53b4224 	mrs	x4, daif
   ad098:	7100081f 	cmp	w0, #0x2
   ad09c:	54000321 	b.ne	ad100 <EnterCritical+0x80>  // b.any
   ad0a0:	d50343df 	msr	daifset, #0x3
   ad0a4:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ad0a8:	91358023 	add	x3, x1, #0xd60
   ad0ac:	b94d6022 	ldr	w2, [x1, #3424]
   ad0b0:	71004c5f 	cmp	w2, #0x13
   ad0b4:	54000348 	b.hi	ad11c <EnterCritical+0x9c>  // b.pmore
   ad0b8:	b94d6022 	ldr	w2, [x1, #3424]
   ad0bc:	91004063 	add	x3, x3, #0x10
   ad0c0:	7100041f 	cmp	w0, #0x1
   ad0c4:	2a0203e0 	mov	w0, w2
   ad0c8:	11000442 	add	w2, w2, #0x1
   ad0cc:	b90d6022 	str	w2, [x1, #3424]
   ad0d0:	f8207864 	str	x4, [x3, x0, lsl #3]
   ad0d4:	54000041 	b.ne	ad0dc <EnterCritical+0x5c>  // b.any
   ad0d8:	d50341ff 	msr	daifclr, #0x1
   ad0dc:	d5033fbf 	dmb	sy
   ad0e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ad0e4:	d65f03c0 	ret
   ad0e8:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ad0ec:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad0f0:	913b6021 	add	x1, x1, #0xed8
   ad0f4:	913bc000 	add	x0, x0, #0xef0
   ad0f8:	52800d22 	mov	w2, #0x69                  	// #105
   ad0fc:	97ffd381 	bl	a1f00 <assertion_failed>
   ad100:	3637fd04 	tbz	w4, #6, ad0a0 <EnterCritical+0x20>
   ad104:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ad108:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad10c:	913b6021 	add	x1, x1, #0xed8
   ad110:	913ca000 	add	x0, x0, #0xf28
   ad114:	52800de2 	mov	w2, #0x6f                  	// #111
   ad118:	97ffd37a 	bl	a1f00 <assertion_failed>
   ad11c:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ad120:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad124:	913b6021 	add	x1, x1, #0xed8
   ad128:	913d6000 	add	x0, x0, #0xf58
   ad12c:	52800e62 	mov	w2, #0x73                  	// #115
   ad130:	97ffd374 	bl	a1f00 <assertion_failed>
   ad134:	d503201f 	nop
   ad138:	d503201f 	nop
   ad13c:	d503201f 	nop

00000000000ad140 <LeaveCritical>:
   ad140:	d5033fbf 	dmb	sy
   ad144:	d50341df 	msr	daifset, #0x1
   ad148:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ad14c:	b94d6020 	ldr	w0, [x1, #3424]
   ad150:	34000120 	cbz	w0, ad174 <LeaveCritical+0x34>
   ad154:	b94d6020 	ldr	w0, [x1, #3424]
   ad158:	91358022 	add	x2, x1, #0xd60
   ad15c:	91004042 	add	x2, x2, #0x10
   ad160:	51000400 	sub	w0, w0, #0x1
   ad164:	b90d6020 	str	w0, [x1, #3424]
   ad168:	f8607840 	ldr	x0, [x2, x0, lsl #3]
   ad16c:	d51b4220 	msr	daif, x0
   ad170:	d65f03c0 	ret
   ad174:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ad178:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ad17c:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad180:	910003fd 	mov	x29, sp
   ad184:	913b6021 	add	x1, x1, #0xed8
   ad188:	913e0000 	add	x0, x0, #0xf80
   ad18c:	52801082 	mov	w2, #0x84                  	// #132
   ad190:	97ffd35c 	bl	a1f00 <assertion_failed>
   ad194:	d503201f 	nop
   ad198:	d503201f 	nop
   ad19c:	d503201f 	nop

00000000000ad1a0 <InvalidateDataCache>:
   ad1a0:	d2800000 	mov	x0, #0x0                   	// #0
   ad1a4:	d503201f 	nop
   ad1a8:	d5087640 	dc	isw, x0
   ad1ac:	32020001 	orr	w1, w0, #0x40000000
   ad1b0:	d5087641 	dc	isw, x1
   ad1b4:	32010001 	orr	w1, w0, #0x80000000
   ad1b8:	d5087641 	dc	isw, x1
   ad1bc:	32020401 	orr	w1, w0, #0xc0000000
   ad1c0:	d5087641 	dc	isw, x1
   ad1c4:	91010000 	add	x0, x0, #0x40
   ad1c8:	f140081f 	cmp	x0, #0x2, lsl #12
   ad1cc:	54fffee1 	b.ne	ad1a8 <InvalidateDataCache+0x8>  // b.any
   ad1d0:	52800050 	mov	w16, #0x2                   	// #2
   ad1d4:	72a20010 	movk	w16, #0x1000, lsl #16
   ad1d8:	5280004f 	mov	w15, #0x2                   	// #2
   ad1dc:	72a4000f 	movk	w15, #0x2000, lsl #16
   ad1e0:	5280004e 	mov	w14, #0x2                   	// #2
   ad1e4:	72a6000e 	movk	w14, #0x3000, lsl #16
   ad1e8:	5280004d 	mov	w13, #0x2                   	// #2
   ad1ec:	72a8000d 	movk	w13, #0x4000, lsl #16
   ad1f0:	5280004c 	mov	w12, #0x2                   	// #2
   ad1f4:	72aa000c 	movk	w12, #0x5000, lsl #16
   ad1f8:	5280004b 	mov	w11, #0x2                   	// #2
   ad1fc:	72ac000b 	movk	w11, #0x6000, lsl #16
   ad200:	5280004a 	mov	w10, #0x2                   	// #2
   ad204:	72ae000a 	movk	w10, #0x7000, lsl #16
   ad208:	52800049 	mov	w9, #0x2                   	// #2
   ad20c:	72b00009 	movk	w9, #0x8000, lsl #16
   ad210:	52800048 	mov	w8, #0x2                   	// #2
   ad214:	72b20008 	movk	w8, #0x9000, lsl #16
   ad218:	52800047 	mov	w7, #0x2                   	// #2
   ad21c:	72b40007 	movk	w7, #0xa000, lsl #16
   ad220:	52800046 	mov	w6, #0x2                   	// #2
   ad224:	72b60006 	movk	w6, #0xb000, lsl #16
   ad228:	52800045 	mov	w5, #0x2                   	// #2
   ad22c:	72b80005 	movk	w5, #0xc000, lsl #16
   ad230:	52800044 	mov	w4, #0x2                   	// #2
   ad234:	72ba0004 	movk	w4, #0xd000, lsl #16
   ad238:	52800043 	mov	w3, #0x2                   	// #2
   ad23c:	72bc0003 	movk	w3, #0xe000, lsl #16
   ad240:	52800042 	mov	w2, #0x2                   	// #2
   ad244:	72be0002 	movk	w2, #0xf000, lsl #16
   ad248:	52800000 	mov	w0, #0x0                   	// #0
   ad24c:	d503201f 	nop
   ad250:	321f0001 	orr	w1, w0, #0x2
   ad254:	d5087641 	dc	isw, x1
   ad258:	2a100001 	orr	w1, w0, w16
   ad25c:	d5087641 	dc	isw, x1
   ad260:	2a0f0001 	orr	w1, w0, w15
   ad264:	d5087641 	dc	isw, x1
   ad268:	2a0e0001 	orr	w1, w0, w14
   ad26c:	d5087641 	dc	isw, x1
   ad270:	2a0d0001 	orr	w1, w0, w13
   ad274:	d5087641 	dc	isw, x1
   ad278:	2a0c0001 	orr	w1, w0, w12
   ad27c:	d5087641 	dc	isw, x1
   ad280:	2a0b0001 	orr	w1, w0, w11
   ad284:	d5087641 	dc	isw, x1
   ad288:	2a0a0001 	orr	w1, w0, w10
   ad28c:	d5087641 	dc	isw, x1
   ad290:	2a090001 	orr	w1, w0, w9
   ad294:	d5087641 	dc	isw, x1
   ad298:	2a080001 	orr	w1, w0, w8
   ad29c:	d5087641 	dc	isw, x1
   ad2a0:	2a070001 	orr	w1, w0, w7
   ad2a4:	d5087641 	dc	isw, x1
   ad2a8:	2a060001 	orr	w1, w0, w6
   ad2ac:	d5087641 	dc	isw, x1
   ad2b0:	2a050001 	orr	w1, w0, w5
   ad2b4:	d5087641 	dc	isw, x1
   ad2b8:	2a040001 	orr	w1, w0, w4
   ad2bc:	d5087641 	dc	isw, x1
   ad2c0:	2a030001 	orr	w1, w0, w3
   ad2c4:	d5087641 	dc	isw, x1
   ad2c8:	2a020001 	orr	w1, w0, w2
   ad2cc:	d5087641 	dc	isw, x1
   ad2d0:	11010000 	add	w0, w0, #0x40
   ad2d4:	7140201f 	cmp	w0, #0x8, lsl #12
   ad2d8:	54fffbc1 	b.ne	ad250 <InvalidateDataCache+0xb0>  // b.any
   ad2dc:	d5033f9f 	dsb	sy
   ad2e0:	d65f03c0 	ret
   ad2e4:	d503201f 	nop
   ad2e8:	d503201f 	nop
   ad2ec:	d503201f 	nop

00000000000ad2f0 <InvalidateDataCacheL1Only>:
   ad2f0:	d2800000 	mov	x0, #0x0                   	// #0
   ad2f4:	d503201f 	nop
   ad2f8:	d5087640 	dc	isw, x0
   ad2fc:	32020001 	orr	w1, w0, #0x40000000
   ad300:	d5087641 	dc	isw, x1
   ad304:	32010001 	orr	w1, w0, #0x80000000
   ad308:	d5087641 	dc	isw, x1
   ad30c:	32020401 	orr	w1, w0, #0xc0000000
   ad310:	d5087641 	dc	isw, x1
   ad314:	91010000 	add	x0, x0, #0x40
   ad318:	f140081f 	cmp	x0, #0x2, lsl #12
   ad31c:	54fffee1 	b.ne	ad2f8 <InvalidateDataCacheL1Only+0x8>  // b.any
   ad320:	d5033f9f 	dsb	sy
   ad324:	d65f03c0 	ret
   ad328:	d503201f 	nop
   ad32c:	d503201f 	nop

00000000000ad330 <CleanDataCache>:
   ad330:	d2800000 	mov	x0, #0x0                   	// #0
   ad334:	d503201f 	nop
   ad338:	d5087a40 	dc	csw, x0
   ad33c:	32020001 	orr	w1, w0, #0x40000000
   ad340:	d5087a41 	dc	csw, x1
   ad344:	32010001 	orr	w1, w0, #0x80000000
   ad348:	d5087a41 	dc	csw, x1
   ad34c:	32020401 	orr	w1, w0, #0xc0000000
   ad350:	d5087a41 	dc	csw, x1
   ad354:	91010000 	add	x0, x0, #0x40
   ad358:	f140081f 	cmp	x0, #0x2, lsl #12
   ad35c:	54fffee1 	b.ne	ad338 <CleanDataCache+0x8>  // b.any
   ad360:	52800050 	mov	w16, #0x2                   	// #2
   ad364:	72a20010 	movk	w16, #0x1000, lsl #16
   ad368:	5280004f 	mov	w15, #0x2                   	// #2
   ad36c:	72a4000f 	movk	w15, #0x2000, lsl #16
   ad370:	5280004e 	mov	w14, #0x2                   	// #2
   ad374:	72a6000e 	movk	w14, #0x3000, lsl #16
   ad378:	5280004d 	mov	w13, #0x2                   	// #2
   ad37c:	72a8000d 	movk	w13, #0x4000, lsl #16
   ad380:	5280004c 	mov	w12, #0x2                   	// #2
   ad384:	72aa000c 	movk	w12, #0x5000, lsl #16
   ad388:	5280004b 	mov	w11, #0x2                   	// #2
   ad38c:	72ac000b 	movk	w11, #0x6000, lsl #16
   ad390:	5280004a 	mov	w10, #0x2                   	// #2
   ad394:	72ae000a 	movk	w10, #0x7000, lsl #16
   ad398:	52800049 	mov	w9, #0x2                   	// #2
   ad39c:	72b00009 	movk	w9, #0x8000, lsl #16
   ad3a0:	52800048 	mov	w8, #0x2                   	// #2
   ad3a4:	72b20008 	movk	w8, #0x9000, lsl #16
   ad3a8:	52800047 	mov	w7, #0x2                   	// #2
   ad3ac:	72b40007 	movk	w7, #0xa000, lsl #16
   ad3b0:	52800046 	mov	w6, #0x2                   	// #2
   ad3b4:	72b60006 	movk	w6, #0xb000, lsl #16
   ad3b8:	52800045 	mov	w5, #0x2                   	// #2
   ad3bc:	72b80005 	movk	w5, #0xc000, lsl #16
   ad3c0:	52800044 	mov	w4, #0x2                   	// #2
   ad3c4:	72ba0004 	movk	w4, #0xd000, lsl #16
   ad3c8:	52800043 	mov	w3, #0x2                   	// #2
   ad3cc:	72bc0003 	movk	w3, #0xe000, lsl #16
   ad3d0:	52800042 	mov	w2, #0x2                   	// #2
   ad3d4:	72be0002 	movk	w2, #0xf000, lsl #16
   ad3d8:	52800000 	mov	w0, #0x0                   	// #0
   ad3dc:	d503201f 	nop
   ad3e0:	321f0001 	orr	w1, w0, #0x2
   ad3e4:	d5087a41 	dc	csw, x1
   ad3e8:	2a100001 	orr	w1, w0, w16
   ad3ec:	d5087a41 	dc	csw, x1
   ad3f0:	2a0f0001 	orr	w1, w0, w15
   ad3f4:	d5087a41 	dc	csw, x1
   ad3f8:	2a0e0001 	orr	w1, w0, w14
   ad3fc:	d5087a41 	dc	csw, x1
   ad400:	2a0d0001 	orr	w1, w0, w13
   ad404:	d5087a41 	dc	csw, x1
   ad408:	2a0c0001 	orr	w1, w0, w12
   ad40c:	d5087a41 	dc	csw, x1
   ad410:	2a0b0001 	orr	w1, w0, w11
   ad414:	d5087a41 	dc	csw, x1
   ad418:	2a0a0001 	orr	w1, w0, w10
   ad41c:	d5087a41 	dc	csw, x1
   ad420:	2a090001 	orr	w1, w0, w9
   ad424:	d5087a41 	dc	csw, x1
   ad428:	2a080001 	orr	w1, w0, w8
   ad42c:	d5087a41 	dc	csw, x1
   ad430:	2a070001 	orr	w1, w0, w7
   ad434:	d5087a41 	dc	csw, x1
   ad438:	2a060001 	orr	w1, w0, w6
   ad43c:	d5087a41 	dc	csw, x1
   ad440:	2a050001 	orr	w1, w0, w5
   ad444:	d5087a41 	dc	csw, x1
   ad448:	2a040001 	orr	w1, w0, w4
   ad44c:	d5087a41 	dc	csw, x1
   ad450:	2a030001 	orr	w1, w0, w3
   ad454:	d5087a41 	dc	csw, x1
   ad458:	2a020001 	orr	w1, w0, w2
   ad45c:	d5087a41 	dc	csw, x1
   ad460:	11010000 	add	w0, w0, #0x40
   ad464:	7140201f 	cmp	w0, #0x8, lsl #12
   ad468:	54fffbc1 	b.ne	ad3e0 <CleanDataCache+0xb0>  // b.any
   ad46c:	d5033f9f 	dsb	sy
   ad470:	d65f03c0 	ret
   ad474:	d503201f 	nop
   ad478:	d503201f 	nop
   ad47c:	d503201f 	nop

00000000000ad480 <InvalidateDataCacheRange>:
   ad480:	d5087620 	dc	ivac, x0
   ad484:	f101003f 	cmp	x1, #0x40
   ad488:	54000149 	b.ls	ad4b0 <InvalidateDataCacheRange+0x30>  // b.plast
   ad48c:	d1010421 	sub	x1, x1, #0x41
   ad490:	91010000 	add	x0, x0, #0x40
   ad494:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   ad498:	8b000021 	add	x1, x1, x0
   ad49c:	14000002 	b	ad4a4 <InvalidateDataCacheRange+0x24>
   ad4a0:	91010000 	add	x0, x0, #0x40
   ad4a4:	d5087620 	dc	ivac, x0
   ad4a8:	eb01001f 	cmp	x0, x1
   ad4ac:	54ffffa1 	b.ne	ad4a0 <InvalidateDataCacheRange+0x20>  // b.any
   ad4b0:	d5033f9f 	dsb	sy
   ad4b4:	d65f03c0 	ret
   ad4b8:	d503201f 	nop
   ad4bc:	d503201f 	nop

00000000000ad4c0 <CleanDataCacheRange>:
   ad4c0:	d50b7a20 	dc	cvac, x0
   ad4c4:	f101003f 	cmp	x1, #0x40
   ad4c8:	54000149 	b.ls	ad4f0 <CleanDataCacheRange+0x30>  // b.plast
   ad4cc:	d1010421 	sub	x1, x1, #0x41
   ad4d0:	91010000 	add	x0, x0, #0x40
   ad4d4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   ad4d8:	8b000021 	add	x1, x1, x0
   ad4dc:	14000002 	b	ad4e4 <CleanDataCacheRange+0x24>
   ad4e0:	91010000 	add	x0, x0, #0x40
   ad4e4:	d50b7a20 	dc	cvac, x0
   ad4e8:	eb01001f 	cmp	x0, x1
   ad4ec:	54ffffa1 	b.ne	ad4e0 <CleanDataCacheRange+0x20>  // b.any
   ad4f0:	d5033f9f 	dsb	sy
   ad4f4:	d65f03c0 	ret
   ad4f8:	d503201f 	nop
   ad4fc:	d503201f 	nop

00000000000ad500 <CleanAndInvalidateDataCacheRange>:
   ad500:	d50b7e20 	dc	civac, x0
   ad504:	f101003f 	cmp	x1, #0x40
   ad508:	54000149 	b.ls	ad530 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   ad50c:	d1010421 	sub	x1, x1, #0x41
   ad510:	91010000 	add	x0, x0, #0x40
   ad514:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   ad518:	8b000021 	add	x1, x1, x0
   ad51c:	14000002 	b	ad524 <CleanAndInvalidateDataCacheRange+0x24>
   ad520:	91010000 	add	x0, x0, #0x40
   ad524:	d50b7e20 	dc	civac, x0
   ad528:	eb01001f 	cmp	x0, x1
   ad52c:	54ffffa1 	b.ne	ad520 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   ad530:	d5033f9f 	dsb	sy
   ad534:	d65f03c0 	ret
   ad538:	d503201f 	nop
   ad53c:	d503201f 	nop

00000000000ad540 <SyncDataAndInstructionCache>:
   ad540:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ad544:	910003fd 	mov	x29, sp
   ad548:	97ffff7a 	bl	ad330 <CleanDataCache>
   ad54c:	d508751f 	ic	iallu
   ad550:	d5033f9f 	dsb	sy
   ad554:	d5033fdf 	isb
   ad558:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ad55c:	d65f03c0 	ret

00000000000ad560 <CTranslationTable::~CTranslationTable()>:
   ad560:	f9400400 	ldr	x0, [x0, #8]
   ad564:	14000a07 	b	afd80 <pfree>
   ad568:	d503201f 	nop
   ad56c:	d503201f 	nop

00000000000ad570 <CTranslationTable::GetBaseAddress() const>:
   ad570:	f9400400 	ldr	x0, [x0, #8]
   ad574:	b4000040 	cbz	x0, ad57c <CTranslationTable::GetBaseAddress() const+0xc>
   ad578:	d65f03c0 	ret
   ad57c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ad580:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ad584:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad588:	910003fd 	mov	x29, sp
   ad58c:	913e6021 	add	x1, x1, #0xf98
   ad590:	913ec000 	add	x0, x0, #0xfb0
   ad594:	52800ce2 	mov	w2, #0x67                  	// #103
   ad598:	97ffd25a 	bl	a1f00 <assertion_failed>
   ad59c:	d503201f 	nop

00000000000ad5a0 <CTranslationTable::CreateLevel3Table(unsigned long)>:
   ad5a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad5a4:	910003fd 	mov	x29, sp
   ad5a8:	f9000fe0 	str	x0, [sp, #24]
   ad5ac:	f9000be1 	str	x1, [sp, #16]
   ad5b0:	940009ec 	bl	afd60 <palloc>
   ad5b4:	f9001be0 	str	x0, [sp, #48]
   ad5b8:	f9401be0 	ldr	x0, [sp, #48]
   ad5bc:	f100001f 	cmp	x0, #0x0
   ad5c0:	1a9f07e0 	cset	w0, ne	// ne = any
   ad5c4:	12001c00 	and	w0, w0, #0xff
   ad5c8:	92401c00 	and	x0, x0, #0xff
   ad5cc:	f100001f 	cmp	x0, #0x0
   ad5d0:	540000e1 	b.ne	ad5ec <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   ad5d4:	52800dc2 	mov	w2, #0x6e                  	// #110
   ad5d8:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad5dc:	913e6001 	add	x1, x0, #0xf98
   ad5e0:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad5e4:	913f0000 	add	x0, x0, #0xfc0
   ad5e8:	97ffd246 	bl	a1f00 <assertion_failed>
   ad5ec:	b9003fff 	str	wzr, [sp, #60]
   ad5f0:	14000099 	b	ad854 <CTranslationTable::CreateLevel3Table(unsigned long)+0x2b4>
   ad5f4:	b9403fe0 	ldr	w0, [sp, #60]
   ad5f8:	d37df000 	lsl	x0, x0, #3
   ad5fc:	f9401be1 	ldr	x1, [sp, #48]
   ad600:	8b000020 	add	x0, x1, x0
   ad604:	f90017e0 	str	x0, [sp, #40]
   ad608:	f94017e0 	ldr	x0, [sp, #40]
   ad60c:	39400001 	ldrb	w1, [x0]
   ad610:	32000421 	orr	w1, w1, #0x3
   ad614:	39000001 	strb	w1, [x0]
   ad618:	f94017e0 	ldr	x0, [sp, #40]
   ad61c:	39400001 	ldrb	w1, [x0]
   ad620:	121b7021 	and	w1, w1, #0xffffffe3
   ad624:	39000001 	strb	w1, [x0]
   ad628:	f94017e0 	ldr	x0, [sp, #40]
   ad62c:	39400001 	ldrb	w1, [x0]
   ad630:	121a7821 	and	w1, w1, #0xffffffdf
   ad634:	39000001 	strb	w1, [x0]
   ad638:	f94017e0 	ldr	x0, [sp, #40]
   ad63c:	39400001 	ldrb	w1, [x0]
   ad640:	12001421 	and	w1, w1, #0x3f
   ad644:	39000001 	strb	w1, [x0]
   ad648:	f94017e0 	ldr	x0, [sp, #40]
   ad64c:	39400401 	ldrb	w1, [x0, #1]
   ad650:	32000421 	orr	w1, w1, #0x3
   ad654:	39000401 	strb	w1, [x0, #1]
   ad658:	f94017e0 	ldr	x0, [sp, #40]
   ad65c:	39400401 	ldrb	w1, [x0, #1]
   ad660:	321e0021 	orr	w1, w1, #0x4
   ad664:	39000401 	strb	w1, [x0, #1]
   ad668:	f94017e0 	ldr	x0, [sp, #40]
   ad66c:	39400401 	ldrb	w1, [x0, #1]
   ad670:	121c7821 	and	w1, w1, #0xfffffff7
   ad674:	39000401 	strb	w1, [x0, #1]
   ad678:	f94017e0 	ldr	x0, [sp, #40]
   ad67c:	39400401 	ldrb	w1, [x0, #1]
   ad680:	12000c21 	and	w1, w1, #0xf
   ad684:	39000401 	strb	w1, [x0, #1]
   ad688:	f9400be0 	ldr	x0, [sp, #16]
   ad68c:	d350fc00 	lsr	x0, x0, #16
   ad690:	2a0003e1 	mov	w1, w0
   ad694:	f94017e0 	ldr	x0, [sp, #40]
   ad698:	2a0103e2 	mov	w2, w1
   ad69c:	92401c44 	and	x4, x2, #0xff
   ad6a0:	39400802 	ldrb	w2, [x0, #2]
   ad6a4:	52800003 	mov	w3, #0x0                   	// #0
   ad6a8:	0a030042 	and	w2, w2, w3
   ad6ac:	2a0203e3 	mov	w3, w2
   ad6b0:	2a0403e2 	mov	w2, w4
   ad6b4:	2a020062 	orr	w2, w3, w2
   ad6b8:	39000802 	strb	w2, [x0, #2]
   ad6bc:	53087c22 	lsr	w2, w1, #8
   ad6c0:	2a0203e2 	mov	w2, w2
   ad6c4:	92401c44 	and	x4, x2, #0xff
   ad6c8:	39400c02 	ldrb	w2, [x0, #3]
   ad6cc:	52800003 	mov	w3, #0x0                   	// #0
   ad6d0:	0a030042 	and	w2, w2, w3
   ad6d4:	2a0203e3 	mov	w3, w2
   ad6d8:	2a0403e2 	mov	w2, w4
   ad6dc:	2a020062 	orr	w2, w3, w2
   ad6e0:	39000c02 	strb	w2, [x0, #3]
   ad6e4:	53107c22 	lsr	w2, w1, #16
   ad6e8:	2a0203e2 	mov	w2, w2
   ad6ec:	92401c44 	and	x4, x2, #0xff
   ad6f0:	39401002 	ldrb	w2, [x0, #4]
   ad6f4:	52800003 	mov	w3, #0x0                   	// #0
   ad6f8:	0a030042 	and	w2, w2, w3
   ad6fc:	2a0203e3 	mov	w3, w2
   ad700:	2a0403e2 	mov	w2, w4
   ad704:	2a020062 	orr	w2, w3, w2
   ad708:	39001002 	strb	w2, [x0, #4]
   ad70c:	53187c21 	lsr	w1, w1, #24
   ad710:	2a0103e3 	mov	w3, w1
   ad714:	39401401 	ldrb	w1, [x0, #5]
   ad718:	52800002 	mov	w2, #0x0                   	// #0
   ad71c:	0a020021 	and	w1, w1, w2
   ad720:	2a0103e2 	mov	w2, w1
   ad724:	2a0303e1 	mov	w1, w3
   ad728:	2a010041 	orr	w1, w2, w1
   ad72c:	39001401 	strb	w1, [x0, #5]
   ad730:	f94017e0 	ldr	x0, [sp, #40]
   ad734:	39401801 	ldrb	w1, [x0, #6]
   ad738:	121c6c21 	and	w1, w1, #0xfffffff0
   ad73c:	39001801 	strb	w1, [x0, #6]
   ad740:	f94017e0 	ldr	x0, [sp, #40]
   ad744:	39401801 	ldrb	w1, [x0, #6]
   ad748:	121b7821 	and	w1, w1, #0xffffffef
   ad74c:	39001801 	strb	w1, [x0, #6]
   ad750:	f94017e0 	ldr	x0, [sp, #40]
   ad754:	39401801 	ldrb	w1, [x0, #6]
   ad758:	121a7821 	and	w1, w1, #0xffffffdf
   ad75c:	39001801 	strb	w1, [x0, #6]
   ad760:	f94017e0 	ldr	x0, [sp, #40]
   ad764:	39401801 	ldrb	w1, [x0, #6]
   ad768:	321a0021 	orr	w1, w1, #0x40
   ad76c:	39001801 	strb	w1, [x0, #6]
   ad770:	f94017e0 	ldr	x0, [sp, #40]
   ad774:	39401801 	ldrb	w1, [x0, #6]
   ad778:	12001821 	and	w1, w1, #0x7f
   ad77c:	39001801 	strb	w1, [x0, #6]
   ad780:	39401c01 	ldrb	w1, [x0, #7]
   ad784:	52800002 	mov	w2, #0x0                   	// #0
   ad788:	0a020021 	and	w1, w1, w2
   ad78c:	39001c01 	strb	w1, [x0, #7]
   ad790:	b00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ad794:	f9459000 	ldr	x0, [x0, #2848]
   ad798:	f9400be1 	ldr	x1, [sp, #16]
   ad79c:	eb00003f 	cmp	x1, x0
   ad7a0:	540004e3 	b.cc	ad83c <CTranslationTable::CreateLevel3Table(unsigned long)+0x29c>  // b.lo, b.ul, b.last
   ad7a4:	f94017e0 	ldr	x0, [sp, #40]
   ad7a8:	39401801 	ldrb	w1, [x0, #6]
   ad7ac:	321b0021 	orr	w1, w1, #0x20
   ad7b0:	39001801 	strb	w1, [x0, #6]
   ad7b4:	f9400fe0 	ldr	x0, [sp, #24]
   ad7b8:	f9400000 	ldr	x0, [x0]
   ad7bc:	f9400be1 	ldr	x1, [sp, #16]
   ad7c0:	eb00003f 	cmp	x1, x0
   ad7c4:	54000183 	b.cc	ad7f4 <CTranslationTable::CreateLevel3Table(unsigned long)+0x254>  // b.lo, b.ul, b.last
   ad7c8:	f94017e1 	ldr	x1, [sp, #40]
   ad7cc:	39400020 	ldrb	w0, [x1]
   ad7d0:	52800022 	mov	w2, #0x1                   	// #1
   ad7d4:	331e0840 	bfi	w0, w2, #2, #3
   ad7d8:	39000020 	strb	w0, [x1]
   ad7dc:	f94017e1 	ldr	x1, [sp, #40]
   ad7e0:	39400420 	ldrb	w0, [x1, #1]
   ad7e4:	52800042 	mov	w2, #0x2                   	// #2
   ad7e8:	33000440 	bfxil	w0, w2, #0, #2
   ad7ec:	39000420 	strb	w0, [x1, #1]
   ad7f0:	14000013 	b	ad83c <CTranslationTable::CreateLevel3Table(unsigned long)+0x29c>
   ad7f4:	f9400be1 	ldr	x1, [sp, #16]
   ad7f8:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   ad7fc:	eb00003f 	cmp	x1, x0
   ad800:	540001e9 	b.ls	ad83c <CTranslationTable::CreateLevel3Table(unsigned long)+0x29c>  // b.plast
   ad804:	f9400be1 	ldr	x1, [sp, #16]
   ad808:	12bff400 	mov	w0, #0x5fffff              	// #6291455
   ad80c:	eb00003f 	cmp	x1, x0
   ad810:	54000168 	b.hi	ad83c <CTranslationTable::CreateLevel3Table(unsigned long)+0x29c>  // b.pmore
   ad814:	f94017e1 	ldr	x1, [sp, #40]
   ad818:	39400020 	ldrb	w0, [x1]
   ad81c:	52800042 	mov	w2, #0x2                   	// #2
   ad820:	331e0840 	bfi	w0, w2, #2, #3
   ad824:	39000020 	strb	w0, [x1]
   ad828:	f94017e1 	ldr	x1, [sp, #40]
   ad82c:	39400420 	ldrb	w0, [x1, #1]
   ad830:	52800042 	mov	w2, #0x2                   	// #2
   ad834:	33000440 	bfxil	w0, w2, #0, #2
   ad838:	39000420 	strb	w0, [x1, #1]
   ad83c:	f9400be0 	ldr	x0, [sp, #16]
   ad840:	91404000 	add	x0, x0, #0x10, lsl #12
   ad844:	f9000be0 	str	x0, [sp, #16]
   ad848:	b9403fe0 	ldr	w0, [sp, #60]
   ad84c:	11000400 	add	w0, w0, #0x1
   ad850:	b9003fe0 	str	w0, [sp, #60]
   ad854:	b9403fe1 	ldr	w1, [sp, #60]
   ad858:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   ad85c:	6b00003f 	cmp	w1, w0
   ad860:	54ffeca9 	b.ls	ad5f4 <CTranslationTable::CreateLevel3Table(unsigned long)+0x54>  // b.plast
   ad864:	f9401be0 	ldr	x0, [sp, #48]
   ad868:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad86c:	d65f03c0 	ret

00000000000ad870 <CTranslationTable::CTranslationTable(unsigned long)>:
   ad870:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad874:	910003fd 	mov	x29, sp
   ad878:	f9000fe0 	str	x0, [sp, #24]
   ad87c:	f9000be1 	str	x1, [sp, #16]
   ad880:	f9400fe0 	ldr	x0, [sp, #24]
   ad884:	f9400be1 	ldr	x1, [sp, #16]
   ad888:	f9000001 	str	x1, [x0]
   ad88c:	f9400fe0 	ldr	x0, [sp, #24]
   ad890:	f900041f 	str	xzr, [x0, #8]
   ad894:	94000933 	bl	afd60 <palloc>
   ad898:	aa0003e1 	mov	x1, x0
   ad89c:	f9400fe0 	ldr	x0, [sp, #24]
   ad8a0:	f9000401 	str	x1, [x0, #8]
   ad8a4:	f9400fe0 	ldr	x0, [sp, #24]
   ad8a8:	f9400400 	ldr	x0, [x0, #8]
   ad8ac:	f100001f 	cmp	x0, #0x0
   ad8b0:	1a9f07e0 	cset	w0, ne	// ne = any
   ad8b4:	12001c00 	and	w0, w0, #0xff
   ad8b8:	92401c00 	and	x0, x0, #0xff
   ad8bc:	f100001f 	cmp	x0, #0x0
   ad8c0:	540000e1 	b.ne	ad8dc <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   ad8c4:	52800662 	mov	w2, #0x33                  	// #51
   ad8c8:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad8cc:	913e6001 	add	x1, x0, #0xf98
   ad8d0:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad8d4:	913ec000 	add	x0, x0, #0xfb0
   ad8d8:	97ffd18a 	bl	a1f00 <assertion_failed>
   ad8dc:	f9400fe0 	ldr	x0, [sp, #24]
   ad8e0:	f9400400 	ldr	x0, [x0, #8]
   ad8e4:	d2a00022 	mov	x2, #0x10000               	// #65536
   ad8e8:	52800001 	mov	w1, #0x0                   	// #0
   ad8ec:	97fff61f 	bl	ab168 <memset>
   ad8f0:	b9003fff 	str	wzr, [sp, #60]
   ad8f4:	1400006f 	b	adab0 <CTranslationTable::CTranslationTable(unsigned long)+0x240>
   ad8f8:	b9403fe0 	ldr	w0, [sp, #60]
   ad8fc:	d3638800 	lsl	x0, x0, #29
   ad900:	f9001be0 	str	x0, [sp, #48]
   ad904:	f9401be1 	ldr	x1, [sp, #48]
   ad908:	f9400fe0 	ldr	x0, [sp, #24]
   ad90c:	97ffff25 	bl	ad5a0 <CTranslationTable::CreateLevel3Table(unsigned long)>
   ad910:	f90017e0 	str	x0, [sp, #40]
   ad914:	f94017e0 	ldr	x0, [sp, #40]
   ad918:	f100001f 	cmp	x0, #0x0
   ad91c:	1a9f07e0 	cset	w0, ne	// ne = any
   ad920:	12001c00 	and	w0, w0, #0xff
   ad924:	92401c00 	and	x0, x0, #0xff
   ad928:	f100001f 	cmp	x0, #0x0
   ad92c:	540000e1 	b.ne	ad948 <CTranslationTable::CTranslationTable(unsigned long)+0xd8>  // b.any
   ad930:	528009a2 	mov	w2, #0x4d                  	// #77
   ad934:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad938:	913e6001 	add	x1, x0, #0xf98
   ad93c:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   ad940:	913f0000 	add	x0, x0, #0xfc0
   ad944:	97ffd16f 	bl	a1f00 <assertion_failed>
   ad948:	f9400fe0 	ldr	x0, [sp, #24]
   ad94c:	f9400401 	ldr	x1, [x0, #8]
   ad950:	b9403fe0 	ldr	w0, [sp, #60]
   ad954:	d37df000 	lsl	x0, x0, #3
   ad958:	8b000020 	add	x0, x1, x0
   ad95c:	f90013e0 	str	x0, [sp, #32]
   ad960:	f94013e0 	ldr	x0, [sp, #32]
   ad964:	39400001 	ldrb	w1, [x0]
   ad968:	32000421 	orr	w1, w1, #0x3
   ad96c:	39000001 	strb	w1, [x0]
   ad970:	f94013e0 	ldr	x0, [sp, #32]
   ad974:	39400001 	ldrb	w1, [x0]
   ad978:	12000421 	and	w1, w1, #0x3
   ad97c:	39000001 	strb	w1, [x0]
   ad980:	39400401 	ldrb	w1, [x0, #1]
   ad984:	52800002 	mov	w2, #0x0                   	// #0
   ad988:	0a020021 	and	w1, w1, w2
   ad98c:	39000401 	strb	w1, [x0, #1]
   ad990:	f94017e0 	ldr	x0, [sp, #40]
   ad994:	d350fc00 	lsr	x0, x0, #16
   ad998:	2a0003e1 	mov	w1, w0
   ad99c:	f94013e0 	ldr	x0, [sp, #32]
   ad9a0:	2a0103e2 	mov	w2, w1
   ad9a4:	92401c44 	and	x4, x2, #0xff
   ad9a8:	39400802 	ldrb	w2, [x0, #2]
   ad9ac:	52800003 	mov	w3, #0x0                   	// #0
   ad9b0:	0a030042 	and	w2, w2, w3
   ad9b4:	2a0203e3 	mov	w3, w2
   ad9b8:	2a0403e2 	mov	w2, w4
   ad9bc:	2a020062 	orr	w2, w3, w2
   ad9c0:	39000802 	strb	w2, [x0, #2]
   ad9c4:	53087c22 	lsr	w2, w1, #8
   ad9c8:	2a0203e2 	mov	w2, w2
   ad9cc:	92401c44 	and	x4, x2, #0xff
   ad9d0:	39400c02 	ldrb	w2, [x0, #3]
   ad9d4:	52800003 	mov	w3, #0x0                   	// #0
   ad9d8:	0a030042 	and	w2, w2, w3
   ad9dc:	2a0203e3 	mov	w3, w2
   ad9e0:	2a0403e2 	mov	w2, w4
   ad9e4:	2a020062 	orr	w2, w3, w2
   ad9e8:	39000c02 	strb	w2, [x0, #3]
   ad9ec:	53107c22 	lsr	w2, w1, #16
   ad9f0:	2a0203e2 	mov	w2, w2
   ad9f4:	92401c44 	and	x4, x2, #0xff
   ad9f8:	39401002 	ldrb	w2, [x0, #4]
   ad9fc:	52800003 	mov	w3, #0x0                   	// #0
   ada00:	0a030042 	and	w2, w2, w3
   ada04:	2a0203e3 	mov	w3, w2
   ada08:	2a0403e2 	mov	w2, w4
   ada0c:	2a020062 	orr	w2, w3, w2
   ada10:	39001002 	strb	w2, [x0, #4]
   ada14:	53187c21 	lsr	w1, w1, #24
   ada18:	2a0103e3 	mov	w3, w1
   ada1c:	39401401 	ldrb	w1, [x0, #5]
   ada20:	52800002 	mov	w2, #0x0                   	// #0
   ada24:	0a020021 	and	w1, w1, w2
   ada28:	2a0103e2 	mov	w2, w1
   ada2c:	2a0303e1 	mov	w1, w3
   ada30:	2a010041 	orr	w1, w2, w1
   ada34:	39001401 	strb	w1, [x0, #5]
   ada38:	f94013e0 	ldr	x0, [sp, #32]
   ada3c:	39401801 	ldrb	w1, [x0, #6]
   ada40:	121c6c21 	and	w1, w1, #0xfffffff0
   ada44:	39001801 	strb	w1, [x0, #6]
   ada48:	f94013e0 	ldr	x0, [sp, #32]
   ada4c:	39401801 	ldrb	w1, [x0, #6]
   ada50:	12000c21 	and	w1, w1, #0xf
   ada54:	39001801 	strb	w1, [x0, #6]
   ada58:	39401c01 	ldrb	w1, [x0, #7]
   ada5c:	121d7021 	and	w1, w1, #0xfffffff8
   ada60:	39001c01 	strb	w1, [x0, #7]
   ada64:	f94013e0 	ldr	x0, [sp, #32]
   ada68:	39401c01 	ldrb	w1, [x0, #7]
   ada6c:	121c7821 	and	w1, w1, #0xfffffff7
   ada70:	39001c01 	strb	w1, [x0, #7]
   ada74:	f94013e0 	ldr	x0, [sp, #32]
   ada78:	39401c01 	ldrb	w1, [x0, #7]
   ada7c:	121b7821 	and	w1, w1, #0xffffffef
   ada80:	39001c01 	strb	w1, [x0, #7]
   ada84:	f94013e0 	ldr	x0, [sp, #32]
   ada88:	39401c01 	ldrb	w1, [x0, #7]
   ada8c:	12197421 	and	w1, w1, #0xffffff9f
   ada90:	39001c01 	strb	w1, [x0, #7]
   ada94:	f94013e0 	ldr	x0, [sp, #32]
   ada98:	39401c01 	ldrb	w1, [x0, #7]
   ada9c:	12001821 	and	w1, w1, #0x7f
   adaa0:	39001c01 	strb	w1, [x0, #7]
   adaa4:	b9403fe0 	ldr	w0, [sp, #60]
   adaa8:	11000400 	add	w0, w0, #0x1
   adaac:	b9003fe0 	str	w0, [sp, #60]
   adab0:	b9403fe0 	ldr	w0, [sp, #60]
   adab4:	7100081f 	cmp	w0, #0x2
   adab8:	54fff209 	b.ls	ad8f8 <CTranslationTable::CTranslationTable(unsigned long)+0x88>  // b.plast
   adabc:	d5033f9f 	dsb	sy
   adac0:	d503201f 	nop
   adac4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   adac8:	d65f03c0 	ret
   adacc:	00000000 	udf	#0

00000000000adad0 <CInterruptSystem::CInterruptSystem()>:
   adad0:	b00000e2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   adad4:	f9470841 	ldr	x1, [x2, #3600]
   adad8:	b4000041 	cbz	x1, adae0 <CInterruptSystem::CInterruptSystem()+0x10>
   adadc:	d65f03c0 	ret
   adae0:	aa0003e1 	mov	x1, x0
   adae4:	f9070840 	str	x0, [x2, #3600]
   adae8:	910a8000 	add	x0, x0, #0x2a0
   adaec:	d503201f 	nop
   adaf0:	f900003f 	str	xzr, [x1]
   adaf4:	91002021 	add	x1, x1, #0x8
   adaf8:	f9014c3f 	str	xzr, [x1, #664]
   adafc:	eb00003f 	cmp	x1, x0
   adb00:	54ffff81 	b.ne	adaf0 <CInterruptSystem::CInterruptSystem()+0x20>  // b.any
   adb04:	d65f03c0 	ret
   adb08:	d503201f 	nop
   adb0c:	d503201f 	nop

00000000000adb10 <CInterruptSystem::~CInterruptSystem()>:
   adb10:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   adb14:	f9470822 	ldr	x2, [x1, #3600]
   adb18:	eb00005f 	cmp	x2, x0
   adb1c:	54000040 	b.eq	adb24 <CInterruptSystem::~CInterruptSystem()+0x14>  // b.none
   adb20:	d65f03c0 	ret
   adb24:	d50342df 	msr	daifset, #0x2
   adb28:	d2964183 	mov	x3, #0xb20c                	// #45580
   adb2c:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   adb30:	aa0303e0 	mov	x0, x3
   adb34:	12800002 	mov	w2, #0xffffffff            	// #-1
   adb38:	d2800804 	mov	x4, #0x40                  	// #64
   adb3c:	f2a80004 	movk	x4, #0x4000, lsl #16
   adb40:	b801041f 	str	wzr, [x0], #16
   adb44:	b9001062 	str	w2, [x3, #16]
   adb48:	b9000402 	str	w2, [x0, #4]
   adb4c:	b9000802 	str	w2, [x0, #8]
   adb50:	b900009f 	str	wzr, [x4]
   adb54:	f907083f 	str	xzr, [x1, #3600]
   adb58:	d65f03c0 	ret
   adb5c:	d503201f 	nop

00000000000adb60 <CInterruptSystem::Destructor()>:
   adb60:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   adb64:	f9470822 	ldr	x2, [x1, #3600]
   adb68:	eb00005f 	cmp	x2, x0
   adb6c:	54000040 	b.eq	adb74 <CInterruptSystem::Destructor()+0x14>  // b.none
   adb70:	d65f03c0 	ret
   adb74:	d50342df 	msr	daifset, #0x2
   adb78:	d2964183 	mov	x3, #0xb20c                	// #45580
   adb7c:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   adb80:	aa0303e0 	mov	x0, x3
   adb84:	12800002 	mov	w2, #0xffffffff            	// #-1
   adb88:	d2800804 	mov	x4, #0x40                  	// #64
   adb8c:	f2a80004 	movk	x4, #0x4000, lsl #16
   adb90:	b801041f 	str	wzr, [x0], #16
   adb94:	b9001062 	str	w2, [x3, #16]
   adb98:	b9000402 	str	w2, [x0, #4]
   adb9c:	b9000802 	str	w2, [x0, #8]
   adba0:	b900009f 	str	wzr, [x4]
   adba4:	f907083f 	str	xzr, [x1, #3600]
   adba8:	d65f03c0 	ret
   adbac:	d503201f 	nop

00000000000adbb0 <CInterruptSystem::Initialize()>:
   adbb0:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   adbb4:	f9470821 	ldr	x1, [x1, #3600]
   adbb8:	eb00003f 	cmp	x1, x0
   adbbc:	540001a1 	b.ne	adbf0 <CInterruptSystem::Initialize()+0x40>  // b.any
   adbc0:	d2964182 	mov	x2, #0xb20c                	// #45580
   adbc4:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   adbc8:	aa0203e0 	mov	x0, x2
   adbcc:	12800001 	mov	w1, #0xffffffff            	// #-1
   adbd0:	d2800803 	mov	x3, #0x40                  	// #64
   adbd4:	f2a80003 	movk	x3, #0x4000, lsl #16
   adbd8:	b801041f 	str	wzr, [x0], #16
   adbdc:	b9001041 	str	w1, [x2, #16]
   adbe0:	b9000401 	str	w1, [x0, #4]
   adbe4:	b9000801 	str	w1, [x0, #8]
   adbe8:	b900007f 	str	wzr, [x3]
   adbec:	d50342ff 	msr	daifclr, #0x2
   adbf0:	52800020 	mov	w0, #0x1                   	// #1
   adbf4:	d65f03c0 	ret
   adbf8:	d503201f 	nop
   adbfc:	d503201f 	nop

00000000000adc00 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   adc00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   adc04:	71011c3f 	cmp	w1, #0x47
   adc08:	910003fd 	mov	x29, sp
   adc0c:	54000708 	b.hi	adcec <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xec>  // b.pmore
   adc10:	b40007a2 	cbz	x2, add04 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x104>
   adc14:	b00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   adc18:	f9459c00 	ldr	x0, [x0, #2872]
   adc1c:	39400007 	ldrb	w7, [x0]
   adc20:	39400406 	ldrb	w6, [x0, #1]
   adc24:	39400805 	ldrb	w5, [x0, #2]
   adc28:	39400c04 	ldrb	w4, [x0, #3]
   adc2c:	aa0620e6 	orr	x6, x7, x6, lsl #8
   adc30:	39401007 	ldrb	w7, [x0, #4]
   adc34:	aa0540c5 	orr	x5, x6, x5, lsl #16
   adc38:	39401406 	ldrb	w6, [x0, #5]
   adc3c:	aa0460a4 	orr	x4, x5, x4, lsl #24
   adc40:	39401805 	ldrb	w5, [x0, #6]
   adc44:	aa078087 	orr	x7, x4, x7, lsl #32
   adc48:	39401c04 	ldrb	w4, [x0, #7]
   adc4c:	aa06a0e6 	orr	x6, x7, x6, lsl #40
   adc50:	aa05c0c5 	orr	x5, x6, x5, lsl #48
   adc54:	aa04e0a4 	orr	x4, x5, x4, lsl #56
   adc58:	b5000624 	cbnz	x4, add1c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x11c>
   adc5c:	d296418e 	mov	x14, #0xb20c                	// #45580
   adc60:	f2a7e00e 	movk	x14, #0x3f00, lsl #16
   adc64:	53083c46 	ubfx	w6, w2, #8, #8
   adc68:	53105c45 	ubfx	w5, w2, #16, #8
   adc6c:	53187c44 	lsr	w4, w2, #24
   adc70:	39000002 	strb	w2, [x0]
   adc74:	39000406 	strb	w6, [x0, #1]
   adc78:	32190021 	orr	w1, w1, #0x80
   adc7c:	39000805 	strb	w5, [x0, #2]
   adc80:	d3609c4d 	ubfx	x13, x2, #32, #8
   adc84:	39000c04 	strb	w4, [x0, #3]
   adc88:	d368bc4c 	ubfx	x12, x2, #40, #8
   adc8c:	b90001c1 	str	w1, [x14]
   adc90:	d370dc4b 	ubfx	x11, x2, #48, #8
   adc94:	53083c6a 	ubfx	w10, w3, #8, #8
   adc98:	d378fc42 	lsr	x2, x2, #56
   adc9c:	53105c69 	ubfx	w9, w3, #16, #8
   adca0:	53187c68 	lsr	w8, w3, #24
   adca4:	d3609c67 	ubfx	x7, x3, #32, #8
   adca8:	d368bc66 	ubfx	x6, x3, #40, #8
   adcac:	d370dc65 	ubfx	x5, x3, #48, #8
   adcb0:	d378fc64 	lsr	x4, x3, #56
   adcb4:	3900100d 	strb	w13, [x0, #4]
   adcb8:	3900140c 	strb	w12, [x0, #5]
   adcbc:	3900180b 	strb	w11, [x0, #6]
   adcc0:	39001c02 	strb	w2, [x0, #7]
   adcc4:	39002003 	strb	w3, [x0, #8]
   adcc8:	3900240a 	strb	w10, [x0, #9]
   adccc:	39002809 	strb	w9, [x0, #10]
   adcd0:	39002c08 	strb	w8, [x0, #11]
   adcd4:	39003007 	strb	w7, [x0, #12]
   adcd8:	39003406 	strb	w6, [x0, #13]
   adcdc:	39003805 	strb	w5, [x0, #14]
   adce0:	39003c04 	strb	w4, [x0, #15]
   adce4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   adce8:	d65f03c0 	ret
   adcec:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adcf0:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   adcf4:	913f4021 	add	x1, x1, #0xfd0
   adcf8:	913f8000 	add	x0, x0, #0xfe0
   adcfc:	528016e2 	mov	w2, #0xb7                  	// #183
   add00:	97ffd080 	bl	a1f00 <assertion_failed>
   add04:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   add08:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   add0c:	913f4021 	add	x1, x1, #0xfd0
   add10:	91006000 	add	x0, x0, #0x18
   add14:	52801702 	mov	w2, #0xb8                  	// #184
   add18:	97ffd07a 	bl	a1f00 <assertion_failed>
   add1c:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   add20:	b0000040 	adrp	x0, b6000 <_etext+0x39c8>
   add24:	913f4021 	add	x1, x1, #0xfd0
   add28:	913fe000 	add	x0, x0, #0xff8
   add2c:	52801722 	mov	w2, #0xb9                  	// #185
   add30:	97ffd074 	bl	a1f00 <assertion_failed>
   add34:	d503201f 	nop
   add38:	d503201f 	nop
   add3c:	d503201f 	nop

00000000000add40 <CInterruptSystem::DisconnectFIQ()>:
   add40:	b00000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   add44:	f9459c00 	ldr	x0, [x0, #2872]
   add48:	39400004 	ldrb	w4, [x0]
   add4c:	39400403 	ldrb	w3, [x0, #1]
   add50:	39400802 	ldrb	w2, [x0, #2]
   add54:	39400c01 	ldrb	w1, [x0, #3]
   add58:	aa032083 	orr	x3, x4, x3, lsl #8
   add5c:	39401004 	ldrb	w4, [x0, #4]
   add60:	aa024062 	orr	x2, x3, x2, lsl #16
   add64:	39401403 	ldrb	w3, [x0, #5]
   add68:	aa016041 	orr	x1, x2, x1, lsl #24
   add6c:	39401802 	ldrb	w2, [x0, #6]
   add70:	aa048024 	orr	x4, x1, x4, lsl #32
   add74:	39401c01 	ldrb	w1, [x0, #7]
   add78:	aa03a083 	orr	x3, x4, x3, lsl #40
   add7c:	aa02c062 	orr	x2, x3, x2, lsl #48
   add80:	aa01e041 	orr	x1, x2, x1, lsl #56
   add84:	b40002a1 	cbz	x1, addd8 <CInterruptSystem::DisconnectFIQ()+0x98>
   add88:	d2964181 	mov	x1, #0xb20c                	// #45580
   add8c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   add90:	3900101f 	strb	wzr, [x0, #4]
   add94:	3900141f 	strb	wzr, [x0, #5]
   add98:	b900003f 	str	wzr, [x1]
   add9c:	3900001f 	strb	wzr, [x0]
   adda0:	3900041f 	strb	wzr, [x0, #1]
   adda4:	3900081f 	strb	wzr, [x0, #2]
   adda8:	39000c1f 	strb	wzr, [x0, #3]
   addac:	3900181f 	strb	wzr, [x0, #6]
   addb0:	39001c1f 	strb	wzr, [x0, #7]
   addb4:	3900201f 	strb	wzr, [x0, #8]
   addb8:	3900241f 	strb	wzr, [x0, #9]
   addbc:	3900281f 	strb	wzr, [x0, #10]
   addc0:	39002c1f 	strb	wzr, [x0, #11]
   addc4:	3900301f 	strb	wzr, [x0, #12]
   addc8:	3900341f 	strb	wzr, [x0, #13]
   addcc:	3900381f 	strb	wzr, [x0, #14]
   addd0:	39003c1f 	strb	wzr, [x0, #15]
   addd4:	d65f03c0 	ret
   addd8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   adddc:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adde0:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   adde4:	910003fd 	mov	x29, sp
   adde8:	913f4021 	add	x1, x1, #0xfd0
   addec:	91004000 	add	x0, x0, #0x10
   addf0:	52801942 	mov	w2, #0xca                  	// #202
   addf4:	97ffd043 	bl	a1f00 <assertion_failed>
   addf8:	d503201f 	nop
   addfc:	d503201f 	nop

00000000000ade00 <CInterruptSystem::EnableIRQ(unsigned int)>:
   ade00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ade04:	71014c1f 	cmp	w0, #0x53
   ade08:	910003fd 	mov	x29, sp
   ade0c:	54000368 	b.hi	ade78 <CInterruptSystem::EnableIRQ(unsigned int)+0x78>  // b.pmore
   ade10:	71011c1f 	cmp	w0, #0x47
   ade14:	540001a8 	b.hi	ade48 <CInterruptSystem::EnableIRQ(unsigned int)+0x48>  // b.pmore
   ade18:	71007c1f 	cmp	w0, #0x1f
   ade1c:	54000289 	b.ls	ade6c <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>  // b.plast
   ade20:	7100fc1f 	cmp	w0, #0x3f
   ade24:	d2964302 	mov	x2, #0xb218                	// #45592
   ade28:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   ade2c:	d1001041 	sub	x1, x2, #0x4
   ade30:	9a818042 	csel	x2, x2, x1, hi	// hi = pmore
   ade34:	52800021 	mov	w1, #0x1                   	// #1
   ade38:	1ac02020 	lsl	w0, w1, w0
   ade3c:	b9000040 	str	w0, [x2]
   ade40:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ade44:	d65f03c0 	ret
   ade48:	7101241f 	cmp	w0, #0x49
   ade4c:	54000221 	b.ne	ade90 <CInterruptSystem::EnableIRQ(unsigned int)+0x90>  // b.any
   ade50:	d2800801 	mov	x1, #0x40                  	// #64
   ade54:	f2a80001 	movk	x1, #0x4000, lsl #16
   ade58:	b9400020 	ldr	w0, [x1]
   ade5c:	321f0000 	orr	w0, w0, #0x2
   ade60:	b9000020 	str	w0, [x1]
   ade64:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ade68:	d65f03c0 	ret
   ade6c:	d2964202 	mov	x2, #0xb210                	// #45584
   ade70:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   ade74:	17fffff0 	b	ade34 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
   ade78:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ade7c:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ade80:	913f4021 	add	x1, x1, #0xfd0
   ade84:	9100a000 	add	x0, x0, #0x28
   ade88:	52801ac2 	mov	w2, #0xd6                  	// #214
   ade8c:	97ffd01d 	bl	a1f00 <assertion_failed>
   ade90:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   ade94:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ade98:	913f4021 	add	x1, x1, #0xfd0
   ade9c:	91010000 	add	x0, x0, #0x40
   adea0:	52801be2 	mov	w2, #0xdf                  	// #223
   adea4:	97ffd017 	bl	a1f00 <assertion_failed>
   adea8:	d503201f 	nop
   adeac:	d503201f 	nop

00000000000adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   adeb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   adeb4:	aa0003e5 	mov	x5, x0
   adeb8:	2a0103e0 	mov	w0, w1
   adebc:	910003fd 	mov	x29, sp
   adec0:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   adec4:	f9470824 	ldr	x4, [x1, #3600]
   adec8:	14000002 	b	aded0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x20>
   adecc:	aa0403e5 	mov	x5, x4
   aded0:	eb05009f 	cmp	x4, x5
   aded4:	54ffffc1 	b.ne	adecc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>  // b.any
   aded8:	71014c1f 	cmp	w0, #0x53
   adedc:	54000128 	b.hi	adf00 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>  // b.pmore
   adee0:	2a0003e1 	mov	w1, w0
   adee4:	8b204c86 	add	x6, x4, w0, uxtw #3
   adee8:	f8617885 	ldr	x5, [x4, x1, lsl #3]
   adeec:	b5000165 	cbnz	x5, adf18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x68>
   adef0:	f8217882 	str	x2, [x4, x1, lsl #3]
   adef4:	f90150c3 	str	x3, [x6, #672]
   adef8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   adefc:	17ffffc1 	b	ade00 <CInterruptSystem::EnableIRQ(unsigned int)>
   adf00:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adf04:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   adf08:	913f4021 	add	x1, x1, #0xfd0
   adf0c:	9100a000 	add	x0, x0, #0x28
   adf10:	52801202 	mov	w2, #0x90                  	// #144
   adf14:	97ffcffb 	bl	a1f00 <assertion_failed>
   adf18:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adf1c:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   adf20:	913f4021 	add	x1, x1, #0xfd0
   adf24:	91018000 	add	x0, x0, #0x60
   adf28:	52801222 	mov	w2, #0x91                  	// #145
   adf2c:	97ffcff5 	bl	a1f00 <assertion_failed>

00000000000adf30 <CInterruptSystem::DisableIRQ(unsigned int)>:
   adf30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   adf34:	71014c1f 	cmp	w0, #0x53
   adf38:	910003fd 	mov	x29, sp
   adf3c:	54000368 	b.hi	adfa8 <CInterruptSystem::DisableIRQ(unsigned int)+0x78>  // b.pmore
   adf40:	71011c1f 	cmp	w0, #0x47
   adf44:	540001a8 	b.hi	adf78 <CInterruptSystem::DisableIRQ(unsigned int)+0x48>  // b.pmore
   adf48:	71007c1f 	cmp	w0, #0x1f
   adf4c:	54000289 	b.ls	adf9c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>  // b.plast
   adf50:	7100fc1f 	cmp	w0, #0x3f
   adf54:	d2964482 	mov	x2, #0xb224                	// #45604
   adf58:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   adf5c:	d1001041 	sub	x1, x2, #0x4
   adf60:	9a818042 	csel	x2, x2, x1, hi	// hi = pmore
   adf64:	52800021 	mov	w1, #0x1                   	// #1
   adf68:	1ac02020 	lsl	w0, w1, w0
   adf6c:	b9000040 	str	w0, [x2]
   adf70:	a8c17bfd 	ldp	x29, x30, [sp], #16
   adf74:	d65f03c0 	ret
   adf78:	7101241f 	cmp	w0, #0x49
   adf7c:	54000221 	b.ne	adfc0 <CInterruptSystem::DisableIRQ(unsigned int)+0x90>  // b.any
   adf80:	d2800801 	mov	x1, #0x40                  	// #64
   adf84:	f2a80001 	movk	x1, #0x4000, lsl #16
   adf88:	b9400020 	ldr	w0, [x1]
   adf8c:	121e7800 	and	w0, w0, #0xfffffffd
   adf90:	b9000020 	str	w0, [x1]
   adf94:	a8c17bfd 	ldp	x29, x30, [sp], #16
   adf98:	d65f03c0 	ret
   adf9c:	d2964382 	mov	x2, #0xb21c                	// #45596
   adfa0:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   adfa4:	17fffff0 	b	adf64 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
   adfa8:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adfac:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   adfb0:	913f4021 	add	x1, x1, #0xfd0
   adfb4:	9100a000 	add	x0, x0, #0x28
   adfb8:	52801dc2 	mov	w2, #0xee                  	// #238
   adfbc:	97ffcfd1 	bl	a1f00 <assertion_failed>
   adfc0:	b0000041 	adrp	x1, b6000 <_etext+0x39c8>
   adfc4:	d0000040 	adrp	x0, b7000 <_etext+0x49c8>
   adfc8:	913f4021 	add	x1, x1, #0xfd0
   adfcc:	91010000 	add	x0, x0, #0x40
   adfd0:	52801ee2 	mov	w2, #0xf7                  	// #247
   adfd4:	97ffcfcb 	bl	a1f00 <assertion_failed>
   adfd8:	d503201f 	nop
   adfdc:	d503201f 	nop

00000000000adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   adfe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   adfe4:	aa0003e2 	mov	x2, x0
   adfe8:	2a0103e0 	mov	w0, w1
   adfec:	910003fd 	mov	x29, sp
   adff0:	a90153f3 	stp	x19, x20, [sp, #16]
   adff4:	b00000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   adff8:	f9470833 	ldr	x19, [x1, #3600]
   adffc:	f90013f5 	str	x21, [sp, #32]
   ae000:	14000002 	b	ae008 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x28>
   ae004:	aa1303e2 	mov	x2, x19
   ae008:	eb02027f 	cmp	x19, x2
   ae00c:	54ffffc1 	b.ne	ae004 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>  // b.any
   ae010:	71014c1f 	cmp	w0, #0x53
   ae014:	54000188 	b.hi	ae044 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>  // b.pmore
   ae018:	2a0003f4 	mov	w20, w0
   ae01c:	8b204e75 	add	x21, x19, w0, uxtw #3
   ae020:	f8747a61 	ldr	x1, [x19, x20, lsl #3]
   ae024:	b40001c1 	cbz	x1, ae05c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x7c>
   ae028:	97ffffc2 	bl	adf30 <CInterruptSystem::DisableIRQ(unsigned int)>
   ae02c:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   ae030:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae034:	f90152bf 	str	xzr, [x21, #672]
   ae038:	f94013f5 	ldr	x21, [sp, #32]
   ae03c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae040:	d65f03c0 	ret
   ae044:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae048:	b0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ae04c:	913f4021 	add	x1, x1, #0xfd0
   ae050:	9100a000 	add	x0, x0, #0x28
   ae054:	52801442 	mov	w2, #0xa2                  	// #162
   ae058:	97ffcfaa 	bl	a1f00 <assertion_failed>
   ae05c:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae060:	b0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ae064:	913f4021 	add	x1, x1, #0xfd0
   ae068:	91020000 	add	x0, x0, #0x80
   ae06c:	52801462 	mov	w2, #0xa3                  	// #163
   ae070:	97ffcfa4 	bl	a1f00 <assertion_failed>
   ae074:	d503201f 	nop
   ae078:	d503201f 	nop
   ae07c:	d503201f 	nop

00000000000ae080 <CInterruptSystem::EnableFIQ(unsigned int)>:
   ae080:	71011c1f 	cmp	w0, #0x47
   ae084:	540000c8 	b.hi	ae09c <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>  // b.pmore
   ae088:	d2964181 	mov	x1, #0xb20c                	// #45580
   ae08c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   ae090:	32190000 	orr	w0, w0, #0x80
   ae094:	b9000020 	str	w0, [x1]
   ae098:	d65f03c0 	ret
   ae09c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae0a0:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae0a4:	90000040 	adrp	x0, b6000 <_etext+0x39c8>
   ae0a8:	910003fd 	mov	x29, sp
   ae0ac:	913f4021 	add	x1, x1, #0xfd0
   ae0b0:	913f8000 	add	x0, x0, #0xfe0
   ae0b4:	528020c2 	mov	w2, #0x106                 	// #262
   ae0b8:	97ffcf92 	bl	a1f00 <assertion_failed>
   ae0bc:	d503201f 	nop

00000000000ae0c0 <CInterruptSystem::DisableFIQ()>:
   ae0c0:	d2964180 	mov	x0, #0xb20c                	// #45580
   ae0c4:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   ae0c8:	b900001f 	str	wzr, [x0]
   ae0cc:	d65f03c0 	ret

00000000000ae0d0 <CInterruptSystem::Get()>:
   ae0d0:	900000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ae0d4:	f9470800 	ldr	x0, [x0, #3600]
   ae0d8:	b4000040 	cbz	x0, ae0e0 <CInterruptSystem::Get()+0x10>
   ae0dc:	d65f03c0 	ret
   ae0e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae0e4:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae0e8:	90000020 	adrp	x0, b2000 <SErrorStub+0xc>
   ae0ec:	910003fd 	mov	x29, sp
   ae0f0:	913f4021 	add	x1, x1, #0xfd0
   ae0f4:	91260000 	add	x0, x0, #0x980
   ae0f8:	52802302 	mov	w2, #0x118                 	// #280
   ae0fc:	97ffcf81 	bl	a1f00 <assertion_failed>

00000000000ae100 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   ae100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae104:	71014c3f 	cmp	w1, #0x53
   ae108:	910003fd 	mov	x29, sp
   ae10c:	540001c8 	b.hi	ae144 <CInterruptSystem::CallIRQHandler(unsigned int)+0x44>  // b.pmore
   ae110:	f8615803 	ldr	x3, [x0, w1, uxtw #3]
   ae114:	8b214c02 	add	x2, x0, w1, uxtw #3
   ae118:	b40000c3 	cbz	x3, ae130 <CInterruptSystem::CallIRQHandler(unsigned int)+0x30>
   ae11c:	f9415040 	ldr	x0, [x2, #672]
   ae120:	d63f0060 	blr	x3
   ae124:	52800020 	mov	w0, #0x1                   	// #1
   ae128:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae12c:	d65f03c0 	ret
   ae130:	2a0103e0 	mov	w0, w1
   ae134:	97ffff7f 	bl	adf30 <CInterruptSystem::DisableIRQ(unsigned int)>
   ae138:	52800000 	mov	w0, #0x0                   	// #0
   ae13c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae140:	d65f03c0 	ret
   ae144:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae148:	b0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ae14c:	913f4021 	add	x1, x1, #0xfd0
   ae150:	9100a000 	add	x0, x0, #0x28
   ae154:	528023c2 	mov	w2, #0x11e                 	// #286
   ae158:	97ffcf6a 	bl	a1f00 <assertion_failed>
   ae15c:	d503201f 	nop

00000000000ae160 <CInterruptSystem::InterruptHandler()>:
   ae160:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ae164:	910003fd 	mov	x29, sp
   ae168:	f9001bf7 	str	x23, [sp, #48]
   ae16c:	900000e0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   ae170:	f9470817 	ldr	x23, [x0, #3600]
   ae174:	b4000897 	cbz	x23, ae284 <CInterruptSystem::InterruptHandler()+0x124>
   ae178:	d2800c01 	mov	x1, #0x60                  	// #96
   ae17c:	f2a80001 	movk	x1, #0x4000, lsl #16
   ae180:	12803e42 	mov	w2, #0xfffffe0d            	// #-499
   ae184:	b9400020 	ldr	w0, [x1]
   ae188:	6a02001f 	tst	w0, w2
   ae18c:	540008c1 	b.ne	ae2a4 <CInterruptSystem::InterruptHandler()+0x144>  // b.any
   ae190:	37080600 	tbnz	w0, #1, ae250 <CInterruptSystem::InterruptHandler()+0xf0>
   ae194:	d2964080 	mov	x0, #0xb204                	// #45572
   ae198:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   ae19c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae1a0:	910103f6 	add	x22, sp, #0x40
   ae1a4:	b9400001 	ldr	w1, [x0]
   ae1a8:	b90043e1 	str	w1, [sp, #64]
   ae1ac:	d2800015 	mov	x21, #0x0                   	// #0
   ae1b0:	a90153f3 	stp	x19, x20, [sp, #16]
   ae1b4:	b9400401 	ldr	w1, [x0, #4]
   ae1b8:	b90047e1 	str	w1, [sp, #68]
   ae1bc:	b85fc000 	ldur	w0, [x0, #-4]
   ae1c0:	12001c00 	and	w0, w0, #0xff
   ae1c4:	b9004be0 	str	w0, [sp, #72]
   ae1c8:	b94002d3 	ldr	w19, [x22]
   ae1cc:	35000153 	cbnz	w19, ae1f4 <CInterruptSystem::InterruptHandler()+0x94>
   ae1d0:	910082b5 	add	x21, x21, #0x20
   ae1d4:	910012d6 	add	x22, x22, #0x4
   ae1d8:	f10182bf 	cmp	x21, #0x60
   ae1dc:	54ffff61 	b.ne	ae1c8 <CInterruptSystem::InterruptHandler()+0x68>  // b.any
   ae1e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae1e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ae1e8:	f9401bf7 	ldr	x23, [sp, #48]
   ae1ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ae1f0:	d65f03c0 	ret
   ae1f4:	aa1503f4 	mov	x20, x21
   ae1f8:	370000d3 	tbnz	w19, #0, ae210 <CInterruptSystem::InterruptHandler()+0xb0>
   ae1fc:	d503201f 	nop
   ae200:	53017e73 	lsr	w19, w19, #1
   ae204:	91000694 	add	x20, x20, #0x1
   ae208:	34fffe53 	cbz	w19, ae1d0 <CInterruptSystem::InterruptHandler()+0x70>
   ae20c:	3607ffb3 	tbz	w19, #0, ae200 <CInterruptSystem::InterruptHandler()+0xa0>
   ae210:	71014e9f 	cmp	w20, #0x53
   ae214:	2a1403e0 	mov	w0, w20
   ae218:	540002a8 	b.hi	ae26c <CInterruptSystem::InterruptHandler()+0x10c>  // b.pmore
   ae21c:	f8747ae1 	ldr	x1, [x23, x20, lsl #3]
   ae220:	b4000121 	cbz	x1, ae244 <CInterruptSystem::InterruptHandler()+0xe4>
   ae224:	91015000 	add	x0, x0, #0x54
   ae228:	aa0103f0 	mov	x16, x1
   ae22c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae230:	f8607ae0 	ldr	x0, [x23, x0, lsl #3]
   ae234:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ae238:	f9401bf7 	ldr	x23, [sp, #48]
   ae23c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ae240:	d61f0200 	br	x16
   ae244:	2a1403e0 	mov	w0, w20
   ae248:	97ffff3a 	bl	adf30 <CInterruptSystem::DisableIRQ(unsigned int)>
   ae24c:	17ffffed 	b	ae200 <CInterruptSystem::InterruptHandler()+0xa0>
   ae250:	f94126e2 	ldr	x2, [x23, #584]
   ae254:	b4000382 	cbz	x2, ae2c4 <CInterruptSystem::InterruptHandler()+0x164>
   ae258:	f94276e0 	ldr	x0, [x23, #1256]
   ae25c:	aa0203f0 	mov	x16, x2
   ae260:	f9401bf7 	ldr	x23, [sp, #48]
   ae264:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ae268:	d61f0200 	br	x16
   ae26c:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae270:	b0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ae274:	913f4021 	add	x1, x1, #0xfd0
   ae278:	9100a000 	add	x0, x0, #0x28
   ae27c:	528023c2 	mov	w2, #0x11e                 	// #286
   ae280:	97ffcf20 	bl	a1f00 <assertion_failed>
   ae284:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae288:	90000020 	adrp	x0, b2000 <SErrorStub+0xc>
   ae28c:	913f4021 	add	x1, x1, #0xfd0
   ae290:	91260000 	add	x0, x0, #0x980
   ae294:	52802622 	mov	w2, #0x131                 	// #305
   ae298:	a90153f3 	stp	x19, x20, [sp, #16]
   ae29c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae2a0:	97ffcf18 	bl	a1f00 <assertion_failed>
   ae2a4:	90000041 	adrp	x1, b6000 <_etext+0x39c8>
   ae2a8:	b0000040 	adrp	x0, b7000 <_etext+0x49c8>
   ae2ac:	913f4021 	add	x1, x1, #0xfd0
   ae2b0:	91028000 	add	x0, x0, #0xa0
   ae2b4:	528026a2 	mov	w2, #0x135                 	// #309
   ae2b8:	a90153f3 	stp	x19, x20, [sp, #16]
   ae2bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae2c0:	97ffcf10 	bl	a1f00 <assertion_failed>
   ae2c4:	b85e0020 	ldur	w0, [x1, #-32]
   ae2c8:	121e7800 	and	w0, w0, #0xfffffffd
   ae2cc:	b81e0020 	stur	w0, [x1, #-32]
   ae2d0:	17ffffc6 	b	ae1e8 <CInterruptSystem::InterruptHandler()+0x88>
   ae2d4:	d503201f 	nop
   ae2d8:	d503201f 	nop
   ae2dc:	d503201f 	nop

00000000000ae2e0 <InterruptHandler>:
   ae2e0:	17ffffa0 	b	ae160 <CInterruptSystem::InterruptHandler()>
	...

00000000000ae2f0 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   ae2f0:	29000801 	stp	w1, w2, [x0]
   ae2f4:	7100405f 	cmp	w2, #0x10
   ae2f8:	5400004c 	b.gt	ae300 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x10>
   ae2fc:	d65f03c0 	ret
   ae300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae304:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae308:	91100021 	add	x1, x1, #0x400
   ae30c:	910003fd 	mov	x29, sp
   ae310:	91004020 	add	x0, x1, #0x10
   ae314:	528003c2 	mov	w2, #0x1e                  	// #30
   ae318:	97ffcefa 	bl	a1f00 <assertion_failed>
   ae31c:	d503201f 	nop

00000000000ae320 <CGPIOClock::~CGPIOClock()>:
   ae320:	b9400001 	ldr	w1, [x0]
   ae324:	528041c3 	mov	w3, #0x20e                 	// #526
   ae328:	72a0fc43 	movk	w3, #0x7e2, lsl #16
   ae32c:	52800402 	mov	w2, #0x20                  	// #32
   ae330:	72ab4002 	movk	w2, #0x5a00, lsl #16
   ae334:	0b030021 	add	w1, w1, w3
   ae338:	531d7021 	lsl	w1, w1, #3
   ae33c:	b9000022 	str	w2, [x1]
   ae340:	b9400020 	ldr	w0, [x1]
   ae344:	373fffe0 	tbnz	w0, #7, ae340 <CGPIOClock::~CGPIOClock()+0x20>
   ae348:	d65f03c0 	ret
   ae34c:	d503201f 	nop

00000000000ae350 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   ae350:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ae354:	71000c7f 	cmp	w3, #0x3
   ae358:	910003fd 	mov	x29, sp
   ae35c:	a90153f3 	stp	x19, x20, [sp, #16]
   ae360:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae364:	f9001bf7 	str	x23, [sp, #48]
   ae368:	540006a8 	b.hi	ae43c <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xec>  // b.pmore
   ae36c:	aa0003f5 	mov	x21, x0
   ae370:	b0000077 	adrp	x23, bb000 <s_ActLEDInfo+0x1f0>
   ae374:	911002e0 	add	x0, x23, #0x400
   ae378:	2a0303f3 	mov	w19, w3
   ae37c:	91014003 	add	x3, x0, #0x50
   ae380:	713ffc3f 	cmp	w1, #0xfff
   ae384:	b8735863 	ldr	w3, [x3, w19, uxtw #2]
   ae388:	7a419062 	ccmp	w3, w1, #0x2, ls	// ls = plast
   ae38c:	54000508 	b.hi	ae42c <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xdc>  // b.pmore
   ae390:	713ffc5f 	cmp	w2, #0xfff
   ae394:	540005e8 	b.hi	ae450 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x100>  // b.pmore
   ae398:	b94002b4 	ldr	w20, [x21]
   ae39c:	52804003 	mov	w3, #0x200                 	// #512
   ae3a0:	72a0fc43 	movk	w3, #0x7e2, lsl #16
   ae3a4:	52800400 	mov	w0, #0x20                  	// #32
   ae3a8:	72ab4000 	movk	w0, #0x5a00, lsl #16
   ae3ac:	0b030294 	add	w20, w20, w3
   ae3b0:	531d7294 	lsl	w20, w20, #3
   ae3b4:	1101c285 	add	w5, w20, #0x70
   ae3b8:	11001283 	add	w3, w20, #0x4
   ae3bc:	b90000a0 	str	w0, [x5]
   ae3c0:	b94000a4 	ldr	w4, [x5]
   ae3c4:	373fffe4 	tbnz	w4, #7, ae3c0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x70>
   ae3c8:	2a0303e3 	mov	w3, w3
   ae3cc:	2a013041 	orr	w1, w2, w1, lsl #12
   ae3d0:	52ab4016 	mov	w22, #0x5a000000            	// #1509949440
   ae3d4:	2a160021 	orr	w1, w1, w22
   ae3d8:	52800140 	mov	w0, #0xa                   	// #10
   ae3dc:	b9000061 	str	w1, [x3]
   ae3e0:	97fff178 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   ae3e4:	b94006a0 	ldr	w0, [x21, #4]
   ae3e8:	71003c1f 	cmp	w0, #0xf
   ae3ec:	540003ac 	b.gt	ae460 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x110>
   ae3f0:	2a1403f4 	mov	w20, w20
   ae3f4:	2a132413 	orr	w19, w0, w19, lsl #9
   ae3f8:	2a160273 	orr	w19, w19, w22
   ae3fc:	52800140 	mov	w0, #0xa                   	// #10
   ae400:	110042d6 	add	w22, w22, #0x10
   ae404:	b9000293 	str	w19, [x20]
   ae408:	97fff16e 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   ae40c:	b9400280 	ldr	w0, [x20]
   ae410:	f9401bf7 	ldr	x23, [sp, #48]
   ae414:	2a160000 	orr	w0, w0, w22
   ae418:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ae41c:	b9000280 	str	w0, [x20]
   ae420:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae424:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ae428:	d65f03c0 	ret
   ae42c:	aa0003e1 	mov	x1, x0
   ae430:	52800582 	mov	w2, #0x2c                  	// #44
   ae434:	91018000 	add	x0, x0, #0x60
   ae438:	97ffceb2 	bl	a1f00 <assertion_failed>
   ae43c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae440:	91100021 	add	x1, x1, #0x400
   ae444:	9100e020 	add	x0, x1, #0x38
   ae448:	52800562 	mov	w2, #0x2b                  	// #43
   ae44c:	97ffcead 	bl	a1f00 <assertion_failed>
   ae450:	aa0003e1 	mov	x1, x0
   ae454:	528005a2 	mov	w2, #0x2d                  	// #45
   ae458:	91024000 	add	x0, x0, #0x90
   ae45c:	97ffcea9 	bl	a1f00 <assertion_failed>
   ae460:	911002e1 	add	x1, x23, #0x400
   ae464:	52800762 	mov	w2, #0x3b                  	// #59
   ae468:	91028020 	add	x0, x1, #0xa0
   ae46c:	97ffcea5 	bl	a1f00 <assertion_failed>

00000000000ae470 <CGPIOClock::StartRate(unsigned int)>:
   ae470:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ae474:	910003fd 	mov	x29, sp
   ae478:	a90153f3 	stp	x19, x20, [sp, #16]
   ae47c:	2a0103f4 	mov	w20, w1
   ae480:	52800013 	mov	w19, #0x0                   	// #0
   ae484:	f90013f5 	str	x21, [sp, #32]
   ae488:	aa0003f5 	mov	x21, x0
   ae48c:	340003c1 	cbz	w1, ae504 <CGPIOClock::StartRate(unsigned int)+0x94>
   ae490:	97ffda90 	bl	a4ed0 <CMachineInfo::Get()>
   ae494:	2a1303e1 	mov	w1, w19
   ae498:	97ffd9f6 	bl	a4c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   ae49c:	34000100 	cbz	w0, ae4bc <CGPIOClock::StartRate(unsigned int)+0x4c>
   ae4a0:	1ad40801 	udiv	w1, w0, w20
   ae4a4:	51000422 	sub	w2, w1, #0x1
   ae4a8:	713ff85f 	cmp	w2, #0xffe
   ae4ac:	54000088 	b.hi	ae4bc <CGPIOClock::StartRate(unsigned int)+0x4c>  // b.pmore
   ae4b0:	1b017e82 	mul	w2, w20, w1
   ae4b4:	6b00005f 	cmp	w2, w0
   ae4b8:	54000120 	b.eq	ae4dc <CGPIOClock::StartRate(unsigned int)+0x6c>  // b.none
   ae4bc:	11000673 	add	w19, w19, #0x1
   ae4c0:	7100427f 	cmp	w19, #0x10
   ae4c4:	54fffe61 	b.ne	ae490 <CGPIOClock::StartRate(unsigned int)+0x20>  // b.any
   ae4c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae4cc:	52800000 	mov	w0, #0x0                   	// #0
   ae4d0:	f94013f5 	ldr	x21, [sp, #32]
   ae4d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae4d8:	d65f03c0 	ret
   ae4dc:	b90006b3 	str	w19, [x21, #4]
   ae4e0:	aa1503e0 	mov	x0, x21
   ae4e4:	52800003 	mov	w3, #0x0                   	// #0
   ae4e8:	52800002 	mov	w2, #0x0                   	// #0
   ae4ec:	97ffff99 	bl	ae350 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   ae4f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae4f4:	52800020 	mov	w0, #0x1                   	// #1
   ae4f8:	f94013f5 	ldr	x21, [sp, #32]
   ae4fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae500:	d65f03c0 	ret
   ae504:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae508:	91100021 	add	x1, x1, #0x400
   ae50c:	91032020 	add	x0, x1, #0xc8
   ae510:	528008e2 	mov	w2, #0x47                  	// #71
   ae514:	97ffce7b 	bl	a1f00 <assertion_failed>
   ae518:	d503201f 	nop
   ae51c:	d503201f 	nop

00000000000ae520 <CGPIOClock::Stop()>:
   ae520:	b9400001 	ldr	w1, [x0]
   ae524:	528041c3 	mov	w3, #0x20e                 	// #526
   ae528:	72a0fc43 	movk	w3, #0x7e2, lsl #16
   ae52c:	52800402 	mov	w2, #0x20                  	// #32
   ae530:	72ab4002 	movk	w2, #0x5a00, lsl #16
   ae534:	0b030021 	add	w1, w1, w3
   ae538:	531d7021 	lsl	w1, w1, #3
   ae53c:	b9000022 	str	w2, [x1]
   ae540:	b9400020 	ldr	w0, [x1]
   ae544:	373fffe0 	tbnz	w0, #7, ae540 <CGPIOClock::Stop()+0x20>
   ae548:	d65f03c0 	ret
   ae54c:	00000000 	udf	#0

00000000000ae550 <CGPIOPin::~CGPIOPin()>:
   ae550:	d65f03c0 	ret
   ae554:	d503201f 	nop
   ae558:	d503201f 	nop
   ae55c:	d503201f 	nop

00000000000ae560 <CGPIOPin::~CGPIOPin()>:
   ae560:	d2800901 	mov	x1, #0x48                  	// #72
   ae564:	17fff593 	b	abbb0 <operator delete(void*, unsigned long)>
   ae568:	d503201f 	nop
   ae56c:	d503201f 	nop

00000000000ae570 <CGPIOPin::CGPIOPin()>:
   ae570:	528006c4 	mov	w4, #0x36                  	// #54
   ae574:	52800143 	mov	w3, #0xa                   	// #10
   ae578:	528000c2 	mov	w2, #0x6                   	// #6
   ae57c:	900000e1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   ae580:	912ba021 	add	x1, x1, #0xae8
   ae584:	f9000001 	str	x1, [x0]
   ae588:	b9000804 	str	w4, [x0, #8]
   ae58c:	b9001403 	str	w3, [x0, #20]
   ae590:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   ae594:	29078802 	stp	w2, w2, [x0, #60]
   ae598:	d65f03c0 	ret
   ae59c:	d503201f 	nop

00000000000ae5a0 <CGPIOPin::AssignPin(unsigned int)>:
   ae5a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ae5a4:	910003fd 	mov	x29, sp
   ae5a8:	a90153f3 	stp	x19, x20, [sp, #16]
   ae5ac:	aa0003f4 	mov	x20, x0
   ae5b0:	b9400800 	ldr	w0, [x0, #8]
   ae5b4:	7100d81f 	cmp	w0, #0x36
   ae5b8:	54000321 	b.ne	ae61c <CGPIOPin::AssignPin(unsigned int)+0x7c>  // b.any
   ae5bc:	b9000a81 	str	w1, [x20, #8]
   ae5c0:	2a0103f3 	mov	w19, w1
   ae5c4:	7100d43f 	cmp	w1, #0x35
   ae5c8:	54000128 	b.hi	ae5ec <CGPIOPin::AssignPin(unsigned int)+0x4c>  // b.pmore
   ae5cc:	4b5317e1 	neg	w1, w19, lsr #5
   ae5d0:	52800020 	mov	w0, #0x1                   	// #1
   ae5d4:	1ad32000 	lsl	w0, w0, w19
   ae5d8:	121e0021 	and	w1, w1, #0x4
   ae5dc:	29018281 	stp	w1, w0, [x20, #12]
   ae5e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae5e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae5e8:	d65f03c0 	ret
   ae5ec:	97ffda39 	bl	a4ed0 <CMachineInfo::Get()>
   ae5f0:	2a1303e1 	mov	w1, w19
   ae5f4:	97ffd97f 	bl	a4bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   ae5f8:	b9000a80 	str	w0, [x20, #8]
   ae5fc:	2a0003f3 	mov	w19, w0
   ae600:	7100d41f 	cmp	w0, #0x35
   ae604:	54fffe49 	b.ls	ae5cc <CGPIOPin::AssignPin(unsigned int)+0x2c>  // b.plast
   ae608:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae60c:	91138021 	add	x1, x1, #0x4e0
   ae610:	9100a020 	add	x0, x1, #0x28
   ae614:	528008e2 	mov	w2, #0x47                  	// #71
   ae618:	97ffce3a 	bl	a1f00 <assertion_failed>
   ae61c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae620:	91138021 	add	x1, x1, #0x4e0
   ae624:	91004020 	add	x0, x1, #0x10
   ae628:	52800802 	mov	w2, #0x40                  	// #64
   ae62c:	97ffce35 	bl	a1f00 <assertion_failed>

00000000000ae630 <CGPIOPin::Write(unsigned int)>:
   ae630:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae634:	910003fd 	mov	x29, sp
   ae638:	b9400802 	ldr	w2, [x0, #8]
   ae63c:	7100d45f 	cmp	w2, #0x35
   ae640:	54000228 	b.hi	ae684 <CGPIOPin::Write(unsigned int)+0x54>  // b.pmore
   ae644:	b9401402 	ldr	w2, [x0, #20]
   ae648:	71000c5f 	cmp	w2, #0x3
   ae64c:	5400026c 	b.gt	ae698 <CGPIOPin::Write(unsigned int)+0x68>
   ae650:	7100043f 	cmp	w1, #0x1
   ae654:	540002c8 	b.hi	ae6ac <CGPIOPin::Write(unsigned int)+0x7c>  // b.pmore
   ae658:	7100003f 	cmp	w1, #0x0
   ae65c:	52800502 	mov	w2, #0x28                  	// #40
   ae660:	72a7e402 	movk	w2, #0x3f20, lsl #16
   ae664:	51003043 	sub	w3, w2, #0xc
   ae668:	1a830042 	csel	w2, w2, w3, eq	// eq = none
   ae66c:	b9001801 	str	w1, [x0, #24]
   ae670:	29418c04 	ldp	w4, w3, [x0, #12]
   ae674:	0b040042 	add	w2, w2, w4
   ae678:	b9000043 	str	w3, [x2]
   ae67c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae680:	d65f03c0 	ret
   ae684:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae688:	91138021 	add	x1, x1, #0x4e0
   ae68c:	9100a020 	add	x0, x1, #0x28
   ae690:	52801222 	mov	w2, #0x91                  	// #145
   ae694:	97ffce1b 	bl	a1f00 <assertion_failed>
   ae698:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae69c:	91138021 	add	x1, x1, #0x4e0
   ae6a0:	91010020 	add	x0, x1, #0x40
   ae6a4:	52801282 	mov	w2, #0x94                  	// #148
   ae6a8:	97ffce16 	bl	a1f00 <assertion_failed>
   ae6ac:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae6b0:	91138021 	add	x1, x1, #0x4e0
   ae6b4:	9101a020 	add	x0, x1, #0x68
   ae6b8:	52801302 	mov	w2, #0x98                  	// #152
   ae6bc:	97ffce11 	bl	a1f00 <assertion_failed>

00000000000ae6c0 <CGPIOPin::Read() const>:
   ae6c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae6c4:	910003fd 	mov	x29, sp
   ae6c8:	b9400801 	ldr	w1, [x0, #8]
   ae6cc:	7100d43f 	cmp	w1, #0x35
   ae6d0:	540001e8 	b.hi	ae70c <CGPIOPin::Read() const+0x4c>  // b.pmore
   ae6d4:	b9401401 	ldr	w1, [x0, #20]
   ae6d8:	7100003f 	cmp	w1, #0x0
   ae6dc:	51000821 	sub	w1, w1, #0x2
   ae6e0:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   ae6e4:	540001e8 	b.hi	ae720 <CGPIOPin::Read() const+0x60>  // b.pmore
   ae6e8:	29418801 	ldp	w1, w2, [x0, #12]
   ae6ec:	52800683 	mov	w3, #0x34                  	// #52
   ae6f0:	72a7e403 	movk	w3, #0x3f20, lsl #16
   ae6f4:	0b030020 	add	w0, w1, w3
   ae6f8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae6fc:	b9400000 	ldr	w0, [x0]
   ae700:	6a02001f 	tst	w0, w2
   ae704:	1a9f07e0 	cset	w0, ne	// ne = any
   ae708:	d65f03c0 	ret
   ae70c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae710:	91138021 	add	x1, x1, #0x4e0
   ae714:	9100a020 	add	x0, x1, #0x28
   ae718:	52801482 	mov	w2, #0xa4                  	// #164
   ae71c:	97ffcdf9 	bl	a1f00 <assertion_failed>
   ae720:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae724:	91138021 	add	x1, x1, #0x4e0
   ae728:	91022020 	add	x0, x1, #0x88
   ae72c:	528014c2 	mov	w2, #0xa6                  	// #166
   ae730:	97ffcdf4 	bl	a1f00 <assertion_failed>
   ae734:	d503201f 	nop
   ae738:	d503201f 	nop
   ae73c:	d503201f 	nop

00000000000ae740 <CGPIOPin::Invert()>:
   ae740:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae744:	910003fd 	mov	x29, sp
   ae748:	b9401401 	ldr	w1, [x0, #20]
   ae74c:	7100043f 	cmp	w1, #0x1
   ae750:	54000261 	b.ne	ae79c <CGPIOPin::Invert()+0x5c>  // b.any
   ae754:	b9400802 	ldr	w2, [x0, #8]
   ae758:	b9401801 	ldr	w1, [x0, #24]
   ae75c:	7100d45f 	cmp	w2, #0x35
   ae760:	52000022 	eor	w2, w1, #0x1
   ae764:	54000268 	b.hi	ae7b0 <CGPIOPin::Invert()+0x70>  // b.pmore
   ae768:	7100045f 	cmp	w2, #0x1
   ae76c:	540002c8 	b.hi	ae7c4 <CGPIOPin::Invert()+0x84>  // b.pmore
   ae770:	7100043f 	cmp	w1, #0x1
   ae774:	52800501 	mov	w1, #0x28                  	// #40
   ae778:	72a7e401 	movk	w1, #0x3f20, lsl #16
   ae77c:	51003023 	sub	w3, w1, #0xc
   ae780:	1a830021 	csel	w1, w1, w3, eq	// eq = none
   ae784:	b9001802 	str	w2, [x0, #24]
   ae788:	29418c04 	ldp	w4, w3, [x0, #12]
   ae78c:	0b040021 	add	w1, w1, w4
   ae790:	b9000023 	str	w3, [x1]
   ae794:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae798:	d65f03c0 	ret
   ae79c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae7a0:	91138021 	add	x1, x1, #0x4e0
   ae7a4:	9103a020 	add	x0, x1, #0xe8
   ae7a8:	528016a2 	mov	w2, #0xb5                  	// #181
   ae7ac:	97ffcdd5 	bl	a1f00 <assertion_failed>
   ae7b0:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae7b4:	91138021 	add	x1, x1, #0x4e0
   ae7b8:	9100a020 	add	x0, x1, #0x28
   ae7bc:	52801222 	mov	w2, #0x91                  	// #145
   ae7c0:	97ffcdd0 	bl	a1f00 <assertion_failed>
   ae7c4:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae7c8:	91138021 	add	x1, x1, #0x4e0
   ae7cc:	9101a020 	add	x0, x1, #0x68
   ae7d0:	52801302 	mov	w2, #0x98                  	// #152
   ae7d4:	97ffcdcb 	bl	a1f00 <assertion_failed>
   ae7d8:	d503201f 	nop
   ae7dc:	d503201f 	nop

00000000000ae7e0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   ae7e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae7e4:	aa0003e4 	mov	x4, x0
   ae7e8:	910003fd 	mov	x29, sp
   ae7ec:	b9401400 	ldr	w0, [x0, #20]
   ae7f0:	7100001f 	cmp	w0, #0x0
   ae7f4:	51000800 	sub	w0, w0, #0x2
   ae7f8:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   ae7fc:	54000568 	b.hi	ae8a8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xc8>  // b.pmore
   ae800:	b9403c80 	ldr	w0, [x4, #60]
   ae804:	7100181f 	cmp	w0, #0x6
   ae808:	540001e1 	b.ne	ae844 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x64>  // b.any
   ae80c:	b9404080 	ldr	w0, [x4, #64]
   ae810:	7100181f 	cmp	w0, #0x6
   ae814:	54000221 	b.ne	ae858 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x78>  // b.any
   ae818:	b40002a1 	cbz	x1, ae86c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   ae81c:	f9401480 	ldr	x0, [x4, #40]
   ae820:	b5000300 	cbnz	x0, ae880 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xa0>
   ae824:	f9401080 	ldr	x0, [x4, #32]
   ae828:	12001c63 	and	w3, w3, #0xff
   ae82c:	a9028881 	stp	x1, x2, [x4, #40]
   ae830:	3900e083 	strb	w3, [x4, #56]
   ae834:	b4000300 	cbz	x0, ae894 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xb4>
   ae838:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae83c:	aa0403e1 	mov	x1, x4
   ae840:	14000ee8 	b	b23e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   ae844:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae848:	91138021 	add	x1, x1, #0x4e0
   ae84c:	91042020 	add	x0, x1, #0x108
   ae850:	52801802 	mov	w2, #0xc0                  	// #192
   ae854:	97ffcdab 	bl	a1f00 <assertion_failed>
   ae858:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae85c:	91138021 	add	x1, x1, #0x4e0
   ae860:	9104c020 	add	x0, x1, #0x130
   ae864:	52801822 	mov	w2, #0xc1                  	// #193
   ae868:	97ffcda6 	bl	a1f00 <assertion_failed>
   ae86c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae870:	91138021 	add	x1, x1, #0x4e0
   ae874:	91056020 	add	x0, x1, #0x158
   ae878:	52801862 	mov	w2, #0xc3                  	// #195
   ae87c:	97ffcda1 	bl	a1f00 <assertion_failed>
   ae880:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae884:	91138021 	add	x1, x1, #0x4e0
   ae888:	9105a020 	add	x0, x1, #0x168
   ae88c:	52801882 	mov	w2, #0xc4                  	// #196
   ae890:	97ffcd9c 	bl	a1f00 <assertion_failed>
   ae894:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae898:	91138021 	add	x1, x1, #0x4e0
   ae89c:	9105e020 	add	x0, x1, #0x178
   ae8a0:	52801962 	mov	w2, #0xcb                  	// #203
   ae8a4:	97ffcd97 	bl	a1f00 <assertion_failed>
   ae8a8:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae8ac:	91138021 	add	x1, x1, #0x4e0
   ae8b0:	91022020 	add	x0, x1, #0x88
   ae8b4:	52801782 	mov	w2, #0xbc                  	// #188
   ae8b8:	97ffcd92 	bl	a1f00 <assertion_failed>
   ae8bc:	d503201f 	nop

00000000000ae8c0 <CGPIOPin::DisconnectInterrupt()>:
   ae8c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ae8c4:	aa0003e1 	mov	x1, x0
   ae8c8:	910003fd 	mov	x29, sp
   ae8cc:	b9401400 	ldr	w0, [x0, #20]
   ae8d0:	7100001f 	cmp	w0, #0x0
   ae8d4:	51000800 	sub	w0, w0, #0x2
   ae8d8:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   ae8dc:	54000448 	b.hi	ae964 <CGPIOPin::DisconnectInterrupt()+0xa4>  // b.pmore
   ae8e0:	b9403c20 	ldr	w0, [x1, #60]
   ae8e4:	7100181f 	cmp	w0, #0x6
   ae8e8:	54000161 	b.ne	ae914 <CGPIOPin::DisconnectInterrupt()+0x54>  // b.any
   ae8ec:	b9404020 	ldr	w0, [x1, #64]
   ae8f0:	7100181f 	cmp	w0, #0x6
   ae8f4:	540001a1 	b.ne	ae928 <CGPIOPin::DisconnectInterrupt()+0x68>  // b.any
   ae8f8:	f9401420 	ldr	x0, [x1, #40]
   ae8fc:	b4000200 	cbz	x0, ae93c <CGPIOPin::DisconnectInterrupt()+0x7c>
   ae900:	f9401020 	ldr	x0, [x1, #32]
   ae904:	f900143f 	str	xzr, [x1, #40]
   ae908:	b4000240 	cbz	x0, ae950 <CGPIOPin::DisconnectInterrupt()+0x90>
   ae90c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ae910:	14000edc 	b	b2480 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   ae914:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae918:	91138021 	add	x1, x1, #0x4e0
   ae91c:	91042020 	add	x0, x1, #0x108
   ae920:	52801aa2 	mov	w2, #0xd5                  	// #213
   ae924:	97ffcd77 	bl	a1f00 <assertion_failed>
   ae928:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae92c:	91138021 	add	x1, x1, #0x4e0
   ae930:	9104c020 	add	x0, x1, #0x130
   ae934:	52801ac2 	mov	w2, #0xd6                  	// #214
   ae938:	97ffcd72 	bl	a1f00 <assertion_failed>
   ae93c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae940:	91138021 	add	x1, x1, #0x4e0
   ae944:	91062020 	add	x0, x1, #0x188
   ae948:	52801b02 	mov	w2, #0xd8                  	// #216
   ae94c:	97ffcd6d 	bl	a1f00 <assertion_failed>
   ae950:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae954:	91138021 	add	x1, x1, #0x4e0
   ae958:	9105e020 	add	x0, x1, #0x178
   ae95c:	52801b62 	mov	w2, #0xdb                  	// #219
   ae960:	97ffcd68 	bl	a1f00 <assertion_failed>
   ae964:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   ae968:	91138021 	add	x1, x1, #0x4e0
   ae96c:	91022020 	add	x0, x1, #0x88
   ae970:	52801a22 	mov	w2, #0xd1                  	// #209
   ae974:	97ffcd63 	bl	a1f00 <assertion_failed>
   ae978:	d503201f 	nop
   ae97c:	d503201f 	nop

00000000000ae980 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   ae980:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ae984:	910003fd 	mov	x29, sp
   ae988:	a90153f3 	stp	x19, x20, [sp, #16]
   ae98c:	aa0003f3 	mov	x19, x0
   ae990:	b9401400 	ldr	w0, [x0, #20]
   ae994:	f90013f5 	str	x21, [sp, #32]
   ae998:	7100001f 	cmp	w0, #0x0
   ae99c:	51000800 	sub	w0, w0, #0x2
   ae9a0:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   ae9a4:	540007e8 	b.hi	aeaa0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>  // b.pmore
   ae9a8:	f9401660 	ldr	x0, [x19, #40]
   ae9ac:	b4000520 	cbz	x0, aea50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   ae9b0:	b9403e60 	ldr	w0, [x19, #60]
   ae9b4:	7100181f 	cmp	w0, #0x6
   ae9b8:	54000561 	b.ne	aea64 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>  // b.any
   ae9bc:	7100143f 	cmp	w1, #0x5
   ae9c0:	540005cc 	b.gt	aea78 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
   ae9c4:	b9404260 	ldr	w0, [x19, #64]
   ae9c8:	6b01001f 	cmp	w0, w1
   ae9cc:	54000600 	b.eq	aea8c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>  // b.none
   ae9d0:	b9400e62 	ldr	w2, [x19, #12]
   ae9d4:	900000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   ae9d8:	b94e1aa0 	ldr	w0, [x21, #3608]
   ae9dc:	52800983 	mov	w3, #0x4c                  	// #76
   ae9e0:	72a7e403 	movk	w3, #0x3f20, lsl #16
   ae9e4:	0b030042 	add	w2, w2, w3
   ae9e8:	52800183 	mov	w3, #0xc                   	// #12
   ae9ec:	b9003e61 	str	w1, [x19, #60]
   ae9f0:	1b030834 	madd	w20, w1, w3, w2
   ae9f4:	350001e0 	cbnz	w0, aea30 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb0>
   ae9f8:	b9401261 	ldr	w1, [x19, #16]
   ae9fc:	b9400280 	ldr	w0, [x20]
   aea00:	2a010000 	orr	w0, w0, w1
   aea04:	b9000280 	str	w0, [x20]
   aea08:	b94e1aa0 	ldr	w0, [x21, #3608]
   aea0c:	350000a0 	cbnz	w0, aea20 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   aea10:	a94153f3 	ldp	x19, x20, [sp, #16]
   aea14:	f94013f5 	ldr	x21, [sp, #32]
   aea18:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aea1c:	d65f03c0 	ret
   aea20:	a94153f3 	ldp	x19, x20, [sp, #16]
   aea24:	f94013f5 	ldr	x21, [sp, #32]
   aea28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aea2c:	17fff9c5 	b	ad140 <LeaveCritical>
   aea30:	97fff994 	bl	ad080 <EnterCritical>
   aea34:	b9401261 	ldr	w1, [x19, #16]
   aea38:	b9400280 	ldr	w0, [x20]
   aea3c:	2a010000 	orr	w0, w0, w1
   aea40:	b9000280 	str	w0, [x20]
   aea44:	b94e1aa0 	ldr	w0, [x21, #3608]
   aea48:	34fffe40 	cbz	w0, aea10 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x90>
   aea4c:	17fffff5 	b	aea20 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   aea50:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aea54:	91138021 	add	x1, x1, #0x4e0
   aea58:	91062020 	add	x0, x1, #0x188
   aea5c:	52801c82 	mov	w2, #0xe4                  	// #228
   aea60:	97ffcd28 	bl	a1f00 <assertion_failed>
   aea64:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aea68:	91138021 	add	x1, x1, #0x4e0
   aea6c:	91042020 	add	x0, x1, #0x108
   aea70:	52801cc2 	mov	w2, #0xe6                  	// #230
   aea74:	97ffcd23 	bl	a1f00 <assertion_failed>
   aea78:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aea7c:	91138021 	add	x1, x1, #0x4e0
   aea80:	91066020 	add	x0, x1, #0x198
   aea84:	52801ce2 	mov	w2, #0xe7                  	// #231
   aea88:	97ffcd1e 	bl	a1f00 <assertion_failed>
   aea8c:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aea90:	91138021 	add	x1, x1, #0x4e0
   aea94:	91070020 	add	x0, x1, #0x1c0
   aea98:	52801d02 	mov	w2, #0xe8                  	// #232
   aea9c:	97ffcd19 	bl	a1f00 <assertion_failed>
   aeaa0:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aeaa4:	91138021 	add	x1, x1, #0x4e0
   aeaa8:	91022020 	add	x0, x1, #0x88
   aeaac:	52801c22 	mov	w2, #0xe1                  	// #225
   aeab0:	97ffcd14 	bl	a1f00 <assertion_failed>
   aeab4:	d503201f 	nop
   aeab8:	d503201f 	nop
   aeabc:	d503201f 	nop

00000000000aeac0 <CGPIOPin::DisableInterrupt()>:
   aeac0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aeac4:	910003fd 	mov	x29, sp
   aeac8:	a90153f3 	stp	x19, x20, [sp, #16]
   aeacc:	aa0003f3 	mov	x19, x0
   aead0:	b9401400 	ldr	w0, [x0, #20]
   aead4:	f90013f5 	str	x21, [sp, #32]
   aead8:	7100001f 	cmp	w0, #0x0
   aeadc:	51000800 	sub	w0, w0, #0x2
   aeae0:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   aeae4:	54000588 	b.hi	aeb94 <CGPIOPin::DisableInterrupt()+0xd4>  // b.pmore
   aeae8:	b9403e61 	ldr	w1, [x19, #60]
   aeaec:	7100143f 	cmp	w1, #0x5
   aeaf0:	5400048c 	b.gt	aeb80 <CGPIOPin::DisableInterrupt()+0xc0>
   aeaf4:	b9400e62 	ldr	w2, [x19, #12]
   aeaf8:	900000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   aeafc:	b94e1aa0 	ldr	w0, [x21, #3608]
   aeb00:	52800983 	mov	w3, #0x4c                  	// #76
   aeb04:	72a7e403 	movk	w3, #0x3f20, lsl #16
   aeb08:	0b030042 	add	w2, w2, w3
   aeb0c:	52800183 	mov	w3, #0xc                   	// #12
   aeb10:	1b030834 	madd	w20, w1, w3, w2
   aeb14:	350001a0 	cbnz	w0, aeb48 <CGPIOPin::DisableInterrupt()+0x88>
   aeb18:	b9401260 	ldr	w0, [x19, #16]
   aeb1c:	b9400281 	ldr	w1, [x20]
   aeb20:	0a200020 	bic	w0, w1, w0
   aeb24:	b9000280 	str	w0, [x20]
   aeb28:	b94e1aa0 	ldr	w0, [x21, #3608]
   aeb2c:	350001c0 	cbnz	w0, aeb64 <CGPIOPin::DisableInterrupt()+0xa4>
   aeb30:	f94013f5 	ldr	x21, [sp, #32]
   aeb34:	528000c0 	mov	w0, #0x6                   	// #6
   aeb38:	b9003e60 	str	w0, [x19, #60]
   aeb3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeb40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aeb44:	d65f03c0 	ret
   aeb48:	97fff94e 	bl	ad080 <EnterCritical>
   aeb4c:	b9401260 	ldr	w0, [x19, #16]
   aeb50:	b9400281 	ldr	w1, [x20]
   aeb54:	0a200020 	bic	w0, w1, w0
   aeb58:	b9000280 	str	w0, [x20]
   aeb5c:	b94e1aa0 	ldr	w0, [x21, #3608]
   aeb60:	34fffe80 	cbz	w0, aeb30 <CGPIOPin::DisableInterrupt()+0x70>
   aeb64:	97fff977 	bl	ad140 <LeaveCritical>
   aeb68:	f94013f5 	ldr	x21, [sp, #32]
   aeb6c:	528000c0 	mov	w0, #0x6                   	// #6
   aeb70:	b9003e60 	str	w0, [x19, #60]
   aeb74:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeb78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aeb7c:	d65f03c0 	ret
   aeb80:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aeb84:	91138021 	add	x1, x1, #0x4e0
   aeb88:	91078020 	add	x0, x1, #0x1e0
   aeb8c:	52801f62 	mov	w2, #0xfb                  	// #251
   aeb90:	97ffccdc 	bl	a1f00 <assertion_failed>
   aeb94:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aeb98:	91138021 	add	x1, x1, #0x4e0
   aeb9c:	91022020 	add	x0, x1, #0x88
   aeba0:	52801ee2 	mov	w2, #0xf7                  	// #247
   aeba4:	97ffccd7 	bl	a1f00 <assertion_failed>
   aeba8:	d503201f 	nop
   aebac:	d503201f 	nop

00000000000aebb0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   aebb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aebb4:	910003fd 	mov	x29, sp
   aebb8:	a90153f3 	stp	x19, x20, [sp, #16]
   aebbc:	aa0003f3 	mov	x19, x0
   aebc0:	b9401400 	ldr	w0, [x0, #20]
   aebc4:	f90013f5 	str	x21, [sp, #32]
   aebc8:	7100001f 	cmp	w0, #0x0
   aebcc:	51000800 	sub	w0, w0, #0x2
   aebd0:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   aebd4:	540007e8 	b.hi	aecd0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>  // b.pmore
   aebd8:	f9401660 	ldr	x0, [x19, #40]
   aebdc:	b4000520 	cbz	x0, aec80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   aebe0:	b9404260 	ldr	w0, [x19, #64]
   aebe4:	7100181f 	cmp	w0, #0x6
   aebe8:	54000561 	b.ne	aec94 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>  // b.any
   aebec:	7100143f 	cmp	w1, #0x5
   aebf0:	540005cc 	b.gt	aeca8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   aebf4:	b9403e60 	ldr	w0, [x19, #60]
   aebf8:	6b01001f 	cmp	w0, w1
   aebfc:	54000600 	b.eq	aecbc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>  // b.none
   aec00:	b9400e62 	ldr	w2, [x19, #12]
   aec04:	900000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   aec08:	b94e1aa0 	ldr	w0, [x21, #3608]
   aec0c:	52800983 	mov	w3, #0x4c                  	// #76
   aec10:	72a7e403 	movk	w3, #0x3f20, lsl #16
   aec14:	0b030042 	add	w2, w2, w3
   aec18:	52800183 	mov	w3, #0xc                   	// #12
   aec1c:	b9004261 	str	w1, [x19, #64]
   aec20:	1b030834 	madd	w20, w1, w3, w2
   aec24:	350001e0 	cbnz	w0, aec60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb0>
   aec28:	b9401261 	ldr	w1, [x19, #16]
   aec2c:	b9400280 	ldr	w0, [x20]
   aec30:	2a010000 	orr	w0, w0, w1
   aec34:	b9000280 	str	w0, [x20]
   aec38:	b94e1aa0 	ldr	w0, [x21, #3608]
   aec3c:	350000a0 	cbnz	w0, aec50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   aec40:	a94153f3 	ldp	x19, x20, [sp, #16]
   aec44:	f94013f5 	ldr	x21, [sp, #32]
   aec48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aec4c:	d65f03c0 	ret
   aec50:	a94153f3 	ldp	x19, x20, [sp, #16]
   aec54:	f94013f5 	ldr	x21, [sp, #32]
   aec58:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aec5c:	17fff939 	b	ad140 <LeaveCritical>
   aec60:	97fff908 	bl	ad080 <EnterCritical>
   aec64:	b9401261 	ldr	w1, [x19, #16]
   aec68:	b9400280 	ldr	w0, [x20]
   aec6c:	2a010000 	orr	w0, w0, w1
   aec70:	b9000280 	str	w0, [x20]
   aec74:	b94e1aa0 	ldr	w0, [x21, #3608]
   aec78:	34fffe40 	cbz	w0, aec40 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x90>
   aec7c:	17fffff5 	b	aec50 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   aec80:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aec84:	91138021 	add	x1, x1, #0x4e0
   aec88:	91062020 	add	x0, x1, #0x188
   aec8c:	528021a2 	mov	w2, #0x10d                 	// #269
   aec90:	97ffcc9c 	bl	a1f00 <assertion_failed>
   aec94:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aec98:	91138021 	add	x1, x1, #0x4e0
   aec9c:	9104c020 	add	x0, x1, #0x130
   aeca0:	528021e2 	mov	w2, #0x10f                 	// #271
   aeca4:	97ffcc97 	bl	a1f00 <assertion_failed>
   aeca8:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aecac:	91138021 	add	x1, x1, #0x4e0
   aecb0:	91066020 	add	x0, x1, #0x198
   aecb4:	52802202 	mov	w2, #0x110                 	// #272
   aecb8:	97ffcc92 	bl	a1f00 <assertion_failed>
   aecbc:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aecc0:	91138021 	add	x1, x1, #0x4e0
   aecc4:	91082020 	add	x0, x1, #0x208
   aecc8:	52802222 	mov	w2, #0x111                 	// #273
   aeccc:	97ffcc8d 	bl	a1f00 <assertion_failed>
   aecd0:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aecd4:	91138021 	add	x1, x1, #0x4e0
   aecd8:	91022020 	add	x0, x1, #0x88
   aecdc:	52802142 	mov	w2, #0x10a                 	// #266
   aece0:	97ffcc88 	bl	a1f00 <assertion_failed>
   aece4:	d503201f 	nop
   aece8:	d503201f 	nop
   aecec:	d503201f 	nop

00000000000aecf0 <CGPIOPin::DisableInterrupt2()>:
   aecf0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aecf4:	910003fd 	mov	x29, sp
   aecf8:	a90153f3 	stp	x19, x20, [sp, #16]
   aecfc:	aa0003f3 	mov	x19, x0
   aed00:	b9401400 	ldr	w0, [x0, #20]
   aed04:	f90013f5 	str	x21, [sp, #32]
   aed08:	7100001f 	cmp	w0, #0x0
   aed0c:	51000800 	sub	w0, w0, #0x2
   aed10:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   aed14:	54000588 	b.hi	aedc4 <CGPIOPin::DisableInterrupt2()+0xd4>  // b.pmore
   aed18:	b9404261 	ldr	w1, [x19, #64]
   aed1c:	7100143f 	cmp	w1, #0x5
   aed20:	5400048c 	b.gt	aedb0 <CGPIOPin::DisableInterrupt2()+0xc0>
   aed24:	b9400e62 	ldr	w2, [x19, #12]
   aed28:	900000f5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   aed2c:	b94e1aa0 	ldr	w0, [x21, #3608]
   aed30:	52800983 	mov	w3, #0x4c                  	// #76
   aed34:	72a7e403 	movk	w3, #0x3f20, lsl #16
   aed38:	0b030042 	add	w2, w2, w3
   aed3c:	52800183 	mov	w3, #0xc                   	// #12
   aed40:	1b030834 	madd	w20, w1, w3, w2
   aed44:	350001a0 	cbnz	w0, aed78 <CGPIOPin::DisableInterrupt2()+0x88>
   aed48:	b9401260 	ldr	w0, [x19, #16]
   aed4c:	b9400281 	ldr	w1, [x20]
   aed50:	0a200020 	bic	w0, w1, w0
   aed54:	b9000280 	str	w0, [x20]
   aed58:	b94e1aa0 	ldr	w0, [x21, #3608]
   aed5c:	350001c0 	cbnz	w0, aed94 <CGPIOPin::DisableInterrupt2()+0xa4>
   aed60:	f94013f5 	ldr	x21, [sp, #32]
   aed64:	528000c0 	mov	w0, #0x6                   	// #6
   aed68:	b9004260 	str	w0, [x19, #64]
   aed6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aed70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aed74:	d65f03c0 	ret
   aed78:	97fff8c2 	bl	ad080 <EnterCritical>
   aed7c:	b9401260 	ldr	w0, [x19, #16]
   aed80:	b9400281 	ldr	w1, [x20]
   aed84:	0a200020 	bic	w0, w1, w0
   aed88:	b9000280 	str	w0, [x20]
   aed8c:	b94e1aa0 	ldr	w0, [x21, #3608]
   aed90:	34fffe80 	cbz	w0, aed60 <CGPIOPin::DisableInterrupt2()+0x70>
   aed94:	97fff8eb 	bl	ad140 <LeaveCritical>
   aed98:	f94013f5 	ldr	x21, [sp, #32]
   aed9c:	528000c0 	mov	w0, #0x6                   	// #6
   aeda0:	b9004260 	str	w0, [x19, #64]
   aeda4:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeda8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aedac:	d65f03c0 	ret
   aedb0:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aedb4:	91138021 	add	x1, x1, #0x4e0
   aedb8:	9108a020 	add	x0, x1, #0x228
   aedbc:	52802482 	mov	w2, #0x124                 	// #292
   aedc0:	97ffcc50 	bl	a1f00 <assertion_failed>
   aedc4:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aedc8:	91138021 	add	x1, x1, #0x4e0
   aedcc:	91022020 	add	x0, x1, #0x88
   aedd0:	52802402 	mov	w2, #0x120                 	// #288
   aedd4:	97ffcc4b 	bl	a1f00 <assertion_failed>
   aedd8:	d503201f 	nop
   aeddc:	d503201f 	nop

00000000000aede0 <CGPIOPin::AcknowledgeInterrupt()>:
   aede0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aede4:	910003fd 	mov	x29, sp
   aede8:	f9401401 	ldr	x1, [x0, #40]
   aedec:	b4000141 	cbz	x1, aee14 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   aedf0:	3940e001 	ldrb	w1, [x0, #56]
   aedf4:	370001a1 	tbnz	w1, #0, aee28 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   aedf8:	29418801 	ldp	w1, w2, [x0, #12]
   aedfc:	52800803 	mov	w3, #0x40                  	// #64
   aee00:	72a7e403 	movk	w3, #0x3f20, lsl #16
   aee04:	0b030020 	add	w0, w1, w3
   aee08:	b9000002 	str	w2, [x0]
   aee0c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aee10:	d65f03c0 	ret
   aee14:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aee18:	91138021 	add	x1, x1, #0x4e0
   aee1c:	91062020 	add	x0, x1, #0x188
   aee20:	52802662 	mov	w2, #0x133                 	// #307
   aee24:	97ffcc37 	bl	a1f00 <assertion_failed>
   aee28:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aee2c:	91138021 	add	x1, x1, #0x4e0
   aee30:	91094020 	add	x0, x1, #0x250
   aee34:	52802682 	mov	w2, #0x134                 	// #308
   aee38:	97ffcc32 	bl	a1f00 <assertion_failed>
   aee3c:	d503201f 	nop

00000000000aee40 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   aee40:	6a200022 	bics	w2, w1, w0
   aee44:	54000080 	b.eq	aee54 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   aee48:	d2800503 	mov	x3, #0x28                  	// #40
   aee4c:	f2a7e403 	movk	x3, #0x3f20, lsl #16
   aee50:	b9000062 	str	w2, [x3]
   aee54:	6a010000 	ands	w0, w0, w1
   aee58:	54000080 	b.eq	aee68 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   aee5c:	d2800381 	mov	x1, #0x1c                  	// #28
   aee60:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   aee64:	b9000020 	str	w0, [x1]
   aee68:	d65f03c0 	ret
   aee6c:	d503201f 	nop

00000000000aee70 <CGPIOPin::ReadAll()>:
   aee70:	d2800680 	mov	x0, #0x34                  	// #52
   aee74:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   aee78:	b9400000 	ldr	w0, [x0]
   aee7c:	d65f03c0 	ret

00000000000aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   aee80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aee84:	910003fd 	mov	x29, sp
   aee88:	a9025bf5 	stp	x21, x22, [sp, #32]
   aee8c:	900000f6 	adrp	x22, ca000 <vtable for CLAN7800Device+0x28>
   aee90:	b94e1ac2 	ldr	w2, [x22, #3608]
   aee94:	a90153f3 	stp	x19, x20, [sp, #16]
   aee98:	aa0003f3 	mov	x19, x0
   aee9c:	2a0103f4 	mov	w20, w1
   aeea0:	f9001bf7 	str	x23, [sp, #48]
   aeea4:	35000322 	cbnz	w2, aef08 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x88>
   aeea8:	b9400e75 	ldr	w21, [x19, #12]
   aeeac:	52801300 	mov	w0, #0x98                  	// #152
   aeeb0:	72a7e400 	movk	w0, #0x3f20, lsl #16
   aeeb4:	71000a9f 	cmp	w20, #0x2
   aeeb8:	0b0002b5 	add	w21, w21, w0
   aeebc:	5400036c 	b.gt	aef28 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa8>
   aeec0:	d2801297 	mov	x23, #0x94                  	// #148
   aeec4:	f2a7e417 	movk	x23, #0x3f20, lsl #16
   aeec8:	528000a0 	mov	w0, #0x5                   	// #5
   aeecc:	b90002f4 	str	w20, [x23]
   aeed0:	97ffeebc 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   aeed4:	b9401260 	ldr	w0, [x19, #16]
   aeed8:	b90002a0 	str	w0, [x21]
   aeedc:	528000a0 	mov	w0, #0x5                   	// #5
   aeee0:	97ffeeb8 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   aeee4:	b90002ff 	str	wzr, [x23]
   aeee8:	b90002bf 	str	wzr, [x21]
   aeeec:	b94e1ac0 	ldr	w0, [x22, #3608]
   aeef0:	35000260 	cbnz	w0, aef3c <CGPIOPin::SetPullMode(TGPIOPullMode)+0xbc>
   aeef4:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeef8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aeefc:	f9401bf7 	ldr	x23, [sp, #48]
   aef00:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aef04:	d65f03c0 	ret
   aef08:	2a0203e0 	mov	w0, w2
   aef0c:	97fff85d 	bl	ad080 <EnterCritical>
   aef10:	b9400e75 	ldr	w21, [x19, #12]
   aef14:	52801300 	mov	w0, #0x98                  	// #152
   aef18:	72a7e400 	movk	w0, #0x3f20, lsl #16
   aef1c:	71000a9f 	cmp	w20, #0x2
   aef20:	0b0002b5 	add	w21, w21, w0
   aef24:	54fffced 	b.le	aeec0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x40>
   aef28:	b0000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   aef2c:	91138021 	add	x1, x1, #0x4e0
   aef30:	91098020 	add	x0, x1, #0x260
   aef34:	52802ca2 	mov	w2, #0x165                 	// #357
   aef38:	97ffcbf2 	bl	a1f00 <assertion_failed>
   aef3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   aef40:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aef44:	f9401bf7 	ldr	x23, [sp, #48]
   aef48:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aef4c:	17fff87d 	b	ad140 <LeaveCritical>

00000000000aef50 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   aef50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aef54:	910003fd 	mov	x29, sp
   aef58:	a90153f3 	stp	x19, x20, [sp, #16]
   aef5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   aef60:	2a0103f5 	mov	w21, w1
   aef64:	b9400801 	ldr	w1, [x0, #8]
   aef68:	7100d43f 	cmp	w1, #0x35
   aef6c:	540004e8 	b.hi	af008 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>  // b.pmore
   aef70:	529999a0 	mov	w0, #0xcccd                	// #52429
   aef74:	72b99980 	movk	w0, #0xcccc, lsl #16
   aef78:	52800142 	mov	w2, #0xa                   	// #10
   aef7c:	52a1f914 	mov	w20, #0xfc80000             	// #264765440
   aef80:	9ba07c20 	umull	x0, w1, w0
   aef84:	710016bf 	cmp	w21, #0x5
   aef88:	d363fc00 	lsr	x0, x0, #35
   aef8c:	0b140014 	add	w20, w0, w20
   aef90:	1b028400 	msub	w0, w0, w2, w1
   aef94:	531e7694 	lsl	w20, w20, #2
   aef98:	0b000413 	add	w19, w0, w0, lsl #1
   aef9c:	54000408 	b.hi	af01c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>  // b.pmore
   aefa0:	900000f6 	adrp	x22, ca000 <vtable for CLAN7800Device+0x28>
   aefa4:	b94e1ac0 	ldr	w0, [x22, #3608]
   aefa8:	35000240 	cbnz	w0, aeff0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   aefac:	b0000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   aefb0:	91138000 	add	x0, x0, #0x4e0
   aefb4:	910a0000 	add	x0, x0, #0x280
   aefb8:	b9400281 	ldr	w1, [x20]
   aefbc:	528000e2 	mov	w2, #0x7                   	// #7
   aefc0:	1ad32042 	lsl	w2, w2, w19
   aefc4:	0a220022 	bic	w2, w1, w2
   aefc8:	b8755800 	ldr	w0, [x0, w21, uxtw #2]
   aefcc:	1ad32000 	lsl	w0, w0, w19
   aefd0:	2a020000 	orr	w0, w0, w2
   aefd4:	b9000280 	str	w0, [x20]
   aefd8:	b94e1ac0 	ldr	w0, [x22, #3608]
   aefdc:	350000e0 	cbnz	w0, aeff8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   aefe0:	a94153f3 	ldp	x19, x20, [sp, #16]
   aefe4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aefe8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aefec:	d65f03c0 	ret
   aeff0:	97fff824 	bl	ad080 <EnterCritical>
   aeff4:	17ffffee 	b	aefac <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   aeff8:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeffc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af000:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af004:	17fff84f 	b	ad140 <LeaveCritical>
   af008:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af00c:	91138021 	add	x1, x1, #0x4e0
   af010:	9100a020 	add	x0, x1, #0x28
   af014:	52803022 	mov	w2, #0x181                 	// #385
   af018:	97ffcbba 	bl	a1f00 <assertion_failed>
   af01c:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af020:	91138021 	add	x1, x1, #0x4e0
   af024:	9109c020 	add	x0, x1, #0x270
   af028:	528030a2 	mov	w2, #0x185                 	// #389
   af02c:	97ffcbb5 	bl	a1f00 <assertion_failed>

00000000000af030 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   af030:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   af034:	7100243f 	cmp	w1, #0x9
   af038:	910003fd 	mov	x29, sp
   af03c:	a90153f3 	stp	x19, x20, [sp, #16]
   af040:	a9025bf5 	stp	x21, x22, [sp, #32]
   af044:	54000b0c 	b.gt	af1a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   af048:	b9001401 	str	w1, [x0, #20]
   af04c:	12001c56 	and	w22, w2, #0xff
   af050:	51001022 	sub	w2, w1, #0x4
   af054:	2a0103e3 	mov	w3, w1
   af058:	aa0003f4 	mov	x20, x0
   af05c:	7100145f 	cmp	w2, #0x5
   af060:	54000669 	b.ls	af12c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>  // b.plast
   af064:	f9001bf7 	str	x23, [sp, #48]
   af068:	710002df 	cmp	w22, #0x0
   af06c:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   af070:	54000a60 	b.eq	af1bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>  // b.none
   af074:	b9400a81 	ldr	w1, [x20, #8]
   af078:	7100d43f 	cmp	w1, #0x35
   af07c:	54000a68 	b.hi	af1c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>  // b.pmore
   af080:	529999b3 	mov	w19, #0xcccd                	// #52429
   af084:	72b99993 	movk	w19, #0xcccc, lsl #16
   af088:	52800142 	mov	w2, #0xa                   	// #10
   af08c:	f00000d7 	adrp	x23, ca000 <vtable for CLAN7800Device+0x28>
   af090:	b94e1ae0 	ldr	w0, [x23, #3608]
   af094:	9bb37c33 	umull	x19, w1, w19
   af098:	52a1f915 	mov	w21, #0xfc80000             	// #264765440
   af09c:	d363fe73 	lsr	x19, x19, #35
   af0a0:	0b150275 	add	w21, w19, w21
   af0a4:	1b028673 	msub	w19, w19, w2, w1
   af0a8:	531e76b5 	lsl	w21, w21, #2
   af0ac:	0b130673 	add	w19, w19, w19, lsl #1
   af0b0:	35000520 	cbnz	w0, af154 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   af0b4:	b9401680 	ldr	w0, [x20, #20]
   af0b8:	528000e1 	mov	w1, #0x7                   	// #7
   af0bc:	b94002a2 	ldr	w2, [x21]
   af0c0:	1ad32021 	lsl	w1, w1, w19
   af0c4:	7100041f 	cmp	w0, #0x1
   af0c8:	1a9f17e0 	cset	w0, eq	// eq = none
   af0cc:	0a210041 	bic	w1, w2, w1
   af0d0:	1ad32000 	lsl	w0, w0, w19
   af0d4:	2a010000 	orr	w0, w0, w1
   af0d8:	b90002a0 	str	w0, [x21]
   af0dc:	b94e1ae0 	ldr	w0, [x23, #3608]
   af0e0:	35000340 	cbnz	w0, af148 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   af0e4:	360001b6 	tbz	w22, #0, af118 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
   af0e8:	b9401681 	ldr	w1, [x20, #20]
   af0ec:	7100083f 	cmp	w1, #0x2
   af0f0:	540007c0 	b.eq	af1e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>  // b.none
   af0f4:	54000348 	b.hi	af15c <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>  // b.pmore
   af0f8:	34000721 	cbz	w1, af1dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x1ac>
   af0fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af100:	aa1403e0 	mov	x0, x20
   af104:	a94153f3 	ldp	x19, x20, [sp, #16]
   af108:	52800001 	mov	w1, #0x0                   	// #0
   af10c:	f9401bf7 	ldr	x23, [sp, #48]
   af110:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af114:	17fffd47 	b	ae630 <CGPIOPin::Write(unsigned int)>
   af118:	a94153f3 	ldp	x19, x20, [sp, #16]
   af11c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af120:	f9401bf7 	ldr	x23, [sp, #48]
   af124:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af128:	d65f03c0 	ret
   af12c:	370002b6 	tbnz	w22, #0, af180 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
   af130:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af134:	aa1403e0 	mov	x0, x20
   af138:	a94153f3 	ldp	x19, x20, [sp, #16]
   af13c:	51001061 	sub	w1, w3, #0x4
   af140:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af144:	17ffff83 	b	aef50 <CGPIOPin::SetAlternateFunction(unsigned int)>
   af148:	97fff7fe 	bl	ad140 <LeaveCritical>
   af14c:	3607fe76 	tbz	w22, #0, af118 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
   af150:	17ffffe6 	b	af0e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb8>
   af154:	97fff7cb 	bl	ad080 <EnterCritical>
   af158:	17ffffd7 	b	af0b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
   af15c:	71000c3f 	cmp	w1, #0x3
   af160:	54fffdc1 	b.ne	af118 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>  // b.any
   af164:	aa1403e0 	mov	x0, x20
   af168:	52800021 	mov	w1, #0x1                   	// #1
   af16c:	a94153f3 	ldp	x19, x20, [sp, #16]
   af170:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af174:	f9401bf7 	ldr	x23, [sp, #48]
   af178:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af17c:	17ffff41 	b	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   af180:	52800001 	mov	w1, #0x0                   	// #0
   af184:	97ffff3f 	bl	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   af188:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af18c:	aa1403e0 	mov	x0, x20
   af190:	b9401683 	ldr	w3, [x20, #20]
   af194:	a94153f3 	ldp	x19, x20, [sp, #16]
   af198:	51001061 	sub	w1, w3, #0x4
   af19c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af1a0:	17ffff6c 	b	aef50 <CGPIOPin::SetAlternateFunction(unsigned int)>
   af1a4:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af1a8:	91138021 	add	x1, x1, #0x4e0
   af1ac:	910a6020 	add	x0, x1, #0x298
   af1b0:	528009e2 	mov	w2, #0x4f                  	// #79
   af1b4:	f9001bf7 	str	x23, [sp, #48]
   af1b8:	97ffcb52 	bl	a1f00 <assertion_failed>
   af1bc:	52800001 	mov	w1, #0x0                   	// #0
   af1c0:	97ffff30 	bl	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   af1c4:	17ffffac 	b	af074 <CGPIOPin::SetMode(TGPIOMode, bool)+0x44>
   af1c8:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af1cc:	91138021 	add	x1, x1, #0x4e0
   af1d0:	9100a020 	add	x0, x1, #0x28
   af1d4:	52800d02 	mov	w2, #0x68                  	// #104
   af1d8:	97ffcb4a 	bl	a1f00 <assertion_failed>
   af1dc:	aa1403e0 	mov	x0, x20
   af1e0:	52800001 	mov	w1, #0x0                   	// #0
   af1e4:	17ffffe2 	b	af16c <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>
   af1e8:	aa1403e0 	mov	x0, x20
   af1ec:	17ffffe0 	b	af16c <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>

00000000000af1f0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   af1f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   af1f4:	52800144 	mov	w4, #0xa                   	// #10
   af1f8:	910003fd 	mov	x29, sp
   af1fc:	a90153f3 	stp	x19, x20, [sp, #16]
   af200:	aa0003f3 	mov	x19, x0
   af204:	2a0103f4 	mov	w20, w1
   af208:	f90013f5 	str	x21, [sp, #32]
   af20c:	f00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   af210:	912ba000 	add	x0, x0, #0xae8
   af214:	528000c1 	mov	w1, #0x6                   	// #6
   af218:	f9000260 	str	x0, [x19]
   af21c:	7100d69f 	cmp	w20, #0x35
   af220:	b9000a74 	str	w20, [x19, #8]
   af224:	2a0203f5 	mov	w21, w2
   af228:	b9001664 	str	w4, [x19, #20]
   af22c:	a9027e63 	stp	x3, xzr, [x19, #32]
   af230:	29078661 	stp	w1, w1, [x19, #60]
   af234:	54000188 	b.hi	af264 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>  // b.pmore
   af238:	4b5417e0 	neg	w0, w20, lsr #5
   af23c:	52800022 	mov	w2, #0x1                   	// #1
   af240:	1ad42054 	lsl	w20, w2, w20
   af244:	121e0000 	and	w0, w0, #0x4
   af248:	2a1503e1 	mov	w1, w21
   af24c:	f94013f5 	ldr	x21, [sp, #32]
   af250:	2901d260 	stp	w0, w20, [x19, #12]
   af254:	aa1303e0 	mov	x0, x19
   af258:	a94153f3 	ldp	x19, x20, [sp, #16]
   af25c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af260:	17ffff74 	b	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   af264:	97ffd71b 	bl	a4ed0 <CMachineInfo::Get()>
   af268:	2a1403e1 	mov	w1, w20
   af26c:	97ffd661 	bl	a4bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   af270:	b9000a60 	str	w0, [x19, #8]
   af274:	2a0003f4 	mov	w20, w0
   af278:	7100d41f 	cmp	w0, #0x35
   af27c:	54fffde9 	b.ls	af238 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x48>  // b.plast
   af280:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af284:	91138021 	add	x1, x1, #0x4e0
   af288:	9100a020 	add	x0, x1, #0x28
   af28c:	528008e2 	mov	w2, #0x47                  	// #71
   af290:	97ffcb1c 	bl	a1f00 <assertion_failed>
   af294:	d503201f 	nop
   af298:	d503201f 	nop
   af29c:	d503201f 	nop

00000000000af2a0 <CGPIOPin::InterruptHandler()>:
   af2a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   af2a4:	910003fd 	mov	x29, sp
   af2a8:	b9401401 	ldr	w1, [x0, #20]
   af2ac:	7100003f 	cmp	w1, #0x0
   af2b0:	51000821 	sub	w1, w1, #0x2
   af2b4:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   af2b8:	540002e8 	b.hi	af314 <CGPIOPin::InterruptHandler()+0x74>  // b.pmore
   af2bc:	b9403c01 	ldr	w1, [x0, #60]
   af2c0:	7100143f 	cmp	w1, #0x5
   af2c4:	540000ec 	b.gt	af2e0 <CGPIOPin::InterruptHandler()+0x40>
   af2c8:	f9401401 	ldr	x1, [x0, #40]
   af2cc:	b40001a1 	cbz	x1, af300 <CGPIOPin::InterruptHandler()+0x60>
   af2d0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   af2d4:	aa0103f0 	mov	x16, x1
   af2d8:	f9401800 	ldr	x0, [x0, #48]
   af2dc:	d61f0200 	br	x16
   af2e0:	b9404001 	ldr	w1, [x0, #64]
   af2e4:	7100143f 	cmp	w1, #0x5
   af2e8:	54ffff0d 	b.le	af2c8 <CGPIOPin::InterruptHandler()+0x28>
   af2ec:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af2f0:	91138021 	add	x1, x1, #0x4e0
   af2f4:	910ac020 	add	x0, x1, #0x2b0
   af2f8:	528032a2 	mov	w2, #0x195                 	// #405
   af2fc:	97ffcb01 	bl	a1f00 <assertion_failed>
   af300:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af304:	91138021 	add	x1, x1, #0x4e0
   af308:	91062020 	add	x0, x1, #0x188
   af30c:	52803302 	mov	w2, #0x198                 	// #408
   af310:	97ffcafc 	bl	a1f00 <assertion_failed>
   af314:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af318:	91138021 	add	x1, x1, #0x4e0
   af31c:	91022020 	add	x0, x1, #0x88
   af320:	52803242 	mov	w2, #0x192                 	// #402
   af324:	97ffcaf7 	bl	a1f00 <assertion_failed>
   af328:	d503201f 	nop
   af32c:	d503201f 	nop

00000000000af330 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   af330:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   af334:	7100d41f 	cmp	w0, #0x35
   af338:	910003fd 	mov	x29, sp
   af33c:	a90153f3 	stp	x19, x20, [sp, #16]
   af340:	f90013f5 	str	x21, [sp, #32]
   af344:	54000408 	b.hi	af3c4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x94>  // b.pmore
   af348:	2a0003e2 	mov	w2, w0
   af34c:	f00000d5 	adrp	x21, ca000 <vtable for CLAN7800Device+0x28>
   af350:	b94e1aa0 	ldr	w0, [x21, #3608]
   af354:	52800273 	mov	w19, #0x13                  	// #19
   af358:	72a1f913 	movk	w19, #0xfc8, lsl #16
   af35c:	52800021 	mov	w1, #0x1                   	// #1
   af360:	0b421673 	add	w19, w19, w2, lsr #5
   af364:	1ac22034 	lsl	w20, w1, w2
   af368:	d37e7273 	ubfiz	x19, x19, #2, #29
   af36c:	35000200 	cbnz	w0, af3ac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   af370:	2a3403e1 	mvn	w1, w20
   af374:	d2801162 	mov	x2, #0x8b                  	// #139
   af378:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   af37c:	d503201f 	nop
   af380:	b9400260 	ldr	w0, [x19]
   af384:	0a000020 	and	w0, w1, w0
   af388:	b800c660 	str	w0, [x19], #12
   af38c:	eb02027f 	cmp	x19, x2
   af390:	54ffff89 	b.ls	af380 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>  // b.plast
   af394:	b94e1aa0 	ldr	w0, [x21, #3608]
   af398:	350000e0 	cbnz	w0, af3b4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   af39c:	a94153f3 	ldp	x19, x20, [sp, #16]
   af3a0:	f94013f5 	ldr	x21, [sp, #32]
   af3a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af3a8:	d65f03c0 	ret
   af3ac:	97fff735 	bl	ad080 <EnterCritical>
   af3b0:	17fffff0 	b	af370 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x40>
   af3b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   af3b8:	f94013f5 	ldr	x21, [sp, #32]
   af3bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af3c0:	17fff760 	b	ad140 <LeaveCritical>
   af3c4:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   af3c8:	91138021 	add	x1, x1, #0x4e0
   af3cc:	910c0020 	add	x0, x1, #0x300
   af3d0:	528033c2 	mov	w2, #0x19e                 	// #414
   af3d4:	97ffcacb 	bl	a1f00 <assertion_failed>
	...

00000000000af3e0 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   af3e0:	f00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   af3e4:	52800021 	mov	w1, #0x1                   	// #1
   af3e8:	b90e1801 	str	w1, [x0, #3608]
   af3ec:	d65f03c0 	ret

00000000000af3f0 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)>:
   af3f0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   af3f4:	910003fd 	mov	x29, sp
   af3f8:	a90153f3 	stp	x19, x20, [sp, #16]
   af3fc:	aa0003f3 	mov	x19, x0
   af400:	2a0103f4 	mov	w20, w1
   af404:	a9025bf5 	stp	x21, x22, [sp, #32]
   af408:	2a0303f5 	mov	w21, w3
   af40c:	a90363f7 	stp	x23, x24, [sp, #48]
   af410:	91008018 	add	x24, x0, #0x20
   af414:	aa1803e0 	mov	x0, x24
   af418:	b9000261 	str	w1, [x19]
   af41c:	9101a277 	add	x23, x19, #0x68
   af420:	f900067f 	str	xzr, [x19, #8]
   af424:	39004262 	strb	w2, [x19, #16]
   af428:	b9001663 	str	w3, [x19, #20]
   af42c:	3900627f 	strb	wzr, [x19, #24]
   af430:	97fffc50 	bl	ae570 <CGPIOPin::CGPIOPin()>
   af434:	aa1703e0 	mov	x0, x23
   af438:	97fffc4e 	bl	ae570 <CGPIOPin::CGPIOPin()>
   af43c:	97ffd6a5 	bl	a4ed0 <CMachineInfo::Get()>
   af440:	52800081 	mov	w1, #0x4                   	// #4
   af444:	97ffd58b 	bl	a4a70 <CMachineInfo::GetClockRate(unsigned int) const>
   af448:	b9400261 	ldr	w1, [x19]
   af44c:	29167e60 	stp	w0, wzr, [x19, #176]
   af450:	b900ba7f 	str	wzr, [x19, #184]
   af454:	7100043f 	cmp	w1, #0x1
   af458:	54000668 	b.hi	af524 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x134>  // b.pmore
   af45c:	b9401660 	ldr	w0, [x19, #20]
   af460:	7100081f 	cmp	w0, #0x2
   af464:	54000608 	b.hi	af524 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x134>  // b.pmore
   af468:	2a1403f6 	mov	w22, w20
   af46c:	a9046bf9 	stp	x25, x26, [sp, #64]
   af470:	2a1503fa 	mov	w26, w21
   af474:	8b1606c1 	add	x1, x22, x22, lsl #1
   af478:	90000079 	adrp	x25, bb000 <s_ActLEDInfo+0x1f0>
   af47c:	91200320 	add	x0, x25, #0x800
   af480:	8b1a0021 	add	x1, x1, x26
   af484:	d37df021 	lsl	x1, x1, #3
   af488:	b8616801 	ldr	w1, [x0, x1]
   af48c:	7100d43f 	cmp	w1, #0x35
   af490:	540005e8 	b.hi	af54c <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x15c>  // b.pmore
   af494:	9100c002 	add	x2, x0, #0x30
   af498:	f8767842 	ldr	x2, [x2, x22, lsl #3]
   af49c:	f9000662 	str	x2, [x19, #8]
   af4a0:	b4000622 	cbz	x2, af564 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x174>
   af4a4:	aa1803e0 	mov	x0, x24
   af4a8:	97fffc3e 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   af4ac:	7100029f 	cmp	w20, #0x0
   af4b0:	7a420aa0 	ccmp	w21, #0x2, #0x0, eq	// eq = none
   af4b4:	528000b5 	mov	w21, #0x5                   	// #5
   af4b8:	54000401 	b.ne	af538 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x148>  // b.any
   af4bc:	8b1606d6 	add	x22, x22, x22, lsl #1
   af4c0:	91200339 	add	x25, x25, #0x800
   af4c4:	8b1a02d6 	add	x22, x22, x26
   af4c8:	52800022 	mov	w2, #0x1                   	// #1
   af4cc:	2a1503e1 	mov	w1, w21
   af4d0:	aa1803e0 	mov	x0, x24
   af4d4:	8b160f36 	add	x22, x25, x22, lsl #3
   af4d8:	97fffed6 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   af4dc:	aa1803e0 	mov	x0, x24
   af4e0:	52800041 	mov	w1, #0x2                   	// #2
   af4e4:	97fffe67 	bl	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   af4e8:	b94006c1 	ldr	w1, [x22, #4]
   af4ec:	aa1703e0 	mov	x0, x23
   af4f0:	97fffc2c 	bl	ae5a0 <CGPIOPin::AssignPin(unsigned int)>
   af4f4:	52800022 	mov	w2, #0x1                   	// #1
   af4f8:	2a1503e1 	mov	w1, w21
   af4fc:	aa1703e0 	mov	x0, x23
   af500:	97fffecc 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   af504:	aa1703e0 	mov	x0, x23
   af508:	52800041 	mov	w1, #0x2                   	// #2
   af50c:	97fffe5d 	bl	aee80 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   af510:	b940b260 	ldr	w0, [x19, #176]
   af514:	34000300 	cbz	w0, af574 <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0x184>
   af518:	a9446bf9 	ldp	x25, x26, [sp, #64]
   af51c:	52800020 	mov	w0, #0x1                   	// #1
   af520:	39006260 	strb	w0, [x19, #24]
   af524:	a94153f3 	ldp	x19, x20, [sp, #16]
   af528:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af52c:	a94363f7 	ldp	x23, x24, [sp, #48]
   af530:	a8c57bfd 	ldp	x29, x30, [sp], #80
   af534:	d65f03c0 	ret
   af538:	7100069f 	cmp	w20, #0x1
   af53c:	52800135 	mov	w21, #0x9                   	// #9
   af540:	52800080 	mov	w0, #0x4                   	// #4
   af544:	1a8082b5 	csel	w21, w21, w0, hi	// hi = pmore
   af548:	17ffffdd 	b	af4bc <CI2CMaster::CI2CMaster(unsigned int, bool, unsigned int)+0xcc>
   af54c:	a94153f3 	ldp	x19, x20, [sp, #16]
   af550:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af554:	a94363f7 	ldp	x23, x24, [sp, #48]
   af558:	a9446bf9 	ldp	x25, x26, [sp, #64]
   af55c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   af560:	d65f03c0 	ret
   af564:	91010001 	add	x1, x0, #0x40
   af568:	52800f62 	mov	w2, #0x7b                  	// #123
   af56c:	91014000 	add	x0, x0, #0x50
   af570:	97ffca64 	bl	a1f00 <assertion_failed>
   af574:	91010321 	add	x1, x25, #0x40
   af578:	9101a320 	add	x0, x25, #0x68
   af57c:	528010a2 	mov	w2, #0x85                  	// #133
   af580:	97ffca60 	bl	a1f00 <assertion_failed>
   af584:	d503201f 	nop
   af588:	d503201f 	nop
   af58c:	d503201f 	nop

00000000000af590 <CI2CMaster::Initialize()>:
   af590:	aa0003e1 	mov	x1, x0
   af594:	39406000 	ldrb	w0, [x0, #24]
   af598:	360001a0 	tbz	w0, #0, af5cc <CI2CMaster::Initialize()+0x3c>
   af59c:	39404024 	ldrb	w4, [x1, #16]
   af5a0:	5290d402 	mov	w2, #0x86a0                	// #34464
   af5a4:	72a00022 	movk	w2, #0x1, lsl #16
   af5a8:	b940b023 	ldr	w3, [x1, #176]
   af5ac:	72000084 	ands	w4, w4, #0x1
   af5b0:	52835005 	mov	w5, #0x1a80                	// #6784
   af5b4:	72a000c5 	movk	w5, #0x6, lsl #16
   af5b8:	1a850042 	csel	w2, w2, w5, eq	// eq = none
   af5bc:	f9400424 	ldr	x4, [x1, #8]
   af5c0:	b900b422 	str	w2, [x1, #180]
   af5c4:	1ac20861 	udiv	w1, w3, w2
   af5c8:	b9001481 	str	w1, [x4, #20]
   af5cc:	d65f03c0 	ret

00000000000af5d0 <CI2CMaster::SetClock(unsigned int)>:
   af5d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   af5d4:	910003fd 	mov	x29, sp
   af5d8:	39406002 	ldrb	w2, [x0, #24]
   af5dc:	36000142 	tbz	w2, #0, af604 <CI2CMaster::SetClock(unsigned int)+0x34>
   af5e0:	340001e1 	cbz	w1, af61c <CI2CMaster::SetClock(unsigned int)+0x4c>
   af5e4:	b940b002 	ldr	w2, [x0, #176]
   af5e8:	f9400403 	ldr	x3, [x0, #8]
   af5ec:	b900b401 	str	w1, [x0, #180]
   af5f0:	1ac10840 	udiv	w0, w2, w1
   af5f4:	12003c00 	and	w0, w0, #0xffff
   af5f8:	b9001460 	str	w0, [x3, #20]
   af5fc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   af600:	d65f03c0 	ret
   af604:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   af608:	91200000 	add	x0, x0, #0x800
   af60c:	91010001 	add	x1, x0, #0x40
   af610:	528014a2 	mov	w2, #0xa5                  	// #165
   af614:	91020000 	add	x0, x0, #0x80
   af618:	97ffca3a 	bl	a1f00 <assertion_failed>
   af61c:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   af620:	91200000 	add	x0, x0, #0x800
   af624:	91010001 	add	x1, x0, #0x40
   af628:	52801522 	mov	w2, #0xa9                  	// #169
   af62c:	91024000 	add	x0, x0, #0x90
   af630:	97ffca34 	bl	a1f00 <assertion_failed>
   af634:	d503201f 	nop
   af638:	d503201f 	nop
   af63c:	d503201f 	nop

00000000000af640 <CI2CMaster::Read(unsigned char, void*, unsigned int)>:
   af640:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   af644:	910003fd 	mov	x29, sp
   af648:	a90153f3 	stp	x19, x20, [sp, #16]
   af64c:	aa0003f3 	mov	x19, x0
   af650:	39406000 	ldrb	w0, [x0, #24]
   af654:	a9025bf5 	stp	x21, x22, [sp, #32]
   af658:	36000b60 	tbz	w0, #0, af7c4 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x184>
   af65c:	12001c36 	and	w22, w1, #0xff
   af660:	2a0303f4 	mov	w20, w3
   af664:	f27902df 	tst	x22, #0x80
   af668:	7a400864 	ccmp	w3, #0x0, #0x4, eq	// eq = none
   af66c:	54000c40 	b.eq	af7f4 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x1b4>  // b.none
   af670:	b940ba60 	ldr	w0, [x19, #184]
   af674:	aa0203f5 	mov	x21, x2
   af678:	35000900 	cbnz	w0, af798 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x158>
   af67c:	b4000b15 	cbz	x21, af7dc <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x19c>
   af680:	f9400664 	ldr	x4, [x19, #8]
   af684:	52800403 	mov	w3, #0x20                  	// #32
   af688:	52806042 	mov	w2, #0x302                 	// #770
   af68c:	52901021 	mov	w1, #0x8081                	// #32897
   af690:	aa0403e5 	mov	x5, x4
   af694:	52800000 	mov	w0, #0x0                   	// #0
   af698:	b9000c96 	str	w22, [x4, #12]
   af69c:	b9000083 	str	w3, [x4]
   af6a0:	b9000482 	str	w2, [x4, #4]
   af6a4:	b9000894 	str	w20, [x4, #8]
   af6a8:	b9000081 	str	w1, [x4]
   af6ac:	b8404ca1 	ldr	w1, [x5, #4]!
   af6b0:	37080521 	tbnz	w1, #1, af754 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x114>
   af6b4:	d503201f 	nop
   af6b8:	b94000a2 	ldr	w2, [x5]
   af6bc:	aa0503e7 	mov	x7, x5
   af6c0:	aa1503e1 	mov	x1, x21
   af6c4:	362801a2 	tbz	w2, #5, af6f8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xb8>
   af6c8:	b9401084 	ldr	w4, [x4, #16]
   af6cc:	38001424 	strb	w4, [x1], #1
   af6d0:	f9400664 	ldr	x4, [x19, #8]
   af6d4:	91001085 	add	x5, x4, #0x4
   af6d8:	b9400486 	ldr	w6, [x4, #4]
   af6dc:	aa0503e7 	mov	x7, x5
   af6e0:	372fff46 	tbnz	w6, #5, af6c8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x88>
   af6e4:	4b010294 	sub	w20, w20, w1
   af6e8:	0b010000 	add	w0, w0, w1
   af6ec:	0b150294 	add	w20, w20, w21
   af6f0:	4b150000 	sub	w0, w0, w21
   af6f4:	aa0103f5 	mov	x21, x1
   af6f8:	b94000a1 	ldr	w1, [x5]
   af6fc:	360ffde1 	tbz	w1, #1, af6b8 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x78>
   af700:	350002b4 	cbnz	w20, af754 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x114>
   af704:	b94000e1 	ldr	w1, [x7]
   af708:	364002e1 	tbz	w1, #8, af764 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x124>
   af70c:	52802001 	mov	w1, #0x100                 	// #256
   af710:	12800020 	mov	w0, #0xfffffffe            	// #-2
   af714:	b90000e1 	str	w1, [x7]
   af718:	52800041 	mov	w1, #0x2                   	// #2
   af71c:	b90000e1 	str	w1, [x7]
   af720:	b940ba61 	ldr	w1, [x19, #184]
   af724:	350002c1 	cbnz	w1, af77c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x13c>
   af728:	a94153f3 	ldp	x19, x20, [sp, #16]
   af72c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af730:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af734:	d65f03c0 	ret
   af738:	b9401081 	ldr	w1, [x4, #16]
   af73c:	11000400 	add	w0, w0, #0x1
   af740:	380016a1 	strb	w1, [x21], #1
   af744:	71000694 	subs	w20, w20, #0x1
   af748:	540002c0 	b.eq	af7a0 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x160>  // b.none
   af74c:	f9400664 	ldr	x4, [x19, #8]
   af750:	91001085 	add	x5, x4, #0x4
   af754:	b94000a1 	ldr	w1, [x5]
   af758:	aa0503e7 	mov	x7, x5
   af75c:	372ffee1 	tbnz	w1, #5, af738 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xf8>
   af760:	17ffffe9 	b	af704 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xc4>
   af764:	36480281 	tbz	w1, #9, af7b4 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x174>
   af768:	52800041 	mov	w1, #0x2                   	// #2
   af76c:	b90000e1 	str	w1, [x7]
   af770:	12800040 	mov	w0, #0xfffffffd            	// #-3
   af774:	b940ba61 	ldr	w1, [x19, #184]
   af778:	34fffd81 	cbz	w1, af728 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xe8>
   af77c:	b9003fe0 	str	w0, [sp, #60]
   af780:	97fff670 	bl	ad140 <LeaveCritical>
   af784:	a94153f3 	ldp	x19, x20, [sp, #16]
   af788:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af78c:	b9403fe0 	ldr	w0, [sp, #60]
   af790:	a8c47bfd 	ldp	x29, x30, [sp], #64
   af794:	d65f03c0 	ret
   af798:	97fff63a 	bl	ad080 <EnterCritical>
   af79c:	17ffffb8 	b	af67c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x3c>
   af7a0:	f9400667 	ldr	x7, [x19, #8]
   af7a4:	910010e7 	add	x7, x7, #0x4
   af7a8:	b94000e1 	ldr	w1, [x7]
   af7ac:	3647fdc1 	tbz	w1, #8, af764 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0x124>
   af7b0:	17ffffd7 	b	af70c <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xcc>
   af7b4:	7100029f 	cmp	w20, #0x0
   af7b8:	12800061 	mov	w1, #0xfffffffc            	// #-4
   af7bc:	1a810000 	csel	w0, w0, w1, eq	// eq = none
   af7c0:	17ffffd6 	b	af718 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xd8>
   af7c4:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   af7c8:	91200000 	add	x0, x0, #0x800
   af7cc:	91010001 	add	x1, x0, #0x40
   af7d0:	52801682 	mov	w2, #0xb4                  	// #180
   af7d4:	91020000 	add	x0, x0, #0x80
   af7d8:	97ffc9ca 	bl	a1f00 <assertion_failed>
   af7dc:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   af7e0:	91200000 	add	x0, x0, #0x800
   af7e4:	91010001 	add	x1, x0, #0x40
   af7e8:	52801862 	mov	w2, #0xc3                  	// #195
   af7ec:	91028000 	add	x0, x0, #0xa0
   af7f0:	97ffc9c4 	bl	a1f00 <assertion_failed>
   af7f4:	12800000 	mov	w0, #0xffffffff            	// #-1
   af7f8:	17ffffcc 	b	af728 <CI2CMaster::Read(unsigned char, void*, unsigned int)+0xe8>
   af7fc:	d503201f 	nop

00000000000af800 <CI2CMaster::Write(unsigned char, void const*, unsigned int)>:
   af800:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   af804:	910003fd 	mov	x29, sp
   af808:	a9025bf5 	stp	x21, x22, [sp, #32]
   af80c:	aa0003f6 	mov	x22, x0
   af810:	39406000 	ldrb	w0, [x0, #24]
   af814:	a90153f3 	stp	x19, x20, [sp, #16]
   af818:	360009a0 	tbz	w0, #0, af94c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x14c>
   af81c:	12001c34 	and	w20, w1, #0xff
   af820:	37380a34 	tbnz	w20, #7, af964 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x164>
   af824:	7100007f 	cmp	w3, #0x0
   af828:	aa0203f5 	mov	x21, x2
   af82c:	2a0303f3 	mov	w19, w3
   af830:	fa401840 	ccmp	x2, #0x0, #0x0, ne	// ne = any
   af834:	54000980 	b.eq	af964 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x164>  // b.none
   af838:	b940bac0 	ldr	w0, [x22, #184]
   af83c:	350007c0 	cbnz	w0, af934 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x134>
   af840:	f94006c3 	ldr	x3, [x22, #8]
   af844:	52800401 	mov	w1, #0x20                  	// #32
   af848:	52806040 	mov	w0, #0x302                 	// #770
   af84c:	aa0303e2 	mov	x2, x3
   af850:	b9000c74 	str	w20, [x3, #12]
   af854:	b8004441 	str	w1, [x2], #4
   af858:	b9000460 	str	w0, [x3, #4]
   af85c:	b9000873 	str	w19, [x3, #8]
   af860:	34000733 	cbz	w19, af944 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x144>
   af864:	91004064 	add	x4, x3, #0x10
   af868:	52800014 	mov	w20, #0x0                   	// #0
   af86c:	d503201f 	nop
   af870:	384016a1 	ldrb	w1, [x21], #1
   af874:	11000694 	add	w20, w20, #0x1
   af878:	b9000081 	str	w1, [x4]
   af87c:	71000673 	subs	w19, w19, #0x1
   af880:	7a4f1a82 	ccmp	w20, #0xf, #0x2, ne	// ne = any
   af884:	54ffff69 	b.ls	af870 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x70>  // b.plast
   af888:	52901000 	mov	w0, #0x8080                	// #32896
   af88c:	b9000060 	str	w0, [x3]
   af890:	b9400460 	ldr	w0, [x3, #4]
   af894:	37080180 	tbnz	w0, #1, af8c4 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xc4>
   af898:	350000f3 	cbnz	w19, af8b4 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xb4>
   af89c:	14000008 	b	af8bc <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xbc>
   af8a0:	384016a1 	ldrb	w1, [x21], #1
   af8a4:	11000694 	add	w20, w20, #0x1
   af8a8:	b9001061 	str	w1, [x3, #16]
   af8ac:	71000673 	subs	w19, w19, #0x1
   af8b0:	54000060 	b.eq	af8bc <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xbc>  // b.none
   af8b4:	b9400041 	ldr	w1, [x2]
   af8b8:	3727ff41 	tbnz	w1, #4, af8a0 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xa0>
   af8bc:	b9400041 	ldr	w1, [x2]
   af8c0:	360ffec1 	tbz	w1, #1, af898 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x98>
   af8c4:	b9400460 	ldr	w0, [x3, #4]
   af8c8:	374001c0 	tbnz	w0, #8, af900 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x100>
   af8cc:	37480380 	tbnz	w0, #9, af93c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x13c>
   af8d0:	7100027f 	cmp	w19, #0x0
   af8d4:	12800060 	mov	w0, #0xfffffffc            	// #-4
   af8d8:	1a800294 	csel	w20, w20, w0, eq	// eq = none
   af8dc:	52800040 	mov	w0, #0x2                   	// #2
   af8e0:	b9000460 	str	w0, [x3, #4]
   af8e4:	b940bac0 	ldr	w0, [x22, #184]
   af8e8:	350001a0 	cbnz	w0, af91c <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x11c>
   af8ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af8f0:	2a1403e0 	mov	w0, w20
   af8f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   af8f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af8fc:	d65f03c0 	ret
   af900:	52802000 	mov	w0, #0x100                 	// #256
   af904:	b9000460 	str	w0, [x3, #4]
   af908:	52800040 	mov	w0, #0x2                   	// #2
   af90c:	b9000460 	str	w0, [x3, #4]
   af910:	12800034 	mov	w20, #0xfffffffe            	// #-2
   af914:	b940bac0 	ldr	w0, [x22, #184]
   af918:	34fffea0 	cbz	w0, af8ec <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xec>
   af91c:	97fff609 	bl	ad140 <LeaveCritical>
   af920:	a9425bf5 	ldp	x21, x22, [sp, #32]
   af924:	2a1403e0 	mov	w0, w20
   af928:	a94153f3 	ldp	x19, x20, [sp, #16]
   af92c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   af930:	d65f03c0 	ret
   af934:	97fff5d3 	bl	ad080 <EnterCritical>
   af938:	17ffffc2 	b	af840 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x40>
   af93c:	12800054 	mov	w20, #0xfffffffd            	// #-3
   af940:	17ffffe7 	b	af8dc <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xdc>
   af944:	52800014 	mov	w20, #0x0                   	// #0
   af948:	17ffffd0 	b	af888 <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0x88>
   af94c:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   af950:	91200000 	add	x0, x0, #0x800
   af954:	91010001 	add	x1, x0, #0x40
   af958:	52802082 	mov	w2, #0x104                 	// #260
   af95c:	91020000 	add	x0, x0, #0x80
   af960:	97ffc968 	bl	a1f00 <assertion_failed>
   af964:	12800014 	mov	w20, #0xffffffff            	// #-1
   af968:	17ffffe1 	b	af8ec <CI2CMaster::Write(unsigned char, void const*, unsigned int)+0xec>
   af96c:	d503201f 	nop

00000000000af970 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)>:
   af970:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   af974:	910003fd 	mov	x29, sp
   af978:	a90153f3 	stp	x19, x20, [sp, #16]
   af97c:	aa0003f3 	mov	x19, x0
   af980:	39406000 	ldrb	w0, [x0, #24]
   af984:	36000f80 	tbz	w0, #0, afb74 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x204>
   af988:	a90363f7 	stp	x23, x24, [sp, #48]
   af98c:	12001c38 	and	w24, w1, #0xff
   af990:	373810f8 	tbnz	w24, #7, afbac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x23c>
   af994:	51000460 	sub	w0, w3, #0x1
   af998:	2a0303f7 	mov	w23, w3
   af99c:	71003c1f 	cmp	w0, #0xf
   af9a0:	54001068 	b.hi	afbac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x23c>  // b.pmore
   af9a4:	f100005f 	cmp	x2, #0x0
   af9a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   af9ac:	7a4018a4 	ccmp	w5, #0x0, #0x4, ne	// ne = any
   af9b0:	aa0203f6 	mov	x22, x2
   af9b4:	aa0403f5 	mov	x21, x4
   af9b8:	2a0503f4 	mov	w20, w5
   af9bc:	fa401884 	ccmp	x4, #0x0, #0x4, ne	// ne = any
   af9c0:	54000fa0 	b.eq	afbb4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x244>  // b.none
   af9c4:	b940ba60 	ldr	w0, [x19, #184]
   af9c8:	35000ca0 	cbnz	w0, afb5c <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1ec>
   af9cc:	f9400665 	ldr	x5, [x19, #8]
   af9d0:	52800403 	mov	w3, #0x20                  	// #32
   af9d4:	52806041 	mov	w1, #0x302                 	// #770
   af9d8:	8b3742c4 	add	x4, x22, w23, uxtw
   af9dc:	aa0503e0 	mov	x0, x5
   af9e0:	910040a2 	add	x2, x5, #0x10
   af9e4:	b9000cb8 	str	w24, [x5, #12]
   af9e8:	b8004403 	str	w3, [x0], #4
   af9ec:	b90004a1 	str	w1, [x5, #4]
   af9f0:	b90008b7 	str	w23, [x5, #8]
   af9f4:	d503201f 	nop
   af9f8:	384016c1 	ldrb	w1, [x22], #1
   af9fc:	b9000041 	str	w1, [x2]
   afa00:	eb0402df 	cmp	x22, x4
   afa04:	54ffffa1 	b.ne	af9f8 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x88>  // b.any
   afa08:	52901001 	mov	w1, #0x8080                	// #32896
   afa0c:	b90000a1 	str	w1, [x5]
   afa10:	14000003 	b	afa1c <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xac>
   afa14:	b9400001 	ldr	w1, [x0]
   afa18:	37080061 	tbnz	w1, #1, afa24 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xb4>
   afa1c:	b9400001 	ldr	w1, [x0]
   afa20:	3607ffa1 	tbz	w1, #0, afa14 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xa4>
   afa24:	b90008b4 	str	w20, [x5, #8]
   afa28:	52901020 	mov	w0, #0x8081                	// #32897
   afa2c:	b90000a0 	str	w0, [x5]
   afa30:	b940b660 	ldr	w0, [x19, #180]
   afa34:	34000b00 	cbz	w0, afb94 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x224>
   afa38:	528a8801 	mov	w1, #0x5440                	// #21568
   afa3c:	72a01121 	movk	w1, #0x89, lsl #16
   afa40:	1b0106e1 	madd	w1, w23, w1, w1
   afa44:	1ac00820 	udiv	w0, w1, w0
   afa48:	97ffebde 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   afa4c:	f9400661 	ldr	x1, [x19, #8]
   afa50:	52800000 	mov	w0, #0x0                   	// #0
   afa54:	aa0103e2 	mov	x2, x1
   afa58:	b8404c43 	ldr	w3, [x2, #4]!
   afa5c:	37080523 	tbnz	w3, #1, afb00 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x190>
   afa60:	b9400044 	ldr	w4, [x2]
   afa64:	aa0203e7 	mov	x7, x2
   afa68:	aa1503e3 	mov	x3, x21
   afa6c:	362801a4 	tbz	w4, #5, afaa0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x130>
   afa70:	b9401021 	ldr	w1, [x1, #16]
   afa74:	38001461 	strb	w1, [x3], #1
   afa78:	f9400661 	ldr	x1, [x19, #8]
   afa7c:	91001022 	add	x2, x1, #0x4
   afa80:	b9400426 	ldr	w6, [x1, #4]
   afa84:	aa0203e7 	mov	x7, x2
   afa88:	372fff46 	tbnz	w6, #5, afa70 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x100>
   afa8c:	4b030294 	sub	w20, w20, w3
   afa90:	0b030000 	add	w0, w0, w3
   afa94:	0b150294 	add	w20, w20, w21
   afa98:	4b150000 	sub	w0, w0, w21
   afa9c:	aa0303f5 	mov	x21, x3
   afaa0:	b9400043 	ldr	w3, [x2]
   afaa4:	360ffde3 	tbz	w3, #1, afa60 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0xf0>
   afaa8:	350002d4 	cbnz	w20, afb00 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x190>
   afaac:	b94000e1 	ldr	w1, [x7]
   afab0:	36400301 	tbz	w1, #8, afb10 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1a0>
   afab4:	52802001 	mov	w1, #0x100                 	// #256
   afab8:	12800020 	mov	w0, #0xfffffffe            	// #-2
   afabc:	b90000e1 	str	w1, [x7]
   afac0:	52800041 	mov	w1, #0x2                   	// #2
   afac4:	b90000e1 	str	w1, [x7]
   afac8:	b940ba61 	ldr	w1, [x19, #184]
   afacc:	350002e1 	cbnz	w1, afb28 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1b8>
   afad0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   afad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   afad8:	a94363f7 	ldp	x23, x24, [sp, #48]
   afadc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   afae0:	d65f03c0 	ret
   afae4:	b9401021 	ldr	w1, [x1, #16]
   afae8:	11000400 	add	w0, w0, #0x1
   afaec:	380016a1 	strb	w1, [x21], #1
   afaf0:	71000694 	subs	w20, w20, #0x1
   afaf4:	540002a0 	b.eq	afb48 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1d8>  // b.none
   afaf8:	f9400661 	ldr	x1, [x19, #8]
   afafc:	91001022 	add	x2, x1, #0x4
   afb00:	b9400043 	ldr	w3, [x2]
   afb04:	aa0203e7 	mov	x7, x2
   afb08:	372ffee3 	tbnz	w3, #5, afae4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x174>
   afb0c:	17ffffe8 	b	afaac <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x13c>
   afb10:	364802a1 	tbz	w1, #9, afb64 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1f4>
   afb14:	52800041 	mov	w1, #0x2                   	// #2
   afb18:	b90000e1 	str	w1, [x7]
   afb1c:	12800040 	mov	w0, #0xfffffffd            	// #-3
   afb20:	b940ba61 	ldr	w1, [x19, #184]
   afb24:	34fffd61 	cbz	w1, afad0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x160>
   afb28:	b9004fe0 	str	w0, [sp, #76]
   afb2c:	97fff585 	bl	ad140 <LeaveCritical>
   afb30:	a94153f3 	ldp	x19, x20, [sp, #16]
   afb34:	a9425bf5 	ldp	x21, x22, [sp, #32]
   afb38:	a94363f7 	ldp	x23, x24, [sp, #48]
   afb3c:	b9404fe0 	ldr	w0, [sp, #76]
   afb40:	a8c57bfd 	ldp	x29, x30, [sp], #80
   afb44:	d65f03c0 	ret
   afb48:	f9400667 	ldr	x7, [x19, #8]
   afb4c:	910010e7 	add	x7, x7, #0x4
   afb50:	b94000e1 	ldr	w1, [x7]
   afb54:	3647fde1 	tbz	w1, #8, afb10 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x1a0>
   afb58:	17ffffd7 	b	afab4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x144>
   afb5c:	97fff549 	bl	ad080 <EnterCritical>
   afb60:	17ffff9b 	b	af9cc <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x5c>
   afb64:	7100029f 	cmp	w20, #0x0
   afb68:	12800061 	mov	w1, #0xfffffffc            	// #-4
   afb6c:	1a810000 	csel	w0, w0, w1, eq	// eq = none
   afb70:	17ffffd4 	b	afac0 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x150>
   afb74:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   afb78:	91200000 	add	x0, x0, #0x800
   afb7c:	91010001 	add	x1, x0, #0x40
   afb80:	52802ae2 	mov	w2, #0x157                 	// #343
   afb84:	91020000 	add	x0, x0, #0x80
   afb88:	a9025bf5 	stp	x21, x22, [sp, #32]
   afb8c:	a90363f7 	stp	x23, x24, [sp, #48]
   afb90:	97ffc8dc 	bl	a1f00 <assertion_failed>
   afb94:	90000060 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   afb98:	91200000 	add	x0, x0, #0x800
   afb9c:	91010001 	add	x1, x0, #0x40
   afba0:	528031c2 	mov	w2, #0x18e                 	// #398
   afba4:	9102c000 	add	x0, x0, #0xb0
   afba8:	97ffc8d6 	bl	a1f00 <assertion_failed>
   afbac:	12800000 	mov	w0, #0xffffffff            	// #-1
   afbb0:	17ffffc9 	b	afad4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x164>
   afbb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   afbb8:	12800000 	mov	w0, #0xffffffff            	// #-1
   afbbc:	17ffffc6 	b	afad4 <CI2CMaster::WriteReadRepeatedStart(unsigned char, void const*, unsigned int, void*, unsigned int)+0x164>

00000000000afbc0 <CI2CMaster::~CI2CMaster()>:
   afbc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   afbc4:	910003fd 	mov	x29, sp
   afbc8:	a90153f3 	stp	x19, x20, [sp, #16]
   afbcc:	aa0003f3 	mov	x19, x0
   afbd0:	91008014 	add	x20, x0, #0x20
   afbd4:	f90013f5 	str	x21, [sp, #32]
   afbd8:	9101a015 	add	x21, x0, #0x68
   afbdc:	39406000 	ldrb	w0, [x0, #24]
   afbe0:	37000120 	tbnz	w0, #0, afc04 <CI2CMaster::~CI2CMaster()+0x44>
   afbe4:	f900067f 	str	xzr, [x19, #8]
   afbe8:	aa1503e0 	mov	x0, x21
   afbec:	97fffa59 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   afbf0:	f94013f5 	ldr	x21, [sp, #32]
   afbf4:	aa1403e0 	mov	x0, x20
   afbf8:	a94153f3 	ldp	x19, x20, [sp, #16]
   afbfc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   afc00:	17fffa54 	b	ae550 <CGPIOPin::~CGPIOPin()>
   afc04:	aa1403e0 	mov	x0, x20
   afc08:	52800022 	mov	w2, #0x1                   	// #1
   afc0c:	52800001 	mov	w1, #0x0                   	// #0
   afc10:	97fffd08 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   afc14:	aa1503e0 	mov	x0, x21
   afc18:	52800022 	mov	w2, #0x1                   	// #1
   afc1c:	52800001 	mov	w1, #0x0                   	// #0
   afc20:	97fffd04 	bl	af030 <CGPIOPin::SetMode(TGPIOMode, bool)>
   afc24:	f900067f 	str	xzr, [x19, #8]
   afc28:	aa1503e0 	mov	x0, x21
   afc2c:	3900627f 	strb	wzr, [x19, #24]
   afc30:	97fffa48 	bl	ae550 <CGPIOPin::~CGPIOPin()>
   afc34:	f94013f5 	ldr	x21, [sp, #32]
   afc38:	aa1403e0 	mov	x0, x20
   afc3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   afc40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   afc44:	17fffa43 	b	ae550 <CGPIOPin::~CGPIOPin()>
	...

00000000000afc50 <malloc>:
   afc50:	f00000c2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   afc54:	f945b042 	ldr	x2, [x2, #2912]
   afc58:	aa0003e1 	mov	x1, x0
   afc5c:	f9400040 	ldr	x0, [x2]
   afc60:	91006000 	add	x0, x0, #0x18
   afc64:	17fff00b 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   afc68:	d503201f 	nop
   afc6c:	d503201f 	nop

00000000000afc70 <memalign>:
   afc70:	f101001f 	cmp	x0, #0x40
   afc74:	540000c8 	b.hi	afc8c <memalign+0x1c>  // b.pmore
   afc78:	f00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   afc7c:	f945b000 	ldr	x0, [x0, #2912]
   afc80:	f9400000 	ldr	x0, [x0]
   afc84:	91006000 	add	x0, x0, #0x18
   afc88:	17fff002 	b	abc90 <CHeapAllocator::Allocate(unsigned long)>
   afc8c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   afc90:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   afc94:	91232021 	add	x1, x1, #0x8c8
   afc98:	910003fd 	mov	x29, sp
   afc9c:	91004020 	add	x0, x1, #0x10
   afca0:	52800422 	mov	w2, #0x21                  	// #33
   afca4:	97ffc897 	bl	a1f00 <assertion_failed>
   afca8:	d503201f 	nop
   afcac:	d503201f 	nop

00000000000afcb0 <free>:
   afcb0:	f00000c2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   afcb4:	f945b042 	ldr	x2, [x2, #2912]
   afcb8:	aa0003e1 	mov	x1, x0
   afcbc:	f9400040 	ldr	x0, [x2]
   afcc0:	91006000 	add	x0, x0, #0x18
   afcc4:	17fff07b 	b	abeb0 <CHeapAllocator::Free(void*)>
   afcc8:	d503201f 	nop
   afccc:	d503201f 	nop

00000000000afcd0 <calloc>:
   afcd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   afcd4:	910003fd 	mov	x29, sp
   afcd8:	a90153f3 	stp	x19, x20, [sp, #16]
   afcdc:	9b007c33 	mul	x19, x1, x0
   afce0:	f100027f 	cmp	x19, #0x0
   afce4:	9a9f1673 	csinc	x19, x19, xzr, ne	// ne = any
   afce8:	eb13001f 	cmp	x0, x19
   afcec:	54000208 	b.hi	afd2c <calloc+0x5c>  // b.pmore
   afcf0:	f00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   afcf4:	f945b000 	ldr	x0, [x0, #2912]
   afcf8:	aa1303e1 	mov	x1, x19
   afcfc:	f9400000 	ldr	x0, [x0]
   afd00:	91006000 	add	x0, x0, #0x18
   afd04:	97ffefe3 	bl	abc90 <CHeapAllocator::Allocate(unsigned long)>
   afd08:	aa0003f4 	mov	x20, x0
   afd0c:	b4000080 	cbz	x0, afd1c <calloc+0x4c>
   afd10:	aa1303e2 	mov	x2, x19
   afd14:	52800001 	mov	w1, #0x0                   	// #0
   afd18:	97ffed14 	bl	ab168 <memset>
   afd1c:	aa1403e0 	mov	x0, x20
   afd20:	a94153f3 	ldp	x19, x20, [sp, #16]
   afd24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   afd28:	d65f03c0 	ret
   afd2c:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   afd30:	91232021 	add	x1, x1, #0x8c8
   afd34:	9100c020 	add	x0, x1, #0x30
   afd38:	52800622 	mov	w2, #0x31                  	// #49
   afd3c:	97ffc871 	bl	a1f00 <assertion_failed>

00000000000afd40 <realloc>:
   afd40:	f00000c3 	adrp	x3, ca000 <vtable for CLAN7800Device+0x28>
   afd44:	f945b063 	ldr	x3, [x3, #2912]
   afd48:	aa0103e2 	mov	x2, x1
   afd4c:	aa0003e1 	mov	x1, x0
   afd50:	f9400060 	ldr	x0, [x3]
   afd54:	91006000 	add	x0, x0, #0x18
   afd58:	17fff0ae 	b	ac010 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   afd5c:	d503201f 	nop

00000000000afd60 <palloc>:
   afd60:	f00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   afd64:	f945b000 	ldr	x0, [x0, #2912]
   afd68:	f9400000 	ldr	x0, [x0]
   afd6c:	91064000 	add	x0, x0, #0x190
   afd70:	140005b8 	b	b1450 <CPageAllocator::Allocate()>
   afd74:	d503201f 	nop
   afd78:	d503201f 	nop
   afd7c:	d503201f 	nop

00000000000afd80 <pfree>:
   afd80:	f00000c2 	adrp	x2, ca000 <vtable for CLAN7800Device+0x28>
   afd84:	f945b042 	ldr	x2, [x2, #2912]
   afd88:	aa0003e1 	mov	x1, x0
   afd8c:	f9400040 	ldr	x0, [x2]
   afd90:	91064000 	add	x0, x0, #0x190
   afd94:	140005e3 	b	b1520 <CPageAllocator::Free(void*)>
	...

00000000000afda0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   afda0:	29000801 	stp	w1, w2, [x0]
   afda4:	29011404 	stp	w4, w5, [x0, #8]
   afda8:	29021803 	stp	w3, w6, [x0, #16]
   afdac:	f9000c1f 	str	xzr, [x0, #24]
   afdb0:	b900201f 	str	wzr, [x0, #32]
   afdb4:	f900141f 	str	xzr, [x0, #40]
   afdb8:	350008c6 	cbnz	w6, afed0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x130>
   afdbc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   afdc0:	7100005f 	cmp	w2, #0x0
   afdc4:	7a401824 	ccmp	w1, #0x0, #0x4, ne	// ne = any
   afdc8:	910003fd 	mov	x29, sp
   afdcc:	a90153f3 	stp	x19, x20, [sp, #16]
   afdd0:	aa0003f3 	mov	x19, x0
   afdd4:	f90013f5 	str	x21, [sp, #32]
   afdd8:	12001cf5 	and	w21, w7, #0xff
   afddc:	54000381 	b.ne	afe4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xac>  // b.any
   afde0:	9100c3f4 	add	x20, sp, #0x30
   afde4:	52800001 	mov	w1, #0x0                   	// #0
   afde8:	aa1403e0 	mov	x0, x20
   afdec:	97ffc86d 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   afdf0:	52800061 	mov	w1, #0x3                   	// #3
   afdf4:	72a00081 	movk	w1, #0x4, lsl #16
   afdf8:	9100e3e2 	add	x2, sp, #0x38
   afdfc:	aa1403e0 	mov	x0, x20
   afe00:	52800004 	mov	w4, #0x0                   	// #0
   afe04:	52800283 	mov	w3, #0x14                  	// #20
   afe08:	97ffc8c6 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   afe0c:	36000120 	tbz	w0, #0, afe30 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x90>
   afe10:	294883e1 	ldp	w1, w0, [sp, #68]
   afe14:	29000261 	stp	w1, w0, [x19]
   afe18:	5280d202 	mov	w2, #0x690                 	// #1680
   afe1c:	510a0023 	sub	w3, w1, #0x280
   afe20:	51078000 	sub	w0, w0, #0x1e0
   afe24:	7136007f 	cmp	w3, #0xd80
   afe28:	7a429002 	ccmp	w0, w2, #0x2, ls	// ls = plast
   afe2c:	54000089 	b.ls	afe3c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x9c>  // b.plast
   afe30:	90000040 	adrp	x0, b7000 <_etext+0x49c8>
   afe34:	fd414000 	ldr	d0, [x0, #640]
   afe38:	fd000260 	str	d0, [x19]
   afe3c:	aa1403e0 	mov	x0, x20
   afe40:	97ffc85c 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   afe44:	b9400a64 	ldr	w4, [x19, #8]
   afe48:	b9401263 	ldr	w3, [x19, #16]
   afe4c:	350002a4 	cbnz	w4, afea0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x100>
   afe50:	29400261 	ldp	w1, w0, [x19]
   afe54:	7100207f 	cmp	w3, #0x8
   afe58:	1b0002a0 	madd	w0, w21, w0, w0
   afe5c:	29010261 	stp	w1, w0, [x19, #8]
   afe60:	54000289 	b.ls	afeb0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x110>  // b.plast
   afe64:	9100c260 	add	x0, x19, #0x30
   afe68:	d2800e02 	mov	x2, #0x70                  	// #112
   afe6c:	90000061 	adrp	x1, bb000 <s_ActLEDInfo+0x1f0>
   afe70:	91244021 	add	x1, x1, #0x910
   afe74:	97ffecd5 	bl	ab1c8 <memcpy>
   afe78:	fd400660 	ldr	d0, [x19, #8]
   afe7c:	29400662 	ldp	w2, w1, [x19]
   afe80:	b9401260 	ldr	w0, [x19, #16]
   afe84:	f94013f5 	ldr	x21, [sp, #32]
   afe88:	29078662 	stp	w2, w1, [x19, #60]
   afe8c:	b9006660 	str	w0, [x19, #100]
   afe90:	fd002a60 	str	d0, [x19, #80]
   afe94:	a94153f3 	ldp	x19, x20, [sp, #16]
   afe98:	a8c57bfd 	ldp	x29, x30, [sp], #80
   afe9c:	d65f03c0 	ret
   afea0:	b9400e60 	ldr	w0, [x19, #12]
   afea4:	34fffd60 	cbz	w0, afe50 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb0>
   afea8:	7100207f 	cmp	w3, #0x8
   afeac:	54fffdc8 	b.hi	afe64 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>  // b.pmore
   afeb0:	d2808280 	mov	x0, #0x414                 	// #1044
   afeb4:	97ffef27 	bl	abb50 <operator new[](unsigned long)>
   afeb8:	f9001660 	str	x0, [x19, #40]
   afebc:	d2808002 	mov	x2, #0x400                 	// #1024
   afec0:	52800001 	mov	w1, #0x0                   	// #0
   afec4:	91005000 	add	x0, x0, #0x14
   afec8:	97ffeca8 	bl	ab168 <memset>
   afecc:	17ffffe6 	b	afe64 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>
   afed0:	d65f03c0 	ret
   afed4:	d503201f 	nop
   afed8:	d503201f 	nop
   afedc:	d503201f 	nop

00000000000afee0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   afee0:	f9401400 	ldr	x0, [x0, #40]
   afee4:	b4000060 	cbz	x0, afef0 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x10>
   afee8:	d2800281 	mov	x1, #0x14                  	// #20
   afeec:	17ffef31 	b	abbb0 <operator delete(void*, unsigned long)>
   afef0:	d65f03c0 	ret
   afef4:	d503201f 	nop
   afef8:	d503201f 	nop
   afefc:	d503201f 	nop

00000000000aff00 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   aff00:	b9401003 	ldr	w3, [x0, #16]
   aff04:	12001c21 	and	w1, w1, #0xff
   aff08:	12003c42 	and	w2, w2, #0xffff
   aff0c:	7100207f 	cmp	w3, #0x8
   aff10:	54000288 	b.hi	aff60 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x60>  // b.pmore
   aff14:	f9401403 	ldr	x3, [x0, #40]
   aff18:	53057c40 	lsr	w0, w2, #5
   aff1c:	530b7c44 	lsr	w4, w2, #11
   aff20:	d37e1c21 	ubfiz	x1, x1, #2, #8
   aff24:	91004021 	add	x1, x1, #0x10
   aff28:	53161400 	ubfiz	w0, w0, #10, #6
   aff2c:	530d1042 	ubfiz	w2, w2, #19, #5
   aff30:	8b010061 	add	x1, x3, x1
   aff34:	32081c00 	orr	w0, w0, #0xff000000
   aff38:	2a040c42 	orr	w2, w2, w4, lsl #3
   aff3c:	2a020003 	orr	w3, w0, w2
   aff40:	2a020002 	orr	w2, w0, w2
   aff44:	d3483c00 	ubfx	x0, x0, #8, #8
   aff48:	39001022 	strb	w2, [x1, #4]
   aff4c:	d3505c62 	ubfx	x2, x3, #16, #8
   aff50:	53187c63 	lsr	w3, w3, #24
   aff54:	39001420 	strb	w0, [x1, #5]
   aff58:	39001822 	strb	w2, [x1, #6]
   aff5c:	39001c23 	strb	w3, [x1, #7]
   aff60:	d65f03c0 	ret
   aff64:	d503201f 	nop
   aff68:	d503201f 	nop
   aff6c:	d503201f 	nop

00000000000aff70 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   aff70:	b9401003 	ldr	w3, [x0, #16]
   aff74:	12001c21 	and	w1, w1, #0xff
   aff78:	7100207f 	cmp	w3, #0x8
   aff7c:	54000188 	b.hi	affac <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x3c>  // b.pmore
   aff80:	f9401400 	ldr	x0, [x0, #40]
   aff84:	d37e1c21 	ubfiz	x1, x1, #2, #8
   aff88:	91004021 	add	x1, x1, #0x10
   aff8c:	d3483c44 	ubfx	x4, x2, #8, #8
   aff90:	8b010000 	add	x0, x0, x1
   aff94:	d3505c43 	ubfx	x3, x2, #16, #8
   aff98:	53187c41 	lsr	w1, w2, #24
   aff9c:	39001002 	strb	w2, [x0, #4]
   affa0:	39001404 	strb	w4, [x0, #5]
   affa4:	39001803 	strb	w3, [x0, #6]
   affa8:	39001c01 	strb	w1, [x0, #7]
   affac:	d65f03c0 	ret

00000000000affb0 <CBcmFrameBuffer::GetWidth() const>:
   affb0:	b9400000 	ldr	w0, [x0]
   affb4:	d65f03c0 	ret
   affb8:	d503201f 	nop
   affbc:	d503201f 	nop

00000000000affc0 <CBcmFrameBuffer::GetHeight() const>:
   affc0:	b9400400 	ldr	w0, [x0, #4]
   affc4:	d65f03c0 	ret
   affc8:	d503201f 	nop
   affcc:	d503201f 	nop

00000000000affd0 <CBcmFrameBuffer::GetVirtWidth() const>:
   affd0:	b9400800 	ldr	w0, [x0, #8]
   affd4:	d65f03c0 	ret
   affd8:	d503201f 	nop
   affdc:	d503201f 	nop

00000000000affe0 <CBcmFrameBuffer::GetVirtHeight() const>:
   affe0:	b9400c00 	ldr	w0, [x0, #12]
   affe4:	d65f03c0 	ret
   affe8:	d503201f 	nop
   affec:	d503201f 	nop

00000000000afff0 <CBcmFrameBuffer::GetPitch() const>:
   afff0:	b9402000 	ldr	w0, [x0, #32]
   afff4:	d65f03c0 	ret
   afff8:	d503201f 	nop
   afffc:	d503201f 	nop

00000000000b0000 <CBcmFrameBuffer::GetDepth() const>:
   b0000:	b9401000 	ldr	w0, [x0, #16]
   b0004:	d65f03c0 	ret
   b0008:	d503201f 	nop
   b000c:	d503201f 	nop

00000000000b0010 <CBcmFrameBuffer::GetBuffer() const>:
   b0010:	b9401800 	ldr	w0, [x0, #24]
   b0014:	d65f03c0 	ret
   b0018:	d503201f 	nop
   b001c:	d503201f 	nop

00000000000b0020 <CBcmFrameBuffer::GetSize() const>:
   b0020:	b9401c00 	ldr	w0, [x0, #28]
   b0024:	d65f03c0 	ret
   b0028:	d503201f 	nop
   b002c:	d503201f 	nop

00000000000b0030 <CBcmFrameBuffer::UpdatePalette()>:
   b0030:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   b0034:	910003fd 	mov	x29, sp
   b0038:	a90153f3 	stp	x19, x20, [sp, #16]
   b003c:	aa0003f3 	mov	x19, x0
   b0040:	b9401000 	ldr	w0, [x0, #16]
   b0044:	7100201f 	cmp	w0, #0x8
   b0048:	540000a9 	b.ls	b005c <CBcmFrameBuffer::UpdatePalette()+0x2c>  // b.plast
   b004c:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0050:	52800020 	mov	w0, #0x1                   	// #1
   b0054:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b0058:	d65f03c0 	ret
   b005c:	f9401662 	ldr	x2, [x19, #40]
   b0060:	52800023 	mov	w3, #0x1                   	// #1
   b0064:	9100a3f4 	add	x20, sp, #0x28
   b0068:	52800001 	mov	w1, #0x0                   	// #0
   b006c:	aa1403e0 	mov	x0, x20
   b0070:	3900305f 	strb	wzr, [x2, #12]
   b0074:	3900345f 	strb	wzr, [x2, #13]
   b0078:	3900385f 	strb	wzr, [x2, #14]
   b007c:	39003c5f 	strb	wzr, [x2, #15]
   b0080:	3900405f 	strb	wzr, [x2, #16]
   b0084:	39004443 	strb	w3, [x2, #17]
   b0088:	3900485f 	strb	wzr, [x2, #18]
   b008c:	39004c5f 	strb	wzr, [x2, #19]
   b0090:	97ffc7c4 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   b0094:	f9401662 	ldr	x2, [x19, #40]
   b0098:	52900161 	mov	w1, #0x800b                	// #32779
   b009c:	72a00081 	movk	w1, #0x4, lsl #16
   b00a0:	aa1403e0 	mov	x0, x20
   b00a4:	52808104 	mov	w4, #0x408                 	// #1032
   b00a8:	52808283 	mov	w3, #0x414                 	// #1044
   b00ac:	97ffc81d 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   b00b0:	36000140 	tbz	w0, #0, b00d8 <CBcmFrameBuffer::UpdatePalette()+0xa8>
   b00b4:	f9401660 	ldr	x0, [x19, #40]
   b00b8:	39403003 	ldrb	w3, [x0, #12]
   b00bc:	39403402 	ldrb	w2, [x0, #13]
   b00c0:	39403801 	ldrb	w1, [x0, #14]
   b00c4:	39403c00 	ldrb	w0, [x0, #15]
   b00c8:	aa022062 	orr	x2, x3, x2, lsl #8
   b00cc:	aa014041 	orr	x1, x2, x1, lsl #16
   b00d0:	aa006020 	orr	x0, x1, x0, lsl #24
   b00d4:	b40000e0 	cbz	x0, b00f0 <CBcmFrameBuffer::UpdatePalette()+0xc0>
   b00d8:	aa1403e0 	mov	x0, x20
   b00dc:	97ffc7b5 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b00e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   b00e4:	52800000 	mov	w0, #0x0                   	// #0
   b00e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b00ec:	d65f03c0 	ret
   b00f0:	aa1403e0 	mov	x0, x20
   b00f4:	97ffc7af 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b00f8:	17ffffd5 	b	b004c <CBcmFrameBuffer::UpdatePalette()+0x1c>
   b00fc:	d503201f 	nop

00000000000b0100 <CBcmFrameBuffer::Initialize()>:
   b0100:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   b0104:	910003fd 	mov	x29, sp
   b0108:	a90153f3 	stp	x19, x20, [sp, #16]
   b010c:	aa0003f3 	mov	x19, x0
   b0110:	b9401400 	ldr	w0, [x0, #20]
   b0114:	52800014 	mov	w20, #0x0                   	// #0
   b0118:	340000a0 	cbz	w0, b012c <CBcmFrameBuffer::Initialize()+0x2c>
   b011c:	2a1403e0 	mov	w0, w20
   b0120:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0124:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b0128:	d65f03c0 	ret
   b012c:	f90013f5 	str	x21, [sp, #32]
   b0130:	9100e3f5 	add	x21, sp, #0x38
   b0134:	aa1503e0 	mov	x0, x21
   b0138:	52800001 	mov	w1, #0x0                   	// #0
   b013c:	97ffc799 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   b0140:	9100c261 	add	x1, x19, #0x30
   b0144:	aa1503e0 	mov	x0, x21
   b0148:	52800e02 	mov	w2, #0x70                  	// #112
   b014c:	97ffc79d 	bl	a1fc0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   b0150:	12001c14 	and	w20, w0, #0xff
   b0154:	360002c0 	tbz	w0, #0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b0158:	b9403e60 	ldr	w0, [x19, #60]
   b015c:	52800014 	mov	w20, #0x0                   	// #0
   b0160:	34000260 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b0164:	b9404260 	ldr	w0, [x19, #64]
   b0168:	34000220 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b016c:	b9405260 	ldr	w0, [x19, #80]
   b0170:	340001e0 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b0174:	b9405660 	ldr	w0, [x19, #84]
   b0178:	340001a0 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b017c:	b9406660 	ldr	w0, [x19, #100]
   b0180:	34000160 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b0184:	b9408a60 	ldr	w0, [x19, #136]
   b0188:	34000120 	cbz	w0, b01ac <CBcmFrameBuffer::Initialize()+0xac>
   b018c:	b9408e63 	ldr	w3, [x19, #140]
   b0190:	12007401 	and	w1, w0, #0x3fffffff
   b0194:	b9409e62 	ldr	w2, [x19, #156]
   b0198:	aa1303e0 	mov	x0, x19
   b019c:	29030e61 	stp	w1, w3, [x19, #24]
   b01a0:	b9002262 	str	w2, [x19, #32]
   b01a4:	97ffffa3 	bl	b0030 <CBcmFrameBuffer::UpdatePalette()>
   b01a8:	12001c14 	and	w20, w0, #0xff
   b01ac:	aa1503e0 	mov	x0, x21
   b01b0:	97ffc780 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b01b4:	f94013f5 	ldr	x21, [sp, #32]
   b01b8:	2a1403e0 	mov	w0, w20
   b01bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   b01c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b01c4:	d65f03c0 	ret
   b01c8:	d503201f 	nop
   b01cc:	d503201f 	nop

00000000000b01d0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   b01d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   b01d4:	910003fd 	mov	x29, sp
   b01d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   b01dc:	9100c3f5 	add	x21, sp, #0x30
   b01e0:	aa1503e0 	mov	x0, x21
   b01e4:	a90153f3 	stp	x19, x20, [sp, #16]
   b01e8:	2a0203f4 	mov	w20, w2
   b01ec:	2a0103f3 	mov	w19, w1
   b01f0:	52800001 	mov	w1, #0x0                   	// #0
   b01f4:	97ffc76b 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   b01f8:	9100e3e2 	add	x2, sp, #0x38
   b01fc:	aa1503e0 	mov	x0, x21
   b0200:	52900121 	mov	w1, #0x8009                	// #32777
   b0204:	72a00081 	movk	w1, #0x4, lsl #16
   b0208:	52800104 	mov	w4, #0x8                   	// #8
   b020c:	52800283 	mov	w3, #0x14                  	// #20
   b0210:	2908d3f3 	stp	w19, w20, [sp, #68]
   b0214:	97ffc7c3 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   b0218:	12001c16 	and	w22, w0, #0xff
   b021c:	360000a0 	tbz	w0, #0, b0230 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x60>
   b0220:	b94047e0 	ldr	w0, [sp, #68]
   b0224:	52800016 	mov	w22, #0x0                   	// #0
   b0228:	6b13001f 	cmp	w0, w19
   b022c:	54000100 	b.eq	b024c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x7c>  // b.none
   b0230:	aa1503e0 	mov	x0, x21
   b0234:	97ffc75f 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b0238:	a94153f3 	ldp	x19, x20, [sp, #16]
   b023c:	2a1603e0 	mov	w0, w22
   b0240:	a9425bf5 	ldp	x21, x22, [sp, #32]
   b0244:	a8c57bfd 	ldp	x29, x30, [sp], #80
   b0248:	d65f03c0 	ret
   b024c:	b9404be0 	ldr	w0, [sp, #72]
   b0250:	6b14001f 	cmp	w0, w20
   b0254:	aa1503e0 	mov	x0, x21
   b0258:	1a9f17f6 	cset	w22, eq	// eq = none
   b025c:	97ffc755 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b0260:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0264:	2a1603e0 	mov	w0, w22
   b0268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   b026c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   b0270:	d65f03c0 	ret
   b0274:	d503201f 	nop
   b0278:	d503201f 	nop
   b027c:	d503201f 	nop

00000000000b0280 <CBcmFrameBuffer::WaitForVerticalSync()>:
   b0280:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   b0284:	52800001 	mov	w1, #0x0                   	// #0
   b0288:	910003fd 	mov	x29, sp
   b028c:	a90153f3 	stp	x19, x20, [sp, #16]
   b0290:	9100a3f3 	add	x19, sp, #0x28
   b0294:	aa1303e0 	mov	x0, x19
   b0298:	97ffc742 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   b029c:	9100c3e2 	add	x2, sp, #0x30
   b02a0:	52800004 	mov	w4, #0x0                   	// #0
   b02a4:	52800203 	mov	w3, #0x10                  	// #16
   b02a8:	529001c1 	mov	w1, #0x800e                	// #32782
   b02ac:	72a00081 	movk	w1, #0x4, lsl #16
   b02b0:	aa1303e0 	mov	x0, x19
   b02b4:	97ffc79b 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   b02b8:	2a0003f4 	mov	w20, w0
   b02bc:	aa1303e0 	mov	x0, x19
   b02c0:	97ffc73c 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b02c4:	2a1403e0 	mov	w0, w20
   b02c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   b02cc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b02d0:	d65f03c0 	ret
   b02d4:	d503201f 	nop
   b02d8:	d503201f 	nop
   b02dc:	d503201f 	nop

00000000000b02e0 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   b02e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   b02e4:	910003fd 	mov	x29, sp
   b02e8:	a90153f3 	stp	x19, x20, [sp, #16]
   b02ec:	9100a3f3 	add	x19, sp, #0x28
   b02f0:	2a0103f4 	mov	w20, w1
   b02f4:	aa1303e0 	mov	x0, x19
   b02f8:	52800001 	mov	w1, #0x0                   	// #0
   b02fc:	97ffc729 	bl	a1fa0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   b0300:	b9003ff4 	str	w20, [sp, #60]
   b0304:	529001e1 	mov	w1, #0x800f                	// #32783
   b0308:	72a00081 	movk	w1, #0x4, lsl #16
   b030c:	9100c3e2 	add	x2, sp, #0x30
   b0310:	52800084 	mov	w4, #0x4                   	// #4
   b0314:	52800203 	mov	w3, #0x10                  	// #16
   b0318:	aa1303e0 	mov	x0, x19
   b031c:	97ffc781 	bl	a2120 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   b0320:	2a0003e1 	mov	w1, w0
   b0324:	aa1303e0 	mov	x0, x19
   b0328:	2a0103f3 	mov	w19, w1
   b032c:	97ffc721 	bl	a1fb0 <CBcmPropertyTags::~CBcmPropertyTags()>
   b0330:	2a1303e0 	mov	w0, w19
   b0334:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0338:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b033c:	d65f03c0 	ret

00000000000b0340 <CBcmFrameBuffer::SetDisplay()>:
   b0340:	d65f03c0 	ret
   b0344:	d503201f 	nop
   b0348:	d503201f 	nop
   b034c:	d503201f 	nop

00000000000b0350 <CBcmFrameBuffer::GetNumDisplays()>:
   b0350:	52800020 	mov	w0, #0x1                   	// #1
   b0354:	d65f03c0 	ret
	...

00000000000b0360 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   b0360:	b9000001 	str	w1, [x0]
   b0364:	39001002 	strb	w2, [x0, #4]
   b0368:	d65f03c0 	ret
   b036c:	d503201f 	nop

00000000000b0370 <CBcmMailBox::~CBcmMailBox()>:
   b0370:	d65f03c0 	ret
   b0374:	d503201f 	nop
   b0378:	d503201f 	nop
   b037c:	d503201f 	nop

00000000000b0380 <CBcmMailBox::WriteRead(unsigned int)>:
   b0380:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   b0384:	910003fd 	mov	x29, sp
   b0388:	a90153f3 	stp	x19, x20, [sp, #16]
   b038c:	aa0003f4 	mov	x20, x0
   b0390:	39401000 	ldrb	w0, [x0, #4]
   b0394:	f90013f5 	str	x21, [sp, #32]
   b0398:	2a0103f5 	mov	w21, w1
   b039c:	37000080 	tbnz	w0, #0, b03ac <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   b03a0:	d00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   b03a4:	b94e2000 	ldr	w0, [x0, #3616]
   b03a8:	35000580 	cbnz	w0, b0458 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   b03ac:	d2971313 	mov	x19, #0xb898                	// #47256
   b03b0:	f2a7e013 	movk	x19, #0x3f00, lsl #16
   b03b4:	b9400260 	ldr	w0, [x19]
   b03b8:	37f00120 	tbnz	w0, #30, b03dc <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   b03bc:	d1006273 	sub	x19, x19, #0x18
   b03c0:	b9400260 	ldr	w0, [x19]
   b03c4:	52800280 	mov	w0, #0x14                  	// #20
   b03c8:	97ffe966 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   b03cc:	d2971302 	mov	x2, #0xb898                	// #47256
   b03d0:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   b03d4:	b9400042 	ldr	w2, [x2]
   b03d8:	36f7ff42 	tbz	w2, #30, b03c0 <CBcmMailBox::WriteRead(unsigned int)+0x40>
   b03dc:	d2971700 	mov	x0, #0xb8b8                	// #47288
   b03e0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   b03e4:	d503201f 	nop
   b03e8:	b9400002 	ldr	w2, [x0]
   b03ec:	37ffffe2 	tbnz	w2, #31, b03e8 <CBcmMailBox::WriteRead(unsigned int)+0x68>
   b03f0:	12000ea1 	and	w1, w21, #0xf
   b03f4:	35000441 	cbnz	w1, b047c <CBcmMailBox::WriteRead(unsigned int)+0xfc>
   b03f8:	b9400281 	ldr	w1, [x20]
   b03fc:	d2971302 	mov	x2, #0xb898                	// #47256
   b0400:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   b0404:	d1006044 	sub	x4, x2, #0x18
   b0408:	2a0102b5 	orr	w21, w21, w1
   b040c:	b81e8015 	stur	w21, [x0, #-24]
   b0410:	b9400280 	ldr	w0, [x20]
   b0414:	d503201f 	nop
   b0418:	b9400041 	ldr	w1, [x2]
   b041c:	37f7ffe1 	tbnz	w1, #30, b0418 <CBcmMailBox::WriteRead(unsigned int)+0x98>
   b0420:	b9400081 	ldr	w1, [x4]
   b0424:	12000c23 	and	w3, w1, #0xf
   b0428:	6b00007f 	cmp	w3, w0
   b042c:	54ffff61 	b.ne	b0418 <CBcmMailBox::WriteRead(unsigned int)+0x98>  // b.any
   b0430:	39401282 	ldrb	w2, [x20, #4]
   b0434:	121c6c20 	and	w0, w1, #0xfffffff0
   b0438:	37000082 	tbnz	w2, #0, b0448 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   b043c:	d00000c1 	adrp	x1, ca000 <vtable for CLAN7800Device+0x28>
   b0440:	b94e2021 	ldr	w1, [x1, #3616]
   b0444:	350000e1 	cbnz	w1, b0460 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   b0448:	a94153f3 	ldp	x19, x20, [sp, #16]
   b044c:	f94013f5 	ldr	x21, [sp, #32]
   b0450:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b0454:	d65f03c0 	ret
   b0458:	97fff30a 	bl	ad080 <EnterCritical>
   b045c:	17ffffd4 	b	b03ac <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   b0460:	b9003fe0 	str	w0, [sp, #60]
   b0464:	97fff337 	bl	ad140 <LeaveCritical>
   b0468:	a94153f3 	ldp	x19, x20, [sp, #16]
   b046c:	f94013f5 	ldr	x21, [sp, #32]
   b0470:	b9403fe0 	ldr	w0, [sp, #60]
   b0474:	a8c47bfd 	ldp	x29, x30, [sp], #64
   b0478:	d65f03c0 	ret
   b047c:	f0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b0480:	f0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b0484:	91036021 	add	x1, x1, #0xd8
   b0488:	9103a000 	add	x0, x0, #0xe8
   b048c:	52800c42 	mov	w2, #0x62                  	// #98
   b0490:	97ffc69c 	bl	a1f00 <assertion_failed>
   b0494:	d503201f 	nop
   b0498:	d503201f 	nop
   b049c:	d503201f 	nop

00000000000b04a0 <CBcmMailBox::Flush()>:
   b04a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b04a4:	910003fd 	mov	x29, sp
   b04a8:	f9000bf3 	str	x19, [sp, #16]
   b04ac:	d2971313 	mov	x19, #0xb898                	// #47256
   b04b0:	f2a7e013 	movk	x19, #0x3f00, lsl #16
   b04b4:	b9400260 	ldr	w0, [x19]
   b04b8:	37f00120 	tbnz	w0, #30, b04dc <CBcmMailBox::Flush()+0x3c>
   b04bc:	d1006273 	sub	x19, x19, #0x18
   b04c0:	b9400260 	ldr	w0, [x19]
   b04c4:	52800280 	mov	w0, #0x14                  	// #20
   b04c8:	97ffe926 	bl	aa960 <CTimer::SimpleMsDelay(unsigned int)>
   b04cc:	d2971300 	mov	x0, #0xb898                	// #47256
   b04d0:	f2a7e000 	movk	x0, #0x3f00, lsl #16
   b04d4:	b9400000 	ldr	w0, [x0]
   b04d8:	36f7ff40 	tbz	w0, #30, b04c0 <CBcmMailBox::Flush()+0x20>
   b04dc:	f9400bf3 	ldr	x19, [sp, #16]
   b04e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b04e4:	d65f03c0 	ret
   b04e8:	d503201f 	nop
   b04ec:	d503201f 	nop

00000000000b04f0 <CBcmMailBox::Read()>:
   b04f0:	b9400003 	ldr	w3, [x0]
   b04f4:	d2971301 	mov	x1, #0xb898                	// #47256
   b04f8:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   b04fc:	d1006024 	sub	x4, x1, #0x18
   b0500:	b9400020 	ldr	w0, [x1]
   b0504:	37f7ffe0 	tbnz	w0, #30, b0500 <CBcmMailBox::Read()+0x10>
   b0508:	b9400080 	ldr	w0, [x4]
   b050c:	12000c02 	and	w2, w0, #0xf
   b0510:	6b03005f 	cmp	w2, w3
   b0514:	54ffff61 	b.ne	b0500 <CBcmMailBox::Read()+0x10>  // b.any
   b0518:	121c6c00 	and	w0, w0, #0xfffffff0
   b051c:	d65f03c0 	ret

00000000000b0520 <CBcmMailBox::Write(unsigned int)>:
   b0520:	d2971703 	mov	x3, #0xb8b8                	// #47288
   b0524:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   b0528:	b9400062 	ldr	w2, [x3]
   b052c:	37ffffe2 	tbnz	w2, #31, b0528 <CBcmMailBox::Write(unsigned int)+0x8>
   b0530:	12000c22 	and	w2, w1, #0xf
   b0534:	350000a2 	cbnz	w2, b0548 <CBcmMailBox::Write(unsigned int)+0x28>
   b0538:	b9400000 	ldr	w0, [x0]
   b053c:	2a000021 	orr	w1, w1, w0
   b0540:	b81e8061 	stur	w1, [x3, #-24]
   b0544:	d65f03c0 	ret
   b0548:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b054c:	f0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b0550:	f0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b0554:	910003fd 	mov	x29, sp
   b0558:	91036021 	add	x1, x1, #0xd8
   b055c:	9103a000 	add	x0, x0, #0xe8
   b0560:	52800c42 	mov	w2, #0x62                  	// #98
   b0564:	97ffc667 	bl	a1f00 <assertion_failed>
	...

00000000000b0570 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   b0570:	d00000c0 	adrp	x0, ca000 <vtable for CLAN7800Device+0x28>
   b0574:	b90e201f 	str	wzr, [x0, #3616]
   b0578:	d65f03c0 	ret
   b057c:	00000000 	udf	#0

00000000000b0580 <CCharGenerator::CCharGenerator()>:
   b0580:	52800101 	mov	w1, #0x8                   	// #8
   b0584:	b9000001 	str	w1, [x0]
   b0588:	d65f03c0 	ret
   b058c:	d503201f 	nop

00000000000b0590 <CCharGenerator::~CCharGenerator()>:
   b0590:	d65f03c0 	ret
   b0594:	d503201f 	nop
   b0598:	d503201f 	nop
   b059c:	d503201f 	nop

00000000000b05a0 <CCharGenerator::GetCharWidth() const>:
   b05a0:	b9400000 	ldr	w0, [x0]
   b05a4:	d65f03c0 	ret
   b05a8:	d503201f 	nop
   b05ac:	d503201f 	nop

00000000000b05b0 <CCharGenerator::GetCharHeight() const>:
   b05b0:	52800260 	mov	w0, #0x13                  	// #19
   b05b4:	d65f03c0 	ret
   b05b8:	d503201f 	nop
   b05bc:	d503201f 	nop

00000000000b05c0 <CCharGenerator::GetUnderline() const>:
   b05c0:	52800200 	mov	w0, #0x10                  	// #16
   b05c4:	d65f03c0 	ret
   b05c8:	d503201f 	nop
   b05cc:	d503201f 	nop

00000000000b05d0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   b05d0:	12001c21 	and	w1, w1, #0xff
   b05d4:	51008421 	sub	w1, w1, #0x21
   b05d8:	7103783f 	cmp	w1, #0xde
   b05dc:	54000208 	b.hi	b061c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x4c>  // b.pmore
   b05e0:	b9400000 	ldr	w0, [x0]
   b05e4:	6b02001f 	cmp	w0, w2
   b05e8:	540001e9 	b.ls	b0624 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>  // b.plast
   b05ec:	71003c7f 	cmp	w3, #0xf
   b05f0:	52800000 	mov	w0, #0x0                   	// #0
   b05f4:	54000168 	b.hi	b0620 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>  // b.pmore
   b05f8:	f0000040 	adrp	x0, bb000 <s_ActLEDInfo+0x1f0>
   b05fc:	91260000 	add	x0, x0, #0x980
   b0600:	8b215001 	add	x1, x0, w1, uxtw #4
   b0604:	52801000 	mov	w0, #0x80                  	// #128
   b0608:	1ac22800 	asr	w0, w0, w2
   b060c:	38634821 	ldrb	w1, [x1, w3, uxtw]
   b0610:	6a00003f 	tst	w1, w0
   b0614:	1a9f07e0 	cset	w0, ne	// ne = any
   b0618:	d65f03c0 	ret
   b061c:	52800000 	mov	w0, #0x0                   	// #0
   b0620:	d65f03c0 	ret
   b0624:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0628:	f0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b062c:	f0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b0630:	910003fd 	mov	x29, sp
   b0634:	91040021 	add	x1, x1, #0x100
   b0638:	91046000 	add	x0, x0, #0x118
   b063c:	528009c2 	mov	w2, #0x4e                  	// #78
   b0640:	97ffc630 	bl	a1f00 <assertion_failed>
	...

00000000000b0680 <DelayLoop>:
   b0680:	2a0103e1 	mov	w1, w1
   b0684:	2a0203e2 	mov	w2, w2
   b0688:	71000400 	subs	w0, w0, #0x1
   b068c:	54ffffa1 	b.ne	b0680 <DelayLoop>  // b.any
   b0690:	d65f03c0 	ret
	...

00000000000b06a0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   b06a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   b06a4:	910003fd 	mov	x29, sp
   b06a8:	a90153f3 	stp	x19, x20, [sp, #16]
   b06ac:	aa0003f3 	mov	x19, x0
   b06b0:	aa0203f4 	mov	x20, x2
   b06b4:	f90013f5 	str	x21, [sp, #32]
   b06b8:	2a0103f5 	mov	w21, w1
   b06bc:	97ffd205 	bl	a4ed0 <CMachineInfo::Get()>
   b06c0:	2a1503e1 	mov	w1, w21
   b06c4:	97ffd19f 	bl	a4d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   b06c8:	b9000260 	str	w0, [x19]
   b06cc:	7102001f 	cmp	w0, #0x80
   b06d0:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   b06d4:	f9000e74 	str	x20, [x19, #24]
   b06d8:	3900827f 	strb	wzr, [x19, #32]
   b06dc:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   b06e0:	3900e27f 	strb	wzr, [x19, #56]
   b06e4:	54000420 	b.eq	b0768 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc8>  // b.none
   b06e8:	71002c1f 	cmp	w0, #0xb
   b06ec:	54000488 	b.hi	b077c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xdc>  // b.pmore
   b06f0:	52800001 	mov	w1, #0x0                   	// #0
   b06f4:	d28007e0 	mov	x0, #0x3f                  	// #63
   b06f8:	97ffecfa 	bl	abae0 <operator new[](unsigned long, int)>
   b06fc:	91007c02 	add	x2, x0, #0x1f
   b0700:	927be842 	and	x2, x2, #0xffffffffffffffe0
   b0704:	d28ffe03 	mov	x3, #0x7ff0                	// #32752
   b0708:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   b070c:	b9400264 	ldr	w4, [x19]
   b0710:	a9008a60 	stp	x0, x2, [x19, #8]
   b0714:	52800021 	mov	w1, #0x1                   	// #1
   b0718:	52807d00 	mov	w0, #0x3e8                 	// #1000
   b071c:	f9000c5f 	str	xzr, [x2, #24]
   b0720:	1ac42021 	lsl	w1, w1, w4
   b0724:	b9400062 	ldr	w2, [x3]
   b0728:	2a020021 	orr	w1, w1, w2
   b072c:	b9000061 	str	w1, [x3]
   b0730:	97ffe8a4 	bl	aa9c0 <CTimer::SimpleusDelay(unsigned int)>
   b0734:	b9400261 	ldr	w1, [x19]
   b0738:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   b073c:	114fc021 	add	w1, w1, #0x3f0, lsl #12
   b0740:	1101c021 	add	w1, w1, #0x70
   b0744:	53185c21 	lsl	w1, w1, #8
   b0748:	b9000020 	str	w0, [x1]
   b074c:	d503201f 	nop
   b0750:	b9400020 	ldr	w0, [x1]
   b0754:	37ffffe0 	tbnz	w0, #31, b0750 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb0>
   b0758:	a94153f3 	ldp	x19, x20, [sp, #16]
   b075c:	f94013f5 	ldr	x21, [sp, #32]
   b0760:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b0764:	d65f03c0 	ret
   b0768:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b076c:	911dc021 	add	x1, x1, #0x770
   b0770:	91004020 	add	x0, x1, #0x10
   b0774:	52800722 	mov	w2, #0x39                  	// #57
   b0778:	97ffc5e2 	bl	a1f00 <assertion_failed>
   b077c:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0780:	911dc021 	add	x1, x1, #0x770
   b0784:	9100c020 	add	x0, x1, #0x30
   b0788:	52800742 	mov	w2, #0x3a                  	// #58
   b078c:	97ffc5dd 	bl	a1f00 <assertion_failed>

00000000000b0790 <CDMAChannel::~CDMAChannel()>:
   b0790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0794:	910003fd 	mov	x29, sp
   b0798:	f9000bf3 	str	x19, [sp, #16]
   b079c:	aa0003f3 	mov	x19, x0
   b07a0:	b9400000 	ldr	w0, [x0]
   b07a4:	71002c1f 	cmp	w0, #0xb
   b07a8:	54000548 	b.hi	b0850 <CDMAChannel::~CDMAChannel()+0xc0>  // b.pmore
   b07ac:	52800e02 	mov	w2, #0x70                  	// #112
   b07b0:	72a007e2 	movk	w2, #0x3f, lsl #16
   b07b4:	0b020000 	add	w0, w0, w2
   b07b8:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   b07bc:	53185c00 	lsl	w0, w0, #8
   b07c0:	b9000001 	str	w1, [x0]
   b07c4:	b9400263 	ldr	w3, [x19]
   b07c8:	0b020062 	add	w2, w3, w2
   b07cc:	53185c42 	lsl	w2, w2, #8
   b07d0:	b9400041 	ldr	w1, [x2]
   b07d4:	37ffffe1 	tbnz	w1, #31, b07d0 <CDMAChannel::~CDMAChannel()+0x40>
   b07d8:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   b07dc:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   b07e0:	52800021 	mov	w1, #0x1                   	// #1
   b07e4:	1ac32021 	lsl	w1, w1, w3
   b07e8:	b9400043 	ldr	w3, [x2]
   b07ec:	f9400e60 	ldr	x0, [x19, #24]
   b07f0:	0a210061 	bic	w1, w3, w1
   b07f4:	b9000041 	str	w1, [x2]
   b07f8:	f900167f 	str	xzr, [x19, #40]
   b07fc:	b4000120 	cbz	x0, b0820 <CDMAChannel::~CDMAChannel()+0x90>
   b0800:	39408261 	ldrb	w1, [x19, #32]
   b0804:	360000c1 	tbz	w1, #0, b081c <CDMAChannel::~CDMAChannel()+0x8c>
   b0808:	b9400261 	ldr	w1, [x19]
   b080c:	7100303f 	cmp	w1, #0xc
   b0810:	540002a8 	b.hi	b0864 <CDMAChannel::~CDMAChannel()+0xd4>  // b.pmore
   b0814:	11004021 	add	w1, w1, #0x10
   b0818:	97fff5f2 	bl	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   b081c:	f9000e7f 	str	xzr, [x19, #24]
   b0820:	97ffd1ac 	bl	a4ed0 <CMachineInfo::Get()>
   b0824:	b9400261 	ldr	w1, [x19]
   b0828:	97ffd182 	bl	a4e30 <CMachineInfo::FreeDMAChannel(unsigned int)>
   b082c:	f9000a7f 	str	xzr, [x19, #16]
   b0830:	f9400660 	ldr	x0, [x19, #8]
   b0834:	b4000080 	cbz	x0, b0844 <CDMAChannel::~CDMAChannel()+0xb4>
   b0838:	f9400bf3 	ldr	x19, [sp, #16]
   b083c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0840:	17ffecd4 	b	abb90 <operator delete[](void*)>
   b0844:	f9400bf3 	ldr	x19, [sp, #16]
   b0848:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b084c:	d65f03c0 	ret
   b0850:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0854:	911dc021 	add	x1, x1, #0x770
   b0858:	9100c020 	add	x0, x1, #0x30
   b085c:	52800c42 	mov	w2, #0x62                  	// #98
   b0860:	97ffc5a8 	bl	a1f00 <assertion_failed>
   b0864:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0868:	911dc021 	add	x1, x1, #0x770
   b086c:	91014020 	add	x0, x1, #0x50
   b0870:	52800e82 	mov	w2, #0x74                  	// #116
   b0874:	97ffc5a3 	bl	a1f00 <assertion_failed>
   b0878:	d503201f 	nop
   b087c:	d503201f 	nop

00000000000b0880 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   b0880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0884:	910003fd 	mov	x29, sp
   b0888:	a90153f3 	stp	x19, x20, [sp, #16]
   b088c:	b40009a1 	cbz	x1, b09c0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x140>
   b0890:	b4000a22 	cbz	x2, b09d4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x154>
   b0894:	aa0303f3 	mov	x19, x3
   b0898:	b4000a83 	cbz	x3, b09e8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x168>
   b089c:	71003c9f 	cmp	w4, #0xf
   b08a0:	54000ae8 	b.hi	b09fc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x17c>  // b.pmore
   b08a4:	f9400806 	ldr	x6, [x0, #16]
   b08a8:	aa0003e7 	mov	x7, x0
   b08ac:	b4000b26 	cbz	x6, b0a10 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x190>
   b08b0:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   b08b4:	eb00007f 	cmp	x3, x0
   b08b8:	54000b68 	b.hi	b0a24 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1a4>  // b.pmore
   b08bc:	b94000e0 	ldr	w0, [x7]
   b08c0:	528e0403 	mov	w3, #0x7020                	// #28704
   b08c4:	72a7e003 	movk	w3, #0x3f00, lsl #16
   b08c8:	aa0103f4 	mov	x20, x1
   b08cc:	d29fffe1 	mov	x1, #0xffff                	// #65535
   b08d0:	0b002060 	add	w0, w3, w0, lsl #8
   b08d4:	b9400000 	ldr	w0, [x0]
   b08d8:	72040000 	ands	w0, w0, #0x10000000
   b08dc:	fa411260 	ccmp	x19, x1, #0x0, ne	// ne = any
   b08e0:	54000ac8 	b.hi	b0a38 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1b8>  // b.pmore
   b08e4:	5280660e 	mov	w14, #0x330                 	// #816
   b08e8:	32020441 	orr	w1, w2, #0xc0000000
   b08ec:	2a0431c4 	orr	w4, w14, w4, lsl #12
   b08f0:	32020680 	orr	w0, w20, #0xc0000000
   b08f4:	53187c21 	lsr	w1, w1, #24
   b08f8:	53083c4d 	ubfx	w13, w2, #8, #8
   b08fc:	53087c90 	lsr	w16, w4, #8
   b0900:	d3505c8f 	ubfx	x15, x4, #16, #8
   b0904:	53187c00 	lsr	w0, w0, #24
   b0908:	53187c84 	lsr	w4, w4, #24
   b090c:	53105c4c 	ubfx	w12, w2, #16, #8
   b0910:	53083e8b 	ubfx	w11, w20, #8, #8
   b0914:	53105e8a 	ubfx	w10, w20, #16, #8
   b0918:	53083e69 	ubfx	w9, w19, #8, #8
   b091c:	53105e68 	ubfx	w8, w19, #16, #8
   b0920:	53187e63 	lsr	w3, w19, #24
   b0924:	390000ce 	strb	w14, [x6]
   b0928:	12001ca5 	and	w5, w5, #0xff
   b092c:	390004d0 	strb	w16, [x6, #1]
   b0930:	390008cf 	strb	w15, [x6, #2]
   b0934:	39000cc4 	strb	w4, [x6, #3]
   b0938:	390010c2 	strb	w2, [x6, #4]
   b093c:	390014cd 	strb	w13, [x6, #5]
   b0940:	390018cc 	strb	w12, [x6, #6]
   b0944:	39001cc1 	strb	w1, [x6, #7]
   b0948:	390020d4 	strb	w20, [x6, #8]
   b094c:	390024cb 	strb	w11, [x6, #9]
   b0950:	390028ca 	strb	w10, [x6, #10]
   b0954:	39002cc0 	strb	w0, [x6, #11]
   b0958:	390030d3 	strb	w19, [x6, #12]
   b095c:	390034c9 	strb	w9, [x6, #13]
   b0960:	390038c8 	strb	w8, [x6, #14]
   b0964:	39003cc3 	strb	w3, [x6, #15]
   b0968:	390040df 	strb	wzr, [x6, #16]
   b096c:	390044df 	strb	wzr, [x6, #17]
   b0970:	390048df 	strb	wzr, [x6, #18]
   b0974:	39004cdf 	strb	wzr, [x6, #19]
   b0978:	390050df 	strb	wzr, [x6, #20]
   b097c:	390054df 	strb	wzr, [x6, #21]
   b0980:	390058df 	strb	wzr, [x6, #22]
   b0984:	39005cdf 	strb	wzr, [x6, #23]
   b0988:	370000a5 	tbnz	w5, #0, b099c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x11c>
   b098c:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0990:	f90020ff 	str	xzr, [x7, #64]
   b0994:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0998:	d65f03c0 	ret
   b099c:	a9044cf4 	stp	x20, x19, [x7, #64]
   b09a0:	aa0203e0 	mov	x0, x2
   b09a4:	aa1303e1 	mov	x1, x19
   b09a8:	97fff2d6 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   b09ac:	aa1303e1 	mov	x1, x19
   b09b0:	aa1403e0 	mov	x0, x20
   b09b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b09b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b09bc:	17fff2d1 	b	ad500 <CleanAndInvalidateDataCacheRange>
   b09c0:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b09c4:	911dc021 	add	x1, x1, #0x770
   b09c8:	9101a020 	add	x0, x1, #0x68
   b09cc:	528011e2 	mov	w2, #0x8f                  	// #143
   b09d0:	97ffc54c 	bl	a1f00 <assertion_failed>
   b09d4:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b09d8:	911dc021 	add	x1, x1, #0x770
   b09dc:	91020020 	add	x0, x1, #0x80
   b09e0:	52801202 	mov	w2, #0x90                  	// #144
   b09e4:	97ffc547 	bl	a1f00 <assertion_failed>
   b09e8:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b09ec:	911dc021 	add	x1, x1, #0x770
   b09f0:	91024020 	add	x0, x1, #0x90
   b09f4:	52801222 	mov	w2, #0x91                  	// #145
   b09f8:	97ffc542 	bl	a1f00 <assertion_failed>
   b09fc:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0a00:	911dc021 	add	x1, x1, #0x770
   b0a04:	91028020 	add	x0, x1, #0xa0
   b0a08:	52801242 	mov	w2, #0x92                  	// #146
   b0a0c:	97ffc53d 	bl	a1f00 <assertion_failed>
   b0a10:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0a14:	911dc021 	add	x1, x1, #0x770
   b0a18:	9102e020 	add	x0, x1, #0xb8
   b0a1c:	52801282 	mov	w2, #0x94                  	// #148
   b0a20:	97ffc538 	bl	a1f00 <assertion_failed>
   b0a24:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0a28:	911dc021 	add	x1, x1, #0x770
   b0a2c:	91034020 	add	x0, x1, #0xd0
   b0a30:	528012a2 	mov	w2, #0x95                  	// #149
   b0a34:	97ffc533 	bl	a1f00 <assertion_failed>
   b0a38:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0a3c:	911dc021 	add	x1, x1, #0x770
   b0a40:	9103a020 	add	x0, x1, #0xe8
   b0a44:	528012c2 	mov	w2, #0x96                  	// #150
   b0a48:	97ffc52e 	bl	a1f00 <assertion_failed>
   b0a4c:	d503201f 	nop

00000000000b0a50 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)>:
   b0a50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0a54:	aa0003e6 	mov	x6, x0
   b0a58:	aa0103e0 	mov	x0, x1
   b0a5c:	910003fd 	mov	x29, sp
   b0a60:	b40007a1 	cbz	x1, b0b54 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x104>
   b0a64:	aa0303e1 	mov	x1, x3
   b0a68:	b4000803 	cbz	x3, b0b68 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x118>
   b0a6c:	b24077e3 	mov	x3, #0x3fffffff            	// #1073741823
   b0a70:	eb03003f 	cmp	x1, x3
   b0a74:	54000848 	b.hi	b0b7c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x12c>  // b.pmore
   b0a78:	b94000c3 	ldr	w3, [x6]
   b0a7c:	528e0407 	mov	w7, #0x7020                	// #28704
   b0a80:	72a7e007 	movk	w7, #0x3f00, lsl #16
   b0a84:	d29fffe5 	mov	x5, #0xffff                	// #65535
   b0a88:	0b0320e3 	add	w3, w7, w3, lsl #8
   b0a8c:	b9400063 	ldr	w3, [x3]
   b0a90:	72040063 	ands	w3, w3, #0x10000000
   b0a94:	fa451020 	ccmp	x1, x5, #0x0, ne	// ne = any
   b0a98:	54000908 	b.hi	b0bb8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x168>  // b.pmore
   b0a9c:	72005c42 	ands	w2, w2, #0xffffff
   b0aa0:	54000780 	b.eq	b0b90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x140>  // b.none
   b0aa4:	f94008c5 	ldr	x5, [x6, #16]
   b0aa8:	52afc003 	mov	w3, #0x7e000000            	// #2113929216
   b0aac:	0b030042 	add	w2, w2, w3
   b0ab0:	b40007a5 	cbz	x5, b0ba4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned long, TDREQ)+0x154>
   b0ab4:	32020403 	orr	w3, w0, #0xc0000000
   b0ab8:	52808707 	mov	w7, #0x438                 	// #1080
   b0abc:	d3483c90 	ubfx	x16, x4, #8, #8
   b0ac0:	53087cf1 	lsr	w17, w7, #8
   b0ac4:	53187c63 	lsr	w3, w3, #24
   b0ac8:	d3483c4f 	ubfx	x15, x2, #8, #8
   b0acc:	d3505c4e 	ubfx	x14, x2, #16, #8
   b0ad0:	53187c4d 	lsr	w13, w2, #24
   b0ad4:	53083c0c 	ubfx	w12, w0, #8, #8
   b0ad8:	53105c0b 	ubfx	w11, w0, #16, #8
   b0adc:	53083c2a 	ubfx	w10, w1, #8, #8
   b0ae0:	53105c29 	ubfx	w9, w1, #16, #8
   b0ae4:	53187c28 	lsr	w8, w1, #24
   b0ae8:	390000a7 	strb	w7, [x5]
   b0aec:	390004b1 	strb	w17, [x5, #1]
   b0af0:	390008a4 	strb	w4, [x5, #2]
   b0af4:	39000cb0 	strb	w16, [x5, #3]
   b0af8:	390010a2 	strb	w2, [x5, #4]
   b0afc:	390014af 	strb	w15, [x5, #5]
   b0b00:	390018ae 	strb	w14, [x5, #6]
   b0b04:	39001cad 	strb	w13, [x5, #7]
   b0b08:	390020a0 	strb	w0, [x5, #8]
   b0b0c:	390024ac 	strb	w12, [x5, #9]
   b0b10:	390028ab 	strb	w11, [x5, #10]
   b0b14:	39002ca3 	strb	w3, [x5, #11]
   b0b18:	390030a1 	strb	w1, [x5, #12]
   b0b1c:	390034aa 	strb	w10, [x5, #13]
   b0b20:	390038a9 	strb	w9, [x5, #14]
   b0b24:	39003ca8 	strb	w8, [x5, #15]
   b0b28:	390040bf 	strb	wzr, [x5, #16]
   b0b2c:	390044bf 	strb	wzr, [x5, #17]
   b0b30:	390048bf 	strb	wzr, [x5, #18]
   b0b34:	39004cbf 	strb	wzr, [x5, #19]
   b0b38:	390050bf 	strb	wzr, [x5, #20]
   b0b3c:	390054bf 	strb	wzr, [x5, #21]
   b0b40:	390058bf 	strb	wzr, [x5, #22]
   b0b44:	39005cbf 	strb	wzr, [x5, #23]
   b0b48:	a90404c0 	stp	x0, x1, [x6, #64]
   b0b4c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0b50:	17fff26c 	b	ad500 <CleanAndInvalidateDataCacheRange>
   b0b54:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0b58:	911dc021 	add	x1, x1, #0x770
   b0b5c:	9101a020 	add	x0, x1, #0x68
   b0b60:	528017a2 	mov	w2, #0xbd                  	// #189
   b0b64:	97ffc4e7 	bl	a1f00 <assertion_failed>
   b0b68:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0b6c:	911dc021 	add	x1, x1, #0x770
   b0b70:	91024020 	add	x0, x1, #0x90
   b0b74:	528017c2 	mov	w2, #0xbe                  	// #190
   b0b78:	97ffc4e2 	bl	a1f00 <assertion_failed>
   b0b7c:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0b80:	911dc021 	add	x1, x1, #0x770
   b0b84:	91034020 	add	x0, x1, #0xd0
   b0b88:	528017e2 	mov	w2, #0xbf                  	// #191
   b0b8c:	97ffc4dd 	bl	a1f00 <assertion_failed>
   b0b90:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0b94:	911dc021 	add	x1, x1, #0x770
   b0b98:	91050020 	add	x0, x1, #0x140
   b0b9c:	52801882 	mov	w2, #0xc4                  	// #196
   b0ba0:	97ffc4d8 	bl	a1f00 <assertion_failed>
   b0ba4:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0ba8:	911dc021 	add	x1, x1, #0x770
   b0bac:	9102e020 	add	x0, x1, #0xb8
   b0bb0:	528018e2 	mov	w2, #0xc7                  	// #199
   b0bb4:	97ffc4d3 	bl	a1f00 <assertion_failed>
   b0bb8:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0bbc:	911dc021 	add	x1, x1, #0x770
   b0bc0:	9103a020 	add	x0, x1, #0xe8
   b0bc4:	52801802 	mov	w2, #0xc0                  	// #192
   b0bc8:	97ffc4ce 	bl	a1f00 <assertion_failed>
   b0bcc:	d503201f 	nop

00000000000b0bd0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)>:
   b0bd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0bd4:	910003fd 	mov	x29, sp
   b0bd8:	b4000842 	cbz	x2, b0ce0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x110>
   b0bdc:	2a0103e6 	mov	w6, w1
   b0be0:	aa0303e1 	mov	x1, x3
   b0be4:	b4000883 	cbz	x3, b0cf4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x124>
   b0be8:	aa0003e7 	mov	x7, x0
   b0bec:	aa0203e0 	mov	x0, x2
   b0bf0:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   b0bf4:	eb02007f 	cmp	x3, x2
   b0bf8:	54000888 	b.hi	b0d08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x138>  // b.pmore
   b0bfc:	b94000e3 	ldr	w3, [x7]
   b0c00:	528e0405 	mov	w5, #0x7020                	// #28704
   b0c04:	72a7e005 	movk	w5, #0x3f00, lsl #16
   b0c08:	d29fffe2 	mov	x2, #0xffff                	// #65535
   b0c0c:	0b0320a3 	add	w3, w5, w3, lsl #8
   b0c10:	b9400063 	ldr	w3, [x3]
   b0c14:	72040063 	ands	w3, w3, #0x10000000
   b0c18:	fa421020 	ccmp	x1, x2, #0x0, ne	// ne = any
   b0c1c:	54000948 	b.hi	b0d44 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x174>  // b.pmore
   b0c20:	72005cc6 	ands	w6, w6, #0xffffff
   b0c24:	540007c0 	b.eq	b0d1c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x14c>  // b.none
   b0c28:	f94008e5 	ldr	x5, [x7, #16]
   b0c2c:	52afc002 	mov	w2, #0x7e000000            	// #2113929216
   b0c30:	0b0200c6 	add	w6, w6, w2
   b0c34:	b40007e5 	cbz	x5, b0d30 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned long, TDREQ)+0x160>
   b0c38:	52806902 	mov	w2, #0x348                 	// #840
   b0c3c:	32020403 	orr	w3, w0, #0xc0000000
   b0c40:	2a044044 	orr	w4, w2, w4, lsl #16
   b0c44:	53083c0e 	ubfx	w14, w0, #8, #8
   b0c48:	53187c63 	lsr	w3, w3, #24
   b0c4c:	53105c0d 	ubfx	w13, w0, #16, #8
   b0c50:	d3482491 	ubfx	x17, x4, #8, #2
   b0c54:	d3505c90 	ubfx	x16, x4, #16, #8
   b0c58:	53187c8f 	lsr	w15, w4, #24
   b0c5c:	d3483ccc 	ubfx	x12, x6, #8, #8
   b0c60:	d3505ccb 	ubfx	x11, x6, #16, #8
   b0c64:	53187cca 	lsr	w10, w6, #24
   b0c68:	53083c29 	ubfx	w9, w1, #8, #8
   b0c6c:	53105c28 	ubfx	w8, w1, #16, #8
   b0c70:	53187c22 	lsr	w2, w1, #24
   b0c74:	390000a4 	strb	w4, [x5]
   b0c78:	390004b1 	strb	w17, [x5, #1]
   b0c7c:	390008b0 	strb	w16, [x5, #2]
   b0c80:	39000caf 	strb	w15, [x5, #3]
   b0c84:	390010a0 	strb	w0, [x5, #4]
   b0c88:	390014ae 	strb	w14, [x5, #5]
   b0c8c:	390018ad 	strb	w13, [x5, #6]
   b0c90:	39001ca3 	strb	w3, [x5, #7]
   b0c94:	390020a6 	strb	w6, [x5, #8]
   b0c98:	390024ac 	strb	w12, [x5, #9]
   b0c9c:	390028ab 	strb	w11, [x5, #10]
   b0ca0:	39002caa 	strb	w10, [x5, #11]
   b0ca4:	390030a1 	strb	w1, [x5, #12]
   b0ca8:	390034a9 	strb	w9, [x5, #13]
   b0cac:	390038a8 	strb	w8, [x5, #14]
   b0cb0:	39003ca2 	strb	w2, [x5, #15]
   b0cb4:	390040bf 	strb	wzr, [x5, #16]
   b0cb8:	390044bf 	strb	wzr, [x5, #17]
   b0cbc:	390048bf 	strb	wzr, [x5, #18]
   b0cc0:	39004cbf 	strb	wzr, [x5, #19]
   b0cc4:	390050bf 	strb	wzr, [x5, #20]
   b0cc8:	390054bf 	strb	wzr, [x5, #21]
   b0ccc:	390058bf 	strb	wzr, [x5, #22]
   b0cd0:	39005cbf 	strb	wzr, [x5, #23]
   b0cd4:	f90020ff 	str	xzr, [x7, #64]
   b0cd8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0cdc:	17fff209 	b	ad500 <CleanAndInvalidateDataCacheRange>
   b0ce0:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0ce4:	911dc021 	add	x1, x1, #0x770
   b0ce8:	91020020 	add	x0, x1, #0x80
   b0cec:	52801ca2 	mov	w2, #0xe5                  	// #229
   b0cf0:	97ffc484 	bl	a1f00 <assertion_failed>
   b0cf4:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0cf8:	911dc021 	add	x1, x1, #0x770
   b0cfc:	91024020 	add	x0, x1, #0x90
   b0d00:	52801cc2 	mov	w2, #0xe6                  	// #230
   b0d04:	97ffc47f 	bl	a1f00 <assertion_failed>
   b0d08:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0d0c:	911dc021 	add	x1, x1, #0x770
   b0d10:	91034020 	add	x0, x1, #0xd0
   b0d14:	52801ce2 	mov	w2, #0xe7                  	// #231
   b0d18:	97ffc47a 	bl	a1f00 <assertion_failed>
   b0d1c:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0d20:	911dc021 	add	x1, x1, #0x770
   b0d24:	91050020 	add	x0, x1, #0x140
   b0d28:	52801d82 	mov	w2, #0xec                  	// #236
   b0d2c:	97ffc475 	bl	a1f00 <assertion_failed>
   b0d30:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0d34:	911dc021 	add	x1, x1, #0x770
   b0d38:	9102e020 	add	x0, x1, #0xb8
   b0d3c:	52801de2 	mov	w2, #0xef                  	// #239
   b0d40:	97ffc470 	bl	a1f00 <assertion_failed>
   b0d44:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0d48:	911dc021 	add	x1, x1, #0x770
   b0d4c:	9103a020 	add	x0, x1, #0xe8
   b0d50:	52801d02 	mov	w2, #0xe8                  	// #232
   b0d54:	97ffc46b 	bl	a1f00 <assertion_failed>
   b0d58:	d503201f 	nop
   b0d5c:	d503201f 	nop

00000000000b0d60 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   b0d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0d64:	910003fd 	mov	x29, sp
   b0d68:	f9000bf3 	str	x19, [sp, #16]
   b0d6c:	b40009e1 	cbz	x1, b0ea8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x148>
   b0d70:	b4000a62 	cbz	x2, b0ebc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x15c>
   b0d74:	b4000ae3 	cbz	x3, b0ed0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x170>
   b0d78:	aa0003ea 	mov	x10, x0
   b0d7c:	d29fffe0 	mov	x0, #0xffff                	// #65535
   b0d80:	eb00007f 	cmp	x3, x0
   b0d84:	54000b08 	b.hi	b0ee4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x184>  // b.pmore
   b0d88:	34000b84 	cbz	w4, b0ef8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x198>
   b0d8c:	aa0103e9 	mov	x9, x1
   b0d90:	5287ffe1 	mov	w1, #0x3fff                	// #16383
   b0d94:	6b01009f 	cmp	w4, w1
   b0d98:	54000ba8 	b.hi	b0f0c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1ac>  // b.pmore
   b0d9c:	eb0000bf 	cmp	x5, x0
   b0da0:	540007a8 	b.hi	b0e94 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x134>  // b.pmore
   b0da4:	71003cdf 	cmp	w6, #0xf
   b0da8:	54000bc8 	b.hi	b0f20 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1c0>  // b.pmore
   b0dac:	b9400147 	ldr	w7, [x10]
   b0db0:	528e0400 	mov	w0, #0x7020                	// #28704
   b0db4:	72a7e000 	movk	w0, #0x3f00, lsl #16
   b0db8:	0b072007 	add	w7, w0, w7, lsl #8
   b0dbc:	b94000e0 	ldr	w0, [x7]
   b0dc0:	37e00ba0 	tbnz	w0, #28, b0f34 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1d4>
   b0dc4:	f9400947 	ldr	x7, [x10, #16]
   b0dc8:	b4000c07 	cbz	x7, b0f48 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1e8>
   b0dcc:	51000488 	sub	w8, w4, #0x1
   b0dd0:	52806640 	mov	w0, #0x332                 	// #818
   b0dd4:	2a0403e4 	mov	w4, w4
   b0dd8:	2a063006 	orr	w6, w0, w6, lsl #12
   b0ddc:	2a084068 	orr	w8, w3, w8, lsl #16
   b0de0:	32020520 	orr	w0, w9, #0xc0000000
   b0de4:	3202044b 	orr	w11, w2, #0xc0000000
   b0de8:	53087cd3 	lsr	w19, w6, #8
   b0dec:	d3505d0d 	ubfx	x13, x8, #16, #8
   b0df0:	d3505cde 	ubfx	x30, x6, #16, #8
   b0df4:	53187cd2 	lsr	w18, w6, #24
   b0df8:	9b037c81 	mul	x1, x4, x3
   b0dfc:	53083cac 	ubfx	w12, w5, #8, #8
   b0e00:	53187c04 	lsr	w4, w0, #24
   b0e04:	53083c6e 	ubfx	w14, w3, #8, #8
   b0e08:	53187d08 	lsr	w8, w8, #24
   b0e0c:	53187d6b 	lsr	w11, w11, #24
   b0e10:	53083c51 	ubfx	w17, w2, #8, #8
   b0e14:	53105c50 	ubfx	w16, w2, #16, #8
   b0e18:	53083d2f 	ubfx	w15, w9, #8, #8
   b0e1c:	390000e6 	strb	w6, [x7]
   b0e20:	53105d26 	ubfx	w6, w9, #16, #8
   b0e24:	390004f3 	strb	w19, [x7, #1]
   b0e28:	aa0203e0 	mov	x0, x2
   b0e2c:	390008fe 	strb	w30, [x7, #2]
   b0e30:	39000cf2 	strb	w18, [x7, #3]
   b0e34:	390010e2 	strb	w2, [x7, #4]
   b0e38:	390014f1 	strb	w17, [x7, #5]
   b0e3c:	390018f0 	strb	w16, [x7, #6]
   b0e40:	39001ceb 	strb	w11, [x7, #7]
   b0e44:	390020e9 	strb	w9, [x7, #8]
   b0e48:	390024ef 	strb	w15, [x7, #9]
   b0e4c:	390028e6 	strb	w6, [x7, #10]
   b0e50:	39002ce4 	strb	w4, [x7, #11]
   b0e54:	390030e3 	strb	w3, [x7, #12]
   b0e58:	390034ee 	strb	w14, [x7, #13]
   b0e5c:	390038ed 	strb	w13, [x7, #14]
   b0e60:	39003ce8 	strb	w8, [x7, #15]
   b0e64:	390040ff 	strb	wzr, [x7, #16]
   b0e68:	390044ff 	strb	wzr, [x7, #17]
   b0e6c:	390048e5 	strb	w5, [x7, #18]
   b0e70:	39004cec 	strb	w12, [x7, #19]
   b0e74:	390050ff 	strb	wzr, [x7, #20]
   b0e78:	390054ff 	strb	wzr, [x7, #21]
   b0e7c:	390058ff 	strb	wzr, [x7, #22]
   b0e80:	39005cff 	strb	wzr, [x7, #23]
   b0e84:	f9400bf3 	ldr	x19, [sp, #16]
   b0e88:	f900215f 	str	xzr, [x10, #64]
   b0e8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0e90:	17fff19c 	b	ad500 <CleanAndInvalidateDataCacheRange>
   b0e94:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0e98:	911dc021 	add	x1, x1, #0x770
   b0e9c:	9106a020 	add	x0, x1, #0x1a8
   b0ea0:	528022a2 	mov	w2, #0x115                 	// #277
   b0ea4:	97ffc417 	bl	a1f00 <assertion_failed>
   b0ea8:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0eac:	911dc021 	add	x1, x1, #0x770
   b0eb0:	9101a020 	add	x0, x1, #0x68
   b0eb4:	528021e2 	mov	w2, #0x10f                 	// #271
   b0eb8:	97ffc412 	bl	a1f00 <assertion_failed>
   b0ebc:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0ec0:	911dc021 	add	x1, x1, #0x770
   b0ec4:	91020020 	add	x0, x1, #0x80
   b0ec8:	52802202 	mov	w2, #0x110                 	// #272
   b0ecc:	97ffc40d 	bl	a1f00 <assertion_failed>
   b0ed0:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0ed4:	911dc021 	add	x1, x1, #0x770
   b0ed8:	91054020 	add	x0, x1, #0x150
   b0edc:	52802222 	mov	w2, #0x111                 	// #273
   b0ee0:	97ffc408 	bl	a1f00 <assertion_failed>
   b0ee4:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0ee8:	911dc021 	add	x1, x1, #0x770
   b0eec:	9105a020 	add	x0, x1, #0x168
   b0ef0:	52802242 	mov	w2, #0x112                 	// #274
   b0ef4:	97ffc403 	bl	a1f00 <assertion_failed>
   b0ef8:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0efc:	911dc021 	add	x1, x1, #0x770
   b0f00:	91060020 	add	x0, x1, #0x180
   b0f04:	52802262 	mov	w2, #0x113                 	// #275
   b0f08:	97ffc3fe 	bl	a1f00 <assertion_failed>
   b0f0c:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0f10:	911dc021 	add	x1, x1, #0x770
   b0f14:	91064020 	add	x0, x1, #0x190
   b0f18:	52802282 	mov	w2, #0x114                 	// #276
   b0f1c:	97ffc3f9 	bl	a1f00 <assertion_failed>
   b0f20:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0f24:	911dc021 	add	x1, x1, #0x770
   b0f28:	91028020 	add	x0, x1, #0xa0
   b0f2c:	528022c2 	mov	w2, #0x116                 	// #278
   b0f30:	97ffc3f4 	bl	a1f00 <assertion_failed>
   b0f34:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0f38:	911dc021 	add	x1, x1, #0x770
   b0f3c:	91070020 	add	x0, x1, #0x1c0
   b0f40:	52802302 	mov	w2, #0x118                 	// #280
   b0f44:	97ffc3ef 	bl	a1f00 <assertion_failed>
   b0f48:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0f4c:	911dc021 	add	x1, x1, #0x770
   b0f50:	9102e020 	add	x0, x1, #0xb8
   b0f54:	52802342 	mov	w2, #0x11a                 	// #282
   b0f58:	97ffc3ea 	bl	a1f00 <assertion_failed>
   b0f5c:	d503201f 	nop

00000000000b0f60 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   b0f60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   b0f64:	910003fd 	mov	x29, sp
   b0f68:	a90153f3 	stp	x19, x20, [sp, #16]
   b0f6c:	aa0103f4 	mov	x20, x1
   b0f70:	b9400001 	ldr	w1, [x0]
   b0f74:	f90013f5 	str	x21, [sp, #32]
   b0f78:	7100303f 	cmp	w1, #0xc
   b0f7c:	540002c8 	b.hi	b0fd4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>  // b.pmore
   b0f80:	aa0003f3 	mov	x19, x0
   b0f84:	f9400c00 	ldr	x0, [x0, #24]
   b0f88:	b4000300 	cbz	x0, b0fe8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x88>
   b0f8c:	aa0203f5 	mov	x21, x2
   b0f90:	39408262 	ldrb	w2, [x19, #32]
   b0f94:	36000102 	tbz	w2, #0, b0fb4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x54>
   b0f98:	f9001674 	str	x20, [x19, #40]
   b0f9c:	b4000314 	cbz	x20, b0ffc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   b0fa0:	f9001a75 	str	x21, [x19, #48]
   b0fa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0fa8:	f94013f5 	ldr	x21, [sp, #32]
   b0fac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b0fb0:	d65f03c0 	ret
   b0fb4:	11004021 	add	w1, w1, #0x10
   b0fb8:	aa1303e3 	mov	x3, x19
   b0fbc:	b0000002 	adrp	x2, b1000 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa0>
   b0fc0:	910e0042 	add	x2, x2, #0x380
   b0fc4:	97fff3bb 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   b0fc8:	52800020 	mov	w0, #0x1                   	// #1
   b0fcc:	39008260 	strb	w0, [x19, #32]
   b0fd0:	17fffff2 	b	b0f98 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x38>
   b0fd4:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0fd8:	911dc021 	add	x1, x1, #0x770
   b0fdc:	9107e020 	add	x0, x1, #0x1f8
   b0fe0:	52802722 	mov	w2, #0x139                 	// #313
   b0fe4:	97ffc3c7 	bl	a1f00 <assertion_failed>
   b0fe8:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b0fec:	911dc021 	add	x1, x1, #0x770
   b0ff0:	91086020 	add	x0, x1, #0x218
   b0ff4:	52802742 	mov	w2, #0x13a                 	// #314
   b0ff8:	97ffc3c2 	bl	a1f00 <assertion_failed>
   b0ffc:	90000061 	adrp	x1, bc000 <font_data+0x680>
   b1000:	911dc021 	add	x1, x1, #0x770
   b1004:	9108c020 	add	x0, x1, #0x230
   b1008:	52802882 	mov	w2, #0x144                 	// #324
   b100c:	97ffc3bd 	bl	a1f00 <assertion_failed>

00000000000b1010 <CDMAChannel::Start()>:
   b1010:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b1014:	910003fd 	mov	x29, sp
   b1018:	b9400002 	ldr	w2, [x0]
   b101c:	a90153f3 	stp	x19, x20, [sp, #16]
   b1020:	71002c5f 	cmp	w2, #0xb
   b1024:	54000748 	b.hi	b110c <CDMAChannel::Start()+0xfc>  // b.pmore
   b1028:	aa0003f3 	mov	x19, x0
   b102c:	f9400800 	ldr	x0, [x0, #16]
   b1030:	b4000780 	cbz	x0, b1120 <CDMAChannel::Start()+0x110>
   b1034:	f9401661 	ldr	x1, [x19, #40]
   b1038:	b4000281 	cbz	x1, b1088 <CDMAChannel::Start()+0x78>
   b103c:	f9400e61 	ldr	x1, [x19, #24]
   b1040:	b40008e1 	cbz	x1, b115c <CDMAChannel::Start()+0x14c>
   b1044:	39408261 	ldrb	w1, [x19, #32]
   b1048:	36000581 	tbz	w1, #0, b10f8 <CDMAChannel::Start()+0xe8>
   b104c:	39400005 	ldrb	w5, [x0]
   b1050:	39400404 	ldrb	w4, [x0, #1]
   b1054:	39400803 	ldrb	w3, [x0, #2]
   b1058:	39400c01 	ldrb	w1, [x0, #3]
   b105c:	aa0420a4 	orr	x4, x5, x4, lsl #8
   b1060:	aa034083 	orr	x3, x4, x3, lsl #16
   b1064:	aa016061 	orr	x1, x3, x1, lsl #24
   b1068:	32000023 	orr	w3, w1, #0x1
   b106c:	39000003 	strb	w3, [x0]
   b1070:	53083c24 	ubfx	w4, w1, #8, #8
   b1074:	53105c23 	ubfx	w3, w1, #16, #8
   b1078:	d358dc21 	ubfx	x1, x1, #24, #32
   b107c:	39000404 	strb	w4, [x0, #1]
   b1080:	39000803 	strb	w3, [x0, #2]
   b1084:	39000c01 	strb	w1, [x0, #3]
   b1088:	52800e14 	mov	w20, #0x70                  	// #112
   b108c:	72a007f4 	movk	w20, #0x3f, lsl #16
   b1090:	0b140041 	add	w1, w2, w20
   b1094:	53185c23 	lsl	w3, w1, #8
   b1098:	aa0303e1 	mov	x1, x3
   b109c:	b9400063 	ldr	w3, [x3]
   b10a0:	371004a3 	tbnz	w3, #2, b1134 <CDMAChannel::Start()+0x124>
   b10a4:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   b10a8:	f2a7e004 	movk	x4, #0x3f00, lsl #16
   b10ac:	52800023 	mov	w3, #0x1                   	// #1
   b10b0:	1ac22062 	lsl	w2, w3, w2
   b10b4:	b9400083 	ldr	w3, [x4]
   b10b8:	6a03005f 	tst	w2, w3
   b10bc:	54000461 	b.ne	b1148 <CDMAChannel::Start()+0x138>  // b.any
   b10c0:	11001022 	add	w2, w1, #0x4
   b10c4:	32020403 	orr	w3, w0, #0xc0000000
   b10c8:	d2800401 	mov	x1, #0x20                  	// #32
   b10cc:	b9000043 	str	w3, [x2]
   b10d0:	97fff10c 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   b10d4:	b9400260 	ldr	w0, [x19]
   b10d8:	52800021 	mov	w1, #0x1                   	// #1
   b10dc:	72a21e21 	movk	w1, #0x10f1, lsl #16
   b10e0:	0b140000 	add	w0, w0, w20
   b10e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b10e8:	53185c00 	lsl	w0, w0, #8
   b10ec:	b9000001 	str	w1, [x0]
   b10f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b10f4:	d65f03c0 	ret
   b10f8:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b10fc:	911dc021 	add	x1, x1, #0x770
   b1100:	91094020 	add	x0, x1, #0x250
   b1104:	52802b42 	mov	w2, #0x15a                 	// #346
   b1108:	97ffc37e 	bl	a1f00 <assertion_failed>
   b110c:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1110:	911dc021 	add	x1, x1, #0x770
   b1114:	9100c020 	add	x0, x1, #0x30
   b1118:	52802a82 	mov	w2, #0x154                 	// #340
   b111c:	97ffc379 	bl	a1f00 <assertion_failed>
   b1120:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1124:	911dc021 	add	x1, x1, #0x770
   b1128:	9102e020 	add	x0, x1, #0xb8
   b112c:	52802aa2 	mov	w2, #0x155                 	// #341
   b1130:	97ffc374 	bl	a1f00 <assertion_failed>
   b1134:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1138:	911dc021 	add	x1, x1, #0x770
   b113c:	91098020 	add	x0, x1, #0x260
   b1140:	52802c02 	mov	w2, #0x160                 	// #352
   b1144:	97ffc36f 	bl	a1f00 <assertion_failed>
   b1148:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b114c:	911dc021 	add	x1, x1, #0x770
   b1150:	910a6020 	add	x0, x1, #0x298
   b1154:	52802c22 	mov	w2, #0x161                 	// #353
   b1158:	97ffc36a 	bl	a1f00 <assertion_failed>
   b115c:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1160:	911dc021 	add	x1, x1, #0x770
   b1164:	91086020 	add	x0, x1, #0x218
   b1168:	52802b22 	mov	w2, #0x159                 	// #345
   b116c:	97ffc365 	bl	a1f00 <assertion_failed>

00000000000b1170 <CDMAChannel::Wait()>:
   b1170:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b1174:	910003fd 	mov	x29, sp
   b1178:	b9400002 	ldr	w2, [x0]
   b117c:	f9000bf3 	str	x19, [sp, #16]
   b1180:	71002c5f 	cmp	w2, #0xb
   b1184:	54000308 	b.hi	b11e4 <CDMAChannel::Wait()+0x74>  // b.pmore
   b1188:	aa0003f3 	mov	x19, x0
   b118c:	f9401400 	ldr	x0, [x0, #40]
   b1190:	b5000340 	cbnz	x0, b11f8 <CDMAChannel::Wait()+0x88>
   b1194:	114fc042 	add	w2, w2, #0x3f0, lsl #12
   b1198:	1101c042 	add	w2, w2, #0x70
   b119c:	53185c42 	lsl	w2, w2, #8
   b11a0:	b9400041 	ldr	w1, [x2]
   b11a4:	3707ffe1 	tbnz	w1, #0, b11a0 <CDMAChannel::Wait()+0x30>
   b11a8:	f9402262 	ldr	x2, [x19, #64]
   b11ac:	d2780021 	eor	x1, x1, #0x100
   b11b0:	53082020 	ubfx	w0, w1, #8, #1
   b11b4:	3900e260 	strb	w0, [x19, #56]
   b11b8:	b5000082 	cbnz	x2, b11c8 <CDMAChannel::Wait()+0x58>
   b11bc:	f9400bf3 	ldr	x19, [sp, #16]
   b11c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b11c4:	d65f03c0 	ret
   b11c8:	f9402661 	ldr	x1, [x19, #72]
   b11cc:	aa0203e0 	mov	x0, x2
   b11d0:	97fff0cc 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   b11d4:	3940e260 	ldrb	w0, [x19, #56]
   b11d8:	f9400bf3 	ldr	x19, [sp, #16]
   b11dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b11e0:	d65f03c0 	ret
   b11e4:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b11e8:	911dc021 	add	x1, x1, #0x770
   b11ec:	9100c020 	add	x0, x1, #0x30
   b11f0:	52802f02 	mov	w2, #0x178                 	// #376
   b11f4:	97ffc343 	bl	a1f00 <assertion_failed>
   b11f8:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b11fc:	911dc021 	add	x1, x1, #0x770
   b1200:	910b4020 	add	x0, x1, #0x2d0
   b1204:	52802f22 	mov	w2, #0x179                 	// #377
   b1208:	97ffc33e 	bl	a1f00 <assertion_failed>
   b120c:	d503201f 	nop

00000000000b1210 <CDMAChannel::GetStatus()>:
   b1210:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b1214:	910003fd 	mov	x29, sp
   b1218:	b9400001 	ldr	w1, [x0]
   b121c:	71002c3f 	cmp	w1, #0xb
   b1220:	54000128 	b.hi	b1244 <CDMAChannel::GetStatus()+0x34>  // b.pmore
   b1224:	114fc021 	add	w1, w1, #0x3f0, lsl #12
   b1228:	1101c021 	add	w1, w1, #0x70
   b122c:	53185c21 	lsl	w1, w1, #8
   b1230:	b9400021 	ldr	w1, [x1]
   b1234:	37000121 	tbnz	w1, #0, b1258 <CDMAChannel::GetStatus()+0x48>
   b1238:	3940e000 	ldrb	w0, [x0, #56]
   b123c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b1240:	d65f03c0 	ret
   b1244:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1248:	911dc021 	add	x1, x1, #0x770
   b124c:	9100c020 	add	x0, x1, #0x30
   b1250:	52803302 	mov	w2, #0x198                 	// #408
   b1254:	97ffc32b 	bl	a1f00 <assertion_failed>
   b1258:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b125c:	911dc021 	add	x1, x1, #0x770
   b1260:	910bc020 	add	x0, x1, #0x2f0
   b1264:	52803322 	mov	w2, #0x199                 	// #409
   b1268:	97ffc326 	bl	a1f00 <assertion_failed>
   b126c:	d503201f 	nop

00000000000b1270 <CDMAChannel::InterruptHandler()>:
   b1270:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b1274:	910003fd 	mov	x29, sp
   b1278:	f9000bf3 	str	x19, [sp, #16]
   b127c:	aa0003f3 	mov	x19, x0
   b1280:	f9402000 	ldr	x0, [x0, #64]
   b1284:	b5000400 	cbnz	x0, b1304 <CDMAChannel::InterruptHandler()+0x94>
   b1288:	b9400261 	ldr	w1, [x19]
   b128c:	71002c3f 	cmp	w1, #0xb
   b1290:	54000448 	b.hi	b1318 <CDMAChannel::InterruptHandler()+0xa8>  // b.pmore
   b1294:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   b1298:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   b129c:	52800020 	mov	w0, #0x1                   	// #1
   b12a0:	1ac12000 	lsl	w0, w0, w1
   b12a4:	b9400041 	ldr	w1, [x2]
   b12a8:	6a01001f 	tst	w0, w1
   b12ac:	54000400 	b.eq	b132c <CDMAChannel::InterruptHandler()+0xbc>  // b.none
   b12b0:	b9000040 	str	w0, [x2]
   b12b4:	b9400260 	ldr	w0, [x19]
   b12b8:	114fc000 	add	w0, w0, #0x3f0, lsl #12
   b12bc:	1101c000 	add	w0, w0, #0x70
   b12c0:	53185c00 	lsl	w0, w0, #8
   b12c4:	b9400001 	ldr	w1, [x0]
   b12c8:	361003c1 	tbz	w1, #2, b1340 <CDMAChannel::InterruptHandler()+0xd0>
   b12cc:	37000441 	tbnz	w1, #0, b1354 <CDMAChannel::InterruptHandler()+0xe4>
   b12d0:	f9401663 	ldr	x3, [x19, #40]
   b12d4:	d2780021 	eor	x1, x1, #0x100
   b12d8:	52800082 	mov	w2, #0x4                   	// #4
   b12dc:	b9000002 	str	w2, [x0]
   b12e0:	53082021 	ubfx	w1, w1, #8, #1
   b12e4:	3900e261 	strb	w1, [x19, #56]
   b12e8:	b4000403 	cbz	x3, b1368 <CDMAChannel::InterruptHandler()+0xf8>
   b12ec:	f9401a62 	ldr	x2, [x19, #48]
   b12f0:	aa0303f0 	mov	x16, x3
   b12f4:	b9400260 	ldr	w0, [x19]
   b12f8:	f9400bf3 	ldr	x19, [sp, #16]
   b12fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b1300:	d61f0200 	br	x16
   b1304:	f9402661 	ldr	x1, [x19, #72]
   b1308:	97fff07e 	bl	ad500 <CleanAndInvalidateDataCacheRange>
   b130c:	b9400261 	ldr	w1, [x19]
   b1310:	71002c3f 	cmp	w1, #0xb
   b1314:	54fffc09 	b.ls	b1294 <CDMAChannel::InterruptHandler()+0x24>  // b.plast
   b1318:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b131c:	911dc021 	add	x1, x1, #0x770
   b1320:	9100c020 	add	x0, x1, #0x30
   b1324:	528034e2 	mov	w2, #0x1a7                 	// #423
   b1328:	97ffc2f6 	bl	a1f00 <assertion_failed>
   b132c:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1330:	911dc021 	add	x1, x1, #0x770
   b1334:	910ca020 	add	x0, x1, #0x328
   b1338:	528035a2 	mov	w2, #0x1ad                 	// #429
   b133c:	97ffc2f1 	bl	a1f00 <assertion_failed>
   b1340:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1344:	911dc021 	add	x1, x1, #0x770
   b1348:	910d0020 	add	x0, x1, #0x340
   b134c:	52803622 	mov	w2, #0x1b1                 	// #433
   b1350:	97ffc2ec 	bl	a1f00 <assertion_failed>
   b1354:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1358:	911dc021 	add	x1, x1, #0x770
   b135c:	910d4020 	add	x0, x1, #0x350
   b1360:	52803642 	mov	w2, #0x1b2                 	// #434
   b1364:	97ffc2e7 	bl	a1f00 <assertion_failed>
   b1368:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b136c:	911dc021 	add	x1, x1, #0x770
   b1370:	9108c020 	add	x0, x1, #0x230
   b1374:	52803722 	mov	w2, #0x1b9                 	// #441
   b1378:	97ffc2e2 	bl	a1f00 <assertion_failed>
   b137c:	d503201f 	nop

00000000000b1380 <CDMAChannel::InterruptStub(void*)>:
   b1380:	b4000040 	cbz	x0, b1388 <CDMAChannel::InterruptStub(void*)+0x8>
   b1384:	17ffffbb 	b	b1270 <CDMAChannel::InterruptHandler()>
   b1388:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b138c:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1390:	911dc021 	add	x1, x1, #0x770
   b1394:	910003fd 	mov	x29, sp
   b1398:	910da020 	add	x0, x1, #0x368
   b139c:	52803802 	mov	w2, #0x1c0                 	// #448
   b13a0:	97ffc2d8 	bl	a1f00 <assertion_failed>
	...

00000000000b13b0 <CPageAllocator::CPageAllocator()>:
   b13b0:	52800021 	mov	w1, #0x1                   	// #1
   b13b4:	a9007c1f 	stp	xzr, xzr, [x0]
   b13b8:	f900081f 	str	xzr, [x0, #16]
   b13bc:	b9001801 	str	w1, [x0, #24]
   b13c0:	d65f03c0 	ret
   b13c4:	d503201f 	nop
   b13c8:	d503201f 	nop
   b13cc:	d503201f 	nop

00000000000b13d0 <CPageAllocator::~CPageAllocator()>:
   b13d0:	d65f03c0 	ret
   b13d4:	d503201f 	nop
   b13d8:	d503201f 	nop
   b13dc:	d503201f 	nop

00000000000b13e0 <CPageAllocator::Setup(unsigned long, unsigned long)>:
   b13e0:	d10083ff 	sub	sp, sp, #0x20
   b13e4:	f9000fe0 	str	x0, [sp, #24]
   b13e8:	f9000be1 	str	x1, [sp, #16]
   b13ec:	f90007e2 	str	x2, [sp, #8]
   b13f0:	f9400be1 	ldr	x1, [sp, #16]
   b13f4:	d29fffe0 	mov	x0, #0xffff                	// #65535
   b13f8:	8b000020 	add	x0, x1, x0
   b13fc:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   b1400:	aa0003e1 	mov	x1, x0
   b1404:	f9400fe0 	ldr	x0, [sp, #24]
   b1408:	f9000001 	str	x1, [x0]
   b140c:	f9400be1 	ldr	x1, [sp, #16]
   b1410:	f94007e0 	ldr	x0, [sp, #8]
   b1414:	8b000020 	add	x0, x1, x0
   b1418:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   b141c:	aa0003e1 	mov	x1, x0
   b1420:	f9400fe0 	ldr	x0, [sp, #24]
   b1424:	f9000401 	str	x1, [x0, #8]
   b1428:	d503201f 	nop
   b142c:	910083ff 	add	sp, sp, #0x20
   b1430:	d65f03c0 	ret
   b1434:	d503201f 	nop
   b1438:	d503201f 	nop
   b143c:	d503201f 	nop

00000000000b1440 <CPageAllocator::GetFreeSpace() const>:
   b1440:	a9400001 	ldp	x1, x0, [x0]
   b1444:	cb010000 	sub	x0, x0, x1
   b1448:	d65f03c0 	ret
   b144c:	d503201f 	nop

00000000000b1450 <CPageAllocator::Allocate()>:
   b1450:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b1454:	910003fd 	mov	x29, sp
   b1458:	a90153f3 	stp	x19, x20, [sp, #16]
   b145c:	aa0003f3 	mov	x19, x0
   b1460:	f9400000 	ldr	x0, [x0]
   b1464:	b4000460 	cbz	x0, b14f0 <CPageAllocator::Allocate()+0xa0>
   b1468:	b9401a60 	ldr	w0, [x19, #24]
   b146c:	35000220 	cbnz	w0, b14b0 <CPageAllocator::Allocate()+0x60>
   b1470:	f9400a74 	ldr	x20, [x19, #16]
   b1474:	b4000254 	cbz	x20, b14bc <CPageAllocator::Allocate()+0x6c>
   b1478:	b9400281 	ldr	w1, [x20]
   b147c:	5289a860 	mov	w0, #0x4d43                	// #19779
   b1480:	72aa08e0 	movk	w0, #0x5047, lsl #16
   b1484:	6b00003f 	cmp	w1, w0
   b1488:	540003e1 	b.ne	b1504 <CPageAllocator::Allocate()+0xb4>  // b.any
   b148c:	f9400680 	ldr	x0, [x20, #8]
   b1490:	f9000a60 	str	x0, [x19, #16]
   b1494:	b9401a60 	ldr	w0, [x19, #24]
   b1498:	b900029f 	str	wzr, [x20]
   b149c:	35000200 	cbnz	w0, b14dc <CPageAllocator::Allocate()+0x8c>
   b14a0:	aa1403e0 	mov	x0, x20
   b14a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b14a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b14ac:	d65f03c0 	ret
   b14b0:	97ffeef4 	bl	ad080 <EnterCritical>
   b14b4:	f9400a74 	ldr	x20, [x19, #16]
   b14b8:	b5fffe14 	cbnz	x20, b1478 <CPageAllocator::Allocate()+0x28>
   b14bc:	a9400e62 	ldp	x2, x3, [x19]
   b14c0:	b9401a60 	ldr	w0, [x19, #24]
   b14c4:	91404041 	add	x1, x2, #0x10, lsl #12
   b14c8:	f9000261 	str	x1, [x19]
   b14cc:	eb03003f 	cmp	x1, x3
   b14d0:	54fffe68 	b.hi	b149c <CPageAllocator::Allocate()+0x4c>  // b.pmore
   b14d4:	aa0203f4 	mov	x20, x2
   b14d8:	34fffe40 	cbz	w0, b14a0 <CPageAllocator::Allocate()+0x50>
   b14dc:	97ffef19 	bl	ad140 <LeaveCritical>
   b14e0:	aa1403e0 	mov	x0, x20
   b14e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b14e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b14ec:	d65f03c0 	ret
   b14f0:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b14f4:	912ba021 	add	x1, x1, #0xae8
   b14f8:	91006020 	add	x0, x1, #0x18
   b14fc:	528006c2 	mov	w2, #0x36                  	// #54
   b1500:	97ffc280 	bl	a1f00 <assertion_failed>
   b1504:	f0000041 	adrp	x1, bc000 <font_data+0x680>
   b1508:	912ba021 	add	x1, x1, #0xae8
   b150c:	9100a020 	add	x0, x1, #0x28
   b1510:	52800882 	mov	w2, #0x44                  	// #68
   b1514:	97ffc27b 	bl	a1f00 <assertion_failed>
   b1518:	d503201f 	nop
   b151c:	d503201f 	nop

00000000000b1520 <CPageAllocator::Free(void*)>:
   b1520:	b40003a1 	cbz	x1, b1594 <CPageAllocator::Free(void*)+0x74>
   b1524:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b1528:	910003fd 	mov	x29, sp
   b152c:	a90153f3 	stp	x19, x20, [sp, #16]
   b1530:	aa0003f4 	mov	x20, x0
   b1534:	b9401800 	ldr	w0, [x0, #24]
   b1538:	aa0103f3 	mov	x19, x1
   b153c:	35000140 	cbnz	w0, b1564 <CPageAllocator::Free(void*)+0x44>
   b1540:	f9400a80 	ldr	x0, [x20, #16]
   b1544:	5289a861 	mov	w1, #0x4d43                	// #19779
   b1548:	72aa08e1 	movk	w1, #0x5047, lsl #16
   b154c:	b9000261 	str	w1, [x19]
   b1550:	f9000660 	str	x0, [x19, #8]
   b1554:	f9000a93 	str	x19, [x20, #16]
   b1558:	a94153f3 	ldp	x19, x20, [sp, #16]
   b155c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b1560:	d65f03c0 	ret
   b1564:	97ffeec7 	bl	ad080 <EnterCritical>
   b1568:	f9400a81 	ldr	x1, [x20, #16]
   b156c:	5289a862 	mov	w2, #0x4d43                	// #19779
   b1570:	72aa08e2 	movk	w2, #0x5047, lsl #16
   b1574:	b9401a80 	ldr	w0, [x20, #24]
   b1578:	b9000262 	str	w2, [x19]
   b157c:	f9000661 	str	x1, [x19, #8]
   b1580:	f9000a93 	str	x19, [x20, #16]
   b1584:	34fffea0 	cbz	w0, b1558 <CPageAllocator::Free(void*)+0x38>
   b1588:	a94153f3 	ldp	x19, x20, [sp, #16]
   b158c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b1590:	17ffeeec 	b	ad140 <LeaveCritical>
   b1594:	d65f03c0 	ret
	...

00000000000b1800 <VectorTable>:
   b1800:	140001ef 	b	b1fbc <SynchronousStub>
   b1804:	d503201f 	nop
   b1808:	d503201f 	nop
   b180c:	d503201f 	nop
   b1810:	d503201f 	nop
   b1814:	d503201f 	nop
   b1818:	d503201f 	nop
   b181c:	d503201f 	nop
   b1820:	d503201f 	nop
   b1824:	d503201f 	nop
   b1828:	d503201f 	nop
   b182c:	d503201f 	nop
   b1830:	d503201f 	nop
   b1834:	d503201f 	nop
   b1838:	d503201f 	nop
   b183c:	d503201f 	nop
   b1840:	d503201f 	nop
   b1844:	d503201f 	nop
   b1848:	d503201f 	nop
   b184c:	d503201f 	nop
   b1850:	d503201f 	nop
   b1854:	d503201f 	nop
   b1858:	d503201f 	nop
   b185c:	d503201f 	nop
   b1860:	d503201f 	nop
   b1864:	d503201f 	nop
   b1868:	d503201f 	nop
   b186c:	d503201f 	nop
   b1870:	d503201f 	nop
   b1874:	d503201f 	nop
   b1878:	d503201f 	nop
   b187c:	d503201f 	nop
   b1880:	140001eb 	b	b202c <IRQStub>
   b1884:	d503201f 	nop
   b1888:	d503201f 	nop
   b188c:	d503201f 	nop
   b1890:	d503201f 	nop
   b1894:	d503201f 	nop
   b1898:	d503201f 	nop
   b189c:	d503201f 	nop
   b18a0:	d503201f 	nop
   b18a4:	d503201f 	nop
   b18a8:	d503201f 	nop
   b18ac:	d503201f 	nop
   b18b0:	d503201f 	nop
   b18b4:	d503201f 	nop
   b18b8:	d503201f 	nop
   b18bc:	d503201f 	nop
   b18c0:	d503201f 	nop
   b18c4:	d503201f 	nop
   b18c8:	d503201f 	nop
   b18cc:	d503201f 	nop
   b18d0:	d503201f 	nop
   b18d4:	d503201f 	nop
   b18d8:	d503201f 	nop
   b18dc:	d503201f 	nop
   b18e0:	d503201f 	nop
   b18e4:	d503201f 	nop
   b18e8:	d503201f 	nop
   b18ec:	d503201f 	nop
   b18f0:	d503201f 	nop
   b18f4:	d503201f 	nop
   b18f8:	d503201f 	nop
   b18fc:	d503201f 	nop
   b1900:	14000217 	b	b215c <FIQStub>
   b1904:	d503201f 	nop
   b1908:	d503201f 	nop
   b190c:	d503201f 	nop
   b1910:	d503201f 	nop
   b1914:	d503201f 	nop
   b1918:	d503201f 	nop
   b191c:	d503201f 	nop
   b1920:	d503201f 	nop
   b1924:	d503201f 	nop
   b1928:	d503201f 	nop
   b192c:	d503201f 	nop
   b1930:	d503201f 	nop
   b1934:	d503201f 	nop
   b1938:	d503201f 	nop
   b193c:	d503201f 	nop
   b1940:	d503201f 	nop
   b1944:	d503201f 	nop
   b1948:	d503201f 	nop
   b194c:	d503201f 	nop
   b1950:	d503201f 	nop
   b1954:	d503201f 	nop
   b1958:	d503201f 	nop
   b195c:	d503201f 	nop
   b1960:	d503201f 	nop
   b1964:	d503201f 	nop
   b1968:	d503201f 	nop
   b196c:	d503201f 	nop
   b1970:	d503201f 	nop
   b1974:	d503201f 	nop
   b1978:	d503201f 	nop
   b197c:	d503201f 	nop
   b1980:	1400019d 	b	b1ff4 <SErrorStub>
   b1984:	d503201f 	nop
   b1988:	d503201f 	nop
   b198c:	d503201f 	nop
   b1990:	d503201f 	nop
   b1994:	d503201f 	nop
   b1998:	d503201f 	nop
   b199c:	d503201f 	nop
   b19a0:	d503201f 	nop
   b19a4:	d503201f 	nop
   b19a8:	d503201f 	nop
   b19ac:	d503201f 	nop
   b19b0:	d503201f 	nop
   b19b4:	d503201f 	nop
   b19b8:	d503201f 	nop
   b19bc:	d503201f 	nop
   b19c0:	d503201f 	nop
   b19c4:	d503201f 	nop
   b19c8:	d503201f 	nop
   b19cc:	d503201f 	nop
   b19d0:	d503201f 	nop
   b19d4:	d503201f 	nop
   b19d8:	d503201f 	nop
   b19dc:	d503201f 	nop
   b19e0:	d503201f 	nop
   b19e4:	d503201f 	nop
   b19e8:	d503201f 	nop
   b19ec:	d503201f 	nop
   b19f0:	d503201f 	nop
   b19f4:	d503201f 	nop
   b19f8:	d503201f 	nop
   b19fc:	d503201f 	nop
   b1a00:	1400016f 	b	b1fbc <SynchronousStub>
   b1a04:	d503201f 	nop
   b1a08:	d503201f 	nop
   b1a0c:	d503201f 	nop
   b1a10:	d503201f 	nop
   b1a14:	d503201f 	nop
   b1a18:	d503201f 	nop
   b1a1c:	d503201f 	nop
   b1a20:	d503201f 	nop
   b1a24:	d503201f 	nop
   b1a28:	d503201f 	nop
   b1a2c:	d503201f 	nop
   b1a30:	d503201f 	nop
   b1a34:	d503201f 	nop
   b1a38:	d503201f 	nop
   b1a3c:	d503201f 	nop
   b1a40:	d503201f 	nop
   b1a44:	d503201f 	nop
   b1a48:	d503201f 	nop
   b1a4c:	d503201f 	nop
   b1a50:	d503201f 	nop
   b1a54:	d503201f 	nop
   b1a58:	d503201f 	nop
   b1a5c:	d503201f 	nop
   b1a60:	d503201f 	nop
   b1a64:	d503201f 	nop
   b1a68:	d503201f 	nop
   b1a6c:	d503201f 	nop
   b1a70:	d503201f 	nop
   b1a74:	d503201f 	nop
   b1a78:	d503201f 	nop
   b1a7c:	d503201f 	nop
   b1a80:	1400016b 	b	b202c <IRQStub>
   b1a84:	d503201f 	nop
   b1a88:	d503201f 	nop
   b1a8c:	d503201f 	nop
   b1a90:	d503201f 	nop
   b1a94:	d503201f 	nop
   b1a98:	d503201f 	nop
   b1a9c:	d503201f 	nop
   b1aa0:	d503201f 	nop
   b1aa4:	d503201f 	nop
   b1aa8:	d503201f 	nop
   b1aac:	d503201f 	nop
   b1ab0:	d503201f 	nop
   b1ab4:	d503201f 	nop
   b1ab8:	d503201f 	nop
   b1abc:	d503201f 	nop
   b1ac0:	d503201f 	nop
   b1ac4:	d503201f 	nop
   b1ac8:	d503201f 	nop
   b1acc:	d503201f 	nop
   b1ad0:	d503201f 	nop
   b1ad4:	d503201f 	nop
   b1ad8:	d503201f 	nop
   b1adc:	d503201f 	nop
   b1ae0:	d503201f 	nop
   b1ae4:	d503201f 	nop
   b1ae8:	d503201f 	nop
   b1aec:	d503201f 	nop
   b1af0:	d503201f 	nop
   b1af4:	d503201f 	nop
   b1af8:	d503201f 	nop
   b1afc:	d503201f 	nop
   b1b00:	14000197 	b	b215c <FIQStub>
   b1b04:	d503201f 	nop
   b1b08:	d503201f 	nop
   b1b0c:	d503201f 	nop
   b1b10:	d503201f 	nop
   b1b14:	d503201f 	nop
   b1b18:	d503201f 	nop
   b1b1c:	d503201f 	nop
   b1b20:	d503201f 	nop
   b1b24:	d503201f 	nop
   b1b28:	d503201f 	nop
   b1b2c:	d503201f 	nop
   b1b30:	d503201f 	nop
   b1b34:	d503201f 	nop
   b1b38:	d503201f 	nop
   b1b3c:	d503201f 	nop
   b1b40:	d503201f 	nop
   b1b44:	d503201f 	nop
   b1b48:	d503201f 	nop
   b1b4c:	d503201f 	nop
   b1b50:	d503201f 	nop
   b1b54:	d503201f 	nop
   b1b58:	d503201f 	nop
   b1b5c:	d503201f 	nop
   b1b60:	d503201f 	nop
   b1b64:	d503201f 	nop
   b1b68:	d503201f 	nop
   b1b6c:	d503201f 	nop
   b1b70:	d503201f 	nop
   b1b74:	d503201f 	nop
   b1b78:	d503201f 	nop
   b1b7c:	d503201f 	nop
   b1b80:	1400011d 	b	b1ff4 <SErrorStub>
   b1b84:	d503201f 	nop
   b1b88:	d503201f 	nop
   b1b8c:	d503201f 	nop
   b1b90:	d503201f 	nop
   b1b94:	d503201f 	nop
   b1b98:	d503201f 	nop
   b1b9c:	d503201f 	nop
   b1ba0:	d503201f 	nop
   b1ba4:	d503201f 	nop
   b1ba8:	d503201f 	nop
   b1bac:	d503201f 	nop
   b1bb0:	d503201f 	nop
   b1bb4:	d503201f 	nop
   b1bb8:	d503201f 	nop
   b1bbc:	d503201f 	nop
   b1bc0:	d503201f 	nop
   b1bc4:	d503201f 	nop
   b1bc8:	d503201f 	nop
   b1bcc:	d503201f 	nop
   b1bd0:	d503201f 	nop
   b1bd4:	d503201f 	nop
   b1bd8:	d503201f 	nop
   b1bdc:	d503201f 	nop
   b1be0:	d503201f 	nop
   b1be4:	d503201f 	nop
   b1be8:	d503201f 	nop
   b1bec:	d503201f 	nop
   b1bf0:	d503201f 	nop
   b1bf4:	d503201f 	nop
   b1bf8:	d503201f 	nop
   b1bfc:	d503201f 	nop
   b1c00:	140001a2 	b	b2288 <HVCStub>
   b1c04:	d503201f 	nop
   b1c08:	d503201f 	nop
   b1c0c:	d503201f 	nop
   b1c10:	d503201f 	nop
   b1c14:	d503201f 	nop
   b1c18:	d503201f 	nop
   b1c1c:	d503201f 	nop
   b1c20:	d503201f 	nop
   b1c24:	d503201f 	nop
   b1c28:	d503201f 	nop
   b1c2c:	d503201f 	nop
   b1c30:	d503201f 	nop
   b1c34:	d503201f 	nop
   b1c38:	d503201f 	nop
   b1c3c:	d503201f 	nop
   b1c40:	d503201f 	nop
   b1c44:	d503201f 	nop
   b1c48:	d503201f 	nop
   b1c4c:	d503201f 	nop
   b1c50:	d503201f 	nop
   b1c54:	d503201f 	nop
   b1c58:	d503201f 	nop
   b1c5c:	d503201f 	nop
   b1c60:	d503201f 	nop
   b1c64:	d503201f 	nop
   b1c68:	d503201f 	nop
   b1c6c:	d503201f 	nop
   b1c70:	d503201f 	nop
   b1c74:	d503201f 	nop
   b1c78:	d503201f 	nop
   b1c7c:	d503201f 	nop
   b1c80:	140000c1 	b	b1f84 <UnexpectedStub>
   b1c84:	d503201f 	nop
   b1c88:	d503201f 	nop
   b1c8c:	d503201f 	nop
   b1c90:	d503201f 	nop
   b1c94:	d503201f 	nop
   b1c98:	d503201f 	nop
   b1c9c:	d503201f 	nop
   b1ca0:	d503201f 	nop
   b1ca4:	d503201f 	nop
   b1ca8:	d503201f 	nop
   b1cac:	d503201f 	nop
   b1cb0:	d503201f 	nop
   b1cb4:	d503201f 	nop
   b1cb8:	d503201f 	nop
   b1cbc:	d503201f 	nop
   b1cc0:	d503201f 	nop
   b1cc4:	d503201f 	nop
   b1cc8:	d503201f 	nop
   b1ccc:	d503201f 	nop
   b1cd0:	d503201f 	nop
   b1cd4:	d503201f 	nop
   b1cd8:	d503201f 	nop
   b1cdc:	d503201f 	nop
   b1ce0:	d503201f 	nop
   b1ce4:	d503201f 	nop
   b1ce8:	d503201f 	nop
   b1cec:	d503201f 	nop
   b1cf0:	d503201f 	nop
   b1cf4:	d503201f 	nop
   b1cf8:	d503201f 	nop
   b1cfc:	d503201f 	nop
   b1d00:	140000a1 	b	b1f84 <UnexpectedStub>
   b1d04:	d503201f 	nop
   b1d08:	d503201f 	nop
   b1d0c:	d503201f 	nop
   b1d10:	d503201f 	nop
   b1d14:	d503201f 	nop
   b1d18:	d503201f 	nop
   b1d1c:	d503201f 	nop
   b1d20:	d503201f 	nop
   b1d24:	d503201f 	nop
   b1d28:	d503201f 	nop
   b1d2c:	d503201f 	nop
   b1d30:	d503201f 	nop
   b1d34:	d503201f 	nop
   b1d38:	d503201f 	nop
   b1d3c:	d503201f 	nop
   b1d40:	d503201f 	nop
   b1d44:	d503201f 	nop
   b1d48:	d503201f 	nop
   b1d4c:	d503201f 	nop
   b1d50:	d503201f 	nop
   b1d54:	d503201f 	nop
   b1d58:	d503201f 	nop
   b1d5c:	d503201f 	nop
   b1d60:	d503201f 	nop
   b1d64:	d503201f 	nop
   b1d68:	d503201f 	nop
   b1d6c:	d503201f 	nop
   b1d70:	d503201f 	nop
   b1d74:	d503201f 	nop
   b1d78:	d503201f 	nop
   b1d7c:	d503201f 	nop
   b1d80:	14000081 	b	b1f84 <UnexpectedStub>
   b1d84:	d503201f 	nop
   b1d88:	d503201f 	nop
   b1d8c:	d503201f 	nop
   b1d90:	d503201f 	nop
   b1d94:	d503201f 	nop
   b1d98:	d503201f 	nop
   b1d9c:	d503201f 	nop
   b1da0:	d503201f 	nop
   b1da4:	d503201f 	nop
   b1da8:	d503201f 	nop
   b1dac:	d503201f 	nop
   b1db0:	d503201f 	nop
   b1db4:	d503201f 	nop
   b1db8:	d503201f 	nop
   b1dbc:	d503201f 	nop
   b1dc0:	d503201f 	nop
   b1dc4:	d503201f 	nop
   b1dc8:	d503201f 	nop
   b1dcc:	d503201f 	nop
   b1dd0:	d503201f 	nop
   b1dd4:	d503201f 	nop
   b1dd8:	d503201f 	nop
   b1ddc:	d503201f 	nop
   b1de0:	d503201f 	nop
   b1de4:	d503201f 	nop
   b1de8:	d503201f 	nop
   b1dec:	d503201f 	nop
   b1df0:	d503201f 	nop
   b1df4:	d503201f 	nop
   b1df8:	d503201f 	nop
   b1dfc:	d503201f 	nop
   b1e00:	14000061 	b	b1f84 <UnexpectedStub>
   b1e04:	d503201f 	nop
   b1e08:	d503201f 	nop
   b1e0c:	d503201f 	nop
   b1e10:	d503201f 	nop
   b1e14:	d503201f 	nop
   b1e18:	d503201f 	nop
   b1e1c:	d503201f 	nop
   b1e20:	d503201f 	nop
   b1e24:	d503201f 	nop
   b1e28:	d503201f 	nop
   b1e2c:	d503201f 	nop
   b1e30:	d503201f 	nop
   b1e34:	d503201f 	nop
   b1e38:	d503201f 	nop
   b1e3c:	d503201f 	nop
   b1e40:	d503201f 	nop
   b1e44:	d503201f 	nop
   b1e48:	d503201f 	nop
   b1e4c:	d503201f 	nop
   b1e50:	d503201f 	nop
   b1e54:	d503201f 	nop
   b1e58:	d503201f 	nop
   b1e5c:	d503201f 	nop
   b1e60:	d503201f 	nop
   b1e64:	d503201f 	nop
   b1e68:	d503201f 	nop
   b1e6c:	d503201f 	nop
   b1e70:	d503201f 	nop
   b1e74:	d503201f 	nop
   b1e78:	d503201f 	nop
   b1e7c:	d503201f 	nop
   b1e80:	14000041 	b	b1f84 <UnexpectedStub>
   b1e84:	d503201f 	nop
   b1e88:	d503201f 	nop
   b1e8c:	d503201f 	nop
   b1e90:	d503201f 	nop
   b1e94:	d503201f 	nop
   b1e98:	d503201f 	nop
   b1e9c:	d503201f 	nop
   b1ea0:	d503201f 	nop
   b1ea4:	d503201f 	nop
   b1ea8:	d503201f 	nop
   b1eac:	d503201f 	nop
   b1eb0:	d503201f 	nop
   b1eb4:	d503201f 	nop
   b1eb8:	d503201f 	nop
   b1ebc:	d503201f 	nop
   b1ec0:	d503201f 	nop
   b1ec4:	d503201f 	nop
   b1ec8:	d503201f 	nop
   b1ecc:	d503201f 	nop
   b1ed0:	d503201f 	nop
   b1ed4:	d503201f 	nop
   b1ed8:	d503201f 	nop
   b1edc:	d503201f 	nop
   b1ee0:	d503201f 	nop
   b1ee4:	d503201f 	nop
   b1ee8:	d503201f 	nop
   b1eec:	d503201f 	nop
   b1ef0:	d503201f 	nop
   b1ef4:	d503201f 	nop
   b1ef8:	d503201f 	nop
   b1efc:	d503201f 	nop
   b1f00:	14000021 	b	b1f84 <UnexpectedStub>
   b1f04:	d503201f 	nop
   b1f08:	d503201f 	nop
   b1f0c:	d503201f 	nop
   b1f10:	d503201f 	nop
   b1f14:	d503201f 	nop
   b1f18:	d503201f 	nop
   b1f1c:	d503201f 	nop
   b1f20:	d503201f 	nop
   b1f24:	d503201f 	nop
   b1f28:	d503201f 	nop
   b1f2c:	d503201f 	nop
   b1f30:	d503201f 	nop
   b1f34:	d503201f 	nop
   b1f38:	d503201f 	nop
   b1f3c:	d503201f 	nop
   b1f40:	d503201f 	nop
   b1f44:	d503201f 	nop
   b1f48:	d503201f 	nop
   b1f4c:	d503201f 	nop
   b1f50:	d503201f 	nop
   b1f54:	d503201f 	nop
   b1f58:	d503201f 	nop
   b1f5c:	d503201f 	nop
   b1f60:	d503201f 	nop
   b1f64:	d503201f 	nop
   b1f68:	d503201f 	nop
   b1f6c:	d503201f 	nop
   b1f70:	d503201f 	nop
   b1f74:	d503201f 	nop
   b1f78:	d503201f 	nop
   b1f7c:	d503201f 	nop
   b1f80:	14000001 	b	b1f84 <UnexpectedStub>

00000000000b1f84 <UnexpectedStub>:
   b1f84:	d5385200 	mrs	x0, esr_el1
   b1f88:	d5384001 	mrs	x1, spsr_el1
   b1f8c:	aa1e03e2 	mov	x2, x30
   b1f90:	d5384023 	mrs	x3, elr_el1
   b1f94:	d5384104 	mrs	x4, sp_el0
   b1f98:	910003e5 	mov	x5, sp
   b1f9c:	d5386006 	mrs	x6, far_el1
   b1fa0:	f81f0fe6 	str	x6, [sp, #-16]!
   b1fa4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   b1fa8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   b1fac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   b1fb0:	d2800000 	mov	x0, #0x0                   	// #0
   b1fb4:	910003e1 	mov	x1, sp
   b1fb8:	17ffeb52 	b	acd00 <ExceptionHandler>

00000000000b1fbc <SynchronousStub>:
   b1fbc:	d5385200 	mrs	x0, esr_el1
   b1fc0:	d5384001 	mrs	x1, spsr_el1
   b1fc4:	aa1e03e2 	mov	x2, x30
   b1fc8:	d5384023 	mrs	x3, elr_el1
   b1fcc:	d5384104 	mrs	x4, sp_el0
   b1fd0:	910003e5 	mov	x5, sp
   b1fd4:	d5386006 	mrs	x6, far_el1
   b1fd8:	f81f0fe6 	str	x6, [sp, #-16]!
   b1fdc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   b1fe0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   b1fe4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   b1fe8:	d2800020 	mov	x0, #0x1                   	// #1
   b1fec:	910003e1 	mov	x1, sp
   b1ff0:	17ffeb44 	b	acd00 <ExceptionHandler>

00000000000b1ff4 <SErrorStub>:
   b1ff4:	d5385200 	mrs	x0, esr_el1
   b1ff8:	d5384001 	mrs	x1, spsr_el1
   b1ffc:	aa1e03e2 	mov	x2, x30
   b2000:	d5384023 	mrs	x3, elr_el1
   b2004:	d5384104 	mrs	x4, sp_el0
   b2008:	910003e5 	mov	x5, sp
   b200c:	d5386006 	mrs	x6, far_el1
   b2010:	f81f0fe6 	str	x6, [sp, #-16]!
   b2014:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   b2018:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   b201c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   b2020:	d2800040 	mov	x0, #0x2                   	// #2
   b2024:	910003e1 	mov	x1, sp
   b2028:	17ffeb36 	b	acd00 <ExceptionHandler>

00000000000b202c <IRQStub>:
   b202c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b2030:	d538403d 	mrs	x29, elr_el1
   b2034:	d538401e 	mrs	x30, spsr_el1
   b2038:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b203c:	d50341ff 	msr	daifclr, #0x1
   b2040:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   b2044:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   b2048:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   b204c:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   b2050:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   b2054:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   b2058:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   b205c:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   b2060:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   b2064:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   b2068:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   b206c:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   b2070:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   b2074:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   b2078:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   b207c:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   b2080:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   b2084:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   b2088:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   b208c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   b2090:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   b2094:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   b2098:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   b209c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   b20a0:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   b20a4:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   b20a8:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   b20ac:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   b20b0:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   b20b4:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   b20b8:	f81f0fe0 	str	x0, [sp, #-16]!
   b20bc:	58000f20 	ldr	x0, b22a0 <HVCStub+0x18>
   b20c0:	f900001d 	str	x29, [x0]
   b20c4:	97fff087 	bl	ae2e0 <InterruptHandler>
   b20c8:	f84107e0 	ldr	x0, [sp], #16
   b20cc:	a8c10be1 	ldp	x1, x2, [sp], #16
   b20d0:	a8c113e3 	ldp	x3, x4, [sp], #16
   b20d4:	a8c11be5 	ldp	x5, x6, [sp], #16
   b20d8:	a8c123e7 	ldp	x7, x8, [sp], #16
   b20dc:	a8c12be9 	ldp	x9, x10, [sp], #16
   b20e0:	a8c133eb 	ldp	x11, x12, [sp], #16
   b20e4:	a8c13bed 	ldp	x13, x14, [sp], #16
   b20e8:	a8c143ef 	ldp	x15, x16, [sp], #16
   b20ec:	a8c14bf1 	ldp	x17, x18, [sp], #16
   b20f0:	a8c153f3 	ldp	x19, x20, [sp], #16
   b20f4:	a8c15bf5 	ldp	x21, x22, [sp], #16
   b20f8:	a8c163f7 	ldp	x23, x24, [sp], #16
   b20fc:	a8c16bf9 	ldp	x25, x26, [sp], #16
   b2100:	a8c173fb 	ldp	x27, x28, [sp], #16
   b2104:	acc107e0 	ldp	q0, q1, [sp], #32
   b2108:	acc10fe2 	ldp	q2, q3, [sp], #32
   b210c:	acc117e4 	ldp	q4, q5, [sp], #32
   b2110:	acc11fe6 	ldp	q6, q7, [sp], #32
   b2114:	acc127e8 	ldp	q8, q9, [sp], #32
   b2118:	acc12fea 	ldp	q10, q11, [sp], #32
   b211c:	acc137ec 	ldp	q12, q13, [sp], #32
   b2120:	acc13fee 	ldp	q14, q15, [sp], #32
   b2124:	acc147f0 	ldp	q16, q17, [sp], #32
   b2128:	acc14ff2 	ldp	q18, q19, [sp], #32
   b212c:	acc157f4 	ldp	q20, q21, [sp], #32
   b2130:	acc15ff6 	ldp	q22, q23, [sp], #32
   b2134:	acc167f8 	ldp	q24, q25, [sp], #32
   b2138:	acc16ffa 	ldp	q26, q27, [sp], #32
   b213c:	acc177fc 	ldp	q28, q29, [sp], #32
   b2140:	acc17ffe 	ldp	q30, q31, [sp], #32
   b2144:	d50341df 	msr	daifset, #0x1
   b2148:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b214c:	d518403d 	msr	elr_el1, x29
   b2150:	d518401e 	msr	spsr_el1, x30
   b2154:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b2158:	d69f03e0 	eret

00000000000b215c <FIQStub>:
   b215c:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   b2160:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   b2164:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   b2168:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   b216c:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   b2170:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   b2174:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   b2178:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   b217c:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   b2180:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   b2184:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   b2188:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   b218c:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   b2190:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   b2194:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   b2198:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   b219c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b21a0:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   b21a4:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   b21a8:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   b21ac:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   b21b0:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   b21b4:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   b21b8:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   b21bc:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   b21c0:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   b21c4:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   b21c8:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   b21cc:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   b21d0:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   b21d4:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   b21d8:	f81f0fe0 	str	x0, [sp, #-16]!
   b21dc:	58000662 	ldr	x2, b22a8 <HVCStub+0x20>
   b21e0:	f9400041 	ldr	x1, [x2]
   b21e4:	f100003f 	cmp	x1, #0x0
   b21e8:	54000480 	b.eq	b2278 <FIQStub+0x11c>  // b.none
   b21ec:	f9400440 	ldr	x0, [x2, #8]
   b21f0:	d63f0020 	blr	x1
   b21f4:	f84107e0 	ldr	x0, [sp], #16
   b21f8:	a8c10be1 	ldp	x1, x2, [sp], #16
   b21fc:	a8c113e3 	ldp	x3, x4, [sp], #16
   b2200:	a8c11be5 	ldp	x5, x6, [sp], #16
   b2204:	a8c123e7 	ldp	x7, x8, [sp], #16
   b2208:	a8c12be9 	ldp	x9, x10, [sp], #16
   b220c:	a8c133eb 	ldp	x11, x12, [sp], #16
   b2210:	a8c13bed 	ldp	x13, x14, [sp], #16
   b2214:	a8c143ef 	ldp	x15, x16, [sp], #16
   b2218:	a8c14bf1 	ldp	x17, x18, [sp], #16
   b221c:	a8c153f3 	ldp	x19, x20, [sp], #16
   b2220:	a8c15bf5 	ldp	x21, x22, [sp], #16
   b2224:	a8c163f7 	ldp	x23, x24, [sp], #16
   b2228:	a8c16bf9 	ldp	x25, x26, [sp], #16
   b222c:	a8c173fb 	ldp	x27, x28, [sp], #16
   b2230:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b2234:	acc107e0 	ldp	q0, q1, [sp], #32
   b2238:	acc10fe2 	ldp	q2, q3, [sp], #32
   b223c:	acc117e4 	ldp	q4, q5, [sp], #32
   b2240:	acc11fe6 	ldp	q6, q7, [sp], #32
   b2244:	acc127e8 	ldp	q8, q9, [sp], #32
   b2248:	acc12fea 	ldp	q10, q11, [sp], #32
   b224c:	acc137ec 	ldp	q12, q13, [sp], #32
   b2250:	acc13fee 	ldp	q14, q15, [sp], #32
   b2254:	acc147f0 	ldp	q16, q17, [sp], #32
   b2258:	acc14ff2 	ldp	q18, q19, [sp], #32
   b225c:	acc157f4 	ldp	q20, q21, [sp], #32
   b2260:	acc15ff6 	ldp	q22, q23, [sp], #32
   b2264:	acc167f8 	ldp	q24, q25, [sp], #32
   b2268:	acc16ffa 	ldp	q26, q27, [sp], #32
   b226c:	acc177fc 	ldp	q28, q29, [sp], #32
   b2270:	acc17ffe 	ldp	q30, q31, [sp], #32
   b2274:	d69f03e0 	eret
   b2278:	580001c1 	ldr	x1, b22b0 <HVCStub+0x28>
   b227c:	52800000 	mov	w0, #0x0                   	// #0
   b2280:	b9000020 	str	w0, [x1]
   b2284:	17ffffdc 	b	b21f4 <FIQStub+0x98>

00000000000b2288 <HVCStub>:
   b2288:	d53c4000 	mrs	x0, spsr_el2
   b228c:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   b2290:	d2800121 	mov	x1, #0x9                   	// #9
   b2294:	aa010000 	orr	x0, x0, x1
   b2298:	d51c4000 	msr	spsr_el2, x0
   b229c:	d69f03e0 	eret
   b22a0:	000cab10 	.word	0x000cab10
   b22a4:	00000000 	.word	0x00000000
   b22a8:	000caaf8 	.word	0x000caaf8
   b22ac:	00000000 	.word	0x00000000
   b22b0:	3f00b20c 	.word	0x3f00b20c
	...

00000000000b22c0 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   b22c0:	91004002 	add	x2, x0, #0x10
   b22c4:	91070003 	add	x3, x0, #0x1c0
   b22c8:	f9000001 	str	x1, [x0]
   b22cc:	3900201f 	strb	wzr, [x0, #8]
   b22d0:	f800845f 	str	xzr, [x2], #8
   b22d4:	eb03005f 	cmp	x2, x3
   b22d8:	54ffffc1 	b.ne	b22d0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   b22dc:	d65f03c0 	ret

00000000000b22e0 <CGPIOManager::~CGPIOManager()>:
   b22e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b22e4:	91004001 	add	x1, x0, #0x10
   b22e8:	91070003 	add	x3, x0, #0x1c0
   b22ec:	910003fd 	mov	x29, sp
   b22f0:	14000004 	b	b2300 <CGPIOManager::~CGPIOManager()+0x20>
   b22f4:	91002021 	add	x1, x1, #0x8
   b22f8:	eb03003f 	cmp	x1, x3
   b22fc:	54000120 	b.eq	b2320 <CGPIOManager::~CGPIOManager()+0x40>  // b.none
   b2300:	f9400022 	ldr	x2, [x1]
   b2304:	b4ffff82 	cbz	x2, b22f4 <CGPIOManager::~CGPIOManager()+0x14>
   b2308:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b230c:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2310:	9104c021 	add	x1, x1, #0x130
   b2314:	91050000 	add	x0, x0, #0x140
   b2318:	52800582 	mov	w2, #0x2c                  	// #44
   b231c:	97ffbef9 	bl	a1f00 <assertion_failed>
   b2320:	39402001 	ldrb	w1, [x0, #8]
   b2324:	360000c1 	tbz	w1, #0, b233c <CGPIOManager::~CGPIOManager()+0x5c>
   b2328:	f9400000 	ldr	x0, [x0]
   b232c:	b40000c0 	cbz	x0, b2344 <CGPIOManager::~CGPIOManager()+0x64>
   b2330:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b2334:	52800681 	mov	w1, #0x34                  	// #52
   b2338:	17ffef2a 	b	adfe0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   b233c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b2340:	d65f03c0 	ret
   b2344:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b2348:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b234c:	9104c021 	add	x1, x1, #0x130
   b2350:	91056000 	add	x0, x0, #0x158
   b2354:	52800642 	mov	w2, #0x32                  	// #50
   b2358:	97ffbeea 	bl	a1f00 <assertion_failed>
   b235c:	d503201f 	nop

00000000000b2360 <CGPIOManager::Initialize()>:
   b2360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b2364:	910003fd 	mov	x29, sp
   b2368:	f9000bf3 	str	x19, [sp, #16]
   b236c:	aa0003f3 	mov	x19, x0
   b2370:	39402000 	ldrb	w0, [x0, #8]
   b2374:	370001a0 	tbnz	w0, #0, b23a8 <CGPIOManager::Initialize()+0x48>
   b2378:	f9400260 	ldr	x0, [x19]
   b237c:	b4000220 	cbz	x0, b23c0 <CGPIOManager::Initialize()+0x60>
   b2380:	aa1303e3 	mov	x3, x19
   b2384:	52800681 	mov	w1, #0x34                  	// #52
   b2388:	90000002 	adrp	x2, b2000 <SErrorStub+0xc>
   b238c:	91184042 	add	x2, x2, #0x610
   b2390:	97ffeec8 	bl	adeb0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   b2394:	52800020 	mov	w0, #0x1                   	// #1
   b2398:	39002260 	strb	w0, [x19, #8]
   b239c:	f9400bf3 	ldr	x19, [sp, #16]
   b23a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b23a4:	d65f03c0 	ret
   b23a8:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b23ac:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b23b0:	9104c021 	add	x1, x1, #0x130
   b23b4:	9105c000 	add	x0, x0, #0x170
   b23b8:	52800762 	mov	w2, #0x3b                  	// #59
   b23bc:	97ffbed1 	bl	a1f00 <assertion_failed>
   b23c0:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b23c4:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b23c8:	9104c021 	add	x1, x1, #0x130
   b23cc:	91056000 	add	x0, x0, #0x158
   b23d0:	52800782 	mov	w2, #0x3c                  	// #60
   b23d4:	97ffbecb 	bl	a1f00 <assertion_failed>
   b23d8:	d503201f 	nop
   b23dc:	d503201f 	nop

00000000000b23e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   b23e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b23e4:	910003fd 	mov	x29, sp
   b23e8:	39402002 	ldrb	w2, [x0, #8]
   b23ec:	36000162 	tbz	w2, #0, b2418 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x38>
   b23f0:	b4000201 	cbz	x1, b2430 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x50>
   b23f4:	b9400822 	ldr	w2, [x1, #8]
   b23f8:	7100d45f 	cmp	w2, #0x35
   b23fc:	54000268 	b.hi	b2448 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   b2400:	8b224c02 	add	x2, x0, w2, uxtw #3
   b2404:	f9400840 	ldr	x0, [x2, #16]
   b2408:	b50002c0 	cbnz	x0, b2460 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   b240c:	f9000841 	str	x1, [x2, #16]
   b2410:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b2414:	d65f03c0 	ret
   b2418:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b241c:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2420:	9104c021 	add	x1, x1, #0x130
   b2424:	91062000 	add	x0, x0, #0x188
   b2428:	528008a2 	mov	w2, #0x45                  	// #69
   b242c:	97ffbeb5 	bl	a1f00 <assertion_failed>
   b2430:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b2434:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2438:	9104c021 	add	x1, x1, #0x130
   b243c:	91066000 	add	x0, x0, #0x198
   b2440:	528008e2 	mov	w2, #0x47                  	// #71
   b2444:	97ffbeaf 	bl	a1f00 <assertion_failed>
   b2448:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b244c:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2450:	9104c021 	add	x1, x1, #0x130
   b2454:	9106a000 	add	x0, x0, #0x1a8
   b2458:	52800922 	mov	w2, #0x49                  	// #73
   b245c:	97ffbea9 	bl	a1f00 <assertion_failed>
   b2460:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b2464:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2468:	9104c021 	add	x1, x1, #0x130
   b246c:	91050000 	add	x0, x0, #0x140
   b2470:	52800962 	mov	w2, #0x4b                  	// #75
   b2474:	97ffbea3 	bl	a1f00 <assertion_failed>
   b2478:	d503201f 	nop
   b247c:	d503201f 	nop

00000000000b2480 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   b2480:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b2484:	910003fd 	mov	x29, sp
   b2488:	39402002 	ldrb	w2, [x0, #8]
   b248c:	36000162 	tbz	w2, #0, b24b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   b2490:	b4000201 	cbz	x1, b24d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   b2494:	b9400821 	ldr	w1, [x1, #8]
   b2498:	7100d43f 	cmp	w1, #0x35
   b249c:	54000268 	b.hi	b24e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   b24a0:	8b214c01 	add	x1, x0, w1, uxtw #3
   b24a4:	f9400820 	ldr	x0, [x1, #16]
   b24a8:	b40002c0 	cbz	x0, b2500 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   b24ac:	f900083f 	str	xzr, [x1, #16]
   b24b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b24b4:	d65f03c0 	ret
   b24b8:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b24bc:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b24c0:	9104c021 	add	x1, x1, #0x130
   b24c4:	91062000 	add	x0, x0, #0x188
   b24c8:	52800a42 	mov	w2, #0x52                  	// #82
   b24cc:	97ffbe8d 	bl	a1f00 <assertion_failed>
   b24d0:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b24d4:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b24d8:	9104c021 	add	x1, x1, #0x130
   b24dc:	91066000 	add	x0, x0, #0x198
   b24e0:	52800a82 	mov	w2, #0x54                  	// #84
   b24e4:	97ffbe87 	bl	a1f00 <assertion_failed>
   b24e8:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b24ec:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b24f0:	9104c021 	add	x1, x1, #0x130
   b24f4:	9106a000 	add	x0, x0, #0x1a8
   b24f8:	52800ac2 	mov	w2, #0x56                  	// #86
   b24fc:	97ffbe81 	bl	a1f00 <assertion_failed>
   b2500:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b2504:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2508:	9104c021 	add	x1, x1, #0x130
   b250c:	91070000 	add	x0, x0, #0x1c0
   b2510:	52800b02 	mov	w2, #0x58                  	// #88
   b2514:	97ffbe7b 	bl	a1f00 <assertion_failed>
   b2518:	d503201f 	nop
   b251c:	d503201f 	nop

00000000000b2520 <CGPIOManager::InterruptHandler()>:
   b2520:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b2524:	910003fd 	mov	x29, sp
   b2528:	39402001 	ldrb	w1, [x0, #8]
   b252c:	a90153f3 	stp	x19, x20, [sp, #16]
   b2530:	36000621 	tbz	w1, #0, b25f4 <CGPIOManager::InterruptHandler()+0xd4>
   b2534:	d2800801 	mov	x1, #0x40                  	// #64
   b2538:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   b253c:	52800013 	mov	w19, #0x0                   	// #0
   b2540:	b9400021 	ldr	w1, [x1]
   b2544:	d503201f 	nop
   b2548:	37000141 	tbnz	w1, #0, b2570 <CGPIOManager::InterruptHandler()+0x50>
   b254c:	11000673 	add	w19, w19, #0x1
   b2550:	53017c21 	lsr	w1, w1, #1
   b2554:	12001262 	and	w2, w19, #0x1f
   b2558:	340002c2 	cbz	w2, b25b0 <CGPIOManager::InterruptHandler()+0x90>
   b255c:	7100da7f 	cmp	w19, #0x36
   b2560:	54ffff41 	b.ne	b2548 <CGPIOManager::InterruptHandler()+0x28>  // b.any
   b2564:	a94153f3 	ldp	x19, x20, [sp, #16]
   b2568:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b256c:	d65f03c0 	ret
   b2570:	2a1303e1 	mov	w1, w19
   b2574:	91000821 	add	x1, x1, #0x2
   b2578:	f8617814 	ldr	x20, [x0, x1, lsl #3]
   b257c:	b4000254 	cbz	x20, b25c4 <CGPIOManager::InterruptHandler()+0xa4>
   b2580:	aa1403e0 	mov	x0, x20
   b2584:	97fff347 	bl	af2a0 <CGPIOPin::InterruptHandler()>
   b2588:	3940e280 	ldrb	w0, [x20, #56]
   b258c:	3607fec0 	tbz	w0, #0, b2564 <CGPIOManager::InterruptHandler()+0x44>
   b2590:	29418680 	ldp	w0, w1, [x20, #12]
   b2594:	52800802 	mov	w2, #0x40                  	// #64
   b2598:	72a7e402 	movk	w2, #0x3f20, lsl #16
   b259c:	0b020000 	add	w0, w0, w2
   b25a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   b25a4:	b9000001 	str	w1, [x0]
   b25a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b25ac:	d65f03c0 	ret
   b25b0:	d2800881 	mov	x1, #0x44                  	// #68
   b25b4:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   b25b8:	52800413 	mov	w19, #0x20                  	// #32
   b25bc:	b9400021 	ldr	w1, [x1]
   b25c0:	17ffffe2 	b	b2548 <CGPIOManager::InterruptHandler()+0x28>
   b25c4:	2a1303e0 	mov	w0, w19
   b25c8:	97fff35a 	bl	af330 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   b25cc:	52800200 	mov	w0, #0x10                  	// #16
   b25d0:	72a1f900 	movk	w0, #0xfc8, lsl #16
   b25d4:	0b531400 	add	w0, w0, w19, lsr #5
   b25d8:	52800021 	mov	w1, #0x1                   	// #1
   b25dc:	1ad32021 	lsl	w1, w1, w19
   b25e0:	d37e7000 	ubfiz	x0, x0, #2, #29
   b25e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   b25e8:	b9000001 	str	w1, [x0]
   b25ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b25f0:	d65f03c0 	ret
   b25f4:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b25f8:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b25fc:	9104c021 	add	x1, x1, #0x130
   b2600:	91062000 	add	x0, x0, #0x188
   b2604:	52800bc2 	mov	w2, #0x5e                  	// #94
   b2608:	97ffbe3e 	bl	a1f00 <assertion_failed>
   b260c:	d503201f 	nop

00000000000b2610 <CGPIOManager::InterruptStub(void*)>:
   b2610:	b4000040 	cbz	x0, b2618 <CGPIOManager::InterruptStub(void*)+0x8>
   b2614:	17ffffc3 	b	b2520 <CGPIOManager::InterruptHandler()>
   b2618:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b261c:	b0000021 	adrp	x1, b7000 <_etext+0x49c8>
   b2620:	b0000020 	adrp	x0, b7000 <_etext+0x49c8>
   b2624:	910003fd 	mov	x29, sp
   b2628:	9104c021 	add	x1, x1, #0x130
   b262c:	91076000 	add	x0, x0, #0x1d8
   b2630:	528011c2 	mov	w2, #0x8e                  	// #142
   b2634:	97ffbe33 	bl	a1f00 <assertion_failed>
